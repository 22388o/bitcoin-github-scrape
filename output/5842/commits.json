[
  {
    "sha": "64efd3e282af9a86152d901585321eea2d8bf7c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGVmZDNlMjgyYWY5YTg2MTUyZDkwMTU4NTMyMWVlYTJkOGJmN2M1",
    "commit": {
      "author": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T08:03:26Z"
      },
      "committer": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T08:03:26Z"
      },
      "message": "stop using checkpoints",
      "tree": {
        "sha": "e3b94cb64c0b84730a2833c2affce8f1e5f870bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3b94cb64c0b84730a2833c2affce8f1e5f870bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64efd3e282af9a86152d901585321eea2d8bf7c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64efd3e282af9a86152d901585321eea2d8bf7c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64efd3e282af9a86152d901585321eea2d8bf7c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64efd3e282af9a86152d901585321eea2d8bf7c5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db4a1d598cf8b414b81ded64fd3a08230ad95d72"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 3,
      "deletions": 15
    },
    "files": [
      {
        "sha": "19d2dd6fb4f564d5fcc67ef929fe770bf08ca022",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64efd3e282af9a86152d901585321eea2d8bf7c5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64efd3e282af9a86152d901585321eea2d8bf7c5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=64efd3e282af9a86152d901585321eea2d8bf7c5",
        "patch": "@@ -1244,7 +1244,7 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n bool IsInitialBlockDownload()\n {\n     LOCK(cs_main);\n-    if (fImporting || fReindex || chainActive.Height() < Checkpoints::GetTotalBlocksEstimate())\n+    if (fImporting || fReindex)\n         return true;\n     static bool lockIBDState = false;\n     if (lockIBDState)\n@@ -1747,7 +1747,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n-    bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate();\n+    bool fScriptChecks = pindex->nHeight >= (pindexBestHeader->nHeight - 2016);\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -2267,7 +2267,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n         if (!fInitialDownload) {\n             uint256 hashNewTip = pindexNewTip->GetBlockHash();\n             // Relay inventory, but don't relay old inventory during initial block download.\n-            int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n+            int nBlockEstimate = pindexBestHeader->nHeight;\n             {\n                 LOCK(cs_vNodes);\n                 BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -2591,8 +2591,6 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n     assert(pindexPrev);\n \n-    int nHeight = pindexPrev->nHeight+1;\n-\n     // Check proof of work\n     if ((!Params().SkipProofOfWorkCheck()) &&\n        (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n@@ -2604,16 +2602,6 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n-    // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                         REJECT_CHECKPOINT, \"checkpoint mismatch\");\n-\n-    // Don't accept any forks from the main chain prior to last checkpoint\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n-\n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {"
      }
    ]
  },
  {
    "sha": "0a5dcf0b62ad80af424271cfb65da0b915b43aea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTVkY2YwYjYyYWQ4MGFmNDI0MjcxY2ZiNjVkYTBiOTE1YjQzYWVh",
    "commit": {
      "author": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T22:14:21Z"
      },
      "committer": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T22:14:21Z"
      },
      "message": "remove all references to checkpoints",
      "tree": {
        "sha": "a2184d0fd858f5048c69d99608680183325bfc17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2184d0fd858f5048c69d99608680183325bfc17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a5dcf0b62ad80af424271cfb65da0b915b43aea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5dcf0b62ad80af424271cfb65da0b915b43aea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5dcf0b62ad80af424271cfb65da0b915b43aea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5dcf0b62ad80af424271cfb65da0b915b43aea/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "64efd3e282af9a86152d901585321eea2d8bf7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64efd3e282af9a86152d901585321eea2d8bf7c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64efd3e282af9a86152d901585321eea2d8bf7c5"
      }
    ],
    "stats": {
      "total": 284,
      "additions": 8,
      "deletions": 276
    },
    "files": [
      {
        "sha": "3d4c20a841b941ce40fbb0f937d253a18a893e70",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -81,7 +81,6 @@ BITCOIN_CORE_H = \\\n   chainparamsbase.h \\\n   chainparams.h \\\n   chainparamsseeds.h \\\n-  checkpoints.h \\\n   checkqueue.h \\\n   clientversion.h \\\n   coincontrol.h \\\n@@ -167,7 +166,6 @@ libbitcoin_server_a_SOURCES = \\\n   alert.cpp \\\n   bloom.cpp \\\n   chain.cpp \\\n-  checkpoints.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "500f262a5b4539d9ef8de82c73123e6d22c7a7ab",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -41,7 +41,6 @@ BITCOIN_TESTS =\\\n   test/base64_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/checkblock_tests.cpp \\\n-  test/Checkpoints_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "49fb32900431a0bf339a841e84b095fa5bf1c85e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 72,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -44,59 +44,6 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n     }\n }\n \n-/**\n- * What makes a good checkpoint block?\n- * + Is surrounded by blocks with reasonable timestamps\n- *   (no blocks before with a timestamp after, none after with\n- *    timestamp before)\n- * + Contains no strange transactions\n- */\n-static Checkpoints::MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n-        ;\n-static const Checkpoints::CCheckpointData data = {\n-        &mapCheckpoints,\n-        1397080064, // * UNIX timestamp of last checkpoint block\n-        36544669,   // * total number of transactions between genesis and last checkpoint\n-                    //   (the tx=... number in the SetBestChain debug.log lines)\n-        60000.0     // * estimated number of transactions per day after checkpoint\n-    };\n-\n-static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n-static const Checkpoints::CCheckpointData dataTestnet = {\n-        &mapCheckpointsTestnet,\n-        1337966069,\n-        1488,\n-        300\n-    };\n-\n-static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n-static const Checkpoints::CCheckpointData dataRegtest = {\n-        &mapCheckpointsRegtest,\n-        0,\n-        0,\n-        0\n-    };\n-\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n@@ -173,11 +120,6 @@ class CMainParams : public CChainParams {\n         fSkipProofOfWorkCheck = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }\n-\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        return data;\n-    }\n };\n static CMainParams mainParams;\n \n@@ -230,10 +172,6 @@ class CTestNetParams : public CMainParams {\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n     }\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        return dataTestnet;\n-    }\n };\n static CTestNetParams testNetParams;\n \n@@ -274,10 +212,6 @@ class CRegTestParams : public CTestNetParams {\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        return dataRegtest;\n-    }\n };\n static CRegTestParams regTestParams;\n \n@@ -299,12 +233,6 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fMineBlocksOnDemand = true;\n     }\n \n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        // UnitTest share the same checkpoints as MAIN\n-        return data;\n-    }\n-\n     //! Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }"
      },
      {
        "sha": "3e6bd3100e85e245ccac814cf8b905d20239c607",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_CHAINPARAMS_H\n \n #include \"chainparamsbase.h\"\n-#include \"checkpoints.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n #include \"arith_uint256.h\"\n@@ -78,7 +77,6 @@ class CChainParams\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<CAddress>& FixedSeeds() const { return vFixedSeeds; }\n-    virtual const Checkpoints::CCheckpointData& Checkpoints() const = 0;\n protected:\n     CChainParams() {}\n "
      },
      {
        "sha": "71579bb309e727408fe56f008b40bc5605e6a6fd",
        "filename": "src/checkpoints.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 99,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64efd3e282af9a86152d901585321eea2d8bf7c5/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64efd3e282af9a86152d901585321eea2d8bf7c5/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=64efd3e282af9a86152d901585321eea2d8bf7c5",
        "patch": "@@ -1,99 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"checkpoints.h\"\n-\n-#include \"chainparams.h\"\n-#include \"main.h\"\n-#include \"uint256.h\"\n-\n-#include <stdint.h>\n-\n-#include <boost/foreach.hpp>\n-\n-namespace Checkpoints {\n-\n-    /**\n-     * How many times we expect transactions after the last checkpoint to\n-     * be slower. This number is a compromise, as it can't be accurate for\n-     * every system. When reindexing from a fast disk with a slow CPU, it\n-     * can be up to 20, while when downloading from a slow network with a\n-     * fast multicore CPU, it won't be much higher than 1.\n-     */\n-    static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n-\n-    bool fEnabled = true;\n-\n-    bool CheckBlock(int nHeight, const uint256& hash)\n-    {\n-        if (!fEnabled)\n-            return true;\n-\n-        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n-\n-        MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n-        if (i == checkpoints.end()) return true;\n-        return hash == i->second;\n-    }\n-\n-    //! Guess how far we are in the verification process at the given block index\n-    double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks) {\n-        if (pindex==NULL)\n-            return 0.0;\n-\n-        int64_t nNow = time(NULL);\n-\n-        double fSigcheckVerificationFactor = fSigchecks ? SIGCHECK_VERIFICATION_FACTOR : 1.0;\n-        double fWorkBefore = 0.0; // Amount of work done before pindex\n-        double fWorkAfter = 0.0;  // Amount of work left after pindex (estimated)\n-        // Work is defined as: 1.0 per transaction before the last checkpoint, and\n-        // fSigcheckVerificationFactor per transaction after.\n-\n-        const CCheckpointData &data = Params().Checkpoints();\n-\n-        if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n-            double nCheapBefore = pindex->nChainTx;\n-            double nCheapAfter = data.nTransactionsLastCheckpoint - pindex->nChainTx;\n-            double nExpensiveAfter = (nNow - data.nTimeLastCheckpoint)/86400.0*data.fTransactionsPerDay;\n-            fWorkBefore = nCheapBefore;\n-            fWorkAfter = nCheapAfter + nExpensiveAfter*fSigcheckVerificationFactor;\n-        } else {\n-            double nCheapBefore = data.nTransactionsLastCheckpoint;\n-            double nExpensiveBefore = pindex->nChainTx - data.nTransactionsLastCheckpoint;\n-            double nExpensiveAfter = (nNow - pindex->GetBlockTime())/86400.0*data.fTransactionsPerDay;\n-            fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n-            fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n-        }\n-\n-        return fWorkBefore / (fWorkBefore + fWorkAfter);\n-    }\n-\n-    int GetTotalBlocksEstimate()\n-    {\n-        if (!fEnabled)\n-            return 0;\n-\n-        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n-\n-        return checkpoints.rbegin()->first;\n-    }\n-\n-    CBlockIndex* GetLastCheckpoint()\n-    {\n-        if (!fEnabled)\n-            return NULL;\n-\n-        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n-\n-        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n-        {\n-            const uint256& hash = i.second;\n-            BlockMap::const_iterator t = mapBlockIndex.find(hash);\n-            if (t != mapBlockIndex.end())\n-                return t->second;\n-        }\n-        return NULL;\n-    }\n-\n-} // namespace Checkpoints"
      },
      {
        "sha": "29dc5f83a95e0d2bfd8212ed9f6dae8232ae7643",
        "filename": "src/checkpoints.h",
        "status": "removed",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64efd3e282af9a86152d901585321eea2d8bf7c5/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64efd3e282af9a86152d901585321eea2d8bf7c5/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=64efd3e282af9a86152d901585321eea2d8bf7c5",
        "patch": "@@ -1,44 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_CHECKPOINTS_H\n-#define BITCOIN_CHECKPOINTS_H\n-\n-#include \"uint256.h\"\n-\n-#include <map>\n-\n-class CBlockIndex;\n-\n-/** \n- * Block-chain checkpoints are compiled-in sanity checks.\n- * They are updated every release or three.\n- */\n-namespace Checkpoints\n-{\n-typedef std::map<int, uint256> MapCheckpoints;\n-\n-struct CCheckpointData {\n-    const MapCheckpoints *mapCheckpoints;\n-    int64_t nTimeLastCheckpoint;\n-    int64_t nTransactionsLastCheckpoint;\n-    double fTransactionsPerDay;\n-};\n-\n-//! Returns true if block passes checkpoint checks\n-bool CheckBlock(int nHeight, const uint256& hash);\n-\n-//! Return conservative estimate of total number of blocks, 0 if unknown\n-int GetTotalBlocksEstimate();\n-\n-//! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-CBlockIndex* GetLastCheckpoint();\n-\n-double GuessVerificationProgress(CBlockIndex* pindex, bool fSigchecks = true);\n-\n-extern bool fEnabled;\n-\n-} //namespace Checkpoints\n-\n-#endif // BITCOIN_CHECKPOINTS_H"
      },
      {
        "sha": "d814d430db6094946d641e061720debedafeb3c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -11,7 +11,6 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n-#include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"key.h\"\n #include \"main.h\"\n@@ -340,7 +339,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n         strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n         strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n@@ -682,7 +680,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // Checkmempool defaults to true in regtest mode\n     mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().DefaultCheckMemPool()));\n-    Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);"
      },
      {
        "sha": "764bd9209485d10f9a3b05e9de4ce04c068e1185",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -9,7 +9,6 @@\n #include \"addrman.h\"\n #include \"alert.h\"\n #include \"chainparams.h\"\n-#include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n@@ -1973,7 +1972,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n+      0.0, (unsigned int)pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n \n@@ -2978,7 +2977,7 @@ bool static LoadBlockIndexDB()\n     LogPrintf(\"LoadBlockIndexDB(): hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-        Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n+        0.0);\n \n     return true;\n }"
      },
      {
        "sha": "b9676921465ffa39ac716e37fe5110d5aaed79c9",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -9,7 +9,6 @@\n \n #include \"alert.h\"\n #include \"chainparams.h\"\n-#include \"checkpoints.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"net.h\"\n@@ -93,7 +92,7 @@ QDateTime ClientModel::getLastBlockDate() const\n double ClientModel::getVerificationProgress() const\n {\n     LOCK(cs_main);\n-    return Checkpoints::GuessVerificationProgress(chainActive.Tip());\n+    return 0.0;\n }\n \n void ClientModel::updateTimer()"
      },
      {
        "sha": "c8bc680dd84c439085be72442b455bd3a041e315",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"checkpoints.h\"\n #include \"main.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n@@ -490,7 +489,7 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n     obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(chainActive.Tip())));\n+    obj.push_back(Pair(\"verificationprogress\",  0.0));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     return obj;\n }"
      },
      {
        "sha": "a9b6cd44a87206736f1db673deb1951db1a289aa",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64efd3e282af9a86152d901585321eea2d8bf7c5/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64efd3e282af9a86152d901585321eea2d8bf7c5/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=64efd3e282af9a86152d901585321eea2d8bf7c5",
        "patch": "@@ -1,38 +0,0 @@\n-// Copyright (c) 2011-2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for block-chain checkpoints\n-//\n-\n-#include \"checkpoints.h\"\n-\n-#include \"uint256.h\"\n-\n-#include <boost/test/unit_test.hpp>\n-\n-using namespace std;\n-\n-BOOST_AUTO_TEST_SUITE(Checkpoints_tests)\n-\n-BOOST_AUTO_TEST_CASE(sanity)\n-{\n-    uint256 p11111 = uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n-    uint256 p134444 = uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n-    BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n-    BOOST_CHECK(Checkpoints::CheckBlock(134444, p134444));\n-\n-    \n-    // Wrong hashes at checkpoints should fail:\n-    BOOST_CHECK(!Checkpoints::CheckBlock(11111, p134444));\n-    BOOST_CHECK(!Checkpoints::CheckBlock(134444, p11111));\n-\n-    // ... but any hash not at a checkpoint should succeed:\n-    BOOST_CHECK(Checkpoints::CheckBlock(11111+1, p134444));\n-    BOOST_CHECK(Checkpoints::CheckBlock(134444+1, p11111));\n-\n-    BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate() >= 134444);\n-}    \n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "ec5fb489b27fb6410c11c111cee0b07b627ada61",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -57,7 +57,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     uint256 hash;\n \n     LOCK(cs_main);\n-    Checkpoints::fEnabled = false;\n \n     // Simple block creation, nothing special yet:\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -259,8 +258,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;\n-\n-    Checkpoints::fEnabled = true;\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "ee6ed8f20c54d35c965f902540d629d9b87cc0ea",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5dcf0b62ad80af424271cfb65da0b915b43aea/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "patch": "@@ -6,7 +6,6 @@\n #include \"wallet.h\"\n \n #include \"base58.h\"\n-#include \"checkpoints.h\"\n #include \"coincontrol.h\"\n #include \"net.h\"\n #include \"script/script.h\"\n@@ -947,12 +946,12 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             pindex = chainActive.Next(pindex);\n \n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        double dProgressStart = Checkpoints::GuessVerificationProgress(pindex, false);\n-        double dProgressTip = Checkpoints::GuessVerificationProgress(chainActive.Tip(), false);\n+        double dProgressStart = 0.0;\n+        double dProgressTip = 1.0;\n         while (pindex)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((Checkpoints::GuessVerificationProgress(pindex, false) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((0.0 / (dProgressTip - dProgressStart) * 100))));\n \n             CBlock block;\n             ReadBlockFromDisk(block, pindex);\n@@ -964,7 +963,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             pindex = chainActive.Next(pindex);\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, Checkpoints::GuessVerificationProgress(pindex));\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, 0.0);\n             }\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI"
      }
    ]
  },
  {
    "sha": "d9e618da5128ab9b12539119b5646cef318f2bf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWU2MThkYTUxMjhhYjliMTI1MzkxMTliNTY0NmNlZjMxOGYyYmY1",
    "commit": {
      "author": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T22:32:38Z"
      },
      "committer": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T22:32:38Z"
      },
      "message": "oops",
      "tree": {
        "sha": "265c24009217dcb0f26d7dc456745ae4eebd4869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/265c24009217dcb0f26d7dc456745ae4eebd4869"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9e618da5128ab9b12539119b5646cef318f2bf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e618da5128ab9b12539119b5646cef318f2bf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e618da5128ab9b12539119b5646cef318f2bf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e618da5128ab9b12539119b5646cef318f2bf5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5dcf0b62ad80af424271cfb65da0b915b43aea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5dcf0b62ad80af424271cfb65da0b915b43aea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "36e7d6e68afcd9e9651538841f84ab0d90d6f8d5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e618da5128ab9b12539119b5646cef318f2bf5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e618da5128ab9b12539119b5646cef318f2bf5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d9e618da5128ab9b12539119b5646cef318f2bf5",
        "patch": "@@ -951,7 +951,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n         while (pindex)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((0.0 / (dProgressTip - dProgressStart) * 100))));\n+                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, 0)));\n \n             CBlock block;\n             ReadBlockFromDisk(block, pindex);"
      }
    ]
  },
  {
    "sha": "d52b2ede0cd7e27712e35340ebeb64bac946f800",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTJiMmVkZTBjZDdlMjc3MTJlMzUzNDBlYmViNjRiYWM5NDZmODAw",
    "commit": {
      "author": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T22:42:05Z"
      },
      "committer": {
        "name": "phantomcircuit",
        "email": "patrick@cloudhashing.com",
        "date": "2015-02-28T22:42:05Z"
      },
      "message": "increase to 2016*4",
      "tree": {
        "sha": "36aadbdaa5cd67500be7aa89048a46a7c2d11440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36aadbdaa5cd67500be7aa89048a46a7c2d11440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d52b2ede0cd7e27712e35340ebeb64bac946f800",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52b2ede0cd7e27712e35340ebeb64bac946f800",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d52b2ede0cd7e27712e35340ebeb64bac946f800",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52b2ede0cd7e27712e35340ebeb64bac946f800/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d9e618da5128ab9b12539119b5646cef318f2bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e618da5128ab9b12539119b5646cef318f2bf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e618da5128ab9b12539119b5646cef318f2bf5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5053a11c7104564166ab1c3f7bd5d762f0d54f17",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52b2ede0cd7e27712e35340ebeb64bac946f800/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52b2ede0cd7e27712e35340ebeb64bac946f800/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d52b2ede0cd7e27712e35340ebeb64bac946f800",
        "patch": "@@ -1746,7 +1746,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n-    bool fScriptChecks = pindex->nHeight >= (pindexBestHeader->nHeight - 2016);\n+    bool fScriptChecks = pindex->nHeight >= (pindexBestHeader->nHeight - (2016*4));\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent."
      }
    ]
  },
  {
    "sha": "8d83af094a48e1c2c775e90833505e442d7d6fd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDgzYWYwOTRhNDhlMWMyYzc3NWU5MDgzMzUwNWU0NDJkN2Q2ZmQx",
    "commit": {
      "author": {
        "name": "patrick",
        "email": "patrick@debian",
        "date": "2015-03-14T06:41:22Z"
      },
      "committer": {
        "name": "patrick",
        "email": "patrick@debian",
        "date": "2015-03-14T06:41:22Z"
      },
      "message": "Merge branch 'master' into no_checkpoints\n\nConflicts:\n\tsrc/chainparams.cpp\n\tsrc/init.cpp\n\tsrc/test/Checkpoints_tests.cpp",
      "tree": {
        "sha": "e68b6b30b7999367d44370b4ee7270167a592fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e68b6b30b7999367d44370b4ee7270167a592fd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d83af094a48e1c2c775e90833505e442d7d6fd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d83af094a48e1c2c775e90833505e442d7d6fd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d83af094a48e1c2c775e90833505e442d7d6fd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d83af094a48e1c2c775e90833505e442d7d6fd1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d52b2ede0cd7e27712e35340ebeb64bac946f800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52b2ede0cd7e27712e35340ebeb64bac946f800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52b2ede0cd7e27712e35340ebeb64bac946f800"
      },
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      }
    ],
    "stats": {
      "total": 2067,
      "additions": 1278,
      "deletions": 789
    },
    "files": [
      {
        "sha": "9c18729b42a85461f71e4b2c1f37d9a01f2e3af0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -10,6 +10,7 @@ env:\n   global:\n     - MAKEJOBS=-j3\n     - RUN_TESTS=false\n+    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n     - CCACHE_COMPRESS=1\n@@ -25,19 +26,19 @@ matrix:\n   fast_finish: true\n   include:\n     - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      },
      {
        "sha": "2c918218bb836e19cf078b55526e34f72a456eee",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 20,
        "deletions": 35,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -115,9 +115,9 @@ AC_ARG_ENABLE([hardening],\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n-  [attempt to reduce exported symbols in the resulting executables (default is yes)])],\n+  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n   [use_reduce_exports=$enableval],\n-  [use_reduce_exports=auto])\n+  [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n@@ -133,7 +133,7 @@ AC_ARG_ENABLE([lcov],\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc and libstdc++])],\n+  [enable backwards compatibility with glibc])],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n@@ -350,8 +350,8 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n fi\n \n-dnl Require little endian\n-AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+dnl Check for endianness\n+AC_C_BIGENDIAN\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n@@ -438,17 +438,22 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n                  #endif])\n \n+AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n+\t\t[#if HAVE_BYTESWAP_H\n+                 #include <byteswap.h>\n+                 #endif])\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n@@ -471,22 +476,14 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   [\n     AC_MSG_RESULT(no)\n     if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n+      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n-      AC_MSG_WARN([Cannot find a working visibility attribute. Disabling reduced exports.])\n-      use_reduce_exports=no\n   ]\n )\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [\n-    if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])\n-    fi\n-    AC_MSG_WARN([Cannot set default symbol visibility. Disabling reduced exports.])\n-    use_reduce_exports=no\n-  ])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -533,7 +530,7 @@ AX_BOOST_THREAD\n AX_BOOST_CHRONO\n \n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_CHECKING([for working boost reduced exports])\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n@@ -547,25 +544,14 @@ if test x$use_reduce_exports != xno; then\n       #endif\n     ]])],[\n       AC_MSG_RESULT(yes)\n-    ],[:\n-    if test x$use_reduce_exports = xauto; then\n-      use_reduce_exports=no\n-    else\n-      if test x$use_reduce_exports = xyes; then\n-        AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n-      fi\n-    fi\n-    AC_MSG_RESULT(no)\n-    AC_MSG_WARN([boost versions < 1.49 are known to have symbol visibility issues. Disabling reduced exports.])\n+    ],[\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n-\n-elif test x$use_reduce_exports = xauto; then\n-    use_reduce_exports=yes\n fi\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n fi\n@@ -827,7 +813,7 @@ else\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_RESULT([yes])\n else\n   AC_MSG_RESULT([no])\n@@ -849,7 +835,6 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n-AM_CONDITIONAL([USE_LIBSECP256K1],[test x$use_libsecp256k1 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "dde4af34915c2ccf07f0dc184779416efe60f4de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -15,6 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n+- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -23,7 +24,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n \n@@ -69,6 +70,14 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Ubuntu precise hack: Not an issue in later versions.\n+  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n+  #   package which provides libstdc++_pic.a, but the linker can't find it.\n+  # Symlink it to a path that will be included in our link-line so that the\n+  # linker picks it up before the default libstdc++.a.\n+  # This is only necessary for 64bit.\n+  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      },
      {
        "sha": "b401482c70d4b329c6579e0664e28b24191db433",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "2d72f7b6e5aafe7935a7289dfee1f6e103e16c10",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      },
      {
        "sha": "05ef33f2ee83326eeb264c25c8744c16f82f2d33",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -6,7 +6,6 @@ SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_WALLET ?=\n NO_UPNP ?=\n-USE_LINUX_STATIC_QT5 ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)"
      },
      {
        "sha": "24e1231d8265f60f54af3ca2f9ece954b0c48452",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -23,7 +23,6 @@ NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n DEBUG: disable some optimizations and enable more runtime checking\n-USE_LINUX_STATIC_QT5: Build a static qt5 rather than shared qt4. Linux only.\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      },
      {
        "sha": "03908aba599ed82d375eb340f3837957dbcb5efe",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,15 +4,10 @@ native_packages := native_ccache native_comparisontool\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt46_linux_packages = qt46 expat dbus libxcb xcb_proto libXau xproto freetype libX11 xextproto libXext xtrans libICE libSM\n-qt5_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n-\n+qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-qt_linux_$(USE_LINUX_STATIC_QT5):=$(qt5_linux_packages)\n-qt_linux_:=$(qt46_linux_packages)\n-qt_linux_packages:=$(qt_linux_$(USE_LINUX_STATIC_QT5))\n \n wallet_packages=bdb\n "
      },
      {
        "sha": "a8bfbe6e6c7f2ca1e3fb0acfc9933ab840dc4934",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test InvalidateBlock code\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+class InvalidateTest(BitcoinTestFramework):\n+    \n+        \n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+                 \n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False \n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        \n+    def run_test(self):\n+        print \"Mine 4 blocks on Node 0\"\n+        self.nodes[0].setgenerate(True, 4)\n+        assert(self.nodes[0].getblockcount() == 4)\n+        besthash = self.nodes[0].getbestblockhash()\n+\n+        print \"Mine competing 6 blocks on Node 1\"\n+        self.nodes[1].setgenerate(True, 6)\n+        assert(self.nodes[1].getblockcount() == 6)\n+\n+        print \"Connect nodes to force a reorg\"\n+        connect_nodes_bi(self.nodes,0,1)\n+        sync_blocks(self.nodes)\n+        assert(self.nodes[0].getblockcount() == 6)\n+        badhash = self.nodes[1].getblockhash(2)\n+\n+        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        self.nodes[0].invalidateblock(badhash)\n+        newheight = self.nodes[0].getblockcount()\n+        newhash = self.nodes[0].getbestblockhash()\n+        if (newheight != 4 or newhash != besthash):\n+            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+\n+if __name__ == '__main__':\n+    InvalidateTest().main()"
      },
      {
        "sha": "0ab4cda0ec17a941fdeabf3f9741b29ce6b21ed4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -140,6 +140,8 @@ BITCOIN_CORE_H = \\\n   walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n+  compat/byteswap.h \\\n+  compat/endian.h \\\n   compat/sanity.h\n \n JSON_H = \\\n@@ -278,7 +280,6 @@ libbitcoin_util_a_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n-libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n@@ -370,16 +371,12 @@ libbitcoinconsensus_la_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n-  libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n \n-if USE_LIBSECP256K1\n-libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n-endif\n endif\n #\n "
      },
      {
        "sha": "291cc415c95fbb6bab220438fabb56384cfd8944",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -54,6 +54,7 @@ BITCOIN_TESTS =\\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n+  test/pow_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n@@ -64,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/test_bitcoin.cpp \\\n+  test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "2e613635761d8622032ff85c51f506548700f70d",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n #include <stdio.h>\n #include <string.h>\n@@ -246,14 +247,14 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.begin(), a.pn, a.size());\n+    for(int x=0; x<a.WIDTH; ++x)\n+        WriteLE32(b.begin() + x*4, a.pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.pn, a.begin(), a.size());\n+    for(int x=0; x<b.WIDTH; ++x)\n+        b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      },
      {
        "sha": "2fa8de6fd83996e2543e5670be49730053ed2736",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -20,21 +20,21 @@ using namespace json_spirit;\n std::string HelpMessageCli()\n {\n     string strUsage;\n-    strUsage += _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n-    strUsage += \"  -rpcconnect=<ip>       \" + strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+\n+    strUsage += HelpMessageGroup(_(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "78f5c2c4b6bf6fe21846e7c1d6ca906d8e333e08",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 27,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -54,38 +54,34 @@ static bool AppInitRawTx(int argc, char* argv[])\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Options:\") + \"\\n\";\n-        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n-        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n-        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n-        strUsage += \"  -txid                   \" + _(\"Output only the hex-encoded transaction id of the resultant transaction.\") + \"\\n\";\n-        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Options:\"));\n+        strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+        strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n+        strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n+        strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n+        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-\n-        strUsage = _(\"Commands:\") + \"\\n\";\n-        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n-        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n-        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n-        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n-        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n-        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n-        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n-        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n-        strUsage += \"      This command requires JSON registers:\\n\";\n-        strUsage += \"      prevtxs=JSON object\\n\";\n-        strUsage += \"      privatekeys=JSON object\\n\";\n-        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Commands:\"));\n+        strUsage += HelpMessageOpt(\"delin=N\", _(\"Delete input N from TX\"));\n+        strUsage += HelpMessageOpt(\"delout=N\", _(\"Delete output N from TX\"));\n+        strUsage += HelpMessageOpt(\"in=TXID:VOUT\", _(\"Add input to TX\"));\n+        strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n+        strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n+        strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n+        strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n+            _(\"This command requires JSON registers:\") +\n+            _(\"prevtxs=JSON object\") + \", \" +\n+            _(\"privatekeys=JSON object\") + \". \" +\n+            _(\"See signrawtransaction docs for format of sighash flags, JSON objects.\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Register Commands:\") + \"\\n\";\n-        strUsage += \"  load=NAME:FILENAME     \" + _(\"Load JSON file FILENAME into register NAME\") + \"\\n\";\n-        strUsage += \"  set=NAME:JSON-STRING   \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Register Commands:\"));\n+        strUsage += HelpMessageOpt(\"load=NAME:FILENAME\", _(\"Load JSON file FILENAME into register NAME\"));\n+        strUsage += HelpMessageOpt(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n         return false;"
      },
      {
        "sha": "86c556894ebe014fab2911cd90d9d90b4248cb98",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -117,7 +117,6 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fSkipProofOfWorkCheck = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }\n };\n@@ -244,16 +243,8 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n };\n static CUnitTestParams unitTestParams;\n \n-\n static CChainParams *pCurrentParams = 0;\n \n-CModifiableParams *ModifiableParams()\n-{\n-   assert(pCurrentParams);\n-   assert(pCurrentParams==&unitTestParams);\n-   return (CModifiableParams*)&unitTestParams;\n-}\n-\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -267,8 +258,6 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n-        case CBaseChainParams::UNITTEST:\n-            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "8ef359b45812474cf401ee5d5b7235ec31bbd611",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 29,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -13,8 +13,6 @@\n \n #include <vector>\n \n-typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n-\n struct CDNSSeedData {\n     std::string name, host;\n     CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}\n@@ -41,7 +39,7 @@ class CChainParams\n     };\n \n     const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n-    const MessageStartChars& MessageStart() const { return pchMessageStart; }\n+    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n     const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n@@ -61,8 +59,6 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /** Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n-    /** Skip proof-of-work check: allow mining of any difficulty block */\n-    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -81,7 +77,7 @@ class CChainParams\n     CChainParams() {}\n \n     uint256 hashGenesisBlock;\n-    MessageStartChars pchMessageStart;\n+    CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n@@ -104,29 +100,9 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fSkipProofOfWorkCheck;\n     bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n-/** \n- * Modifiable parameters interface is used by test cases to adapt the parameters in order\n- * to test specific features more easily. Test cases should always restore the previous\n- * values after finalization.\n- */\n-\n-class CModifiableParams {\n-public:\n-    //! Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n-    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n-    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n-};\n-\n-\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -136,9 +112,6 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n-/** Get modifiable network parameters (UNITTEST only) */\n-CModifiableParams *ModifiableParams();\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "7d82d689ec45f9f96bcae66da6f196db4ee8323b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -82,9 +82,6 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n-    case CBaseChainParams::UNITTEST:\n-        pCurrentBaseParams = &unitTestParams;\n-        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "421a3a06ff4c6c76ece3554963941daccdb2906f",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n-        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "899220bdc549053927edf86a29bc415310fb5eba",
        "filename": "src/compat/byteswap.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_BYTESWAP_H\n+#define BITCOIN_COMPAT_BYTESWAP_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_BYTESWAP_H)\n+#include <byteswap.h>\n+#endif\n+\n+#if HAVE_DECL_BSWAP_16 == 0\n+inline uint16_t bswap_16(uint16_t x)\n+{\n+    return (x >> 8) | ((x & 0x00ff) << 8);\n+}\n+#endif // HAVE_DECL_BSWAP16\n+\n+#if HAVE_DECL_BSWAP_32 == 0\n+inline uint32_t bswap_32(uint32_t x)\n+{\n+    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n+            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n+}\n+#endif // HAVE_DECL_BSWAP32\n+\n+#if HAVE_DECL_BSWAP_64 == 0\n+inline uint64_t bswap_64(uint64_t x)\n+{\n+     return (((x & 0xff00000000000000ull) >> 56)\n+          | ((x & 0x00ff000000000000ull) >> 40)\n+          | ((x & 0x0000ff0000000000ull) >> 24)\n+          | ((x & 0x000000ff00000000ull) >> 8)\n+          | ((x & 0x00000000ff000000ull) << 8)\n+          | ((x & 0x0000000000ff0000ull) << 24)\n+          | ((x & 0x000000000000ff00ull) << 40)\n+          | ((x & 0x00000000000000ffull) << 56));\n+}\n+#endif // HAVE_DECL_BSWAP64\n+\n+#endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "4d041d655411738476ecbc1e5c96e845452d8b8f",
        "filename": "src/compat/endian.h",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -0,0 +1,194 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_ENDIAN_H\n+#define BITCOIN_COMPAT_ENDIAN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include \"compat/byteswap.h\"\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+#if defined(WORDS_BIGENDIAN)\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return big_endian_16bits;\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return bswap_16(little_endian_16bits);\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return big_endian_32bits;\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return bswap_32(little_endian_32bits);\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return big_endian_64bits;\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return bswap_64(little_endian_64bits);\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#else // WORDS_BIGENDIAN\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return bswap_16(big_endian_16bits);\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return little_endian_16bits;\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return bswap_32(big_endian_32bits);\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return little_endian_32bits;\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return bswap_64(big_endian_64bits);\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return little_endian_64bits;\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#endif // WORDS_BIGENDIAN\n+\n+#endif // BITCOIN_COMPAT_ENDIAN_H"
      },
      {
        "sha": "4f2771e57a086ca983cec57b42376c003d480da8",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 94,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52b2ede0cd7e27712e35340ebeb64bac946f800/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52b2ede0cd7e27712e35340ebeb64bac946f800/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=d52b2ede0cd7e27712e35340ebeb64bac946f800",
        "patch": "@@ -1,94 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <cstddef>\n-#include <istream>\n-#include <stdexcept>\n-#include <typeinfo>\n-\n-#ifndef _GLIBCXX_USE_NOEXCEPT\n-#define _GLIBCXX_USE_NOEXCEPT throw()\n-#endif\n-\n-namespace std\n-{\n-const char* bad_exception::what() const throw()\n-{\n-    return \"std::bad_exception\";\n-}\n-\n-const char* bad_cast::what() const throw()\n-{\n-    return \"std::bad_cast\";\n-}\n-\n-const char* bad_alloc::what() const throw()\n-{\n-    return \"std::bad_alloc\";\n-}\n-\n-namespace __detail\n-{\n-struct _List_node_base {\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n-    {\n-        _M_next = __position;\n-        _M_prev = __position->_M_prev;\n-        __position->_M_prev->_M_next = this;\n-        __position->_M_prev = this;\n-    }\n-\n-    void _M_unhook() __attribute__((used))\n-    {\n-        _List_node_base* const __next_node = _M_next;\n-        _List_node_base* const __prev_node = _M_prev;\n-        __prev_node->_M_next = __next_node;\n-        __next_node->_M_prev = __prev_node;\n-    }\n-\n-    _List_node_base* _M_next;\n-    _List_node_base* _M_prev;\n-};\n-} // namespace detail\n-\n-template ostream& ostream::_M_insert(bool);\n-template ostream& ostream::_M_insert(long);\n-template ostream& ostream::_M_insert(double);\n-template ostream& ostream::_M_insert(unsigned long);\n-template ostream& ostream::_M_insert(const void*);\n-template ostream& __ostream_insert(ostream&, const char*, streamsize);\n-template istream& istream::_M_extract(long&);\n-template istream& istream::_M_extract(unsigned short&);\n-\n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n-\n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n-\n-// Used with permission.\n-// See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n-\n-void ctype<char>::_M_widen_init() const\n-{\n-    char __tmp[sizeof(_M_widen)];\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-\n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        if (__tmp[__i] != _M_widen[__i]) {\n-            _M_widen_ok = 2;\n-            break;\n-        }\n-}\n-\n-void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void __throw_out_of_range_fmt(const char* err, ...)\n-{\n-    // Safe and over-simplified version. Ignore the format and print it as-is.\n-    __throw_out_of_range(err);\n-}\n-\n-} // namespace std"
      },
      {
        "sha": "580c72f5a6480f1e884120d78b51fb628fe515dc",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 65,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -11,110 +11,56 @@\n \n #include <stdint.h>\n \n-#if defined(HAVE_ENDIAN_H)\n-#include <endian.h>\n-#endif\n+#include \"compat/endian.h\"\n+\n+uint16_t static inline ReadLE16(const unsigned char* ptr)\n+{\n+    return le16toh(*((uint16_t*)ptr));\n+}\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint32_t*)ptr);\n-#else\n-    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n-#endif\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint64_t*)ptr);\n-#else\n-    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n-            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n-#endif\n+}\n+\n+void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+{\n+    *((uint16_t*)ptr) = htole16(x);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint32_t*)ptr) = x;\n-#else\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint64_t*)ptr) = x;\n-#else\n-    ptr[7] = x >> 56;\n-    ptr[6] = x >> 48;\n-    ptr[5] = x >> 40;\n-    ptr[4] = x >> 32;\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n-#else\n-    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n-#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n-#else\n-    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n-            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n-#endif\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n-#else\n-    ptr[0] = x >> 24;\n-    ptr[1] = x >> 16;\n-    ptr[2] = x >> 8;\n-    ptr[3] = x;\n-#endif\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n-#else\n-    ptr[0] = x >> 56;\n-    ptr[1] = x >> 48;\n-    ptr[2] = x >> 40;\n-    ptr[3] = x >> 32;\n-    ptr[4] = x >> 24;\n-    ptr[5] = x >> 16;\n-    ptr[6] = x >> 8;\n-    ptr[7] = x;\n-#endif\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      },
      {
        "sha": "36946b7dcca255e08a00529f441a2787227386d2",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 34,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -39,22 +39,31 @@ void CDBEnv::EnvShutdown()\n         return;\n \n     fDbEnvInit = false;\n-    int ret = dbenv.close(0);\n+    int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n \n-CDBEnv::CDBEnv() : dbenv(DB_CXX_NO_EXCEPTIONS)\n+void CDBEnv::Reset()\n {\n+    delete dbenv;\n+    dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n     fDbEnvInit = false;\n     fMockDb = false;\n }\n \n+CDBEnv::CDBEnv() : dbenv(NULL)\n+{\n+    Reset();\n+}\n+\n CDBEnv::~CDBEnv()\n {\n     EnvShutdown();\n+    delete dbenv;\n+    dbenv = NULL;\n }\n \n void CDBEnv::Close()\n@@ -79,17 +88,17 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     if (GetBoolArg(\"-privdb\", true))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv.set_lg_dir(pathLogDir.string().c_str());\n-    dbenv.set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n-    dbenv.set_lg_bsize(0x10000);\n-    dbenv.set_lg_max(1048576);\n-    dbenv.set_lk_max_locks(40000);\n-    dbenv.set_lk_max_objects(40000);\n-    dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-    dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv.open(path.string().c_str(),\n+    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n+    dbenv->set_lg_bsize(0x10000);\n+    dbenv->set_lg_max(1048576);\n+    dbenv->set_lk_max_locks(40000);\n+    dbenv->set_lk_max_objects(40000);\n+    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = dbenv->open(path.string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -116,14 +125,14 @@ void CDBEnv::MakeMock()\n \n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n \n-    dbenv.set_cachesize(1, 0, 1);\n-    dbenv.set_lg_bsize(10485760 * 4);\n-    dbenv.set_lg_max(10485760);\n-    dbenv.set_lk_max_locks(10000);\n-    dbenv.set_lk_max_objects(10000);\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n-    int ret = dbenv.open(NULL,\n+    dbenv->set_cachesize(1, 0, 1);\n+    dbenv->set_lg_bsize(10485760 * 4);\n+    dbenv->set_lg_max(10485760);\n+    dbenv->set_lk_max_locks(10000);\n+    dbenv->set_lk_max_objects(10000);\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv->open(NULL,\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -144,7 +153,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n     if (result == 0)\n         return VERIFY_OK;\n@@ -167,7 +176,7 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n     stringstream strDump;\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n@@ -208,10 +217,10 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n void CDBEnv::CheckpointLSN(const std::string& strFile)\n {\n-    dbenv.txn_checkpoint(0, 0, 0);\n+    dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv.lsn_reset(strFile.c_str(), 0);\n+    dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n \n@@ -237,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL) {\n-            pdb = new Db(&bitdb.dbenv, 0);\n+            pdb = new Db(bitdb.dbenv, 0);\n \n             bool fMockDb = bitdb.IsMock();\n             if (fMockDb) {\n@@ -284,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -324,7 +333,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n     this->CloseDb(strFile);\n \n     LOCK(cs_db);\n-    int rc = dbenv.dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n+    int rc = dbenv->dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n     return (rc == 0);\n }\n \n@@ -344,7 +353,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n-                    Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n+                    Db* pdbCopy = new Db(bitdb.dbenv, 0);\n \n                     int ret = pdbCopy->open(NULL,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -394,10 +403,10 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(&bitdb.dbenv, 0);\n+                    Db dbA(bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n-                    Db dbB(&bitdb.dbenv, 0);\n+                    Db dbB(bitdb.dbenv, 0);\n                     if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -430,10 +439,10 @@ void CDBEnv::Flush(bool fShutdown)\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv.lsn_reset(strFile.c_str(), 0);\n+                    dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n@@ -443,7 +452,7 @@ void CDBEnv::Flush(bool fShutdown)\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {\n-                dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n+                dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n                     boost::filesystem::remove_all(path / \"database\");"
      },
      {
        "sha": "71133f969914ae47559f15a5ecf07e30a1644526",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -39,12 +39,14 @@ class CDBEnv\n \n public:\n     mutable CCriticalSection cs_db;\n-    DbEnv dbenv;\n+    DbEnv *dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n     CDBEnv();\n     ~CDBEnv();\n+    void Reset();\n+\n     void MakeMock();\n     bool IsMock() { return fMockDb; }\n \n@@ -79,7 +81,7 @@ class CDBEnv\n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n-        int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n+        int ret = dbenv->txn_begin(NULL, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return NULL;\n         return ptxn;"
      },
      {
        "sha": "20d5d217778f2beb5f007d6e3e36a8175c69ea10",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n \n+\n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n@@ -23,10 +25,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n         //----------\n         // body\n-        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n \n         for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = blocks[i];\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n \n             k1 *= c1;\n             k1 = ROTL32(k1, 15);"
      },
      {
        "sha": "6dc36c0652a9d3d34a081b551e769eba0f19843b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 118,
        "changes": 253,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -255,156 +255,173 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    string strUsage = _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n-    strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288) + \"\\n\";\n-    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3) + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n+    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n+    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n #if !defined(WIN32)\n-        strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n #endif\n     }\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -dbcache=<n>           \" + strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache) + \"\\n\";\n-    strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n-    strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n-    strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\"));\n #if !defined(WIN32)\n-    strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += \"  -txindex               \" + strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n-    strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n-    strUsage += \"  -banscore=<n>          \" + strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100) + \"\\n\";\n-    strUsage += \"  -bantime=<n>           \" + strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400) + \"\\n\";\n-    strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n-    strUsage += \"  -discover              \" + _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\") + \"\\n\";\n-    strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\") + \"\\n\";\n-    strUsage += \"  -dnsseed               \" + _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") + \"\\n\";\n-    strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n-    strUsage += \"  -forcednsseed          \" + strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n-    strUsage += \"  -maxconnections=<n>    \" + strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125) + \"\\n\";\n-    strUsage += \"  -maxreceivebuffer=<n>  \" + strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000) + \"\\n\";\n-    strUsage += \"  -maxsendbuffer=<n>     \" + strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000) + \"\\n\";\n-    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n-    strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\") + \"\\n\";\n-    strUsage += \"  -permitbaremultisig    \" + strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -port=<port>           \" + strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333) + \"\\n\";\n-    strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n-    strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-    strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+\n+    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n+    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n+    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n+    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n+    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n+    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening)\"));\n #else\n-    strUsage += \"  -upnp                  \" + strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n #endif\n #endif\n-    strUsage += \"  -whitebind=<addr>      \" + _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -whitelist=<netmask>   \" + _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+        \n \n #ifdef ENABLE_WALLET\n-    strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n-    strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n-    strUsage += \"  -keypool=<n>           \" + strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100) + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (GetBoolArg(\"-help-debug\", false))\n-        strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n-    strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n-    strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-    strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"),\n+        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+        \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+                    \n #endif\n \n-    strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n-        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(_(\"Force safe mode (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", _(\"Randomly drop 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", _(\"Randomly fuzz 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0));\n     }\n-    strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n-    strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"<category> can be:\");\n-    strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n-        strUsage += \", qt\";\n-    strUsage += \".\\n\";\n+        debugCategories += \", qt\";\n+    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n #ifdef ENABLE_WALLET\n-    strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n #endif\n-    strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n-    strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -logtimestamps         \" + strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n-        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n-        strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000));\n     }\n-    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \" \" +\n+            _(\"This is intended for regression testing tools and app development.\") + \" \" +\n+            _(\"In this mode -genproclimit controls how many blocks are generated immediately.\"));\n+    }\n+    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n+\n+    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n+    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n+    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n+    strUsage += HelpMessageOpt(\"-rpckeepalive\", strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslcertificatechainfile=<file.cert>\", strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n+\n+    if (mode == HMM_BITCOIN_QT)\n+    {\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (GetBoolArg(\"-help-debug\", false)) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", _(\"Allow self signed root certificates (default: 0)\"));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n     }\n-    strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n-    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n-    strUsage += \"  -blockprioritysize=<n> \" + strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC server options:\") + \"\\n\";\n-    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n-    strUsage += \"  -rest                  \" + strprintf(_(\"Accept public REST requests (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n-    strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\") + \"\\n\";\n-    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n-    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\") + \"\\n\";\n \n     return strUsage;\n }"
      },
      {
        "sha": "64c9bc71190cc65968f4db81c8e2f56e93abc50d",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -208,11 +208,9 @@ void CExtKey::Decode(const unsigned char code[74]) {\n }\n \n bool ECC_InitSanityCheck() {\n-#if !defined(USE_SECP256K1)\n     if (!CECKey::SanityCheck()) {\n         return false;\n     }\n-#endif\n     CKey key;\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();"
      },
      {
        "sha": "5c5eb231a02e206735f6a1a19f29781370c65a68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 10,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -53,7 +53,6 @@ bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n-\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n@@ -2311,7 +2310,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n         if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n-            setBlockIndexCandidates.insert(pindex);\n+            setBlockIndexCandidates.insert(it->second);\n         }\n         it++;\n     }\n@@ -2454,8 +2453,11 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n     }\n \n     nLastBlockFile = nFile;\n-    vinfoBlockFile[nFile].nSize += nAddSize;\n     vinfoBlockFile[nFile].AddBlock(nHeight, nTime);\n+    if (fKnown)\n+        vinfoBlockFile[nFile].nSize = std::max(pos.nPos + nAddSize, vinfoBlockFile[nFile].nSize);\n+    else\n+        vinfoBlockFile[nFile].nSize += nAddSize;\n \n     if (!fKnown) {\n         unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n@@ -2591,8 +2593,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     assert(pindexPrev);\n \n     // Check proof of work\n-    if ((!Params().SkipProofOfWorkCheck()) &&\n-       (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+    if ((block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n@@ -3072,10 +3073,31 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n \n void UnloadBlockIndex()\n {\n-    mapBlockIndex.clear();\n+    LOCK(cs_main);\n     setBlockIndexCandidates.clear();\n     chainActive.SetTip(NULL);\n     pindexBestInvalid = NULL;\n+    pindexBestHeader = NULL;\n+    mempool.clear();\n+    mapOrphanTransactions.clear();\n+    mapOrphanTransactionsByPrev.clear();\n+    nSyncStarted = 0;\n+    mapBlocksUnlinked.clear();\n+    vinfoBlockFile.clear();\n+    nLastBlockFile = 0;\n+    nBlockSequenceId = 1;\n+    mapBlockSource.clear();\n+    mapBlocksInFlight.clear();\n+    nQueuedValidatedHeaders = 0;\n+    nPreferredDownload = 0;\n+    setDirtyBlockIndex.clear();\n+    setDirtyFileInfo.clear();\n+    mapNodeState.clear();\n+\n+    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+        delete entry.second;\n+    }\n+    mapBlockIndex.clear();\n }\n \n bool LoadBlockIndex()\n@@ -4008,7 +4030,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"getaddr\")\n+    // This asymmetric behavior for inbound and outbound connections was introduced\n+    // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n+    // to users' AddrMan and later request them by sending getaddr messages. \n+    // Making users (which are behind NAT and can only make outgoing connections) ignore \n+    // getaddr message mitigates the attack.\n+    else if ((strCommand == \"getaddr\") && (pfrom->fInbound))\n     {\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();\n@@ -4292,7 +4319,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Read header\n         CMessageHeader& hdr = msg.hdr;\n-        if (!hdr.IsValid())\n+        if (!hdr.IsValid(Params().MessageStart()))\n         {\n             LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;\n@@ -4305,8 +4332,7 @@ bool ProcessMessages(CNode* pfrom)\n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n         uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        unsigned int nChecksum = ReadLE32((unsigned char*)&hash);\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\","
      },
      {
        "sha": "0723ee218a4f2523b5d154423482eab85f6b749f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/common.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -509,7 +510,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         // get current incomplete message, or create a new one\n         if (vRecvMsg.empty() ||\n             vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(SER_NETWORK, nRecvVersion));\n+            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, nRecvVersion));\n \n         CNetMessage& msg = vRecvMsg.back();\n \n@@ -523,6 +524,11 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         if (handled < 0)\n                 return false;\n \n+        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            return false;\n+        }\n+\n         pch += handled;\n         nBytes -= handled;\n \n@@ -1970,7 +1976,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n {\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n-    ssSend << CMessageHeader(pszCommand, 0);\n+    ssSend << CMessageHeader(Params().MessageStart(), pszCommand, 0);\n     LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n@@ -2002,7 +2008,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+    WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n \n     // Set the checksum\n     uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());"
      },
      {
        "sha": "9fc6ce68d03c656a2e31ea436e6d27afc2857ce3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -46,6 +46,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -76,12 +78,27 @@ void SocketSendData(CNode *pnode);\n \n typedef int NodeId;\n \n+struct CombinerAll\n+{\n+    typedef bool result_type;\n+\n+    template<typename I>\n+    bool operator()(I first, I last) const\n+    {\n+        while (first != last) {\n+            if (!(*first)) return false;\n+            ++first;\n+        }\n+        return true;\n+    }\n+};\n+\n // Signals for message handling\n struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n-    boost::signals2::signal<bool (CNode*)> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, bool)> SendMessages;\n+    boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, bool), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n     boost::signals2::signal<void (NodeId)> FinalizeNode;\n };\n@@ -183,7 +200,7 @@ class CNetMessage {\n \n     int64_t nTime;                  // time (in microseconds) of message receipt.\n \n-    CNetMessage(int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), vRecv(nTypeIn, nVersionIn) {\n+    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n         hdrbuf.resize(24);\n         in_data = false;\n         nHdrPos = 0;\n@@ -570,9 +587,6 @@ class CNode\n         }\n     }\n \n-    bool IsSubscribed(unsigned int nChannel);\n-    void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n-    void CancelSubscribe(unsigned int nChannel);\n     void CloseSocketDisconnect();\n \n     // Denial-of-service detection/prevention"
      },
      {
        "sha": "b42c2dffa4d69da971cc2d4c6c75593ceadf6fb7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -162,7 +162,7 @@ class CService : public CNetAddr\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n-            READWRITE(portN);\n+            READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);\n         }"
      },
      {
        "sha": "eb899ffc942b599029ab6bc4dc92a91bf2d74189",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -48,8 +48,13 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+}\n+\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+{\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < Params().TargetTimespan()/4)\n         nActualTimespan = Params().TargetTimespan()/4;\n@@ -82,9 +87,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n-    if (Params().SkipProofOfWorkCheck())\n-       return true;\n-\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "a5fbba62364c0f1709cd11723b5137694dac6586",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -14,6 +14,7 @@ class uint256;\n class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);"
      },
      {
        "sha": "5b9c13d87011bf192b70bb7fc2902801e1e16e2e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -8,10 +8,11 @@\n #include \"hash.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n uint256 CBlockHeader::GetHash() const\n {\n-    return Hash(BEGIN(nVersion), END(nNonce));\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      },
      {
        "sha": "0ba9affeda5a63b9a0ab62945f045e691b685359",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -25,7 +25,8 @@ class COutPoint\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n+        READWRITE(hash);\n+        READWRITE(n);\n     }\n \n     void SetNull() { hash.SetNull(); n = (uint32_t) -1; }"
      },
      {
        "sha": "568580a595a89d8e9f3c49e3502d8b7eaf38f412",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"protocol.h\"\n \n-#include \"chainparams.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -21,17 +20,17 @@ static const char* ppszTypeName[] =\n     \"filtered block\"\n };\n \n-CMessageHeader::CMessageHeader()\n+CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n {\n-    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     nMessageSize = -1;\n     nChecksum = 0;\n }\n \n-CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n+CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n {\n-    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n@@ -43,10 +42,10 @@ std::string CMessageHeader::GetCommand() const\n     return std::string(pchCommand, pchCommand + strnlen(pchCommand, COMMAND_SIZE));\n }\n \n-bool CMessageHeader::IsValid() const\n+bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n {\n     // Check start string\n-    if (memcmp(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0)\n+    if (memcmp(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE) != 0)\n         return false;\n \n     // Check the command string for errors"
      },
      {
        "sha": "e838c0d363874dd1dcaf9855063d9e970f46f69d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -29,11 +29,13 @@\n class CMessageHeader\n {\n public:\n-    CMessageHeader();\n-    CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n+    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n+\n+    CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+    CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;\n-    bool IsValid() const;\n+    bool IsValid(const MessageStartChars& messageStart) const;\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "a4c046bff53806f05e5d81b8be78731dda0d90cc",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -6,25 +6,16 @@\n \n #include \"eccryptoverify.h\"\n \n-#ifdef USE_SECP256K1\n-#include <secp256k1.h>\n-#else\n #include \"ecwrapper.h\"\n-#endif\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     if (!key.Verify(hash, vchSig))\n         return false;\n-#endif\n     return true;\n }\n \n@@ -33,52 +24,33 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-#ifdef USE_SECP256K1\n-    int pubkeylen = 65;\n-    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n-        return false;\n-    assert((int)size() == pubkeylen);\n-#else\n     CECKey key;\n     if (!key.Recover(hash, &vchSig[1], recid))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, fComp);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n-#endif\n     return true;\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    int clen = size();\n-    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n-    assert(ret);\n-    assert(clen == (int)size());\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, false);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n@@ -89,17 +61,12 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned i\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild, out+32, 32);\n-#ifdef USE_SECP256K1\n-    pubkeyChild = *this;\n-    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n-#else\n     CECKey key;\n     bool ret = key.SetPubKey(begin(), size());\n     ret &= key.TweakPublic(out);\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, true);\n     pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-#endif\n     return ret;\n }\n "
      },
      {
        "sha": "1ec968ff2bee20b23d6b4bb3105b810776062d91",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -151,7 +151,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n \n     // Create actions for the toolbar, menu bar and tray/dock icon\n     // Needs walletFrame to be initialized\n-    createActions(networkStyle);\n+    createActions();\n \n     // Create application menu bar\n     createMenuBar();\n@@ -243,7 +243,7 @@ BitcoinGUI::~BitcoinGUI()\n     delete rpcConsole;\n }\n \n-void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n+void BitcoinGUI::createActions()\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n@@ -340,6 +340,7 @@ void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n     showHelpMessageAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n@@ -435,8 +436,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate());\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -652,7 +653,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n {\n     if(!clientModel)\n         return;\n@@ -680,9 +681,8 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QString tooltip;\n \n-    QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    int secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = blockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n \n@@ -722,8 +722,8 @@ void BitcoinGUI::setNumBlocks(int count)\n         }\n         else\n         {\n-            int years = secs / YEAR_IN_SECONDS;\n-            int remainder = secs % YEAR_IN_SECONDS;\n+            qint64 years = secs / YEAR_IN_SECONDS;\n+            qint64 remainder = secs % YEAR_IN_SECONDS;\n             timeBehindText = tr(\"%1 and %2\").arg(tr(\"%n year(s)\", \"\", years)).arg(tr(\"%n week(s)\",\"\", remainder/WEEK_IN_SECONDS));\n         }\n "
      },
      {
        "sha": "5a289a90460025a7a9b87542e9b024580babeda1",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -118,7 +118,7 @@ class BitcoinGUI : public QMainWindow\n     int spinnerFrame;\n \n     /** Create the main UI actions. */\n-    void createActions(const NetworkStyle *networkStyle);\n+    void createActions();\n     /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */\n@@ -143,8 +143,8 @@ class BitcoinGUI : public QMainWindow\n public slots:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n-    /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    /** Set number of blocks and last block date shown in the UI */\n+    void setNumBlocks(int count, const QDateTime& blockDate);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "e1855035de6a063cde31e48111de18a1806dbcac",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <stdint.h>\n \n-#include <QDateTime>\n #include <QDebug>\n #include <QTimer>\n \n@@ -28,8 +27,10 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n-    cachedReindexing(0), cachedImporting(0),\n-    numBlocksAtStartup(-1), pollTimer(0)\n+    cachedBlockDate(QDateTime()),\n+    cachedReindexing(0),\n+    cachedImporting(0),\n+    pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n     pollTimer = new QTimer(this);\n@@ -64,12 +65,6 @@ int ClientModel::getNumBlocks() const\n     return chainActive.Height();\n }\n \n-int ClientModel::getNumBlocksAtStartup()\n-{\n-    if (numBlocksAtStartup == -1) numBlocksAtStartup = getNumBlocks();\n-    return numBlocksAtStartup;\n-}\n-\n quint64 ClientModel::getTotalBytesRecv() const\n {\n     return CNode::GetTotalBytesRecv();\n@@ -83,10 +78,11 @@ quint64 ClientModel::getTotalBytesSent() const\n QDateTime ClientModel::getLastBlockDate() const\n {\n     LOCK(cs_main);\n+\n     if (chainActive.Tip())\n         return QDateTime::fromTime_t(chainActive.Tip()->GetBlockTime());\n-    else\n-        return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n+\n+    return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n }\n \n double ClientModel::getVerificationProgress() const\n@@ -101,21 +97,26 @@ void ClientModel::updateTimer()\n     // periodical polls if the core is holding the locks for a longer time -\n     // for example, during a wallet rescan.\n     TRY_LOCK(cs_main, lockMain);\n-    if(!lockMain)\n+    if (!lockMain)\n         return;\n+\n     // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n     // Periodically check and update with a timer.\n     int newNumBlocks = getNumBlocks();\n+    QDateTime newBlockDate = getLastBlockDate();\n \n     // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n     if (cachedNumBlocks != newNumBlocks ||\n-        cachedReindexing != fReindex || cachedImporting != fImporting)\n+        cachedBlockDate != newBlockDate ||\n+        cachedReindexing != fReindex ||\n+        cachedImporting != fImporting)\n     {\n         cachedNumBlocks = newNumBlocks;\n+        cachedBlockDate = newBlockDate;\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        emit numBlocksChanged(newNumBlocks);\n+        emit numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n     emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());"
      },
      {
        "sha": "214701810c0dff36dabcc3aa77fe17e989685e1f",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_CLIENTMODEL_H\n \n #include <QObject>\n+#include <QDateTime>\n \n class AddressTableModel;\n class OptionsModel;\n@@ -15,7 +16,6 @@ class TransactionTableModel;\n class CWallet;\n \n QT_BEGIN_NAMESPACE\n-class QDateTime;\n class QTimer;\n QT_END_NAMESPACE\n \n@@ -48,7 +48,6 @@ class ClientModel : public QObject\n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n-    int getNumBlocksAtStartup();\n \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n@@ -74,19 +73,18 @@ class ClientModel : public QObject\n     PeerTableModel *peerTableModel;\n \n     int cachedNumBlocks;\n+    QDateTime cachedBlockDate;\n     bool cachedReindexing;\n     bool cachedImporting;\n \n-    int numBlocksAtStartup;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n \n signals:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count);\n+    void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);\n "
      },
      {
        "sha": "9db0a75971ac5ed2497022de013207380c00192a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 11,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -40,6 +40,7 @@\n #if BOOST_FILESYSTEM_VERSION >= 3\n #include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n #endif\n+#include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>\n #include <QApplication>\n@@ -567,12 +568,17 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {\n+    if (GetBoolArg(\"-testnet\", false))\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (testnet).lnk\";\n+    else if (GetBoolArg(\"-regtest\", false))\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (regtest).lnk\";\n+\n     return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n }\n \n bool GetStartOnSystemStartup()\n {\n-    // check for Bitcoin.lnk\n+    // check for Bitcoin*.lnk\n     return boost::filesystem::exists(StartupShortcutPath());\n }\n \n@@ -588,29 +594,43 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Get a pointer to the IShellLink interface.\n         IShellLink* psl = NULL;\n         HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n-                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n-                                reinterpret_cast<void**>(&psl));\n+            CLSCTX_INPROC_SERVER, IID_IShellLink,\n+            reinterpret_cast<void**>(&psl));\n \n         if (SUCCEEDED(hres))\n         {\n             // Get the current executable path\n             TCHAR pszExePath[MAX_PATH];\n             GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n \n-            TCHAR pszArgs[5] = TEXT(\"-min\");\n+            // Start client minimized\n+            QString strArgs = \"-min\";\n+            // Set -testnet /-regtest options\n+            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+\n+#ifdef UNICODE\n+            boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n+            // Convert the QString to TCHAR*\n+            strArgs.toWCharArray(args.get());\n+            // Add missing '\\0'-termination to string\n+            args[strArgs.length()] = '\\0';\n+#endif\n \n             // Set the path to the shortcut target\n             psl->SetPath(pszExePath);\n             PathRemoveFileSpec(pszExePath);\n             psl->SetWorkingDirectory(pszExePath);\n             psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n-            psl->SetArguments(pszArgs);\n+#ifndef UNICODE\n+            psl->SetArguments(strArgs.toStdString().c_str());\n+#else\n+            psl->SetArguments(args.get());\n+#endif\n \n             // Query IShellLink for the IPersistFile interface for\n             // saving the shortcut in persistent storage.\n             IPersistFile* ppf = NULL;\n-            hres = psl->QueryInterface(IID_IPersistFile,\n-                                       reinterpret_cast<void**>(&ppf));\n+            hres = psl->QueryInterface(IID_IPersistFile, reinterpret_cast<void**>(&ppf));\n             if (SUCCEEDED(hres))\n             {\n                 WCHAR pwsz[MAX_PATH];\n@@ -630,11 +650,10 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n-\n #elif defined(Q_OS_LINUX)\n \n // Follow the Desktop Application Autostart Spec:\n-//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n+// http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n boost::filesystem::path static GetAutostartDir()\n {\n@@ -690,8 +709,13 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Write a bitcoin.desktop file to the autostart directory:\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n-        optionFile << \"Name=Bitcoin\\n\";\n-        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n+        if (GetBoolArg(\"-testnet\", false))\n+            optionFile << \"Name=Bitcoin (testnet)\\n\";\n+        else if (GetBoolArg(\"-regtest\", false))\n+            optionFile << \"Name=Bitcoin (regtest)\\n\";\n+        else\n+            optionFile << \"Name=Bitcoin\\n\";\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      },
      {
        "sha": "a342b4bfea40f03012fbe9e0afc396328ce28b2d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -38,7 +38,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     fProxyIpValid(true)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n \n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n@@ -117,7 +116,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n OptionsDialog::~OptionsDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n "
      },
      {
        "sha": "ccde44fb29a781bc8dc50ba896febba5606b06c6",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -293,8 +293,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks());\n-        connect(model, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate());\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -404,11 +404,10 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n-    if(clientModel)\n-        ui->lastBlockTime->setText(clientModel->getLastBlockDate().toString());\n+    ui->lastBlockTime->setText(blockDate.toString());\n }\n \n void RPCConsole::on_lineEdit_returnPressed()"
      },
      {
        "sha": "8737be35d1a180f7d7070c2dc094174381824825",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -63,8 +63,8 @@ public slots:\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n-    /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    /** Set number of blocks and last block date shown in the UI */\n+    void setNumBlocks(int count, const QDateTime& blockDate);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n     /** Scroll console view to end */"
      },
      {
        "sha": "4f3230a8c9e8caaf9a18fb25e6a566b4b2e6e544",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -121,7 +121,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      },
      {
        "sha": "386cf31d736850acc2bf95eebe3c76ddebeee2f6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 56,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -29,7 +29,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n     ui(new Ui::HelpMessageDialog)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nHelpMessageDialogWindow\", this->size(), this);\n \n     QString version = tr(\"Bitcoin Core\") + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n@@ -63,77 +62,47 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n+        QString header = tr(\"Usage:\") + \"\\n\" +\n+            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n         QTextCursor cursor(ui->helpMessage->document());\n         cursor.insertText(version);\n         cursor.insertBlock();\n-        cursor.insertText(tr(\"Usage:\") + '\\n' +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]\\n\");\n-\n+        cursor.insertText(header);\n         cursor.insertBlock();\n+\n+        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n+\n         QTextTableFormat tf;\n         tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n         tf.setCellPadding(2);\n         QVector<QTextLength> widths;\n         widths << QTextLength(QTextLength::PercentageLength, 35);\n         widths << QTextLength(QTextLength::PercentageLength, 65);\n         tf.setColumnWidthConstraints(widths);\n-        QTextTable *table = cursor.insertTable(2, 2, tf);\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n-        bool first = true;\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n-        // note that coreOptions is not translated.\n-        foreach (const QString &line, coreOptions.split('\\n')) {\n-            if (!first) {\n-                table->appendRows(1);\n+\n+        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+            if (line.startsWith(\"  -\"))\n+            {\n+                cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::PreviousCell);\n                 cursor.movePosition(QTextCursor::NextRow);\n+                cursor.insertText(line.trimmed());\n+                cursor.movePosition(QTextCursor::NextCell);\n+            } else if (line.startsWith(\"   \")) {\n+                cursor.insertText(line.trimmed()+' ');\n+            } else if (line.size() > 0) {\n+                //Title of a group\n+                if (cursor.currentTable())\n+                    cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::Down);\n+                cursor.insertText(line.trimmed(), bold);\n+                cursor.insertTable(1, 2, tf);\n             }\n-            first = false;\n-\n-            if (line.startsWith(\"  \")) {\n-                int index = line.indexOf(' ', 3);\n-                if (index > 0) {\n-                    cursor.insertText(line.left(index).trimmed());\n-                    cursor.movePosition(QTextCursor::NextCell);\n-                    cursor.insertText(line.mid(index).trimmed());\n-                    continue;\n-                }\n-            }\n-            cursor.movePosition(QTextCursor::NextCell, QTextCursor::KeepAnchor);\n-            table->mergeCells(cursor);\n-            cursor.insertText(line.trimmed(), bold);\n-        }\n-\n-        table->appendRows(6);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        cursor.insertText(tr(\"UI options\") + \":\", bold);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        if (GetBoolArg(\"-help-debug\", false)) {\n-            cursor.insertText(\"-allowselfsignedrootcertificates\");\n-            cursor.movePosition(QTextCursor::NextCell);\n-            cursor.insertText(tr(\"Allow self signed root certificates (default: 0)\"));\n-            cursor.movePosition(QTextCursor::NextCell);\n         }\n-        cursor.insertText(\"-choosedatadir\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-lang=<lang>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-min\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Start minimized\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-rootcertificates=<file>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-splash\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Show splash screen on startup (default: 1)\"));\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);\n@@ -143,7 +112,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n HelpMessageDialog::~HelpMessageDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nHelpMessageDialogWindow\", this);\n     delete ui;\n }\n "
      },
      {
        "sha": "ed456f5c5ad53944895684ef196bfa4f55585bc6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -14,6 +14,7 @@\n #include <string.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n@@ -416,14 +417,16 @@ class CScript : public std::vector<unsigned char>\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[2];\n+            WriteLE16(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[4];\n+            WriteLE32(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;\n@@ -496,15 +499,14 @@ class CScript : public std::vector<unsigned char>\n             {\n                 if (end() - pc < 2)\n                     return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n+                nSize = ReadLE16(&pc[0]);\n                 pc += 2;\n             }\n             else if (opcode == OP_PUSHDATA4)\n             {\n                 if (end() - pc < 4)\n                     return false;\n-                memcpy(&nSize, &pc[0], 4);\n+                nSize = ReadLE32(&pc[0]);\n                 pc += 4;\n             }\n             if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)"
      },
      {
        "sha": "741f78f8b4fa86daa5827deb2935239ed7940cb2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 125,
        "deletions": 76,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -18,6 +18,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"compat/endian.h\"\n+\n class CScript;\n \n static const unsigned int MAX_SIZE = 0x02000000;\n@@ -71,6 +73,79 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n \n+/*\n+ * Lowest-level serialization and conversion.\n+ * @note Sizes of these types are verified in the tests\n+ */\n+template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n+{\n+    s.write((char*)&obj, 1);\n+}\n+template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n+{\n+    obj = htole16(obj);\n+    s.write((char*)&obj, 2);\n+}\n+template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n+{\n+    obj = htole32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n+{\n+    obj = htole64(obj);\n+    s.write((char*)&obj, 8);\n+}\n+template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n+{\n+    uint8_t obj;\n+    s.read((char*)&obj, 1);\n+    return obj;\n+}\n+template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n+{\n+    uint16_t obj;\n+    s.read((char*)&obj, 2);\n+    return le16toh(obj);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return le32toh(obj);\n+}\n+template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n+{\n+    uint64_t obj;\n+    s.read((char*)&obj, 8);\n+    return le64toh(obj);\n+}\n+inline uint64_t ser_double_to_uint64(double x)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline uint32_t ser_float_to_uint32(float x)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline double ser_uint64_to_double(uint64_t y)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+inline float ser_uint32_to_float(uint32_t y)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -108,59 +183,48 @@ enum\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n-\n-\n /*\n  * Basic Types\n  */\n-#define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n-#define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n-\n-inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -187,64 +251,50 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n-        unsigned char chSize = nSize;\n-        WRITEDATA(os, chSize);\n+        ser_writedata8(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned short>::max())\n     {\n-        unsigned char chSize = 253;\n-        unsigned short xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 253);\n+        ser_writedata16(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned int>::max())\n     {\n-        unsigned char chSize = 254;\n-        unsigned int xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 254);\n+        ser_writedata32(os, nSize);\n     }\n     else\n     {\n-        unsigned char chSize = 255;\n-        uint64_t xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 255);\n+        ser_writedata64(os, nSize);\n     }\n     return;\n }\n \n template<typename Stream>\n uint64_t ReadCompactSize(Stream& is)\n {\n-    unsigned char chSize;\n-    READDATA(is, chSize);\n+    uint8_t chSize = ser_readdata8(is);\n     uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n     }\n     else if (chSize == 253)\n     {\n-        unsigned short xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata16(is);\n         if (nSizeRet < 253)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n-        unsigned int xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata32(is);\n         if (nSizeRet < 0x10000u)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n-        uint64_t xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata64(is);\n         if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n@@ -303,7 +353,7 @@ void WriteVarInt(Stream& os, I n)\n         len++;\n     }\n     do {\n-        WRITEDATA(os, tmp[len]);\n+        ser_writedata8(os, tmp[len]);\n     } while(len--);\n }\n \n@@ -312,8 +362,7 @@ I ReadVarInt(Stream& is)\n {\n     I n = 0;\n     while(true) {\n-        unsigned char chData;\n-        READDATA(is, chData);\n+        unsigned char chData = ser_readdata8(is);\n         n = (n << 7) | (chData & 0x7F);\n         if (chData & 0x80)\n             n++;"
      },
      {
        "sha": "bf255487550cb2fee2ac1f939f93ab2e5d02439e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -16,6 +16,8 @@\n #include \"serialize.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -41,7 +43,7 @@ CService ip(uint32_t i)\n     return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n-BOOST_AUTO_TEST_SUITE(DoS_tests)\n+BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {"
      },
      {
        "sha": "36499f01a7b0d77ea2cb884852f30cf9e1092713",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -5,14 +5,16 @@\n #include \"wallet.h\"\n #include \"walletdb.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(accounting_tests)\n+BOOST_FIXTURE_TEST_SUITE(accounting_tests, TestingSetup)\n \n static void\n GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)"
      },
      {
        "sha": "5e1f5f0294e2feebd4f54c03d040ad5d32fe3806",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -15,6 +15,8 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <fstream>\n \n #include <boost/filesystem/operations.hpp>\n@@ -78,7 +80,7 @@\n }\n #endif\n \n-struct ReadAlerts\n+struct ReadAlerts : public TestingSetup\n {\n     ReadAlerts()\n     {"
      },
      {
        "sha": "d4df7b5415797731cae702b958e8247ca06d2f72",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -5,10 +5,11 @@\n #include \"util.h\"\n \n #include \"allocators.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(allocator_tests)\n+BOOST_FIXTURE_TEST_SUITE(allocator_tests, BasicTestingSetup)\n \n // Dummy memory page locker for platform independent tests\n static const void *last_lock_addr, *last_unlock_addr;"
      },
      {
        "sha": "17d6bed6d2fb952133b8123f37a2b6b8b4715ec1",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -12,8 +12,9 @@\n #include \"arith_uint256.h\"\n #include <string>\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n-BOOST_AUTO_TEST_SUITE(arith_uint256_tests)\n+BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n \n /// Convert vector to arith_uint256, via uint256 blob\n inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)"
      },
      {
        "sha": "8ec88614259873a6adb64f06c7d1bd39a9e30718",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -3,10 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(base32_tests)\n+BOOST_FIXTURE_TEST_SUITE(base32_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(base32_testvectors)\n {"
      },
      {
        "sha": "f07dd7a7db9647bd4460cc7dfae3b9cccf976460",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -23,7 +24,7 @@\n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n \n-BOOST_AUTO_TEST_SUITE(base58_tests)\n+BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)\n \n // Goal: test low-level base58 encoding functionality\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n@@ -127,6 +128,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n+    SelectParams(CBaseChainParams::MAIN);\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -176,7 +178,6 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -244,7 +245,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::UNITTEST);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "54c081b0ef9f88fd85330afe329196654a86c21b",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -3,10 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(base64_tests)\n+BOOST_FIXTURE_TEST_SUITE(base64_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(base64_testvectors)\n {"
      },
      {
        "sha": "d738851c1f81c826acfb8a37a322981c77705b83",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -8,6 +8,7 @@\n #include \"key.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -107,7 +108,7 @@ void RunTest(const TestVector &test) {\n     }\n }\n \n-BOOST_AUTO_TEST_SUITE(bip32_tests)\n+BOOST_FIXTURE_TEST_SUITE(bip32_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bip32_test1) {\n     RunTest(test1);"
      },
      {
        "sha": "73a146f05c42a491d0416f28571360e40f7fe983",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -21,7 +22,7 @@\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(bloom_tests)\n+BOOST_FIXTURE_TEST_SUITE(bloom_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n {"
      },
      {
        "sha": "7abfad151efed756eafc0066bd48200720017a6d",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -11,6 +11,7 @@\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"utiltime.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <cstdio>\n \n@@ -19,7 +20,7 @@\n #include <boost/test/unit_test.hpp>\n \n \n-BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n+BOOST_FIXTURE_TEST_SUITE(CheckBlock_tests, BasicTestingSetup)\n \n bool read_block(const std::string& filename, CBlock& block)\n {"
      },
      {
        "sha": "2e2cc2214b9b6192ec01e9849340580ea8cdb3a0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -5,6 +5,7 @@\n #include \"coins.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n #include <map>\n@@ -60,7 +61,7 @@ class CCoinsViewTest : public CCoinsView\n };\n }\n \n-BOOST_AUTO_TEST_SUITE(coins_tests)\n+BOOST_FIXTURE_TEST_SUITE(coins_tests, BasicTestingSetup)\n \n static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n "
      },
      {
        "sha": "376ae9368107aa1d309e010b472ceec297ef1ef7",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"compressor.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n \n@@ -21,7 +22,7 @@\n // amounts 50 .. 21000000\n #define NUM_MULTIPLES_50BTC 420000\n \n-BOOST_AUTO_TEST_SUITE(compress_tests)\n+BOOST_FIXTURE_TEST_SUITE(compress_tests, BasicTestingSetup)\n \n bool static TestEncode(uint64_t in) {\n     return in == CTxOutCompressor::DecompressAmount(CTxOutCompressor::CompressAmount(in));"
      },
      {
        "sha": "aeb2a5caa322cb5c96225471ed9874e16db73b8c",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -10,13 +10,14 @@\n #include \"crypto/hmac_sha512.h\"\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(crypto_tests)\n+BOOST_FIXTURE_TEST_SUITE(crypto_tests, BasicTestingSetup)\n \n template<typename Hasher, typename In, typename Out>\n void TestVector(const Hasher &h, const In &in, const Out &out) {"
      },
      {
        "sha": "a0c5592a95945e73d1f8c2e3bdb3af882a98a928",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -11,7 +12,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(getarg_tests)\n+BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n \n static void ResetArgs(const std::string& strArg)\n {"
      },
      {
        "sha": "e5d2e5a439efc061fefc4913369d29d0b5972b58",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,14 +4,15 @@\n \n #include \"hash.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(hash_tests)\n+BOOST_FIXTURE_TEST_SUITE(hash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(murmurhash3)\n {"
      },
      {
        "sha": "13ca9494690ca2fd003ff889fe1560da9978a3b7",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -9,6 +9,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -58,7 +59,7 @@ void dumpKeyInfo(uint256 privkey)\n #endif\n \n \n-BOOST_AUTO_TEST_SUITE(key_tests)\n+BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(key_test1)\n {"
      },
      {
        "sha": "9ec533bcca7e757e84a7821a38b1b5aeac009389",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -5,9 +5,11 @@\n #include \"primitives/transaction.h\"\n #include \"main.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(main_tests)\n+BOOST_FIXTURE_TEST_SUITE(main_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n@@ -21,4 +23,21 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n     BOOST_CHECK(nSum == 2099999997690000ULL);\n }\n \n+bool ReturnFalse() { return false; }\n+bool ReturnTrue() { return true; }\n+\n+BOOST_AUTO_TEST_CASE(test_combiner_all)\n+{\n+    boost::signals2::signal<bool (), CombinerAll> Test;\n+    BOOST_CHECK(Test());\n+    Test.connect(&ReturnFalse);\n+    BOOST_CHECK(!Test());\n+    Test.connect(&ReturnTrue);\n+    BOOST_CHECK(!Test());\n+    Test.disconnect(&ReturnFalse);\n+    BOOST_CHECK(Test());\n+    Test.disconnect(&ReturnTrue);\n+    BOOST_CHECK(Test());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "88a7df3b941fb3685c1d62b603da21ca87eeca44",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -8,9 +8,11 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(miner_tests)\n+BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n static\n struct {"
      },
      {
        "sha": "bd4e9c1d381b50f79063606a340ba9041cd6b9e1",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"random.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <set>\n \n@@ -34,7 +35,7 @@ class mrutester\n     }\n };\n \n-BOOST_AUTO_TEST_SUITE(mruset_tests)\n+BOOST_FIXTURE_TEST_SUITE(mruset_tests, BasicTestingSetup)\n \n // Test that an mruset behaves like a set, as long as no more than MAX_SIZE elements are in it\n BOOST_AUTO_TEST_CASE(mruset_like_set)"
      },
      {
        "sha": "054bc3b37bf4966282562ad58ee111d78fe9579d",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"script/sign.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -22,7 +23,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-BOOST_AUTO_TEST_SUITE(multisig_tests)\n+BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)"
      },
      {
        "sha": "cb357d295c2d420a53ccd5fb44843bbd1ef71a47",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -3,14 +3,15 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"netbase.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(netbase_tests)\n+BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(netbase_networks)\n {"
      },
      {
        "sha": "f6d06d6805caa8234ccf9f6d53cd928bc1d83ba8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -9,6 +9,7 @@\n #include \"arith_uint256.h\"\n #include \"version.h\"\n #include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -28,7 +29,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     }\n };\n \n-BOOST_AUTO_TEST_SUITE(pmt_tests)\n+BOOST_FIXTURE_TEST_SUITE(pmt_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {"
      },
      {
        "sha": "7b197c527de44396afdc8b2c1d182a1fb2c3998b",
        "filename": "src/test/pow_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"pow.h\"\n+#include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n+\n+/* Test calculation of next difficulty target with no constraints applying */\n+BOOST_AUTO_TEST_CASE(get_next_work)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1261130161; // Block #30240\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 32255;\n+    pindexLast.nTime = 1262152739;  // Block #32255\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+}\n+\n+/* Test the constraint on the upper bound for next work */\n+BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1231006505; // Block #0\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 2015;\n+    pindexLast.nTime = 1233061996;  // Block #2015\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+}\n+\n+/* Test the constraint on the lower bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1279008237; // Block #66528\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 68543;\n+    pindexLast.nTime = 1279297671;  // Block #68543\n+    pindexLast.nBits = 0x1c05a3f4;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+}\n+\n+/* Test the constraint on the upper bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+    int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 46367;\n+    pindexLast.nTime = 1269211443;  // Block #46367\n+    pindexLast.nBits = 0x1c387f6f;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "45cb551d04aa59e4bb1c278bcfa43bf145a9e698",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"netbase.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -45,7 +47,7 @@ Value CallRPC(string args)\n }\n \n \n-BOOST_AUTO_TEST_SUITE(rpc_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "44475076b3c4faaa2094454c667a35a72cd843a9",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"wallet.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -19,7 +21,7 @@ extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(rpc_wallet_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {"
      },
      {
        "sha": "f5f7f381d315777871e9fc5c47af3524b2f6064f",
        "filename": "src/test/sanity_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,9 +4,11 @@\n \n #include \"compat/sanity.h\"\n #include \"key.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n-BOOST_AUTO_TEST_SUITE(sanity_tests)\n+\n+BOOST_FIXTURE_TEST_SUITE(sanity_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(basic_sanity)\n {"
      },
      {
        "sha": "52171b9e3c82f1b8e3218bff30bf2c85fcad84d7",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -8,6 +8,7 @@\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -47,7 +48,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n }\n \n \n-BOOST_AUTO_TEST_SUITE(script_P2SH_tests)\n+BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {"
      },
      {
        "sha": "c0614cca431f588a07f4c2e50cfbb945c1f46286",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include \"script/bitcoinconsensus.h\"\n@@ -53,7 +54,7 @@ read_json(const std::string& jsondata)\n     return v.get_array();\n }\n \n-BOOST_AUTO_TEST_SUITE(script_tests)\n+BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n {"
      },
      {
        "sha": "24c7dd3d5a4745efa22d7a0d89087fa2f9510685",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,10 +4,13 @@\n \n #include \"bignum.h\"\n #include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n #include <limits.h>\n #include <stdint.h>\n-BOOST_AUTO_TEST_SUITE(scriptnum_tests)\n+\n+BOOST_FIXTURE_TEST_SUITE(scriptnum_tests, BasicTestingSetup)\n \n static const int64_t values[] = \\\n { 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };"
      },
      {
        "sha": "cc8f2b788d6d579398165f9b2fcb52a2a49450ef",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 116,
        "deletions": 1,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,14 +4,129 @@\n \n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"hash.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(serialize_tests)\n+BOOST_FIXTURE_TEST_SUITE(serialize_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(sizes)\n+{\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+    // Bool is serialized as char\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+\n+    // Sanity-check GetSerializeSize and c++ type matching\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(floats_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n+\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n+\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n+}\n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n+BOOST_AUTO_TEST_CASE(floats)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << float(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        float j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << double(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        double j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n \n BOOST_AUTO_TEST_CASE(varints)\n {"
      },
      {
        "sha": "afb7a41bbd4b3af49520ec038bd40f9daeb459c2",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"util.h\"\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <iostream>\n \n@@ -115,7 +116,7 @@ void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     }\n }\n \n-BOOST_AUTO_TEST_SUITE(sighash_tests)\n+BOOST_FIXTURE_TEST_SUITE(sighash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sighash_test)\n {"
      },
      {
        "sha": "b26fed99f2a60935074f94e9fc680955047895a7",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -7,6 +7,7 @@\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -23,7 +24,7 @@ Serialize(const CScript& s)\n     return sSerialized;\n }\n \n-BOOST_AUTO_TEST_SUITE(sigopcount_tests)\n+BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(GetSigOpCount)\n {"
      },
      {
        "sha": "86a4bc67272ef475f6800d078b70853999b81627",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -5,14 +5,15 @@\n #include \"main.h\"\n #include \"random.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n #define SKIPLIST_LENGTH 300000\n \n-BOOST_AUTO_TEST_SUITE(skiplist_tests)\n+BOOST_FIXTURE_TEST_SUITE(skiplist_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(skiplist_test)\n {"
      },
      {
        "sha": "48e49ed757cf938da607f20f37c4c546ad3b4e82",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,6 +4,8 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n+#include \"test_bitcoin.h\"\n+\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n@@ -24,18 +26,21 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-struct TestingSetup {\n-    CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n-    boost::thread_group threadGroup;\n-\n-    TestingSetup() {\n+BasicTestingSetup::BasicTestingSetup()\n+{\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::UNITTEST);\n-        noui_connect();\n+        SelectParams(CBaseChainParams::MAIN);\n+}\n+BasicTestingSetup::~BasicTestingSetup()\n+{\n+}\n+\n+TestingSetup::TestingSetup()\n+{\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n+        ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n         mapArgs[\"-datadir\"] = pathTemp.string();\n@@ -53,27 +58,28 @@ struct TestingSetup {\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n         RegisterNodeSignals(GetNodeSignals());\n-    }\n-    ~TestingSetup()\n-    {\n+}\n+\n+TestingSetup::~TestingSetup()\n+{\n+        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n-        UnregisterNodeSignals(GetNodeSignals());\n #ifdef ENABLE_WALLET\n+        UnregisterValidationInterface(pwalletMain);\n         delete pwalletMain;\n         pwalletMain = NULL;\n #endif\n+        UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n #ifdef ENABLE_WALLET\n         bitdb.Flush(true);\n+        bitdb.Reset();\n #endif\n         boost::filesystem::remove_all(pathTemp);\n-    }\n-};\n-\n-BOOST_GLOBAL_FIXTURE(TestingSetup);\n+}\n \n void Shutdown(void* parg)\n {"
      },
      {
        "sha": "2f75332d40d0f5575dc5dd4fa72c4ac0441fb473",
        "filename": "src/test/test_bitcoin.h",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -0,0 +1,30 @@\n+#ifndef BITCOIN_TEST_TEST_BITCOIN_H\n+#define BITCOIN_TEST_TEST_BITCOIN_H\n+\n+#include \"txdb.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+/** Basic testing setup.\n+ * This just configures logging and chain parameters.\n+ */\n+struct BasicTestingSetup {\n+    BasicTestingSetup();\n+    ~BasicTestingSetup();\n+};\n+\n+/** Testing setup that configures a complete environment.\n+ * Included are data directory, coins database, script check threads\n+ * and wallet (if enabled) setup.\n+ */\n+struct TestingSetup: public BasicTestingSetup {\n+    CCoinsViewDB *pcoinsdbview;\n+    boost::filesystem::path pathTemp;\n+    boost::thread_group threadGroup;\n+\n+    TestingSetup();\n+    ~TestingSetup();\n+};\n+\n+#endif"
      },
      {
        "sha": "887cfb47613e9fe81c23e2b88cb9438736e39185",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -3,12 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include \"timedata.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(timedata_tests)\n+BOOST_FIXTURE_TEST_SUITE(timedata_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_MedianFilter)\n {"
      },
      {
        "sha": "2a3083316e939d9e53e8fd615d88f88ecf31d83c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"data/tx_invalid.json.h\"\n #include \"data/tx_valid.json.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n #include \"key.h\"\n@@ -75,7 +76,7 @@ string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-BOOST_AUTO_TEST_SUITE(transaction_tests)\n+BOOST_FIXTURE_TEST_SUITE(transaction_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(tx_valid)\n {"
      },
      {
        "sha": "426d296a9ac56cf623e0be806c1b87a4ca3e81c0",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -4,6 +4,7 @@\n #include \"arith_uint256.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n #include <stdint.h>\n@@ -14,7 +15,7 @@\n #include <string>\n #include <stdio.h>\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+BOOST_FIXTURE_TEST_SUITE(uint256_tests, BasicTestingSetup)\n \n const unsigned char R1Array[] =\n     \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\""
      },
      {
        "sha": "8cecfbf651666a8a5eba2f8cd65f042117ee51c3",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -7,12 +7,13 @@\n #include <string>\n #include <map>\n #include \"univalue/univalue.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(univalue_tests)\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(univalue_constructor)\n {"
      },
      {
        "sha": "3309e2e387737f252ab63bd7e7f1f625a346d1a2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -10,6 +10,7 @@\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n #include <vector>\n@@ -18,7 +19,7 @@\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(util_tests)\n+BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n {"
      },
      {
        "sha": "25c8fab335468f3b1904f912a1987a9ea21a3fbe",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -9,6 +9,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -23,7 +25,7 @@ using namespace std;\n \n typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;\n \n-BOOST_AUTO_TEST_SUITE(wallet_tests)\n+BOOST_FIXTURE_TEST_SUITE(wallet_tests, TestingSetup)\n \n static CWallet wallet;\n static vector<COutput> vCoins;"
      },
      {
        "sha": "0d506603276f3a95b4676d2bbac0ce563e0d4eea",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -337,7 +337,7 @@ class CMinerPolicyEstimator\n     void Write(CAutoFile& fileout) const\n     {\n         fileout << nBestSeenHeight;\n-        fileout << history.size();\n+        fileout << (uint32_t)history.size();\n         BOOST_FOREACH(const CBlockAverage& entry, history)\n         {\n             entry.Write(fileout);\n@@ -348,7 +348,7 @@ class CMinerPolicyEstimator\n     {\n         int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n-        size_t numEntries;\n+        uint32_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n             throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");"
      },
      {
        "sha": "25148808c67efe4f87c0ce275841c04d47b04dd4",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -45,7 +45,7 @@ void base_blob<BITS>::SetHex(const char* psz)\n         psz++;\n     psz--;\n     unsigned char* p1 = (unsigned char*)data;\n-    unsigned char* pend = p1 + WIDTH * 4;\n+    unsigned char* pend = p1 + WIDTH;\n     while (psz >= pbegin && p1 < pend) {\n         *p1 = ::HexDigit(*psz--);\n         if (psz >= pbegin) {\n@@ -128,7 +128,7 @@ uint64_t uint256::GetHash(const uint256& salt) const\n     uint32_t a, b, c;\n     const uint32_t *pn = (const uint32_t*)data;\n     const uint32_t *salt_pn = (const uint32_t*)salt.data;\n-    a = b = c = 0xdeadbeef + (WIDTH << 2);\n+    a = b = c = 0xdeadbeef + WIDTH;\n \n     a += pn[0] ^ salt_pn[0];\n     b += pn[1] ^ salt_pn[1];"
      },
      {
        "sha": "792f00b61d3ea79b734f6054d228fbf575a838de",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -346,6 +346,21 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n+static const int screenWidth = 79;\n+static const int optIndent = 2;\n+static const int msgIndent = 7;\n+\n+std::string HelpMessageGroup(const std::string &message) {\n+    return std::string(message) + std::string(\"\\n\\n\");\n+}\n+\n+std::string HelpMessageOpt(const std::string &option, const std::string &message) {\n+    return std::string(optIndent,' ') + std::string(option) +\n+           std::string(\"\\n\") + std::string(msgIndent,' ') +\n+           FormatParagraph(message, screenWidth - msgIndent, msgIndent) +\n+           std::string(\"\\n\\n\");\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "9b5a4153dd9a86db45667865b5654d5f4768f74c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -94,6 +94,7 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+void ClearDatadirCache();\n boost::filesystem::path GetConfigFile();\n #ifndef WIN32\n boost::filesystem::path GetPidFile();\n@@ -161,6 +162,23 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+/**\n+ * Format a string to be used as group of options in help messages\n+ *\n+ * @param message Group name (e.g. \"RPC server options:\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageGroup(const std::string& message);\n+\n+/**\n+ * Format a string to be used as option description in help messages\n+ *\n+ * @param option Option message (e.g. \"-rpcuser=<user>\")\n+ * @param message Option description (e.g. \"Username for JSON-RPC connections\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageOpt(const std::string& option, const std::string& message);\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      },
      {
        "sha": "ddec57d9a90ce5212e9cf88bc8f456847a1b4658",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d83af094a48e1c2c775e90833505e442d7d6fd1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=8d83af094a48e1c2c775e90833505e442d7d6fd1",
        "patch": "@@ -903,8 +903,8 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n \n-    int result = dbenv.dbenv.dbrename(NULL, filename.c_str(), NULL,\n-                                      newFilename.c_str(), DB_AUTO_COMMIT);\n+    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n     else\n@@ -923,7 +923,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    boost::scoped_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n+    boost::scoped_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      }
    ]
  }
]