Empact,2018-06-10T23:24:50Z,"Can we use `path.imbued.locale` instead for this?\nhttps://www.boost.org/doc/libs/1_64_0/libs/filesystem/doc/reference.html#path-imbued-locale\nhttps://www.boost.org/doc/libs/1_64_0/libs/locale/doc/html/default_encoding_under_windows.html",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-396090209,396090209,
ken2812221,2018-06-11T00:20:04Z,">Can we use `path.imbued.locale` instead for this?\n\nWe still need to use ansi string when we call bdb and leveldb api, so I think that adding a new function is needed. Also, it needs to add `boost::locale` dependency in order to use boost locale generator.",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-396093831,396093831,
theuni,2018-06-12T20:27:27Z,"I'm not really comfortable patching boost to make this work. Firstly because it would mean that only depends-builds can build for Windows, but also because I'm just not familiar with it.\n\nMaybe start by upstreaming it and see where the discussion goes?",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-396722281,396722281,
ken2812221,2018-06-12T20:32:57Z,">Firstly because it would mean that only depends-builds can build for Windows\n\nIs there any way to build Bitcoin Core for Windows without depends-builds?\nAlso, I created a PR https://github.com/boostorg/filesystem/pull/75",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-396723888,396723888,
achow101,2018-06-12T23:24:03Z,"> Is there any way to build Bitcoin Core for Windows without depends-builds?\n\nSupposedly there is a way to build with MSVC and Visual Studio which doesn't use the depends system.",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-396765422,396765422,
ken2812221,2018-06-13T00:22:09Z,"I found a way not to patch boost library, it should work with msvc now.",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-396774919,396774919,
DrahtBot,2018-06-14T20:25:08Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13878 (utils: Add fstream wrapper to allow to pass unicode filename on Windows by ken2812221)\n* #13877 (utils: Make fs::path::string() always return utf-8 string on Windows by ken2812221)\n* #13866 (utils: Use _wfopen and _wreopen on Windows by ken2812221)\n* #13864 (validation: Do,https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-397426966,397426966,
ken2812221,2018-06-21T15:11:22Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-399138639,399138639,
fanquake,2018-07-21T04:57:57Z,"@theuni We probably want your thoughts here again.\n\nFor reference nothing has happened at the [upstream PR](https://github.com/boostorg/filesystem/pull/75), however that is less relevant now that we aren't patching Boost.\n",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-406770854,406770854,
Sjors,2018-07-25T09:56:42Z,"Compared to master, this PR helps in at least the following scenario:\n* Windows 10, system locale set to Simplified Chinese (see #13754 for how)\n* launch QT from search bar or from command prompt: `bitcoin-qt -wallet=你好` \n* open console and do `getwalletinfo`\n\nBefore:\n<img width=""746"" alt=""though"" src=""https://user-images.githubusercontent.com/10217/43194044-c2c40656-9001-11e8-870f-a7f",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-407701122,407701122,
ken2812221,2018-07-26T02:45:01Z,@Sjors Now you can use any walletname you want even if you are using English language setting.,https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-407958528,407958528,
jonasschnelli,2018-07-26T11:11:22Z,Gitian Build: https://bitcoin.jonasschnelli.ch/build/715,https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408062242,408062242,
Sjors,2018-07-26T12:15:40Z,"> Now you can use any walletname you want even if you are using English language setting\n\nThanks, that worked.\n\nCan you change some of the functional tests to use unicode characters? I think `wallet_multiwallet.py` and `wallet_labels.py` would be good examples, since they use RPC arguments as well as filenames. I renamed label `e` in labels tests which worked fine on macOS. The multiwallet",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408077396,408077396,
ken2812221,2018-07-26T22:15:15Z,"Update: Dropped wmain, Use `GetCommandLineW` and `CommandLineToArgvW` instead.",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408251764,408251764,
jnewbery,2018-07-27T15:28:28Z,"> Can you change some of the functional tests to use unicode characters? ... @jnewbery thoughts?\n\nYes, functional tests should definitely include wallets & labels with unicode characters. We already have a test that covers unicode rpc username/password:\nhttps://github.com/bitcoin/bitcoin/blob/89a116dc0b446de0d18a981699a279eeaf6c9ea9/test/functional/rpc_users.py#L32\n\nwallet_multiwallet.py",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408453990,408453990,
ken2812221,2018-07-28T18:08:50Z,Update: Now we can specify any characters in `-datadir`.,https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408625474,408625474,
Sjors,2018-07-30T13:26:33Z,"Some Travis builds are unhappy:\n<img width=""1215"" alt=""schermafbeelding 2018-07-30 om 15 26 10"" src=""https://user-images.githubusercontent.com/10217/43400037-ebf6e2a0-940c-11e8-84b8-37f1d5ac85f7.png"">\n",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408862297,408862297,
ken2812221,2018-07-30T14:17:53Z,"@Sjors Those needs upstream changes bitcoin-core/leveldb#18, you can see travis result on #13787.",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-408879475,408879475,
Empact,2018-08-03T04:43:28Z,"If you call `CommandLineToArgvW` within `gArgs.ParseParameters` instead, you can avoid touching `src/bitcoind.cpp` and `src/bench/bench_bitcoin.cpp`, at least. There may be other opportunities for minimization.",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-410142887,410142887,
ken2812221,2018-08-03T07:17:54Z,">If you call CommandLineToArgvW within gArgs.ParseParameters\n\nIt would break the `ParseParameters` in tests if we do that.\n",https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-410167328,410167328,
ken2812221,2018-08-05T15:27:31Z,I'll seperate these into many PRs.,https://github.com/bitcoin/bitcoin/pull/13426#issuecomment-410527597,410527597,
Empact,2018-06-15T21:49:31Z,static?,https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195869884,195869884,src/util.cpp
Empact,2018-06-15T21:51:13Z,Is it better to do these as methods in the namespace? Preprocessor use should be minimized IMO.,https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195870172,195870172,src/util.h
ken2812221,2018-06-15T22:10:20Z,`g_utf8` should be accessible globally.,https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195873361,195873361,src/util.cpp
ken2812221,2018-06-15T22:10:21Z,"I just thought that pass the second parameter at every `.string()` and `path()` is pretty annoying and easy to forget. If most developers don't want to use macro function, I could do a scripted-diff.",https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195873365,195873365,src/util.h
Empact,2018-06-16T01:35:47Z,I mean define these macros as functions in the fs namespace that call through as defined here.,https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195890226,195890226,src/util.h
Empact,2018-06-16T01:51:56Z,"Looks like the only use is in util.h, if you implement those as methods in util.cpp, declared in util.h, you can limit variable access to here util.cpp. I may be wrong though! Reviewing on a cellphone. :P",https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195890612,195890612,src/util.cpp
ken2812221,2018-06-16T04:10:21Z,"We could include `u8path` into fs namespace, however for `u8string` we couldn't since it's a member function.",https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195893245,195893245,src/util.h
Empact,2018-06-16T22:02:03Z,"I'll defer to others as to whether this is worthwhile, but absent other options, I would make a function ala `u8path` for string as well, and hide `g_utf8`",https://github.com/bitcoin/bitcoin/pull/13426#discussion_r195913028,195913028,src/util.h
ken2812221,2018-07-12T13:36:50Z,"In order to solve this problem, there are three ways to do.\n- The first one is above, which might get `?` if the user enter any character that can't present by user's code page.\n- The second one is using `GetCommandLineW` and `CommandLineToArgvW` to get command line options in type `wchar_t`, which can present more Unicode characters.\n- The third one is adding `wmain` to get command line in ",https://github.com/bitcoin/bitcoin/pull/13426#discussion_r202036471,202036471,src/bitcoin-cli.cpp
ken2812221,2018-07-26T02:51:41Z,I choose the second way,https://github.com/bitcoin/bitcoin/pull/13426#discussion_r205317778,205317778,src/bitcoin-cli.cpp
