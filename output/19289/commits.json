[
  {
    "sha": "a13cafc6c6998baedf3c5766259c21fcd763b99e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTNjYWZjNmM2OTk4YmFlZGYzYzU3NjYyNTljMjFmY2Q3NjNiOTll",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-06-15T21:57:57Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-16T23:06:02Z"
      },
      "message": "wallet: GetWalletTx requires cs_wallet lock",
      "tree": {
        "sha": "a971c5150941f70f02a5517852f0f5b44c3ae6c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a971c5150941f70f02a5517852f0f5b44c3ae6c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a13cafc6c6998baedf3c5766259c21fcd763b99e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13cafc6c6998baedf3c5766259c21fcd763b99e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a13cafc6c6998baedf3c5766259c21fcd763b99e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13cafc6c6998baedf3c5766259c21fcd763b99e/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffad34816722cdf27a0a7c16539ddd1d655602e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffad34816722cdf27a0a7c16539ddd1d655602e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffad34816722cdf27a0a7c16539ddd1d655602e0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "080010d12fed4cfa75c068d3804202b263de38c5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13cafc6c6998baedf3c5766259c21fcd763b99e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13cafc6c6998baedf3c5766259c21fcd763b99e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a13cafc6c6998baedf3c5766259c21fcd763b99e",
        "patch": "@@ -276,7 +276,7 @@ std::string COutput::ToString() const\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n-    LOCK(cs_wallet);\n+    AssertLockHeld(cs_wallet);\n     std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(hash);\n     if (it == mapWallet.end())\n         return nullptr;\n@@ -1983,6 +1983,7 @@ bool CWalletTx::IsTrusted(std::set<uint256>& trusted_parents) const\n     if (!InMempool()) return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n+    LOCK(pwallet->cs_wallet);\n     for (const CTxIn& txin : tx->vin)\n     {\n         // Transactions not sent by us: not trusted"
      },
      {
        "sha": "558d27fa784cdbaac0d7b0a0fa495d88bd650fb5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13cafc6c6998baedf3c5766259c21fcd763b99e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13cafc6c6998baedf3c5766259c21fcd763b99e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a13cafc6c6998baedf3c5766259c21fcd763b99e",
        "patch": "@@ -793,7 +793,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     /** Interface for accessing chain state. */\n     interfaces::Chain& chain() const { assert(m_chain); return *m_chain; }\n \n-    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+    const CWalletTx* GetWalletTx(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }"
      }
    ]
  },
  {
    "sha": "d8441f30ff57e4ae98cff6694c995eaffc19c51a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODQ0MWYzMGZmNTdlNGFlOThjZmY2Njk0Yzk5NWVhZmZjMTljNTFh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-06-15T22:03:17Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-16T23:06:03Z"
      },
      "message": "wallet: IsMine overloads require cs_wallet lock",
      "tree": {
        "sha": "2aa1996402d0dcfd410462caad5eb2db0f323844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aa1996402d0dcfd410462caad5eb2db0f323844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8441f30ff57e4ae98cff6694c995eaffc19c51a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8441f30ff57e4ae98cff6694c995eaffc19c51a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8441f30ff57e4ae98cff6694c995eaffc19c51a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8441f30ff57e4ae98cff6694c995eaffc19c51a/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a13cafc6c6998baedf3c5766259c21fcd763b99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13cafc6c6998baedf3c5766259c21fcd763b99e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a13cafc6c6998baedf3c5766259c21fcd763b99e"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 37,
      "deletions": 27
    },
    "files": [
      {
        "sha": "937e602fb0a3a493828f02a4edf337ff9a2c950c",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8441f30ff57e4ae98cff6694c995eaffc19c51a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8441f30ff57e4ae98cff6694c995eaffc19c51a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d8441f30ff57e4ae98cff6694c995eaffc19c51a",
        "patch": "@@ -37,6 +37,7 @@ namespace {\n //! Construct wallet tx struct.\n WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n {\n+    LOCK(wallet.cs_wallet);\n     WalletTx result;\n     result.tx = wtx.tx;\n     result.txin_is_mine.reserve(wtx.tx->vin.size());\n@@ -132,7 +133,11 @@ class WalletImpl : public Wallet\n     {\n         return m_wallet->SignMessage(message, pkhash, str_sig);\n     }\n-    bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n+    bool isSpendable(const CTxDestination& dest) override\n+    {\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsMine(dest) & ISMINE_SPENDABLE;\n+    }\n     bool haveWatchOnly() override\n     {\n         auto spk_man = m_wallet->GetLegacyScriptPubKeyMan();"
      },
      {
        "sha": "4e1d6b805b950471b642b4cebf8d8fe165192098",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8441f30ff57e4ae98cff6694c995eaffc19c51a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8441f30ff57e4ae98cff6694c995eaffc19c51a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d8441f30ff57e4ae98cff6694c995eaffc19c51a",
        "patch": "@@ -1210,15 +1210,13 @@ void CWallet::BlockUntilSyncedToCurrentChain() const {\n \n isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n+    AssertLockHeld(cs_wallet);\n+    std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n+    if (mi != mapWallet.end())\n     {\n-        LOCK(cs_wallet);\n-        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n-        if (mi != mapWallet.end())\n-        {\n-            const CWalletTx& prev = (*mi).second;\n-            if (txin.prevout.n < prev.tx->vout.size())\n-                return IsMine(prev.tx->vout[txin.prevout.n]);\n-        }\n+        const CWalletTx& prev = (*mi).second;\n+        if (txin.prevout.n < prev.tx->vout.size())\n+            return IsMine(prev.tx->vout[txin.prevout.n]);\n     }\n     return ISMINE_NO;\n }\n@@ -1243,16 +1241,19 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n \n isminetype CWallet::IsMine(const CTxOut& txout) const\n {\n+    AssertLockHeld(cs_wallet);\n     return IsMine(txout.scriptPubKey);\n }\n \n isminetype CWallet::IsMine(const CTxDestination& dest) const\n {\n+    AssertLockHeld(cs_wallet);\n     return IsMine(GetScriptForDestination(dest));\n }\n \n isminetype CWallet::IsMine(const CScript& script) const\n {\n+    AssertLockHeld(cs_wallet);\n     isminetype result = ISMINE_NO;\n     for (const auto& spk_man_pair : m_spk_managers) {\n         result = std::max(result, spk_man_pair.second->IsMine(script));\n@@ -1264,6 +1265,7 @@ CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) cons\n {\n     if (!MoneyRange(txout.nValue))\n         throw std::runtime_error(std::string(__func__) + \": value out of range\");\n+    LOCK(cs_wallet);\n     return ((IsMine(txout) & filter) ? txout.nValue : 0);\n }\n \n@@ -1281,13 +1283,12 @@ bool CWallet::IsChange(const CScript& script) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n+    LOCK(cs_wallet);\n     if (IsMine(script))\n     {\n         CTxDestination address;\n         if (!ExtractDestination(script, address))\n             return true;\n-\n-        LOCK(cs_wallet);\n         if (!FindAddressBookEntry(address)) {\n             return true;\n         }\n@@ -1304,6 +1305,7 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n \n bool CWallet::IsMine(const CTransaction& tx) const\n {\n+    AssertLockHeld(cs_wallet);\n     for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n@@ -1597,6 +1599,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n         nFee = nDebit - nValueOut;\n     }\n \n+    LOCK(pwallet->cs_wallet);\n     // Sent/received.\n     for (unsigned int i = 0; i < tx->vout.size(); ++i)\n     {\n@@ -3155,15 +3158,17 @@ DBErrors CWallet::ZapWalletTx(std::list<CWalletTx>& vWtx)\n bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& address, const std::string& strName, const std::string& strPurpose)\n {\n     bool fUpdated = false;\n+    bool is_mine;\n     {\n         LOCK(cs_wallet);\n         std::map<CTxDestination, CAddressBookData>::iterator mi = m_address_book.find(address);\n         fUpdated = (mi != m_address_book.end() && !mi->second.IsChange());\n         m_address_book[address].SetLabel(strName);\n         if (!strPurpose.empty()) /* update purpose only if requested */\n             m_address_book[address].purpose = strPurpose;\n+        is_mine = IsMine(address) != ISMINE_NO;\n     }\n-    NotifyAddressBookChanged(this, address, strName, IsMine(address) != ISMINE_NO,\n+    NotifyAddressBookChanged(this, address, strName, is_mine,\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!strPurpose.empty() && !batch.WritePurpose(EncodeDestination(address), strPurpose))\n         return false;\n@@ -3178,27 +3183,27 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n-    // If we want to delete receiving addresses, we need to take care that DestData \"used\" (and possibly newer DestData) gets preserved (and the \"deleted\" address transformed into a change entry instead of actually being deleted)\n-    // NOTE: This isn't a problem for sending addresses because they never have any DestData yet!\n-    // When adding new DestData, it should be considered here whether to retain or delete it (or move it?).\n-    if (IsMine(address)) {\n-        WalletLogPrintf(\"%s called with IsMine address, NOT SUPPORTED. Please report this bug! %s\\n\", __func__, PACKAGE_BUGREPORT);\n-        return false;\n-    }\n-\n+    bool is_mine;\n     {\n         LOCK(cs_wallet);\n-\n+        // If we want to delete receiving addresses, we need to take care that DestData \"used\" (and possibly newer DestData) gets preserved (and the \"deleted\" address transformed into a change entry instead of actually being deleted)\n+        // NOTE: This isn't a problem for sending addresses because they never have any DestData yet!\n+        // When adding new DestData, it should be considered here whether to retain or delete it (or move it?).\n+        if (IsMine(address)) {\n+            WalletLogPrintf(\"%s called with IsMine address, NOT SUPPORTED. Please report this bug! %s\\n\", __func__, PACKAGE_BUGREPORT);\n+            return false;\n+        }\n         // Delete destdata tuples associated with address\n         std::string strAddress = EncodeDestination(address);\n         for (const std::pair<const std::string, std::string> &item : m_address_book[address].destdata)\n         {\n             WalletBatch(*database).EraseDestData(strAddress, item.first);\n         }\n         m_address_book.erase(address);\n+        is_mine = IsMine(address) != ISMINE_NO;\n     }\n \n-    NotifyAddressBookChanged(this, address, \"\", IsMine(address) != ISMINE_NO, \"\", CT_DELETED);\n+    NotifyAddressBookChanged(this, address, \"\", is_mine, \"\", CT_DELETED);\n \n     WalletBatch(*database).ErasePurpose(EncodeDestination(address));\n     return WalletBatch(*database).EraseName(EncodeDestination(address));"
      },
      {
        "sha": "0bb7a6991d333b8f28a30bfa0aa32ff54c0ec77c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8441f30ff57e4ae98cff6694c995eaffc19c51a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8441f30ff57e4ae98cff6694c995eaffc19c51a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d8441f30ff57e4ae98cff6694c995eaffc19c51a",
        "patch": "@@ -1038,20 +1038,20 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n     bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n \n-    isminetype IsMine(const CTxDestination& dest) const;\n-    isminetype IsMine(const CScript& script) const;\n-    isminetype IsMine(const CTxIn& txin) const;\n+    isminetype IsMine(const CTxDestination& dest) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    isminetype IsMine(const CScript& script) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    isminetype IsMine(const CTxIn& txin) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     /**\n      * Returns amount of debit if the input matches the\n      * filter, otherwise returns 0\n      */\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n-    isminetype IsMine(const CTxOut& txout) const;\n+    isminetype IsMine(const CTxOut& txout) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n     bool IsChange(const CTxOut& txout) const;\n     bool IsChange(const CScript& script) const;\n     CAmount GetChange(const CTxOut& txout) const;\n-    bool IsMine(const CTransaction& tx) const;\n+    bool IsMine(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     /** should probably be renamed to IsRelevantToMe */\n     bool IsFromMe(const CTransaction& tx) const;\n     CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;"
      }
    ]
  },
  {
    "sha": "b8405b833ad28351c80fb10f6f896f974013fd9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODQwNWI4MzNhZDI4MzUxYzgwZmIxMGY2Zjg5NmY5NzQwMTNmZDll",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-20T23:28:10Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-20T23:28:10Z"
      },
      "message": "wallet: IsChange requires cs_wallet lock",
      "tree": {
        "sha": "53334c952d8c22422f5b780009b92e5a9be83304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53334c952d8c22422f5b780009b92e5a9be83304"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8405b833ad28351c80fb10f6f896f974013fd9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8405b833ad28351c80fb10f6f896f974013fd9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8405b833ad28351c80fb10f6f896f974013fd9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8405b833ad28351c80fb10f6f896f974013fd9e/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8441f30ff57e4ae98cff6694c995eaffc19c51a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8441f30ff57e4ae98cff6694c995eaffc19c51a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8441f30ff57e4ae98cff6694c995eaffc19c51a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f84f4fd7189ced30ea2c0490c1314def49dad17d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8405b833ad28351c80fb10f6f896f974013fd9e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8405b833ad28351c80fb10f6f896f974013fd9e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b8405b833ad28351c80fb10f6f896f974013fd9e",
        "patch": "@@ -1283,7 +1283,7 @@ bool CWallet::IsChange(const CScript& script) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    LOCK(cs_wallet);\n+    AssertLockHeld(cs_wallet);\n     if (IsMine(script))\n     {\n         CTxDestination address;\n@@ -1298,6 +1298,7 @@ bool CWallet::IsChange(const CScript& script) const\n \n CAmount CWallet::GetChange(const CTxOut& txout) const\n {\n+    AssertLockHeld(cs_wallet);\n     if (!MoneyRange(txout.nValue))\n         throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     return (IsChange(txout) ? txout.nValue : 0);\n@@ -1364,6 +1365,7 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n \n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n+    LOCK(cs_wallet);\n     CAmount nChange = 0;\n     for (const CTxOut& txout : tx.vout)\n     {"
      },
      {
        "sha": "e50d36da6fe9fc0aab9db1148a67eb5542630080",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8405b833ad28351c80fb10f6f896f974013fd9e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8405b833ad28351c80fb10f6f896f974013fd9e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b8405b833ad28351c80fb10f6f896f974013fd9e",
        "patch": "@@ -1048,9 +1048,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n-    bool IsChange(const CTxOut& txout) const;\n-    bool IsChange(const CScript& script) const;\n-    CAmount GetChange(const CTxOut& txout) const;\n+    bool IsChange(const CTxOut& txout) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool IsChange(const CScript& script) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    CAmount GetChange(const CTxOut& txout) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool IsMine(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     /** should probably be renamed to IsRelevantToMe */\n     bool IsFromMe(const CTransaction& tx) const;"
      }
    ]
  }
]