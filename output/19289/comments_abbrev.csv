MarcoFalke,2020-06-15 23:23:20,Is this a refactor or a bugfix or a potential bugfix?,https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-644440789,644440789,
promag,2020-06-16 00:00:46,"I'd say refactor. Only change in behavior is that now some races aren't possible, for instance, some import against `MakeWalletTx`. But I don't see these as bugfix.\n\nEdit: well, without this change, if some transaction has multiple inputs/outputs for the same key, and this key is imported concurrently to `MakeWalletTx`, then the resulting `WalletTx` can be wrong. But this is very unlikely I th",https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-644451649,644451649,
DrahtBot,2020-06-16 09:50:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18608 (refactor: Remove CAddressBookData::destdata by ryanofsky)\n\nIf you consider this pull request important, please a",https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-644660413,644660413,
promag,2020-07-14 09:18:57,@meshcollider ping.,https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-658072246,658072246,
promag,2020-08-16 23:07:22,Removed 20fa4f1512c85bb967a3cb9edda9f80f46d5b11f to make this a light bug fix.,https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-674589627,674589627,
laanwj,2020-08-27 14:20:54,"Code review ACK b8405b833ad28351c80fb10f6f896f974013fd9e\n",https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-681980080,681980080,
promag,2020-08-27 14:26:53,Thanks,https://github.com/bitcoin/bitcoin/pull/19289#issuecomment-681983770,681983770,
promag,2020-06-15 22:54:10,Below `IsMine` is called for each input and output.,https://github.com/bitcoin/bitcoin/pull/19289#discussion_r440490444,440490444,src/interfaces/wallet.cpp
ryanofsky,2020-08-19 20:35:00,"In commit ""wallet: IsMine overloads require cs_wallet lock"" (d8441f30ff57e4ae98cff6694c995eaffc19c51a)\n\nMaybe with this expanded lock scope. EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) could be added to IsChange(), and that method wouldn't need to lock cs_wallet recursively. Not sure how much extra work that is, however, so maybe it is a suggestion for a followup",https://github.com/bitcoin/bitcoin/pull/19289#discussion_r473302664,473302664,src/wallet/wallet.cpp
ryanofsky,2020-08-19 20:45:58,"In commit ""wallet: GetWalletTx requires cs_wallet lock"" (a13cafc6c6998baedf3c5766259c21fcd763b99e)\n\nAdding a lock here doesn't seem like the best thing because this is a recursive function. So code above can run unlocked during the base call but locked during recursive calls, which is confusing and could make it harder to detect bugs.\n\nMaybe instead of locking here, IsTrusted could get an ",https://github.com/bitcoin/bitcoin/pull/19289#discussion_r473308226,473308226,src/wallet/wallet.cpp
promag,2020-08-19 21:15:30,Will look into it.,https://github.com/bitcoin/bitcoin/pull/19289#discussion_r473327943,473327943,src/wallet/wallet.cpp
promag,2020-08-19 21:16:11,"Good point, will address, thanks!",https://github.com/bitcoin/bitcoin/pull/19289#discussion_r473328612,473328612,src/wallet/wallet.cpp
promag,2020-08-21 00:12:37,Done in #19773.,https://github.com/bitcoin/bitcoin/pull/19289#discussion_r474338186,474338186,src/wallet/wallet.cpp
promag,2020-08-21 00:14:07,Pushed b8405b833ad28351c80fb10f6f896f974013fd9e which touches `IsChange` and `GetChange` only.,https://github.com/bitcoin/bitcoin/pull/19289#discussion_r474338612,474338612,src/wallet/wallet.cpp
