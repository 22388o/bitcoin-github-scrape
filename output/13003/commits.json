[
  {
    "sha": "fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRmYmQzM2FiNGVhNTdmMWVmYTJkMTBhMzQ2YzI1YzRhZDE4YjU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-10T22:08:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-17T03:11:27Z"
      },
      "message": "qa: Add test for orphan handling",
      "tree": {
        "sha": "9e35ac3835ab85dccbaa4024d7993546e214f5ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e35ac3835ab85dccbaa4024d7993546e214f5ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJa1WXfAAoJEM4rdWl+aaVIyBwMAIzgApcjwyM4nsPc213ueOCQ\nzp+7XCV77YVQ28YaMFxGLkW16xlJhG6xzg7IEz/4m1dPmyXARfJ2mp2xCnDpk9tq\nioMdxRkVoxSE3Ebj1KZRC76oDKHdiA3gdDW84y0hF5lGuc1plqZd/3ZIZGwdlcW0\npv6UUqkDXmH4zmKx07ih+2De8PelyTOE/3/Up36HLc4VF0M3wjnPo4R3N3lJz/CP\nYn/On1bz2OD1GF2YcNfhKOhgE5er2uCkOI76EV68EYseh+n+nUmpNTyuR/4jG8tD\naF+Ma+kuPXIs8vPOWaJCDqNGTzcJbLgpGS0crn7PKod65bTd7/MUUQooNfIOZ1g2\n4p83H4QlN0Cj8n+AcW9adKUTxuB86wMcjUQzNhwACoFeQl5mSQcaVbGOxL4ArVTq\nBMx7G5oKBFbEQ4Kcy1kxrvZ0rRJ7d/M0LSE05zQ+qnX5l9YgUhXF9UaVW84F8eaQ\n0EbllesjIzNJG3tcg4D+EnQ4v46llKs8Lc8p21Nhxw==\n=CndP\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e35ac3835ab85dccbaa4024d7993546e214f5ef\nparent 6a278e06400934df0fc6ed81b0d7c645efc50bdf\nauthor MarcoFalke <falke.marco@gmail.com> 1523398081 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1523934687 -0400\n\nqa: Add test for orphan handling\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a278e06400934df0fc6ed81b0d7c645efc50bdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a278e06400934df0fc6ed81b0d7c645efc50bdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a278e06400934df0fc6ed81b0d7c645efc50bdf"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 116,
      "deletions": 26
    },
    "files": [
      {
        "sha": "5959a8a541bc0cebbf060e7cfc59ede6b29e61ae",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
        "patch": "@@ -82,10 +82,7 @@ def set_test_params(self):\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n \n-        # reconnect_p2p() expects the network thread to be running\n-        network_thread_start()\n-\n-        self.reconnect_p2p()\n+        self.bootstrap_p2p()  # Add one p2p connection to the node\n \n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n@@ -1296,18 +1293,23 @@ def update_block(self, block_number, new_transactions):\n         self.blocks[block_number] = block\n         return block\n \n-    def reconnect_p2p(self):\n+    def bootstrap_p2p(self):\n         \"\"\"Add a P2P connection to the node.\n \n-        The node gets disconnected several times in this test. This helper\n-        method reconnects the p2p and restarts the network thread.\"\"\"\n-\n-        network_thread_join()\n-        self.nodes[0].disconnect_p2ps()\n+        Helper to connect and wait for version handshake.\"\"\"\n         self.nodes[0].add_p2p_connection(P2PDataStore())\n         network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n+    def reconnect_p2p(self):\n+        \"\"\"Tear down and bootstrap the P2P connection to the node.\n+\n+        The node gets disconnected several times in this test. This helper\n+        method reconnects the p2p and restarts the network thread.\"\"\"\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+        self.bootstrap_p2p()\n+\n     def sync_blocks(self, blocks, success=True, reject_code=None, reject_reason=None, request_block=True, reconnect=False, timeout=60):\n         \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n "
      },
      {
        "sha": "8a0961be1f792d511b533c14e956168b0d9b4d29",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 97,
        "deletions": 12,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
        "patch": "@@ -6,24 +6,48 @@\n \n In this test we connect to one node over p2p, and test tx requests.\"\"\"\n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+)\n+from test_framework.mininode import network_thread_start, P2PDataStore, network_thread_join\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until,\n+)\n \n-class InvalidTxRequestTest(BitcoinTestFramework):\n \n+class InvalidTxRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n+\n+    def bootstrap_p2p(self, *, num_connections=1):\n+        \"\"\"Add a P2P connection to the node.\n+\n+        Helper to connect and wait for version handshake.\"\"\"\n+        for _ in range(num_connections):\n+            self.nodes[0].add_p2p_connection(P2PDataStore())\n+        network_thread_start()\n+        self.nodes[0].p2p.wait_for_verack()\n+\n+    def reconnect_p2p(self, **kwargs):\n+        \"\"\"Tear down and bootstrap the P2P connection to the node.\n+\n+        The node gets disconnected several times in this test. This helper\n+        method reconnects the p2p and restarts the network thread.\"\"\"\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+        self.bootstrap_p2p(**kwargs)\n \n     def run_test(self):\n-        # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n-        node.add_p2p_connection(P2PDataStore())\n \n-        network_thread_start()\n-        node.p2p.wait_for_verack()\n+        self.bootstrap_p2p()  # Add one p2p connection to the node\n \n         best_block = self.nodes[0].getbestblockhash()\n         tip = int(best_block, 16)\n@@ -44,12 +68,73 @@ def run_test(self):\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n+        # and we get disconnected immediately\n+        self.log.info('Test a transaction that is rejected')\n         tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\n+        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+\n+        # Make two p2p connections to provide the node with orphans\n+        # * p2ps[0] will send valid orphan txs (one with low fee)\n+        # * p2ps[1] will send an invalid orphan tx (and is later disconnected for that)\n+        self.reconnect_p2p(num_connections=2)\n+\n+        self.log.info('Test orphan transaction handling ... ')\n+        # Create a root transaction that we withold until all dependend transactions\n+        # are sent out and in the orphan cache\n+        tx_withhold = CTransaction()\n+        tx_withhold.vin.append(CTxIn(outpoint=COutPoint(block1.vtx[0].sha256, 0)))\n+        tx_withhold.vout.append(CTxOut(nValue=50 * COIN - 12000, scriptPubKey=b'\\x51'))\n+        tx_withhold.calc_sha256()\n+\n+        # Our first orphan tx with some outputs to create further orphan txs\n+        tx_orphan_1 = CTransaction()\n+        tx_orphan_1.vin.append(CTxIn(outpoint=COutPoint(tx_withhold.sha256, 0)))\n+        tx_orphan_1.vout = [CTxOut(nValue=10 * COIN, scriptPubKey=b'\\x51')] * 3\n+        tx_orphan_1.calc_sha256()\n+\n+        # A valid transaction with low fee\n+        tx_orphan_2_no_fee = CTransaction()\n+        tx_orphan_2_no_fee.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_1.sha256, 0)))\n+        tx_orphan_2_no_fee.vout.append(CTxOut(nValue=10 * COIN, scriptPubKey=b'\\x51'))\n+\n+        # A valid transaction with sufficient fee\n+        tx_orphan_2_valid = CTransaction()\n+        tx_orphan_2_valid.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_1.sha256, 1)))\n+        tx_orphan_2_valid.vout.append(CTxOut(nValue=10 * COIN - 12000, scriptPubKey=b'\\x51'))\n+        tx_orphan_2_valid.calc_sha256()\n+\n+        # An invalid transaction with negative fee\n+        tx_orphan_2_invalid = CTransaction()\n+        tx_orphan_2_invalid.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_1.sha256, 2)))\n+        tx_orphan_2_invalid.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=b'\\x51'))\n+\n+        self.log.info('Send the orphans ... ')\n+        # Send valid orphan txs from p2ps[0]\n+        node.p2p.send_txs_and_test([tx_orphan_1, tx_orphan_2_no_fee, tx_orphan_2_valid], node, success=False)\n+        # Send invalid tx from p2ps[1]\n+        node.p2ps[1].send_txs_and_test([tx_orphan_2_invalid], node, success=False)\n+\n+        assert_equal(0, node.getmempoolinfo()['size'])  # Mempool should be empty\n+        assert_equal(2, len(node.getpeerinfo()))  # p2ps[1] is still connected\n+\n+        self.log.info('Send the withhold tx ... ')\n+        node.p2p.send_txs_and_test([tx_withhold], node, success=True)\n+\n+        # Transactions that should end up in the mempool\n+        expected_mempool = {\n+            t.hash\n+            for t in [\n+                tx_withhold,  # The transaction that is the root for all orphans\n+                tx_orphan_1,  # The orphan transaction that splits the coins\n+                tx_orphan_2_valid,  # The valid transaction (with sufficient fee)\n+            ]\n+        }\n+        # Transactions that do not end up in the mempool\n+        # tx_orphan_no_fee, because it has too low fee (p2ps[0] is not disconnected for relaying that tx)\n+        # tx_orphan_invaid, because it has negative fee (p2ps[1] is disconnected for relaying that tx)\n \n-        # Verify valid transaction\n-        tx1 = create_transaction(block1.vtx[0], 0, b'', 50 * COIN - 12000)\n-        node.p2p.send_txs_and_test([tx1], node, success=True)\n+        wait_until(lambda: 1 == len(node.getpeerinfo()), timeout=12)  # p2ps[1] is no longer connected\n+        assert_equal(expected_mempool, set(node.getrawmempool()))\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "0fbb3ce2cd26be09f785fad63b27da36f91ac133",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
        "patch": "@@ -554,13 +554,13 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n         if reject_reason is not None:\n             wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n \n-    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+    def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n          - send tx messages for all txs\n-         - if success is True: assert that the tx is accepted to the mempool\n-         - if success is False: assert that the tx is not accepted to the mempool\n+         - if success is True: assert that the txs are accepted to the mempool\n+         - if expect_disconnect is True: Skip the sync with ping\n          - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n \n         with mininode_lock:\n@@ -573,7 +573,10 @@ def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_rea\n         for tx in txs:\n             self.send_message(msg_tx(tx))\n \n-        self.sync_with_ping()\n+        if expect_disconnect:\n+            self.wait_for_disconnect()\n+        else:\n+            self.sync_with_ping()\n \n         raw_mempool = rpc.getrawmempool()\n         if success:"
      }
    ]
  },
  {
    "sha": "fa02c5b38b4343e70ddb656c971c9707075f5a8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTAyYzViMzhiNDM0M2U3MGRkYjY1NmM5NzFjOTcwNzA3NWY1YThm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-24T17:49:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-24T17:39:08Z"
      },
      "message": "qa: Clarify documentation for send_txs_and_test",
      "tree": {
        "sha": "eb7eb42cfb433ea82c107c7c4ba351148d4c00cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb7eb42cfb433ea82c107c7c4ba351148d4c00cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa02c5b38b4343e70ddb656c971c9707075f5a8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJa32u8AAoJEM4rdWl+aaVID4EL/1h9JfEVGJ+DkBciixsiAX4G\nWeWfFAEOSKoXu92mt/tQw5wzumGN1gpxNN1TRp6NUh2WUIzlKyx2hVJg+Q7IAH1d\nuiquNZQf1W9qLPAFa6YGDIApyYhEsQeR92BL6EoK9Pu4E3u3t0JWl0f3XaVp8ugj\n6KfDvXrrp06yamHVVlLMrkggSQV/o9iTO8ysYU6UmhojU7GlmO8Ae/HKP0z4Ro0K\n0DaYIb9bIGTNf248q48rh08Cid5e2jObVwcxhLTGg8F1t2DQj4zDOynYJRny9+pq\nGUC3safvnH0E0uGE3MEP0IqYwVzWMmNTxSonr6PmgfMC3wFgtSvZi6RD77lwBsd1\nG1A8vT0INgSFnGThLpo1PyK3805d95mf7W6rKfcDS4NcdACHj084LFvVI+acRyqg\nuw1q59Rr2+so+FMgJ7yJ+abaLuiueJSe46wblM3OB1ll590FvjlVo3zGcaDn8tjK\npp/lko7b9VivyIovkIIZMhKkoycGE/8GYna8NClqtg==\n=ha2b\n-----END PGP SIGNATURE-----",
        "payload": "tree eb7eb42cfb433ea82c107c7c4ba351148d4c00cf\nparent fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58\nauthor MarcoFalke <falke.marco@gmail.com> 1524592196 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1524591548 -0400\n\nqa: Clarify documentation for send_txs_and_test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa02c5b38b4343e70ddb656c971c9707075f5a8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa02c5b38b4343e70ddb656c971c9707075f5a8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa02c5b38b4343e70ddb656c971c9707075f5a8f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadfbd33ab4ea57f1efa2d10a346c25c4ad18b58"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7c2125a177721c96df3e74af2d3db3dc95c4a51c",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02c5b38b4343e70ddb656c971c9707075f5a8f/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02c5b38b4343e70ddb656c971c9707075f5a8f/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fa02c5b38b4343e70ddb656c971c9707075f5a8f",
        "patch": "@@ -559,7 +559,7 @@ def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, rej\n \n          - add all txs to our tx_store\n          - send tx messages for all txs\n-         - if success is True: assert that the txs are accepted to the mempool\n+         - if success is True/False: assert that the txs are/are not accepted to the mempool\n          - if expect_disconnect is True: Skip the sync with ping\n          - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n "
      }
    ]
  }
]