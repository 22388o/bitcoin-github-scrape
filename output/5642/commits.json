[
  {
    "sha": "080da96c7c2c89bdf96ba4c0058f6ebba102610f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODBkYTk2YzdjMmM4OWJkZjk2YmE0YzAwNThmNmViYmExMDI2MTBm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-11T18:42:47Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-13T14:46:27Z"
      },
      "message": "[Qt] prepare paymentservertests for new unit tests\n\n- add a second PaymentRequest Test CA certificate to paymentrequestdata.h\n  (serial number f0:da:97:e4:38:d7:64:16) as caCert2_BASE64\n- rename existing Test CA certificate to caCert1_BASE64\n- rename existing payment request data to know they belong to\n  caCert1_BASE64\n- update comments to reflect the changes and add a missing comment to one\n  of the payment requests",
      "tree": {
        "sha": "47239124cae624a4a2a711818066a2a378313c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47239124cae624a4a2a711818066a2a378313c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5380a90454dbd8ea342d5b3de90c913d9664b0b"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 57,
      "deletions": 23
    },
    "files": [
      {
        "sha": "9caff462f75f52eedf074f562b1ba6c26e9ea8a1",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 40,
        "deletions": 12,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "patch": "@@ -6,16 +6,16 @@\n // Data for paymentservertests.cpp\n //\n \n-// Base64/DER-encoded fake certificate authority certificate.\n+// Base64/DER-encoded fake certificate authority certificates.\n // Convert pem to base64/der with:\n-// cat file.pem | openssl x509 -inform PEM -outform DER | openssl enc -base64\n-//\n+// openssl x509 -in cert.pem -inform PEM -outform DER | openssl enc -base64\n+\n // Serial Number: 10302349811211485352 (0x8ef94c91b112c0a8)\n // Issuer: CN=PaymentRequest Test CA\n // Subject: CN=PaymentRequest Test CA\n // Not Valid After : Dec  8 16:37:24 2022 GMT\n //\n-const char* caCert_BASE64 =\n+const char* caCert1_BASE64 =\n \"\\\n MIIB0DCCATmgAwIBAgIJAI75TJGxEsCoMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n BAMTFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTIxMjEwMTYzNzI0WhcNMjIx\\\n@@ -29,11 +29,36 @@ RtQcf0AJ9olzUMY4syehxbzUJP6aeXhZEYiMvdvcv9D55clq6+WLLlNT3jBgAaVn\\\n p3waRjPD4bUX3nv+ojz5s4puw7Qq5QUZlhGsMzPvwDGCmZkL\\\n \";\n \n+// Serial Number: f0:da:97:e4:38:d7:64:16\n+// Issuer: CN=PaymentRequest Test CA\n+// Subject: CN=PaymentRequest Test CA\n+// Not Valid After : Jan  8 18:21:06 2025 GMT\n+//\n+const char* caCert2_BASE64 =\n+\"\\\n+MIIC1TCCAb2gAwIBAgIJAPDal+Q412QWMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n+BAMMFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTUwMTExMTgyMTA2WhcNMjUw\\\n+MTA4MTgyMTA2WjAhMR8wHQYDVQQDDBZQYXltZW50UmVxdWVzdCBUZXN0IENBMIIB\\\n+IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1S9wVLfTplJuT/1OaaBgl/Mb\\\n+I392v8S9kHbzYz7B4OTMslaO7piz0v3SO3TKMh0dswjiRdHrIgpO7XdIUQiU/ugg\\\n+xDw0kuNehfz1ycaGedlFFtFHTNXqLyIUF3dlwHhQwaomM6RXoJmxLny5BhYHEcmk\\\n+yWwr3Cdjd9gAZpblugVJB9C1e40uyL8ao4PHdLzOqO27iSe6riP8SwwisJZEbMaz\\\n+AZpgNEEMbIXPJEFvm5HTRXSMtQCOTSZYMFF0M2yrtmlECnz7hWP19b9bcoDzZQB4\\\n+ylIsFG/7q2jV7MC/e2STZv+niJiHL08RUdoFpAgzaxMgqj63C7B55HgNDNHJYQID\\\n+AQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBGejPxLxj9\\\n++crv6gUeEBMZPiUx7pUgcI22Wm5yymP96B4fwI3Y0DBehq20d76vbWGPN17Z6pH3\\\n+ge7PVY1SYqXtS6hXTo4olCm/BZADli+2Bs2xCiaa+Ltve4ufVej+bKJXN/YnrhvO\\\n+Kq+klQkuuHywU+GJV/NQeBqToIrSOBgi477NgLFCCCmmx2QWsxHoCFGfuRCBVseT\\\n+z2k/tMuALCDXGeZBRPTsGHu1y4cj84swAeoDK5QSQcI+Ub7GKc+zkoj02sdDLiMo\\\n+3wokYPcIy47oclhmb4xubHc+y7nF610yZBoC/zgbhbawnZ65hDDWkdQ/SVAnWZD7\\\n+9PFfmNnYPTQH\\\n+\";\n+\n //\n // This payment request validates directly against the\n-// above certificate authority.\n+// caCert1 certificate authority.\n //\n-const char* paymentrequest1_BASE64 =\n+const char* paymentrequest1_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMjEyMTAx\\\n@@ -55,7 +80,7 @@ SiWVbw0tX/68iSQEGGfh9n6ee/8Myb3ICdw=\\\n //\n // Signed, but expired, merchant cert in the request\n //\n-const char* paymentrequest2_BASE64 =\n+const char* paymentrequest2_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrsAwrpAzCCAeUwggFOoAMCAQICAQMwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzAyMjMy\\\n@@ -75,9 +100,9 @@ tejrSPOBNSJ3Mi/q5u2Yl4gJZY2b\\\n \";\n \n //\n-// 10-long chain, all intermediates valid\n+// 10-long certificate chain, all intermediates valid\n //\n-const char* paymentrequest3_BASE64 =\n+const char* paymentrequest3_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1Nhq8JAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n@@ -184,9 +209,9 @@ chhR/aHOuEMTxmc12K4rNlgYtHCsxLP9zd+6u0cva3TucZ6EzS8PKEib/+r12/52\\\n \";\n \n //\n-// Long chain, with an invalid (expired) cert in the middle\n+// Long certificate chain, with an expired certificate in the middle\n //\n-const char* paymentrequest4_BASE64 =\n+const char* paymentrequest4_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhqeJAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n@@ -291,7 +316,10 @@ HXQjsfdR58qZQS9CS5DAtRUf0R8+43/wijO/hb49VNaNXmY+/cPHMkahP2aV3tZi\\\n FAyZblLik9A7ZvF+UsjeFQiHB5wzWQvbqk5wQ4yabHIXoYv/E0q+eQ==\\\n \";\n \n-const char* paymentrequest5_BASE64 =\n+//\n+// Validly signed, but by a CA not in our root CA list\n+//\n+const char* paymentrequest5_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzA0MTkx\\"
      },
      {
        "sha": "684d21958788f644037098487558aa28b127e845",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "patch": "@@ -65,46 +65,52 @@ void PaymentServerTests::paymentServerTests()\n     OptionsModel optionsModel;\n     PaymentServer* server = new PaymentServer(NULL, false);\n     X509_STORE* caStore = X509_STORE_new();\n-    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert_BASE64));\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert1_BASE64));\n     PaymentServer::LoadRootCAs(caStore);\n     server->setOptionsModel(&optionsModel);\n     server->uiReady();\n \n-    // Now feed PaymentRequests to server, and observe signals it produces:\n-    std::vector<unsigned char> data = DecodeBase64(paymentrequest1_BASE64);\n-    SendCoinsRecipient r = handleRequest(server, data);\n+    std::vector<unsigned char> data;\n+    SendCoinsRecipient r;\n     QString merchant;\n+\n+    // Now feed PaymentRequests to server, and observe signals it produces\n+\n+    // This payment request validates directly against the\n+    // caCert1 certificate authority:\n+    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n+    r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"testmerchant.org\"));\n \n-    // Version of the above, with an expired certificate:\n-    data = DecodeBase64(paymentrequest2_BASE64);\n+    // Signed, but expired, merchant cert in the request:\n+    data = DecodeBase64(paymentrequest2_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n-    // Long certificate chain:\n-    data = DecodeBase64(paymentrequest3_BASE64);\n+    // 10-long certificate chain, all intermediates valid:\n+    data = DecodeBase64(paymentrequest3_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"testmerchant8.org\"));\n \n     // Long certificate chain, with an expired certificate in the middle:\n-    data = DecodeBase64(paymentrequest4_BASE64);\n+    data = DecodeBase64(paymentrequest4_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n     // Validly signed, but by a CA not in our root CA list:\n-    data = DecodeBase64(paymentrequest5_BASE64);\n+    data = DecodeBase64(paymentrequest5_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n     // Try again with no root CA's, verifiedMerchant should be empty:\n     caStore = X509_STORE_new();\n     PaymentServer::LoadRootCAs(caStore);\n-    data = DecodeBase64(paymentrequest1_BASE64);\n+    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));"
      }
    ]
  },
  {
    "sha": "17005bc0fcc1e1b5e3d17e58080af952202723af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzAwNWJjMGZjYzFlMWI1ZTNkMTdlNTgwODBhZjk1MjIwMjcyM2Fm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-12T07:43:08Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-14T12:15:26Z"
      },
      "message": "[Qt] add payment request unit test for non matching networks\n\n- verify that payment request network matches client network\n- add static verifyNetwork() function to PaymentServer to be able to use\n  the same validation code in GUI and unit-testing code",
      "tree": {
        "sha": "6c5a4ebf42b8e5112d0e4ebdb27067b3c9da8d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c5a4ebf42b8e5112d0e4ebdb27067b3c9da8d21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17005bc0fcc1e1b5e3d17e58080af952202723af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17005bc0fcc1e1b5e3d17e58080af952202723af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17005bc0fcc1e1b5e3d17e58080af952202723af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17005bc0fcc1e1b5e3d17e58080af952202723af/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/080da96c7c2c89bdf96ba4c0058f6ebba102610f"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 68,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8703966606aab7c127bc6a8cb7558a879c10007e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -521,8 +521,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         const payments::PaymentDetails& details = request.getDetails();\n \n         // Payment request network matches client network?\n-        if (details.network() != Params().NetworkIDString())\n-        {\n+        if (!verifyNetwork(request.getDetails())) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -745,3 +744,15 @@ void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n     // currently we don't futher process or store the paymentACK message\n     emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n+\n+bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)\n+{\n+    bool fVerified = requestDetails.network() == Params().NetworkIDString();\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request network \\\"%2\\\" doesn't match client network \\\"%3\\\".\")\n+            .arg(__func__)\n+            .arg(QString::fromStdString(requestDetails.network()))\n+            .arg(QString::fromStdString(Params().NetworkIDString()));\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "9330e9a89cfa1976481b4016e1fd54b0d2f63d3c",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -91,6 +91,9 @@ class PaymentServer : public QObject\n     // This is now public, because we use it in paymentservertests.cpp\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n \n+    // Verify that the payment request network matches the client network\n+    static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+\n signals:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);"
      },
      {
        "sha": "67c9a41e6104048c7f8d42010ad98ef846e508c4",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -337,3 +337,27 @@ ssymvca1S/1KeM3n8Ydi2fi1JUzAAr59xPvNJRUeqCLP9upHn5z7br3P12Oz9A20\\\n 5/4wL4ClPRPVnOHgij0bEg+y0tGESqmF1rfOfXDszlo2U92wCxS07kq79YAZJ1Zo\\\n XYh860/Q4wvc7lfiTe+dXBzPKAKhMy91yETY\\\n \";\n+\n+//\n+// Contains a testnet paytoaddress, so payment request network doesn't match client network\n+//\n+const char* paymentrequest1_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iPQoEdGVzdBIhCIDWwowE\\\n+Ehl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGNeMy6UFKgxKdXN0IFRlc3Rpbmcq\\\n+gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n+ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n+AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n+\";"
      },
      {
        "sha": "e6cdb58ef5d823efa4ba500ae980db6d7b36de7c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -115,6 +115,34 @@ void PaymentServerTests::paymentServerTests()\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n+    // Load second root certificate\n+    caStore = X509_STORE_new();\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert2_BASE64));\n+    PaymentServer::LoadRootCAs(caStore);\n+\n+    QByteArray byteArray;\n+\n+    // For the tests below we just need the payment request data from\n+    // paymentrequestdata.h parsed + stored in r.paymentRequest.\n+    //\n+    // These tests require us to bypass the following normal client execution flow\n+    // shown below to be able to explicitly just trigger a certain condition!\n+    //\n+    // handleRequest()\n+    // -> PaymentServer::eventFilter()\n+    //   -> PaymentServer::handleURIOrFile()\n+    //     -> PaymentServer::readPaymentRequestFromFile()\n+    //       -> PaymentServer::processPaymentRequest()\n+\n+    // Contains a testnet paytoaddress, so payment request network doesn't match client network:\n+    data = DecodeBase64(paymentrequest1_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized, because network \"main\" is default, even for\n+    // uninizialized payment requests and that will fail our test here.\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n+\n     // Just get some random data big enough to trigger BIP70 DoS protection\n     unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n     GetRandBytes(randData, sizeof(randData));"
      }
    ]
  }
]