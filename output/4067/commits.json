[
  {
    "sha": "b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjk0MzY0NmM2MjU1ODhlMGJmZDBhZTdhODYzNWFjZTJkY2JmYzEw",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2014-04-22T22:46:19Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2014-05-22T23:39:10Z"
      },
      "message": "Use a typedef for monetary values",
      "tree": {
        "sha": "e4884203d2c71cfbe7dac457ac54a38514447719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4884203d2c71cfbe7dac457ac54a38514447719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a48355dc44e8b86c2fc9f8b7973ac9e81a295be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48355dc44e8b86c2fc9f8b7973ac9e81a295be7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a48355dc44e8b86c2fc9f8b7973ac9e81a295be7"
      }
    ],
    "stats": {
      "total": 664,
      "additions": 350,
      "deletions": 314
    },
    "files": [
      {
        "sha": "fe176621e0461b44cc19ee9376b089fd07f9555a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -48,6 +48,7 @@ BITCOIN_CORE_H = \\\n   limitedmap.h \\\n   main.h \\\n   miner.h \\\n+  money.h \\\n   mruset.h \\\n   netbase.h \\\n   net.h \\"
      },
      {
        "sha": "8955d5c6f2b22e2b6ce7af11d7902e929d4c7908",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -146,12 +146,12 @@ const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input)\n     return coins.vout[input.prevout.n];\n }\n \n-int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx)\n+CMoney CCoinsViewCache::GetValueIn(const CTransaction& tx)\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n-    int64_t nResult = 0;\n+    CMoney nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         nResult += GetOutputFor(tx.vin[i]).nValue;\n "
      },
      {
        "sha": "35a2d02135b4021226883473fb5018bedc05b4ee",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -248,7 +248,7 @@ struct CCoinsStats\n     uint64_t nTransactionOutputs;\n     uint64_t nSerializedSize;\n     uint256 hashSerialized;\n-    int64_t nTotalAmount;\n+    CMoney nTotalAmount;\n \n     CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n };\n@@ -341,7 +341,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @param[in] tx\ttransaction for which we are checking input total\n         @return\tSum of value of all inputs (scriptSigs)\n      */\n-    int64_t GetValueIn(const CTransaction& tx);\n+    CMoney GetValueIn(const CTransaction& tx);\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx);"
      },
      {
        "sha": "2c06e142e7ea18b8c7bf1d2015f33935a2a62c14",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -51,7 +51,7 @@ void CTxIn::print() const\n     LogPrintf(\"%s\\n\", ToString());\n }\n \n-CTxOut::CTxOut(int64_t nValueIn, CScript scriptPubKeyIn)\n+CTxOut::CTxOut(const CMoney& nValueIn, CScript scriptPubKeyIn)\n {\n     nValue = nValueIn;\n     scriptPubKey = scriptPubKeyIn;\n@@ -106,9 +106,9 @@ bool CTransaction::IsNewerThan(const CTransaction& old) const\n     return fNewer;\n }\n \n-int64_t CTransaction::GetValueOut() const\n+CMoney CTransaction::GetValueOut() const\n {\n-    int64_t nValueOut = 0;\n+    CMoney nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         nValueOut += txout.nValue;"
      },
      {
        "sha": "45886c2cc3f489a9f8cb0d810ed0e6d2304df492",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -15,8 +15,8 @@\n class CTransaction;\n \n /** No amount larger than this (in satoshi) is valid */\n-static const int64_t MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+static const CMoney MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(const CMoney& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n@@ -119,15 +119,15 @@ class CTxIn\n class CTxOut\n {\n public:\n-    int64_t nValue;\n+    CMoney nValue;\n     CScript scriptPubKey;\n \n     CTxOut()\n     {\n         SetNull();\n     }\n \n-    CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n+    CTxOut(const CMoney& nValueIn, CScript scriptPubKeyIn);\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -148,7 +148,7 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    bool IsDust(int64_t nMinRelayTxFee) const\n+    bool IsDust(const CMoney& nMinRelayTxFee) const\n     {\n         // \"Dust\" is defined in terms of CTransaction::nMinRelayTxFee,\n         // which has units satoshis-per-kilobyte.\n@@ -183,8 +183,8 @@ class CTxOut\n class CTransaction\n {\n public:\n-    static int64_t nMinTxFee;\n-    static int64_t nMinRelayTxFee;\n+    static CMoney nMinTxFee;\n+    static CMoney nMinRelayTxFee;\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n     std::vector<CTxIn> vin;\n@@ -222,7 +222,7 @@ class CTransaction\n     bool IsNewerThan(const CTransaction& old) const;\n \n     // Return sum of txouts.\n-    int64_t GetValueOut() const;\n+    CMoney GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n     // inputs must be known to compute value in.\n "
      },
      {
        "sha": "5480c1b70b709cac06a7bf60607fbbd3a5ec1108",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -558,15 +558,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // cost to you of processing a transaction.\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n-        int64_t n = 0;\n+        CMoney n = 0;\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CTransaction::nMinTxFee = n;\n         else\n             return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n     }\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n-        int64_t n = 0;\n+        CMoney n = 0;\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n             CTransaction::nMinRelayTxFee = n;\n         else"
      },
      {
        "sha": "9426fceb67c0adab40e8d415a10c9f374bdec8c6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -50,9 +50,9 @@ bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n-int64_t CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n+CMoney CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-int64_t CTransaction::nMinRelayTxFee = 1000;\n+CMoney CTransaction::nMinRelayTxFee = 1000;\n \n struct COrphanBlock {\n     uint256 hashBlock;\n@@ -739,7 +739,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n-    int64_t nValueOut = 0;\n+    CMoney nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n@@ -781,12 +781,12 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode)\n+CMoney GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode)\n {\n     // Base fee is either nMinTxFee or nMinRelayTxFee\n-    int64_t nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n+    CMoney nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n \n-    int64_t nMinFee = (1 + (int64_t)nBytes / 1000) * nBaseFee;\n+    CMoney nMinFee = (1 + nBytes / 1000) * nBaseFee;\n \n     if (fAllowFree)\n     {\n@@ -901,16 +901,16 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // you should add code here to check that the transaction does a\n         // reasonable number of ECDSA signature verifications.\n \n-        int64_t nValueIn = view.GetValueIn(tx);\n-        int64_t nValueOut = tx.GetValueOut();\n-        int64_t nFees = nValueIn-nValueOut;\n+        CMoney nValueIn = view.GetValueIn(tx);\n+        CMoney nValueOut = tx.GetValueOut();\n+        CMoney nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        int64_t txMinFee = GetMinFee(tx, nSize, true, GMF_RELAY);\n+        CMoney txMinFee = GetMinFee(tx, nSize, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n@@ -1182,7 +1182,7 @@ void static PruneOrphanBlocks()\n     mapOrphanBlocks.erase(hash);\n }\n \n-int64_t GetBlockValue(int nHeight, int64_t nFees)\n+CMoney GetBlockValue(int nHeight, const CMoney& nFees)\n {\n     int64_t nSubsidy = 50 * COIN;\n     int halvings = nHeight / Params().SubsidyHalvingInterval();\n@@ -1529,8 +1529,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n         // This is also true for mempool checks.\n         CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n         int nSpendHeight = pindexPrev->nHeight + 1;\n-        int64_t nValueIn = 0;\n-        int64_t nFees = 0;\n+        CMoney nValueIn = 0;\n+        CMoney nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1557,7 +1557,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n-        int64_t nTxFee = nValueIn - tx.GetValueOut();\n+        CMoney nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n@@ -1790,7 +1790,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     int64_t nStart = GetTimeMicros();\n-    int64_t nFees = 0;\n+    CMoney nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));"
      },
      {
        "sha": "8ae6e084be013d4dc1e4aa012e11fcbbc818a75a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -166,7 +166,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state);\n-int64_t GetBlockValue(int nHeight, int64_t nFees);\n+CMoney GetBlockValue(int nHeight, const CMoney& nFees);\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n \n void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev);\n@@ -259,7 +259,7 @@ enum GetMinFee_mode\n     GMF_SEND,\n };\n \n-int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode);\n+CMoney GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode);\n \n //\n // Check transaction inputs, and make sure any\n@@ -1098,7 +1098,7 @@ extern CBlockTreeDB *pblocktree;\n struct CBlockTemplate\n {\n     CBlock block;\n-    std::vector<int64_t> vTxFees;\n+    std::vector<CMoney> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n };\n "
      },
      {
        "sha": "bf7c76aab3d98414b76f395255aa455566ce1f55",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -140,7 +140,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n-    int64_t nFees = 0;\n+    CMoney nFees = 0;\n     {\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n@@ -163,7 +163,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             COrphan* porphan = NULL;\n             double dPriority = 0;\n-            int64_t nTotalIn = 0;\n+            CMoney nTotalIn = 0;\n             bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n@@ -197,7 +197,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 }\n                 const CCoins &coins = view.GetCoins(txin.prevout.hash);\n \n-                int64_t nValueIn = coins.vout[txin.prevout.n].nValue;\n+                CMoney nValueIn = coins.vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n \n                 int nConf = pindexPrev->nHeight - coins.nHeight + 1;\n@@ -270,7 +270,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64_t nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+            CMoney nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "0cbe94b874bcf061207a5f29d1fbd45802b9a99f",
        "filename": "src/money.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/money.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/money.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/money.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MONEY_H\n+#define BITCOIN_MONEY_H\n+\n+#include <stdint.h>\n+\n+typedef int64_t CMoney;\n+\n+#endif"
      },
      {
        "sha": "d72b9ad8f906cb46ec5bb6d2bb8634217725f9da",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -120,9 +120,9 @@ QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)\n     return unit;\n }\n \n-qint64 BitcoinAmountField::value(bool *valid_out) const\n+CMoney BitcoinAmountField::value(bool *valid_out) const\n {\n-    qint64 val_out = 0;\n+    CMoney val_out = 0;\n     bool valid = BitcoinUnits::parse(currentUnit, text(), &val_out);\n     if (valid_out)\n     {\n@@ -131,7 +131,7 @@ qint64 BitcoinAmountField::value(bool *valid_out) const\n     return val_out;\n }\n \n-void BitcoinAmountField::setValue(qint64 value)\n+void BitcoinAmountField::setValue(const CMoney& value)\n {\n     setText(BitcoinUnits::format(currentUnit, value));\n }\n@@ -152,7 +152,7 @@ void BitcoinAmountField::unitChanged(int idx)\n \n     // Parse current value and convert to new unit\n     bool valid = false;\n-    qint64 currentValue = value(&valid);\n+    CMoney currentValue = value(&valid);\n \n     currentUnit = newUnit;\n \n@@ -179,7 +179,7 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n     unit->setValue(newUnit);\n }\n \n-void BitcoinAmountField::setSingleStep(qint64 step)\n+void BitcoinAmountField::setSingleStep(const CMoney& step)\n {\n     nSingleStep = step;\n     unitChanged(unit->currentIndex());"
      },
      {
        "sha": "b4b6cb06444cb5fb777a7399ea884766f3787d96",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINAMOUNTFIELD_H\n #define BITCOINAMOUNTFIELD_H\n \n+#include \"money.h\"\n+\n #include <QWidget>\n \n QT_BEGIN_NAMESPACE\n@@ -18,16 +20,16 @@ class BitcoinAmountField: public QWidget\n {\n     Q_OBJECT\n \n-    Q_PROPERTY(qint64 value READ value WRITE setValue NOTIFY textChanged USER true)\n+    Q_PROPERTY(CMoney value READ value WRITE setValue NOTIFY textChanged USER true)\n \n public:\n     explicit BitcoinAmountField(QWidget *parent = 0);\n \n-    qint64 value(bool *valid=0) const;\n-    void setValue(qint64 value);\n+    CMoney value(bool *value=0) const;\n+    void setValue(const CMoney& value);\n \n     /** Set single step in satoshis **/\n-    void setSingleStep(qint64 step);\n+    void setSingleStep(const CMoney& step);\n \n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);\n@@ -59,7 +61,7 @@ class BitcoinAmountField: public QWidget\n     QDoubleSpinBox *amount;\n     QValueComboBox *unit;\n     int currentUnit;\n-    qint64 nSingleStep;\n+    CMoney nSingleStep;\n \n     void setText(const QString &text);\n     QString text() const;"
      },
      {
        "sha": "3232d8b6c22c8cff8c429083670bc10c7427b4d1",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -822,7 +822,7 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n }\n \n #ifdef ENABLE_WALLET\n-void BitcoinGUI::incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address)\n+void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CMoney& amount, const QString& type, const QString& address)\n {\n     // On new transaction, make an info balloon\n     message((amount)<0 ? tr(\"Sent transaction\") : tr(\"Incoming transaction\"),"
      },
      {
        "sha": "27d07cd642c9b7aac906d95ee80ce2516fe6915e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -9,6 +9,8 @@\n #include \"bitcoin-config.h\"\n #endif\n \n+#include \"money.h\"\n+\n #include <QMainWindow>\n #include <QMap>\n #include <QSystemTrayIcon>\n@@ -151,7 +153,7 @@ public slots:\n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     /** Show incoming transaction notification for new transactions. */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CMoney& amount, const QString& type, const QString& address);\n #endif\n \n private slots:"
      },
      {
        "sha": "30de9a506d67c955da521a6dad40f15b2a6e94e4",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -67,14 +67,14 @@ qint64 BitcoinUnits::factor(int unit)\n     }\n }\n \n-qint64 BitcoinUnits::maxAmount(int unit)\n+CMoney BitcoinUnits::maxAmount(int unit)\n {\n     switch(unit)\n     {\n-    case BTC:  return Q_INT64_C(21000000);\n-    case mBTC: return Q_INT64_C(21000000000);\n-    case uBTC: return Q_INT64_C(21000000000000);\n-    default:   return 0;\n+    case BTC:  return 21000000LL;\n+    case mBTC: return 21000000000LL;\n+    case uBTC: return 21000000000000LL;\n+    default:   return 0LL;\n     }\n }\n \n@@ -100,7 +100,7 @@ int BitcoinUnits::decimals(int unit)\n     }\n }\n \n-QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n+QString BitcoinUnits::format(int unit, const CMoney& n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -127,12 +127,12 @@ QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n     return quotient_str + QString(\".\") + remainder_str;\n }\n \n-QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign)\n+QString BitcoinUnits::formatWithUnit(int unit, const CMoney& amount, bool plussign)\n {\n     return format(unit, amount, plussign) + QString(\" \") + name(unit);\n }\n \n-bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n+bool BitcoinUnits::parse(int unit, const QString &value, CMoney *val_out)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string"
      },
      {
        "sha": "204bb0ce9ce6f3d462ae3d97bd4f1801a590b0c5",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINUNITS_H\n #define BITCOINUNITS_H\n \n+#include \"money.h\"\n+\n #include <QAbstractListModel>\n #include <QString>\n \n@@ -43,17 +45,17 @@ class BitcoinUnits: public QAbstractListModel\n     //! Number of Satoshis (1e-8) per unit\n     static qint64 factor(int unit);\n     //! Max amount per unit\n-    static qint64 maxAmount(int unit);\n+    static CMoney maxAmount(int unit);\n     //! Number of amount digits (to represent max number of coins)\n     static int amountDigits(int unit);\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string\n-    static QString format(int unit, qint64 amount, bool plussign=false);\n+    static QString format(int unit, const CMoney& amount, bool plussign=false);\n     //! Format as string (with unit)\n-    static QString formatWithUnit(int unit, qint64 amount, bool plussign=false);\n+    static QString formatWithUnit(int unit, const CMoney& amount, bool plussign=false);\n     //! Parse string to coin amount\n-    static bool parse(int unit, const QString &value, qint64 *val_out);\n+    static bool parse(int unit, const QString &value, CMoney *val_out);\n     ///@}\n \n     //! @name AbstractListModel implementation"
      },
      {
        "sha": "7f44a644f3e36373dee104920055f0ff198d8914",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -27,7 +27,7 @@\n #include <QTreeWidgetItem>\n \n using namespace std;\n-QList<qint64> CoinControlDialog::payAmounts;\n+QList<CMoney> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n \n CoinControlDialog::CoinControlDialog(QWidget *parent) :\n@@ -438,11 +438,11 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         return;\n \n     // nPayAmount\n-    qint64 nPayAmount = 0;\n+    CMoney nPayAmount = 0;\n     bool fLowOutput = false;\n     bool fDust = false;\n     CTransaction txDummy;\n-    foreach(const qint64 &amount, CoinControlDialog::payAmounts)\n+    foreach(const CMoney &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n@@ -459,10 +459,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     }\n \n     QString sPriorityLabel      = tr(\"none\");\n-    int64_t nAmount             = 0;\n-    int64_t nPayFee             = 0;\n-    int64_t nAfterFee           = 0;\n-    int64_t nChange             = 0;\n+    CMoney nAmount              = 0;\n+    CMoney nPayFee              = 0;\n+    CMoney nAfterFee            = 0;\n+    CMoney nChange              = 0;\n     unsigned int nBytes         = 0;\n     unsigned int nBytesInputs   = 0;\n     double dPriority            = 0;\n@@ -525,10 +525,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority);\n \n         // Fee\n-        int64_t nFee = nTransactionFee * (1 + (int64_t)nBytes / 1000);\n+        CMoney nFee = nTransactionFee * (1 + nBytes / 1000);\n \n         // Min Fee\n-        int64_t nMinFee = GetMinFee(txDummy, nBytes, AllowFree(dPriority), GMF_SEND);\n+        CMoney nMinFee = GetMinFee(txDummy, nBytes, AllowFree(dPriority), GMF_SEND);\n \n         nPayFee = max(nFee, nMinFee);\n \n@@ -681,7 +681,7 @@ void CoinControlDialog::updateView()\n             itemWalletAddress->setText(COLUMN_ADDRESS, sWalletAddress);\n         }\n \n-        int64_t nSum = 0;\n+        CMoney nSum = 0;\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;"
      },
      {
        "sha": "2f54a598564dec32b828c66ebe554e545c2968af",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef COINCONTROLDIALOG_H\n #define COINCONTROLDIALOG_H\n \n+#include \"money.h\"\n+\n #include <QAbstractButton>\n #include <QAction>\n #include <QDialog>\n@@ -34,7 +36,7 @@ class CoinControlDialog : public QDialog\n     static void updateLabels(WalletModel*, QDialog*);\n     static QString getPriorityLabel(double);\n \n-    static QList<qint64> payAmounts;\n+    static QList<CMoney> payAmounts;\n     static CCoinControl *coinControl;\n \n private:"
      },
      {
        "sha": "c8ced6dded6236e51d026dffb26bb547325608fa",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -200,7 +200,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n     return ret;\n }\n \n-bool isDust(const QString& address, qint64 amount)\n+bool isDust(const QString& address, const CMoney& amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script; script.SetDestination(dest);"
      },
      {
        "sha": "23dce445e2b6e5638eccabb7144647c93f26b11b",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef GUIUTIL_H\n #define GUIUTIL_H\n \n+#include \"money.h\"\n+\n #include <QHeaderView>\n #include <QMessageBox>\n #include <QObject>\n@@ -46,7 +48,7 @@ namespace GUIUtil\n     QString formatBitcoinURI(const SendCoinsRecipient &info);\n \n     // Returns true if given address+amount meets \"dust\" definition\n-    bool isDust(const QString& address, qint64 amount);\n+    bool isDust(const QString& address, const CMoney& amount);\n \n     // HTML escaping for rich text controls\n     QString HtmlEscape(const QString& str, bool fMultiLine=false);"
      },
      {
        "sha": "23a8a4e37b87083d9b9340b5c7278407b593bacd",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OPTIONSMODEL_H\n #define OPTIONSMODEL_H\n \n+#include \"money.h\"\n+\n #include <QAbstractListModel>\n \n QT_BEGIN_NAMESPACE\n@@ -83,7 +85,7 @@ class OptionsModel : public QAbstractListModel\n \n signals:\n     void displayUnitChanged(int unit);\n-    void transactionFeeChanged(qint64);\n+    void transactionFeeChanged(const CMoney&);\n     void coinControlFeaturesChanged(bool);\n };\n "
      },
      {
        "sha": "933c4e81ae0cc669c465da10c80eaee09797d344",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -135,7 +135,7 @@ OverviewPage::~OverviewPage()\n     delete ui;\n }\n \n-void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)\n+void OverviewPage::setBalance(const CMoney& balance, const CMoney& unconfirmedBalance, const CMoney& immatureBalance)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     currentBalance = balance;\n@@ -183,7 +183,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n \n         // Keep up to date with wallet\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(const CMoney&, const CMoney&, const CMoney&)), this, SLOT(setBalance(const CMoney&, const CMoney&, const CMoney&)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n     }"
      },
      {
        "sha": "989cdce269d89baa30f1d67a9ba7d95ac9397ab6",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OVERVIEWPAGE_H\n #define OVERVIEWPAGE_H\n \n+#include \"money.h\"\n+\n #include <QWidget>\n \n class ClientModel;\n@@ -34,7 +36,7 @@ class OverviewPage : public QWidget\n     void showOutOfSyncWarning(bool fShow);\n \n public slots:\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n+    void setBalance(const CMoney& balance, const CMoney& unconfirmedBalance, const CMoney& immatureBalance);\n \n signals:\n     void transactionClicked(const QModelIndex &index);\n@@ -43,9 +45,9 @@ public slots:\n     Ui::OverviewPage *ui;\n     ClientModel *clientModel;\n     WalletModel *walletModel;\n-    qint64 currentBalance;\n-    qint64 currentUnconfirmedBalance;\n-    qint64 currentImmatureBalance;\n+    CMoney currentBalance;\n+    CMoney currentUnconfirmedBalance;\n+    CMoney currentImmatureBalance;\n \n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;"
      },
      {
        "sha": "3cffc1cf1d0136851e3244f9257e29b8a6b55c04",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -194,9 +194,9 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     return fResult;\n }\n \n-QList<std::pair<CScript,qint64> > PaymentRequestPlus::getPayTo() const\n+QList<std::pair<CScript,CMoney> > PaymentRequestPlus::getPayTo() const\n {\n-    QList<std::pair<CScript,qint64> > result;\n+    QList<std::pair<CScript,CMoney> > result;\n     for (int i = 0; i < details.outputs_size(); i++)\n     {\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();"
      },
      {
        "sha": "0927ceb211262f4cd84341a9c9d4ea54c5ad5e4d",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -33,7 +33,7 @@ class PaymentRequestPlus\n     bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n \n     // Returns list of outputs, amount\n-    QList<std::pair<CScript,qint64> > getPayTo() const;\n+    QList<std::pair<CScript,CMoney> > getPayTo() const;\n \n     const payments::PaymentDetails& getDetails() const { return details; }\n "
      },
      {
        "sha": "121c38f37d0cc5695a9c11f5be6bfbfe7c4168c8",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -487,10 +487,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n     request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n-    QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n+    QList<std::pair<CScript, CMoney> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+    foreach(const PAIRTYPE(CScript, CMoney)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "1b7fe2d244dc20f10aca087ac74776cd709ab229",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -91,7 +91,7 @@ void SendCoinsDialog::setModel(WalletModel *model)\n         }\n \n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(const CMoney&, const CMoney&, const CMoney&)), this, SLOT(setBalance(const CMoney&, const CMoney&, const CMoney&)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         // Coin Control\n@@ -202,7 +202,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    qint64 txFee = currentTransaction.getTransactionFee();\n+    CMoney txFee = currentTransaction.getTransactionFee();\n     QString questionString = tr(\"Are you sure you want to send?\");\n     questionString.append(\"<br /><br />%1\");\n \n@@ -217,7 +217,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // add total amount in all subdivision units\n     questionString.append(\"<hr />\");\n-    qint64 totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n+    CMoney totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n     foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n@@ -401,7 +401,7 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     return true;\n }\n \n-void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)\n+void SendCoinsDialog::setBalance(const CMoney& balance, const CMoney& unconfirmedBalance, const CMoney& immatureBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n     Q_UNUSED(immatureBalance);"
      },
      {
        "sha": "26478c1b0ece5f61845e78d94e38b5514a7ca359",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -47,7 +47,7 @@ public slots:\n     void accept();\n     SendCoinsEntry *addEntry();\n     void updateTabsAndLabels();\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n+    void setBalance(const CMoney& balance, const CMoney& unconfirmedBalance, const CMoney& immatureBalance);\n \n private:\n     Ui::SendCoinsDialog *ui;"
      },
      {
        "sha": "259e0f6d224050b2c66b0e74c71aed3c0a4d0a08",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -51,9 +51,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit();\n-    int64_t nDebit = wtx.GetDebit();\n-    int64_t nNet = nCredit - nDebit;\n+    CMoney nCredit = wtx.GetCredit();\n+    CMoney nDebit = wtx.GetDebit();\n+    CMoney nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n     int nRequests = wtx.GetRequestCount();\n@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n         //\n         // Coinbase\n         //\n-        int64_t nUnmatured = 0;\n+        CMoney nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             nUnmatured += wallet->GetCredit(txout);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n@@ -190,13 +190,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n             if (fAllToMe)\n             {\n                 // Payment to self\n-                int64_t nChange = wtx.GetChange();\n-                int64_t nValue = nCredit - nChange;\n+                CMoney nChange = wtx.GetChange();\n+                CMoney nValue = nCredit - nChange;\n                 strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nValue) + \"<br>\";\n                 strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CMoney nTxFee = nDebit - wtx.GetValueOut();\n             if (nTxFee > 0)\n                 strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nTxFee) + \"<br>\";\n         }"
      },
      {
        "sha": "65362f7941ad61c56de7baf0f51adb9971d29a7b",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -72,7 +72,7 @@ void TransactionFilterProxy::setTypeFilter(quint32 modes)\n     invalidateFilter();\n }\n \n-void TransactionFilterProxy::setMinAmount(qint64 minimum)\n+void TransactionFilterProxy::setMinAmount(const CMoney& minimum)\n {\n     this->minAmount = minimum;\n     invalidateFilter();"
      },
      {
        "sha": "163f129f5caab4b3a306b80e800ef3fe523ed041",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef TRANSACTIONFILTERPROXY_H\n #define TRANSACTIONFILTERPROXY_H\n \n+#include \"money.h\"\n+\n #include <QDateTime>\n #include <QSortFilterProxyModel>\n \n@@ -31,7 +33,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n       @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n     void setTypeFilter(quint32 modes);\n-    void setMinAmount(qint64 minimum);\n+    void setMinAmount(const CMoney& minimum);\n \n     /** Set maximum number of rows returned, -1 if unlimited. */\n     void setLimit(int limit);\n@@ -49,7 +51,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     QDateTime dateTo;\n     QString addrPrefix;\n     quint32 typeFilter;\n-    qint64 minAmount;\n+    CMoney minAmount;\n     int limitRows;\n     bool showInactive;\n };"
      },
      {
        "sha": "70ca0c775f5d20ac84dcadfba83ccd53a788a1f6",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -31,9 +31,9 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit();\n-    int64_t nNet = nCredit - nDebit;\n+    CMoney nCredit = wtx.GetCredit(true);\n+    CMoney nDebit = wtx.GetDebit();\n+    CMoney nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n@@ -85,7 +85,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         if (fAllFromMe && fAllToMe)\n         {\n             // Payment to self\n-            int64_t nChange = wtx.GetChange();\n+            CMoney nChange = wtx.GetChange();\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n@@ -95,7 +95,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CMoney nTxFee = nDebit - wtx.GetValueOut();\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n@@ -124,7 +124,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.address = mapValue[\"to\"];\n                 }\n \n-                int64_t nValue = txout.nValue;\n+                CMoney nValue = txout.nValue;\n                 /* Add fee to first output */\n                 if (nTxFee > 0)\n                 {"
      },
      {
        "sha": "99d3e41d77a8c0430851e514e66727b2d1c4358f",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -6,6 +6,7 @@\n #define TRANSACTIONRECORD_H\n \n #include \"uint256.h\"\n+#include \"money.h\"\n \n #include <QList>\n #include <QString>\n@@ -94,7 +95,7 @@ class TransactionRecord\n \n     TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n-                qint64 debit, qint64 credit):\n+                const CMoney& debit, const CMoney& credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n             idx(0)\n     {\n@@ -111,8 +112,8 @@ class TransactionRecord\n     qint64 time;\n     Type type;\n     std::string address;\n-    qint64 debit;\n-    qint64 credit;\n+    CMoney debit;\n+    CMoney credit;\n     /**@}*/\n \n     /** Subtransaction index, for sort key */"
      },
      {
        "sha": "1d959c1be7bee218b44086de9b6b5be7c0ae05e4",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -279,7 +279,7 @@ void TransactionView::changedAmount(const QString &amount)\n {\n     if(!transactionProxyModel)\n         return;\n-    qint64 amount_parsed = 0;\n+    CMoney amount_parsed = 0;\n     if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n     {\n         transactionProxyModel->setMinAmount(amount_parsed);"
      },
      {
        "sha": "3974a35ee8bf697959776c42361788de4681b665",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -50,11 +50,11 @@ WalletModel::~WalletModel()\n     unsubscribeFromCoreSignals();\n }\n \n-qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n+CMoney WalletModel::getBalance(const CCoinControl *coinControl) const\n {\n     if (coinControl)\n     {\n-        qint64 nBalance = 0;\n+        CMoney nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n@@ -66,12 +66,12 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n     return wallet->GetBalance();\n }\n \n-qint64 WalletModel::getUnconfirmedBalance() const\n+CMoney WalletModel::getUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedBalance();\n }\n \n-qint64 WalletModel::getImmatureBalance() const\n+CMoney WalletModel::getImmatureBalance() const\n {\n     return wallet->GetImmatureBalance();\n }\n@@ -121,9 +121,9 @@ void WalletModel::pollBalanceChanged()\n \n void WalletModel::checkBalanceChanged()\n {\n-    qint64 newBalance = getBalance();\n-    qint64 newUnconfirmedBalance = getUnconfirmedBalance();\n-    qint64 newImmatureBalance = getImmatureBalance();\n+    CMoney newBalance = getBalance();\n+    CMoney newUnconfirmedBalance = getUnconfirmedBalance();\n+    CMoney newImmatureBalance = getImmatureBalance();\n \n     if(cachedBalance != newBalance || cachedUnconfirmedBalance != newUnconfirmedBalance || cachedImmatureBalance != newImmatureBalance)\n     {\n@@ -165,9 +165,9 @@ bool WalletModel::validateAddress(const QString &address)\n \n WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n {\n-    qint64 total = 0;\n+    CMoney total = 0;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, int64_t> > vecSend;\n+    std::vector<std::pair<CScript, CMoney> > vecSend;\n \n     if(recipients.empty())\n     {\n@@ -182,7 +182,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n-            int64_t subtotal = 0;\n+            CMoney subtotal = 0;\n             const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n             for (int i = 0; i < details.outputs_size(); i++)\n             {\n@@ -191,7 +191,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, out.amount()));\n+                vecSend.push_back(std::pair<CScript, CMoney>(scriptPubKey, out.amount()));\n             }\n             if (subtotal <= 0)\n             {\n@@ -214,7 +214,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n \n             CScript scriptPubKey;\n             scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n+            vecSend.push_back(std::pair<CScript, CMoney>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;\n         }\n@@ -224,7 +224,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    qint64 nBalance = getBalance(coinControl);\n+    CMoney nBalance = getBalance(coinControl);\n \n     if(total > nBalance)\n     {\n@@ -241,7 +241,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n-        int64_t nFeeRequired = 0;\n+        CMoney nFeeRequired = 0;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();"
      },
      {
        "sha": "6345e430b797194a462f3f63b8ca72eec6c3684f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -37,7 +37,7 @@ class SendCoinsRecipient\n {\n public:\n     explicit SendCoinsRecipient() : amount(0), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n-    explicit SendCoinsRecipient(const QString &addr, const QString &label, quint64 amount, const QString &message):\n+    explicit SendCoinsRecipient(const QString &addr, const QString &label, const CMoney& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n     // If from an insecure payment request, this is used for storing\n@@ -47,7 +47,7 @@ class SendCoinsRecipient\n     // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString address;\n     QString label;\n-    qint64 amount;\n+    CMoney amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n \n@@ -125,9 +125,9 @@ class WalletModel : public QObject\n     TransactionTableModel *getTransactionTableModel();\n     RecentRequestsTableModel *getRecentRequestsTableModel();\n \n-    qint64 getBalance(const CCoinControl *coinControl = NULL) const;\n-    qint64 getUnconfirmedBalance() const;\n-    qint64 getImmatureBalance() const;\n+    CMoney getBalance(const CCoinControl *coinControl = NULL) const;\n+    CMoney getUnconfirmedBalance() const;\n+    CMoney getImmatureBalance() const;\n     int getNumTransactions() const;\n     EncryptionStatus getEncryptionStatus() const;\n \n@@ -203,9 +203,9 @@ class WalletModel : public QObject\n     RecentRequestsTableModel *recentRequestsTableModel;\n \n     // Cache some values to be able to detect changes\n-    qint64 cachedBalance;\n-    qint64 cachedUnconfirmedBalance;\n-    qint64 cachedImmatureBalance;\n+    CMoney cachedBalance;\n+    CMoney cachedUnconfirmedBalance;\n+    CMoney cachedImmatureBalance;\n     qint64 cachedNumTransactions;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n@@ -218,7 +218,7 @@ class WalletModel : public QObject\n \n signals:\n     // Signal that balance in wallet changed\n-    void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n+    void balanceChanged(const CMoney& balance, const CMoney& unconfirmedBalance, const CMoney& immatureBalance);\n \n     // Number of transactions in wallet changed\n     void numTransactionsChanged(int count);"
      },
      {
        "sha": "f5946933170914d706bf3c91b8e4badaf5945b5f",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -31,19 +31,19 @@ CWalletTx *WalletModelTransaction::getTransaction()\n     return walletTransaction;\n }\n \n-qint64 WalletModelTransaction::getTransactionFee()\n+CMoney WalletModelTransaction::getTransactionFee()\n {\n     return fee;\n }\n \n-void WalletModelTransaction::setTransactionFee(qint64 newFee)\n+void WalletModelTransaction::setTransactionFee(const CMoney& newFee)\n {\n     fee = newFee;\n }\n \n-qint64 WalletModelTransaction::getTotalTransactionAmount()\n+CMoney WalletModelTransaction::getTotalTransactionAmount()\n {\n-    qint64 totalTransactionAmount = 0;\n+    CMoney totalTransactionAmount = 0;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;"
      },
      {
        "sha": "68f2f44dc6b5527e0d668675f5b680ce55a707e4",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -26,10 +26,10 @@ class WalletModelTransaction\n \n     CWalletTx *getTransaction();\n \n-    void setTransactionFee(qint64 newFee);\n-    qint64 getTransactionFee();\n+    void setTransactionFee(const CMoney& newFee);\n+    CMoney getTransactionFee();\n \n-    qint64 getTotalTransactionAmount();\n+    CMoney getTotalTransactionAmount();\n \n     void newPossibleKeyChange(CWallet *wallet);\n     CReserveKey *getPossibleKeyChange();\n@@ -38,7 +38,7 @@ class WalletModelTransaction\n     const QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n     CReserveKey *keyChange;\n-    qint64 fee;\n+    CMoney fee;\n };\n \n #endif // WALLETMODELTRANSACTION_H"
      },
      {
        "sha": "d1cd88de99dd4d277a52533a7249faa367fc7a63",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -92,7 +92,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         connect(this, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n \n         // Pass through transaction notifications\n-        connect(this, SIGNAL(incomingTransaction(QString,int,qint64,QString,QString)), gui, SLOT(incomingTransaction(QString,int,qint64,QString,QString)));\n+        connect(this, SIGNAL(incomingTransaction(QString,int,const CMoney&,QString,QString)), gui, SLOT(incomingTransaction(QString,int,const CMoney&,QString,QString)));\n     }\n }\n "
      },
      {
        "sha": "a55526ebf2303371538a5d86002a3c524da8b8d9",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef WALLETVIEW_H\n #define WALLETVIEW_H\n \n+#include \"money.h\"\n+\n #include <QStackedWidget>\n \n class BitcoinGUI;\n@@ -111,7 +113,7 @@ public slots:\n     /** Encryption status of wallet changed */\n     void encryptionStatusChanged(int status);\n     /** Notify that a new transaction appeared */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CMoney& amount, const QString& type, const QString& address);\n };\n \n #endif // WALLETVIEW_H"
      },
      {
        "sha": "7c9069085c7b916e50560e9c90848968a9bc0cfa",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -278,7 +278,7 @@ Value listunspent(const Array& params, bool fHelp)\n                 continue;\n         }\n \n-        int64_t nValue = out.tx->vout[out.i].nValue;\n+        CMoney nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n@@ -381,7 +381,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CMoney nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);"
      },
      {
        "sha": "bcc620ad22083a2357bc5e27a44d49eeedfec2c5",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -81,18 +81,18 @@ void RPCTypeCheck(const Object& o,\n     }\n }\n \n-int64_t AmountFromValue(const Value& value)\n+CMoney AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64_t nAmount = roundint64(dAmount * COIN);\n+    CMoney nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }\n \n-Value ValueFromAmount(int64_t amount)\n+Value ValueFromAmount(const CMoney& amount)\n {\n     return (double)amount / (double)COIN;\n }"
      },
      {
        "sha": "ad54cd55442349603f658be505f4ac466e590fbe",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"uint256.h\"\n #include \"rpcprotocol.h\"\n+#include \"money.h\"\n \n #include <list>\n #include <map>\n@@ -103,8 +104,8 @@ extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n-extern int64_t AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(int64_t amount);\n+extern CMoney AmountFromValue(const json_spirit::Value& value);\n+extern json_spirit::Value ValueFromAmount(const CMoney& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n extern std::string HelpRequiringPassphrase();"
      },
      {
        "sha": "2bd5e76c21e220c67d4cd82766f952499e3ed018",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -330,7 +330,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    int64_t nAmount = AmountFromValue(params[1]);\n+    CMoney nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -374,7 +374,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n         );\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n+    map<CTxDestination, CMoney> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n@@ -483,7 +483,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CMoney nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -532,7 +532,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CMoney nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -552,9 +552,9 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n+CMoney GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n {\n-    int64_t nBalance = 0;\n+    CMoney nBalance = 0;\n \n     // Tally wallet transactions\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -563,7 +563,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n         if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n-        int64_t nReceived, nSent, nFee;\n+        CMoney nReceived, nSent, nFee;\n         wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n@@ -577,7 +577,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     return nBalance;\n }\n \n-int64_t GetAccountBalance(const string& strAccount, int nMinDepth)\n+CMoney GetAccountBalance(const string& strAccount, int nMinDepth)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth);\n@@ -622,24 +622,24 @@ Value getbalance(const Array& params, bool fHelp)\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' 0 should return the same number\n-        int64_t nBalance = 0;\n+        CMoney nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n-            int64_t allFee;\n+            CMoney allFee;\n             string strSentAccount;\n-            list<pair<CTxDestination, int64_t> > listReceived;\n-            list<pair<CTxDestination, int64_t> > listSent;\n+            list<pair<CTxDestination, CMoney> > listReceived;\n+            list<pair<CTxDestination, CMoney> > listSent;\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CTxDestination,CMoney)& r, listReceived)\n                     nBalance += r.second;\n             }\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination,CMoney)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n         }\n@@ -648,7 +648,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    CMoney nBalance = GetAccountBalance(strAccount, nMinDepth);\n \n     return ValueFromAmount(nBalance);\n }\n@@ -687,7 +687,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CMoney nAmount = AmountFromValue(params[2]);\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -761,7 +761,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CMoney nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -776,7 +776,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    CMoney nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -829,9 +829,9 @@ Value sendmany(const Array& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, int64_t> > vecSend;\n+    vector<pair<CScript, CMoney> > vecSend;\n \n-    int64_t totalAmount = 0;\n+    CMoney totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n@@ -844,7 +844,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CMoney nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -853,13 +853,13 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    CMoney nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    int64_t nFeeRequired = 0;\n+    CMoney nFeeRequired = 0;\n     string strFailReason;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n@@ -919,7 +919,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n \n struct tallyitem\n {\n-    int64_t nAmount;\n+    CMoney nAmount;\n     int nConf;\n     vector<uint256> txids;\n     tallyitem()\n@@ -978,7 +978,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n-        int64_t nAmount = 0;\n+        CMoney nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n         if (it != mapTally.end())\n         {\n@@ -1016,7 +1016,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         for (map<string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            int64_t nAmount = (*it).second.nAmount;\n+            CMoney nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n             obj.push_back(Pair(\"account\",       (*it).first));\n@@ -1097,10 +1097,10 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n-    int64_t nFee;\n+    CMoney nFee;\n     string strSentAccount;\n-    list<pair<CTxDestination, int64_t> > listReceived;\n-    list<pair<CTxDestination, int64_t> > listSent;\n+    list<pair<CTxDestination, CMoney> > listReceived;\n+    list<pair<CTxDestination, CMoney> > listSent;\n \n     wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n \n@@ -1109,7 +1109,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, CMoney)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1126,7 +1126,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, CMoney)& r, listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1311,7 +1311,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n \n-    map<string, int64_t> mapAccountBalances;\n+    map<string, CMoney> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n@@ -1320,20 +1320,20 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64_t nFee;\n+        CMoney nFee;\n         string strSentAccount;\n-        list<pair<CTxDestination, int64_t> > listReceived;\n-        list<pair<CTxDestination, int64_t> > listSent;\n+        list<pair<CTxDestination, CMoney> > listReceived;\n+        list<pair<CTxDestination, CMoney> > listSent;\n         int nDepth = wtx.GetDepthInMainChain();\n         if (wtx.GetBlocksToMaturity() > 0 || nDepth < 0)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, CMoney)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (nDepth >= nMinDepth)\n         {\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CMoney)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first].name] += r.second;\n                 else\n@@ -1347,7 +1347,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, CMoney)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1475,10 +1475,10 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64_t nCredit = wtx.GetCredit();\n-    int64_t nDebit = wtx.GetDebit();\n-    int64_t nNet = nCredit - nDebit;\n-    int64_t nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+    CMoney nCredit = wtx.GetCredit();\n+    CMoney nDebit = wtx.GetDebit();\n+    CMoney nNet = nCredit - nDebit;\n+    CMoney nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe())\n@@ -1880,7 +1880,7 @@ Value settxfee(const Array& params, bool fHelp)\n         );\n \n     // Amount\n-    int64_t nAmount = 0;\n+    CMoney nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n "
      },
      {
        "sha": "9ae4b9aecbfff701dc0d1936c4b00a538de10d5a",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -15,7 +15,7 @@ extern CWallet* pwalletMain;\n BOOST_AUTO_TEST_SUITE(accounting_tests)\n \n static void\n-GetResults(CWalletDB& walletdb, std::map<int64_t, CAccountingEntry>& results)\n+GetResults(CWalletDB& walletdb, std::map<CMoney, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n-    std::map<int64_t, CAccountingEntry> results;\n+    std::map<CMoney, CAccountingEntry> results;\n \n     LOCK(pwalletMain->cs_wallet);\n "
      },
      {
        "sha": "a23ff3cbd597eee1eb3f7ea353f8ade0820dc9a2",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -11,9 +11,9 @@ BOOST_AUTO_TEST_SUITE(main_tests)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    uint64_t nSum = 0;\n+    CMoney nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        uint64_t nSubsidy = GetBlockValue(nHeight, 0);\n+        CMoney nSubsidy = GetBlockValue(nHeight, 0);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "8ea7207b44016be1ac242ad9ceaa91fceaedb109",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    int64_t ret = 0;\n+    CMoney ret = 0;\n     BOOST_CHECK(ParseMoney(\"0.0\", ret));\n     BOOST_CHECK_EQUAL(ret, 0);\n "
      },
      {
        "sha": "9ebd817fed8ce4d91ba9aaaaaa6200cf9cfae55c",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_SUITE(wallet_tests)\n static CWallet wallet;\n static vector<COutput> vCoins;\n \n-static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(const CMoney& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n     static int nextLockTime = 0;\n     CTransaction tx;\n@@ -64,7 +64,7 @@ static bool equal_sets(CoinSet a, CoinSet b)\n BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n     CoinSet setCoinsRet, setCoinsRet2;\n-    int64_t nValueRet;\n+    CMoney nValueRet;\n \n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "45d2bba7808ea605e11637b6ce564ed423509408",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -108,7 +108,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n-    int64_t nTotalAmount = 0;\n+    CMoney nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {"
      },
      {
        "sha": "c310776877094b5ddf8f8cd59c3638274ed8fed3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -13,7 +13,7 @@ CTxMemPoolEntry::CTxMemPoolEntry()\n     nHeight = MEMPOOL_HEIGHT;\n }\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CMoney& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight):\n     tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n@@ -29,7 +29,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    int64_t nValueIn = tx.GetValueOut()+nFee;\n+    CMoney nValueIn = tx.GetValueOut()+nFee;\n     double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nTxSize;\n     double dResult = dPriority + deltaPriority;\n     return dResult;"
      },
      {
        "sha": "7299aee8ee82540a7d9d5ba42478630272baa723",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -21,21 +21,21 @@ class CTxMemPoolEntry\n {\n private:\n     CTransaction tx;\n-    int64_t nFee; // Cached to avoid expensive parent-transaction lookups\n+    CMoney nFee; // Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; // ... and avoid recomputing tx size\n     int64_t nTime; // Local time when entering the mempool\n     double dPriority; // Priority when entering the mempool\n     unsigned int nHeight; // Chain height when entering the mempool\n \n public:\n-    CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+    CTxMemPoolEntry(const CTransaction& _tx, const CMoney& _nFee,\n                     int64_t _nTime, double _dPriority, unsigned int _nHeight);\n     CTxMemPoolEntry();\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    int64_t GetFee() const { return nFee; }\n+    CMoney GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }"
      },
      {
        "sha": "89011d01abd6a0721e8ed24ce61f198bec6e72c6",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -303,7 +303,7 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-string FormatMoney(int64_t n, bool fPlus)\n+string FormatMoney(const CMoney& n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -327,12 +327,12 @@ string FormatMoney(int64_t n, bool fPlus)\n }\n \n \n-bool ParseMoney(const string& str, int64_t& nRet)\n+bool ParseMoney(const string& str, CMoney& nRet)\n {\n     return ParseMoney(str.c_str(), nRet);\n }\n \n-bool ParseMoney(const char* pszIn, int64_t& nRet)\n+bool ParseMoney(const char* pszIn, CMoney& nRet)\n {\n     string strWhole;\n     int64_t nUnits = 0;\n@@ -366,7 +366,7 @@ bool ParseMoney(const char* pszIn, int64_t& nRet)\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n     int64_t nWhole = atoi64(strWhole);\n-    int64_t nValue = nWhole*COIN + nUnits;\n+    CMoney nValue = nWhole*COIN + nUnits;\n \n     nRet = nValue;\n     return true;"
      },
      {
        "sha": "34458081a3b4d4313830aac122698419b2ad3ce6",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -11,6 +11,7 @@\n #endif\n \n #include \"compat.h\"\n+#include \"money.h\"\n #include \"serialize.h\"\n #include \"tinyformat.h\"\n \n@@ -154,9 +155,9 @@ static inline bool error(const char* format)\n \n void LogException(std::exception* pex, const char* pszThread);\n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n-std::string FormatMoney(int64_t n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64_t& nRet);\n-bool ParseMoney(const char* pszIn, int64_t& nRet);\n+std::string FormatMoney(const CMoney& n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, CMoney& nRet);\n+bool ParseMoney(const char* pszIn, CMoney& nRet);\n std::string SanitizeString(const std::string& str);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);"
      },
      {
        "sha": "01083cbc1c1a19fee1043e5c049bcf4db9b26f72",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 55,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -16,7 +16,7 @@\n using namespace std;\n \n // Settings\n-int64_t nTransactionFee = DEFAULT_TRANSACTION_FEE;\n+CMoney nTransactionFee = DEFAULT_TRANSACTION_FEE;\n bool bSpendZeroConfChange = true;\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -26,8 +26,8 @@ bool bSpendZeroConfChange = true;\n \n struct CompareValueOnly\n {\n-    bool operator()(const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t1,\n-                    const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const pair<CMoney, pair<const CWalletTx*, unsigned int> >& t1,\n+                    const pair<CMoney, pair<const CWalletTx*, unsigned int> >& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -650,7 +650,7 @@ bool CWallet::IsMine(const CTxIn &txin) const\n     return false;\n }\n \n-int64_t CWallet::GetDebit(const CTxIn &txin) const\n+CMoney CWallet::GetDebit(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -731,19 +731,19 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n-                           list<pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, string& strSentAccount) const\n+void CWalletTx::GetAmounts(list<pair<CTxDestination, CMoney> >& listReceived,\n+                           list<pair<CTxDestination, CMoney> >& listSent, CMoney& nFee, string& strSentAccount) const\n {\n     nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    int64_t nDebit = GetDebit();\n+    CMoney nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64_t nValueOut = GetValueOut();\n+        CMoney nValueOut = GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -784,26 +784,26 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n-                                  int64_t& nSent, int64_t& nFee) const\n+void CWalletTx::GetAccountAmounts(const string& strAccount, CMoney& nReceived,\n+                                  CMoney& nSent, CMoney& nFee) const\n {\n     nReceived = nSent = nFee = 0;\n \n-    int64_t allFee;\n+    CMoney allFee;\n     string strSentAccount;\n-    list<pair<CTxDestination, int64_t> > listReceived;\n-    list<pair<CTxDestination, int64_t> > listSent;\n+    list<pair<CTxDestination, CMoney> > listReceived;\n+    list<pair<CTxDestination, CMoney> > listSent;\n     GetAmounts(listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination,CMoney)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination,CMoney)& r, listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n@@ -961,9 +961,9 @@ void CWallet::ResendWalletTransactions()\n //\n \n \n-int64_t CWallet::GetBalance() const\n+CMoney CWallet::GetBalance() const\n {\n-    int64_t nTotal = 0;\n+    CMoney nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -977,9 +977,9 @@ int64_t CWallet::GetBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedBalance() const\n+CMoney CWallet::GetUnconfirmedBalance() const\n {\n-    int64_t nTotal = 0;\n+    CMoney nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -992,9 +992,9 @@ int64_t CWallet::GetUnconfirmedBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureBalance() const\n+CMoney CWallet::GetImmatureBalance() const\n {\n-    int64_t nTotal = 0;\n+    CMoney nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1041,8 +1041,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n     }\n }\n \n-static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > >vValue, int64_t nTotalLower, int64_t nTargetValue,\n-                                  vector<char>& vfBest, int64_t& nBest, int iterations = 1000)\n+static void ApproximateBestSubset(vector<pair<CMoney, pair<const CWalletTx*,unsigned int> > >vValue, const CMoney& nTotalLower, const CMoney& nTargetValue,\n+                                  vector<char>& vfBest, CMoney& nBest, int iterations = 1000)\n {\n     vector<char> vfIncluded;\n \n@@ -1054,7 +1054,7 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n-        int64_t nTotal = 0;\n+        CMoney nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n@@ -1087,18 +1087,18 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n-                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CMoney& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n+                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CMoney& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    pair<int64_t, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<int64_t>::max();\n+    pair<CMoney, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    coinLowestLarger.first = std::numeric_limits<CMoney>::max();\n     coinLowestLarger.second.first = NULL;\n-    vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > > vValue;\n-    int64_t nTotalLower = 0;\n+    vector<pair<CMoney, pair<const CWalletTx*,unsigned int> > > vValue;\n+    CMoney nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n@@ -1110,9 +1110,9 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n             continue;\n \n         int i = output.i;\n-        int64_t n = pcoin->vout[i].nValue;\n+        CMoney n = pcoin->vout[i].nValue;\n \n-        pair<int64_t,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n+        pair<CMoney,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -1153,7 +1153,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     // Solve subset sum by stochastic approximation\n     sort(vValue.rbegin(), vValue.rend(), CompareValueOnly());\n     vector<char> vfBest;\n-    int64_t nBest;\n+    CMoney nBest;\n \n     ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n@@ -1185,7 +1185,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     return true;\n }\n \n-bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CMoney& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CMoney& nValueRet, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n@@ -1209,11 +1209,11 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, CMoney> >& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CMoney& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    int64_t nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+    CMoney nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, CMoney)& s, vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1240,10 +1240,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 wtxNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n-                int64_t nTotalValue = nValue + nFeeRet;\n+                CMoney nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, CMoney)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(CTransaction::nMinRelayTxFee))\n@@ -1256,29 +1256,29 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n-                int64_t nValueIn = 0;\n+                CMoney nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    CMoney nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n                     dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n \n-                int64_t nChange = nValueIn - nValue - nFeeRet;\n+                CMoney nChange = nValueIn - nValue - nFeeRet;\n                 // The following if statement should be removed once enough miners\n                 // have upgraded to the 0.9 GetMinFee() rules. Until then, this avoids\n                 // creating free transactions that have change outputs less than\n                 // CENT bitcoins.\n                 if (nFeeRet < CTransaction::nMinTxFee && nChange > 0 && nChange < CENT)\n                 {\n-                    int64_t nMoveToFee = min(nChange, CTransaction::nMinTxFee - nFeeRet);\n+                    CMoney nMoveToFee = min(nChange, CTransaction::nMinTxFee - nFeeRet);\n                     nChange -= nMoveToFee;\n                     nFeeRet += nMoveToFee;\n                 }\n@@ -1355,9 +1355,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Check that enough fee is included\n-                int64_t nPayFee = nTransactionFee * (1 + (int64_t)nBytes / 1000);\n+                CMoney nPayFee = nTransactionFee * (1 + nBytes / 1000);\n                 bool fAllowFree = AllowFree(dPriority);\n-                int64_t nMinFee = GetMinFee(wtxNew, nBytes, fAllowFree, GMF_SEND);\n+                CMoney nMinFee = GetMinFee(wtxNew, nBytes, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);\n@@ -1373,10 +1373,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, const CMoney& nValue,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CMoney& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    vector< pair<CScript, int64_t> > vecSend;\n+    vector< pair<CScript, CMoney> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n }\n@@ -1431,10 +1431,10 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew)\n+string CWallet::SendMoney(CScript scriptPubKey, const CMoney& nValue, CWalletTx& wtxNew)\n {\n     CReserveKey reservekey(this);\n-    int64_t nFeeRequired;\n+    CMoney nFeeRequired;\n \n     if (IsLocked())\n     {\n@@ -1459,7 +1459,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNe\n \n \n \n-string CWallet::SendMoneyToDestination(const CTxDestination& address, int64_t nValue, CWalletTx& wtxNew)\n+string CWallet::SendMoneyToDestination(const CTxDestination& address, const CMoney& nValue, CWalletTx& wtxNew)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1737,9 +1737,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n+std::map<CTxDestination, CMoney> CWallet::GetAddressBalances()\n {\n-    map<CTxDestination, int64_t> balances;\n+    map<CTxDestination, CMoney> balances;\n \n     {\n         LOCK(cs_wallet);\n@@ -1765,7 +1765,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64_t n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n+                CMoney n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "cb840b3a18dbe3c779dac18ed61131c77e95a626",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -24,13 +24,13 @@\n #include <vector>\n \n // Settings\n-extern int64_t nTransactionFee;\n+extern CMoney nTransactionFee;\n extern bool bSpendZeroConfChange;\n \n // -paytxfee default\n-static const int64_t DEFAULT_TRANSACTION_FEE = 0;\n+static const CMoney DEFAULT_TRANSACTION_FEE = 0;\n // -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n-static const int nHighTransactionFeeWarning = 0.01 * COIN;\n+static const CMoney nHighTransactionFeeWarning = 0.01 * COIN;\n \n class CAccountingEntry;\n class CCoinControl;\n@@ -100,7 +100,7 @@ class CAddressBookData\n class CWallet : public CCryptoKeyStore, public CWalletInterface\n {\n private:\n-    bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CMoney& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CMoney& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -184,7 +184,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n+    bool SelectCoinsMinConf(const CMoney& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CMoney& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n@@ -250,16 +250,16 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n-    int64_t GetBalance() const;\n-    int64_t GetUnconfirmedBalance() const;\n-    int64_t GetImmatureBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    CMoney GetBalance() const;\n+    CMoney GetUnconfirmedBalance() const;\n+    CMoney GetImmatureBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CMoney> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CMoney& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(CScript scriptPubKey, const CMoney& nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CMoney& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew);\n-    std::string SendMoneyToDestination(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n+    std::string SendMoney(CScript scriptPubKey, const CMoney& nValue, CWalletTx& wtxNew);\n+    std::string SendMoneyToDestination(const CTxDestination &address, const CMoney& nValue, CWalletTx& wtxNew);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n@@ -272,24 +272,24 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, int64_t> GetAddressBalances();\n+    std::map<CTxDestination, CMoney> GetAddressBalances();\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     bool IsMine(const CTxIn& txin) const;\n-    int64_t GetDebit(const CTxIn& txin) const;\n+    CMoney GetDebit(const CTxIn& txin) const;\n     bool IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout) const\n+    CMoney GetCredit(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return (IsMine(txout) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n-    int64_t GetChange(const CTxOut& txout) const\n+    CMoney GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n@@ -306,9 +306,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx) > 0);\n     }\n-    int64_t GetDebit(const CTransaction& tx) const\n+    CMoney GetDebit(const CTransaction& tx) const\n     {\n-        int64_t nDebit = 0;\n+        CMoney nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n             nDebit += GetDebit(txin);\n@@ -317,9 +317,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64_t GetCredit(const CTransaction& tx) const\n+    CMoney GetCredit(const CTransaction& tx) const\n     {\n-        int64_t nCredit = 0;\n+        CMoney nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nCredit += GetCredit(txout);\n@@ -328,9 +328,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nCredit;\n     }\n-    int64_t GetChange(const CTransaction& tx) const\n+    CMoney GetChange(const CTransaction& tx) const\n     {\n-        int64_t nChange = 0;\n+        CMoney nChange = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nChange += GetChange(txout);\n@@ -469,11 +469,11 @@ class CWalletTx : public CMerkleTx\n     mutable bool fImmatureCreditCached;\n     mutable bool fAvailableCreditCached;\n     mutable bool fChangeCached;\n-    mutable int64_t nDebitCached;\n-    mutable int64_t nCreditCached;\n-    mutable int64_t nImmatureCreditCached;\n-    mutable int64_t nAvailableCreditCached;\n-    mutable int64_t nChangeCached;\n+    mutable CMoney nDebitCached;\n+    mutable CMoney nCreditCached;\n+    mutable CMoney nImmatureCreditCached;\n+    mutable CMoney nAvailableCreditCached;\n+    mutable CMoney nChangeCached;\n \n     CWalletTx()\n     {\n@@ -576,7 +576,7 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    int64_t GetDebit() const\n+    CMoney GetDebit() const\n     {\n         if (vin.empty())\n             return 0;\n@@ -587,7 +587,7 @@ class CWalletTx : public CMerkleTx\n         return nDebitCached;\n     }\n \n-    int64_t GetCredit(bool fUseCache=true) const\n+    CMoney GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -601,7 +601,7 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n-    int64_t GetImmatureCredit(bool fUseCache=true) const\n+    CMoney GetImmatureCredit(bool fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -615,7 +615,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableCredit(bool fUseCache=true) const\n+    CMoney GetAvailableCredit(bool fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -627,7 +627,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableCreditCached)\n             return nAvailableCreditCached;\n \n-        int64_t nCredit = 0;\n+        CMoney nCredit = 0;\n         uint256 hashTx = GetHash();\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n@@ -646,7 +646,7 @@ class CWalletTx : public CMerkleTx\n     }\n \n \n-    int64_t GetChange() const\n+    CMoney GetChange() const\n     {\n         if (fChangeCached)\n             return nChangeCached;\n@@ -655,11 +655,11 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(std::list<std::pair<CTxDestination, int64_t> >& listReceived,\n-                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount) const;\n+    void GetAmounts(std::list<std::pair<CTxDestination, CMoney> >& listReceived,\n+                    std::list<std::pair<CTxDestination, CMoney> >& listSent, CMoney& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n-                           int64_t& nSent, int64_t& nFee) const;\n+    void GetAccountAmounts(const std::string& strAccount, CMoney& nReceived,\n+                           CMoney& nSent, CMoney& nFee) const;\n \n     bool IsFromMe() const\n     {\n@@ -800,7 +800,7 @@ class CAccountingEntry\n {\n public:\n     std::string strAccount;\n-    int64_t nCreditDebit;\n+    CMoney nCreditDebit;\n     int64_t nTime;\n     std::string strOtherAccount;\n     std::string strComment;"
      },
      {
        "sha": "9ef6467c4503015226b9d85cc8d56cdab9e0ffad",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -178,12 +178,12 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+CMoney CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n     list<CAccountingEntry> entries;\n     ListAccountCreditDebit(strAccount, entries);\n \n-    int64_t nCreditDebit = 0;\n+    CMoney nCreditDebit = 0;\n     BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n "
      },
      {
        "sha": "a430d39ba1eef03a2c8a88223312808ceefdd76f",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6943646c625588e0bfd0ae7a8635ace2dcbfc10/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"db.h\"\n #include \"key.h\"\n+#include \"money.h\"\n \n #include <list>\n #include <stdint.h>\n@@ -117,7 +118,7 @@ class CWalletDB : public CDB\n     bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n public:\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64_t GetAccountCreditDebit(const std::string& strAccount);\n+    CMoney GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet*);"
      }
    ]
  },
  {
    "sha": "fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzFjZDczZDBmZjczZTI2ZGEyNTQ4MTkzYzYzMGIzYjhhNGQ2MzBi",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2014-04-22T22:46:45Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2014-05-23T00:49:15Z"
      },
      "message": "Encapsulate coin balances within a new CMoney type\n\nProvides increased type safety of monetary calculations in bitcoin. Also brings code parity between bitcoin and side chains which use a different type for representing and performing arithmetic on coin balances, e.g. Freicoin's use of the GMP library's arbitrary-precision rational number type. This greatly reduces the friction in sharing code and submitting code upsream.",
      "tree": {
        "sha": "2cdab9c3418ff83e73ad4ee7e54678030926cf84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cdab9c3418ff83e73ad4ee7e54678030926cf84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6943646c625588e0bfd0ae7a8635ace2dcbfc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6943646c625588e0bfd0ae7a8635ace2dcbfc10"
      }
    ],
    "stats": {
      "total": 691,
      "additions": 488,
      "deletions": 203
    },
    "files": [
      {
        "sha": "1909ee79e73086b61075aec05ae5af4c5c979249",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -128,6 +128,7 @@ libbitcoin_common_a_SOURCES = \\\n   core.cpp \\\n   hash.cpp \\\n   key.cpp \\\n+  money.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n   rpcprotocol.cpp \\"
      },
      {
        "sha": "a046309ee1f3557e906b1b6790ce2d1c457ef714",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -189,7 +189,7 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n         const CCoins &coins = GetCoins(txin.prevout.hash);\n         if (!coins.IsAvailable(txin.prevout.n)) continue;\n         if (coins.nHeight < nHeight) {\n-            dResult += coins.vout[txin.prevout.n].nValue * (nHeight-coins.nHeight);\n+            dResult += coins.vout[txin.prevout.n].nValue.ToDouble() * (nHeight-coins.nHeight);\n         }\n     }\n     return tx.ComputePriority(dResult);"
      },
      {
        "sha": "cdc0faa9085ae19c5c232bfdfabc901044572fb2",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 55,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -64,7 +64,7 @@ uint256 CTxOut::GetHash() const\n \n std::string CTxOut::ToString() const\n {\n-    return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n+    return strprintf(\"CTxOut(nValue=%s, scriptPubKey=%s)\", FormatMoney(nValue), scriptPubKey.ToString().substr(0,30));\n }\n \n void CTxOut::print() const\n@@ -158,60 +158,6 @@ void CTransaction::print() const\n     LogPrintf(\"%s\", ToString());\n }\n \n-// Amount compression:\n-// * If the amount is 0, output 0\n-// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)\n-// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)\n-//   * call the result n\n-//   * output 1 + 10*(9*n + d - 1) + e\n-// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n-// (this is decodable, as d is in [1-9] and e is in [0-9])\n-\n-uint64_t CTxOutCompressor::CompressAmount(uint64_t n)\n-{\n-    if (n == 0)\n-        return 0;\n-    int e = 0;\n-    while (((n % 10) == 0) && e < 9) {\n-        n /= 10;\n-        e++;\n-    }\n-    if (e < 9) {\n-        int d = (n % 10);\n-        assert(d >= 1 && d <= 9);\n-        n /= 10;\n-        return 1 + (n*9 + d - 1)*10 + e;\n-    } else {\n-        return 1 + (n - 1)*10 + 9;\n-    }\n-}\n-\n-uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)\n-{\n-    // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n-    if (x == 0)\n-        return 0;\n-    x--;\n-    // x = 10*(9*n + d - 1) + e\n-    int e = x % 10;\n-    x /= 10;\n-    uint64_t n = 0;\n-    if (e < 9) {\n-        // x = 9*n + d - 1\n-        int d = (x % 9) + 1;\n-        x /= 9;\n-        // x = n\n-        n = x*10 + d;\n-    } else {\n-        n = x+1;\n-    }\n-    while (e) {\n-        n *= 10;\n-        e--;\n-    }\n-    return n;\n-}\n-\n uint256 CBlockHeader::GetHash() const\n {\n     return Hash(BEGIN(nVersion), END(nNonce));"
      },
      {
        "sha": "d341b2ece945cceaec5745b5e3e72b13d28ed619",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -131,7 +131,13 @@ class CTxOut\n \n     IMPLEMENT_SERIALIZE\n     (\n-        READWRITE(nValue);\n+        CTxOut& me = *const_cast<CTxOut*>(this);\n+        int64_t nValueI64;\n+        if (fWrite)\n+            nValueI64 = nValue.ToInt64(ROUND_SIGNAL);\n+        READWRITE(nValueI64);\n+        if (fRead)\n+            me.nValue = nValueI64;\n         READWRITE(scriptPubKey);\n     )\n \n@@ -158,7 +164,7 @@ class CTxOut\n         // need a CTxIn of at least 148 bytes to spend,\n         // so dust is a txout less than 546 satoshis \n         // with default nMinRelayTxFee.\n-        return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < nMinRelayTxFee);\n+        return nValue.ToDouble() * (1000.0/3.0) / (GetSerializeSize(SER_DISK,0)+148) < nMinRelayTxFee.ToDouble();\n     }\n \n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n@@ -259,20 +265,11 @@ class CTxOutCompressor\n     CTxOut &txout;\n \n public:\n-    static uint64_t CompressAmount(uint64_t nAmount);\n-    static uint64_t DecompressAmount(uint64_t nAmount);\n-\n     CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n \n     IMPLEMENT_SERIALIZE(({\n-        if (!fRead) {\n-            uint64_t nVal = CompressAmount(txout.nValue);\n-            READWRITE(VARINT(nVal));\n-        } else {\n-            uint64_t nVal = 0;\n-            READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n-        }\n+        CCompressedMoney cvalue(REF(txout.nValue));\n+        READWRITE(cvalue);\n         CScriptCompressor cscript(REF(txout.scriptPubKey));\n         READWRITE(cscript);\n     });)"
      },
      {
        "sha": "4ce7ec8add3b7e4418ee7e8b66a527a51648db89",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -912,9 +912,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CMoney txMinFee = GetMinFee(tx, nSize, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %s < %s\",\n+                                      hash.ToString(),\n+                                      FormatMoney(nFees),\n+                                      FormatMoney(txMinFee),\n+                             REJECT_INSUFFICIENTFEE, \"insufficient fee\"));\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n@@ -941,9 +943,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         if (fRejectInsaneFee && nFees > CTransaction::nMinRelayTxFee * 10000)\n-            return error(\"AcceptToMemoryPool: : insane fees %s, %d > %d\",\n+            return error(\"AcceptToMemoryPool: : insane fees %s, %s > %s\",\n                          hash.ToString(),\n-                         nFees, CTransaction::nMinRelayTxFee * 10000);\n+                         FormatMoney(nFees),\n+                         FormatMoney(CTransaction::nMinRelayTxFee * 10000));\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n@@ -1843,11 +1846,14 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     if (fBenchmark)\n         LogPrintf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n-    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    CMoney nActualCoinbaseValue = block.vtx[0].GetValueOut();\n+    CMoney nAllowedCoinbaseValue = GetBlockValue(pindex->nHeight, nFees);\n+    if ( nActualCoinbaseValue > nAllowedCoinbaseValue )\n         return state.DoS(100,\n-                         error(\"ConnectBlock() : coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n-                               REJECT_INVALID, \"bad-cb-amount\");\n+                         error(\"ConnectBlock() : coinbase pays too much (actual=%s vs limit=%s)\",\n+                               FormatMoney(nActualCoinbaseValue),\n+                               FormatMoney(nAllowedCoinbaseValue)),\n+                         REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())\n         return state.DoS(100, false);"
      },
      {
        "sha": "a2bbdd0f841268926e1ce535cb31e47a15c8d737",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -202,7 +202,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n                 int nConf = pindexPrev->nHeight - coins.nHeight + 1;\n \n-                dPriority += (double)nValueIn * nConf;\n+                dPriority += nValueIn.ToDouble() * nConf;\n             }\n             if (fMissingInputs) continue;\n \n@@ -213,7 +213,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n             // incentive to create smaller transactions.\n-            double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n+            double dFeePerKb = (nTotalIn-tx.GetValueOut()).ToDouble() / (double(nTxSize)/1000.0);\n \n             if (porphan)\n             {"
      },
      {
        "sha": "cc68ea20c9be93355fcba36854f1e8c9585648f1",
        "filename": "src/money.cpp",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/money.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/money.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/money.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"money.h\"\n+\n+// Amount compression:\n+// * If the amount is 0, output 0\n+// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)\n+// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)\n+//   * call the result n\n+//   * output 1 + 10*(9*n + d - 1) + e\n+// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n+// (this is decodable, as d is in [1-9] and e is in [0-9])\n+\n+uint64_t CCompressedMoney::CompressAmount(uint64_t n)\n+{\n+    if (n == 0)\n+        return 0;\n+    int e = 0;\n+    while (((n % 10) == 0) && e < 9) {\n+        n /= 10;\n+        e++;\n+    }\n+    if (e < 9) {\n+        int d = (n % 10);\n+        assert(d >= 1 && d <= 9);\n+        n /= 10;\n+        return 1 + (n*9 + d - 1)*10 + e;\n+    } else {\n+        return 1 + (n - 1)*10 + 9;\n+    }\n+}\n+\n+uint64_t CCompressedMoney::DecompressAmount(uint64_t x)\n+{\n+    // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n+    if (x == 0)\n+        return 0;\n+    x--;\n+    // x = 10*(9*n + d - 1) + e\n+    int e = x % 10;\n+    x /= 10;\n+    uint64_t n = 0;\n+    if (e < 9) {\n+        // x = 9*n + d - 1\n+        int d = (x % 9) + 1;\n+        x /= 9;\n+        // x = n\n+        n = x*10 + d;\n+    } else {\n+        n = x+1;\n+    }\n+    while (e) {\n+        n *= 10;\n+        e--;\n+    }\n+    return n;\n+}"
      },
      {
        "sha": "1d5bd21663b814076520c2b042f43fc562aba2f7",
        "filename": "src/money.h",
        "status": "modified",
        "additions": 217,
        "deletions": 1,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/money.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/money.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/money.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -6,8 +6,224 @@\n #ifndef BITCOIN_MONEY_H\n #define BITCOIN_MONEY_H\n \n+#include \"serialize.h\"\n+\n+#include <algorithm> // for swap\n #include <stdint.h>\n+#include <stdexcept>\n+#include <string>\n+\n+enum RoundingMode\n+{\n+    ROUND_TIES_TO_EVEN,\n+    ROUND_TOWARDS_ZERO,\n+    ROUND_AWAY_FROM_ZERO,\n+    ROUND_TOWARD_POSITIVE,\n+    ROUND_TOWARD_NEGATIVE,\n+    ROUND_SIGNAL,\n+};\n+\n+class money_error : public std::runtime_error\n+{\n+public:\n+    explicit money_error(const std::string& str)\n+        : std::runtime_error(str) {}\n+};\n+\n+class invalid_money_format : public money_error\n+{\n+public:\n+    explicit invalid_money_format(const std::string& str)\n+        : money_error(str) {}\n+};\n+\n+class money_overflow : public money_error\n+                     , public std::overflow_error\n+{\n+public:\n+    explicit money_overflow(const std::string& str)\n+        : money_error(str)\n+        , std::overflow_error(str) {}\n+};\n+\n+class money_underflow : public money_error\n+                      , public std::underflow_error\n+{\n+public:\n+    explicit money_underflow(const std::string& str)\n+        : money_error(str)\n+        , std::underflow_error(str) {}\n+};\n+\n+class CMoney\n+{\n+protected:\n+    int64_t n;\n+\n+public:\n+    CMoney() : n(0) {}\n+    CMoney(int64_t nIn) : n(nIn) {}\n+    CMoney(const CMoney& other) : n(other.n) {}\n+\n+    CMoney& operator=(const CMoney& other)\n+    {\n+        n = other.n;\n+        return *this;\n+    }\n+\n+    CMoney& swap(CMoney& other)\n+    {\n+        std::swap(n, other.n);\n+        return *this;\n+    }\n+\n+    // In units of 1 satoshi\n+    double ToDouble(RoundingMode mode=ROUND_TIES_TO_EVEN) const\n+    {\n+        return static_cast<double>(n);\n+    }\n+\n+    // In units of 1 satoshi\n+    int64_t ToInt64(RoundingMode mode=ROUND_TIES_TO_EVEN) const\n+    {\n+        return n;\n+    }\n+\n+    CMoney& operator+=(const CMoney& other)\n+    {\n+        n += other.n;\n+        return *this;\n+    }\n+\n+    CMoney& operator-=(const CMoney& other)\n+    {\n+        n -= other.n;\n+        return *this;\n+    }\n+\n+    CMoney& operator*=(int64_t other)\n+    {\n+        n *= other;\n+        return *this;\n+    }\n+\n+    friend std::ostream& operator<<(std::ostream &o, const CMoney& n);\n+\n+    friend bool operator! (const CMoney& a);\n+    friend bool operator< (const CMoney& a, const CMoney& b);\n+    friend bool operator<=(const CMoney& a, const CMoney& b);\n+    friend bool operator==(const CMoney& a, const CMoney& b);\n+    friend bool operator!=(const CMoney& a, const CMoney& b);\n+    friend bool operator>=(const CMoney& a, const CMoney& b);\n+    friend bool operator> (const CMoney& a, const CMoney& b);\n+\n+    friend const CMoney operator-(const CMoney& a);\n+    friend const CMoney operator+(const CMoney& a, const CMoney& b);\n+    friend const CMoney operator-(const CMoney& a, const CMoney& b);\n+    friend const CMoney operator*(int64_t a, const CMoney& b);\n+    friend const CMoney operator*(const CMoney& a, int64_t b);\n+    friend const CMoney abs(const CMoney& a);\n+};\n+\n+namespace std {\n+template<> inline CMoney numeric_limits<CMoney>::min()\n+    { return CMoney(std::numeric_limits<int64_t>::min()); }\n+template<> inline CMoney numeric_limits<CMoney>::max()\n+    { return CMoney(std::numeric_limits<int64_t>::max()); }\n+}\n+\n+// Required by use of Boost unit testing libraries\n+std::string FormatMoney(const CMoney& a, bool fPlus);\n+inline std::ostream& operator<<(std::ostream &o, const CMoney& n)\n+{\n+    o << FormatMoney(n, false);\n+    return o;\n+}\n+\n+inline bool operator!(const CMoney& a)\n+{\n+    return a.n == 0;\n+}\n+\n+inline bool operator<(const CMoney& a, const CMoney& b)\n+{\n+    return a.n < b.n;\n+}\n+\n+inline bool operator<=(const CMoney& a, const CMoney& b)\n+{\n+    return a.n <= b.n;\n+}\n+\n+inline bool operator==(const CMoney& a, const CMoney& b)\n+{\n+    return a.n == b.n;\n+}\n+\n+inline bool operator!=(const CMoney& a, const CMoney& b)\n+{\n+    return a.n != b.n;\n+}\n+\n+inline bool operator>=(const CMoney& a, const CMoney& b)\n+{\n+    return a.n >= b.n;\n+}\n+\n+inline bool operator>(const CMoney& a, const CMoney& b)\n+{\n+    return a.n > b.n;\n+}\n+\n+inline const CMoney operator-(const CMoney& a)\n+{\n+    return CMoney(-a.n);\n+}\n+\n+inline const CMoney operator+(const CMoney& a, const CMoney& b)\n+{\n+    return CMoney(a.n + b.n);\n+}\n+\n+inline const CMoney operator-(const CMoney& a, const CMoney& b)\n+{\n+    return CMoney(a.n - b.n);\n+}\n+\n+inline const CMoney operator*(int64_t a, const CMoney& b)\n+{\n+    return CMoney(a * b.n);\n+}\n+\n+inline const CMoney operator*(const CMoney& a, int64_t b)\n+{\n+    return CMoney(a.n * b);\n+}\n+\n+inline const CMoney abs(const CMoney& a)\n+{\n+    return CMoney(std::abs(a.n));\n+}\n+\n+class CCompressedMoney\n+{\n+protected:\n+    CMoney& n;\n+\n+public:\n+    static uint64_t CompressAmount(uint64_t nAmount);\n+    static uint64_t DecompressAmount(uint64_t nAmount);\n+\n+    CCompressedMoney(CMoney& nIn) : n(nIn) {}\n \n-typedef int64_t CMoney;\n+    IMPLEMENT_SERIALIZE(\n+        uint64_t nVal = 0;\n+        if (fWrite)\n+            nVal = CompressAmount(static_cast<uint64_t>(n.ToInt64(ROUND_SIGNAL)));\n+        READWRITE(VARINT(nVal));\n+        if (fRead)\n+            n = static_cast<int64_t>(DecompressAmount(nVal));\n+    )\n+};\n \n #endif"
      },
      {
        "sha": "bbac55777791f627d224ced262dd117b02dc31c7",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -159,7 +159,7 @@ void BitcoinAmountField::unitChanged(int idx)\n     // Set max length after retrieving the value, to prevent truncation\n     amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n     amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n-    amount->setSingleStep((double)nSingleStep / (double)BitcoinUnits::factor(currentUnit));\n+    amount->setSingleStep(nSingleStep.ToDouble() / (double)BitcoinUnits::factor(currentUnit));\n \n     if (valid)\n     {"
      },
      {
        "sha": "b4616077bbb61165a0059d4abdc8252b8b60c2c6",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 48,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -6,6 +6,8 @@\n \n #include <QStringList>\n \n+#include \"util.h\"\n+\n BitcoinUnits::BitcoinUnits(QObject *parent):\n         QAbstractListModel(parent),\n         unitlist(availableUnits())\n@@ -106,25 +108,12 @@ QString BitcoinUnits::format(int unit, const CMoney& n, bool fPlus)\n     // localized number formatting.\n     if(!valid(unit))\n         return QString(); // Refuse to format invalid unit\n-    qint64 coin = factor(unit);\n-    int num_decimals = decimals(unit);\n-    qint64 n_abs = (n > 0 ? n : -n);\n-    qint64 quotient = n_abs / coin;\n-    qint64 remainder = n_abs % coin;\n-    QString quotient_str = QString::number(quotient);\n-    QString remainder_str = QString::number(remainder).rightJustified(num_decimals, '0');\n-\n-    // Right-trim excess zeros after the decimal point\n-    int nTrim = 0;\n-    for (int i = remainder_str.size()-1; i>=2 && (remainder_str.at(i) == '0'); --i)\n-        ++nTrim;\n-    remainder_str.chop(nTrim);\n-\n-    if (n < 0)\n-        quotient_str.insert(0, '-');\n-    else if (fPlus && n > 0)\n-        quotient_str.insert(0, '+');\n-    return quotient_str + QString(\".\") + remainder_str;\n+    CMoney q = n * (COIN / factor(unit));\n+    std::string str = FormatMoney(q, fPlus);\n+    int diff = 8 - decimals(unit);\n+    if(diff > 0)\n+        str.erase(str.length() - diff, diff);\n+    return QString::fromStdString(str);\n }\n \n QString BitcoinUnits::formatWithUnit(int unit, const CMoney& amount, bool plussign)\n@@ -134,37 +123,11 @@ QString BitcoinUnits::formatWithUnit(int unit, const CMoney& amount, bool plussi\n \n bool BitcoinUnits::parse(int unit, const QString &value, CMoney *val_out)\n {\n-    if(!valid(unit) || value.isEmpty())\n-        return false; // Refuse to parse invalid unit or empty string\n-    int num_decimals = decimals(unit);\n-    QStringList parts = value.split(\".\");\n-\n-    if(parts.size() > 2)\n-    {\n-        return false; // More than one dot\n-    }\n-    QString whole = parts[0];\n-    QString decimals;\n-\n-    if(parts.size() > 1)\n-    {\n-        decimals = parts[1];\n-    }\n-    if(decimals.size() > num_decimals)\n-    {\n-        return false; // Exceeds max precision\n-    }\n-    bool ok = false;\n-    QString str = whole + decimals.leftJustified(num_decimals, '0');\n-\n-    if(str.size() > 18)\n-    {\n-        return false; // Longer numbers will exceed 63 bits\n-    }\n-    qint64 retvalue = str.toLongLong(&ok);\n+    CMoney ret_value = 0;\n+    bool ok = ParseMoney(value.toStdString(), ret_value);\n     if(val_out)\n     {\n-        *val_out = retvalue;\n+        *val_out = ret_value * (factor(unit) / COIN);\n     }\n     return ok;\n }"
      },
      {
        "sha": "80bb8c60ff2d0da51feede744c2e19fbda15ea02",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -494,7 +494,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nAmount += out.tx->vout[out.i].nValue;\n \n         // Priority\n-        dPriorityInputs += (double)out.tx->vout[out.i].nValue * (out.nDepth+1);\n+        dPriorityInputs += out.tx->vout[out.i].nValue.ToDouble() * (out.nDepth+1);\n \n         // Bytes\n         CTxDestination address;\n@@ -731,7 +731,7 @@ void CoinControlDialog::updateView()\n \n             // amount\n             itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.tx->vout[out.i].nValue));\n-            itemOutput->setText(COLUMN_AMOUNT_INT64, strPad(QString::number(out.tx->vout[out.i].nValue), 15, \" \")); // padding so that sorting works correctly\n+            itemOutput->setText(COLUMN_AMOUNT_INT64, strPad(QString::number(EncodeDouble(out.tx->vout[out.i].nValue.ToDouble())), 20, \" \")); // padding so that sorting works correctly\n \n             // date\n             itemOutput->setText(COLUMN_DATE, GUIUtil::dateTimeStr(out.tx->GetTxTime()));\n@@ -741,10 +741,10 @@ void CoinControlDialog::updateView()\n             itemOutput->setText(COLUMN_CONFIRMATIONS, strPad(QString::number(out.nDepth), 8, \" \"));\n \n             // priority\n-            double dPriority = ((double)out.tx->vout[out.i].nValue  / (nInputSize + 78)) * (out.nDepth+1); // 78 = 2 * 34 + 10\n+            double dPriority = (out.tx->vout[out.i].nValue.ToDouble() / (nInputSize + 78)) * (out.nDepth+1); // 78 = 2 * 34 + 10\n             itemOutput->setText(COLUMN_PRIORITY, CoinControlDialog::getPriorityLabel(dPriority));\n             itemOutput->setText(COLUMN_PRIORITY_INT64, strPad(QString::number((int64_t)dPriority), 20, \" \"));\n-            dPrioritySum += (double)out.tx->vout[out.i].nValue  * (out.nDepth+1);\n+            dPrioritySum += out.tx->vout[out.i].nValue.ToDouble() * (out.nDepth+1);\n             nInputSum    += nInputSize;\n \n             // transaction hash\n@@ -774,7 +774,7 @@ void CoinControlDialog::updateView()\n             dPrioritySum = dPrioritySum / (nInputSum + 78);\n             itemWalletAddress->setText(COLUMN_CHECKBOX, \"(\" + QString::number(nChildren) + \")\");\n             itemWalletAddress->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, nSum));\n-            itemWalletAddress->setText(COLUMN_AMOUNT_INT64, strPad(QString::number(nSum), 15, \" \"));\n+            itemWalletAddress->setText(COLUMN_AMOUNT_INT64, strPad(QString::number(EncodeDouble(nSum.ToDouble())), 20, \" \"));\n             itemWalletAddress->setText(COLUMN_PRIORITY, CoinControlDialog::getPriorityLabel(dPrioritySum));\n             itemWalletAddress->setText(COLUMN_PRIORITY_INT64, strPad(QString::number((int64_t)dPrioritySum), 20, \" \"));\n         }"
      },
      {
        "sha": "3608b3ff2043b5ab2391c0cd8aa0f50fea3d202c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -177,7 +177,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n     QString ret = QString(\"bitcoin:%1\").arg(info.address);\n     int paramCount = 0;\n \n-    if (info.amount)\n+    if (info.amount != 0)\n     {\n         ret += QString(\"?amount=%1\").arg(BitcoinUnits::format(BitcoinUnits::BTC, info.amount));\n         paramCount++;"
      },
      {
        "sha": "f1bcc48e71cdb94d44f545eee7224e0873e0fa9b",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -93,8 +93,14 @@ void OptionsModel::Init()\n     // Wallet\n #ifdef ENABLE_WALLET\n     if (!settings.contains(\"nTransactionFee\"))\n-        settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_TRANSACTION_FEE);\n-    nTransactionFee = settings.value(\"nTransactionFee\").toLongLong(); // if -paytxfee is set, this will be overridden later in init.cpp\n+        settings.setValue(\"nTransactionFee\", QString::fromStdString(FormatMoney(DEFAULT_TRANSACTION_FEE)));\n+    ParseMoney(settings.value(\"nTransactionFee\").toString().toStdString(), nTransactionFee); // if -paytxfee is set, this will be overridden later in init.cpp\n+    if (nTransactionFee > COIN)\n+    {\n+        // convert qint64 -> CMoney serialized as QString\n+        nTransactionFee = nTransactionFee.ToInt64() / COIN;\n+        settings.setValue(\"nTransactionFee\", QString::fromStdString(FormatMoney(nTransactionFee)));\n+    }\n     if (mapArgs.count(\"-paytxfee\"))\n         addOverriddenOption(\"-paytxfee\");\n \n@@ -191,15 +197,17 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return settings.value(\"nSocksVersion\", 5);\n \n #ifdef ENABLE_WALLET\n-        case Fee:\n+        case Fee: {\n             // Attention: Init() is called before nTransactionFee is set in AppInit2()!\n             // To ensure we can change the fee on-the-fly update our QSetting when\n             // opening OptionsDialog, which queries Fee via the mapper.\n-            if (nTransactionFee != settings.value(\"nTransactionFee\").toLongLong())\n-                settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n+            QString strTransactionFee = QString::fromStdString(FormatMoney(nTransactionFee));\n+            if (strTransactionFee != settings.value(\"nTransactionFee\").toString())\n+                settings.setValue(\"nTransactionFee\", strTransactionFee);\n             // Todo: Consider to revert back to use just nTransactionFee here, if we don't want\n             // -paytxfee to update our QSettings!\n-            return settings.value(\"nTransactionFee\");\n+            return QVariant(strTransactionFee);\n+        }\n         case SpendZeroConfChange:\n             return settings.value(\"bSpendZeroConfChange\");\n #endif\n@@ -290,8 +298,8 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n #ifdef ENABLE_WALLET\n         case Fee: // core option - can be changed on-the-fly\n             // Todo: Add is valid check  and warn via message, if not\n-            nTransactionFee = value.toLongLong();\n-            settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n+            ParseMoney(value.toString().toStdString(), nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", QString::fromStdString(FormatMoney(nTransactionFee)));\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n         case SpendZeroConfChange:"
      },
      {
        "sha": "96792b08e394652f3f825040e341a46bb488ee41",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -35,7 +35,7 @@ class OptionsModel : public QAbstractListModel\n         ProxyIP,                // QString\n         ProxyPort,              // int\n         ProxySocksVersion,      // int\n-        Fee,                    // qint64\n+        Fee,                    // CMoney serialized as QString\n         DisplayUnit,            // BitcoinUnits::Unit\n         DisplayAddresses,       // bool\n         ThirdPartyTxUrls,       // QString"
      },
      {
        "sha": "743da206e484762447efaa101c27f260983e8a3e",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -46,7 +46,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n \n         QDateTime date = index.data(TransactionTableModel::DateRole).toDateTime();\n         QString address = index.data(Qt::DisplayRole).toString();\n-        qint64 amount = index.data(TransactionTableModel::AmountRole).toLongLong();\n+        CMoney amount = 0; ParseMoney(index.data(TransactionTableModel::AmountRole).toString().toStdString(), amount);\n         bool confirmed = index.data(TransactionTableModel::ConfirmedRole).toBool();\n         QVariant value = index.data(Qt::ForegroundRole);\n         QColor foreground = option.palette.color(QPalette::Text);"
      },
      {
        "sha": "0947c27c0ca8fbb8f17233705e6419f2e3923b3c",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -143,7 +143,7 @@ void ReceiveRequestDialog::update()\n     html += \"<b>\"+tr(\"URI\")+\"</b>: \";\n     html += \"<a href=\\\"\"+uri+\"\\\">\" + GUIUtil::HtmlEscape(uri) + \"</a><br>\";\n     html += \"<b>\"+tr(\"Address\")+\"</b>: \" + GUIUtil::HtmlEscape(info.address) + \"<br>\";\n-    if(info.amount)\n+    if(info.amount != 0)\n         html += \"<b>\"+tr(\"Amount\")+\"</b>: \" + BitcoinUnits::formatWithUnit(model->getDisplayUnit(), info.amount) + \"<br>\";\n     if(!info.label.isEmpty())\n         html += \"<b>\"+tr(\"Label\")+\"</b>: \" + GUIUtil::HtmlEscape(info.label) + \"<br>\";"
      },
      {
        "sha": "82259acf6b0d09ac3682a35be5532b7768693381",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -7,6 +7,8 @@\n #include \"transactiontablemodel.h\"\n #include \"transactionrecord.h\"\n \n+#include \"util.h\"\n+\n #include <cstdlib>\n \n #include <QDateTime>\n@@ -36,7 +38,9 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     QDateTime datetime = index.data(TransactionTableModel::DateRole).toDateTime();\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n-    qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n+    CMoney amount;\n+    if (!ParseMoney(index.data(TransactionTableModel::AmountRole).toString().toStdString(), amount))\n+        return false;\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n     if(!showInactive && status == TransactionStatus::Conflicted)\n@@ -47,7 +51,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n         return false;\n     if (!address.contains(addrPrefix, Qt::CaseInsensitive) && !label.contains(addrPrefix, Qt::CaseInsensitive))\n         return false;\n-    if(amount < minAmount)\n+    if(abs(amount) < minAmount)\n         return false;\n \n     return true;"
      },
      {
        "sha": "f3a463a12130af27e2c34558a3b6af9fb6f96560",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -528,7 +528,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         case ToAddress:\n             return formatTxToAddress(rec, true);\n         case Amount:\n-            return rec->credit + rec->debit;\n+            return QString::fromStdString(FormatMoney(rec->credit + rec->debit));\n         }\n         break;\n     case Qt::ToolTipRole:\n@@ -561,7 +561,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case LabelRole:\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n-        return rec->credit + rec->debit;\n+        return QString::fromStdString(FormatMoney(rec->credit + rec->debit));\n     case TxIDRole:\n         return rec->getTxID();\n     case TxHashRole:"
      },
      {
        "sha": "640129aefbd40210d77648dd700ddb54efd08754",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -75,7 +75,12 @@ class SendCoinsRecipient\n         nVersion = pthis->nVersion;\n         READWRITE(sAddress);\n         READWRITE(sLabel);\n-        READWRITE(amount);\n+        int64_t amountI64;\n+        if (fWrite)\n+            amountI64 = amount.ToInt64(ROUND_SIGNAL);\n+        READWRITE(amountI64);\n+        if (fRead)\n+            pthis->amount = amountI64;\n         READWRITE(sMessage);\n         READWRITE(sPaymentRequest);\n         READWRITE(sAuthenticatedMerchant);"
      },
      {
        "sha": "bab34dcce1af0872032170753c67ef7cd357bf21",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -143,7 +143,7 @@ void WalletView::processNewTransaction(const QModelIndex& parent, int start, int\n     TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n \n     QString date = ttm->index(start, TransactionTableModel::Date, parent).data().toString();\n-    qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent).data(Qt::EditRole).toULongLong();\n+    CMoney amount = 0; ParseMoney(ttm->index(start, TransactionTableModel::Amount, parent).data(Qt::EditRole).toString().toStdString(), amount);\n     QString type = ttm->index(start, TransactionTableModel::Type, parent).data().toString();\n     QString address = ttm->index(start, TransactionTableModel::ToAddress, parent).data().toString();\n "
      },
      {
        "sha": "c73b6e1c211a5e32a3e025238da40bd4974544ca",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -550,7 +550,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         entry.push_back(Pair(\"depends\", deps));\n \n         int index_in_template = i - 1;\n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.push_back(Pair(\"fee\", ValueFromAmount(pblocktemplate->vTxFees[index_in_template])));\n         entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOps[index_in_template]));\n \n         transactions.push_back(entry);\n@@ -574,7 +574,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));\n-    result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+    result.push_back(Pair(\"coinbasevalue\", pblock->vtx[0].vout[0].nValue.ToInt64(ROUND_TOWARDS_ZERO)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));"
      },
      {
        "sha": "a9b4ac8720b38c1d0f5d5bfd36d2d9c44847c488",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -65,7 +65,7 @@ Value getinfo(const Array& params, bool fHelp)\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance(), ROUND_TOWARDS_ZERO)));\n     }\n #endif\n     obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n@@ -81,9 +81,9 @@ Value getinfo(const Array& params, bool fHelp)\n     }\n     if (pwalletMain && pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee, ROUND_AWAY_FROM_ZERO)));\n #endif\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(CTransaction::nMinRelayTxFee)));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(CTransaction::nMinRelayTxFee, ROUND_AWAY_FROM_ZERO)));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "234b9f8d65330b14469b70d61966df095948256e",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -83,18 +83,16 @@ void RPCTypeCheck(const Object& o,\n \n CMoney AmountFromValue(const Value& value)\n {\n-    double dAmount = value.get_real();\n-    if (dAmount <= 0.0 || dAmount > 21000000.0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    CMoney nAmount = roundint64(dAmount * COIN);\n-    if (!MoneyRange(nAmount))\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+    CMoney nAmount;\n+    if (!ParseMoney(write_string(value, false), nAmount) || !nAmount)\n+        throw JSONRPCError(RPC_TYPE_ERROR,\n+                           strprintf(\"Invalid amount: %s\", write_string(value, false)));\n     return nAmount;\n }\n \n-Value ValueFromAmount(const CMoney& amount)\n+Value ValueFromAmount(const CMoney& amount, RoundingMode mode)\n {\n-    return (double)amount / (double)COIN;\n+    return amount.ToDouble(mode) / static_cast<double>(COIN);\n }\n \n std::string HexBits(unsigned int nBits)"
      },
      {
        "sha": "b0170c90cc754b3222b4de664165030a1c007791",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -105,7 +105,7 @@ extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n extern CMoney AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(const CMoney& amount);\n+extern json_spirit::Value ValueFromAmount(const CMoney& amount, RoundingMode mode=ROUND_TIES_TO_EVEN);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n extern std::string HelpRequiringPassphrase();"
      },
      {
        "sha": "df276df4b901fae8229576cf5c7393d25b5fb189",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -548,7 +548,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n         }\n     }\n \n-    return (double)nAmount / (double)COIN;\n+    return ValueFromAmount(nAmount);\n }\n \n \n@@ -612,7 +612,7 @@ Value getbalance(const Array& params, bool fHelp)\n         );\n \n     if (params.size() == 0)\n-        return  ValueFromAmount(pwalletMain->GetBalance());\n+        return  ValueFromAmount(pwalletMain->GetBalance(), ROUND_TOWARDS_ZERO);\n \n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -643,14 +643,14 @@ Value getbalance(const Array& params, bool fHelp)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n         }\n-        return  ValueFromAmount(nBalance);\n+        return  ValueFromAmount(nBalance, ROUND_TOWARDS_ZERO);\n     }\n \n     string strAccount = AccountFromValue(params[0]);\n \n     CMoney nBalance = GetAccountBalance(strAccount, nMinDepth);\n \n-    return ValueFromAmount(nBalance);\n+    return ValueFromAmount(nBalance, ROUND_TOWARDS_ZERO);\n }\n \n Value getunconfirmedbalance(const Array &params, bool fHelp)\n@@ -1879,10 +1879,10 @@ Value settxfee(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n-    // Amount\n-    CMoney nAmount = 0;\n-    if (params[0].get_real() != 0.0)\n-        nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n+    CMoney nAmount = AmountFromValue(params[0]); // rejects !MoneyRange\n+    if (nAmount == 0)\n+        throw JSONRPCError(RPC_TYPE_ERROR,\n+                           \"Zero transaction fee not allowed.\");\n \n     nTransactionFee = nAmount;\n     return true;"
      },
      {
        "sha": "0f8b54f88c57160a67270cbec5a3249ea65b87f7",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -24,16 +24,16 @@\n BOOST_AUTO_TEST_SUITE(compress_tests)\n \n bool static TestEncode(uint64_t in) {\n-    return in == CTxOutCompressor::DecompressAmount(CTxOutCompressor::CompressAmount(in));\n+    return in == CCompressedMoney::DecompressAmount(CCompressedMoney::CompressAmount(in));\n }\n \n bool static TestDecode(uint64_t in) {\n-    return in == CTxOutCompressor::CompressAmount(CTxOutCompressor::DecompressAmount(in));\n+    return in == CCompressedMoney::CompressAmount(CCompressedMoney::DecompressAmount(in));\n }\n \n bool static TestPair(uint64_t dec, uint64_t enc) {\n-    return CTxOutCompressor::CompressAmount(dec) == enc &&\n-           CTxOutCompressor::DecompressAmount(enc) == dec;\n+    return CCompressedMoney::CompressAmount(dec) == enc &&\n+           CCompressedMoney::DecompressAmount(enc) == dec;\n }\n \n BOOST_AUTO_TEST_CASE(compress_amounts)"
      },
      {
        "sha": "be0dfe279381cdad8bd1f52454f04e7f2df869f1",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -165,6 +165,47 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n     BOOST_CHECK_EQUAL(GetBoolArg(\"booltest4\", false), true);\n }\n \n+BOOST_AUTO_TEST_CASE(util_EncodeDouble)\n+{\n+    for (int i = -8; i <= 8; ++i)\n+    for (int j = -8; j <= 8; ++j)\n+    {\n+        BOOST_CHECK((i==j) == (EncodeDouble(i)==EncodeDouble(j)));\n+        BOOST_CHECK((i< j) == (EncodeDouble(i)< EncodeDouble(j)));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_DecodeDouble)\n+{\n+    for (uint64_t i = 0x7ffeffffffffffffLL - 8; i <= 0x7ffeffffffffffffLL; ++i)\n+    for (uint64_t j = 0x7ffeffffffffffffLL - 8; j <= 0x7ffeffffffffffffLL; ++j)\n+    {\n+        BOOST_CHECK((i==j) == (DecodeDouble(i)==DecodeDouble(j)));\n+        BOOST_CHECK((i< j) == (DecodeDouble(i)< DecodeDouble(j)));\n+    }\n+\n+    for (uint64_t i = 0x7ffeffffffffffffLL - 8; i <= 0x7ffeffffffffffffLL; ++i)\n+    for (uint64_t j = 0x8ffeffffffffffffLL - 8; j <= 0x8ffeffffffffffffLL; ++j)\n+    {\n+        BOOST_CHECK((i==j) == (DecodeDouble(i)==DecodeDouble(j)));\n+        BOOST_CHECK((i< j) == (DecodeDouble(i)< DecodeDouble(j)));\n+    }\n+\n+    for (uint64_t i = 0x8ffeffffffffffffLL - 8; i <= 0x8ffeffffffffffffLL; ++i)\n+    for (uint64_t j = 0x7ffeffffffffffffLL - 8; j <= 0x7ffeffffffffffffLL; ++j)\n+    {\n+        BOOST_CHECK((i==j) == (DecodeDouble(i)==DecodeDouble(j)));\n+        BOOST_CHECK((i< j) == (DecodeDouble(i)< DecodeDouble(j)));\n+    }\n+\n+    for (uint64_t i = 0x8ffeffffffffffffLL - 8; i <= 0x8ffeffffffffffffLL; ++i)\n+    for (uint64_t j = 0x8ffeffffffffffffLL - 8; j <= 0x8ffeffffffffffffLL; ++j)\n+    {\n+        BOOST_CHECK((i==j) == (DecodeDouble(i)==DecodeDouble(j)));\n+        BOOST_CHECK((i< j) == (DecodeDouble(i)< DecodeDouble(j)));\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(util_FormatMoney)\n {\n     BOOST_CHECK_EQUAL(FormatMoney(0, false), \"0.00\");"
      },
      {
        "sha": "3aa3a031718b016d830cf934556931baa958835a",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -183,11 +183,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // empty the wallet and start again, now with fractions of a cent, to test sub-cent change avoidance\n         empty_wallet();\n-        add_coin(0.1*CENT);\n-        add_coin(0.2*CENT);\n-        add_coin(0.3*CENT);\n-        add_coin(0.4*CENT);\n-        add_coin(0.5*CENT);\n+        add_coin(CENT     / 10);\n+        add_coin(CENT * 2 / 10);\n+        add_coin(CENT * 3 / 10);\n+        add_coin(CENT * 4 / 10);\n+        add_coin(CENT * 5 / 10);\n \n         // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 = 1.5 cents\n         // we'll get sub-cent change whatever happens, so can expect 1.0 exactly\n@@ -202,8 +202,8 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n \n         // if we add more sub-cent coins:\n-        add_coin(0.6*CENT);\n-        add_coin(0.7*CENT);\n+        add_coin(CENT * 6 / 10);\n+        add_coin(CENT * 7 / 10);\n \n         // and try again to make 1.0 cents, we can still make 1.0 cents\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n@@ -224,38 +224,38 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // sometimes it will fail, and so we use the next biggest coin:\n         empty_wallet();\n-        add_coin(0.5 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.7 * CENT);\n+        add_coin(CENT * 5 / 10);\n+        add_coin(CENT * 6 / 10);\n+        add_coin(CENT * 7 / 10);\n         add_coin(1111 * CENT);\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * CENT); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         empty_wallet();\n-        add_coin(0.4 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.8 * CENT);\n+        add_coin(CENT * 4 / 10);\n+        add_coin(CENT * 6 / 10);\n+        add_coin(CENT * 8 / 10);\n         add_coin(1111 * CENT);\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n         // test avoiding sub-cent change\n         empty_wallet();\n-        add_coin(0.0005 * COIN);\n-        add_coin(0.01 * COIN);\n-        add_coin(1 * COIN);\n+        add_coin(COIN * 5 / 10000);\n+        add_coin(COIN * 1 / 100);\n+        add_coin(COIN);\n \n         // trying to make 1.0001 from these three coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1.0001 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.0105 * COIN);   // we should get all coins\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(COIN * 10001 / 10000, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, COIN * 10105 / 10000);   // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 0.999, we should take the bigger of the two small coins to avoid sub-cent change\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(0.999 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.01 * COIN);   // we should get 1 + 0.01\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(COIN * 999 / 1000, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, COIN * 101 / 100);   // we should get 1 + 0.01\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // test randomness"
      },
      {
        "sha": "209bb0abe089c92bf686c51c936c02417649cfa9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -30,7 +30,7 @@ double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n     CMoney nValueIn = tx.GetValueOut()+nFee;\n-    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nTxSize;\n+    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn.ToDouble())/nTxSize;\n     double dResult = dPriority + deltaPriority;\n     return dResult;\n }"
      },
      {
        "sha": "1a7883874a3e5d032ab1ec3e86fbadb147d47790",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -303,10 +303,43 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-string FormatMoney(const CMoney& n, bool fPlus)\n+\n+/* EncodeDouble() transforms a 64-bit IEEE floating-point value into an\n+ * equal-width integer by means of a 1:1 function which preserves sort\n+ * ordering, at least for non-NaN values. For two floating point values\n+ * a and b, if a < b, then EncodeDouble(a) < EncodeDouble(b). This is\n+ * useful for circumstances such as the coin-control dialog where it\n+ * makes sense to maintain an hidden integer-valued sort field for the\n+ * GUI display (see qt/coincontroldialog.cpp).\n+ *\n+ * For positive values the floating point format is already defined to\n+ * be sortable based on encoded representation. Since the result is\n+ * unsigned, the sign bit is flipped so that negative values sort\n+ * before positive values. The non-sign bits of negative values also\n+ * need to be flipped in order to ensure proper ordering of that\n+ * sequence.\n+ */\n+uint64_t EncodeDouble(double d)\n+{\n+    const uint64_t wide0 = 0;\n+    const uint64_t wide1 = 1;\n+    uint64_t ieee = *(uint64_t*)&d;\n+    return (((wide1<<63) & ieee)? wide0: ((~wide0) >> 1)) ^ ~ieee;\n+}\n+\n+double DecodeDouble(uint64_t lex)\n+{\n+    const uint64_t wide0 = 0;\n+    const uint64_t wide1 = 1;\n+    uint64_t ieee = (((wide1<<63) & lex)? ((~wide0) >> 1): wide0) ^ ~lex;\n+    return *(double*)&ieee;\n+}\n+\n+string FormatMoney(const CMoney& nIn, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n+    int64_t n = nIn.ToInt64();\n     int64_t n_abs = (n > 0 ? n : -n);\n     int64_t quotient = n_abs/COIN;\n     int64_t remainder = n_abs%COIN;"
      },
      {
        "sha": "399dc40b6850efb6dba9bbfb68e3508cb469c99e",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -155,6 +155,8 @@ static inline bool error(const char* format)\n \n void LogException(std::exception* pex, const char* pszThread);\n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n+uint64_t EncodeDouble(double d);\n+double DecodeDouble(uint64_t lex);\n std::string FormatMoney(const CMoney& n, bool fPlus=false);\n bool ParseMoney(const std::string& str, CMoney& nRet);\n bool ParseMoney(const char* pszIn, CMoney& nRet);"
      },
      {
        "sha": "361f435ae7ddc99afa77aeb14e1b7e79e616e085",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -1268,7 +1268,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CMoney> >& vecSend,\n                     //The priority after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n-                    dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n+                    dPriority += nCredit.ToDouble() * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n \n                 CMoney nChange = nValueIn - nValue - nFeeRet;"
      },
      {
        "sha": "da419bec27db1a00831b2c9a75ed25f617f5b06f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1cd73d0ff73e26da2548193c630b3b8a4d630b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=fc1cd73d0ff73e26da2548193c630b3b8a4d630b",
        "patch": "@@ -829,7 +829,12 @@ class CAccountingEntry\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         // Note: strAccount is serialized as part of the key, not here.\n-        READWRITE(nCreditDebit);\n+        int64_t nCreditDebitI64;\n+        if (fWrite)\n+            nCreditDebitI64 = nCreditDebit.ToInt64(ROUND_SIGNAL);\n+        READWRITE(nCreditDebitI64);\n+        if (fRead)\n+            me.nCreditDebit = nCreditDebitI64;\n         READWRITE(nTime);\n         READWRITE(strOtherAccount);\n "
      }
    ]
  }
]