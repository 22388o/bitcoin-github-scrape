maaku,2014-04-18T17:01:44Z,"To be clear, there are _a lot_ of changed lines across 64 files. But that is rather the point of this pull request - any side chain that changes the type for representing money from int64_t to something else has to change all these lines, thereby making it more difficult to share patches or rebase to keep the side chain up to date.\n\nOne of the few user visible changes that result from this is th",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40824711,40824711,
laanwj,2014-04-18T17:07:11Z,"Couldn't you accomplish mostly the same (but easier to review that behaviour is unchanged) with `typedef uint64_t CMoney` ?\n\nSure, for other chains the definition of CMoney may be more complex, but that's not our problem.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40825133,40825133,
maaku,2014-04-18T18:06:38Z,"@laanwj, no all the code which assumes CMoney is an integer would have to change (and there's quite a bit of that). This pull request only allows a specific subset of arithmetic functionality, and requires explicit casts (with rounding modes) to treat the money value as anything else. Explicit is better than implicit, especially when the point is to maintain code compatibility across implementatio",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40830227,40830227,
sipa,2014-04-18T20:41:29Z,"I'm fine with a type to encapsulate the representation and arithmetic of monetary amounts, but does it really need to deal with conversion from/to human readable format too?\n\nEspecially since it's depended on by core, that feels like functionality that belongs on a higher level. Leaving that in util makes the impact of the patch smaller too.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40842568,40842568,
gavinandresen,2014-04-18T21:24:50Z,NACK from me. I don't think this passes the cost-to-review-for-correctness versus potential-benefit-for-Bitcoin test.\n,https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40845857,40845857,
maaku,2014-04-19T02:03:06Z,"@sipa util.h is loaded by core.cpp. I have no problem reverting that change, if that is the consensus decision. I just thought it was cleaner this way.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40858061,40858061,
maaku,2014-04-19T04:32:13Z,@gavinandresen is there anything I could do along the lines of additional tests to make it easier to be confident that it's correct?\n,https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40860516,40860516,
laanwj,2014-04-19T06:36:31Z,"How far do we want to go to facilitate altcoins? Well, I'm fine if it is a matter of renaming types, but not if it gives us more maintenance or testing overhead.\n\nHence I'd suggest splitting this up.\n- I like the idea of using a ""money"" type. Changing this throughout the source code will result in a lot of line changes, but is easy to review. Defining a typedef for `uint64_t` would be the strai",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40862444,40862444,
maaku,2014-04-19T07:54:07Z,"@laanwj I think you are underestimating the importance of semantic explicitness and type safety here. A simple `typedef int64_t CMoney` would leave a half-dozen lines of code scattered around the project which have in-built assumptions about the integer properties of the money type, and worse leave open the possibility of new hidden dependencies being introduced undetected. That's the key aspect o",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40863488,40863488,
sipa,2014-04-19T08:57:11Z,"A ToString() method is useful for debugging, but I don't think it should be used for interaction with humans. Even for conversion of data types like CKey or CKeyId there is a separate module (base58) for conversion to the human form.\n\nWe're not quite there yet, but I like to see the code evolve to a point where we can split off a ""core data structures"" library, which only contains definitions fo",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40864463,40864463,
laanwj,2014-04-19T11:11:14Z,"@maaku I'll only accept this if the introduced money type has _exactly_ the same behavior as int64_t. Defining division to be different, for example, or rounding, is not acceptable. If you insist on using a class that's possible (and can also be straightforward), but it's somewhat harder to verify than a simple typedef. \n\nHaving a few lines scattered around the code that assume that the money ty",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40866928,40866928,
sipa,2014-04-19T21:30:04Z,I would be very happy if multiple altcoins would do things like changing the money type :D\n,https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40881237,40881237,
maaku,2014-04-21T23:32:54Z,"The debugging/user-string distinction makes sense.\n\nI reverted FormatMoney() and ParseMoney() back into util.cpp, squashed the followon commits, and broke the original commit in two: the first commit does the int64_t -> CMoney change, the second adds type safety by making CMoney a separate class.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40988854,40988854,
maaku,2014-04-22T19:36:21Z,"I have added documentation about EncodeDouble, and moved the CompressAmount / DecompressAmount code to money.cpp, where it is used by a new CCompressedMoney type, as per comments from sipa. I have also added some basic tests of the EncodeDouble / DecodeDouble routines.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-41084275,41084275,
sipa,2014-05-23T15:29:18Z,"I still don't like invoking rounding code (which, imho, is human-machine conversion stuff, not consensus code, even if it's some special mode for that purpose) from within core data structures. Can't you add an IMPLEMENT_SERIALIZE to CMoney itself, which in Bitcoin's implementation just serializes as int64_t, and READWRITE(nAmount) as before in CTxOut?\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44025773,44025773,
maaku,2014-05-23T17:00:37Z,"There is no rounding code. I stripped all that out; for Bitcoin, conversion to either int64_t or double is lossless and round-trip (although the consensus risk for double is higher due to poor FPU or compiler optimization, and should not be used in consensus code). The ROUND_X modes are present for future-proofing purposes, to ensure that if/when CMoney is changed from integer to some other numeri",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44035781,44035781,
sipa,2014-05-23T17:14:42Z,"On Fri, May 23, 2014 at 7:00 PM, Mark Friedenbach\nnotifications@github.comwrote:\n\n> There is no rounding code. I stripped all that out; for Bitcoin,\n> conversion to either int64_t or double is lossless and round-trip. The\n> ROUND_X modes are present for future-proofing purposes, to ensure that\n> if/when CMoney is changed from integer to some other numeric type, the then\n> lossy conversions ",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44037146,44037146,
maaku,2014-05-23T17:25:46Z,"Ok a CMoneyCompressor-like class (CTxOutValueSerializer?) seems like a reasonable compromise. A little messy because it'll need the transaction metadata inside the txout serializer, but I'll see if I can make it work in a clean way.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44038213,44038213,
sipa,2014-05-23T17:30:43Z,"Hmm, yeah agree. Putting responsibility about knowledge of transaction versions in money.\* isn't very clean. But the inherent problem is that they can't be cleanly separated if they're dependent on each other. Right now, however, this is not a problem in Bitcoin, and my reason for liking this is modularization - not future compatibility with things that Bitcoin itself are unlikely to do.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44038726,44038726,
laanwj,2014-05-23T17:38:56Z,"To be honest I'm still not enthusiastic to merge this at all. As I've said before, it sounds like a overdesign for something that we don't need in bitcoin.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44039579,44039579,
gavinandresen,2014-05-23T18:22:27Z,"I agree with @laanwj -- NACK on merging this from me, doesn't pass my cost-to-review versus benefit-to-the-codebase test.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44044065,44044065,
maaku,2014-05-23T18:44:16Z,"@laanwj @gavinandresen This solves actual ongoing maintenance problems being encountered by people using the bitcoin code base today, and is good software engineering for bitcoin. If your only opinion is it lacking in your own review prioritization criteria, that's fine. But please save the NACK for code that you actively want to prevent from being adopted in bitcoin, lest that word lose all meani",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44046632,44046632,
gmaxwell,2014-05-23T19:25:09Z,@maaku So if the codebases were less diverged we might expect to see you working upstream more? :)\n,https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44050739,44050739,
maaku,2014-05-23T19:29:23Z,"@gmaxwell, that's the whole point!\nOn May 23, 2014 12:25 PM, ""Gregory Maxwell"" notifications@github.com\nwrote:\n\n> @maaku https://github.com/maaku So if the codebases were less diverged\n> we might expect to see you working upstream more? :)\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44050739\n> .\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44051134,44051134,
petertodd,2014-05-24T10:18:23Z,"Speaking as a maintainer of a alto implementation, strong NACK. I'd hate to find out we accidentally added a consensus critical difference from standard into semantics that mattered; changing alto implementations to in turn match those semantics would be difficult and convoluted, especially on stuff like python where each level of abstraction has a significant performance cost. Why change what isn",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44083226,44083226,
petertodd,2014-05-24T10:19:12Z,"(s/alto/alt/, stupid android keyboard)\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44083244,44083244,
laanwj,2014-05-24T10:28:22Z,"@petertodd It seems we agree. I've said so too - a typedef is fine with me. Let's pull the first commit only, which does just that.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44083430,44083430,
petertodd,2014-05-24T10:36:04Z,"@laanwj ACK on a typedef. \n\nIts worth remembering with optional changes like this that if we create a fork accidentally miners alone end up losing something like $50k/hour, and the reputation of Bitcoin will take a hit. (particularly given the reasons for making this change) I've already spoken to mining pools that stick with 0.8 because they consider the 0.9 changes to be risky; no sense giving",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44083588,44083588,
sipa,2014-05-24T10:44:29Z,"There are two very different questions here.\n\nOne question is whether this is a net improvement to the codebase - independent of the risk. In my opinion, it is, if it actually encapsulated certain responsibilities out of other code. If it helps forked codebases contribute upstream, that's a nice extra benefit.\n\nHowever, If there is any doubt at all that this might introduce consensus changes, ",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44083746,44083746,
jtimon,2014-05-24T11:37:10Z,"The typedef doesn't solve the problem of the code making assumptions about the type being an int64 (which is the encapsulation/readability improvement that would directly benefit bitcoin). But merging a typedef would be simpler and it would help a little bit with forked codebases.\nAnother PR replacing the typedef with a full class should be easier to read once the typedef is merged. So, yes, it p",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44084729,44084729,
maaku,2014-05-24T14:25:02Z,"@petertodd or anyone else, please point to a single line of code that introduces consensus risk. This patch in no way changes the user- or network-visible behavior of the client It was very carefully constructed with precisely that goal in mind. CMoney is still int64, just wrapped in a class! You'll see in the PR history that I've removed features such as operator/() which were safe but less obvio",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44088718,44088718,
petertodd,2014-05-24T14:45:43Z,"@maaku In Bitcoin even subtle compiler bugs lead to consensus problems; _any_ change is risky. For me to properly review the CMoney class - specifically the idea that it's ""just"" int64 wrapped in a class - would require me to get out the C++ standard and actually check that there isn't any obscure gotchas.\n\nAgain, this is a change primarily for the benefit of other currencies, not Bitcoin. Why s",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44089198,44089198,
leofidus,2014-05-24T15:17:53Z,"Since some altcoins seem to benefit from this change, maybe they can merge this first and incorperate it in their next client version. After some production experience, it might be easier to accept this change here.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44090299,44090299,
jtimon,2014-05-24T16:49:12Z,"By encapsulating functionality this increases the quality, maintainability, readability and future extensibility of bitcoin. \n""Improve bitcoin's divisibility would be a trivial hardfork if it's required in the future"" I have read and written this sentence many times and this PR would actually make it true.\nAbout ""any change is risky therefore any change is bad by default"", maybe we shouldn't had",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44092832,44092832,
maaku,2014-05-24T17:17:43Z,"@jtimon @leofidus Actually Freicoin has effectively had this change since the first code was written almost two years ago, although we use the GMP mpq_class directly instead of encapsulating it in CMoney, but the result is the same. Any upstream (bitcoin) change which deals with monetary values -- which is just about everything except network code -- results in a merge conflict and requires manual",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44093553,44093553,
petertodd,2014-05-25T13:32:34Z,"@jtimon > ""Improve bitcoin's divisibility would be a trivial hardfork if it's required in the future"" I have read and written this sentence many times and this PR would actually make it true.\n\nBy the time Bitcoin is worth the 6x or so orders of magnitude more required to make a divisibility hardfork necessary, changing CMoney would be the least of our worries with regard to a divisibility upgrad",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44133288,44133288,
laanwj,2014-05-25T13:58:52Z,"I agree that defining a money type is somewhat 'better software engineering' when looked at it some ways. But I see the future of Bitcoin Core as just Bitcoin Core, not 'Altcoin Core'.\n\nEventually I want to enshrine the Bitcoin-specific consensus code in a library that as is as small and independent as possible and completely specific to Bitcoin. Altcoins can create their own consensus libraries",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44133815,44133815,
jtimon,2014-05-25T19:27:07Z,"Since it seems that nobody would oppose to the innocuous typedef change, I think that probably it would be wise to separate that (which is not that interesting IMO but could be easily accepted) from the class approach to encapsulate serialization and arithmetic, which is clearly much more controversial. \nI also think that the second commit/PR would be easier to review if it was separated in small",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44143221,44143221,
leofidus,2014-05-25T19:44:44Z,"Am I understanding this correctly that leaving consensus-code unmodified (or typedef'ed) and introducing CMoney in the rest of the codebase would be a compromise which would help everyone (bitcoin has no fork risk but better modularization, freicoin has less work merging changes)? I can at least say that that version would benefit Dogecoin, which would mean that you would also get more help from u",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44143664,44143664,
laanwj,2014-05-25T20:28:10Z,"@jtimon It's not so much about 'review costs', because review will almost certainly not find all bugs/inconsistencies. It is the costs of some unexpected change causing a fork. Years after Satoshi left people are still finding small unexpected cases in the consensus code.\n\nJust that no one can point them out from glancing at the code doesn't mean that no problems exist. Making the code (maybe) a",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-44144658,44144658,
BitcoinPullTester,2014-06-23T11:12:39Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p4067_fc1cd73d0ff73e26da2548193c630b3b8a4d630b/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-46831162,46831162,
laanwj,2014-08-19T09:15:16Z,Closing this in favor of #4234.\n,https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-52608727,52608727,
jtimon,2014-10-02T00:32:57Z,"After #4234 has been merged, a rebased version of this should be much easier to review.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-57562963,57562963,
laanwj,2014-10-02T08:01:59Z,"@jtimon You could save yourself the trouble. As I've said multiple times (also above here), I'm willing to go as far as type-defing the money type. That's what we did, so as far as I'm concerned this issue is now closed.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-57595698,57595698,
jtimon,2014-10-02T18:43:02Z,"Maybe this goes too far, but wouldn't be nice to have a class and convert the functions in utilmoneystr to methods of that class? \nMaybe just moving that to amount.o would be enough?\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-57681371,57681371,
sipa,2014-10-02T18:49:00Z,"At least please keep core data structure definition and human interaction separate. So no, don't move any utilmoneystr to amount.o or CAmount - that would imply having everything using any core datastructure at all depend on that conversion code.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-57682830,57682830,
laanwj,2014-10-02T18:56:19Z,"I'm for keeping the data type and operations such as formatting on it decoupled. Especially as formatting could be done in different ways, depending on the context, it's not an innate property of the type, and indeed not necessary by all clients.\n",https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-57685514,57685514,
laanwj,2014-04-18T17:00:39Z,Please don't use double conversions in places that currently use integer arithmetic.\nWe want to avoid using doubles wherever possible.\n,https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11778435,11778435,src/qt/coincontroldialog.cpp
laanwj,2014-04-18T17:01:59Z,Same here\n,https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11778479,11778479,src/core.h
laanwj,2014-04-18T17:05:57Z,I think it is better to keep the behavior consistent with uint64_t here.\n,https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11778610,11778610,src/money.cpp
maaku,2014-04-18T19:15:30Z,"This code necessarily has to have some sort of inexact conversion. That's rather the point -- we shouldn't be assuming that money calculations are integer arithmetic! So assume that CMoney is implemented using some sort of exact rational arithmetic bignum library. How do we then write code that converts CMoney into an (compact!) ASCII-comparable string, in a way that is code-compatible regardless ",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11783514,11783514,src/qt/coincontroldialog.cpp
maaku,2014-04-18T19:17:18Z,"Whoops, this was left over from a previous version of the patch that didn't have operator/() implemented for CMoney. There's some talk on IRC about getting rid of operator*() and operator/(), so the problem still remains however. This code will get reworked as part of that, if possible.\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11783560,11783560,src/core.h
maaku,2014-04-18T19:23:06Z,"Consistent in what way? With division resulting in truncation of sub-satoshi value? That doesn't make sense when CMoney is changed to use some divisible representation.\n\nI've audited the current code base. Nowhere is there consensus critical division going on, and I believe only the user-visible effects would be rounding in the `IsDust` calculation (see above).\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11783747,11783747,src/money.cpp
leofidus,2014-04-18T20:42:44Z,"But introducing double conversion is problematic for all coins that use more than 53 bits of precision, increasing the friction in sharing code and submitting code upstream. I think there are more coins which use integer representation with values beyond 2^53 than there are coins using alternative datatypes.\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11786105,11786105,src/qt/coincontroldialog.cpp
gmaxwell,2014-04-18T21:04:19Z,"The only metric of ""more coins (existing)"" that I think we should care about here is how much useful code and fixes their contributors have submitted upstream.  By that metric no such other coins exist, AFAIK.\n\nReally I don't care for this whole pull as a compatibility with other forks thing: Its interesting upstream because it increases type-safety for values.\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11786866,11786866,src/qt/coincontroldialog.cpp
leofidus,2014-04-18T21:37:47Z,"I agree that the change has value for Bitcoin, I'm simply saying that because interoperability is the stated goal of the PR it looks preferable not to break existing interoperability.\n\nIt seems more reasonable to me to use the much simpler\n\n```\nout.tx->vout[out.i].nValue.ToInt64()\n```\n\ninstead of\n\n```\nEncodeDouble(out.tx->vout[out.i].nValue.ToDouble())\n```\n\nin Bitcoin and use the mor",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11788020,11788020,src/qt/coincontroldialog.cpp
maaku,2014-04-19T01:47:15Z,"@gmaxwell, it's hard for there to be meaningful contributions back when most alts are stuck on ancient versions of the code base! But even without contribution back, minimizing the code difference between alts makes it easier for maintainers to rebase against newer versions of Bitcoin Core, which increases the security of the greater crypto currency ecosystem. But as you say, the greatest contribu",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11791855,11791855,src/qt/coincontroldialog.cpp
maaku,2014-04-19T02:06:31Z,"Actually I'm going to push back on this one. Now that I've eliminated division of monetary values, this is not so trivial to implement. You have your choice of `ToInt64()` and `ToDouble()`, and assuming no bias about the underlying format I would argue that `ToDouble()` is the correct choice here - keep as many bits of precision for the comparison as possible.\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r11791919,11791919,src/core.h
sipa,2014-05-23T15:46:52Z,Might it make sense to turn this into a CMoney::CheckRange() ?\n,https://github.com/bitcoin/bitcoin/pull/4067#discussion_r13005249,13005249,src/core.h
sipa,2014-05-23T15:47:41Z,I have little problem with using floating-point for policy rules like this.\n,https://github.com/bitcoin/bitcoin/pull/4067#discussion_r13005280,13005280,src/core.h
maaku,2014-05-23T17:00:52Z,"Good suggestion. It'll increase the review burden, but is much cleaner.\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r13008475,13008475,src/core.h
gavinandresen,2014-05-23T17:14:12Z,See #3959 and commit 3aa50118ca8cc8972d1c6b6dffe10963ceb86b7d where I represent fees with a CFeeRate class. It is not type-correct to express fees (which are money-per-transaction-size) as CMoney.\n,https://github.com/bitcoin/bitcoin/pull/4067#discussion_r13009053,13009053,src/main.cpp
maaku,2014-05-23T17:22:45Z,"Thanks for the heads-up. I'll avoid basing pull-requests on top of pull-requests, but as soon as #3959 gets merged I'll merge accordingly.\n",https://github.com/bitcoin/bitcoin/pull/4067#discussion_r13009403,13009403,src/main.cpp
