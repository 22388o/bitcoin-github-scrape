[
  {
    "sha": "b89f30775d9b8516573b6347b522f3e28f550f8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODlmMzA3NzVkOWI4NTE2NTczYjYzNDdiNTIyZjNlMjhmNTUwZjhk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-23T13:40:21Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-05-13T18:58:55Z"
      },
      "message": "Fix incorrect variable name in FindFilesToPrune",
      "tree": {
        "sha": "794d5060201cfadfc6ef4d46bf49117561ce7851",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/794d5060201cfadfc6ef4d46bf49117561ce7851"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b89f30775d9b8516573b6347b522f3e28f550f8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b89f30775d9b8516573b6347b522f3e28f550f8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b89f30775d9b8516573b6347b522f3e28f550f8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b89f30775d9b8516573b6347b522f3e28f550f8d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cc1372190c01bc6aae70f94fcc3b81ae4f7aba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc1372190c01bc6aae70f94fcc3b81ae4f7aba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cc1372190c01bc6aae70f94fcc3b81ae4f7aba3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9a3c272e0e0a84d49c451cc9d45f475142c483dc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b89f30775d9b8516573b6347b522f3e28f550f8d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b89f30775d9b8516573b6347b522f3e28f550f8d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b89f30775d9b8516573b6347b522f3e28f550f8d",
        "patch": "@@ -2932,7 +2932,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune)\n         return;\n     }\n \n-    unsigned int nLastBlockWeMustKeep = chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP;\n+    unsigned int nLastBlockWeCanPrune = chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP;\n     uint64_t nCurrentUsage = CalculateCurrentUsage();\n     // We don't check to prune until after we've allocated new space for files\n     // So we should leave a buffer under our target to account for another allocation\n@@ -2952,7 +2952,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune)\n                 break;\n \n             // don't prune files that could have a block within MIN_BLOCKS_TO_KEEP of the main chain's tip\n-            if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeMustKeep)\n+            if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n                 break;\n \n             PruneOneBlockFile(fileNumber);\n@@ -2963,10 +2963,10 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune)\n         }\n     }\n \n-    LogPrint(\"prune\", \"Prune: target=%dMiB actual=%dMiB diff=%dMiB min_must_keep=%d removed %d blk/rev pairs\\n\",\n+    LogPrint(\"prune\", \"Prune: target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\\n\",\n            nPruneTarget/1024/1024, nCurrentUsage/1024/1024,\n            ((int64_t)nPruneTarget - (int64_t)nCurrentUsage)/1024/1024,\n-           nLastBlockWeMustKeep, count);\n+           nLastBlockWeCanPrune, count);\n }\n \n bool CheckDiskSpace(uint64_t nAdditionalBytes)"
      }
    ]
  },
  {
    "sha": "8f0947be34e1a462e5fa4e212d73bcdba6208da4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjA5NDdiZTM0ZTFhNDYyZTVmYTRlMjEyZDczYmNkYmE2MjA4ZGE0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-04-23T19:46:57Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-05-13T19:02:36Z"
      },
      "message": "Increase timeouts in pruning.py and modify warning language.",
      "tree": {
        "sha": "2934cbc6a0de3d08d8a9cbcc5b54b28ea7674e3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2934cbc6a0de3d08d8a9cbcc5b54b28ea7674e3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f0947be34e1a462e5fa4e212d73bcdba6208da4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0947be34e1a462e5fa4e212d73bcdba6208da4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f0947be34e1a462e5fa4e212d73bcdba6208da4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0947be34e1a462e5fa4e212d73bcdba6208da4/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b89f30775d9b8516573b6347b522f3e28f550f8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b89f30775d9b8516573b6347b522f3e28f550f8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b89f30775d9b8516573b6347b522f3e28f550f8d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "85fd1c982aaa20d1c39ca70645efb949d9f41a09",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0947be34e1a462e5fa4e212d73bcdba6208da4/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0947be34e1a462e5fa4e212d73bcdba6208da4/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=8f0947be34e1a462e5fa4e212d73bcdba6208da4",
        "patch": "@@ -7,7 +7,8 @@\n # Test pruning code\n # ********\n # WARNING:\n-# This test uses 4GB of disk space and takes in excess of 30 mins to run\n+# This test uses 4GB of disk space.\n+# This test takes 30 mins or more (up to 2 hours)\n # ********\n \n from test_framework import BitcoinTestFramework\n@@ -51,11 +52,11 @@ def setup_network(self):\n         self.is_network_split = False\n \n         # Create nodes 0 and 1 to mine\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=300))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=300))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n \n         # Create node 2 to test pruning\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=300))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=900))\n         self.prunedir = self.options.tmpdir+\"/node2/regtest/blocks/\"\n \n         self.address[0] = self.nodes[0].getnewaddress()\n@@ -108,7 +109,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             stop_node(self.nodes[0],0)\n-            self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=300)\n+            self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             self.utxo = self.nodes[1].listunspent()\n             for i in xrange(24):\n@@ -135,7 +136,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         stop_node(self.nodes[1],1)\n-        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=300)\n+        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n         print \"Current block height:\", height\n@@ -158,7 +159,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         stop_node(self.nodes[1],1)\n-        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=300)\n+        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         print \"Generating new longer chain of 300 more blocks\"\n         self.nodes[1].generate(300)\n@@ -223,7 +224,7 @@ def reorg_back(self):\n         waitstart = time.time()\n         while self.nodes[2].getblockcount() < goalbestheight:\n             time.sleep(0.1)\n-            if time.time() - waitstart > 300:\n+            if time.time() - waitstart > 900:\n                 raise AssertionError(\"Node 2 didn't reorg to proper height\")\n         assert(self.nodes[2].getbestblockhash() == goalbesthash)\n         # Verify we can now have the data for a block previously pruned\n@@ -256,7 +257,7 @@ def mine_full_block(self, node, address):\n \n \n     def run_test(self):\n-        print \"Warning! This test requires 4GB of disk space and takes over 30 mins\"\n+        print \"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\"\n         print \"Mining a big blockchain of 995 blocks\"\n         self.create_big_chain()\n         # Chain diagram key:"
      }
    ]
  }
]