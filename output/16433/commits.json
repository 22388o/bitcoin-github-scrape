[
  {
    "sha": "0000ff0aa763e3be524ac4537a41048a26529fb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDAwZmYwYWE3NjNlM2JlNTI0YWM0NTM3YTQxMDQ4YTI2NTI5ZmIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-22T11:42:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-22T11:40:24Z"
      },
      "message": "txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN",
      "tree": {
        "sha": "de161bf07bf491a0a10a741d3f9eae428eafb897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de161bf07bf491a0a10a741d3f9eae428eafb897"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0000ff0aa763e3be524ac4537a41048a26529fb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh9Bgv/RpiThqG9eq+MSClCgMESZ3rfbxNG6g8Pu0aPw5rmmjDYZU+P7WFZG3Fv\n8oszlYdt2XckAAHLUSVPy8y653+ff3KdzpAu0zJvr9s15epKzfQclxs9i93a9QHw\nrJpYcx7HhSi0wrJzxU1LfNz9WaQticWApTUGjAPY9K7erPi9xqb7W7yrXtmqtddW\nE/H9+Yk+IHkrBR2wg998sJrwRgsapI4xvw7mcsVmsgCQwr7gvq/4WBIZ8jF+0Mrd\n5PKJoHCbbgCE2/Kg/y/T8IPrfwCfvIGyBCndIdbSQsbhJxQYluFS1tOcir4v2r6L\n+i0ksbfN/XZACNEtG4+0XiHpLgaXFizGkdUtTYmOr/bQ7X/oNanPlyhRrN/AAxfH\nSZjYVaQ+86jtk56XunNW98bd9rI+viwwY1eomXclNTOQw93Qt1A9lUrcMF3RSPrP\n82uX7GTbVyKeYos7SEohc1T/RYbLzdd5A6PlIJO4ME0qGLTVBSR0+LgbA7TA2ads\nKE6yXWX6\n=NeGe\n-----END PGP SIGNATURE-----",
        "payload": "tree de161bf07bf491a0a10a741d3f9eae428eafb897\nparent 51a6e2c4192913c9c18507d8dfb3302500b26cc3\nauthor MarcoFalke <falke.marco@gmail.com> 1563795721 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1563795624 -0400\n\ntxmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0000ff0aa763e3be524ac4537a41048a26529fb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0000ff0aa763e3be524ac4537a41048a26529fb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0000ff0aa763e3be524ac4537a41048a26529fb2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51a6e2c4192913c9c18507d8dfb3302500b26cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a6e2c4192913c9c18507d8dfb3302500b26cc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51a6e2c4192913c9c18507d8dfb3302500b26cc3"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 17,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5ce8e6feb04df1db109aef6701520f9d84fa353d",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0000ff0aa763e3be524ac4537a41048a26529fb2/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0000ff0aa763e3be524ac4537a41048a26529fb2/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=0000ff0aa763e3be524ac4537a41048a26529fb2",
        "patch": "@@ -85,7 +85,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n         size_t poolSize = pool.size();\n-        pool.removeRecursive(*block.vtx[2]);\n+        pool.removeRecursive(*block.vtx[2], MemPoolRemovalReason::REPLACED);\n         BOOST_CHECK_EQUAL(pool.size(), poolSize - 1);\n \n         CBlock block2;"
      },
      {
        "sha": "fe5d31b7d3d3c88ffdcd1741fde2056679877d3c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0000ff0aa763e3be524ac4537a41048a26529fb2/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0000ff0aa763e3be524ac4537a41048a26529fb2/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=0000ff0aa763e3be524ac4537a41048a26529fb2",
        "patch": "@@ -14,6 +14,8 @@\n \n BOOST_FIXTURE_TEST_SUITE(mempool_tests, TestingSetup)\n \n+static constexpr auto REMOVAL_REASON_DUMMY = MemPoolRemovalReason::REPLACED;\n+\n BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n {\n     // Test CTxMemPool::remove functionality\n@@ -59,13 +61,13 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n     // Nothing in pool, remove should do nothing:\n     unsigned int poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n \n     // Just the parent:\n     testPool.addUnchecked(entry.FromTx(txParent));\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 1);\n \n     // Parent, children, grandchildren:\n@@ -77,18 +79,18 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txChild[0]));\n+    testPool.removeRecursive(CTransaction(txChild[0]), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 2);\n     // ... make sure grandchild and child are gone:\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txGrandChild[0]));\n+    testPool.removeRecursive(CTransaction(txGrandChild[0]), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txChild[0]));\n+    testPool.removeRecursive(CTransaction(txChild[0]), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n     // Remove parent, all children/grandchildren should go:\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 5);\n     BOOST_CHECK_EQUAL(testPool.size(), 0U);\n \n@@ -101,7 +103,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 6);\n     BOOST_CHECK_EQUAL(testPool.size(), 0U);\n }\n@@ -283,11 +285,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 10U);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n-    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n     CheckSort<descendant_score>(pool, snapshotOrder);\n \n-    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx());\n-    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n+    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n }\n \n BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)"
      },
      {
        "sha": "05d7f769838f47309d52a220d33766e31c6ebdb7",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0000ff0aa763e3be524ac4537a41048a26529fb2/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0000ff0aa763e3be524ac4537a41048a26529fb2/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0000ff0aa763e3be524ac4537a41048a26529fb2",
        "patch": "@@ -158,7 +158,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     // Test that packages above the min relay fee do get included, even if one\n     // of the transactions is below the min relay fee\n     // Remove the low fee transaction and replace with a higher fee transaction\n-    mempool.removeRecursive(CTransaction(tx));\n+    mempool.removeRecursive(CTransaction(tx), MemPoolRemovalReason::REPLACED);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));"
      },
      {
        "sha": "7169e80da2f2591bc3d3f15b5bd550ce97bb858b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0000ff0aa763e3be524ac4537a41048a26529fb2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0000ff0aa763e3be524ac4537a41048a26529fb2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0000ff0aa763e3be524ac4537a41048a26529fb2",
        "patch": "@@ -345,7 +345,6 @@ struct TxMempoolInfo\n  * this is passed to the notification signal.\n  */\n enum class MemPoolRemovalReason {\n-    UNKNOWN = 0, //!< Manually removed or unknown reason\n     EXPIRY,      //!< Expired from mempool\n     SIZELIMIT,   //!< Removed in size limiting\n     REORG,       //!< Removed for reorganization\n@@ -574,7 +573,7 @@ class CTxMemPool\n     void addUnchecked(const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n     void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n-    void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n@@ -613,7 +612,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void RemoveStaged(setEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally\n@@ -735,7 +734,7 @@ class CTxMemPool\n      *  transactions in a chain before we've updated all the state for the\n      *  removal.\n      */\n-    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n };\n \n /**"
      }
    ]
  }
]