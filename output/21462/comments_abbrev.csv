DrahtBot,2021-03-17 20:46:31,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-801431851,801431851,
dongcarl,2021-04-09 01:36:01,"Perhaps we can test this by doing a trial run? I've PR'ed my attestations of 5da0e361b8b5a6d730a244e774c6810946619229 here: https://github.com/bitcoin-core/guix.sigs/pull/1\n\nWhat I did:\n- Run `guix-build`\n- Run `env GUIX_SIGS_REPO=<path/to/guix.sigs> SIGNER=0x96AB007F1A7ED999=dongcarl ./contrib/guix/guix-attest`\n\nOnce you've run `./contrib/guix/guix-attest`, you can verify against my s",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-816340336,816340336,
fanquake,2021-04-10 01:00:17,"> I think it is possible when bitcoin-core/guix.sigs#1 is merged, no?\n\nThe PR doesn't have to be merged, you should be able to just fetch and checkout the branch you want to verify against.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-817045364,817045364,
fanquake,2021-04-10 03:10:25,"I have done a trial run through the attestation / verify steps as well. https://github.com/bitcoin-core/guix.sigs/pull/3.\n\nNote that for anyone attesting/verifying on macOS, the invocations of `find` and `xargs` used in the attestation script are not currently compatible with BSD `find` or `xargs`. I just swapped them out for `gfind` and `gxargs` for now.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-817068909,817068909,
laanwj,2021-04-12 14:04:37,"> Personally I'm not a big fan of using the word ""sign"" as it's been used to refer to both codesigning and GPG signing.\n\nI tend to agree, ""gitian signature"" has always been somewhat ambiguous and confusing, attestation is a better word.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-817840179,817840179,
laanwj,2021-04-12 14:24:36,"FWIW: I have a multi-step flow:\n\n- On the build VM, `gitian-sign` with `-p true` to generate `.assert` files but bypass the actual signing\n- Copy `.assert` files to signing machine\n- On signing machine, generate detached signatures and check them into git\n\nI'm not sure how far it is reasonable to accommodate my specific way of working (though there may be more people doing this, it's g",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-817857040,817857040,
dongcarl,2021-04-12 22:36:25,"Pushed 5da0e361b8b5a6d730a244e774c6810946619229 -> 0c238fd118742d6c059dc114b5cc0747adf7f6c5\n- Added commits to address:\n  - https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-817068909\n  - https://github.com/bitcoin/bitcoin/pull/21462#discussion_r611083278\n  - https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-817857040\n\nlaanwj: Please let me know if the `NO_SIGN` flag ",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-818287891,818287891,
laanwj,2021-04-14 09:44:13,"> laanwj: Please let me know if the NO_SIGN flag is enough for your workflow!\n\nYes seems perfect!",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-819386255,819386255,
laanwj,2021-04-14 15:44:19,"I succeeded in generating attestations and signing them externally after removing the above checks and\n```bash\nGUIX_SIGS_REPO=/home/guest/guix.sigs SIGNER=laanwj NO_SIGN=1 contrib/guix/guix-attest\n```\n\nMy only comment really is that having one attestation file per architecture means having to create a lot of signatures. I need to push the button on my external signer device for every one",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-819619977,819619977,
dongcarl,2021-04-14 16:15:14,"Pushed 0c238fd118742d6c059dc114b5cc0747adf7f6c5 -> 816c70c3cef2dde50436461f3fe43f8915840a26\n- Addressed https://github.com/bitcoin/bitcoin/pull/21462#pullrequestreview-635756951\n- Addressed https://github.com/bitcoin/bitcoin/pull/21462#pullrequestreview-635757547",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-819641975,819641975,
sipa,2021-04-14 21:01:45,"Building 816c70c3cef2dde50436461f3fe43f8915840a26\n\nEDIT: see attestation result https://github.com/bitcoin-core/guix.sigs/pull/5",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-819829454,819829454,
laanwj,2021-04-15 12:37:17,"Tested ACK 816c70c3cef2dde50436461f3fe43f8915840a26\nResults at bitcoin-core/guix.sigs#4",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820388953,820388953,
sipa,2021-04-15 18:33:47,"~~Tested ACK 816c70c3cef2dde50436461f3fe43f8915840a26~~. I tried building, attesting, and verifying (as well as testing that verification fails with invalid signature).\n\nAs a follow-up, I think the output of guix-verify could be improved a bit (giving a global success/fail output, and perhaps grouping the output by signer).",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820646505,820646505,
sipa,2021-04-15 18:58:32,"Actually, I think it would be better if the signed data contained a stronger commitment to the source code it was built from than just a truncated git commit id.\n\nAttestations are really claims by the builder that certain input source code corresponds to the resulting build output. As the gpg-signed SHA256SUMS file doesn't actually commit the source code, someone could try to grind git commit ",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820661221,820661221,
dongcarl,2021-04-15 19:09:14,"You're right, attesting to truncated git commit ids by themselves is problematic and we should attest to the source code as well. I'm wondering what specific malicious activity can be thwarted by attesting to the source tgz in every SHA256SUMS file vs. attesting to it in `dist-archive/$SIGNER/SHA256SUMS` like we do now?",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820667353,820667353,
sipa,2021-04-15 19:10:24,"@dongcarl You can selectively combine (dist-archive/$SIGNER/SHA256SUMS from the honest source code, binary-platform/$SIGNER/SHA256SUMS from the malicious one).",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820668031,820668031,
dongcarl,2021-04-15 19:14:59,"Let's say we do attest to the source tgz in every SHA256SUMS file. If I were a malicious signer, I could still manually construct the SHA256SUMS to attest to honest source code and malicious binaries, no?",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820670724,820670724,
sipa,2021-04-15 19:16:35,"@dongcarl You can't modify the SHA256SUMS without invalidating its signatures. The signatures are per-SHA256SUMS-file, so you can mix and match different SHA256SUMS files, but you can't mix and match lines within one file.\n\nI'm not talking about a malicious signer. I'm talking about for example someone creating a PR with a hidden backdoor (which never gets merged or even reviewed) that leads t",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820671879,820671879,
dongcarl,2021-04-15 19:42:36,"> They can then take the dist-archive SHA256SUMS + honest sigs on it from the good source code, and the x86_64 SHA256SUMS file + its (honestly created) sigs on the malicious code.\n\nOkay I see... And if the malicious person combines them, they can make it seem like the honest signer is producing malicious code... Am I understanding that right?",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820686179,820686179,
sipa,2021-04-15 19:44:02,"Right, they can then make a distribution of the software along with SHA256SUMS{,.asc} with malicious binaries and honest source code, signed by honest signers.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820686980,820686980,
dongcarl,2021-04-15 19:47:02,Ah that makes sense! Thanks for spotting it and being patient with me. I will make the changes :-),https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820688480,820688480,
sipa,2021-04-15 19:49:27,"So, if you'd want to do this exactly, I think you'd want to have a build process that first creates the dist-archive, and then afterwards builds the binaries, using just the dist-archive output as input (rather than the source tree you were working on).\n\nPerhaps something for later, as you obviously trust the guix build scripts themselves not to do anything crazy here.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-820689746,820689746,
Emzy,2021-04-16 13:18:33,"Tested ACK.\nWorks with Yubikey as signing device.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-821167872,821167872,
dongcarl,2021-04-20 20:33:48,"Pushed 816c70c3cef2dde50436461f3fe43f8915840a26 -> 7cd57f3ac308ba296842289542b15e902f105964\n- The build output is now constructed in $DISTSRC/output, then moved (likely atomically) to $OUTDIR when everything is done\n- Inputs are now attested to, thanks to sipa's suggestions\n\nPlease see commit messages for more explanations.\n\nSignatures up here: https://github.com/dongcarl/guix.sigs/tre",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-823582223,823582223,
dongcarl,2021-04-28 15:55:46,"Wondering if the latest changes look alright, and what else needs fixing up here before it's ready for merge!",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-828570998,828570998,
DrahtBot,2021-05-03 09:33:18,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @practicalswift has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-831142339,831142339,
dongcarl,2021-05-03 18:50:23,"Pushed 7cd57f3ac308ba296842289542b15e902f105964 -> feda2c8e3180cb983c35976d4440cea23a155b7f\n- Addressed: https://github.com/bitcoin/bitcoin/pull/21462#discussion_r623755390, https://github.com/bitcoin/bitcoin/pull/21462#discussion_r623770745 (see last commit)\n\nAs always, guix.sigs are up at: https://github.com/dongcarl/guix.sigs/tree/2021-04-PR21462/feda2c8e3180",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-831459776,831459776,
dongcarl,2021-05-04 15:56:41,"Pushed feda2c8e31..d420e5c1c0:\n- Added an ERR trap to remove incomplete sigdirs if signing fails\n\nguix.sigs up at: https://github.com/dongcarl/guix.sigs/tree/2021-04-PR21462/d420e5c1c015",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-832052492,832052492,
laanwj,2021-05-05 20:09:04,"Tested ACK\nI get the same output.\n```\nfor x in *; do diff -du $x/dongcarl/SHA256SUMS $x/laanwj/SHA256SUMS; done\n```\nWould it be useful to have a concatenated SHA256SUMS (with all files) as well? I mean, depending on how we're going to do the distribution on the website and torrent. \n\nI guess if we're redesigning this it makes sense to have the two match up, not sign a different file ",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-832973942,832973942,
dongcarl,2021-05-07 19:41:39,"> Or is the idea is to start using a subdirectory per platform there (each with its own SHA256SUMS) too? In this case, having `inputs/bitcoin-d420e5c1c015.tar.gz` in every one might not be practical, it implies having to duplicate the tarball .\n\nHmmm, are you talking about for the webserver? I think it can be done using hard/symlinks at the FS level, or just using virtualized paths at the HTTP",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-834726762,834726762,
laanwj,2021-05-12 11:20:31,"Code review and tested ACK d420e5c1c015f58d07aca4d6a805086488f74d03\n\n> Wondering what particular user-flow you have in mind :-)\n\nAfter discussion on IRC: let's leave this for another PR.",https://github.com/bitcoin/bitcoin/pull/21462#issuecomment-839691607,839691607,
sipa,2021-04-10 19:20:29,"If you're producing .asc files I think it would be expected that they're ascii-armored (`--armor`); otherwise use the .sig extension (this doesn't really matter, but it's a convention).\n\n",https://github.com/bitcoin/bitcoin/pull/21462#discussion_r611083278,611083278,contrib/guix/guix-attest
laanwj,2021-04-14 15:24:22,`gpg` check can be skipped in case of `NO_SIGN`?,https://github.com/bitcoin/bitcoin/pull/21462#discussion_r613348311,613348311,contrib/guix/guix-attest
laanwj,2021-04-14 15:24:52,This check can be skipped in case of NO_SIGN,https://github.com/bitcoin/bitcoin/pull/21462#discussion_r613348725,613348725,contrib/guix/guix-attest
MarcoFalke,2021-04-30 09:49:59,"8dd3c4a7ce9ac744668517a365cf8757713e7e7a: \n```suggestion\n#             GUIX_SIGS_REPO as SIGNER, if attestation does not exist\n```",https://github.com/bitcoin/bitcoin/pull/21462#discussion_r623755390,623755390,contrib/guix/guix-attest
MarcoFalke,2021-04-30 10:17:08,shouldn't this fail when the file is missing?,https://github.com/bitcoin/bitcoin/pull/21462#discussion_r623770745,623770745,contrib/guix/guix-attest
dongcarl,2021-04-30 18:05:15,"Thinking about this since `dist-archive` does not have an `inputs.SHA256SUMS`... Right now, we attest to the bitcoin repo's git-archive in `distsrc-archive`, but I think perhaps it only makes sense to attest to it in the context of it being inputs to the host-specific outputs. When we add codesignatures, similarly it only makes sense to attest to the detached-sigs repo's git-archive in the context",https://github.com/bitcoin/bitcoin/pull/21462#discussion_r624067732,624067732,contrib/guix/guix-attest
Sjors,2021-05-14 08:43:25,"This line fails with ""path not found"" on macOS when `GUIX_SIGS_REPO` is a relative path like `../guix.sigs`.",https://github.com/bitcoin/bitcoin/pull/21462#discussion_r632379087,632379087,contrib/guix/guix-attest
Sjors,2021-05-14 08:58:31,On macOS this needs to be `shasum -a 256` or the user has to make an alias or `brew install coreutils`,https://github.com/bitcoin/bitcoin/pull/21462#discussion_r632387721,632387721,contrib/guix/guix-attest
dongcarl,2021-05-14 20:32:59,"Hmmm, does `shasum -a 256` produce identical output to `sha256sum`?",https://github.com/bitcoin/bitcoin/pull/21462#discussion_r632785006,632785006,contrib/guix/guix-attest
Sjors,2021-05-14 21:12:27,"If my uploaded attestation is correct, yes :-)",https://github.com/bitcoin/bitcoin/pull/21462#discussion_r632810858,632810858,contrib/guix/guix-attest
