gmaxwell,2016-09-18T09:23:00Z,"Concept ACK!   I'm glad that you're working on this. I think it's the right approach.\nThe other advantage is that right now, IIRC, once the ulimit maximum of locked pages is reached, no more data will be locked... silent... and the massive locked page inflation makes it easy to hit any reasonable limit quickly.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247836948,247836948,
paveljanik,2016-09-18T09:50:12Z,"There is no\n\n```\nstatic inline std::pair<std::string,UniValue> Pair(const char *, size_t)\n```\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247838140,247838140,
laanwj,2016-09-18T10:22:59Z,"> The other advantage is that right now, IIRC, once the ulimit maximum of locked pages is reached, no more data will be locked... silent... and the massive locked page inflation makes it easy to hit any reasonable limit quickly.\n\nIndeed. I've also been thinking about heartbleed-like attacks. Currently key data is scattered all around the heap and stack, with this approach it is consolidated in a",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247839585,247839585,
laanwj,2016-09-18T11:10:25Z,"@paveljanik Ok, I've made your variable naming changes. But let's please discuss higher-level concerns first before bombarding nits in code that may be thrown away anyway.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247841551,247841551,
paveljanik,2016-09-18T12:00:04Z,"The higher level is already wrote by @gmaxwell, no need to repeat it.\n\nWith `ulimit -l` being unlimited, RPC returns:\n\n```\n{\n  ""locked"": {\n    ""used"": 200608,\n    ""free"": 61536,\n    ""total"": 262144,\n    ""locked"": 262144\n  }\n}\n```\n\nAfter `ulimit -l 128`, the result is:\n\n```\n{\n  ""locked"": {\n    ""used"": 200608,\n    ""free"": 61536,\n    ""total"": 262144,\n    ""locked"": 0\n  }\n}\n``",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247843668,247843668,
paveljanik,2016-09-18T12:19:29Z,"The default `ulimit -l` values can bring a lot of fun here... OS X unlimited, SUSE Linux 64k etc.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247844473,247844473,
laanwj,2016-09-18T13:59:30Z,"> No memory locked at all? Or when we jump out of the limit, you do not lock anything?\n\nIt allocates and locks memory per arena. If locking the first arena (of 256Kib) fails, nothing will be locked. You could set the `ARENA_SIZE` to 128 kilobytes and retry. Possibly it could read the ulimit value and create the first arena of that size, if it is less than the default of 256, I don't know how OS ",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247849284,247849284,
laanwj,2016-09-18T14:40:53Z,"> Possibly it could read the ulimit value and create the first arena of that size, if it is less than the default of 256\n\nDone, it should always get one arena of locked memory as long as the limit is larger then 0. If not it will act as a NonLockedPoolManager, nothing else to do.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247851518,247851518,
paveljanik,2016-09-18T14:56:16Z,"After `ulimit -l 128`:\n\n```\n{\n  ""locked"": {\n    ""used"": 200608,\n    ""free"": 192608,\n    ""total"": 393216,\n    ""locked"": 131072\n  }\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247852368,247852368,
laanwj,2016-09-18T15:40:59Z,That's exactly what should be expected. It uses all the locked memory allowed to it by the limit. Thanks for testing.\n,https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247854921,247854921,
gmaxwell,2016-09-18T19:45:47Z,"You might want to make the allocation increment just one page and on start have an initial allocation that is equal to whatever typical usage is in the current configuration.  This would both reduce over-allocation and increase the chances that we get all that ulimit would allow. Not a strong opinion, just a design tweak.  Guard pages sound like a good idea. They should be at least as large as any",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247869926,247869926,
laanwj,2016-09-19T07:21:48Z,"> You might want to make the allocation increment just one page and on start have an initial allocation that is equal to whatever typical usage is in the current configuration. \n\nThe practical problem here is that having tons of one-page (or two-page for that matter) arenas reduces performance, at least with the current implementation. I don't think allocating 256kB (or whatever the ulimit is, i",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247925627,247925627,
sipa,2016-09-19T09:45:28Z,"Review comment on the first two commits: if you'd change the variable name of the field/variable whose type changes, it's obvious from the diff that you've adapted all places in the code that affect it (makes it easier to guarantee that there are no sizeofs left).\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247950946,247950946,
laanwj,2016-09-19T12:39:52Z,"> Review comment on the first two commits: if you'd change the variable name of the field/variable whose type changes, it's obvious from the diff that you've adapted all places in the code that affect it\n\nGood idea, I did this for the class field at least (chKey to vchKey and chIV to vchIV), makes sense as a general suggestion.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-247981919,247981919,
laanwj,2016-09-20T13:38:35Z,"rebased:\n- Squashed the squashme commits, except the last one.\n- Fixed all of @sipa's nits.\n- All variables and member variables that change type in the wallet commits have been renamed.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-248303672,248303672,
jonasschnelli,2016-09-20T15:01:58Z,"Concept ACK, impressive work, will try to test this soon.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-248328506,248328506,
laanwj,2016-09-29T15:14:38Z,Ref: #3949\n,https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-250496287,250496287,
laanwj,2016-10-18T16:06:24Z,Added a benchmark to bench/\n,https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-254556368,254556368,
laanwj,2016-10-19T14:27:27Z,Rebased for #8788 and #8873\n,https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-254829294,254829294,
laanwj,2016-10-24T08:56:10Z,Pushed a commit to make `LockedPool::free()` more robust and remove some ugly construction.\n,https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-255684491,255684491,
laanwj,2016-10-25T08:16:57Z,"Added a commit that changes pointer arithmethic to use char\* instead of uintptr_t, this required surprisingly few changes.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-255968366,255968366,
sipa,2016-10-25T18:53:31Z,"Admittedly, you'd need to convert to either char\* or uintptr anyway in\norder to compute the end pointer... feel free to ignore.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-256138773,256138773,
laanwj,2016-10-25T18:57:24Z,"> Admittedly, you'd need to convert to either char\* or uintptr anyway in order to compute the end pointer... feel free to ignore.\n\nConverting to char\* and computing an end pointer is what I did in the last commit.\n",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-256140801,256140801,
laanwj,2016-10-27T11:21:46Z,Squashed the following commits\n- f42c60a - squashme: uintptr_t to char\* for pointer arithmethic\n- 1cb5f2d - lockedpool: Make free() more robust\n,https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-256614859,256614859,
paveljanik,2016-11-02T13:01:32Z,"OS X, clang (one `-Wshadow` warning, and one additional error):\n\n```\nsupport/lockedpool.cpp:67:19: warning: declaration shadows a field of 'Arena' [-Wshadow]\n            char* base = chunk.first;\n                  ^\n./support/lockedpool.h:117:11: note: previous declaration is here\n    char* base;\n          ^\nsupport/lockedpool.cpp:231:49: error: use of undeclared identifier 'MAP_ANONYMOUS",https://github.com/bitcoin/bitcoin/pull/8753#issuecomment-257857493,257857493,
paveljanik,2016-09-18T11:04:53Z,`_allocator` here please.\n,https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79303352,79303352,src/support/lockedpool.cpp
paveljanik,2016-09-18T11:07:36Z,"As you use `x` down in for cycles, please change this.\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79303409,79303409,src/test/allocator_tests.cpp
laanwj,2016-09-18T11:08:05Z,"I'm using `_in` as convention in this file, but yes it shouldn't shadow here.\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79303418,79303418,src/support/lockedpool.cpp
paveljanik,2016-09-18T12:00:39Z,"New file, new convention? Welcome to Bitcoin Core...\n\n_Edit_: There is no need to markup irony ;-)\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79304140,79304140,src/support/lockedpool.cpp
sipa,2016-09-19T09:49:43Z,std::once_flag ?\n,https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79357806,79357806,src/support/lockedpool.cpp
sipa,2016-09-19T09:53:39Z,s/uint32_t/ChunkFlags/ ?\n,https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79358460,79358460,src/support/lockedpool.h
sipa,2016-09-19T09:54:33Z,Use align_up?\n,https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79358595,79358595,src/support/lockedpool.cpp
sipa,2016-09-19T09:59:17Z,"Code style nit: braces on the same line, except for namespaces, classes, functions, methods.\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79359379,79359379,src/support/lockedpool.cpp
sipa,2016-09-19T10:20:44Z,Typo: otherwise\n,https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79362401,79362401,src/support/lockedpool.cpp
laanwj,2016-09-19T12:39:30Z,Does bitwise logic with enums work with C++11? I didn't dare try.\n,https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79381029,79381029,src/support/lockedpool.h
laanwj,2016-09-19T12:46:39Z,"Nice, that breaks the only dependency on boost\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79382347,79382347,src/support/lockedpool.cpp
sipa,2016-09-19T14:53:01Z,"enums automatically decay to the integer type they are derived from for supported operations. Also, any reason for not just using a boolean? Do we expect more flags to be added in the future?\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79409343,79409343,src/support/lockedpool.h
laanwj,2016-09-19T17:17:10Z,"> enums automatically decay to the integer type they are derived from for supported operations. \n\nRight - it always broke down when trying to assign the result of a bitwise operation back to the enum type. Good to hear that this is not a problem anymore.\n\n> Do we expect more flags to be added in the future?\n\nNo, I don't expect more flags to be added.\n\nI'm thinking of using the typical C he",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79441447,79441447,src/support/lockedpool.h
sipa,2016-09-19T17:24:05Z,"You need to cast to assign back to the enum type, as integers aren't automatically converted to enums, only the other way around.\n\nWhat I meant was that you'd just have an enum with two values, and you wouldn't use any bitwise logic. But that would not make it much more clear than just using a boolean.\n\n> I'm thinking of using the typical C heap solution: use the LSB of size as used-flag, then",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79442989,79442989,src/support/lockedpool.h
laanwj,2016-09-20T10:52:35Z,"> Or use the MSB and disallow locking over 2 GiB :)\n\nGood idea, going with that, it's less invasive.\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r79583838,79583838,src/support/lockedpool.h
sipa,2016-10-24T20:46:29Z,"Wouldn't it be easier to store a begin and end void*, and then compare (ptr_in >= ptr_base && ptr_in < ptr_end)? That way you don't need the reinterpret cast.\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r84779627,84779627,src/support/lockedpool.cpp
laanwj,2016-10-25T05:26:32Z,"I'm slightly allergic to pointer math (most of it is undefined for void\* anyhow), that's why the preference to cast to uintptr_t where possible. But sure, for comparisons it can't hurt (it's well-defined).\n",https://github.com/bitcoin/bitcoin/pull/8753#discussion_r84832811,84832811,src/support/lockedpool.cpp
