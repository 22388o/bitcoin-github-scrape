[
  {
    "sha": "e0baed63b65bd31e102b2732e95ae28de39cf6e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGJhZWQ2M2I2NWJkMzFlMTAyYjI3MzJlOTVhZTI4ZGUzOWNmNmU2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-08T23:41:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T07:51:03Z"
      },
      "message": "banman: Use simple std::map lookup for single address bans",
      "tree": {
        "sha": "4228507b612db9471d5a4ecd2fc4435612325975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4228507b612db9471d5a4ecd2fc4435612325975"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0baed63b65bd31e102b2732e95ae28de39cf6e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0baed63b65bd31e102b2732e95ae28de39cf6e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0baed63b65bd31e102b2732e95ae28de39cf6e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0baed63b65bd31e102b2732e95ae28de39cf6e6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6762a627ecb89ba8d4ed81a049a5d802e6dd75c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 69,
      "deletions": 4
    },
    "files": [
      {
        "sha": "13984dfc068777c512ffdbb95094a2ff37e3bfc2",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 4,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0baed63b65bd31e102b2732e95ae28de39cf6e6/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0baed63b65bd31e102b2732e95ae28de39cf6e6/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=e0baed63b65bd31e102b2732e95ae28de39cf6e6",
        "patch": "@@ -61,6 +61,7 @@ void BanMan::ClearBanned()\n {\n     {\n         LOCK(m_cs_banned);\n+        m_banned_addrs.clear();\n         m_banned.clear();\n         m_is_dirty = true;\n     }\n@@ -77,6 +78,15 @@ int BanMan::IsBannedLevel(CNetAddr net_addr)\n     int level = 0;\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n+    const auto addr_ban_entry = m_banned_addrs.find(net_addr);\n+    if (addr_ban_entry != m_banned_addrs.end()) {\n+        const CBanEntry& ban_entry = addr_ban_entry->second;\n+\n+        if (current_time < ban_entry.nBanUntil) {\n+            if (ban_entry.banReason != BanReasonNodeMisbehaving) return 2;\n+            level = 1;\n+        }\n+    }\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n@@ -93,6 +103,15 @@ bool BanMan::IsBanned(CNetAddr net_addr)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n+    {\n+        const auto it = m_banned_addrs.find(net_addr);\n+        if (it != m_banned_addrs.end()) {\n+            CBanEntry ban_entry = it->second;\n+            if (current_time < ban_entry.nBanUntil) {\n+                return true;\n+            }\n+        }\n+    }\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n@@ -106,6 +125,10 @@ bool BanMan::IsBanned(CNetAddr net_addr)\n \n bool BanMan::IsBanned(CSubNet sub_net)\n {\n+    const CNetAddr* addr;\n+    if (sub_net.IsSingleAddr(&addr)) {\n+        return IsBanned(*addr);\n+    }\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n     banmap_t::iterator i = m_banned.find(sub_net);\n@@ -138,8 +161,10 @@ void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ba\n \n     {\n         LOCK(m_cs_banned);\n-        if (m_banned[sub_net].nBanUntil < ban_entry.nBanUntil) {\n-            m_banned[sub_net] = ban_entry;\n+        const CNetAddr *addr;\n+        auto& old_ban_entry = sub_net.IsSingleAddr(&addr) ? m_banned_addrs[*addr] : m_banned[sub_net];\n+        if (old_ban_entry.nBanUntil < ban_entry.nBanUntil) {\n+            old_ban_entry = ban_entry;\n             m_is_dirty = true;\n         } else\n             return;\n@@ -160,7 +185,12 @@ bool BanMan::Unban(const CSubNet& sub_net)\n {\n     {\n         LOCK(m_cs_banned);\n-        if (m_banned.erase(sub_net) == 0) return false;\n+        const CNetAddr *addr;\n+        if (sub_net.IsSingleAddr(&addr)) {\n+            if (m_banned_addrs.erase(*addr) == 0) return false;\n+        } else {\n+            if (m_banned.erase(sub_net) == 0) return false;\n+        }\n         m_is_dirty = true;\n     }\n     if (m_client_interface) m_client_interface->BannedListChanged();\n@@ -174,12 +204,26 @@ void BanMan::GetBanned(banmap_t& banmap)\n     // Sweep the banlist so expired bans are not returned\n     SweepBanned();\n     banmap = m_banned; //create a thread safe copy\n+    for (const auto& addr_pair : m_banned_addrs) {\n+        banmap[CSubNet(addr_pair.first)] = addr_pair.second;\n+    }\n }\n \n void BanMan::SetBanned(const banmap_t& banmap)\n {\n     LOCK(m_cs_banned);\n-    m_banned = banmap;\n+    m_banned_addrs.clear();\n+    m_banned.clear();\n+    const CNetAddr* addr;\n+    for (const auto& sub_net_pair : banmap) {\n+        const auto& sub_net = sub_net_pair.first;\n+        const auto& ban_entry = sub_net_pair.second;\n+        if (sub_net.IsSingleAddr(&addr)) {\n+            m_banned_addrs[*addr] = ban_entry;\n+        } else {\n+            m_banned[sub_net] = ban_entry;\n+        }\n+    }\n     m_is_dirty = true;\n }\n \n@@ -201,6 +245,19 @@ void BanMan::SweepBanned()\n             } else\n                 ++it;\n         }\n+        for (auto i = m_banned_addrs.begin(); i != m_banned_addrs.end(); ) {\n+            CNetAddr addr = i->first;\n+            CBanEntry ban_entry = i->second;\n+            if (now > ban_entry.nBanUntil) {\n+                m_banned_addrs.erase(i++);\n+                m_is_dirty = true;\n+                notify_ui = true;\n+                CSubNet sub_net(addr);\n+                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n+            } else {\n+                ++i;\n+            }\n+        }\n     }\n     // update UI\n     if (notify_ui && m_client_interface) {"
      },
      {
        "sha": "64572b7b5a0aaa6e9b905294a6e102b189e01ca6",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0baed63b65bd31e102b2732e95ae28de39cf6e6/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0baed63b65bd31e102b2732e95ae28de39cf6e6/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=e0baed63b65bd31e102b2732e95ae28de39cf6e6",
        "patch": "@@ -63,6 +63,7 @@ class BanMan\n     void SweepBanned();\n \n     RecursiveMutex m_cs_banned;\n+    std::map<CNetAddr, CBanEntry> m_banned_addrs GUARDED_BY(m_cs_banned);\n     banmap_t m_banned GUARDED_BY(m_cs_banned);\n     bool m_is_dirty GUARDED_BY(m_cs_banned);\n     CClientUIInterface* m_client_interface = nullptr;"
      },
      {
        "sha": "cdb2cf47d294e78ceaf94c486ae8b5e5a306bdd7",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0baed63b65bd31e102b2732e95ae28de39cf6e6/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0baed63b65bd31e102b2732e95ae28de39cf6e6/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=e0baed63b65bd31e102b2732e95ae28de39cf6e6",
        "patch": "@@ -126,6 +126,13 @@ class CSubNet\n \n         std::string ToString() const;\n         bool IsValid() const;\n+        bool IsSingleAddr(const CNetAddr** const out_addr) const {\n+            for (int i = 0; i < 16; ++i) {\n+                if (netmask[i] != 0xff) return false;\n+            }\n+            *out_addr = &network;\n+            return true;\n+        }\n \n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }"
      }
    ]
  },
  {
    "sha": "45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWEzMjg3NzZmM2EwNzg5ZDVlN2VhOGE4MWZlNWE5MzZkMjBiZmJk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T07:23:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T08:10:25Z"
      },
      "message": "banman: Support a limit on number of misbehaving \"bans\" (default 50k)",
      "tree": {
        "sha": "0db34be70a61e7e491589f1fc667e5b0c6aa4ef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0db34be70a61e7e491589f1fc667e5b0c6aa4ef9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0baed63b65bd31e102b2732e95ae28de39cf6e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0baed63b65bd31e102b2732e95ae28de39cf6e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0baed63b65bd31e102b2732e95ae28de39cf6e6"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 53,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ab8f70c208ec5fd33defbe71b6d5954e620ac8dd",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 3,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
        "patch": "@@ -11,6 +11,8 @@\n #include <util/time.h>\n #include <util/translation.h>\n \n+#include <algorithm>\n+\n \n BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)\n     : m_client_interface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n@@ -39,6 +41,13 @@ BanMan::~BanMan()\n     DumpBanlist();\n }\n \n+void BanMan::SetMisbehavingLimit(const size_t limit)\n+{\n+    LOCK(m_cs_banned);\n+    // NOTE: For now, this only works before bans are set!\n+    m_misbehaving_addrs.set_capacity(limit);\n+}\n+\n void BanMan::DumpBanlist()\n {\n     SweepBanned(); // clean unused entries (if bantime has expired)\n@@ -62,6 +71,7 @@ void BanMan::ClearBanned()\n     {\n         LOCK(m_cs_banned);\n         m_banned_addrs.clear();\n+        m_misbehaving_addrs.clear();\n         m_banned.clear();\n         m_is_dirty = true;\n     }\n@@ -161,9 +171,33 @@ void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ba\n \n     {\n         LOCK(m_cs_banned);\n-        const CNetAddr *addr;\n-        auto& old_ban_entry = sub_net.IsSingleAddr(&addr) ? m_banned_addrs[*addr] : m_banned[sub_net];\n+        const CNetAddr *addr = nullptr;\n+        const bool is_single_addr = sub_net.IsSingleAddr(&addr);\n+        auto& old_ban_entry = is_single_addr ? m_banned_addrs[*addr] : m_banned[sub_net];\n         if (old_ban_entry.nBanUntil < ban_entry.nBanUntil) {\n+            if (m_misbehaving_addrs.capacity()) {\n+                // we have a limit on misbehaving entries\n+                if (old_ban_entry.nBanUntil) {\n+                    // overwriting a prior ban\n+                    if (old_ban_entry.banReason == BanReasonNodeMisbehaving && ban_reason != BanReasonNodeMisbehaving) {\n+                        // overwriting a misbehaving entry with manually-added\n+                        // ensure we won't remove a manual ban later\n+                        assert(is_single_addr);\n+                        m_misbehaving_addrs.erase(std::find(m_misbehaving_addrs.begin(), m_misbehaving_addrs.end(), *addr));\n+                    }\n+                } else if (ban_reason == BanReasonNodeMisbehaving) {\n+                    // completely new misbehaving entry\n+                    assert(is_single_addr);\n+                    if (m_misbehaving_addrs.full()) {\n+                        auto old_misbehaving = m_misbehaving_addrs.front();\n+                        CSubNet old_misbehaving_sub_net(old_misbehaving);\n+                        LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, old_misbehaving_sub_net.ToString() + \" (misbehaving ban overflow)\");\n+                        m_banned_addrs.erase(old_misbehaving);\n+                        // push_back will overwrite\n+                    }\n+                    m_misbehaving_addrs.push_back(*addr);\n+                }\n+            }\n             old_ban_entry = ban_entry;\n             m_is_dirty = true;\n         } else\n@@ -187,7 +221,12 @@ bool BanMan::Unban(const CSubNet& sub_net)\n         LOCK(m_cs_banned);\n         const CNetAddr *addr;\n         if (sub_net.IsSingleAddr(&addr)) {\n-            if (m_banned_addrs.erase(*addr) == 0) return false;\n+            auto it = m_banned_addrs.find(*addr);\n+            if (it == m_banned_addrs.end()) return false;\n+            if (it->second.banReason == BanReasonNodeMisbehaving) {\n+                m_misbehaving_addrs.erase(std::find(m_misbehaving_addrs.begin(), m_misbehaving_addrs.end(), *addr));\n+            }\n+            m_banned_addrs.erase(it);\n         } else {\n             if (m_banned.erase(sub_net) == 0) return false;\n         }"
      },
      {
        "sha": "549aa034b51839499edf1099026b84bc6f4c1889",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
        "patch": "@@ -14,8 +14,13 @@\n #include <cstdint>\n #include <memory>\n \n+#include <boost/circular_buffer.hpp>\n+#include <boost/circular_buffer/space_optimized.hpp>\n+\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n+// Maximum number of misbehaving nodes to keep track of for deprioritisation\n+static constexpr size_t DEFAULT_MISBEHAVING_LIMIT = 50000;\n // How often to dump addresses to banlist.dat\n static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n@@ -43,6 +48,7 @@ class BanMan\n public:\n     ~BanMan();\n     BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n+    void SetMisbehavingLimit(size_t limit);\n     void Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n     void Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n     void ClearBanned();\n@@ -64,6 +70,7 @@ class BanMan\n \n     RecursiveMutex m_cs_banned;\n     std::map<CNetAddr, CBanEntry> m_banned_addrs GUARDED_BY(m_cs_banned);\n+    boost::circular_buffer_space_optimized<CNetAddr> m_misbehaving_addrs GUARDED_BY(m_cs_banned);\n     banmap_t m_banned GUARDED_BY(m_cs_banned);\n     bool m_is_dirty GUARDED_BY(m_cs_banned);\n     CClientUIInterface* m_client_interface = nullptr;"
      },
      {
        "sha": "c5bc3c34d669d223abe3e0668a9783087383ee9d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
        "patch": "@@ -443,6 +443,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'noban' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-misbehavinglimit=<n>\", strprintf(\"Maxmium number of misbehaving peers to deprioritise (default: %s)\", DEFAULT_MISBEHAVING_LIMIT), ArgsManager::ALLOW_INT, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1369,6 +1370,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n \n     assert(!node.banman);\n     node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman->SetMisbehavingLimit(gArgs.GetArg(\"-misbehavinglimit\", DEFAULT_MISBEHAVING_LIMIT));\n     assert(!node.connman);\n     node.connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     // Make mempool generally available in the node context. For example the connection manager, wallet, or RPC threads,"
      },
      {
        "sha": "47687535d70b9a1cde8ecd4995759044689b9d35",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
        "patch": "@@ -53,6 +53,8 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/algorithm/string/classification.hpp\n     boost/algorithm/string/replace.hpp\n     boost/algorithm/string/split.hpp\n+    boost/circular_buffer.hpp\n+    boost/circular_buffer/space_optimized.hpp\n     boost/date_time/posix_time/posix_time.hpp\n     boost/filesystem.hpp\n     boost/filesystem/fstream.hpp"
      }
    ]
  },
  {
    "sha": "29189085df06a1b6d4751c4c4f7eff05dd168a73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTE4OTA4NWRmMDZhMWI2ZDQ3NTFjNGM0ZjdlZmYwNWRkMTY4YTcz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T07:15:04Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T08:10:25Z"
      },
      "message": "banman: Rename m_banned to m_banned_subnets for clarity",
      "tree": {
        "sha": "9a61cfb3647c23b82a5728487827714bd5f86101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a61cfb3647c23b82a5728487827714bd5f86101"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29189085df06a1b6d4751c4c4f7eff05dd168a73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29189085df06a1b6d4751c4c4f7eff05dd168a73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29189085df06a1b6d4751c4c4f7eff05dd168a73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29189085df06a1b6d4751c4c4f7eff05dd168a73/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45a328776f3a0789d5e7ea8a81fe5a936d20bfbd"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "1e18bba3e896b0b2bedb6d582dbc53116ee9d072",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29189085df06a1b6d4751c4c4f7eff05dd168a73/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29189085df06a1b6d4751c4c4f7eff05dd168a73/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=29189085df06a1b6d4751c4c4f7eff05dd168a73",
        "patch": "@@ -72,7 +72,7 @@ void BanMan::ClearBanned()\n         LOCK(m_cs_banned);\n         m_banned_addrs.clear();\n         m_misbehaving_addrs.clear();\n-        m_banned.clear();\n+        m_banned_subnets.clear();\n         m_is_dirty = true;\n     }\n     DumpBanlist(); //store banlist to disk\n@@ -97,7 +97,7 @@ int BanMan::IsBannedLevel(CNetAddr net_addr)\n             level = 1;\n         }\n     }\n-    for (const auto& it : m_banned) {\n+    for (const auto& it : m_banned_subnets) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n \n@@ -122,7 +122,7 @@ bool BanMan::IsBanned(CNetAddr net_addr)\n             }\n         }\n     }\n-    for (const auto& it : m_banned) {\n+    for (const auto& it : m_banned_subnets) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n \n@@ -141,8 +141,8 @@ bool BanMan::IsBanned(CSubNet sub_net)\n     }\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n-    banmap_t::iterator i = m_banned.find(sub_net);\n-    if (i != m_banned.end()) {\n+    banmap_t::iterator i = m_banned_subnets.find(sub_net);\n+    if (i != m_banned_subnets.end()) {\n         CBanEntry ban_entry = (*i).second;\n         if (current_time < ban_entry.nBanUntil) {\n             return true;\n@@ -173,7 +173,7 @@ void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ba\n         LOCK(m_cs_banned);\n         const CNetAddr *addr = nullptr;\n         const bool is_single_addr = sub_net.IsSingleAddr(&addr);\n-        auto& old_ban_entry = is_single_addr ? m_banned_addrs[*addr] : m_banned[sub_net];\n+        auto& old_ban_entry = is_single_addr ? m_banned_addrs[*addr] : m_banned_subnets[sub_net];\n         if (old_ban_entry.nBanUntil < ban_entry.nBanUntil) {\n             if (m_misbehaving_addrs.capacity()) {\n                 // we have a limit on misbehaving entries\n@@ -228,7 +228,7 @@ bool BanMan::Unban(const CSubNet& sub_net)\n             }\n             m_banned_addrs.erase(it);\n         } else {\n-            if (m_banned.erase(sub_net) == 0) return false;\n+            if (m_banned_subnets.erase(sub_net) == 0) return false;\n         }\n         m_is_dirty = true;\n     }\n@@ -242,7 +242,7 @@ void BanMan::GetBanned(banmap_t& banmap)\n     LOCK(m_cs_banned);\n     // Sweep the banlist so expired bans are not returned\n     SweepBanned();\n-    banmap = m_banned; //create a thread safe copy\n+    banmap = m_banned_subnets; //create a thread safe copy\n     for (const auto& addr_pair : m_banned_addrs) {\n         banmap[CSubNet(addr_pair.first)] = addr_pair.second;\n     }\n@@ -252,15 +252,15 @@ void BanMan::SetBanned(const banmap_t& banmap)\n {\n     LOCK(m_cs_banned);\n     m_banned_addrs.clear();\n-    m_banned.clear();\n+    m_banned_subnets.clear();\n     const CNetAddr* addr;\n     for (const auto& sub_net_pair : banmap) {\n         const auto& sub_net = sub_net_pair.first;\n         const auto& ban_entry = sub_net_pair.second;\n         if (sub_net.IsSingleAddr(&addr)) {\n             m_banned_addrs[*addr] = ban_entry;\n         } else {\n-            m_banned[sub_net] = ban_entry;\n+            m_banned_subnets[sub_net] = ban_entry;\n         }\n     }\n     m_is_dirty = true;\n@@ -272,12 +272,12 @@ void BanMan::SweepBanned()\n     bool notify_ui = false;\n     {\n         LOCK(m_cs_banned);\n-        banmap_t::iterator it = m_banned.begin();\n-        while (it != m_banned.end()) {\n+        banmap_t::iterator it = m_banned_subnets.begin();\n+        while (it != m_banned_subnets.end()) {\n             CSubNet sub_net = (*it).first;\n             CBanEntry ban_entry = (*it).second;\n             if (now > ban_entry.nBanUntil) {\n-                m_banned.erase(it++);\n+                m_banned_subnets.erase(it++);\n                 m_is_dirty = true;\n                 notify_ui = true;\n                 LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n@@ -312,6 +312,6 @@ bool BanMan::BannedSetIsDirty()\n \n void BanMan::SetBannedSetDirty(bool dirty)\n {\n-    LOCK(m_cs_banned); //reuse m_banned lock for the m_is_dirty flag\n+    LOCK(m_cs_banned);\n     m_is_dirty = dirty;\n }"
      },
      {
        "sha": "00264464fc1c9783bcc8e0c9cef849b0178313ed",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29189085df06a1b6d4751c4c4f7eff05dd168a73/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29189085df06a1b6d4751c4c4f7eff05dd168a73/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=29189085df06a1b6d4751c4c4f7eff05dd168a73",
        "patch": "@@ -71,7 +71,7 @@ class BanMan\n     RecursiveMutex m_cs_banned;\n     std::map<CNetAddr, CBanEntry> m_banned_addrs GUARDED_BY(m_cs_banned);\n     boost::circular_buffer_space_optimized<CNetAddr> m_misbehaving_addrs GUARDED_BY(m_cs_banned);\n-    banmap_t m_banned GUARDED_BY(m_cs_banned);\n+    banmap_t m_banned_subnets GUARDED_BY(m_cs_banned);\n     bool m_is_dirty GUARDED_BY(m_cs_banned);\n     CClientUIInterface* m_client_interface = nullptr;\n     CBanDB m_ban_db;"
      }
    ]
  },
  {
    "sha": "885fbc7ecd1c6e732d374b02b6755383bde18eb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODVmYmM3ZWNkMWM2ZTczMmQzNzRiMDJiNjc1NTM4M2JkZTE4ZWI3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T08:10:21Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T08:10:25Z"
      },
      "message": "QA: Tests for banman misbehavinglimit",
      "tree": {
        "sha": "c72e52f370ac30b7c5b34820d3ed8e2c0894bd79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c72e52f370ac30b7c5b34820d3ed8e2c0894bd79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/885fbc7ecd1c6e732d374b02b6755383bde18eb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885fbc7ecd1c6e732d374b02b6755383bde18eb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/885fbc7ecd1c6e732d374b02b6755383bde18eb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885fbc7ecd1c6e732d374b02b6755383bde18eb7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29189085df06a1b6d4751c4c4f7eff05dd168a73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29189085df06a1b6d4751c4c4f7eff05dd168a73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29189085df06a1b6d4751c4c4f7eff05dd168a73"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7cf18b12fb9da73a9437085cd656210294097aa2",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/885fbc7ecd1c6e732d374b02b6755383bde18eb7/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/885fbc7ecd1c6e732d374b02b6755383bde18eb7/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=885fbc7ecd1c6e732d374b02b6755383bde18eb7",
        "patch": "@@ -356,6 +356,57 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n+BOOST_AUTO_TEST_CASE(DoS_misbehavinglimit)\n+{\n+    auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+\n+    banman->SetMisbehavingLimit(2);\n+    banman->ClearBanned();\n+\n+    int64_t nStartTime = GetTime();\n+    SetMockTime(nStartTime); // Overrides future calls to GetTime()\n+\n+    std::vector<CAddress> addrs;\n+    for (int i = 0; i < 4; ++i) {\n+        addrs.emplace_back(ip(0xa0b0c000 + i), NODE_NONE);\n+        BOOST_CHECK(!banman->IsBanned(addrs[i]));\n+    }\n+    banman->Ban(addrs[0], BanReasonNodeMisbehaving);\n+    BOOST_CHECK(banman->IsBanned(addrs[0]));\n+    banman->Ban(addrs[1], BanReasonNodeMisbehaving);\n+    BOOST_CHECK(banman->IsBanned(addrs[1]));\n+\n+    // Should overflow misbehaving limit and evict addrs[0]\n+    banman->Ban(addrs[2], BanReasonNodeMisbehaving);\n+    BOOST_CHECK(banman->IsBanned(addrs[2]));\n+    BOOST_CHECK(!banman->IsBanned(addrs[0]));\n+\n+    // Manually added shouldn't affect misbehaving limit\n+    banman->Ban(addrs[0], BanReasonManuallyAdded);\n+    BOOST_CHECK(banman->IsBanned(addrs[0]));\n+    BOOST_CHECK(banman->IsBanned(addrs[1]));\n+    BOOST_CHECK(banman->IsBanned(addrs[2]));\n+\n+    // Should overflow misbehaving limit and evict addrs[1]\n+    banman->Ban(addrs[3], BanReasonNodeMisbehaving);\n+    BOOST_CHECK(banman->IsBanned(addrs[0]));\n+    BOOST_CHECK(!banman->IsBanned(addrs[1]));\n+    BOOST_CHECK(banman->IsBanned(addrs[2]));\n+    BOOST_CHECK(banman->IsBanned(addrs[3]));\n+\n+    // Unbanning addrs[3] should allow re-adding addrs[1] without overflowing\n+    banman->Unban(addrs[3]);\n+    BOOST_CHECK(banman->IsBanned(addrs[0]));\n+    BOOST_CHECK(!banman->IsBanned(addrs[1]));\n+    BOOST_CHECK(banman->IsBanned(addrs[2]));\n+    BOOST_CHECK(!banman->IsBanned(addrs[3]));\n+    banman->Ban(addrs[1], BanReasonNodeMisbehaving);\n+    BOOST_CHECK(banman->IsBanned(addrs[0]));\n+    BOOST_CHECK(banman->IsBanned(addrs[1]));\n+    BOOST_CHECK(banman->IsBanned(addrs[2]));\n+    BOOST_CHECK(!banman->IsBanned(addrs[3]));\n+}\n+\n static CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;"
      }
    ]
  },
  {
    "sha": "9a58885df293d21adbeb05f72095ae74b76a972c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTU4ODg1ZGYyOTNkMjFhZGJlYjA1ZjcyMDk1YWU3NGI3NmE5NzJj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T20:28:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T20:28:07Z"
      },
      "message": "fixup! banman: Support a limit on number of misbehaving \"bans\" (default 50k)",
      "tree": {
        "sha": "fba274efd91b35306d4aba20036c3822b4a89275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba274efd91b35306d4aba20036c3822b4a89275"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a58885df293d21adbeb05f72095ae74b76a972c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a58885df293d21adbeb05f72095ae74b76a972c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a58885df293d21adbeb05f72095ae74b76a972c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a58885df293d21adbeb05f72095ae74b76a972c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "885fbc7ecd1c6e732d374b02b6755383bde18eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885fbc7ecd1c6e732d374b02b6755383bde18eb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/885fbc7ecd1c6e732d374b02b6755383bde18eb7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5f4cd736b90bae64614a0bd5c14bc7d96e5618bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a58885df293d21adbeb05f72095ae74b76a972c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a58885df293d21adbeb05f72095ae74b76a972c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9a58885df293d21adbeb05f72095ae74b76a972c",
        "patch": "@@ -443,7 +443,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'noban' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-misbehavinglimit=<n>\", strprintf(\"Maxmium number of misbehaving peers to deprioritise (default: %s)\", DEFAULT_MISBEHAVING_LIMIT), ArgsManager::ALLOW_INT, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-misbehavinglimit=<n>\", strprintf(\"Maximum number of misbehaving peers to deprioritise (default: %s)\", DEFAULT_MISBEHAVING_LIMIT), ArgsManager::ALLOW_INT, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      }
    ]
  },
  {
    "sha": "923862aa8bedbf1ac9ef0efadb4efbdb455534ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjM4NjJhYThiZWRiZjFhYzllZjBlZmFkYjRlZmJkYjQ1NTUzNGVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T20:39:14Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-11T21:08:33Z"
      },
      "message": "Bugfix: banman: Allow manually banning misbehaving nodes, even for a shorter duration",
      "tree": {
        "sha": "7b856f127105b8c41fba242048bf640cb080d42d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b856f127105b8c41fba242048bf640cb080d42d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/923862aa8bedbf1ac9ef0efadb4efbdb455534ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923862aa8bedbf1ac9ef0efadb4efbdb455534ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/923862aa8bedbf1ac9ef0efadb4efbdb455534ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923862aa8bedbf1ac9ef0efadb4efbdb455534ef/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a58885df293d21adbeb05f72095ae74b76a972c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a58885df293d21adbeb05f72095ae74b76a972c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a58885df293d21adbeb05f72095ae74b76a972c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6d3ffe9692b62506cda2bd6e5cb0c0982732d37d",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923862aa8bedbf1ac9ef0efadb4efbdb455534ef/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923862aa8bedbf1ac9ef0efadb4efbdb455534ef/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=923862aa8bedbf1ac9ef0efadb4efbdb455534ef",
        "patch": "@@ -174,12 +174,14 @@ void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ba\n         const CNetAddr *addr = nullptr;\n         const bool is_single_addr = sub_net.IsSingleAddr(&addr);\n         auto& old_ban_entry = is_single_addr ? m_banned_addrs[*addr] : m_banned_subnets[sub_net];\n-        if (old_ban_entry.nBanUntil < ban_entry.nBanUntil) {\n+        if (old_ban_entry.banReason == BanReasonManuallyAdded && ban_reason != BanReasonManuallyAdded) return;\n+        const bool ban_reason_upgrade = (old_ban_entry.banReason == BanReasonNodeMisbehaving && ban_reason != BanReasonNodeMisbehaving);\n+        if (old_ban_entry.nBanUntil < ban_entry.nBanUntil || ban_reason_upgrade) {\n             if (m_misbehaving_addrs.capacity()) {\n                 // we have a limit on misbehaving entries\n                 if (old_ban_entry.nBanUntil) {\n                     // overwriting a prior ban\n-                    if (old_ban_entry.banReason == BanReasonNodeMisbehaving && ban_reason != BanReasonNodeMisbehaving) {\n+                    if (ban_reason_upgrade) {\n                         // overwriting a misbehaving entry with manually-added\n                         // ensure we won't remove a manual ban later\n                         assert(is_single_addr);"
      }
    ]
  }
]