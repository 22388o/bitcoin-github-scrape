[
  {
    "sha": "ad04d1cb35b9612d36078c62213bdbb13f56d73d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDA0ZDFjYjM1Yjk2MTJkMzYwNzhjNjIyMTNiZGJiMTNmNTZkNzNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-18T20:15:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-21T23:01:04Z"
      },
      "message": "Always add default_witness_commitment with GBT client support",
      "tree": {
        "sha": "7ccd702d3a83693cf5ad21ff1e1ce9ca6d6309f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ccd702d3a83693cf5ad21ff1e1ce9ca6d6309f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad04d1cb35b9612d36078c62213bdbb13f56d73d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad04d1cb35b9612d36078c62213bdbb13f56d73d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad04d1cb35b9612d36078c62213bdbb13f56d73d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad04d1cb35b9612d36078c62213bdbb13f56d73d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c577f2638b7f701e4b4b96c4c8df39dc097cf2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c577f2638b7f701e4b4b96c4c8df39dc097cf2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c577f2638b7f701e4b4b96c4c8df39dc097cf2f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "56a5103849cf770e6a6584b0eed4d9c2c064ddc4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad04d1cb35b9612d36078c62213bdbb13f56d73d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad04d1cb35b9612d36078c62213bdbb13f56d73d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ad04d1cb35b9612d36078c62213bdbb13f56d73d",
        "patch": "@@ -3531,15 +3531,8 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n {\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n-    bool fHaveWitness = false;\n-    for (size_t t = 1; t < block.vtx.size(); t++) {\n-        if (!block.vtx[t]->wit.IsNull()) {\n-            fHaveWitness = true;\n-            break;\n-        }\n-    }\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (fHaveWitness && IsWitnessEnabled(pindexPrev, consensusParams)) {\n+    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, NULL);\n             CHash256().Write(witnessroot.begin(), 32).Write(&ret[0], 32).Finalize(witnessroot.begin());"
      },
      {
        "sha": "f3cd1fbf0b9b9a31f7eb6901ec40ba533c3bdb2d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad04d1cb35b9612d36078c62213bdbb13f56d73d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad04d1cb35b9612d36078c62213bdbb13f56d73d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ad04d1cb35b9612d36078c62213bdbb13f56d73d",
        "patch": "@@ -680,7 +680,9 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n-    if (!pblocktemplate->vchCoinbaseCommitment.empty()) {\n+\n+    const struct BIP9DeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n+    if (!pblocktemplate->vchCoinbaseCommitment.empty() && setClientRules.find(segwit_info.name) != setClientRules.end()) {\n         result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n     }\n "
      },
      {
        "sha": "85a2e907c2d07aed5bfe5d36f4dfa77fd256fa90",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad04d1cb35b9612d36078c62213bdbb13f56d73d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad04d1cb35b9612d36078c62213bdbb13f56d73d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ad04d1cb35b9612d36078c62213bdbb13f56d73d",
        "patch": "@@ -214,6 +214,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n+        txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n         if (txFirst.size() == 0)"
      }
    ]
  },
  {
    "sha": "95f4a03777ec2ad82a94a3e2890192a93ad83509",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWY0YTAzNzc3ZWMyYWQ4MmE5NGEzZTI4OTAxOTJhOTNhZDgzNTA5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-11-19T11:55:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-21T23:01:05Z"
      },
      "message": "[qa] Test getblocktemplate default_witness_commitment",
      "tree": {
        "sha": "8dd9a497ada1ed52211cb18ff3c3da341fecb439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dd9a497ada1ed52211cb18ff3c3da341fecb439"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95f4a03777ec2ad82a94a3e2890192a93ad83509",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f4a03777ec2ad82a94a3e2890192a93ad83509",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95f4a03777ec2ad82a94a3e2890192a93ad83509",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f4a03777ec2ad82a94a3e2890192a93ad83509/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad04d1cb35b9612d36078c62213bdbb13f56d73d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad04d1cb35b9612d36078c62213bdbb13f56d73d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad04d1cb35b9612d36078c62213bdbb13f56d73d"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 47,
      "deletions": 23
    },
    "files": [
      {
        "sha": "d344a16a4b9ecfc2a039d3e45709d4cd17b718db",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 47,
        "deletions": 23,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95f4a03777ec2ad82a94a3e2890192a93ad83509/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95f4a03777ec2ad82a94a3e2890192a93ad83509/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=95f4a03777ec2ad82a94a3e2890192a93ad83509",
        "patch": "@@ -195,24 +195,16 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def add_options(self, parser):\n-        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n-                          default=None,\n-                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n-\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n         # Start a node for testing IsStandard rules.\n         self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n         connect_nodes(self.nodes[0], 1)\n \n-        # If an old bitcoind is given, do the upgrade-after-activation test.\n-        self.test_upgrade = False\n-        if (self.options.oldbinary != None):\n-            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n-            connect_nodes(self.nodes[0], 2)\n-            self.test_upgrade = True\n+        # Disable segwit's bip9 parameter to simulate upgrading after activation.\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]))\n+        connect_nodes(self.nodes[0], 2)\n \n     ''' Helpers '''\n     # Build a block on top of node0's tip.\n@@ -1177,7 +1169,7 @@ def test_standardness_v0(self, segwit_activated):\n         if segwit_activated:\n             # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n             # P2PKH output; just send tx's first output back to an anyone-can-spend.\n-            sync_mempools(self.nodes)\n+            sync_mempools([self.nodes[0], self.nodes[1]])\n             tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n             tx3.vout = [CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE]))]\n             tx3.wit.vtxinwit.append(CTxInWitness())\n@@ -1706,19 +1698,53 @@ def test_witness_sigops(self):\n \n     def test_getblocktemplate_before_lockin(self):\n         print(\"\\tTesting getblocktemplate setting of segwit versionbit (before lockin)\")\n-        block_version = (self.nodes[0].getblocktemplate())['version']\n-        assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+        # Node0 is segwit aware, node2 is not.\n+        for node in [self.nodes[0], self.nodes[2]]:\n+            gbt_results = node.getblocktemplate()\n+            block_version = gbt_results['version']\n+            # If we're not indicating segwit support, we should not be signalling\n+            # for segwit activation, nor should we get a witness commitment.\n+            assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+            assert('default_witness_commitment' not in gbt_results)\n \n         # Workaround:\n         # Can either change the tip, or change the mempool and wait 5 seconds\n         # to trigger a recomputation of getblocktemplate.\n-        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        txid = int(self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1), 16)\n         # Using mocktime lets us avoid sleep()\n+        sync_mempools(self.nodes)\n         self.nodes[0].setmocktime(int(time.time())+10)\n-\n-        block_version = self.nodes[0].getblocktemplate({\"rules\" : [\"segwit\"]})['version']\n-        assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n-        self.nodes[0].setmocktime(0) # undo mocktime\n+        self.nodes[2].setmocktime(int(time.time())+10)\n+\n+        for node in [self.nodes[0], self.nodes[2]]:\n+            gbt_results = node.getblocktemplate({\"rules\" : [\"segwit\"]})\n+            block_version = gbt_results['version']\n+            if node == self.nodes[2]:\n+                # If this is a non-segwit node, we should still not get a witness\n+                # commitment, nor a version bit signalling segwit.\n+                assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+                assert('default_witness_commitment' not in gbt_results)\n+            else:\n+                # For segwit-aware nodes, check the version bit and the witness\n+                # commitment are correct.\n+                assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n+                assert('default_witness_commitment' in gbt_results)\n+                witness_commitment = gbt_results['default_witness_commitment']\n+\n+                # TODO: this duplicates some code from blocktools.py, would be nice\n+                # to refactor.\n+                # Check that default_witness_commitment is present.\n+                block = CBlock()\n+                witness_root = block.get_merkle_root([ser_uint256(0), ser_uint256(txid)])\n+                check_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(0)))\n+                from test_framework.blocktools import WITNESS_COMMITMENT_HEADER\n+                output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(check_commitment)\n+                script = CScript([OP_RETURN, output_data])\n+                assert_equal(witness_commitment, bytes_to_hex_str(script))\n+\n+        # undo mocktime\n+        self.nodes[0].setmocktime(0)\n+        self.nodes[2].setmocktime(0)\n \n     # Uncompressed pubkeys are no longer supported in default relay policy,\n     # but (for now) are still valid in blocks.\n@@ -1958,6 +1984,7 @@ def run_test(self):\n \n         # Advance to segwit being 'started'\n         self.advance_to_segwit_started()\n+        sync_blocks(self.nodes)\n         self.test_getblocktemplate_before_lockin()\n \n         sync_blocks(self.nodes)\n@@ -2000,10 +2027,7 @@ def run_test(self):\n         self.test_signature_version_1()\n         self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n-        if self.test_upgrade:\n-            self.test_upgrade_after_activation(self.nodes[2], 2)\n-        else:\n-            print(\"\\tSkipping upgrade-after-activation test (use --oldbinary to enable)\")\n+        self.test_upgrade_after_activation(self.nodes[2], 2)\n         self.test_witness_sigops()\n \n "
      }
    ]
  }
]