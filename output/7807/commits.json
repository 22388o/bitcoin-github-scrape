[
  {
    "sha": "617deeb06e99d4b5fb76235b6009ec72accb4970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTdkZWViMDZlOTlkNGI1ZmI3NjIzNWI2MDA5ZWM3MmFjY2I0OTcw",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-04-04T15:17:23Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-04-07T14:14:44Z"
      },
      "message": "Gave miner test values constants for less error-prone values.",
      "tree": {
        "sha": "48557b1f9ac89031fed2a151b65bf611ccb96db4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48557b1f9ac89031fed2a151b65bf611ccb96db4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/617deeb06e99d4b5fb76235b6009ec72accb4970",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617deeb06e99d4b5fb76235b6009ec72accb4970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/617deeb06e99d4b5fb76235b6009ec72accb4970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617deeb06e99d4b5fb76235b6009ec72accb4970/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9149688f87cb790a600400abd9af72c3ee0c312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9149688f87cb790a600400abd9af72c3ee0c312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9149688f87cb790a600400abd9af72c3ee0c312"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 29,
      "deletions": 24
    },
    "files": [
      {
        "sha": "492bed1450856aa70ebecf3c5979978eebdc21e1",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 24,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617deeb06e99d4b5fb76235b6009ec72accb4970/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617deeb06e99d4b5fb76235b6009ec72accb4970/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=617deeb06e99d4b5fb76235b6009ec72accb4970",
        "patch": "@@ -124,35 +124,40 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n \n+    const CAmount BLOCKSUBSIDY = 50*COIN;\n+    const CAmount LOWFEE = CENT;\n+    const CAmount HIGHFEE = COIN;\n+    const CAmount HIGHERFEE = 4*COIN;\n+\n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n     tx.vin.resize(1);\n     // NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_0 << OP_0 << OP_NOP << OP_CHECKMULTISIG << OP_1;\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vout.resize(1);\n-    tx.vout[0].nValue = 5000000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY;\n     for (unsigned int i = 0; i < 1001; ++i)\n     {\n-        tx.vout[0].nValue -= 1000000;\n+        tx.vout[0].nValue -= LOWFEE;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n         // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails\n-        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n-    tx.vout[0].nValue = 5000000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY;\n     for (unsigned int i = 0; i < 1001; ++i)\n     {\n-        tx.vout[0].nValue -= 1000000;\n+        tx.vout[0].nValue -= LOWFEE;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n         // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n-        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -167,13 +172,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].scriptSig << vchData << OP_DROP;\n     tx.vin[0].scriptSig << OP_1;\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n-    tx.vout[0].nValue = 5000000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY;\n     for (unsigned int i = 0; i < 128; ++i)\n     {\n-        tx.vout[0].nValue -= 10000000;\n+        tx.vout[0].nValue -= 10*LOWFEE;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -182,24 +187,24 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n     BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // child with higher priority than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx.vout[0].nValue = 4900000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n-    tx.vout[0].nValue = 5900000000LL;\n+    tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(400000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -211,37 +216,37 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n-    mempool.addUnchecked(hash, entry.Fee(100000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE/10).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // invalid (pre-p2sh) txn in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vout[0].nValue = 4900000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY-LOWFEE;\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(10000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n-    tx.vout[0].nValue -= 1000000;\n+    tx.vout[0].nValue -= LOWFEE;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // double spend txn pair in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vout[0].nValue = 4900000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n@@ -298,11 +303,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n     prevheights[0] = baseheight + 1;\n     tx.vout.resize(1);\n-    tx.vout[0].nValue = 4900000000LL;\n+    tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n     BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block"
      }
    ]
  },
  {
    "sha": "f8536a62c318aeb1049479568aa8c4b6b03e87a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODUzNmE2MmMzMThhZWIxMDQ5NDc5NTY4YWE4YzRiNmIwM2U4N2E2",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-04-06T12:29:19Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-04-07T14:14:49Z"
      },
      "message": "Corrected values",
      "tree": {
        "sha": "ad16c178324c6dd1575fce8c4c84b97f7c1b81ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad16c178324c6dd1575fce8c4c84b97f7c1b81ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8536a62c318aeb1049479568aa8c4b6b03e87a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8536a62c318aeb1049479568aa8c4b6b03e87a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8536a62c318aeb1049479568aa8c4b6b03e87a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8536a62c318aeb1049479568aa8c4b6b03e87a6/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "617deeb06e99d4b5fb76235b6009ec72accb4970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617deeb06e99d4b5fb76235b6009ec72accb4970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/617deeb06e99d4b5fb76235b6009ec72accb4970"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "469862518c58ca074beb53670ba8bccbeef9f427",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8536a62c318aeb1049479568aa8c4b6b03e87a6/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8536a62c318aeb1049479568aa8c4b6b03e87a6/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f8536a62c318aeb1049479568aa8c4b6b03e87a6",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = BLOCKSUBSIDY;\n     for (unsigned int i = 0; i < 128; ++i)\n     {\n-        tx.vout[0].nValue -= 10*LOWFEE;\n+        tx.vout[0].nValue -= LOWFEE;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE/10).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n "
      }
    ]
  }
]