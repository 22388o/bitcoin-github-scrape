[
  {
    "sha": "dadfee38e8fdf2b384d0991253865ebf9fbdb07f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWRmZWUzOGU4ZmRmMmIzODRkMDk5MTI1Mzg2NWViZjlmYmRiMDdm",
    "commit": {
      "author": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-23T22:41:59Z"
      },
      "committer": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-05-01T18:13:34Z"
      },
      "message": "[test] Add test for listaddressgroupings\n\nTest added as part of wallet-accounts.py.\nMake file a little more flake8 compliant",
      "tree": {
        "sha": "2e8527130f66f8e1ded077ff150dbc71b1542933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e8527130f66f8e1ded077ff150dbc71b1542933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dadfee38e8fdf2b384d0991253865ebf9fbdb07f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dadfee38e8fdf2b384d0991253865ebf9fbdb07f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dadfee38e8fdf2b384d0991253865ebf9fbdb07f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dadfee38e8fdf2b384d0991253865ebf9fbdb07f/comments",
    "author": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2b99b13131b5d0fd6fae6d55892c2ebb327d438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b99b13131b5d0fd6fae6d55892c2ebb327d438",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b99b13131b5d0fd6fae6d55892c2ebb327d438"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 51,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ec3be631217afa5fe83d92b8b68b14584662439e",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 51,
        "deletions": 9,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dadfee38e8fdf2b384d0991253865ebf9fbdb07f/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dadfee38e8fdf2b384d0991253865ebf9fbdb07f/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=dadfee38e8fdf2b384d0991253865ebf9fbdb07f",
        "patch": "@@ -7,6 +7,7 @@\n RPCs tested are:\n     - getaccountaddress\n     - getaddressesbyaccount\n+    - listaddressgroupings\n     - setaccount\n     - sendfrom (with account arguments)\n     - move (with account arguments)\n@@ -30,16 +31,57 @@ def setup_network(self):\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n         self.is_network_split = False\n \n-    def run_test (self):\n+    def run_test(self):\n         node = self.nodes[0]\n         # Check that there's no UTXO on any of the nodes\n         assert_equal(len(node.listunspent()), 0)\n-        \n+\n+        # Note each time we call generate, all generated coins go into\n+        # the same address, so we call twice to get two addresses w/50 each\n+        node.generate(1)\n         node.generate(101)\n-        \n-        assert_equal(node.getbalance(), 50)\n-        \n-        accounts = [\"a\",\"b\",\"c\",\"d\",\"e\"]\n+        assert_equal(node.getbalance(), 100)\n+\n+        # there should be 2 address groups\n+        # each with 1 address with a balance of 50 Bitcoins\n+        address_groups = node.listaddressgroupings()\n+        assert_equal(len(address_groups), 2)\n+        # the addresses aren't linked now, but will be after we send to the\n+        # common address\n+        linked_addresses = set()\n+        for address_group in address_groups:\n+            assert_equal(len(address_group), 1)\n+            assert_equal(len(address_group[0]), 2)\n+            assert_equal(address_group[0][1], 50)\n+            linked_addresses.add(address_group[0][0])\n+\n+        # send 50 from each address to a third address not in this wallet\n+        # There's some fee that will come back to us when the miner reward\n+        # matures.\n+        common_address = \"msf4WtN1YQKXvNtvdFYt9JBnUD2FB41kjr\"\n+        txid = node.sendmany(\n+            fromaccount=\"\",\n+            amounts={common_address: 100},\n+            subtractfeefrom=[common_address],\n+            minconf=1,\n+        )\n+        tx_details = node.gettransaction(txid)\n+        fee = -tx_details['details'][0]['fee']\n+        # there should be 1 address group, with the previously\n+        # unlinked addresses now linked (they both have 0 balance)\n+        address_groups = node.listaddressgroupings()\n+        assert_equal(len(address_groups), 1)\n+        assert_equal(len(address_groups[0]), 2)\n+        assert_equal(set([a[0] for a in address_groups[0]]), linked_addresses)\n+        assert_equal([a[1] for a in address_groups[0]], [0, 0])\n+\n+        node.generate(1)\n+\n+        # we want to reset so that the \"\" account has what's expected.\n+        # otherwise we're off by exactly the fee amount as that's mined\n+        # and matures in the next 100 blocks\n+        node.sendfrom(\"\", common_address, fee)\n+        accounts = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n         amount_to_send = 1.0\n         account_addresses = dict()\n         for account in accounts:\n@@ -56,7 +98,7 @@ def run_test (self):\n         \n         for i in range(len(accounts)):\n             from_account = accounts[i]\n-            to_account = accounts[(i+1)%len(accounts)]\n+            to_account = accounts[(i+1) % len(accounts)]\n             to_address = account_addresses[to_account]\n             node.sendfrom(from_account, to_address, amount_to_send)\n         \n@@ -67,7 +109,7 @@ def run_test (self):\n             assert(address != account_addresses[account])\n             assert_equal(node.getreceivedbyaccount(account), 2)\n             node.move(account, \"\", node.getbalance(account))\n-        \n+\n         node.generate(101)\n         \n         expected_account_balances = {\"\": 5200}\n@@ -97,4 +139,4 @@ def run_test (self):\n             assert_equal(node.getbalance(account), 50)\n \n if __name__ == '__main__':\n-    WalletAccountsTest().main ()\n+    WalletAccountsTest().main()"
      }
    ]
  }
]