[
  {
    "sha": "1c1b1b315f2f89584abe9a7558945dea2fbee708",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzFiMWIzMTVmMmY4OTU4NGFiZTlhNzU1ODk0NWRlYTJmYmVlNzA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-09T12:24:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-16T13:23:29Z"
      },
      "message": "[uacomment] Sanitize per BIP-0014\n\n* SanitizeString() can be requested to be more strict\n* Throw error when SanitizeString() changes uacomments\n* Fix tests",
      "tree": {
        "sha": "80c5e16ed073213d4645f88eb42c398ed194c27f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80c5e16ed073213d4645f88eb42c398ed194c27f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c1b1b315f2f89584abe9a7558945dea2fbee708",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c1b1b315f2f89584abe9a7558945dea2fbee708",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c1b1b315f2f89584abe9a7558945dea2fbee708",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c1b1b315f2f89584abe9a7558945dea2fbee708/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 36,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2239cc0724c5ac05012169b965956371bce4d8bf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1c1b1b315f2f89584abe9a7558945dea2fbee708",
        "patch": "@@ -1014,8 +1014,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     RegisterNodeSignals(GetNodeSignals());\n \n-    // format user agent, check total size\n-    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>());\n+    // sanitize comments per BIP-0014, format user agent and check total size\n+    std::vector<string> uacomments;\n+    BOOST_FOREACH(string cmt, mapMultiArgs[\"-uacomment\"])\n+    {\n+        if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n+            return InitError(strprintf(\"User Agent comment (%s) contains unsafe characters.\", cmt));\n+        uacomments.push_back(SanitizeString(cmt, SAFE_CHARS_UA_COMMENT));\n+    }\n+    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n         return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));"
      },
      {
        "sha": "bde16a517fdcc5cefe5ab78c2aac6f5b6aec620a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1c1b1b315f2f89584abe9a7558945dea2fbee708",
        "patch": "@@ -413,10 +413,10 @@ BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n     comments.push_back(std::string(\"comment1\"));\n     std::vector<std::string> comments2;\n     comments2.push_back(std::string(\"comment1\"));\n-    comments2.push_back(std::string(\"comment2\"));\n+    comments2.push_back(SanitizeString(std::string(\"Comment2; .,_?@; !\\\"#$%&'()*+-/<=>[]\\\\^`{|}~\"), SAFE_CHARS_UA_COMMENT)); // Semicolon is discouraged but not forbidden by BIP-0014\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; Comment2; .,_?@; )/\"));\n }\n \n BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)"
      },
      {
        "sha": "76c22f73538a0aa27d44f09776f6494eef4e447f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=1c1b1b315f2f89584abe9a7558945dea2fbee708",
        "patch": "@@ -14,17 +14,20 @@\n \n using namespace std;\n \n-string SanitizeString(const string& str)\n+static const string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;_?@\" // SAFE_CHARS_UA_COMMENT\n+};\n+\n+string SanitizeString(const string& str, int rule)\n {\n-    /**\n-     * safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n-     * even possibly remotely dangerous like & or >\n-     */\n-    static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@()\");\n     string strResult;\n     for (std::string::size_type i = 0; i < str.size(); i++)\n     {\n-        if (safeChars.find(str[i]) != std::string::npos)\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n             strResult.push_back(str[i]);\n     }\n     return strResult;"
      },
      {
        "sha": "ce93e8349779ad2ae27b7963abac1942749d8e6f",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1b1b315f2f89584abe9a7558945dea2fbee708/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=1c1b1b315f2f89584abe9a7558945dea2fbee708",
        "patch": "@@ -22,7 +22,21 @@\n /** This is needed because the foreach macro can't get over the comma in pair<t1, t2> */\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n-std::string SanitizeString(const std::string& str);\n+/** Used by SanitizeString() */\n+enum SafeChars\n+{\n+    SAFE_CHARS_DEFAULT, //!< The full set of allowed chars\n+    SAFE_CHARS_UA_COMMENT //!< BIP-0014 subset\n+};\n+\n+/**\n+* Remove unsafe chars. Safe chars chosen to allow simple messages/URLs/email\n+* addresses, but avoid anything even possibly remotely dangerous like & or >\n+* @param[in] str    The string to sanitize\n+* @param[in] rule   The set of safe chars to choose (default: least restrictive)\n+* @return           A new string without unsafe chars\n+*/\n+std::string SanitizeString(const std::string& str, int rule = SAFE_CHARS_DEFAULT);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n signed char HexDigit(char c);"
      }
    ]
  }
]