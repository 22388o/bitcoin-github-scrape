[
  {
    "sha": "3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
    "node_id": "C_kwDOABII59oAKDNjYzk1MzQ1Y2E0OWI4N2U4Y2FjYTlhMGU2NDE4YzYzYWUxZTQ2M2E",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-03-01T20:03:35Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-10-05T08:42:10Z"
      },
      "message": "rpc: Replace boolean argument for tx details with enum class.\n\nCo-authored-by: Luke Dashjr <luke_github1@dashjr.org>\nCo-authored-by: 0xB10C <19157360+0xB10C@users.noreply.github.com>",
      "tree": {
        "sha": "67c4a41f26bdcdc1560edd40c5ec3945f530ec53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67c4a41f26bdcdc1560edd40c5ec3945f530ec53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "816e15ee81a2029cde6b4f9fe6fb93e75478c903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816e15ee81a2029cde6b4f9fe6fb93e75478c903",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816e15ee81a2029cde6b4f9fe6fb93e75478c903"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 46,
      "deletions": 25
    },
    "files": [
      {
        "sha": "a2946761335fe80f5189312f79e7c079b3d4f577",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "patch": "@@ -40,7 +40,7 @@ static void BlockToJsonVerbose(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n     bench.run([&] {\n-        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, /*verbose*/ true);\n+        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n         ankerl::nanobench::doNotOptimizeAway(univalue);\n     });\n }\n@@ -50,7 +50,7 @@ BENCHMARK(BlockToJsonVerbose);\n static void BlockToJsonVerboseWrite(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n-    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, /*verbose*/ true);\n+    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n     bench.run([&] {\n         auto str = univalue.write();\n         ankerl::nanobench::doNotOptimizeAway(str);"
      },
      {
        "sha": "b545d0b59e1efffdbba95151bd55c3cca43c5691",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "patch": "@@ -20,6 +20,14 @@ class uint256;\n class UniValue;\n class CTxUndo;\n \n+/**\n+ * Verbose level for block's transaction\n+ */\n+enum class TxVerbosity {\n+    SHOW_TXID,                //!< Only TXID for each block's transaction\n+    SHOW_DETAILS             //!< Include TXID, inputs, outputs, and other common block's transaction information\n+};\n+\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);"
      },
      {
        "sha": "d442a5e9fbdb76f1338e4d2c6b7b3f66f54744c9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "patch": "@@ -260,7 +260,7 @@ static bool rest_headers(const std::any& context,\n static bool rest_block(const std::any& context,\n                        HTTPRequest* req,\n                        const std::string& strURIPart,\n-                       bool showTxDetails)\n+                       TxVerbosity tx_verbosity)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -312,7 +312,7 @@ static bool rest_block(const std::any& context,\n     }\n \n     case RetFormat::JSON: {\n-        UniValue objBlock = blockToJSON(block, tip, pblockindex, showTxDetails);\n+        UniValue objBlock = blockToJSON(block, tip, pblockindex, tx_verbosity);\n         std::string strJSON = objBlock.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n@@ -327,12 +327,12 @@ static bool rest_block(const std::any& context,\n \n static bool rest_block_extended(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(context, req, strURIPart, true);\n+    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_DETAILS);\n }\n \n static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(context, req, strURIPart, false);\n+    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_TXID);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp"
      },
      {
        "sha": "e4a9fa47fdd03e34c628ca314ff319a555d1adfd",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 18,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "patch": "@@ -200,30 +200,36 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n     return result;\n }\n \n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails)\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity)\n {\n     UniValue result = blockheaderToJSON(tip, blockindex);\n \n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n     UniValue txs(UniValue::VARR);\n-    if (txDetails) {\n-        CBlockUndo blockUndo;\n-        const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n-        for (size_t i = 0; i < block.vtx.size(); ++i) {\n-            const CTransactionRef& tx = block.vtx.at(i);\n-            // coinbase transaction (i == 0) doesn't have undo data\n-            const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n-            UniValue objTx(UniValue::VOBJ);\n-            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n-            txs.push_back(objTx);\n-        }\n-    } else {\n-        for (const CTransactionRef& tx : block.vtx) {\n-            txs.push_back(tx->GetHash().GetHex());\n-        }\n+\n+    switch (verbosity) {\n+        case TxVerbosity::SHOW_TXID:\n+            for (const CTransactionRef& tx : block.vtx) {\n+                txs.push_back(tx->GetHash().GetHex());\n+            }\n+            break;\n+\n+        case TxVerbosity::SHOW_DETAILS:\n+            CBlockUndo blockUndo;\n+            const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n+\n+            for (size_t i = 0; i < block.vtx.size(); ++i) {\n+                const CTransactionRef& tx = block.vtx.at(i);\n+                // coinbase transaction (i.e. i == 0) doesn't have undo data\n+                const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n+                UniValue objTx(UniValue::VOBJ);\n+                TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n+                txs.push_back(objTx);\n+            }\n     }\n+\n     result.pushKV(\"tx\", txs);\n \n     return result;\n@@ -931,7 +937,7 @@ static RPCHelpMan getblock()\n     return RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n+                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n                     {\"verbosity|verbose\", RPCArg::Type::NUM, RPCArg::Default{1}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n@@ -1018,7 +1024,14 @@ static RPCHelpMan getblock()\n         return strHex;\n     }\n \n-    return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n+    TxVerbosity tx_verbosity;\n+    if (verbosity == 1) {\n+        tx_verbosity = TxVerbosity::SHOW_TXID;\n+    } else {\n+        tx_verbosity = TxVerbosity::SHOW_DETAILS;\n+    }\n+\n+    return blockToJSON(block, tip, pblockindex, tx_verbosity);\n },\n     };\n }"
      },
      {
        "sha": "5143de01961353f0f0c3e75a3696032400f624bb",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc95345ca49b87e8caca9a0e6418c63ae1e463a/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "patch": "@@ -38,7 +38,7 @@ double GetDifficulty(const CBlockIndex* blockindex);\n void RPCNotifyBlockChange(const CBlockIndex*);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity = TxVerbosity::SHOW_TXID) LOCKS_EXCLUDED(cs_main);\n \n /** Mempool information to JSON */\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);"
      }
    ]
  },
  {
    "sha": "51dbc167e98daab317baa80cf80bfda337672dab",
    "node_id": "C_kwDOABII59oAKDUxZGJjMTY3ZTk4ZGFhYjMxN2JhYTgwY2Y4MGJmZGEzMzc2NzJkYWI",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-02-27T17:39:09Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-10-05T08:42:34Z"
      },
      "message": "rpc: Add level 3 verbosity to getblock RPC call.\n\nDisplay the prevout in transaction inputs when calling getblock level 3\nverbosity.\n\nCo-authored-by: Luke Dashjr <luke_github1@dashjr.org>\nCo-authored-by: 0xB10C <19157360+0xB10C@users.noreply.github.com>",
      "tree": {
        "sha": "69957736fc65466b945e0fedd9a9527f30f4bb02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69957736fc65466b945e0fedd9a9527f30f4bb02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51dbc167e98daab317baa80cf80bfda337672dab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51dbc167e98daab317baa80cf80bfda337672dab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51dbc167e98daab317baa80cf80bfda337672dab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51dbc167e98daab317baa80cf80bfda337672dab/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc95345ca49b87e8caca9a0e6418c63ae1e463a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc95345ca49b87e8caca9a0e6418c63ae1e463a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 37,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3bef64f720066e157ce5dffa4e3a34eb0ba764b6",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51dbc167e98daab317baa80cf80bfda337672dab/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51dbc167e98daab317baa80cf80bfda337672dab/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=51dbc167e98daab317baa80cf80bfda337672dab",
        "patch": "@@ -40,7 +40,7 @@ static void BlockToJsonVerbose(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n     bench.run([&] {\n-        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n+        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n         ankerl::nanobench::doNotOptimizeAway(univalue);\n     });\n }\n@@ -50,7 +50,7 @@ BENCHMARK(BlockToJsonVerbose);\n static void BlockToJsonVerboseWrite(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n-    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n+    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n     bench.run([&] {\n         auto str = univalue.write();\n         ankerl::nanobench::doNotOptimizeAway(str);"
      },
      {
        "sha": "4d7199ab1217834632cddda46525ee230ce90fa5",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51dbc167e98daab317baa80cf80bfda337672dab/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51dbc167e98daab317baa80cf80bfda337672dab/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=51dbc167e98daab317baa80cf80bfda337672dab",
        "patch": "@@ -25,7 +25,8 @@ class CTxUndo;\n  */\n enum class TxVerbosity {\n     SHOW_TXID,                //!< Only TXID for each block's transaction\n-    SHOW_DETAILS             //!< Include TXID, inputs, outputs, and other common block's transaction information\n+    SHOW_DETAILS,             //!< Include TXID, inputs, outputs, and other common block's transaction information\n+    SHOW_DETAILS_AND_PREVOUT  //!< The same as previous option with information about prevouts if available\n };\n \n // core_read.cpp\n@@ -54,6 +55,6 @@ std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool include_hex, bool include_address = true);\n void ScriptToUniv(const CScript& script, UniValue& out);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_DETAILS);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "d14a3f306bbab4e39887cd4db25e0950f2fe973a",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51dbc167e98daab317baa80cf80bfda337672dab/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51dbc167e98daab317baa80cf80bfda337672dab/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=51dbc167e98daab317baa80cf80bfda337672dab",
        "patch": "@@ -163,7 +163,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool include\n     out.pushKV(\"type\", GetTxnOutputType(type));\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo, TxVerbosity verbosity)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n@@ -204,8 +204,27 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n             in.pushKV(\"txinwitness\", txinwitness);\n         }\n         if (calculate_fee) {\n-            const CTxOut& prev_txout = txundo->vprevout[i].out;\n+            const Coin& prev_coin = txundo->vprevout[i];\n+            const CTxOut& prev_txout = prev_coin.out;\n+\n             amt_total_in += prev_txout.nValue;\n+            switch (verbosity) {\n+                case TxVerbosity::SHOW_TXID:\n+                case TxVerbosity::SHOW_DETAILS:\n+                    break;\n+\n+                case TxVerbosity::SHOW_DETAILS_AND_PREVOUT:\n+                    UniValue o_script_pub_key(UniValue::VOBJ);\n+                    ScriptPubKeyToUniv(prev_txout.scriptPubKey, o_script_pub_key, /* includeHex */ true);\n+\n+                    UniValue p(UniValue::VOBJ);\n+                    p.pushKV(\"generated\", bool(prev_coin.fCoinBase));\n+                    p.pushKV(\"height\", uint64_t(prev_coin.nHeight));\n+                    p.pushKV(\"value\", ValueFromAmount(prev_txout.nValue));\n+                    p.pushKV(\"scriptPubKey\", o_script_pub_key);\n+                    in.pushKV(\"prevout\", p);\n+                    break;\n+            }\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);"
      },
      {
        "sha": "e21fd8dad5b0f8859846a55dcf35c1cd1baeebe8",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51dbc167e98daab317baa80cf80bfda337672dab/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51dbc167e98daab317baa80cf80bfda337672dab/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=51dbc167e98daab317baa80cf80bfda337672dab",
        "patch": "@@ -327,7 +327,7 @@ static bool rest_block(const std::any& context,\n \n static bool rest_block_extended(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_DETAILS);\n+    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n }\n \n static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, const std::string& strURIPart)"
      },
      {
        "sha": "92e608a030e0c1371aed065636b034b41813255d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51dbc167e98daab317baa80cf80bfda337672dab/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51dbc167e98daab317baa80cf80bfda337672dab/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=51dbc167e98daab317baa80cf80bfda337672dab",
        "patch": "@@ -217,15 +217,16 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n             break;\n \n         case TxVerbosity::SHOW_DETAILS:\n+        case TxVerbosity::SHOW_DETAILS_AND_PREVOUT:\n             CBlockUndo blockUndo;\n             const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n \n             for (size_t i = 0; i < block.vtx.size(); ++i) {\n                 const CTransactionRef& tx = block.vtx.at(i);\n                 // coinbase transaction (i.e. i == 0) doesn't have undo data\n-                const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n+                const CTxUndo* txundo = (have_undo && i > 0) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n                 UniValue objTx(UniValue::VOBJ);\n-                TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n+                TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo, verbosity);\n                 txs.push_back(objTx);\n             }\n     }\n@@ -937,7 +938,8 @@ static RPCHelpMan getblock()\n     return RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\\n\",\n+                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\\n\"\n+                \"If verbosity is 3, returns an Object with information about block <hash> and information about each transaction, including prevout information for inputs (only for unpruned blocks in the current best chain).\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n                     {\"verbosity|verbose\", RPCArg::Type::NUM, RPCArg::Default{1}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n@@ -1027,8 +1029,10 @@ static RPCHelpMan getblock()\n     TxVerbosity tx_verbosity;\n     if (verbosity == 1) {\n         tx_verbosity = TxVerbosity::SHOW_TXID;\n-    } else {\n+    } else if (verbosity == 2) {\n         tx_verbosity = TxVerbosity::SHOW_DETAILS;\n+    } else {\n+        tx_verbosity = TxVerbosity::SHOW_DETAILS_AND_PREVOUT;\n     }\n \n     return blockToJSON(block, tip, pblockindex, tx_verbosity);"
      },
      {
        "sha": "d9c6761f470410f98bc727d15de40df4e0b089e1",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51dbc167e98daab317baa80cf80bfda337672dab/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51dbc167e98daab317baa80cf80bfda337672dab/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=51dbc167e98daab317baa80cf80bfda337672dab",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_RPC_BLOCKCHAIN_H\n \n #include <consensus/amount.h>\n+#include <core_io.h>\n #include <streams.h>\n #include <sync.h>\n \n@@ -38,7 +39,7 @@ double GetDifficulty(const CBlockIndex* blockindex);\n void RPCNotifyBlockChange(const CBlockIndex*);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity = TxVerbosity::SHOW_TXID) LOCKS_EXCLUDED(cs_main);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity) LOCKS_EXCLUDED(cs_main);\n \n /** Mempool information to JSON */\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);"
      }
    ]
  },
  {
    "sha": "4330af6f72172848f5971a052a8f325ed50eb576",
    "node_id": "C_kwDOABII59oAKDQzMzBhZjZmNzIxNzI4NDhmNTk3MWEwNTJhOGYzMjVlZDUwZWI1NzY",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-02-27T14:19:32Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-10-05T08:42:34Z"
      },
      "message": "rpc: Add test for level 3 verbosity getblock rpc call.",
      "tree": {
        "sha": "8ef8e7ecb7ad8d62605d71e71a87e44f2ecfa54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ef8e7ecb7ad8d62605d71e71a87e44f2ecfa54c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4330af6f72172848f5971a052a8f325ed50eb576",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4330af6f72172848f5971a052a8f325ed50eb576",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4330af6f72172848f5971a052a8f325ed50eb576",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4330af6f72172848f5971a052a8f325ed50eb576/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51dbc167e98daab317baa80cf80bfda337672dab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51dbc167e98daab317baa80cf80bfda337672dab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51dbc167e98daab317baa80cf80bfda337672dab"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 53,
      "deletions": 13
    },
    "files": [
      {
        "sha": "eea9ee26cb4945e409d29154b6c02cad725c5a5a",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 53,
        "deletions": 13,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4330af6f72172848f5971a052a8f325ed50eb576/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4330af6f72172848f5971a052a8f325ed50eb576/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=4330af6f72172848f5971a052a8f325ed50eb576",
        "patch": "@@ -434,17 +434,55 @@ def _test_getblock(self):\n         miniwallet.send_self_transfer(fee_rate=fee_per_kb, from_node=node)\n         blockhash = self.generate(node, 1)[0]\n \n-        self.log.info(\"Test getblock with verbosity 1 doesn't include fee\")\n-        block = node.getblock(blockhash, 1)\n-        assert 'fee' not in block['tx'][1]\n-\n-        self.log.info('Test getblock with verbosity 2 includes expected fee')\n-        block = node.getblock(blockhash, 2)\n-        tx = block['tx'][1]\n-        assert 'fee' in tx\n-        assert_equal(tx['fee'], tx['vsize'] * fee_per_byte)\n-\n-        self.log.info(\"Test getblock with verbosity 2 still works with pruned Undo data\")\n+        def assert_fee_not_in_block(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            assert 'fee' not in block['tx'][1]\n+\n+        def assert_fee_in_block(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            tx = block['tx'][1]\n+            assert 'fee' in tx\n+            assert_equal(tx['fee'], tx['vsize'] * fee_per_byte)\n+\n+        def assert_vin_contains_prevout(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            tx = block[\"tx\"][1]\n+            total_vin = Decimal(\"0.00000000\")\n+            total_vout = Decimal(\"0.00000000\")\n+            for vin in tx[\"vin\"]:\n+                assert \"prevout\" in vin\n+                assert_equal(set(vin[\"prevout\"].keys()), set((\"value\", \"height\", \"generated\", \"scriptPubKey\")))\n+                assert_equal(vin[\"prevout\"][\"generated\"], True)\n+                total_vin += vin[\"prevout\"][\"value\"]\n+            for vout in tx[\"vout\"]:\n+                total_vout += vout[\"value\"]\n+            assert_equal(total_vin, total_vout + tx[\"fee\"])\n+\n+        def assert_vin_does_not_contain_prevout(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            tx = block[\"tx\"][1]\n+            if isinstance(tx, str):\n+                # In verbosity level 1, only the transaction hashes are written\n+                pass\n+            else:\n+                for vin in tx[\"vin\"]:\n+                    assert \"prevout\" not in vin\n+\n+        self.log.info(\"Test that getblock with verbosity 1 doesn't include fee\")\n+        assert_fee_not_in_block(1)\n+\n+        self.log.info('Test that getblock with verbosity 2 and 3 includes expected fee')\n+        assert_fee_in_block(2)\n+        assert_fee_in_block(3)\n+\n+        self.log.info(\"Test that getblock with verbosity 1 and 2 does not include prevout\")\n+        assert_vin_does_not_contain_prevout(1)\n+        assert_vin_does_not_contain_prevout(2)\n+\n+        self.log.info(\"Test that getblock with verbosity 3 includes prevout\")\n+        assert_vin_contains_prevout(3)\n+\n+        self.log.info(\"Test that getblock with verbosity 2 and 3 still works with pruned Undo data\")\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         self.log.info(\"Test getblock with invalid verbosity type returns proper error message\")\n@@ -458,8 +496,10 @@ def move_block_file(old, new):\n         # Move instead of deleting so we can restore chain state afterwards\n         move_block_file('rev00000.dat', 'rev_wrong')\n \n-        block = node.getblock(blockhash, 2)\n-        assert 'fee' not in block['tx'][1]\n+        assert_fee_not_in_block(2)\n+        assert_fee_not_in_block(3)\n+        assert_vin_does_not_contain_prevout(2)\n+        assert_vin_does_not_contain_prevout(3)\n \n         # Restore chain state\n         move_block_file('rev_wrong', 'rev00000.dat')"
      }
    ]
  },
  {
    "sha": "459104b2aae6eeaadfa5a7e47944f1a34780dacd",
    "node_id": "C_kwDOABII59oAKDQ1OTEwNGIyYWFlNmVlYWFkZmE1YTdlNDc5NDRmMWEzNDc4MGRhY2Q",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-02-27T18:18:41Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-10-05T08:42:34Z"
      },
      "message": "rest: Add test for prevout fields in getblock",
      "tree": {
        "sha": "eecc561197b974267a009f52c382f16d7d7414fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eecc561197b974267a009f52c382f16d7d7414fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/459104b2aae6eeaadfa5a7e47944f1a34780dacd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459104b2aae6eeaadfa5a7e47944f1a34780dacd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/459104b2aae6eeaadfa5a7e47944f1a34780dacd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459104b2aae6eeaadfa5a7e47944f1a34780dacd/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4330af6f72172848f5971a052a8f325ed50eb576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4330af6f72172848f5971a052a8f325ed50eb576",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4330af6f72172848f5971a052a8f325ed50eb576"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "531c42ba2c098f16925dd7300055b3ed9ea15930",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/459104b2aae6eeaadfa5a7e47944f1a34780dacd/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/459104b2aae6eeaadfa5a7e47944f1a34780dacd/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=459104b2aae6eeaadfa5a7e47944f1a34780dacd",
        "patch": "@@ -311,6 +311,15 @@ def run_test(self):\n                             if 'coinbase' not in tx['vin'][0]}\n         assert_equal(non_coinbase_txs, set(txs))\n \n+        # Verify that the non-coinbase tx has \"prevout\" key set\n+        for tx_obj in json_obj[\"tx\"]:\n+            for vin in tx_obj[\"vin\"]:\n+                if \"coinbase\" not in vin:\n+                    assert \"prevout\" in vin\n+                    assert_equal(vin[\"prevout\"][\"generated\"], False)\n+                else:\n+                    assert \"prevout\" not in vin\n+\n         # Check the same but without tx details\n         json_obj = self.test_rest_request(f\"/block/notxdetails/{newblockhash[0]}\")\n         for tx in txs:"
      }
    ]
  },
  {
    "sha": "8edf6204a87057a451160d1e61e79d8be112e81f",
    "node_id": "C_kwDOABII59oAKDhlZGY2MjA0YTg3MDU3YTQ1MTE2MGQxZTYxZTc5ZDhiZTExMmU4MWY",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-07-16T15:57:24Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-10-05T08:42:34Z"
      },
      "message": "release-notes: Add release note about getblock verbosity level 3.",
      "tree": {
        "sha": "e3cc950d95238d4e5aed9c3e5c22c09d214aa0fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3cc950d95238d4e5aed9c3e5c22c09d214aa0fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8edf6204a87057a451160d1e61e79d8be112e81f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8edf6204a87057a451160d1e61e79d8be112e81f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8edf6204a87057a451160d1e61e79d8be112e81f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8edf6204a87057a451160d1e61e79d8be112e81f/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "459104b2aae6eeaadfa5a7e47944f1a34780dacd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459104b2aae6eeaadfa5a7e47944f1a34780dacd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/459104b2aae6eeaadfa5a7e47944f1a34780dacd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3bf3e471692ba39eef3e51859cdc9d40dc0b0b8b",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8edf6204a87057a451160d1e61e79d8be112e81f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8edf6204a87057a451160d1e61e79d8be112e81f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=8edf6204a87057a451160d1e61e79d8be112e81f",
        "patch": "@@ -76,6 +76,14 @@ Updated RPCs\n   `gettransaction verbose=true` and REST endpoints `/rest/tx`, `/rest/getutxos`,\n   `/rest/block` no longer return the `addresses` and `reqSigs` fields, which\n   were previously deprecated in 22.0. (#22650)\n+- The `getblock` RPC command now supports verbose level 3 containing transaction inputs\n+  `prevout` information.  The existing `/rest/block/` REST endpoint is modified to contain\n+  this information too. Every `vin` field will contain an additional `prevout` subfield\n+  describing the spent output. `prevout` contains the following keys:\n+  - `generated` - true if the spent coins was a coinbase.\n+  - `height`\n+  - `value`\n+  - `scriptPubKey`\n \n - `listunspent` now includes `ancestorcount`, `ancestorsize`, and\n   `ancestorfees` for each transaction output that is still in the mempool."
      }
    ]
  },
  {
    "sha": "5c34507ecbbdc29c086276d1c62835b461823507",
    "node_id": "C_kwDOABII59oAKDVjMzQ1MDdlY2JiZGMyOWMwODYyNzZkMWM2MjgzNWI0NjE4MjM1MDc",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:00:31Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-10-05T08:42:34Z"
      },
      "message": "core_write: Rename calculate_fee to have_undo for clarity",
      "tree": {
        "sha": "905f27345cff2d61f7a3d433b82cddf3a08adf3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/905f27345cff2d61f7a3d433b82cddf3a08adf3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c34507ecbbdc29c086276d1c62835b461823507",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c34507ecbbdc29c086276d1c62835b461823507",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c34507ecbbdc29c086276d1c62835b461823507",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c34507ecbbdc29c086276d1c62835b461823507/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8edf6204a87057a451160d1e61e79d8be112e81f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8edf6204a87057a451160d1e61e79d8be112e81f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8edf6204a87057a451160d1e61e79d8be112e81f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "468694b01189f51039bf28314fb4e48335d47cef",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c34507ecbbdc29c086276d1c62835b461823507/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c34507ecbbdc29c086276d1c62835b461823507/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=5c34507ecbbdc29c086276d1c62835b461823507",
        "patch": "@@ -179,7 +179,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n \n     // If available, use Undo data to calculate the fee. Note that txundo == nullptr\n     // for coinbase transactions and for transactions where undo data is unavailable.\n-    const bool calculate_fee = txundo != nullptr;\n+    const bool have_undo = txundo != nullptr;\n     CAmount amt_total_in = 0;\n     CAmount amt_total_out = 0;\n \n@@ -203,7 +203,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n             }\n             in.pushKV(\"txinwitness\", txinwitness);\n         }\n-        if (calculate_fee) {\n+        if (have_undo) {\n             const Coin& prev_coin = txundo->vprevout[i];\n             const CTxOut& prev_txout = prev_coin.out;\n \n@@ -245,13 +245,13 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n         out.pushKV(\"scriptPubKey\", o);\n         vout.push_back(out);\n \n-        if (calculate_fee) {\n+        if (have_undo) {\n             amt_total_out += txout.nValue;\n         }\n     }\n     entry.pushKV(\"vout\", vout);\n \n-    if (calculate_fee) {\n+    if (have_undo) {\n         const CAmount fee = amt_total_in - amt_total_out;\n         CHECK_NONFATAL(MoneyRange(fee));\n         entry.pushKV(\"fee\", ValueFromAmount(fee));"
      }
    ]
  }
]