DrahtBot,2020-03-25 00:22:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18407 (tests: Add proof-of-work fuzzing harness by practicalswift)\n\nIf you consider this pull request important, please",https://github.com/bitcoin/bitcoin/pull/18423#issuecomment-603572451,603572451,
MarcoFalke,2020-03-25 00:35:22,Why does this need to be consumed? It seems the only purpose of the consumed bool is to exit early. The same can be achieved by the fuzz engine by just not providing any further input. So shouldn't the condition here be `fuzzed_data_provider.remaining_bytes()`?,https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397543903,397543903,src/test/fuzz/blockfilter.cpp
practicalswift,2020-03-25 11:18:08,"Yes, using `if (fuzzed_data_provider.remaining_bytes()) {` is possible but that would render the seed corpus invalid if we add input consuming code to be fuzzed in `blockfilter.cpp` going forward.\n\nUsing `if (fuzzed_data_provider.ConsumeBool()) {` instead avoids that problem: we can add code to be fuzzed that consumes input without invalidating the existing seed corpus.\n\nInvalidating in th",https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397778213,397778213,src/test/fuzz/blockfilter.cpp
practicalswift,2020-03-25 11:36:16,Please note that `fuzzed_data_provider.ConsumeBool()` will return `false` if `fuzzed_data_provider.remaining_bytes() == 0`.,https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397787918,397787918,src/test/fuzz/blockfilter.cpp
