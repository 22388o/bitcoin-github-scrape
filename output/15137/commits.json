[
  {
    "sha": "24ec978f916ed546ae7042a57da6d3f0ff67b866",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGVjOTc4ZjkxNmVkNTQ2YWU3MDQyYTU3ZGE2ZDNmMGZmNjdiODY2",
    "commit": {
      "author": {
        "name": "mmachicao",
        "email": "mmachicao@m19r.de",
        "date": "2019-01-09T22:13:32Z"
      },
      "committer": {
        "name": "marcaiaf",
        "email": "mmachicao@m19r.de",
        "date": "2019-01-15T22:18:38Z"
      },
      "message": "Tests: Contract test for CCoinsView and CCoinsViewBacked\n\nAlso:\n\nUse override keyword on overriden methods\nRename variables with potentially conflicting names",
      "tree": {
        "sha": "b1ed518f549627f40cae4ff0db7856ded5a46447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1ed518f549627f40cae4ff0db7856ded5a46447"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24ec978f916ed546ae7042a57da6d3f0ff67b866",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ec978f916ed546ae7042a57da6d3f0ff67b866",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24ec978f916ed546ae7042a57da6d3f0ff67b866",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ec978f916ed546ae7042a57da6d3f0ff67b866/comments",
    "author": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86e0a33f5c382513d5179e3fdf158baf952d7e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86e0a33f5c382513d5179e3fdf158baf952d7e2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86e0a33f5c382513d5179e3fdf158baf952d7e2f"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 72,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9feed7ff37e0b2ed24070e30c9df21cafa479280",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ec978f916ed546ae7042a57da6d3f0ff67b866/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ec978f916ed546ae7042a57da6d3f0ff67b866/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=24ec978f916ed546ae7042a57da6d3f0ff67b866",
        "patch": "@@ -98,6 +98,78 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n \n BOOST_FIXTURE_TEST_SUITE(coins_tests, BasicTestingSetup)\n \n+// This trivial contract must be tested, because instances of CCoinsView are used in production code\n+BOOST_AUTO_TEST_CASE(coins_CCoinsViewContract)\n+{\n+    CCoinsView view;\n+\n+    Coin coin;\n+    COutPoint const outPoint;\n+    BOOST_CHECK_EQUAL(view.GetCoin(outPoint, coin), false);\n+    BOOST_CHECK_EQUAL(view.GetBestBlock(), uint256());\n+    BOOST_CHECK_EQUAL(view.GetHeadBlocks().size(), 0);\n+\n+    CCoinsMap map;\n+    uint256 hashBlock;\n+    BOOST_CHECK_EQUAL(view.BatchWrite(map, hashBlock), false);\n+    BOOST_CHECK(view.Cursor() == nullptr);\n+    BOOST_CHECK_EQUAL(view.HaveCoin(outPoint), false);\n+    BOOST_CHECK_EQUAL(view.HaveCoin(outPoint), view.GetCoin(outPoint, coin));\n+}\n+\n+// Test the contract in order to detect unintended modifications\n+BOOST_AUTO_TEST_CASE(coins_CCoinsViewBackendContract)\n+{\n+    // CCoinsViewBacked effectively delegates to an instance of CCoinsView.\n+    CCoinsView view;\n+    CCoinsViewBacked vBacked(&view);\n+\n+    Coin someCoin;\n+    COutPoint outPoint;\n+    BOOST_CHECK_EQUAL(vBacked.GetCoin(outPoint, someCoin), false);\n+    BOOST_CHECK_EQUAL(vBacked.HaveCoin(outPoint), false);\n+    BOOST_CHECK_EQUAL(vBacked.GetBestBlock(), uint256());\n+    BOOST_CHECK_EQUAL(vBacked.GetHeadBlocks().size(), 0);\n+\n+    CCoinsMap map;\n+    uint256 someHashBlock;\n+    BOOST_CHECK_EQUAL(vBacked.BatchWrite(map, someHashBlock), false);\n+    BOOST_CHECK(vBacked.Cursor() == nullptr);\n+    BOOST_CHECK_EQUAL(vBacked.EstimateSize(), 0);\n+\n+    // Provide an alternative implementation of CCoinsView with the opposite behavior\n+    // and test that CCoinsViewBackend behaves accordingly\n+    class Opposite : public CCoinsView\n+    {\n+        bool GetCoin(const COutPoint& outpoint, Coin& coin) const override { return true; }\n+        bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) override { return true; }\n+        CCoinsViewCursor* Cursor() const override { return (CCoinsViewCursor*)this; }\n+        size_t EstimateSize() const override { return 1; }\n+\n+        uint256 GetBestBlock() const override\n+        {\n+            return uint256S(\"zero\");\n+        }\n+\n+        std::vector<uint256> GetHeadBlocks() const override\n+        {\n+            std::vector<uint256> vector;\n+            vector.push_back(uint256S(\"one\"));\n+            return vector;\n+        }\n+    };\n+\n+    Opposite opposite;\n+    vBacked.SetBackend(opposite);\n+    BOOST_CHECK_EQUAL(vBacked.GetCoin(outPoint, someCoin), true);\n+    BOOST_CHECK_EQUAL(vBacked.HaveCoin(outPoint), true);\n+    BOOST_CHECK_EQUAL(vBacked.GetBestBlock(), uint256S(\"zero\"));\n+    BOOST_CHECK_EQUAL(vBacked.GetHeadBlocks().size(), 1);\n+    BOOST_CHECK_EQUAL(vBacked.BatchWrite(map, someHashBlock), true);\n+    BOOST_CHECK_EQUAL((Opposite*)vBacked.Cursor(), &opposite);\n+    BOOST_CHECK_EQUAL(vBacked.EstimateSize(), 1);\n+}\n+\n static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n \n // This is a large randomized insert/remove simulation test on a variable-size"
      }
    ]
  }
]