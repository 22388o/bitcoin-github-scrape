[
  {
    "sha": "7759aa23d1db88230b67703f8e3235afa9225c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzU5YWEyM2QxZGI4ODIzMGI2NzcwM2Y4ZTMyMzVhZmE5MjI1YzA4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-21T15:53:07Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-03T16:22:44Z"
      },
      "message": "Save watch only key timestamps when reimporting keys\n\nPreviously if an existing watch only key was reimported with a new timestamp,\nthe new timestamp would not be saved in the key metadata, and would not be used\nto update the wallet nTimeFirstKey value (which could cause rescanning to start\nat the wrong point and miss transactions).\n\nIssue was pointed out by Jonas Schnelli <dev@jonasschnelli.ch> in\nhttps://github.com/bitcoin/bitcoin/pull/9108#issuecomment-279715550",
      "tree": {
        "sha": "3d1646ccf097bc3130c9c87b5baeb683cf1ad68e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d1646ccf097bc3130c9c87b5baeb683cf1ad68e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7759aa23d1db88230b67703f8e3235afa9225c08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7759aa23d1db88230b67703f8e3235afa9225c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7759aa23d1db88230b67703f8e3235afa9225c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7759aa23d1db88230b67703f8e3235afa9225c08/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53c300fb525ab3e21206d47d8353f5246b4f24d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c300fb525ab3e21206d47d8353f5246b4f24d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53c300fb525ab3e21206d47d8353f5246b4f24d1"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 24,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b6a533502a29a98c79434421bfa227f8e88a60cc",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7759aa23d1db88230b67703f8e3235afa9225c08/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7759aa23d1db88230b67703f8e3235afa9225c08/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=7759aa23d1db88230b67703f8e3235afa9225c08",
        "patch": "@@ -314,6 +314,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n@@ -409,6 +410,24 @@ def run_test (self):\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n+\n+        # Importing existing watch only address with new timestamp should replace saved timestamp.\n+        assert_greater_than(timestamp, watchonly_timestamp)\n+        print(\"Should replace previously saved watch only timestamp.\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": watchonly_address,\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n+        watchonly_timestamp = timestamp\n+\n+\n         # restart nodes to check for proper serialization/deserialization of watch only address\n         stop_nodes(self.nodes)\n         self.nodes = start_nodes(2, self.options.tmpdir)"
      },
      {
        "sha": "218a8aefb444468b169556102184ff028b5508a3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7759aa23d1db88230b67703f8e3235afa9225c08/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7759aa23d1db88230b67703f8e3235afa9225c08/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7759aa23d1db88230b67703f8e3235afa9225c08",
        "patch": "@@ -745,7 +745,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n             pwallet->MarkDirty();\n \n-            if (!pwallet->HaveWatchOnly(redeemScript) && !pwallet->AddWatchOnly(redeemScript, timestamp)) {\n+            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -762,7 +762,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n             pwallet->MarkDirty();\n \n-            if (!pwallet->HaveWatchOnly(redeemDestination) && !pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n+            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -855,7 +855,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n                 pwallet->MarkDirty();\n \n-                if (!pwallet->HaveWatchOnly(pubKeyScript) && !pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n+                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -873,7 +873,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n                 pwallet->MarkDirty();\n \n-                if (!pwallet->HaveWatchOnly(scriptRawPubKey) && !pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n+                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -947,7 +947,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n                 pwallet->MarkDirty();\n \n-                if (!pwallet->HaveWatchOnly(script) && !pwallet->AddWatchOnly(script, timestamp)) {\n+                if (!pwallet->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n "
      }
    ]
  }
]