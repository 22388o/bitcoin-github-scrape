DrahtBot,2020-02-07 09:42:54,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18857 (build: avoid repetitions when enabling warnings in configure.ac by vasild)\n\nIf you consider this pull request im",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-583311921,583311921,
laanwj,2020-02-07 12:21:10,Concept ACK. If we can do without compiler-specific extensions we should.,https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-583367560,583367560,
Empact,2020-02-07 15:29:31,Concept ACK 👍 ,https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-583453287,583453287,
Empact,2020-02-07 16:38:47,"Here's a set of changes to remove the `Wgnu-zero-variadic-macro-arguments` cases:\nhttps://github.com/fanquake/bitcoin/compare/no_gnu_extensions...Empact:2020-02-no_gnu_extensions",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-583489854,583489854,
fanquake,2020-02-10 12:11:48,"> Here's a set of changes\n\nThanks, I've taken some of those changes.",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-584093413,584093413,
theuni,2020-02-10 19:52:34,"Concept ACK, this was for sure the intent of [noext].",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-584319368,584319368,
practicalswift,2020-02-11 06:43:29,Concept ACK -- inside the standard is better than outside the standard,https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-584497472,584497472,
fanquake,2020-02-11 08:07:39,"Rebased on master now that #18087 is in, fixed up the sanitizer issue in prevector (bad rebase) and re-ordered some commits.",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-584517777,584517777,
practicalswift,2020-02-11 12:50:24,ACK 6af7c41771c2b3adeffe81ce06a70e0dbbef5360 -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-584619186,584619186,
elichai,2020-03-01 13:21:54,"Isn't `__COUNTER__` a GNU extension too?\nhttps://renenyffenegger.ch/notes/development/languages/C-C-plus-plus/preprocessor/macros/predefined/__COUNTER__\nhttps://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html\n\nsaw it here again: https://github.com/bitcoin/bitcoin/pull/18234/commits/3cb26649716b2460dae44404f7ce2bd4715e0646#diff-998357bc40c89d644815a6fd52c99c9fR213\n\nWe can proba",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-593096666,593096666,
fanquake,2020-03-20 04:07:45,"> Isn't __COUNTER__ a GNU extension too?\n\nFrom what I can find, yes `__COUNTER__` (added to GCC in [4.3](https://gcc.gnu.org/gcc-4.3/changes.html)) is an extension, however it's supported by [GCC](https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html),  [Clang](https://clang.llvm.org/docs/LanguageExtensions.html), [MSVC](https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-m",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-601516461,601516461,
fanquake,2020-04-30 10:04:10,Rebased after #18591.,https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-621737735,621737735,
vasild,2020-05-04 06:00:11,"utACK 0ae8f18df\n\nIf we currently do not see any warnings due to the newly introduced `-Wgnu` then I would suggest to also add `-Werror=gnu` (if compiling with `--enable-werror`). So that a newly introduced warning in the future does not sneak - printed, but unnoticed in CI logs.",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-623272939,623272939,
dongcarl,2020-05-04 17:20:02,"ACK 0ae8f18dfe143051fec6ae10ea7df10142e3ff2f\n\n-----\n\nRead relevant gcc docs, built, and ran tests.",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-623594115,623594115,
practicalswift,2020-05-04 18:24:06,"ACK 0ae8f18dfe143051fec6ae10ea7df10142e3ff2f -- diff looks correct\n\nAgree with @vasild about `-Werror=gnu` as part of `--enable-werror`. May also be done in a follow-up.",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-623627403,623627403,
MarcoFalke,2020-05-04 22:53:47,ACK 0ae8f18dfe143051fec6ae10ea7df10142e3ff2f,https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-623749847,623749847,
practicalswift,2020-05-05 09:58:13,@vasild Would you mind taking on the `-Werror=gnu` thing? :),https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-623963689,623963689,
vasild,2020-05-05 12:52:45,"> @vasild Would you mind taking on the `-Werror=gnu` thing? :)\n\nHere it is: https://github.com/bitcoin/bitcoin/pull/18887 build: enable -Werror=gnu",https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-624037006,624037006,
MarcoFalke,2020-02-11 12:55:21,Why is this change needed?,https://github.com/bitcoin/bitcoin/pull/18088#discussion_r377616141,377616141,src/logging.h
Empact,2020-02-11 12:58:50,"Added this to ensure the FlushStateToDisk call would be logged even if no categories were active, which I believe is consistent with the current behavior - though I am not certain it is necessary.",https://github.com/bitcoin/bitcoin/pull/18088#discussion_r377617932,377617932,src/logging.h
laanwj,2020-02-26 17:15:22,"I am not convinced at the moment that this is necessary. `Timer::Log` has the following implementation:\n```c++\n    void Log(const std::string& msg)\n    {\n        const std::string full_msg = this->LogMsg(msg);\n\n        if (m_log_category == BCLog::LogFlags::ALL) {\n            LogPrintf(""%s\n"", full_msg);\n        } else {\n            LogPrint(m_log_category, ""%s\n"", full_msg);\n ",https://github.com/bitcoin/bitcoin/pull/18088#discussion_r384640391,384640391,src/logging.h
fanquake,2020-03-20 04:07:56,I've removed this change.,https://github.com/bitcoin/bitcoin/pull/18088#discussion_r395431533,395431533,src/logging.h
MarcoFalke,2020-03-20 13:25:24,"I don't really like leaking this private implementation detail of the log flags into the caller code. I'd slightly prefer a type-safe way, that also better documents what is happening.\n\nWhat about making this argument optional not with VA_ARGS, but with an `Optional<BCLog::LogFlags>`? Passing a nullopt or `{}` will unconditionally log, whereas passing a log flag will only log to that category ",https://github.com/bitcoin/bitcoin/pull/18088#discussion_r395633197,395633197,src/validation.cpp
Empact,2020-03-20 22:51:06,"We could drop it altogether as this is the only call to `LOG_TIME_SECONDS`:\n\n```diff\ndiff --git a/src/logging.h b/src/logging.h\nindex 5d8ec33392..b2fde1b9ea 100644\n--- a/src/logging.h\n+++ b/src/logging.h\n@@ -178,7 +178,7 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n // evaluating arguments when logging for the category is not enabled.\n #define LogPrint(ca",https://github.com/bitcoin/bitcoin/pull/18088#discussion_r395922653,395922653,src/validation.cpp
Empact,2020-03-20 23:06:21,Updated this branch: https://github.com/fanquake/bitcoin/compare/no_gnu_extensions...Empact:2020-02-no_gnu_extensions,https://github.com/bitcoin/bitcoin/pull/18088#discussion_r395926421,395926421,src/validation.cpp
fanquake,2020-03-23 04:13:57,"> We could drop it altogether\n\nI've updated to do this.",https://github.com/bitcoin/bitcoin/pull/18088#discussion_r396205238,396205238,src/validation.cpp
MarcoFalke,2020-03-23 12:26:03,"So while the macro name indicates the only difference is the precision, they are functionally also different to the logging behaviour: One always logs, the other must accept a category. Not sure if it makes sense to keep the names so similar then.",https://github.com/bitcoin/bitcoin/pull/18088#discussion_r396412533,396412533,src/logging/timer.h
fanquake,2020-04-27 07:16:41,Ok. I've renamed `LOG_TIME_MILLIS` to `LOG_TIME_MILLIS_WITH_CATEGORY`.,https://github.com/bitcoin/bitcoin/pull/18088#discussion_r415568345,415568345,src/logging/timer.h
