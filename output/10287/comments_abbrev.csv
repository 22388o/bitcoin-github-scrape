jimmysong,2017-05-02T02:12:07Z,"@EthanHeilman @jnewbery, I've tested a few combinations, and leaving out octet3 works for the current code I have. It's almost exactly the same as before. Let me know what you guys think.",https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-298480442,298480442,
EthanHeilman,2017-05-02T14:06:16Z,"Removing octet3 seems reasonable and the code looks better especially when with the slick BOOST_CHECK_EQUAL.\n\nI've been regretting numbering these tests, e.g. ""Test 1: , Test: 2 ..."", for a while since adding new tests requires renumbering them or using decimals as done here:\n```cpp\n// Test 6.5: AddrMan::Add multiple addresses works as expected\n```\nCould you do a commit which just remo",https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-298645748,298645748,
jimmysong,2017-05-02T14:09:06Z,"@EthanHeilman sure, will work on changing to BOOST_CHECK_EQUALS and taking out test numbers as soon as this one gets merged.",https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-298646490,298646490,
jnewbery,2017-05-02T15:38:48Z,"> Could you do a commit which just removes the numbers so ""Test 1:"" becomes ""Test: ""?\n\nAlternatively, you could replace the comments with checkpoints:\nhttp://www.boost.org/doc/libs/1_64_0/libs/test/doc/html/boost_test/test_output/test_tools_support_for_logging/checkpoints.html . I'm not sure what other people would think about this. There aren't `BOOST_TEST_CHECKPOINT`s in the unit tests.",https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-298672947,298672947,
jimmysong,2017-05-02T18:02:06Z,"nits addressed, squashed and rebased.",https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-298713279,298713279,
jnewbery,2017-05-02T19:18:52Z,tested ACK ed36de59e484ecdc22f464948d08a94a8b7fadbb,https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-298733913,298733913,
MarcoFalke,2017-05-09T11:04:33Z,utACK ed36de59e484ecdc22f464948d08a94a8b7fadbb,https://github.com/bitcoin/bitcoin/pull/10287#issuecomment-300131286,300131286,
jnewbery,2017-05-01T14:41:43Z,"This code isn't at all doing what I expected. On first looking, I assumed it was slicing off 8 bits at a time in order to format a 32 bit int as an ipv4 address, ie I was expecting this:\n\n```\nint octet1 = i % 256;\nint octet2 = i >> 8 % 256;\nint octet3 = i >> 16 % 256;\n```\n\nbut in fact it's effectively doing this:\n\n```\nint octet1 = i % 256;\nint octet2 = i >> 8 % 256;\nint o",https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114133051,114133051,src/test/addrman_tests.cpp
jimmysong,2017-05-01T14:48:22Z,"I was expecting the same until I tried to refactor it. I can't speak to the original intent, but @EthanHeilman can maybe give us a clue as to what it was?\nAnyway it turns out that the addresses are going into a hash table and any adjustment of octet3 in any way changes the numbers in lines 415-417 (vAddr size and addrman size). Thankfully, the hash table is deterministic, but I wanted minimal di",https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114134016,114134016,src/test/addrman_tests.cpp
EthanHeilman,2017-05-01T18:26:02Z,"@jimmysong It just makes it less likely we will have a collision when adding addresses.\n\nChanging\n```cpp\nint octet3 = (i / (256 * 2)) % 256;\n```\nto \n```cpp\nint octet3 = (i / (256 * 256)) % 256;\n```\nwould cause all of these generated addresses to map to the same source group in the new table as they would all have the same \16. \n\nCurrent behavior is intended to lower the cha",https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114171284,114171284,src/test/addrman_tests.cpp
jnewbery,2017-05-01T19:17:11Z,Can this be achieved by fixing octet2 to zero and then setting octet3 to `i >> 8 % 256`?,https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114181182,114181182,src/test/addrman_tests.cpp
EthanHeilman,2017-05-01T20:30:11Z,"Yes, that would be a better way of doing it.",https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114195067,114195067,src/test/addrman_tests.cpp
jnewbery,2017-05-01T20:40:57Z,"Not sure if it's *better*, but I think it would be less confusing :)",https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114197070,114197070,src/test/addrman_tests.cpp
EthanHeilman,2017-05-01T21:16:32Z,Less confusing _is_ better. =),https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114203929,114203929,src/test/addrman_tests.cpp
jnewbery,2017-05-02T17:35:55Z,nit: I still think this is clearer if you bitshift and modulo 256.,https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114377907,114377907,src/test/addrman_tests.cpp
