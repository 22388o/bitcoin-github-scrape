[
  {
    "sha": "ed36de59e484ecdc22f464948d08a94a8b7fadbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDM2ZGU1OWU0ODRlY2RjMjJmNDY0OTQ4ZDA4YTk0YThiN2ZhZGJi",
    "commit": {
      "author": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-27T01:15:07Z"
      },
      "committer": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-05-02T18:01:39Z"
      },
      "message": "[tests] Update Unit Test for addrman.h/addrman.cpp\n\nAdd test for adding multiple addresses to address manager\nClean up unnecessary modulo operations\nAdd test for GetNewBucket's alternate method signature",
      "tree": {
        "sha": "85bdd01e3bcd98c0ba403913a6a27e74fe773730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85bdd01e3bcd98c0ba403913a6a27e74fe773730"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed36de59e484ecdc22f464948d08a94a8b7fadbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed36de59e484ecdc22f464948d08a94a8b7fadbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed36de59e484ecdc22f464948d08a94a8b7fadbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed36de59e484ecdc22f464948d08a94a8b7fadbb/comments",
    "author": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3e38477e30abd9dd0e24a4d612126117f7793c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3e38477e30abd9dd0e24a4d612126117f7793c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3e38477e30abd9dd0e24a4d612126117f7793c"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a1194bae3baf5b18c7fe690ec9d0fb7489276c95",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed36de59e484ecdc22f464948d08a94a8b7fadbb/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed36de59e484ecdc22f464948d08a94a8b7fadbb/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=ed36de59e484ecdc22f464948d08a94a8b7fadbb",
        "patch": "@@ -91,29 +91,36 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n     // Test 2: Does Addrman::Add work as expected.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret1 = addrman.Select();\n     BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n \n     // Test 3: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n     CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n-    addrman.Add(CAddress(addr1_dup, NODE_NONE), source);\n+    BOOST_CHECK(!addrman.Add(CAddress(addr1_dup, NODE_NONE), source));\n     BOOST_CHECK(addrman.size() == 1);\n \n \n     // Test 5: New table has one addr and we add a diff addr we should\n     //  have two addrs.\n     CService addr2 = ResolveService(\"250.1.1.2\", 8333);\n-    addrman.Add(CAddress(addr2, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n     BOOST_CHECK(addrman.size() == 2);\n \n     // Test 6: AddrMan::Clear() should empty the new table.\n     addrman.Clear();\n     BOOST_CHECK(addrman.size() == 0);\n     CAddrInfo addr_null2 = addrman.Select();\n     BOOST_CHECK(addr_null2.ToString() == \"[::]:0\");\n+\n+    // Test 6.5: AddrMan::Add multiple addresses works as expected\n+    std::vector<CAddress> vAddr;\n+    vAddr.push_back(CAddress(ResolveService(\"250.1.1.3\", 8333), NODE_NONE));\n+    vAddr.push_back(CAddress(ResolveService(\"250.1.1.4\", 8333), NODE_NONE));\n+    BOOST_CHECK(addrman.Add(vAddr, source));\n+    BOOST_CHECK(addrman.size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n@@ -398,9 +405,8 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test 25: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;\n-        int octet2 = (i / 256) % 256;\n-        int octet3 = (i / (256 * 2)) % 256;\n-        std::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".\" + boost::to_string(octet3) + \".23\";\n+        int octet2 = i >> 8 % 256;\n+        std::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".1.23\";\n         CAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n         \n         // Ensure that for all addrs in addrman, isTerrible == false.\n@@ -412,10 +418,10 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     std::vector<CAddress> vAddr = addrman.GetAddr();\n \n     size_t percent23 = (addrman.size() * 23) / 100;\n-    BOOST_CHECK(vAddr.size() == percent23);\n-    BOOST_CHECK(vAddr.size() == 461);\n+    BOOST_CHECK_EQUAL(vAddr.size(), percent23);\n+    BOOST_CHECK_EQUAL(vAddr.size(), 461);\n     // (Addrman.size() < number of addresses added) due to address collisions.\n-    BOOST_CHECK(addrman.size() == 2007);\n+    BOOST_CHECK_EQUAL(addrman.size(), 2006);\n }\n \n \n@@ -493,7 +499,9 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     uint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n     uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n \n+    // Test 29.5: Make sure the buckets are what we expect\n     BOOST_CHECK(info1.GetNewBucket(nKey1) == 786);\n+    BOOST_CHECK(info1.GetNewBucket(nKey1, source1) == 786);\n \n     // Test 30: Make sure key actually randomizes bucket placement. A fail on\n     //  this test could be a security issue."
      }
    ]
  }
]