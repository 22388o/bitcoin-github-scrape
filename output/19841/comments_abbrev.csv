sipa,2020-08-30 20:02:02,Ping @vasild.,https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683463838,683463838,
jonatack,2020-08-30 20:15:35,Nice!,https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683465384,683465384,
DrahtBot,2020-08-31 01:17:20,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #19055 (Add MuHash3072 implementation by fjahr)\n* #18014 (l",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683502823,683502823,
fanquake,2020-08-31 02:25:49,Concept ACK on this approach to adding a Keccak/SHA3 implementation.,https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683517258,683517258,
naumenkogs,2020-08-31 07:22:33,Concept ACK as a requirement for Torv3.,https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683611775,683611775,
practicalswift,2020-08-31 09:46:44,"Concept ACK\n\nNice simple implementation: will fuzz it to see if I'm able to reject that it is as robust as it looks :)",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683679414,683679414,
laanwj,2020-08-31 13:31:31,"This is a nice compact implementation of KeccaK/SHA3 (even after the unrolling).\nCode review ACK 2263ab190e625f81d154ce6581f37adcdb31ef8b",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683779932,683779932,
sipa,2020-08-31 17:26:17,"@vasild FWIW, you should be able to use `hasher.Write(MakeUCharSpan("".onion checksum""))`.\n\nRegarding speed: the SHA256 implementations we have take advantage of SSE4/AVX2/SHA-NI instructions when available. I didn't use any of those for SHA3 as it seems unnecessary for its current use case. In an optimized build, but with HW accelerations for SHA256 disabled, the SHA3 code here is very close t",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683918636,683918636,
vasild,2020-08-31 19:37:12,"Right, all is good. And SHA3-256 [is supposed to be slower than SHA256](https://crypto.stackexchange.com/questions/68307/what-is-the-difference-between-sha-3-and-sha-256).",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-683991055,683991055,
laanwj,2020-09-01 09:10:39,"> Verdict: likely it works correctly and there may be room for performance improvement, but this is not relevant for the TORv3 code.\n\nAs it is not relevant to our use case, I don't think this is worth it. I wouldn't like to see the added complication of assembly implementations and special intrinsics just for computing an address checksum (it would be different if it was for *packet* checksums",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-684628931,684628931,
laanwj,2020-09-03 10:14:02,"@theStack Agree about `array`, it doesn't seem to be used at all. Wouldnt' stdint.h be necessary for sized integer types such as `uint32_t`? (yes, it's probably included indirectly somehow, but we like to be explicit about dependencies)",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-686392527,686392527,
theStack,2020-09-03 10:37:50,"> @theStack Agree about `array`, it doesn't seem to be used at all. Wouldnt' stdint.h be necessary for sized integer types such as `uint32_t`? (yes, it's probably included indirectly somehow, but we like to be explicit about dependencies)\n\n @laanwj: Oh indeed, you are right. For some reason I forgot that sized integer types and `size_t` are not integral part of the language but defined in head",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-686403096,686403096,
sipa,2020-09-03 23:10:31,I added `<array>` to get access to `std::begin` and `std::end`.,https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-686809308,686809308,
laanwj,2020-09-04 10:09:00,"> I forgot that sized integer types and size_t are not integral part of the language but defined in headers... man_facepalming \n\nHaah. I try to forget that sometimes â€¦\n\n> I added <array> to get access to std::begin and std::end.\n\nOh, of course!\n",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-687055182,687055182,
theStack,2020-09-05 21:53:35,"> I added `<array>` to get access to `std::begin` and `std::end`.\n\nAh, I wasn't aware those are declared in `<array>`. Sorry for the noise.\n\nFor reviewing this PR, I thought it would be nice to validate this implementation against a standard one with random input data  (in addition to only the test vectors). I decided for python's `hashlib` which has `sha3_256` available since Version 3.6.",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-687667841,687667841,
elichai,2020-09-06 19:46:53,I like how compact this is :),https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-687882850,687882850,
sipa,2020-09-07 01:42:16,"Improved the tests and comments a bit.\n\n@theStack Nice, that's pretty neat!\n\n@elichai It was much more compact before unrolling, but I couldn't resist a 4.9x speedup with such a simple change (even though it really doesn't matter here...).\n\n@practicalswift You're of course welcome to do any testing you like, but I don't think fuzzing for *robustness* is all that useful here. The Keccak",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-687971355,687971355,
elichai,2020-09-07 10:29:47,"> @elichai It was much more compact before unrolling, but I couldn't resist a 4.9x speedup with such a simple change (even though it really doesn't matter here...).\n\nhaha, you could instead add `#pragma unroll 5/24/25` :P\n",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-688233025,688233025,
sipa,2020-09-07 19:01:32,"> haha, you could instead add #pragma unroll 5/24/25 :P\n\nI tried that. Numbers I get:\n\n|             ns/byte |              byte/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|               28.88 |       34,630,178.09 |    1.0% |      0.33 |  3f01ddb01bfffd49dfa131898d1c674ac5d0ac99 (before unrolling)\n|            ",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-688476563,688476563,
elichai,2020-09-08 08:42:34,"> I prefer keeping the code as-is. It's still very readable (I think), is platform neutral, and has close to ideal performance.\n\nYeah it probably won't work on MSVC",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-688717559,688717559,
practicalswift,2020-09-10 05:43:28,"ACK ab654c7d587b33d62230394663020439f80cee28 -- patch looks correct and no sanitizer complaints when doing some basic fuzz testing of the added code (remember: **don't trust: fuzz!**) :)\n",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-689999386,689999386,
laanwj,2020-09-10 13:46:51,"Thanks @theStack. I have run your cross-verification for a while here as well, no errors came up.\n\nI would prefer to keep the code as-is, with an explicit unroll. Even though a pragma would make the code shorter, it's non standard C++ functionality.\n\nre-ACK ab654c7d587b33d62230394663020439f80cee28",https://github.com/bitcoin/bitcoin/pull/19841#issuecomment-690299906,690299906,
