[
  {
    "sha": "ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjljMzQyMzdhYjdiMDU2Mzk0ZTBiZDFmN2NiMTMxZmZkOTU3NTRj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-08T08:20:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-31T01:37:23Z"
      },
      "message": "release: remove gitian",
      "tree": {
        "sha": "15c3b14e28d643acd1382e0f69d7f89081daf6f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15c3b14e28d643acd1382e0f69d7f89081daf6f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEth9MACgkQLuufXMCV\nJsHzmA/+I7zYxWNzy7pnViGZv37xOUluuxKHODbE37ufTCocFLa+Jpp64CkrIh+j\nFzokHOrf3I3Iv/ySTgI6IAcCPRhI9irMMyyD2GXgbhuaOJu8s9b2y0Upc+OXjK0P\n9Yyj1mIpVM8rxbhpJtu3Ois65MSn56gpaMALa6VBwAxMLFXOJFfzXbwmlMzB0Btj\nvJ8eS6kOsW+fJxEpa2edgaGNrAqg5OrCYzBwXBLvq6d93yxj9Jwz91RLvFCPHTh2\nPbMHqMhEdItZUckxb/QYxjSwuPC32lniRSCJ4XAKtm/5lk+dkWfWv9RKlpuPbKgy\niZo7uvwBWqkF32ZhPWT9sC/VMENuQWNZZPDEuVLcpSQbNRQf+DRt7Wh0C3TOibJu\nimiSY1FeVp3srckThHj3u64tG/x2NMDuC4s714skNqV2BBQG9/dQuH+Q3q29uLIL\nvqpIhzsBG3+oaZ/J1F3X0kfFh5ZeFN6v/gmd5JqlXkNseUX4/aaSWxftxOrW9+1v\n5/gLoEx7TMcwKwJdL6sqDDUi1CMjm9QtIV/Lpfg5N2K7yFFL+HqtvdgbeUL74Acj\nwUM95Z5jaTkwZ9TKMMYMe2XVQnHgSRewV8Q75McouyaFpyKw/Xig73yIhTRl6GKo\nG16W90DNDZMuGn11/xYvghmLo3mLkgIoK/hABCcvlhC4/Bfix+0=\n=7uUZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 15c3b14e28d643acd1382e0f69d7f89081daf6f6\nparent 7be143a960e2bb9ac81144f55c45731c1bb209c5\nauthor fanquake <fanquake@gmail.com> 1625732401 +0800\ncommitter fanquake <fanquake@gmail.com> 1630373843 +0800\n\nrelease: remove gitian\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be143a960e2bb9ac81144f55c45731c1bb209c5"
      }
    ],
    "stats": {
      "total": 904,
      "additions": 10,
      "deletions": 894
    },
    "files": [
      {
        "sha": "0caacec440f4cce72200c2f42b58e58d10a2219e",
        "filename": "REVIEWERS",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/REVIEWERS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/REVIEWERS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/REVIEWERS?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -41,7 +41,6 @@\n /doc/dependencies.md                        @fanquake\n /doc/developer-notes.md                     @laanwj\n /doc/files.md                               @hebasto\n-/doc/gitian-building.md                     @laanwj\n /doc/reduce-memory.md                       @fanquake\n /doc/reduce-traffic.md                      @jonasschnelli\n /doc/release-process.md                     @laanwj\n@@ -77,8 +76,7 @@\n /contrib/devtools/test-security-check.py    @fanquake\n /contrib/devtools/symbol-check.py           @fanquake\n \n-# Gitian/Guix\n-/contrib/gitian-build.py                    @hebasto\n+# Guix\n /contrib/guix/                              @dongcarl\n \n # Compatibility"
      },
      {
        "sha": "310e96497389622210f65a79bdb7691b780a6def",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_macos_cross\n-export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to macos (Focal is used in the gitian build as well)\n+export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to macos\n export HOST=x86_64-apple-darwin18\n export PACKAGES=\"cmake imagemagick librsvg2-bin libz-dev libtiff-tools libtinfo5 python3-setuptools xorriso\"\n export XCODE_VERSION=12.1"
      },
      {
        "sha": "4dff335e4e51e75a6ec68fceb19790e3677db23d",
        "filename": "ci/test/00_setup_env_win64.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/ci/test/00_setup_env_win64.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/ci/test/00_setup_env_win64.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_win64.sh?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_win64\n-export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to win64 (Focal is used in the gitian build as well)\n+export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to win64\n export HOST=x86_64-w64-mingw32\n export DPKG_ADD_ARCH=\"i386\"\n export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64 wine32 file\""
      },
      {
        "sha": "ae1372e95def350c530c0d6e9ffed05e13f5404c",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -26,18 +26,12 @@ The [Debian](/contrib/debian) subfolder contains the copyright file.\n \n All other packaging related files can be found in the [bitcoin-core/packaging](https://github.com/bitcoin-core/packaging) repository.\n \n-### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n-Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n-\n ### [Builder keys](/contrib/builder-keys)\n PGP keys used for signing Bitcoin Core [release](/doc/release-process.md) results.\n \n ### [MacDeploy](/contrib/macdeploy) ###\n Scripts and notes for Mac builds.\n \n-### [Gitian-build](/contrib/gitian-build.py) ###\n-Script for running full Gitian builds.\n-\n Test and Verify Tools\n ---------------------\n "
      },
      {
        "sha": "afbad096c4b97c9648acbd899fce9ec7f81a7bc6",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -98,17 +98,17 @@ Perform basic security checks on a series of executables.\n symbol-check.py\n ===============\n \n-A script to check that the executables produced by gitian only contain\n+A script to check that release executables only contain\n certain symbols and are only linked against allowed libraries.\n \n For Linux this means checking for allowed gcc, glibc and libstdc++ version symbols.\n This makes sure they are still compatible with the minimum supported distribution versions.\n \n For macOS and Windows we check that the executables are only linked against libraries we allow.\n \n-Example usage after a gitian build:\n+Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../path/to/executables -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n \n If no errors occur the return value will be 0 and the output will be empty.\n "
      },
      {
        "sha": "5df87d9e70cb79ae65f4d13a492a95fac71980cf",
        "filename": "contrib/gitian-build.py",
        "status": "removed",
        "additions": 0,
        "deletions": 263,
        "changes": 263,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,263 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-import argparse\n-import os\n-import subprocess\n-import sys\n-\n-def setup():\n-    global args, workdir\n-    programs = ['ruby', 'git', 'make', 'wget', 'curl']\n-    if args.kvm:\n-        programs += ['apt-cacher-ng', 'python-vm-builder', 'qemu-kvm', 'qemu-utils']\n-    elif args.docker:\n-        if not os.path.isfile('/lib/systemd/system/docker.service'):\n-            dockers = ['docker.io', 'docker-ce']\n-            for i in dockers:\n-                return_code = subprocess.call(['sudo', 'apt-get', 'install', '-qq', i])\n-                if return_code == 0:\n-                    break\n-            if return_code != 0:\n-                print('Cannot find any way to install Docker.', file=sys.stderr)\n-                sys.exit(1)\n-    else:\n-        programs += ['apt-cacher-ng', 'lxc', 'debootstrap']\n-    subprocess.check_call(['sudo', 'apt-get', 'install', '-qq'] + programs)\n-    if not os.path.isdir('gitian.sigs'):\n-        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n-    if not os.path.isdir('bitcoin-detached-sigs'):\n-        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n-    if not os.path.isdir('gitian-builder'):\n-        subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n-    if not os.path.isdir('bitcoin'):\n-        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin/bitcoin.git'])\n-    os.chdir('gitian-builder')\n-    make_image_prog = ['bin/make-base-vm', '--suite', 'focal', '--arch', 'amd64']\n-    if args.docker:\n-        make_image_prog += ['--docker']\n-    elif not args.kvm:\n-        make_image_prog += ['--lxc', '--disksize', '13000']\n-    subprocess.check_call(make_image_prog)\n-    os.chdir(workdir)\n-    if args.is_focal and not args.kvm and not args.docker:\n-        subprocess.check_call(['sudo', 'sed', '-i', 's/lxcbr0/br0/', '/etc/default/lxc-net'])\n-        print('Reboot is required')\n-        sys.exit(0)\n-\n-def build():\n-    global args, workdir\n-\n-    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n-    print('\\nBuilding Dependencies\\n')\n-    os.chdir('gitian-builder')\n-    os.makedirs('inputs', exist_ok=True)\n-\n-    subprocess.check_call(['wget', '-O', 'inputs/osslsigncode-2.0.tar.gz', 'https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz'])\n-    subprocess.check_call([\"echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\"], shell=True)\n-    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n-\n-    if args.linux:\n-        print('\\nCompiling ' + args.version + ' Linux')\n-        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n-        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n-\n-    if args.windows:\n-        print('\\nCompiling ' + args.version + ' Windows')\n-        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n-        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/', shell=True)\n-        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n-\n-    if args.macos:\n-        print('\\nCompiling ' + args.version + ' MacOS')\n-        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n-        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/', shell=True)\n-        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n-\n-    os.chdir(workdir)\n-\n-    if args.commit_files:\n-        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n-        os.chdir('gitian.sigs')\n-        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n-        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n-        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n-        subprocess.check_call(['git', 'commit', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n-        os.chdir(workdir)\n-\n-def sign():\n-    global args, workdir\n-    os.chdir('gitian-builder')\n-\n-    if args.windows:\n-        print('\\nSigning ' + args.version + ' Windows')\n-        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n-        subprocess.check_call(['bin/gbuild', '--skip-image', '--upgrade', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n-        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n-\n-    if args.macos:\n-        print('\\nSigning ' + args.version + ' MacOS')\n-        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n-        subprocess.check_call(['bin/gbuild', '--skip-image', '--upgrade', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n-        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n-\n-    os.chdir(workdir)\n-\n-    if args.commit_files:\n-        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n-        os.chdir('gitian.sigs')\n-        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n-        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n-        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n-        os.chdir(workdir)\n-\n-def verify():\n-    global args, workdir\n-    rc = 0\n-    os.chdir('gitian-builder')\n-\n-    print('\\nVerifying v'+args.version+' Linux\\n')\n-    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml']):\n-        print('Verifying v'+args.version+' Linux FAILED\\n')\n-        rc = 1\n-\n-    print('\\nVerifying v'+args.version+' Windows\\n')\n-    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml']):\n-        print('Verifying v'+args.version+' Windows FAILED\\n')\n-        rc = 1\n-\n-    print('\\nVerifying v'+args.version+' MacOS\\n')\n-    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml']):\n-        print('Verifying v'+args.version+' MacOS FAILED\\n')\n-        rc = 1\n-\n-    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n-    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml']):\n-        print('Verifying v'+args.version+' Signed Windows FAILED\\n')\n-        rc = 1\n-\n-    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n-    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml']):\n-        print('Verifying v'+args.version+' Signed MacOS FAILED\\n')\n-        rc = 1\n-\n-    os.chdir(workdir)\n-    return rc\n-\n-def main():\n-    global args, workdir\n-\n-    parser = argparse.ArgumentParser(description='Script for running full Gitian builds.')\n-    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n-    parser.add_argument('-p', '--pull', action='store_true', dest='pull', help='Indicate that the version argument is the number of a github repository pull request')\n-    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n-    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n-    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n-    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n-    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n-    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n-    parser.add_argument('-j', '--jobs', dest='jobs', default='2', help='Number of processes to use. Default %(default)s')\n-    parser.add_argument('-m', '--memory', dest='memory', default='2000', help='Memory to allocate in MiB. Default %(default)s')\n-    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n-    parser.add_argument('-d', '--docker', action='store_true', dest='docker', help='Use Docker instead of LXC')\n-    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Only works on Debian-based systems (Ubuntu, Debian)')\n-    parser.add_argument('-D', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n-    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n-    parser.add_argument('signer', nargs='?', help='GPG signer to sign each build assert file')\n-    parser.add_argument('version', nargs='?', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n-\n-    args = parser.parse_args()\n-    workdir = os.getcwd()\n-\n-    args.is_focal = b'focal' in subprocess.check_output(['lsb_release', '-cs'])\n-\n-    if args.kvm and args.docker:\n-        raise Exception('Error: cannot have both kvm and docker')\n-\n-    # Ensure no more than one environment variable for gitian-builder (USE_LXC, USE_VBOX, USE_DOCKER) is set as they\n-    # can interfere (e.g., USE_LXC being set shadows USE_DOCKER; for details see gitian-builder/libexec/make-clean-vm).\n-    os.environ['USE_LXC'] = ''\n-    os.environ['USE_VBOX'] = ''\n-    os.environ['USE_DOCKER'] = ''\n-    if args.docker:\n-        os.environ['USE_DOCKER'] = '1'\n-    elif not args.kvm:\n-        os.environ['USE_LXC'] = '1'\n-        if 'GITIAN_HOST_IP' not in os.environ.keys():\n-            os.environ['GITIAN_HOST_IP'] = '10.0.3.1'\n-        if 'LXC_GUEST_IP' not in os.environ.keys():\n-            os.environ['LXC_GUEST_IP'] = '10.0.3.5'\n-\n-    if args.setup:\n-        setup()\n-\n-    if args.buildsign:\n-        args.build = True\n-        args.sign = True\n-\n-    if not args.build and not args.sign and not args.verify:\n-        sys.exit(0)\n-\n-    args.linux = 'l' in args.os\n-    args.windows = 'w' in args.os\n-    args.macos = 'm' in args.os\n-\n-    # Disable for MacOS if no SDK found\n-    if args.macos and not os.path.isfile('gitian-builder/inputs/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz'):\n-        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n-        args.macos = False\n-\n-    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n-\n-    script_name = os.path.basename(sys.argv[0])\n-    if not args.signer:\n-        print(script_name+': Missing signer')\n-        print('Try '+script_name+' --help for more information')\n-        sys.exit(1)\n-    if not args.version:\n-        print(script_name+': Missing version')\n-        print('Try '+script_name+' --help for more information')\n-        sys.exit(1)\n-\n-    # Add leading 'v' for tags\n-    if args.commit and args.pull:\n-        raise Exception('Cannot have both commit and pull')\n-    args.commit = ('' if args.commit else 'v') + args.version\n-\n-    os.chdir('bitcoin')\n-    if args.pull:\n-        subprocess.check_call(['git', 'fetch', args.url, 'refs/pull/'+args.version+'/merge'])\n-        os.chdir('../gitian-builder/inputs/bitcoin')\n-        subprocess.check_call(['git', 'fetch', args.url, 'refs/pull/'+args.version+'/merge'])\n-        args.commit = subprocess.check_output(['git', 'show', '-s', '--format=%H', 'FETCH_HEAD'], universal_newlines=True, encoding='utf8').strip()\n-        args.version = 'pull-' + args.version\n-    print(args.commit)\n-    subprocess.check_call(['git', 'fetch'])\n-    subprocess.check_call(['git', 'checkout', args.commit])\n-    os.chdir(workdir)\n-\n-    os.chdir('gitian-builder')\n-    subprocess.check_call(['git', 'pull'])\n-    os.chdir(workdir)\n-\n-    if args.build:\n-        build()\n-\n-    if args.sign:\n-        sign()\n-\n-    if args.verify:\n-        os.chdir('gitian.sigs')\n-        subprocess.check_call(['git', 'pull'])\n-        os.chdir(workdir)\n-        sys.exit(verify())\n-\n-if __name__ == '__main__':\n-    main()"
      },
      {
        "sha": "330fbc041b31ac8f1a828f7eccca76f866cc51b7",
        "filename": "contrib/gitian-descriptors/assign_DISTNAME",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/assign_DISTNAME",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/assign_DISTNAME",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/assign_DISTNAME?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,12 +0,0 @@\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-# A helper script to be sourced into the gitian descriptors\n-\n-if RECENT_TAG=\"$(git describe --exact-match HEAD 2> /dev/null)\"; then\n-    VERSION=\"${RECENT_TAG#v}\"\n-else\n-    VERSION=\"$(git rev-parse --short=12 HEAD)\"\n-fi\n-DISTNAME=\"bitcoin-${VERSION}\""
      },
      {
        "sha": "e6dce7a8c664fc102b06f281eb1fc33a75670992",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 167,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,167 +0,0 @@\n----\n-name: \"bitcoin-core-linux-22\"\n-enable_cache: true\n-distro: \"ubuntu\"\n-suites:\n-- \"focal\"\n-architectures:\n-- \"amd64\"\n-packages:\n-# Common dependencies.\n-- \"autoconf\"\n-- \"automake\"\n-- \"binutils\"\n-- \"bison\"\n-- \"bsdmainutils\"\n-- \"ca-certificates\"\n-- \"curl\"\n-- \"faketime\"\n-- \"g++-8\"\n-- \"gcc-8\"\n-- \"git\"\n-- \"libtool\"\n-- \"patch\"\n-- \"pkg-config\"\n-- \"python3\"\n-- \"python3-pip\"\n-# Cross compilation HOSTS:\n-#  - arm-linux-gnueabihf\n-- \"binutils-arm-linux-gnueabihf\"\n-- \"g++-8-arm-linux-gnueabihf\"\n-#  - aarch64-linux-gnu\n-- \"binutils-aarch64-linux-gnu\"\n-- \"g++-8-aarch64-linux-gnu\"\n-#  - powerpc64-linux-gnu\n-- \"binutils-powerpc64-linux-gnu\"\n-- \"g++-8-powerpc64-linux-gnu\"\n-#  - powerpc64le-linux-gnu\n-- \"binutils-powerpc64le-linux-gnu\"\n-- \"g++-8-powerpc64le-linux-gnu\"\n-#  - riscv64-linux-gnu\n-- \"binutils-riscv64-linux-gnu\"\n-- \"g++-8-riscv64-linux-gnu\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n-  \"dir\": \"bitcoin\"\n-files: []\n-script: |\n-  set -e -o pipefail\n-\n-  WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu riscv64-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n-  FAKETIME_HOST_PROGS=\"gcc g++\"\n-  FAKETIME_PROGS=\"date ar ranlib nm\"\n-  HOST_CFLAGS=\"-O2 -g\"\n-  HOST_CXXFLAGS=\"-O2 -g\"\n-  HOST_LDFLAGS_BASE=\"-static-libstdc++ -Wl,-O2\"\n-\n-  export TZ=\"UTC\"\n-  export BUILD_DIR=\"$PWD\"\n-  mkdir -p ${WRAP_DIR}\n-  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n-    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n-    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n-    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n-  fi\n-\n-  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)\n-  function create_global_faketime_wrappers {\n-  for prog in ${FAKETIME_PROGS}; do\n-    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n-    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n-    chmod +x ${WRAP_DIR}/${prog}\n-  done\n-  }\n-\n-  function create_per-host_faketime_wrappers {\n-  for i in $HOSTS; do\n-    for prog in ${FAKETIME_HOST_PROGS}; do\n-        if which ${i}-${prog}-8\n-        then\n-            echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n-            echo \"REAL=\\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-            echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n-            echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-            if [ \"${i:0:11}\" = \"powerpc64le\" ]; then\n-                echo \"exec \\\"\\$REAL\\\" -mcpu=power8 -mtune=power9 \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n-            elif [ \"${i:0:9}\" = \"powerpc64\" ]; then\n-                echo \"exec \\\"\\$REAL\\\" -mcpu=970 -mtune=power9 \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n-            else\n-                echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n-            fi\n-            chmod +x ${WRAP_DIR}/${i}-${prog}\n-        fi\n-    done\n-  done\n-  }\n-\n-  pip3 install lief==0.11.5\n-\n-  # Faketime for depends so intermediate results are comparable\n-  export PATH_orig=${PATH}\n-  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n-  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n-  export PATH=${WRAP_DIR}:${PATH}\n-\n-  cd bitcoin\n-  BASEPREFIX=\"${PWD}/depends\"\n-  # Build dependencies for each host\n-  for i in $HOSTS; do\n-    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\" CC=${i}-gcc-8 CXX=${i}-g++-8\n-  done\n-\n-  # Faketime for binaries\n-  export PATH=${PATH_orig}\n-  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n-  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n-  export PATH=${WRAP_DIR}:${PATH}\n-\n-  # Define DISTNAME variable.\n-  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n-  source contrib/gitian-descriptors/assign_DISTNAME\n-\n-  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n-\n-  # Create the source tarball\n-  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n-  git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n-\n-  ORIGPATH=\"$PATH\"\n-  # Extract the git archive into a dir for each host and build\n-  for i in ${HOSTS}; do\n-    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n-    if [ \"${i}\" = \"powerpc64-linux-gnu\" ]; then\n-      # Workaround for https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740\n-      # TODO: remove this when no longer needed\n-      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE} -Wl,-z,noexecstack\"\n-    else\n-      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE}\"\n-    fi\n-    mkdir -p distsrc-${i}\n-    cd distsrc-${i}\n-    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n-    mkdir -p ${INSTALLPATH}\n-    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n-\n-    ./autogen.sh\n-    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\" CC=${i}-gcc-8 CXX=${i}-g++-8\n-    make ${MAKEOPTS}\n-    make ${MAKEOPTS} -C src check-security\n-    make ${MAKEOPTS} -C src check-symbols\n-    make install DESTDIR=${INSTALLPATH}\n-    cd installed\n-    find . -name \"lib*.la\" -delete\n-    find . -name \"lib*.a\" -delete\n-    rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n-    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n-    cp ../README.md ${DISTNAME}/\n-    find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n-    find ${DISTNAME} -name \"*.dbg\" | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n-    cd ../../\n-    rm -rf distsrc-${i}\n-  done"
      },
      {
        "sha": "addad0a5d27a0320a5384894e9a7f09aa97c8e1c",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 53,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,53 +0,0 @@\n----\n-name: \"bitcoin-dmg-signer\"\n-distro: \"ubuntu\"\n-suites:\n-- \"focal\"\n-architectures:\n-- \"amd64\"\n-packages:\n-- \"faketime\"\n-- \"xorriso\"\n-- \"python3-pip\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n-  \"dir\": \"signature\"\n-- \"url\": \"https://github.com/achow101/signapple.git\"\n-  \"dir\": \"signapple\"\n-  \"commit\": \"b084cbbf44d5330448ffce0c7d118f75781b64bd\"\n-files:\n-- \"bitcoin-osx-unsigned.tar.gz\"\n-script: |\n-  set -e -o pipefail\n-\n-  WRAP_DIR=$HOME/wrapped\n-  mkdir -p ${WRAP_DIR}\n-  export PATH=\"$PWD\":$PATH\n-  FAKETIME_PROGS=\"dmg xorrisofs\"\n-\n-  # Create global faketime wrappers\n-  for prog in ${FAKETIME_PROGS}; do\n-    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n-    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n-    chmod +x ${WRAP_DIR}/${prog}\n-  done\n-\n-  # Install signapple\n-  cd signapple\n-  python3 -m pip install -U pip setuptools\n-  python3 -m pip install .\n-  export PATH=\"$HOME/.local/bin\":$PATH\n-  cd ..\n-\n-  UNSIGNED_TARBALL=bitcoin-osx-unsigned.tar.gz\n-  UNSIGNED_APP=dist/Bitcoin-Qt.app\n-  SIGNED=bitcoin-osx-signed.dmg\n-\n-  tar -xf ${UNSIGNED_TARBALL}\n-  OSX_VOLNAME=\"$(cat osx_volname)\"\n-  ./detached-sig-apply.sh ${UNSIGNED_APP} signature/osx/dist\n-  ${WRAP_DIR}/xorrisofs -D -l -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -o uncompressed.dmg signed-app\n-  ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "a39618adb78d5c3403c9f47e0b58111a6811bbec",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 155,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,155 +0,0 @@\n----\n-name: \"bitcoin-core-osx-22\"\n-enable_cache: true\n-distro: \"ubuntu\"\n-suites:\n-- \"focal\"\n-architectures:\n-- \"amd64\"\n-packages:\n-- \"ca-certificates\"\n-- \"curl\"\n-- \"g++\"\n-- \"git\"\n-- \"pkg-config\"\n-- \"autoconf\"\n-- \"librsvg2-bin\"\n-- \"libtiff-tools\"\n-- \"libtool\"\n-- \"automake\"\n-- \"faketime\"\n-- \"bsdmainutils\"\n-- \"cmake\"\n-- \"imagemagick\"\n-- \"libz-dev\"\n-- \"python3\"\n-- \"python3-pip\"\n-- \"python3-setuptools\"\n-- \"fonts-tuffy\"\n-- \"xorriso\"\n-- \"libtinfo5\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n-  \"dir\": \"bitcoin\"\n-files:\n-- \"Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz\"\n-script: |\n-  set -e -o pipefail\n-\n-  WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-apple-darwin18\"\n-  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary XORRISOFS=${WRAP_DIR}/xorrisofs DMG=${WRAP_DIR}/dmg\"\n-  FAKETIME_HOST_PROGS=\"\"\n-  FAKETIME_PROGS=\"ar ranlib date dmg xorrisofs\"\n-\n-  export TZ=\"UTC\"\n-  export BUILD_DIR=\"$PWD\"\n-  mkdir -p ${WRAP_DIR}\n-  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n-    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n-    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n-    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n-  fi\n-\n-  export ZERO_AR_DATE=1\n-\n-  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)\n-  function create_global_faketime_wrappers {\n-  for prog in ${FAKETIME_PROGS}; do\n-    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n-    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n-    chmod +x ${WRAP_DIR}/${prog}\n-  done\n-  }\n-\n-  function create_per-host_faketime_wrappers {\n-  for i in $HOSTS; do\n-    for prog in ${FAKETIME_HOST_PROGS}; do\n-        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n-        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n-        chmod +x ${WRAP_DIR}/${i}-${prog}\n-    done\n-  done\n-  }\n-\n-  pip3 install lief==0.11.5\n-\n-  # Faketime for depends so intermediate results are comparable\n-  export PATH_orig=${PATH}\n-  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n-  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n-  export PATH=${WRAP_DIR}:${PATH}\n-\n-  cd bitcoin\n-  BASEPREFIX=\"${PWD}/depends\"\n-\n-  mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz\n-\n-  # Build dependencies for each host\n-  for i in $HOSTS; do\n-    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n-  done\n-\n-  # Faketime for binaries\n-  export PATH=${PATH_orig}\n-  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n-  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n-  export PATH=${WRAP_DIR}:${PATH}\n-\n-  # Define DISTNAME variable.\n-  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n-  source contrib/gitian-descriptors/assign_DISTNAME\n-\n-  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n-\n-  # Create the source tarball\n-  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n-  git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n-\n-  ORIGPATH=\"$PATH\"\n-  # Extract the git archive into a dir for each host and build\n-  for i in ${HOSTS}; do\n-    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n-    mkdir -p distsrc-${i}\n-    cd distsrc-${i}\n-    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n-    mkdir -p ${INSTALLPATH}\n-    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n-\n-    ./autogen.sh\n-    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n-    make ${MAKEOPTS}\n-    make ${MAKEOPTS} -C src check-security\n-    make ${MAKEOPTS} -C src check-symbols\n-    make install-strip DESTDIR=${INSTALLPATH}\n-\n-    make osx_volname\n-    make deploydir\n-    mkdir -p unsigned-app-${i}\n-    cp osx_volname unsigned-app-${i}/\n-    cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}\n-    cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}\n-    cp ${BASEPREFIX}/${i}/native/bin/dmg unsigned-app-${i}\n-    mv dist unsigned-app-${i}\n-    pushd unsigned-app-${i}\n-    find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\n-    popd\n-\n-    make deploy OSX_DMG=\"${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\"\n-\n-    cd installed\n-    find . -name \"lib*.la\" -delete\n-    find . -name \"lib*.a\" -delete\n-    rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME} | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n-    cd ../../\n-  done\n-\n-  mv ${OUTDIR}/${DISTNAME}-x86_64-*.tar.gz ${OUTDIR}/${DISTNAME}-osx64.tar.gz"
      },
      {
        "sha": "c13c24c3cc332316c044fcf3a1a41227894fa1b2",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,42 +0,0 @@\n----\n-name: \"bitcoin-win-signer\"\n-distro: \"ubuntu\"\n-suites:\n-- \"focal\"\n-architectures:\n-- \"amd64\"\n-packages:\n-- \"libssl-dev\"\n-- \"autoconf\"\n-- \"automake\"\n-- \"libtool\"\n-- \"pkg-config\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n-  \"dir\": \"signature\"\n-files:\n-- \"osslsigncode-2.0.tar.gz\"\n-- \"bitcoin-win-unsigned.tar.gz\"\n-script: |\n-  set -e -o pipefail\n-\n-  BUILD_DIR=\"$PWD\"\n-  SIGDIR=${BUILD_DIR}/signature/win\n-  UNSIGNED_DIR=${BUILD_DIR}/unsigned\n-\n-  echo \"5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f  osslsigncode-2.0.tar.gz\" | sha256sum -c\n-\n-  mkdir -p ${UNSIGNED_DIR}\n-  tar -C ${UNSIGNED_DIR} -xf bitcoin-win-unsigned.tar.gz\n-\n-  tar xf osslsigncode-2.0.tar.gz\n-  cd osslsigncode-2.0\n-\n-  ./autogen.sh\n-  ./configure --without-gsf --without-curl --disable-dependency-tracking\n-  make\n-  find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n-    INFILE=\"$(basename \"${i}\")\"\n-    OUTFILE=\"${INFILE/-unsigned}\"\n-    ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n-  done"
      },
      {
        "sha": "ffe228a032e6dd72af86ea2187c3737f3783e1f8",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 157,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,157 +0,0 @@\n----\n-name: \"bitcoin-core-win-22\"\n-enable_cache: true\n-distro: \"ubuntu\"\n-suites:\n-- \"focal\"\n-architectures:\n-- \"amd64\"\n-packages:\n-- \"curl\"\n-- \"g++\"\n-- \"git\"\n-- \"pkg-config\"\n-- \"autoconf\"\n-- \"libtool\"\n-- \"automake\"\n-- \"faketime\"\n-- \"bsdmainutils\"\n-- \"mingw-w64\"\n-- \"g++-mingw-w64\"\n-- \"nsis\"\n-- \"zip\"\n-- \"ca-certificates\"\n-- \"python3\"\n-- \"python3-pip\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n-  \"dir\": \"bitcoin\"\n-files: []\n-script: |\n-  set -e -o pipefail\n-\n-  WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n-  FAKETIME_HOST_PROGS=\"ar ranlib nm windres strip objcopy\"\n-  FAKETIME_PROGS=\"date makensis zip\"\n-  HOST_CFLAGS=\"-O2 -g -fno-ident\"\n-  HOST_CXXFLAGS=\"-O2 -g -fno-ident\"\n-\n-  export TZ=\"UTC\"\n-  export BUILD_DIR=\"$PWD\"\n-  mkdir -p ${WRAP_DIR}\n-  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n-    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n-    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n-    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n-  fi\n-\n-  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)\n-  function create_global_faketime_wrappers {\n-  for prog in ${FAKETIME_PROGS}; do\n-    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n-    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n-    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n-    echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${prog}\n-    chmod +x ${WRAP_DIR}/${prog}\n-  done\n-  }\n-\n-  function create_per-host_faketime_wrappers {\n-  for i in $HOSTS; do\n-    for prog in ${FAKETIME_HOST_PROGS}; do\n-        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n-        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n-        chmod +x ${WRAP_DIR}/${i}-${prog}\n-    done\n-  done\n-  }\n-\n-  function create_per-host_compiler_wrapper {\n-  # -posix variant is required for c++11 threading.\n-  for i in $HOSTS; do\n-    for prog in gcc g++; do\n-        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n-        echo \"REAL=\\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"exec \\\"\\$REAL\\\" \\\"\\$@\\\"\" >> $WRAP_DIR/${i}-${prog}\n-        chmod +x ${WRAP_DIR}/${i}-${prog}\n-    done\n-  done\n-  }\n-\n-  pip3 install lief==0.11.5\n-\n-  # Faketime for depends so intermediate results are comparable\n-  export PATH_orig=${PATH}\n-  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n-  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n-  create_per-host_compiler_wrapper \"2000-01-01 12:00:00\"\n-  export PATH=${WRAP_DIR}:${PATH}\n-\n-  cd bitcoin\n-  BASEPREFIX=\"${PWD}/depends\"\n-  # Build dependencies for each host\n-  for i in $HOSTS; do\n-    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n-  done\n-\n-  # Faketime for binaries\n-  export PATH=${PATH_orig}\n-  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n-  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n-  create_per-host_compiler_wrapper \"${REFERENCE_DATETIME}\"\n-  export PATH=${WRAP_DIR}:${PATH}\n-\n-  # Define DISTNAME variable.\n-  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n-  source contrib/gitian-descriptors/assign_DISTNAME\n-\n-  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n-\n-  # Create the source tarball\n-  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n-  git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n-\n-  ORIGPATH=\"$PATH\"\n-  # Extract the git archive into a dir for each host and build\n-  for i in ${HOSTS}; do\n-    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n-    mkdir -p distsrc-${i}\n-    cd distsrc-${i}\n-    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n-    mkdir -p ${INSTALLPATH}\n-    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n-\n-    ./autogen.sh\n-    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n-    make ${MAKEOPTS}\n-    make ${MAKEOPTS} -C src check-security\n-    make ${MAKEOPTS} -C src check-symbols\n-    make deploy BITCOIN_WIN_INSTALLER=\"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n-    make install DESTDIR=${INSTALLPATH}\n-    cd installed\n-    mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n-    find . -name \"lib*.la\" -delete\n-    find . -name \"lib*.a\" -delete\n-    rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n-    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n-    cp ../doc/README_windows.txt ${DISTNAME}/readme.txt\n-    find ${DISTNAME} -not -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i//x86_64-w64-mingw32/win64}.zip\n-    find ${DISTNAME} -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i//x86_64-w64-mingw32/win64}-debug.zip\n-    cd ../../\n-    rm -rf distsrc-${i}\n-  done\n-\n-  cp -rf contrib/windeploy $BUILD_DIR\n-  cd $BUILD_DIR/windeploy\n-  mkdir unsigned\n-  cp ${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe unsigned/\n-  find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz"
      },
      {
        "sha": "a685aac1c04577a274a25a3285a9e5673b8dbaa1",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -90,9 +90,9 @@ Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n \n See the SDK Extraction notes above for how to obtain it.\n \n-The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries which are\n+The Guix process build 2 sets of files: Linux tools, then Apple binaries which are\n created using these tools. The build process has been designed to avoid including the\n-SDK's files in Gitian's outputs. All interim tarballs are fully deterministic and may be freely\n+SDK's files in Guix's outputs. All interim tarballs are fully deterministic and may be freely\n redistributed.\n \n [`xorrisofs`](https://www.gnu.org/software/xorriso/) is used to create the DMG.\n@@ -113,11 +113,11 @@ order to satisfy the new Gatekeeper requirements. Because this private key canno\n shared, we'll have to be a bit creative in order for the build process to remain somewhat\n deterministic. Here's how it works:\n \n-- Builders use Gitian to create an unsigned release. This outputs an unsigned DMG which\n+- Builders use Guix to create an unsigned release. This outputs an unsigned DMG which\n   users may choose to bless and run. It also outputs an unsigned app structure in the form\n   of a tarball, which also contains all of the tools that have been previously (deterministically)\n   built in order to create a final DMG.\n - The Apple keyholder uses this unsigned app to create a detached signature, using the\n   script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n-- Builders feed the unsigned app + detached signature back into Gitian. It uses the\n+- Builders feed the unsigned app + detached signature back into Guix. It uses the\n   pre-built tools to recombine the pieces into a deterministic DMG."
      },
      {
        "sha": "aabfe220bcfdf6bd46a73ad0d8acf3de25835990",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -46,7 +46,6 @@ The following are developer notes on how to build Bitcoin Core on your native pl\n - [OpenBSD Build Notes](build-openbsd.md)\n - [NetBSD Build Notes](build-netbsd.md)\n - [Android Build Notes](build-android.md)\n-- [Gitian Building Guide (External Link)](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md)\n \n Development\n ---------------------"
      },
      {
        "sha": "3a48f4a0b397770e44f51477df854f8298ce1b75",
        "filename": "doc/gitian-building.md",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be143a960e2bb9ac81144f55c45731c1bb209c5/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be143a960e2bb9ac81144f55c45731c1bb209c5/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=7be143a960e2bb9ac81144f55c45731c1bb209c5",
        "patch": "@@ -1,4 +0,0 @@\n-Gitian building\n-================\n-\n-This file was moved to [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md) at [https://github.com/bitcoin-core/docs](https://github.com/bitcoin-core/docs)."
      },
      {
        "sha": "73ac583d8432f7c1310fcb5ee44cec024eed973a",
        "filename": "test/lint/lint-shell.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/test/lint/lint-shell.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9c34237ab7b056394e0bd1f7cb131ffd95754c/test/lint/lint-shell.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell.sh?ref=ab9c34237ab7b056394e0bd1f7cb131ffd95754c",
        "patch": "@@ -14,10 +14,6 @@ disabled=(\n     SC2086 # Double quote to prevent globbing and word splitting.\n     SC2162 # read without -r will mangle backslashes.\n )\n-disabled_gitian=(\n-    SC2094 # Make sure not to read and write the same file in the same pipeline.\n-    SC2129 # Consider using { cmd1; cmd2; } >> file instead of individual redirects.\n-)\n \n EXIT_CODE=0\n \n@@ -33,22 +29,4 @@ if ! \"${SHELLCHECK_CMD[@]}\" \"$EXCLUDE\" $SOURCED_FILES $(git ls-files -- '*.sh' |\n     EXIT_CODE=1\n fi\n \n-if ! command -v yq > /dev/null; then\n-    echo \"Skipping Gitian descriptor scripts checking since yq is not installed.\"\n-    exit $EXIT_CODE\n-fi\n-\n-EXCLUDE_GITIAN=${EXCLUDE}\",$(IFS=','; echo \"${disabled_gitian[*]}\")\"\n-for descriptor in $(git ls-files -- 'contrib/gitian-descriptors/*.yml')\n-do\n-    script=$(basename \"$descriptor\")\n-    # Use #!/bin/bash as gitian-builder/bin/gbuild does to complete a script.\n-    echo \"#!/bin/bash\" > $script\n-    yq -r .script \"$descriptor\" >> $script\n-    if ! \"${SHELLCHECK_CMD[@]}\" \"$EXCLUDE_GITIAN\" $script; then\n-        EXIT_CODE=1\n-    fi\n-    rm $script\n-done\n-\n exit $EXIT_CODE"
      }
    ]
  }
]