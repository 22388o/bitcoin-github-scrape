[
  {
    "sha": "37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2UxZDM0YzhlYmYyOTJiNmM3ZmZiNjNlMDVjODc4OTcwYmVmZmMx",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-04T08:36:45Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-04T08:36:45Z"
      },
      "message": "Improve rpc_packages.py",
      "tree": {
        "sha": "02e7a0c516cb371e8ae8042f041120a91f14e3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02e7a0c516cb371e8ae8042f041120a91f14e3b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37e1d34c8ebf292b6c7ffb63e05c878970beffc1/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fb6701bdb05f935ab65d8fe0fcc15c12e32d134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb6701bdb05f935ab65d8fe0fcc15c12e32d134",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb6701bdb05f935ab65d8fe0fcc15c12e32d134"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "16e979c7b1a32b911a098abeb60dd7edfca94e68",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37e1d34c8ebf292b6c7ffb63e05c878970beffc1/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37e1d34c8ebf292b6c7ffb63e05c878970beffc1/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
        "patch": "@@ -133,7 +133,7 @@ def test_independent(self):\n     def test_chain(self):\n         node = self.nodes[0]\n         first_coin = self.coins.pop()\n-        (chain_hex, chain_txns) = create_raw_chain(node, first_coin, self.address, self.privkeys)\n+        chain_hex, chain_txns = create_raw_chain(node, first_coin, self.address, self.privkeys)\n         self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n         assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n                 [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"package-error\": \"package-not-sorted\"} for tx in chain_txns[::-1]])"
      }
    ]
  },
  {
    "sha": "28a120f790dbcabb1a1f2637158fbfb91842c471",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGExMjBmNzkwZGJjYWJiMWExZjI2MzcxNThmYmZiOTE4NDJjNDcx",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T09:24:12Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T09:24:12Z"
      },
      "message": "Improve test_framework/wallet.py",
      "tree": {
        "sha": "aef7e49cb1886b08df5cd15ada53300a274646ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aef7e49cb1886b08df5cd15ada53300a274646ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28a120f790dbcabb1a1f2637158fbfb91842c471",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a120f790dbcabb1a1f2637158fbfb91842c471",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28a120f790dbcabb1a1f2637158fbfb91842c471",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a120f790dbcabb1a1f2637158fbfb91842c471/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37e1d34c8ebf292b6c7ffb63e05c878970beffc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37e1d34c8ebf292b6c7ffb63e05c878970beffc1"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "270e96c9b36c4f0b1452063db938d96be7b495c2",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28a120f790dbcabb1a1f2637158fbfb91842c471/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28a120f790dbcabb1a1f2637158fbfb91842c471/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=28a120f790dbcabb1a1f2637158fbfb91842c471",
        "patch": "@@ -182,14 +182,14 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n-def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n =0, parent_locking_script=None, fee=DEFAULT_FEE):\n     \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n     amount = parent_value with a fee deducted.\n     Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n     \"\"\"\n     inputs = [{\"txid\": parent_txid, \"vout\": n}]\n     my_value = parent_value - fee\n-    outputs = {address : my_value}\n+    outputs = {address: my_value}\n     rawtx = node.createrawtransaction(inputs, outputs)\n     prevtxs = [{\n         \"txid\": parent_txid,\n@@ -200,10 +200,12 @@ def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_l\n     signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n     assert signedtx[\"complete\"]\n     tx = tx_from_hex(signedtx[\"hex\"])\n-    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+    return tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex()\n \n def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n     \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    assert_equal(len(parents_tx),len(locking_scripts))\n+    assert_equal(len(locking_scripts),len(values))\n     num_parents = len(parents_tx)\n     total_value = sum(values)\n     inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n@@ -216,7 +218,7 @@ def create_child_with_parents(node, address, privkeys, parents_tx, values, locki\n     assert signedtx_child[\"complete\"]\n     return signedtx_child[\"hex\"]\n \n-def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):\n+def create_raw_chain(node, first_coin, address, privkeys, chain_length):\n     \"\"\"Helper function: create a \"chain\" of chain_length transactions. The nth transaction in the\n     chain is a child of the n-1th transaction and parent of the n+1th transaction.\n     \"\"\"\n@@ -238,18 +240,18 @@ def bulk_transaction(tx, node, target_weight, privkeys, prevtxs=None):\n     \"\"\"Pad a transaction with extra outputs until it reaches a target weight (or higher).\n     returns CTransaction object\n     \"\"\"\n-    tx_heavy = deepcopy(tx)\n-    assert_greater_than_or_equal(target_weight, tx_heavy.get_weight())\n-    while tx_heavy.get_weight() < target_weight:\n+    assert_greater_than_or_equal(target_weight, tx.get_weight())\n+    while tx.get_weight() < target_weight:\n         random_spk = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n         for _ in range(512*2):\n             random_spk += choice(\"0123456789ABCDEF\")\n-        tx_heavy.vout.append(CTxOut(0, bytes.fromhex(random_spk)))\n+        tx.vout.append(CTxOut(0, bytes.fromhex(random_spk)))\n     # Re-sign the transaction\n     if privkeys:\n-        signed = node.signrawtransactionwithkey(tx_heavy.serialize().hex(), privkeys, prevtxs)\n+        signed = node.signrawtransactionwithkey(tx.serialize().hex(), privkeys, prevtxs)\n         return tx_from_hex(signed[\"hex\"])\n     # OP_TRUE\n-    tx_heavy.wit.vtxinwit = [CTxInWitness()]\n-    tx_heavy.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-    return tx_heavy\n+    else:\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        return tx"
      }
    ]
  },
  {
    "sha": "caa72d8ea84023530df14ce0ee0bc2ad13afed90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWE3MmQ4ZWE4NDAyMzUzMGRmMTRjZTBlZTBiYzJhZDEzYWZlZDkw",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T09:32:33Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T09:32:33Z"
      },
      "message": "Improve make_chain() in wallet.py",
      "tree": {
        "sha": "6d925dc1b2d9a738d975ddc164b81b5f7687b9c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d925dc1b2d9a738d975ddc164b81b5f7687b9c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caa72d8ea84023530df14ce0ee0bc2ad13afed90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa72d8ea84023530df14ce0ee0bc2ad13afed90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caa72d8ea84023530df14ce0ee0bc2ad13afed90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa72d8ea84023530df14ce0ee0bc2ad13afed90/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28a120f790dbcabb1a1f2637158fbfb91842c471",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a120f790dbcabb1a1f2637158fbfb91842c471",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28a120f790dbcabb1a1f2637158fbfb91842c471"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "fd5f41fc0ddf8c2748b7cfb10dafcb5207ce9a85",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa72d8ea84023530df14ce0ee0bc2ad13afed90/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa72d8ea84023530df14ce0ee0bc2ad13afed90/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=caa72d8ea84023530df14ce0ee0bc2ad13afed90",
        "patch": "@@ -70,7 +70,7 @@ def test_chain_limits_helper(self, mempool_count, package_count):\n         value = first_coin[\"amount\"]\n \n         for i in range(mempool_count + package_count):\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < mempool_count:\n                 node.sendrawtransaction(txhex)\n@@ -142,7 +142,7 @@ def test_desc_count_limits(self):\n         value = parent_value\n         txid = parent_txid\n         for i in range(12):\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < 11: # M2a... M12a\n                 node.sendrawtransaction(txhex)\n@@ -160,7 +160,7 @@ def test_desc_count_limits(self):\n         spk = tx_child_b.vout[0].scriptPubKey.hex()\n         txid = tx_child_b.rehash()\n         for i in range(12):\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < 11: # M3b... M13b\n                 node.sendrawtransaction(txhex)\n@@ -209,7 +209,7 @@ def test_anc_count_limits(self):\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n             for i in range(13):\n-                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n                 if i < 12:\n                     node.sendrawtransaction(txhex)\n@@ -263,7 +263,7 @@ def test_anc_count_limits_2(self):\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n             for i in range(12):\n-                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n                 value -= Decimal(\"0.0001\")\n                 node.sendrawtransaction(txhex)\n@@ -280,7 +280,7 @@ def test_anc_count_limits_2(self):\n         pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n \n         # Child Pd\n-        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk)\n \n         assert_equal(24, node.getmempoolinfo()[\"size\"])\n         testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n@@ -366,7 +366,7 @@ def test_anc_size_limits(self):\n             top_coin = self.coins.pop()\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n-            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n             bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n             node.sendrawtransaction(bulked_tx.serialize().hex())\n             parents_tx.append(bulked_tx)\n@@ -381,7 +381,7 @@ def test_anc_size_limits(self):\n         pc_hex = pc_tx.serialize().hex()\n \n         # Package transaction D\n-        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk, high_fee)\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk, high_fee)\n         prevtxs = [{\n             \"txid\": pc_tx.rehash(),\n             \"vout\": 0,\n@@ -438,7 +438,7 @@ def test_desc_size_limits(self):\n                 \"amount\": value,\n             }]\n             if j == 0: # normal key\n-                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, j, spk, high_fee)\n+                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n                 mempool_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n             else: # OP_TRUE\n                 inputs = [{\"txid\": txid, \"vout\": 1}]\n@@ -451,7 +451,7 @@ def test_desc_size_limits(self):\n             spk = mempool_tx.vout[0].scriptPubKey.hex()\n             value = Decimal(mempool_tx.vout[0].nValue) / COIN\n             txid = mempool_tx.rehash()\n-            (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n             prevtxs = [{\n                 \"txid\": txid,\n                 \"vout\": 0,"
      },
      {
        "sha": "0202d9b66a413df36d03b66ccb2a81cc571c198d",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa72d8ea84023530df14ce0ee0bc2ad13afed90/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa72d8ea84023530df14ce0ee0bc2ad13afed90/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=caa72d8ea84023530df14ce0ee0bc2ad13afed90",
        "patch": "@@ -182,18 +182,18 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n-def make_chain(node, address, privkeys, parent_txid, parent_value, n =0, parent_locking_script=None, fee=DEFAULT_FEE):\n-    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+def make_chain(node, address, privkeys, parent_txid, parent_value, parent_locking_script=None, fee=DEFAULT_FEE):\n+    \"\"\"Build a transaction that spends parent_txid.vout[0] and produces one output with\n     amount = parent_value with a fee deducted.\n     Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n     \"\"\"\n-    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    inputs = [{\"txid\": parent_txid, \"vout\": 0}]\n     my_value = parent_value - fee\n     outputs = {address: my_value}\n     rawtx = node.createrawtransaction(inputs, outputs)\n     prevtxs = [{\n         \"txid\": parent_txid,\n-        \"vout\": n,\n+        \"vout\": 0,\n         \"scriptPubKey\": parent_locking_script,\n         \"amount\": parent_value,\n     }] if parent_locking_script else None"
      }
    ]
  },
  {
    "sha": "8ff1a13e641d332cf015ebb71a91ef02faf8694a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmYxYTEzZTY0MWQzMzJjZjAxNWViYjcxYTkxZWYwMmZhZjg2OTRh",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T10:08:49Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T10:08:49Z"
      },
      "message": "Improve mempool_package_limits.py",
      "tree": {
        "sha": "52aa5f9d94b50e1d80d1e3a0026dd5a224e288e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52aa5f9d94b50e1d80d1e3a0026dd5a224e288e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ff1a13e641d332cf015ebb71a91ef02faf8694a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ff1a13e641d332cf015ebb71a91ef02faf8694a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ff1a13e641d332cf015ebb71a91ef02faf8694a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ff1a13e641d332cf015ebb71a91ef02faf8694a/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caa72d8ea84023530df14ce0ee0bc2ad13afed90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa72d8ea84023530df14ce0ee0bc2ad13afed90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caa72d8ea84023530df14ce0ee0bc2ad13afed90"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 11,
      "deletions": 12
    },
    "files": [
      {
        "sha": "035bc9d556f2a8deb0fbd3f707d0fa77e66f4fd6",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ff1a13e641d332cf015ebb71a91ef02faf8694a/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ff1a13e641d332cf015ebb71a91ef02faf8694a/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=8ff1a13e641d332cf015ebb71a91ef02faf8694a",
        "patch": "@@ -265,7 +265,6 @@ def test_anc_count_limits_2(self):\n             for i in range(12):\n                 (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n-                value -= Decimal(\"0.0001\")\n                 node.sendrawtransaction(txhex)\n                 if i == 11:\n                     # last 2 transactions will be the parents of Pc\n@@ -276,7 +275,7 @@ def test_anc_count_limits_2(self):\n         # Child Pc\n         pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n         pc_tx = tx_from_hex(pc_hex)\n-        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n         pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n \n         # Child Pd\n@@ -307,29 +306,29 @@ def test_anc_count_limits_bushy(self):\n         package_hex = []\n         parent_txns = []\n         parent_values = []\n-        scripts = []\n+        parent_scripts = []\n         for _ in range(5): # Make package transactions P0 ... P4\n-            gp_tx = []\n-            gp_values = []\n-            gp_scripts = []\n+            grandparent_txs = []\n+            grandparent_values = []\n+            grandparent_scripts = []\n             for _ in range(4): # Make mempool transactions M(4i+1)...M(4i+4)\n                 parent_coin = self.coins.pop()\n                 value = parent_coin[\"amount\"]\n                 txid = parent_coin[\"txid\"]\n                 (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n-                gp_tx.append(tx)\n-                gp_values.append(value)\n-                gp_scripts.append(spk)\n+                grandparent_txs.append(tx)\n+                grandparent_values.append(value)\n+                grandparent_scripts.append(spk)\n                 node.sendrawtransaction(txhex)\n             # Package transaction Pi\n-            pi_hex = create_child_with_parents(node, self.address, self.privkeys, gp_tx, gp_values, gp_scripts)\n+            pi_hex = create_child_with_parents(node, self.address, self.privkeys, grandparent_txs, grandparent_values, grandparent_scripts)\n             package_hex.append(pi_hex)\n             pi_tx = tx_from_hex(pi_hex)\n             parent_txns.append(pi_tx)\n             parent_values.append(Decimal(pi_tx.vout[0].nValue) / COIN)\n-            scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n+            parent_scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n         # Package transaction PC\n-        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, scripts))\n+        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, parent_scripts))\n \n         assert_equal(20, node.getmempoolinfo()[\"size\"])\n         assert_equal(6, len(package_hex))"
      }
    ]
  },
  {
    "sha": "b72d61fddff1476b14cb40a548311ea7c87d52ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzJkNjFmZGRmZjE0NzZiMTRjYjQwYTU0ODMxMWVhN2M4N2Q1MmNh",
    "commit": {
      "author": {
        "name": "Naiza Singla",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-06T10:29:06Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-09-06T10:29:06Z"
      },
      "message": "Merge branch 'bitcoin:master' into master",
      "tree": {
        "sha": "4d5139f8352832edf118565c05e573b23d2cd529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5139f8352832edf118565c05e573b23d2cd529"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b72d61fddff1476b14cb40a548311ea7c87d52ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhNe1yCRBK7hj4Ov3rIwAAuiAIALAS31Xm4afdJrQP/8HUM5Wl\nefSYHQxm/3mE19TdDmIn9gg/KneGQHnvKSCKU7QEyfD5+X0avRHbdudka9P0d6Wi\nX6I7ydiQ1QqAXn5Z2IMHy9I/ggP6/NoNT88+I8NNZftw7zhIOq1+hiH63L4h1Mhy\nFgxgwW8spl1u2AOY1wApuUXFvTuKu333PI2KmHn8kK/1qV1sLucgWQAupHK2rWD7\nM5R8PLWIpnO2Hh0msmkZx9WWmQIIgCwTzdTTzH6STVqehmKfK9kyxFO2XpIeKyjd\nHfYaTPbePfooxHfRKBhuNLn6BBtzBFUvGEYJnzfb8q8BZWxWh9y2CL8O/tWhVkw=\n=fc1w\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 4d5139f8352832edf118565c05e573b23d2cd529\nparent 8ff1a13e641d332cf015ebb71a91ef02faf8694a\nparent 2c6707be8b62ec56a6e2017b43c167b319ef17c3\nauthor Naiza Singla <naiza@iitk.ac.in> 1630924146 +0530\ncommitter GitHub <noreply@github.com> 1630924146 +0530\n\nMerge branch 'bitcoin:master' into master\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72d61fddff1476b14cb40a548311ea7c87d52ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b72d61fddff1476b14cb40a548311ea7c87d52ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72d61fddff1476b14cb40a548311ea7c87d52ca/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ff1a13e641d332cf015ebb71a91ef02faf8694a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ff1a13e641d332cf015ebb71a91ef02faf8694a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ff1a13e641d332cf015ebb71a91ef02faf8694a"
      },
      {
        "sha": "2c6707be8b62ec56a6e2017b43c167b319ef17c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c6707be8b62ec56a6e2017b43c167b319ef17c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c6707be8b62ec56a6e2017b43c167b319ef17c3"
      }
    ],
    "stats": {
      "total": 327,
      "additions": 187,
      "deletions": 140
    },
    "files": [
      {
        "sha": "a85ec4c3803f94dff07aa326e85df90f20f27232",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -51,7 +51,7 @@ after_build:\n test_script:\n - cmd: src\\test_bitcoin.exe -l test_suite\n - cmd: src\\bench_bitcoin.exe > NUL\n-- ps:  python test\\util\\bitcoin-util-test.py\n+- ps:  python test\\util\\test_runner.py\n - cmd: python test\\util\\rpcauth-test.py\n # Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted.\n # functional tests disabled for now. See"
      },
      {
        "sha": "ce663319102d2a81c05e70dea7bfa37b59ab6ced",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -286,7 +286,7 @@ EXTRA_DIST += \\\n     test/fuzz\n \n EXTRA_DIST += \\\n-    test/util/bitcoin-util-test.py \\\n+    test/util/test_runner.py \\\n     test/util/data/bitcoin-util-test.json \\\n     test/util/data/blanktxv1.hex \\\n     test/util/data/blanktxv1.json \\"
      },
      {
        "sha": "a1ed935996c296ed948089948da2bd254a9dd8b2",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -9,7 +9,7 @@\n from shutil import copyfile\n \n SOURCE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))\n-DEFAULT_PLATFORM_TOOLSET = R'v141'\n+DEFAULT_PLATFORM_TOOLSET = R'v142'\n \n libs = [\n     'libbitcoin_cli',"
      },
      {
        "sha": "5587618f2dfdc36d5d749cb9283e39e271b16326",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -13,7 +13,6 @@ update-alternatives --install /usr/bin/clang-format-diff clang-format-diff $(whi\n \n ${CI_RETRY_EXE} pip3 install codespell==2.0.0\n ${CI_RETRY_EXE} pip3 install flake8==3.8.3\n-${CI_RETRY_EXE} pip3 install yq\n ${CI_RETRY_EXE} pip3 install mypy==0.781\n ${CI_RETRY_EXE} pip3 install vulture==2.3\n "
      },
      {
        "sha": "b8ac6913468b65b7d30e521c27db31e8df32d5fc",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -14,5 +14,5 @@ export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC=clang CXX=clang++\"\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC='clang -ftrivial-auto-var-init=pattern' CXX='clang++ -ftrivial-auto-var-init=pattern'\"\n export CCACHE_SIZE=200M"
      },
      {
        "sha": "f03025d3c15161816259ed69c3467ab434e13abe",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -1874,7 +1874,7 @@ AC_CONFIG_LINKS([contrib/devtools/test-symbol-check.py:contrib/devtools/test-sym\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/fuzz/test_runner.py:test/fuzz/test_runner.py])\n-AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n+AC_CONFIG_LINKS([test/util/test_runner.py:test/util/test_runner.py])\n AC_CONFIG_LINKS([test/util/rpcauth-test.py:test/util/rpcauth-test.py])\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a"
      },
      {
        "sha": "ee9c65d4d498d00c374b1d1cad95f6712c12636c",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -16,6 +16,9 @@ $ FUZZ=process_message src/test/fuzz/fuzz\n # abort fuzzing using ctrl-c\n ```\n \n+There is also a runner script to execute all fuzz targets. Refer to\n+`./test/fuzz/test_runner.py --help` for more details.\n+\n ## Fuzzing harnesses and output\n \n [`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz)."
      },
      {
        "sha": "6f8245de8a0e6e48919748268e666f01845385e9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -548,6 +548,7 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   key_io.cpp \\\n   merkleblock.cpp \\\n+  net_types.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   net_permissions.cpp \\"
      },
      {
        "sha": "a85a3599601c81af7fa56ca750b915391e35969c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -337,8 +337,8 @@ bitcoin_test_clean : FORCE\n \n check-local: $(BITCOIN_TESTS:.cpp=.cpp.test)\n if BUILD_BITCOIN_TX\n-\t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n+\t@echo \"Running test/util/test_runner.py...\"\n+\t$(PYTHON) $(top_builddir)/test/util/test_runner.py\n endif\n \t@echo \"Running test/util/rpcauth-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py"
      },
      {
        "sha": "345dbdfb1648f3e95381f655640750822e058906",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 57,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -19,64 +19,7 @@\n #include <util/settings.h>\n #include <util/system.h>\n \n-CBanEntry::CBanEntry(const UniValue& json)\n-    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n-      nBanUntil(json[\"banned_until\"].get_int64())\n-{\n-}\n-\n-UniValue CBanEntry::ToJson() const\n-{\n-    UniValue json(UniValue::VOBJ);\n-    json.pushKV(\"version\", nVersion);\n-    json.pushKV(\"ban_created\", nCreateTime);\n-    json.pushKV(\"banned_until\", nBanUntil);\n-    return json;\n-}\n-\n namespace {\n-\n-static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n-\n-/**\n- * Convert a `banmap_t` object to a JSON array.\n- * @param[in] bans Bans list to convert.\n- * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n- * passing to `BanMapFromJson()`.\n- */\n-UniValue BanMapToJson(const banmap_t& bans)\n-{\n-    UniValue bans_json(UniValue::VARR);\n-    for (const auto& it : bans) {\n-        const auto& address = it.first;\n-        const auto& ban_entry = it.second;\n-        UniValue j = ban_entry.ToJson();\n-        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n-        bans_json.push_back(j);\n-    }\n-    return bans_json;\n-}\n-\n-/**\n- * Convert a JSON array to a `banmap_t` object.\n- * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n- * @param[out] bans Bans list to create from the JSON.\n- * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n- * unparsable values.\n- */\n-void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n-{\n-    for (const auto& ban_entry_json : bans_json.getValues()) {\n-        CSubNet subnet;\n-        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n-        if (!LookupSubNet(subnet_str, subnet)) {\n-            throw std::runtime_error(\n-                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n-        }\n-        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n-    }\n-}\n-\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {"
      },
      {
        "sha": "26b1c5880fa2b38b1b99793d743998f48af9166e",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -16,33 +16,6 @@ class CAddress;\n class CAddrMan;\n class CDataStream;\n \n-class CBanEntry\n-{\n-public:\n-    static constexpr int CURRENT_VERSION{1};\n-    int nVersion{CBanEntry::CURRENT_VERSION};\n-    int64_t nCreateTime{0};\n-    int64_t nBanUntil{0};\n-\n-    CBanEntry() {}\n-\n-    explicit CBanEntry(int64_t nCreateTimeIn)\n-        : nCreateTime{nCreateTimeIn} {}\n-\n-    /**\n-     * Create a ban entry from JSON.\n-     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n-     * @throw std::runtime_error if the JSON does not have the expected fields.\n-     */\n-    explicit CBanEntry(const UniValue& json);\n-\n-    /**\n-     * Generate a JSON representation of this ban entry.\n-     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n-     */\n-    UniValue ToJson() const;\n-};\n-\n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB\n {"
      },
      {
        "sha": "297f3066ffb2f3991a6fc2303e7cd005557d5327",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -514,7 +514,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         }\n \n         // Generate report header.\n-        std::string result{strprintf(\"%s %s%s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), ChainToString(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+        std::string result{strprintf(\"%s client %s%s - server %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), ChainToString(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n \n         // Report detailed peer connections list sorted by direction and minimum ping time.\n         if (DetailsRequested() && !m_peers.empty()) {"
      },
      {
        "sha": "58c51bd8e0bc588225aca5b5553c69b40801de44",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -772,9 +772,7 @@ static std::string readStdin()\n     if (ferror(stdin))\n         throw std::runtime_error(\"error reading stdin\");\n \n-    boost::algorithm::trim_right(ret);\n-\n-    return ret;\n+    return TrimString(ret);\n }\n \n static int CommandLineRawTx(int argc, char* argv[])"
      },
      {
        "sha": "9ae592be7924ee8fd0a8be6faeea62e261b244e7",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -10,6 +10,7 @@\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <walletinitinterface.h>\n@@ -22,7 +23,7 @@\n #include <set>\n #include <string>\n \n-#include <boost/algorithm/string.hpp> // boost::trim\n+#include <boost/algorithm/string.hpp>\n \n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n@@ -130,8 +131,7 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n         return false;\n     if (strAuth.substr(0, 6) != \"Basic \")\n         return false;\n-    std::string strUserPass64 = strAuth.substr(6);\n-    boost::trim(strUserPass64);\n+    std::string strUserPass64 = TrimString(strAuth.substr(6));\n     std::string strUserPass = DecodeBase64(strUserPass64);\n \n     if (strUserPass.find(':') != std::string::npos)"
      },
      {
        "sha": "eb2c750296dfcd655cccd7eabaabdb39ad8046b2",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -159,6 +159,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::VALIDATION, \"validation\"},\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n+    {BCLog::LOCK, \"lock\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "53a89d28bd52979094b60916e60203a4fc27428e",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -59,6 +59,7 @@ namespace BCLog {\n         VALIDATION  = (1 << 21),\n         I2P         = (1 << 22),\n         IPC         = (1 << 23),\n+        LOCK        = (1 << 24),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "647e3fa30e867ac154dc851844e765dbc2157300",
        "filename": "src/logging/timer.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/logging/timer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/logging/timer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging/timer.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -58,12 +58,14 @@ class Timer\n             return strprintf(\"%s: %s\", m_prefix, msg);\n         }\n \n-        std::string units = \"\";\n+        if (std::is_same<TimeType, std::chrono::microseconds>::value) {\n+            return strprintf(\"%s: %s (%i\u03bcs)\", m_prefix, msg, end_time.count());\n+        }\n+\n+        std::string units;\n         float divisor = 1;\n \n-        if (std::is_same<TimeType, std::chrono::microseconds>::value) {\n-            units = \"\u03bcs\";\n-        } else if (std::is_same<TimeType, std::chrono::milliseconds>::value) {\n+        if (std::is_same<TimeType, std::chrono::milliseconds>::value) {\n             units = \"ms\";\n             divisor = 1000.;\n         } else if (std::is_same<TimeType, std::chrono::seconds>::value) {\n@@ -93,6 +95,8 @@ class Timer\n } // namespace BCLog\n \n \n+#define LOG_TIME_MICROS_WITH_CATEGORY(end_msg, log_category) \\\n+    BCLog::Timer<std::chrono::microseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, log_category)\n #define LOG_TIME_MILLIS_WITH_CATEGORY(end_msg, log_category) \\\n     BCLog::Timer<std::chrono::milliseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, log_category)\n #define LOG_TIME_SECONDS(end_msg) \\"
      },
      {
        "sha": "c8f57fe6c644acc7ddef5f47de83486d4ae1a19e",
        "filename": "src/net_types.cpp",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/net_types.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/net_types.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_types.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_types.h>\n+\n+#include <netaddress.h>\n+#include <netbase.h>\n+#include <univalue.h>\n+\n+CBanEntry::CBanEntry(const UniValue& json)\n+    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n+      nBanUntil(json[\"banned_until\"].get_int64())\n+{\n+}\n+\n+UniValue CBanEntry::ToJson() const\n+{\n+    UniValue json(UniValue::VOBJ);\n+    json.pushKV(\"version\", nVersion);\n+    json.pushKV(\"ban_created\", nCreateTime);\n+    json.pushKV(\"banned_until\", nBanUntil);\n+    return json;\n+}\n+\n+static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n+\n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans)\n+{\n+    UniValue bans_json(UniValue::VARR);\n+    for (const auto& it : bans) {\n+        const auto& address = it.first;\n+        const auto& ban_entry = it.second;\n+        UniValue j = ban_entry.ToJson();\n+        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n+        bans_json.push_back(j);\n+    }\n+    return bans_json;\n+}\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n+{\n+    for (const auto& ban_entry_json : bans_json.getValues()) {\n+        CSubNet subnet;\n+        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n+        if (!LookupSubNet(subnet_str, subnet)) {\n+            throw std::runtime_error(\n+                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+        }\n+        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n+    }\n+}"
      },
      {
        "sha": "ffdc24c772959045b93f94471017bc7741af2169",
        "filename": "src/net_types.h",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/net_types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/net_types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_types.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -5,11 +5,56 @@\n #ifndef BITCOIN_NET_TYPES_H\n #define BITCOIN_NET_TYPES_H\n \n+#include <cstdint>\n #include <map>\n \n-class CBanEntry;\n class CSubNet;\n+class UniValue;\n+\n+class CBanEntry\n+{\n+public:\n+    static constexpr int CURRENT_VERSION{1};\n+    int nVersion{CBanEntry::CURRENT_VERSION};\n+    int64_t nCreateTime{0};\n+    int64_t nBanUntil{0};\n+\n+    CBanEntry() {}\n+\n+    explicit CBanEntry(int64_t nCreateTimeIn)\n+        : nCreateTime{nCreateTimeIn} {}\n+\n+    /**\n+     * Create a ban entry from JSON.\n+     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n+     * @throw std::runtime_error if the JSON does not have the expected fields.\n+     */\n+    explicit CBanEntry(const UniValue& json);\n+\n+    /**\n+     * Generate a JSON representation of this ban entry.\n+     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n+     */\n+    UniValue ToJson() const;\n+};\n \n using banmap_t = std::map<CSubNet, CBanEntry>;\n \n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans);\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans);\n+\n #endif // BITCOIN_NET_TYPES_H"
      },
      {
        "sha": "8cd1cc3855662eef658e0966931c66add90ad2a1",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n+#include <attributes.h>\n #include <crypto/common.h>\n #include <prevector.h>\n #include <serialize.h>\n@@ -438,23 +439,23 @@ class CScript : public CScriptBase\n     /** Delete non-existent operator to defend against future introduction */\n     CScript& operator<<(const CScript& b) = delete;\n \n-    CScript& operator<<(int64_t b) { return push_int64(b); }\n+    CScript& operator<<(int64_t b) LIFETIMEBOUND { return push_int64(b); }\n \n-    CScript& operator<<(opcodetype opcode)\n+    CScript& operator<<(opcodetype opcode) LIFETIMEBOUND\n     {\n         if (opcode < 0 || opcode > 0xff)\n             throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }\n \n-    CScript& operator<<(const CScriptNum& b)\n+    CScript& operator<<(const CScriptNum& b) LIFETIMEBOUND\n     {\n         *this << b.getvch();\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b)\n+    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n         if (b.size() < OP_PUSHDATA1)\n         {"
      },
      {
        "sha": "eace86d9dda5ed0238176b39763f0e035a2751f6",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -9,6 +9,7 @@\n #include <sync.h>\n \n #include <logging.h>\n+#include <logging/timer.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/threadnames.h>\n@@ -23,16 +24,10 @@\n #include <utility>\n #include <vector>\n \n-#ifdef DEBUG_LOCKCONTENTION\n-#if !defined(HAVE_THREAD_LOCAL)\n-static_assert(false, \"thread_local is not supported\");\n-#endif\n-void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n+void LockContention(const char* pszName, const char* pszFile, int nLine)\n {\n-    LogPrintf(\"LOCKCONTENTION: %s\\n\", pszName);\n-    LogPrintf(\"Locker: %s:%d\\n\", pszFile, nLine);\n+    LOG_TIME_MICROS_WITH_CATEGORY(strprintf(\"%s, %s:%d\", pszName, pszFile, nLine), BCLog::LOCK);\n }\n-#endif /* DEBUG_LOCKCONTENTION */\n \n #ifdef DEBUG_LOCKORDER\n //"
      },
      {
        "sha": "bf15c0b4eb4a8d2f022eddc017bddec16693e745",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -126,9 +126,8 @@ using RecursiveMutex = AnnotatedMixin<std::recursive_mutex>;\n /** Wrapped mutex: supports waiting but not recursive locking */\n typedef AnnotatedMixin<std::mutex> Mutex;\n \n-#ifdef DEBUG_LOCKCONTENTION\n-void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n-#endif\n+/** Prints a lock contention to the log */\n+void LockContention(const char* pszName, const char* pszFile, int nLine);\n \n /** Wrapper around std::unique_lock style lock for Mutex. */\n template <typename Mutex, typename Base = typename Mutex::UniqueLock>\n@@ -138,22 +137,18 @@ class SCOPED_LOCKABLE UniqueLock : public Base\n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n         EnterCritical(pszName, pszFile, nLine, Base::mutex());\n-#ifdef DEBUG_LOCKCONTENTION\n-        if (!Base::try_lock()) {\n-            PrintLockContention(pszName, pszFile, nLine);\n-#endif\n-            Base::lock();\n-#ifdef DEBUG_LOCKCONTENTION\n-        }\n-#endif\n+        if (Base::try_lock()) return;\n+        LockContention(pszName, pszFile, nLine); // log the contention\n+        Base::lock();\n     }\n \n     bool TryEnter(const char* pszName, const char* pszFile, int nLine)\n     {\n         EnterCritical(pszName, pszFile, nLine, Base::mutex(), true);\n         Base::try_lock();\n-        if (!Base::owns_lock())\n+        if (!Base::owns_lock()) {\n             LeaveCritical();\n+        }\n         return Base::owns_lock();\n     }\n "
      },
      {
        "sha": "e2e31c62d709ce7af1ed4604f71b961df189f6d0",
        "filename": "src/test/logging_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/test/logging_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/test/logging_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/logging_tests.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n     SetMockTime(1);\n     auto micro_timer = BCLog::Timer<std::chrono::microseconds>(\"tests\", \"end_msg\");\n     SetMockTime(2);\n-    BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000.00\u03bcs)\");\n+    BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000\u03bcs)\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a62abf9b9c184273ea29fe118095be4f4f559f73",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -173,6 +173,22 @@ BOOST_AUTO_TEST_CASE(util_Join)\n     BOOST_CHECK_EQUAL(Join<std::string>({\"foo\", \"bar\"}, \", \", op_upper), \"FOO, BAR\");\n }\n \n+BOOST_AUTO_TEST_CASE(util_TrimString)\n+{\n+    BOOST_CHECK_EQUAL(TrimString(\" foo bar \"), \"foo bar\");\n+    BOOST_CHECK_EQUAL(TrimString(\"\\t \\n  \\n \\f\\n\\r\\t\\v\\tfoo \\n \\f\\n\\r\\t\\v\\tbar\\t  \\n \\f\\n\\r\\t\\v\\t\\n \"), \"foo \\n \\f\\n\\r\\t\\v\\tbar\");\n+    BOOST_CHECK_EQUAL(TrimString(\"\\t \\n foo \\n\\tbar\\t \\n \"), \"foo \\n\\tbar\");\n+    BOOST_CHECK_EQUAL(TrimString(\"\\t \\n foo \\n\\tbar\\t \\n \", \"fobar\"), \"\\t \\n foo \\n\\tbar\\t \\n \");\n+    BOOST_CHECK_EQUAL(TrimString(\"foo bar\"), \"foo bar\");\n+    BOOST_CHECK_EQUAL(TrimString(\"foo bar\", \"fobar\"), \" \");\n+    BOOST_CHECK_EQUAL(TrimString(std::string(\"\\0 foo \\0 \", 8)), std::string(\"\\0 foo \\0\", 7));\n+    BOOST_CHECK_EQUAL(TrimString(std::string(\" foo \", 5)), std::string(\"foo\", 3));\n+    BOOST_CHECK_EQUAL(TrimString(std::string(\"\\t\\t\\0\\0\\n\\n\", 6)), std::string(\"\\0\\0\", 2));\n+    BOOST_CHECK_EQUAL(TrimString(std::string(\"\\x05\\x04\\x03\\x02\\x01\\x00\", 6)), std::string(\"\\x05\\x04\\x03\\x02\\x01\\x00\", 6));\n+    BOOST_CHECK_EQUAL(TrimString(std::string(\"\\x05\\x04\\x03\\x02\\x01\\x00\", 6), std::string(\"\\x05\\x04\\x03\\x02\\x01\", 5)), std::string(\"\\0\", 1));\n+    BOOST_CHECK_EQUAL(TrimString(std::string(\"\\x05\\x04\\x03\\x02\\x01\\x00\", 6), std::string(\"\\x05\\x04\\x03\\x02\\x01\\x00\", 6)), \"\");\n+}\n+\n BOOST_AUTO_TEST_CASE(util_FormatParseISO8601DateTime)\n {\n     BOOST_CHECK_EQUAL(FormatISO8601DateTime(1317425777), \"2011-09-30T23:36:17Z\");"
      },
      {
        "sha": "846b34089dd873e4f50ced6d0c7c9c2331419e57",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -60,9 +60,15 @@ bool ReadSettings(const fs::path& path, std::map<std::string, SettingsValue>& va\n     values.clear();\n     errors.clear();\n \n+    // Ok for file to not exist\n+    if (!fs::exists(path)) return true;\n+\n     fsbridge::ifstream file;\n     file.open(path);\n-    if (!file.is_open()) return true; // Ok for file not to exist.\n+    if (!file.is_open()) {\n+      errors.emplace_back(strprintf(\"%s. Please check permissions.\", path.string()));\n+      return false;\n+    }\n \n     SettingsValue in;\n     if (!in.read(std::string{std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>()})) {"
      },
      {
        "sha": "d4fcac1d48a24a746b04a8d94e92379195f89338",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -929,7 +929,7 @@ class ChainstateManager\n     CChainState& InitializeChainstate(\n         CTxMemPool* mempool,\n         const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+        LIFETIMEBOUND EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();"
      },
      {
        "sha": "412d5ae10624e751687bd2eb98c61940dda148da",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -5,20 +5,24 @@ etc.\n \n This directory contains the following sets of tests:\n \n+- [fuzz](/test/fuzz) A runner to execute all fuzz targets from\n+  [/src/test/fuzz](/src/test/fuzz).\n - [functional](/test/functional) which test the functionality of\n bitcoind and bitcoin-qt by interacting with them through the RPC and P2P\n interfaces.\n-- [util](/test/util) which tests the bitcoin utilities, currently only\n-bitcoin-tx.\n+- [util](/test/util) which tests the utilities (bitcoin-util, bitcoin-tx, ...).\n - [lint](/test/lint/) which perform various static analysis checks.\n \n-The util tests are run as part of `make check` target. The functional\n+The util tests are run as part of `make check` target. The fuzz tests, functional\n tests and lint scripts can be run as explained in the sections below.\n \n # Running tests locally\n \n Before tests can be run locally, Bitcoin Core must be built.  See the [building instructions](/doc#building) for help.\n \n+## Fuzz tests\n+\n+See [/doc/fuzzing.md](/doc/fuzzing.md)\n \n ### Functional tests\n \n@@ -257,7 +261,7 @@ For ways to generate more granular profiles, see the README in\n \n ### Util tests\n \n-Util tests can be run locally by running `test/util/bitcoin-util-test.py`.\n+Util tests can be run locally by running `test/util/test_runner.py`.\n Use the `-v` option for verbose output.\n \n ### Lint tests\n@@ -269,7 +273,6 @@ Use the `-v` option for verbose output.\n | [`lint-python.sh`](lint/lint-python.sh) | [flake8](https://gitlab.com/pycqa/flake8) | [3.8.3](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install flake8==3.8.3`\n | [`lint-python.sh`](lint/lint-python.sh) | [mypy](https://github.com/python/mypy) | [0.781](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install mypy==0.781`\n | [`lint-shell.sh`](lint/lint-shell.sh) | [ShellCheck](https://github.com/koalaman/shellcheck) | [0.7.2](https://github.com/bitcoin/bitcoin/pull/21749) | [details...](https://github.com/koalaman/shellcheck#installing)\n-| [`lint-shell.sh`](lint/lint-shell.sh) | [yq](https://github.com/kislyuk/yq) | default | `pip3 install yq`\n | [`lint-spelling.sh`](lint/lint-spelling.sh) | [codespell](https://github.com/codespell-project/codespell) | [2.0.0](https://github.com/bitcoin/bitcoin/pull/20817) | `pip3 install codespell==2.0.0`\n \n Please be aware that on Linux distributions all dependencies are usually available as packages, but could be outdated."
      },
      {
        "sha": "db80bba6f1a620640a5689a6b5ce3e58c09d01d1",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # These environment variables are set by the build process and read by\n-# test/functional/test_runner.py and test/util/bitcoin-util-test.py\n+# test/*/test_runner.py and test/util/rpcauth-test.py\n \n [environment]\n PACKAGE_NAME=@PACKAGE_NAME@"
      },
      {
        "sha": "13f33c321fc91aa274d3c223f9aa5c5d400f3660",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -57,7 +57,7 @@ def run_test(self):\n         self.log.info(\"test logging rpc and help\")\n \n         # Test logging RPC returns the expected number of logging categories.\n-        assert_equal(len(node.logging()), 24)\n+        assert_equal(len(node.logging()), 25)\n \n         # Test toggling a logging category on/off/on with the logging RPC.\n         assert_equal(node.logging()['qt'], True)"
      },
      {
        "sha": "d6312270e70411e55eed5f8a24649e632c153674",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "patch": "@@ -39,10 +39,8 @@ export LC_ALL=C\n \n KNOWN_VIOLATIONS=(\n     \"src/bitcoin-tx.cpp.*stoul\"\n-    \"src/bitcoin-tx.cpp.*trim_right\"\n     \"src/dbwrapper.cpp.*stoul\"\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n-    \"src/httprpc.cpp.*trim\"\n     \"src/node/blockstorage.cpp:.*atoi\"\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\""
      },
      {
        "sha": "aa8fd6eee5982074ae8b7aee596c6314ce5ebc4b",
        "filename": "test/util/test_runner.py",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/util/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72d61fddff1476b14cb40a548311ea7c87d52ca/test/util/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/test_runner.py?ref=b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "previous_filename": "test/util/bitcoin-util-test.py"
      }
    ]
  },
  {
    "sha": "c43fd4f44d3ed6291974c3150d6b150a05e1665e",
    "node_id": "C_kwDOABII59oAKGM0M2ZkNGY0NGQzZWQ2MjkxOTc0YzMxNTBkNmIxNTBhMDVlMTY2NWU",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-28T14:58:07Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-09-28T14:58:07Z"
      },
      "message": "Improve wallet.py",
      "tree": {
        "sha": "5fbcf2068ddbe912f8e438224e5789f9e3d61895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fbcf2068ddbe912f8e438224e5789f9e3d61895"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c43fd4f44d3ed6291974c3150d6b150a05e1665e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c43fd4f44d3ed6291974c3150d6b150a05e1665e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c43fd4f44d3ed6291974c3150d6b150a05e1665e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c43fd4f44d3ed6291974c3150d6b150a05e1665e/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72d61fddff1476b14cb40a548311ea7c87d52ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72d61fddff1476b14cb40a548311ea7c87d52ca"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "555a5d94136ed2c83df06f3f14ca8cc48c6c13f9",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c43fd4f44d3ed6291974c3150d6b150a05e1665e/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c43fd4f44d3ed6291974c3150d6b150a05e1665e/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=c43fd4f44d3ed6291974c3150d6b150a05e1665e",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"A limited-functionality wallet, which may replace a real wallet in tests\"\"\"\n \n-from copy import deepcopy\n from decimal import Decimal\n from enum import Enum\n from random import choice"
      }
    ]
  },
  {
    "sha": "a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
    "node_id": "C_kwDOABII59oAKGE2NWNkNjM0NDlkYTJjOGVhYTRjMmM5NWE1NDUwMDg2YTJjMDZkOTQ",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-10-05T07:55:32Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-10-05T07:55:32Z"
      },
      "message": "Rename make_chain() in wallet.py",
      "tree": {
        "sha": "19169eb4ec4aef690407a685020c19389877d3a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19169eb4ec4aef690407a685020c19389877d3a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c43fd4f44d3ed6291974c3150d6b150a05e1665e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c43fd4f44d3ed6291974c3150d6b150a05e1665e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c43fd4f44d3ed6291974c3150d6b150a05e1665e"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "32a79a291acf823c6919031c5936a3471e99cc0c",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n \n from decimal import Decimal\n-\n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import (\n@@ -25,7 +24,7 @@\n from test_framework.wallet import (\n     bulk_transaction,\n     create_child_with_parents,\n-    make_chain,\n+    create_child,\n )\n \n class MempoolPackageLimitsTest(BitcoinTestFramework):\n@@ -70,7 +69,7 @@ def test_chain_limits_helper(self, mempool_count, package_count):\n         value = first_coin[\"amount\"]\n \n         for i in range(mempool_count + package_count):\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n+            (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < mempool_count:\n                 node.sendrawtransaction(txhex)\n@@ -142,7 +141,7 @@ def test_desc_count_limits(self):\n         value = parent_value\n         txid = parent_txid\n         for i in range(12):\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n+            (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < 11: # M2a... M12a\n                 node.sendrawtransaction(txhex)\n@@ -160,7 +159,7 @@ def test_desc_count_limits(self):\n         spk = tx_child_b.vout[0].scriptPubKey.hex()\n         txid = tx_child_b.rehash()\n         for i in range(12):\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n+            (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < 11: # M3b... M13b\n                 node.sendrawtransaction(txhex)\n@@ -209,7 +208,7 @@ def test_anc_count_limits(self):\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n             for i in range(13):\n-                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n+                (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n                 if i < 12:\n                     node.sendrawtransaction(txhex)\n@@ -263,7 +262,7 @@ def test_anc_count_limits_2(self):\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n             for i in range(12):\n-                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n+                (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n                 node.sendrawtransaction(txhex)\n                 if i == 11:\n@@ -279,7 +278,7 @@ def test_anc_count_limits_2(self):\n         pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n \n         # Child Pd\n-        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk)\n+        (_, pd_hex, _, _) = create_child(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk)\n \n         assert_equal(24, node.getmempoolinfo()[\"size\"])\n         testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n@@ -315,7 +314,7 @@ def test_anc_count_limits_bushy(self):\n                 parent_coin = self.coins.pop()\n                 value = parent_coin[\"amount\"]\n                 txid = parent_coin[\"txid\"]\n-                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n+                (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value)\n                 grandparent_txs.append(tx)\n                 grandparent_values.append(value)\n                 grandparent_scripts.append(spk)\n@@ -365,7 +364,7 @@ def test_anc_size_limits(self):\n             top_coin = self.coins.pop()\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n-            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n+            (tx, _, _, _) = create_child(node, self.address, self.privkeys, txid, value, spk, high_fee)\n             bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n             node.sendrawtransaction(bulked_tx.serialize().hex())\n             parents_tx.append(bulked_tx)\n@@ -380,7 +379,7 @@ def test_anc_size_limits(self):\n         pc_hex = pc_tx.serialize().hex()\n \n         # Package transaction D\n-        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk, high_fee)\n+        (small_pd, _, val, spk) = create_child(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk, high_fee)\n         prevtxs = [{\n             \"txid\": pc_tx.rehash(),\n             \"vout\": 0,\n@@ -437,7 +436,7 @@ def test_desc_size_limits(self):\n                 \"amount\": value,\n             }]\n             if j == 0: # normal key\n-                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n+                (tx_small, _, _, _) = create_child(node, self.address, self.privkeys, txid, value, spk, high_fee)\n                 mempool_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n             else: # OP_TRUE\n                 inputs = [{\"txid\": txid, \"vout\": 1}]\n@@ -450,7 +449,7 @@ def test_desc_size_limits(self):\n             spk = mempool_tx.vout[0].scriptPubKey.hex()\n             value = Decimal(mempool_tx.vout[0].nValue) / COIN\n             txid = mempool_tx.rehash()\n-            (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n+            (tx_small, _, _, _) = create_child(node, self.address, self.privkeys, txid, value, spk, high_fee)\n             prevtxs = [{\n                 \"txid\": txid,\n                 \"vout\": 0,"
      },
      {
        "sha": "aa08dbafd7f3f803591d8b71b0a9b96cb7ecfde9",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
        "patch": "@@ -25,7 +25,7 @@\n from test_framework.wallet import (\n     create_child_with_parents,\n     create_raw_chain,\n-    make_chain,\n+    create_child,\n )\n \n class RPCPackagesTest(BitcoinTestFramework):\n@@ -173,7 +173,7 @@ def test_multiple_children(self):\n         child_value = value - Decimal(\"0.0001\")\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n+        (_, tx_child_a_hex, _, _) = create_child(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n         assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n \n         # Child B\n@@ -212,7 +212,7 @@ def test_multiple_parents(self):\n             for _ in range(num_parents):\n                 parent_coin = self.coins.pop()\n                 value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n+                (tx, txhex, value, parent_locking_script) = create_child(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n                 package_hex.append(txhex)\n                 parents_tx.append(tx)\n                 values.append(value)"
      },
      {
        "sha": "59614253c26f08a5cd027a693707ec11e9d09c31",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a65cd63449da2c8eaa4c2c95a5450086a2c06d94/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
        "patch": "@@ -181,7 +181,7 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n-def make_chain(node, address, privkeys, parent_txid, parent_value, parent_locking_script=None, fee=DEFAULT_FEE):\n+def create_child(node, address, privkeys, parent_txid, parent_value, parent_locking_script=None, fee=DEFAULT_FEE):\n     \"\"\"Build a transaction that spends parent_txid.vout[0] and produces one output with\n     amount = parent_value with a fee deducted.\n     Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n@@ -228,7 +228,7 @@ def create_raw_chain(node, first_coin, address, privkeys, chain_length):\n     value = first_coin[\"amount\"]\n \n     for _ in range(chain_length):\n-        (tx, txhex, value, parent_locking_script) = make_chain(node, address, privkeys, txid, value, 0, parent_locking_script)\n+        (tx, txhex, value, parent_locking_script) = create_child(node, address, privkeys, txid, value, 0, parent_locking_script)\n         txid = tx.rehash()\n         chain_hex.append(txhex)\n         chain_txns.append(tx)"
      }
    ]
  },
  {
    "sha": "269aeea72eaeb4e2919a1eff0356c10d42959160",
    "node_id": "C_kwDOABII59oAKDI2OWFlZWE3MmVhZWI0ZTI5MTlhMWVmZjAzNTZjMTBkNDI5NTkxNjA",
    "commit": {
      "author": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-10-05T08:16:18Z"
      },
      "committer": {
        "name": "naiza",
        "email": "naiza@iitk.ac.in",
        "date": "2021-10-05T08:16:18Z"
      },
      "message": "resolve issues",
      "tree": {
        "sha": "5fbcf2068ddbe912f8e438224e5789f9e3d61895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fbcf2068ddbe912f8e438224e5789f9e3d61895"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/269aeea72eaeb4e2919a1eff0356c10d42959160",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269aeea72eaeb4e2919a1eff0356c10d42959160",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/269aeea72eaeb4e2919a1eff0356c10d42959160",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269aeea72eaeb4e2919a1eff0356c10d42959160/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a65cd63449da2c8eaa4c2c95a5450086a2c06d94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a65cd63449da2c8eaa4c2c95a5450086a2c06d94"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "035bc9d556f2a8deb0fbd3f707d0fa77e66f4fd6",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269aeea72eaeb4e2919a1eff0356c10d42959160/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269aeea72eaeb4e2919a1eff0356c10d42959160/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=269aeea72eaeb4e2919a1eff0356c10d42959160",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n \n from decimal import Decimal\n+\n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import (\n@@ -24,7 +25,7 @@\n from test_framework.wallet import (\n     bulk_transaction,\n     create_child_with_parents,\n-    create_child,\n+    make_chain,\n )\n \n class MempoolPackageLimitsTest(BitcoinTestFramework):\n@@ -69,7 +70,7 @@ def test_chain_limits_helper(self, mempool_count, package_count):\n         value = first_coin[\"amount\"]\n \n         for i in range(mempool_count + package_count):\n-            (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < mempool_count:\n                 node.sendrawtransaction(txhex)\n@@ -141,7 +142,7 @@ def test_desc_count_limits(self):\n         value = parent_value\n         txid = parent_txid\n         for i in range(12):\n-            (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < 11: # M2a... M12a\n                 node.sendrawtransaction(txhex)\n@@ -159,7 +160,7 @@ def test_desc_count_limits(self):\n         spk = tx_child_b.vout[0].scriptPubKey.hex()\n         txid = tx_child_b.rehash()\n         for i in range(12):\n-            (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n             txid = tx.rehash()\n             if i < 11: # M3b... M13b\n                 node.sendrawtransaction(txhex)\n@@ -208,7 +209,7 @@ def test_anc_count_limits(self):\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n             for i in range(13):\n-                (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n                 if i < 12:\n                     node.sendrawtransaction(txhex)\n@@ -262,7 +263,7 @@ def test_anc_count_limits_2(self):\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n             for i in range(12):\n-                (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value, spk)\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, spk)\n                 txid = tx.rehash()\n                 node.sendrawtransaction(txhex)\n                 if i == 11:\n@@ -278,7 +279,7 @@ def test_anc_count_limits_2(self):\n         pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n \n         # Child Pd\n-        (_, pd_hex, _, _) = create_child(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk)\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk)\n \n         assert_equal(24, node.getmempoolinfo()[\"size\"])\n         testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n@@ -314,7 +315,7 @@ def test_anc_count_limits_bushy(self):\n                 parent_coin = self.coins.pop()\n                 value = parent_coin[\"amount\"]\n                 txid = parent_coin[\"txid\"]\n-                (tx, txhex, value, spk) = create_child(node, self.address, self.privkeys, txid, value)\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n                 grandparent_txs.append(tx)\n                 grandparent_values.append(value)\n                 grandparent_scripts.append(spk)\n@@ -364,7 +365,7 @@ def test_anc_size_limits(self):\n             top_coin = self.coins.pop()\n             txid = top_coin[\"txid\"]\n             value = top_coin[\"amount\"]\n-            (tx, _, _, _) = create_child(node, self.address, self.privkeys, txid, value, spk, high_fee)\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n             bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n             node.sendrawtransaction(bulked_tx.serialize().hex())\n             parents_tx.append(bulked_tx)\n@@ -379,7 +380,7 @@ def test_anc_size_limits(self):\n         pc_hex = pc_tx.serialize().hex()\n \n         # Package transaction D\n-        (small_pd, _, val, spk) = create_child(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk, high_fee)\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, pc_spk, high_fee)\n         prevtxs = [{\n             \"txid\": pc_tx.rehash(),\n             \"vout\": 0,\n@@ -436,7 +437,7 @@ def test_desc_size_limits(self):\n                 \"amount\": value,\n             }]\n             if j == 0: # normal key\n-                (tx_small, _, _, _) = create_child(node, self.address, self.privkeys, txid, value, spk, high_fee)\n+                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n                 mempool_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n             else: # OP_TRUE\n                 inputs = [{\"txid\": txid, \"vout\": 1}]\n@@ -449,7 +450,7 @@ def test_desc_size_limits(self):\n             spk = mempool_tx.vout[0].scriptPubKey.hex()\n             value = Decimal(mempool_tx.vout[0].nValue) / COIN\n             txid = mempool_tx.rehash()\n-            (tx_small, _, _, _) = create_child(node, self.address, self.privkeys, txid, value, spk, high_fee)\n+            (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, spk, high_fee)\n             prevtxs = [{\n                 \"txid\": txid,\n                 \"vout\": 0,"
      },
      {
        "sha": "16e979c7b1a32b911a098abeb60dd7edfca94e68",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269aeea72eaeb4e2919a1eff0356c10d42959160/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269aeea72eaeb4e2919a1eff0356c10d42959160/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=269aeea72eaeb4e2919a1eff0356c10d42959160",
        "patch": "@@ -25,7 +25,7 @@\n from test_framework.wallet import (\n     create_child_with_parents,\n     create_raw_chain,\n-    create_child,\n+    make_chain,\n )\n \n class RPCPackagesTest(BitcoinTestFramework):\n@@ -173,7 +173,7 @@ def test_multiple_children(self):\n         child_value = value - Decimal(\"0.0001\")\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = create_child(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n+        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n         assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n \n         # Child B\n@@ -212,7 +212,7 @@ def test_multiple_parents(self):\n             for _ in range(num_parents):\n                 parent_coin = self.coins.pop()\n                 value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = create_child(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n+                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n                 package_hex.append(txhex)\n                 parents_tx.append(tx)\n                 values.append(value)"
      },
      {
        "sha": "555a5d94136ed2c83df06f3f14ca8cc48c6c13f9",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269aeea72eaeb4e2919a1eff0356c10d42959160/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269aeea72eaeb4e2919a1eff0356c10d42959160/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=269aeea72eaeb4e2919a1eff0356c10d42959160",
        "patch": "@@ -181,7 +181,7 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n-def create_child(node, address, privkeys, parent_txid, parent_value, parent_locking_script=None, fee=DEFAULT_FEE):\n+def make_chain(node, address, privkeys, parent_txid, parent_value, parent_locking_script=None, fee=DEFAULT_FEE):\n     \"\"\"Build a transaction that spends parent_txid.vout[0] and produces one output with\n     amount = parent_value with a fee deducted.\n     Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n@@ -228,7 +228,7 @@ def create_raw_chain(node, first_coin, address, privkeys, chain_length):\n     value = first_coin[\"amount\"]\n \n     for _ in range(chain_length):\n-        (tx, txhex, value, parent_locking_script) = create_child(node, address, privkeys, txid, value, 0, parent_locking_script)\n+        (tx, txhex, value, parent_locking_script) = make_chain(node, address, privkeys, txid, value, 0, parent_locking_script)\n         txid = tx.rehash()\n         chain_hex.append(txhex)\n         chain_txns.append(tx)"
      }
    ]
  },
  {
    "sha": "adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
    "node_id": "C_kwDOABII59oAKGFkYjFjNWQ0ZWQyOTk1NTYwYjAwNTc1YTNiM2FlZWUxNzg2ZGZiZmI",
    "commit": {
      "author": {
        "name": "Naiza Singla",
        "email": "naiza@iitk.ac.in",
        "date": "2021-10-05T08:16:43Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-10-05T08:16:43Z"
      },
      "message": "Merge branch 'bitcoin:master' into master",
      "tree": {
        "sha": "3a05f0bef569095eba84483b835cd1e6bd5b58da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a05f0bef569095eba84483b835cd1e6bd5b58da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXAnrCRBK7hj4Ov3rIwAA5MAIAAeumsPjwBZPm1hjGN8Hq2Xt\nhWPwgezQo+aOfFheEJZnyfo1XUd/1vPag5I5Nuck4tPmcX7WYN6TZaAfiHyRjEPx\n3k4Pma3ndMpds7NSgrTSBTjsoe8C5cW+shF6u/S5HMzOdm3iAiIHfgElAxb9NRAW\n/BqPFgnDw0nz8/JhliqruAAOrZsAQhz+v6gkuMRuyCp5jqaqZYc5nqc/IDLsAxJ7\npxN9D7luu7ZD5nQt5q4hb95YnhV2xxUPK3PQbg6InQsIuRyKy82i1J3CDq/f4O6/\nG35S58MFE/2G1X9p822gtZ3T20xtOSoumRcyW2Y5jYmGUoB6RVY9im1aiT7MyBg=\n=zBkK\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 3a05f0bef569095eba84483b835cd1e6bd5b58da\nparent 269aeea72eaeb4e2919a1eff0356c10d42959160\nparent 816e15ee81a2029cde6b4f9fe6fb93e75478c903\nauthor Naiza Singla <naiza@iitk.ac.in> 1633421803 +0530\ncommitter GitHub <noreply@github.com> 1633421803 +0530\n\nMerge branch 'bitcoin:master' into master\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "269aeea72eaeb4e2919a1eff0356c10d42959160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269aeea72eaeb4e2919a1eff0356c10d42959160",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/269aeea72eaeb4e2919a1eff0356c10d42959160"
      },
      {
        "sha": "816e15ee81a2029cde6b4f9fe6fb93e75478c903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816e15ee81a2029cde6b4f9fe6fb93e75478c903",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816e15ee81a2029cde6b4f9fe6fb93e75478c903"
      }
    ],
    "stats": {
      "total": 11127,
      "additions": 7511,
      "deletions": 3616
    },
    "files": [
      {
        "sha": "a85ec4c3803f94dff07aa326e85df90f20f27232",
        "filename": ".appveyor.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269aeea72eaeb4e2919a1eff0356c10d42959160/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269aeea72eaeb4e2919a1eff0356c10d42959160/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=269aeea72eaeb4e2919a1eff0356c10d42959160",
        "patch": "@@ -1,63 +0,0 @@\n-version: '{branch}.{build}'\n-skip_tags: true\n-image: Visual Studio 2019\n-configuration: Release\n-platform: x64\n-clone_depth: 5\n-environment:\n-  PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n-  PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51211x64_static_vs2019_16101/Qt5.12.11_x64_static_vs2019_16101.zip'\n-  QT_DOWNLOAD_HASH: 'cf1b58107fadbf0d9a957d14dab16cde6b6eb6936a1908472da1f967dda34a3a'\n-  QT_LOCAL_PATH: 'C:\\Qt5.12.11_x64_static_vs2019_16101'\n-  VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n-install:\n-# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n-# - cmd: pip install zmq\n-# The powershell block below is to set up vcpkg to install the c++ dependencies. The pseudo code is:\n-#    a. Checkout the vcpkg source (including port files) for the specific checkout and build the vcpkg binary,\n-#    b. Append a setting to the vcpkg cmake config file to only do release builds of dependencies (skipping deubg builds saves ~5 mins).\n-# Note originally this block also installed the dependencies using 'vcpkg install'. Dependencies are now installed\n-# as part of the msbuild command using vcpkg mainfests.\n-- ps: |\n-      cd c:\\tools\\vcpkg\n-      $env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.\n-      git -c advice.detachedHead=false checkout $env:VCPKG_TAG\n-      .\\bootstrap-vcpkg.bat > $null\n-      Add-Content \"C:\\tools\\vcpkg\\triplets\\$env:PLATFORM-windows-static.cmake\" \"set(VCPKG_BUILD_TYPE release)\"\n-      cd \"$env:APPVEYOR_BUILD_FOLDER\"\n-before_build:\n-# Powershell block below is to download and extract the Qt static libraries. The pseudo code is:\n-#    a. Download the zip file with the prebuilt Qt static libraries.\n-#    b. Check that the downloaded file matches the expected hash.\n-#    c. Extract the zip file to the specific destination path expected by the msbuild projects.\n-- ps: |\n-      Write-Host \"Downloading Qt binaries.\";\n-      Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n-      Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n-      if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n-        Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n-        Write-Host \"Qt binary download matched the expected hash.\";\n-      }\n-      else {\n-        Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n-        Exit-AppveyorBuild;\n-      }\n-- cmd: python build_msvc\\msvc-autogen.py\n-build_script:\n-- cmd: msbuild /p:TrackFileAccess=false build_msvc\\bitcoin.sln /m /v:q /nologo\n-after_build:\n-#- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n-test_script:\n-- cmd: src\\test_bitcoin.exe -l test_suite\n-- cmd: src\\bench_bitcoin.exe > NUL\n-- ps:  python test\\util\\test_runner.py\n-- cmd: python test\\util\\rpcauth-test.py\n-# Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted.\n-# functional tests disabled for now. See\n-# https://github.com/bitcoin/bitcoin/pull/18626#issuecomment-613396202\n-# https://github.com/bitcoin/bitcoin/issues/18623\n-# - cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n-artifacts:\n-#- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n-deploy: off"
      },
      {
        "sha": "48747ac138286750acf996f540c46a19df6ead1d",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 90,
        "deletions": 26,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -1,6 +1,4 @@\n-### Global defaults\n-\n-env:\n+env:  # Global defaults\n   PACKAGE_MANAGER_INSTALL: \"apt-get update && apt-get install -y\"\n   MAKEJOBS: \"-j4\"\n   TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n@@ -18,8 +16,12 @@ persistent_worker_template: &PERSISTENT_WORKER_TEMPLATE\n   persistent_worker: {}  # https://cirrus-ci.org/guide/persistent-workers/\n \n # https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks\n-base_template: &BASE_TEMPLATE\n+filter_template: &FILTER_TEMPLATE\n   skip: $CIRRUS_REPO_FULL_NAME == \"bitcoin-core/gui\" && $CIRRUS_PR == \"\"  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution\n+  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks\n+\n+base_template: &BASE_TEMPLATE\n+  << : *FILTER_TEMPLATE\n   merge_base_script:\n     # Unconditionally install git (used in fingerprint_script) and set the\n     # default git author name (used in verify-commits.py)\n@@ -29,7 +31,6 @@ base_template: &BASE_TEMPLATE\n     - if [ \"$CIRRUS_PR\" = \"\" ]; then exit 0; fi\n     - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH\n     - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts\n-  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks\n \n main_template: &MAIN_TEMPLATE\n   timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out\n@@ -59,22 +60,6 @@ compute_credits_template: &CREDITS_TEMPLATE\n   # Only use credits for pull requests to the main repo\n   use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != \"\"\n \n-#task:\n-#  name: \"Windows\"\n-#  windows_container:\n-#    image: cirrusci/windowsservercore:2019\n-#  env:\n-#    CIRRUS_SHELL: powershell\n-#    PATH: 'C:\\Python37;C:\\Python37\\Scripts;%PATH%'\n-#    PYTHONUTF8: 1\n-#    QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.6/Qt5.9.8_x64_static_vs2019.zip'\n-#    QT_DOWNLOAD_HASH: '9a8c6eb20967873785057fdcd329a657c7f922b0af08c5fde105cc597dd37e21'\n-#    QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n-#    VCPKG_INSTALL_PATH: 'C:\\tools\\vcpkg\\installed'\n-#    VCPKG_COMMIT_ID: 'ed0df8ecc4ed7e755ea03e18aaf285fd9b4b4a74'\n-#  install_script:\n-#    - choco install python --version=3.7.7 -y\n-\n task:\n   name: 'lint [bionic]'\n   << : *BASE_TEMPLATE\n@@ -90,10 +75,89 @@ task:\n     << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n \n task:\n-  name: 'ARM [unit tests, no functional tests] [buster]'\n+  name: \"Win64 native [msvc]\"\n+  << : *FILTER_TEMPLATE\n+  windows_container:\n+    cpu: 4\n+    memory: 16G\n+    image: cirrusci/windowsservercore:visualstudio2019\n+  timeout_in: 120m\n+  env:\n+    PATH: 'C:\\jom;C:\\Python39;C:\\Python39\\Scripts;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin;%PATH%'\n+    PYTHONUTF8: 1\n+    VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n+    VCPKG_FEATURE_FLAGS: 'manifests'\n+    QT_DOWNLOAD_URL: 'https://download.qt.io/official_releases/qt/5.12/5.12.11/single/qt-everywhere-src-5.12.11.zip'\n+    QT_LOCAL_PATH: 'C:\\qt-everywhere-src-5.12.11.zip'\n+    QT_SOURCE_DIR: 'C:\\qt-everywhere-src-5.12.11'\n+    QTBASEDIR: 'C:\\Qt5.12.11_x64_static_vs2019_160900'\n+    x64_NATIVE_TOOLS: '\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\"'\n+    IgnoreWarnIntDirInTempDetected: 'true'\n+  merge_script:\n+    - git config --global user.email \"ci@ci.ci\"\n+    - git config --global user.name \"ci\"\n+    # Windows filesystem loses the executable bit, and all of the executable\n+    # files are considered \"modified\" now. It will break the following `git merge`\n+    # command. The next two commands make git ignore this issue.\n+    - git config core.filemode false\n+    - git reset --hard\n+    - PowerShell -NoLogo -Command if ($env:CIRRUS_PR -ne $null) { git fetch $env:CIRRUS_REPO_CLONE_URL $env:CIRRUS_BASE_BRANCH; git merge FETCH_HEAD; }\n+  msvc_qt_built_cache:\n+    folder: \"%QTBASEDIR%\"\n+    reupload_on_changes: false\n+    fingerprint_script:\n+      - echo %QT_DOWNLOAD_URL%\n+      - msbuild -version\n+    populate_script:\n+      - curl -L -o C:\\jom.zip http://download.qt.io/official_releases/jom/jom.zip\n+      - mkdir C:\\jom\n+      - tar -xf C:\\jom.zip -C C:\\jom\n+      - curl -L -o %QT_LOCAL_PATH% %QT_DOWNLOAD_URL%\n+      - tar -xf %QT_LOCAL_PATH% -C C:\\\n+      - '%x64_NATIVE_TOOLS%'\n+      - cd %QT_SOURCE_DIR%\n+      - mkdir build\n+      - cd build\n+      - ..\\configure -release -silent -opensource -confirm-license -opengl desktop -no-shared -static -static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -no-libjpeg -nomake examples -nomake tests -nomake tools -no-dbus -no-libudev -no-icu -no-gtk -no-opengles3 -no-angle -no-sql-sqlite -no-sql-odbc -no-sqlite -no-libudev -no-vulkan -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -no-openssl -no-feature-sql -no-feature-sqlmodel -prefix %QTBASEDIR%\n+      - jom\n+      - jom install\n+  vcpkg_cache:\n+    folder: 'C:\\Users\\ContainerAdministrator\\AppData\\Local\\vcpkg\\archives'\n+  install_python_script:\n+    - choco install --yes --no-progress python3 --version=3.9.6\n+    - pip install zmq\n+    - python -VV\n+  install_vcpkg_script:\n+    - cd ..\n+    - git clone --quiet https://github.com/microsoft/vcpkg.git\n+    - cd vcpkg\n+    - git -c advice.detachedHead=false checkout %VCPKG_TAG%\n+    - .\\bootstrap-vcpkg -disableMetrics\n+    - echo set(VCPKG_BUILD_TYPE release) >> triplets\\x64-windows-static.cmake\n+    - .\\vcpkg integrate install\n+    - .\\vcpkg version\n+  build_script:\n+    - cd %CIRRUS_WORKING_DIR%\n+    - python build_msvc\\msvc-autogen.py\n+    - msbuild build_msvc\\bitcoin.sln -property:Configuration=Release -maxCpuCount -verbosity:minimal -noLogo\n+  unit_tests_script:\n+    - src\\test_bitcoin.exe -l test_suite\n+    - src\\bench_bitcoin.exe > NUL\n+    - python test\\util\\test_runner.py\n+    - python test\\util\\rpcauth-test.py\n+  functional_tests_script:\n+    # Increase the dynamic port range to the maximum allowed value to mitigate \"OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted\".\n+    # See: https://docs.microsoft.com/en-us/biztalk/technical-guides/settings-that-can-be-modified-to-improve-network-performance\n+    - netsh int ipv4 set dynamicport tcp start=1025 num=64511\n+    - netsh int ipv6 set dynamicport tcp start=1025 num=64511\n+    # Exclude feature_dbcrash for now due to timeout\n+    - python test\\functional\\test_runner.py --nocleanup --ci --quiet --combinedlogslen=4000 --jobs=4 --timeout-factor=8 --failfast --extended --exclude feature_dbcrash\n+\n+task:\n+  name: 'ARM [unit tests, no functional tests] [bullseye]'\n   << : *GLOBAL_TASK_TEMPLATE\n   arm_container:\n-    image: debian:buster\n+    image: debian:bullseye\n     cpu: 2\n     memory: 8G\n   env:\n@@ -174,7 +238,7 @@ task:\n     FILE_ENV: \"./ci/test/00_setup_env_native_fuzz.sh\"\n \n task:\n-  name: '[multiprocess, DEBUG] [focal]'\n+  name: '[multiprocess, i686, DEBUG] [focal]'\n   << : *GLOBAL_TASK_TEMPLATE\n   container:\n     image: ubuntu:focal\n@@ -183,7 +247,7 @@ task:\n   env:\n     << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     MAKEJOBS: \"-j8\"\n-    FILE_ENV: \"./ci/test/00_setup_env_native_multiprocess.sh\"\n+    FILE_ENV: \"./ci/test/00_setup_env_i686_multiprocess.sh\"\n \n task:\n   name: '[no wallet] [bionic]'\n@@ -195,7 +259,7 @@ task:\n     FILE_ENV: \"./ci/test/00_setup_env_native_nowallet.sh\"\n \n task:\n-  name: 'macOS 10.14 [gui, no tests] [focal]'\n+  name: 'macOS 10.15 [gui, no tests] [focal]'\n   << : *DEPENDS_SDK_CACHE_TEMPLATE\n   << : *GLOBAL_TASK_TEMPLATE\n   container:"
      },
      {
        "sha": "ae7e92d1c8a82be207df3edd31d18ad37a99822c",
        "filename": ".editorconfig",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/.editorconfig",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/.editorconfig",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.editorconfig?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -13,7 +13,7 @@ trim_trailing_whitespace = true\n [*.{h,cpp,py,sh}]\n indent_size = 4\n \n-# .cirrus.yml, .appveyor.yml, .fuzzbuzz.yml, etc.\n+# .cirrus.yml, .fuzzbuzz.yml, etc.\n [*.yml]\n indent_size = 2\n "
      },
      {
        "sha": "acf5cc08d1719f7b74ede0c072f7c554d4196255",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -60,8 +60,8 @@ Most communication about Bitcoin Core development happens on IRC, in the\n `#bitcoin-core-dev` channel on Libera Chat. The easiest way to participate on IRC is\n with the web client, [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev). Chat\n history logs can be found\n-on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n-and [http://gnusha.org/bitcoin-core-dev/](http://gnusha.org/bitcoin-core-dev/).\n+on [https://www.erisian.com.au/bitcoin-core-dev/](https://www.erisian.com.au/bitcoin-core-dev/)\n+and [https://gnusha.org/bitcoin-core-dev/](https://gnusha.org/bitcoin-core-dev/).\n \n Discussion about codebase improvements happens in GitHub issues and pull\n requests."
      },
      {
        "sha": "4cead0303612f95828d392c137435947faced697",
        "filename": "INSTALL.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -1,5 +1 @@\n-Building Bitcoin\n-================\n-\n-See doc/build-*.md for instructions on building the various\n-elements of the Bitcoin Core reference implementation of Bitcoin.\n+See [doc/build-\\*.md](/doc)\n\\ No newline at end of file"
      },
      {
        "sha": "c3705f6b03757da40f299c278d614807b34602a3",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -39,7 +39,7 @@ In order to build Bitcoin Core a static build of Qt is required. The runtime lib\n \n Some prebuilt x64 versions of Qt can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware these downloads are NOT officially sanctioned by Bitcoin Core and are provided for developer convenience only. They should NOT be used for builds that will be used in a production environment or with real funds.\n \n-To determine which Qt prebuilt version to download open the `.appveyor.yml` file and note the `QT_DOWNLOAD_URL`. When extracting the zip file the destination path must be set to `C:\\`. This is due to the way that Qt includes, libraries and tools use internal paths.\n+To determine which Qt prebuilt version to download open the `.cirrus.yml` file and note the `QT_DOWNLOAD_URL`. When extracting the zip file the destination path must be set to `C:\\`. This is due to the way that Qt includes, libraries and tools use internal paths.\n \n To build Bitcoin Core without Qt unload or disable the `bitcoin-qt`, `libbitcoin_qt` and `test_bitcoin-qt` projects.\n \n@@ -65,17 +65,6 @@ msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n \n - Alternatively, open the `build_msvc/bitcoin.sln` file in Visual Studio 2019.\n \n-AppVeyor\n----------------------\n-The .appveyor.yml in the root directory is suitable to perform builds on [AppVeyor](https://www.appveyor.com/) Continuous Integration servers. The simplest way to perform an AppVeyor build is to fork Bitcoin Core and then configure a new AppVeyor Project pointing to the forked repository.\n-\n-For safety reasons the Bitcoin Core .appveyor.yml file has the artifact options disabled. The build will be performed but no executable files will be available. To enable artifacts on a forked repository uncomment the lines shown below:\n-\n-```\n-    #- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n-    #- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n-```\n-\n Security\n ---------------------\n [Base address randomization](https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?view=msvc-160) is used to make Bitcoin Core more secure. When building Bitcoin using the `build_msvc` process base address randomization can be disabled by editing `common.init.vcproj` to change `RandomizedBaseAddress` from `true` to `false` and then rebuilding the project."
      },
      {
        "sha": "724dae19698c525e39faec226ae4fa487e04077c",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,6 +9,7 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\qt\\main.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\" />\n     <ResourceCompile Include=\"..\\..\\src\\qt\\res\\bitcoin-qt-res.rc\" />\n   </ItemGroup>\n   <ItemGroup>"
      },
      {
        "sha": "8a0964824bcd8ebb4faffaf330768fc8892b6345",
        "filename": "build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-util/bitcoin-util.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n <Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n   <Import Project=\"..\\common.init.vcxproj\" />\n   <PropertyGroup Label=\"Globals\">\n-    <ProjectGuid>{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}</ProjectGuid>\n+    <ProjectGuid>{57A04EC9-542A-4E40-83D0-AC3BE1F36805}</ProjectGuid>\n   </PropertyGroup>\n   <PropertyGroup Label=\"Configuration\">\n     <ConfigurationType>Application</ConfigurationType>"
      },
      {
        "sha": "1b1f27a8a9ec64cc189817cd6e145cd546f8263d",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 5,
        "deletions": 95,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -32,7 +32,7 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-util\", \"bitcoin-util\\bitcoin-util.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-util\", \"bitcoin-util\\bitcoin-util.vcxproj\", \"{57A04EC9-542A-4E40-83D0-AC3BE1F36805}\"\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n EndProject\n@@ -53,195 +53,105 @@ EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n-        Debug|x86 = Debug|x86\n         Release|x64 = Release|x64\n-        Release|x86 = Release|x86\n     EndGlobalSection\n     GlobalSection(ProjectConfigurationPlatforms) = postSolution\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x64.ActiveCfg = Debug|x64\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x64.Build.0 = Debug|x64\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x86.ActiveCfg = Debug|Win32\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x86.Build.0 = Debug|Win32\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x64.ActiveCfg = Release|x64\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x64.Build.0 = Release|x64\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x86.ActiveCfg = Release|Win32\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x86.Build.0 = Release|Win32\n         {E78473E9-B850-456C-9120-276301E04C06}.Debug|x64.ActiveCfg = Debug|x64\n         {E78473E9-B850-456C-9120-276301E04C06}.Debug|x64.Build.0 = Debug|x64\n-        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x86.ActiveCfg = Debug|Win32\n-        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x86.Build.0 = Debug|Win32\n         {E78473E9-B850-456C-9120-276301E04C06}.Release|x64.ActiveCfg = Release|x64\n         {E78473E9-B850-456C-9120-276301E04C06}.Release|x64.Build.0 = Release|x64\n-        {E78473E9-B850-456C-9120-276301E04C06}.Release|x86.ActiveCfg = Release|Win32\n-        {E78473E9-B850-456C-9120-276301E04C06}.Release|x86.Build.0 = Release|Win32\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x64.ActiveCfg = Debug|x64\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x64.Build.0 = Debug|x64\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x86.ActiveCfg = Debug|Win32\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x86.Build.0 = Debug|Win32\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x64.ActiveCfg = Release|x64\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x64.Build.0 = Release|x64\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x86.ActiveCfg = Release|Win32\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x86.Build.0 = Release|Win32\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x64.ActiveCfg = Debug|x64\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x64.Build.0 = Debug|x64\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x86.ActiveCfg = Debug|Win32\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x86.Build.0 = Debug|Win32\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x64.ActiveCfg = Release|x64\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x64.Build.0 = Release|x64\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x86.ActiveCfg = Release|Win32\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x86.Build.0 = Release|Win32\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x64.ActiveCfg = Debug|x64\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x64.Build.0 = Debug|x64\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x86.ActiveCfg = Debug|Win32\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x86.Build.0 = Debug|Win32\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x64.ActiveCfg = Release|x64\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x64.Build.0 = Release|x64\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x86.ActiveCfg = Release|Win32\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x86.Build.0 = Release|Win32\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x64.ActiveCfg = Debug|x64\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x64.Build.0 = Debug|x64\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x86.ActiveCfg = Debug|Win32\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x86.Build.0 = Debug|Win32\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x64.ActiveCfg = Release|x64\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x64.Build.0 = Release|x64\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x86.ActiveCfg = Release|Win32\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x86.Build.0 = Release|Win32\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x64.ActiveCfg = Debug|x64\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x64.Build.0 = Debug|x64\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x86.ActiveCfg = Debug|Win32\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x86.Build.0 = Debug|Win32\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x64.ActiveCfg = Release|x64\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x64.Build.0 = Release|x64\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x86.ActiveCfg = Release|Win32\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x86.Build.0 = Release|Win32\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x64.ActiveCfg = Debug|x64\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x64.Build.0 = Debug|x64\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x86.ActiveCfg = Debug|Win32\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x86.Build.0 = Debug|Win32\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x64.ActiveCfg = Release|x64\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x64.Build.0 = Release|x64\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x86.ActiveCfg = Release|Win32\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x86.Build.0 = Release|Win32\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x64.ActiveCfg = Debug|x64\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x64.Build.0 = Debug|x64\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x86.ActiveCfg = Debug|Win32\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x86.Build.0 = Debug|Win32\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x64.ActiveCfg = Release|x64\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x64.Build.0 = Release|x64\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x86.ActiveCfg = Release|Win32\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x86.Build.0 = Release|Win32\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x64.ActiveCfg = Debug|x64\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x64.Build.0 = Debug|x64\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x86.ActiveCfg = Debug|Win32\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x86.Build.0 = Debug|Win32\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x64.ActiveCfg = Release|x64\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x64.Build.0 = Release|x64\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x86.ActiveCfg = Release|Win32\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x86.Build.0 = Release|Win32\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x64.ActiveCfg = Debug|x64\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x64.Build.0 = Debug|x64\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x86.ActiveCfg = Debug|Win32\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x86.Build.0 = Debug|Win32\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x64.ActiveCfg = Release|x64\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x64.Build.0 = Release|x64\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x86.ActiveCfg = Release|Win32\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x86.Build.0 = Release|Win32\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x64.ActiveCfg = Debug|x64\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x64.Build.0 = Debug|x64\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x86.ActiveCfg = Debug|Win32\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x86.Build.0 = Debug|Win32\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x64.ActiveCfg = Release|x64\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x64.Build.0 = Release|x64\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x86.ActiveCfg = Release|Win32\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x86.Build.0 = Release|Win32\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x64.ActiveCfg = Debug|x64\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x64.Build.0 = Debug|x64\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x86.ActiveCfg = Debug|Win32\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x86.Build.0 = Debug|Win32\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x64.ActiveCfg = Release|x64\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x64.Build.0 = Release|x64\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x86.ActiveCfg = Release|Win32\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x86.Build.0 = Release|Win32\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x64.ActiveCfg = Debug|x64\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x64.Build.0 = Debug|x64\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x86.ActiveCfg = Debug|Win32\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x86.Build.0 = Debug|Win32\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x64.ActiveCfg = Release|x64\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x64.Build.0 = Release|x64\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x86.ActiveCfg = Release|Win32\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x86.Build.0 = Release|Win32\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x64.ActiveCfg = Debug|x64\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x64.Build.0 = Debug|x64\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x86.ActiveCfg = Debug|Win32\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x86.Build.0 = Debug|Win32\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.ActiveCfg = Release|x64\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.Build.0 = Release|x64\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.ActiveCfg = Release|Win32\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.Build.0 = Release|Win32\n+        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Debug|x64.ActiveCfg = Debug|x64\n+        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Debug|x64.Build.0 = Debug|x64\n+        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Release|x64.ActiveCfg = Release|x64\n+        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Release|x64.Build.0 = Release|x64\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.ActiveCfg = Debug|x64\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.Build.0 = Debug|x64\n-        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.ActiveCfg = Debug|Win32\n-        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.Build.0 = Debug|Win32\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.ActiveCfg = Release|x64\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.Build.0 = Release|x64\n-        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.ActiveCfg = Release|Win32\n-        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.Build.0 = Release|Win32\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.ActiveCfg = Debug|x64\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.Build.0 = Debug|x64\n-        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.ActiveCfg = Debug|Win32\n-        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.Build.0 = Debug|Win32\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.ActiveCfg = Release|x64\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.Build.0 = Release|x64\n-        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.ActiveCfg = Release|Win32\n-        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.Build.0 = Release|Win32\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x64.ActiveCfg = Debug|x64\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x64.Build.0 = Debug|x64\n-        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x86.ActiveCfg = Debug|Win32\n-        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x86.Build.0 = Debug|Win32\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x64.ActiveCfg = Release|x64\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x64.Build.0 = Release|x64\n-        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x86.ActiveCfg = Release|Win32\n-        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x86.Build.0 = Release|Win32\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x64.ActiveCfg = Debug|x64\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x64.Build.0 = Debug|x64\n-        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x86.ActiveCfg = Debug|Win32\n-        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x86.Build.0 = Debug|Win32\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.ActiveCfg = Release|x64\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.Build.0 = Release|x64\n-        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.ActiveCfg = Release|Win32\n-        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.Build.0 = Release|Win32\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x64.ActiveCfg = Debug|x64\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x64.Build.0 = Debug|x64\n-        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x86.ActiveCfg = Debug|Win32\n-        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x86.Build.0 = Debug|Win32\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x64.ActiveCfg = Release|x64\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x64.Build.0 = Release|x64\n-        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x86.ActiveCfg = Release|Win32\n-        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x86.Build.0 = Release|Win32\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x64.ActiveCfg = Debug|x64\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x64.Build.0 = Debug|x64\n-        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x86.ActiveCfg = Debug|Win32\n-        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x86.Build.0 = Debug|Win32\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.ActiveCfg = Release|x64\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.Build.0 = Release|x64\n-        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.ActiveCfg = Release|Win32\n-        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.Build.0 = Release|Win32\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.ActiveCfg = Debug|x64\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.Build.0 = Debug|x64\n-        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.ActiveCfg = Debug|Win32\n-        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.Build.0 = Debug|Win32\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.ActiveCfg = Release|x64\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.Build.0 = Release|x64\n-        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.ActiveCfg = Release|Win32\n-        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.Build.0 = Release|Win32\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x64.ActiveCfg = Debug|x64\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x64.Build.0 = Debug|x64\n-        {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x86.ActiveCfg = Debug|Win32\n-        {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x86.Build.0 = Debug|Win32\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x64.ActiveCfg = Release|x64\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x64.Build.0 = Release|x64\n-        {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x86.ActiveCfg = Release|Win32\n-        {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE"
      },
      {
        "sha": "d56c359fe0c649d12bce86d87ee3c170f1f6c6d5",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -57,6 +57,8 @@\n     <Copy SourceFiles=\"$(ConfigIniIn)\" DestinationFiles=\"$(ConfigIniOut)\" ></Copy>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                    Replace=\"@PACKAGE_NAME@\" By=\"Bitcoin Core\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                   Replace=\"@PACKAGE_BUGREPORT@\" By=\"https://github.com/bitcoin/bitcoin/issues\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                    Replace=\"@abs_top_srcdir@\" By=\"..\\..\" ToFullPath=\"true\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n@@ -71,12 +73,16 @@\n                   Replace=\"@USE_SQLITE_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@BUILD_BITCOIN_CLI_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@BUILD_BITCOIN_WALLET_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@BUILD_BITCOIND_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@ENABLE_FUZZ_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@ENABLE_ZMQ_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@ENABLE_EXTERNAL_SIGNER_TRUE@\" By=\"\"></ReplaceInFile>\n   </Target>\n   <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "fb4d70cc7802f8b2c75624f4792dd790ba652041",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,7 +14,6 @@\n     <VcpkgUseStatic>true</VcpkgUseStatic>\n     <VcpkgAutoLink>true</VcpkgAutoLink>\n     <VcpkgConfiguration>$(Configuration)</VcpkgConfiguration>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n     <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n   </PropertyGroup>\n \n@@ -35,14 +34,6 @@\n       <Configuration>Debug</Configuration>\n       <Platform>x64</Platform>\n     </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n   </ItemGroup>\n \n   <PropertyGroup Condition=\"'$(Configuration)'=='Release'\" Label=\"Configuration\">"
      },
      {
        "sha": "df2fd2fb49e3ec4c4fb0ef7ac3526551120ab1b0",
        "filename": "build_msvc/common.qt.init.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/common.qt.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/common.qt.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.qt.init.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n \n   <PropertyGroup Label=\"QtGlobals\">\n-    <QtBaseDir>C:\\Qt5.12.11_x64_static_vs2019_16101</QtBaseDir>\n+    <QtBaseDir>C:\\Qt5.12.11_x64_static_vs2019_160900</QtBaseDir>\n     <QtPluginsLibraryDir>$(QtBaseDir)\\plugins</QtPluginsLibraryDir>\n     <QtLibraryDir>$(QtBaseDir)\\lib</QtLibraryDir>\n     <QtIncludeDir>$(QtBaseDir)\\include</QtIncludeDir>"
      },
      {
        "sha": "a64ae881f25663357e42cb71f0df18066f4e78f6",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -140,20 +140,6 @@\n     </ClCompile>\n   </ItemDefinitionGroup>\n \n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PreprocessorDefinitions>_X86_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n-    </ClCompile>\n-  </ItemDefinitionGroup>\n-\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PreprocessorDefinitions>_X86_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n-    </ClCompile>\n-  </ItemDefinitionGroup>\n-\n   <ItemGroup>\n     <QT_MOC Include=\"..\\..\\src\\qt\\bitcoinamountfield.cpp\" />\n     <QT_MOC Include=\"..\\..\\src\\qt\\intro.cpp\" />"
      },
      {
        "sha": "08b12bdd852c90b2f00d9bcda148c91d9bd9dbe2",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,6 +8,7 @@\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n   </PropertyGroup>\n   <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\util\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\addressbooktests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\apptests.cpp\" />"
      },
      {
        "sha": "f18052fe37c233a9ab8a354e614dd7f5bdbbcad0",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -18,11 +18,11 @@ if [ -n \"$QEMU_USER_CMD\" ]; then\n fi\n export CONTAINER_NAME=ci_arm_linux\n # Use debian to avoid 404 apt errors when cross compiling\n-export DOCKER_NAME_TAG=\"debian:buster\"\n+export DOCKER_NAME_TAG=\"debian:bullseye\"\n export USE_BUSY_BOX=true\n export RUN_UNIT_TESTS=true\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n # This could be removed once the ABI change warning does not show up by default\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports CXXFLAGS=-Wno-psabi\""
      },
      {
        "sha": "a25c98a0042f93f9562f313b70b17ab0f1e57ab0",
        "filename": "ci/test/00_setup_env_i686_multiprocess.sh",
        "status": "renamed",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_i686_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_i686_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_multiprocess.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,11 +6,13 @@\n \n export LC_ALL=C.UTF-8\n \n-export CONTAINER_NAME=ci_native_multiprocess\n+export HOST=i686-pc-linux-gnu\n+export CONTAINER_NAME=ci_i686_multiprocess\n export DOCKER_NAME_TAG=ubuntu:20.04\n-export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n+export PACKAGES=\"cmake python3 python3-pip llvm clang g++-multilib\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+export BITCOIN_CONFIG=\"--enable-debug CC='clang -m32' CXX='clang++ -m32' LDFLAGS='--rtlib=compiler-rt -lgcc_s'\"\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n+export TEST_RUNNER_EXTRA=\"--nosandbox\"\n export PIP_PACKAGES=\"lief\"",
        "previous_filename": "ci/test/00_setup_env_native_multiprocess.sh"
      },
      {
        "sha": "8bccf4fc67e3978bb8779b8bd6a1a54180734687",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_macos_cross\n export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to macos\n-export HOST=x86_64-apple-darwin18\n+export HOST=x86_64-apple-darwin19\n export PACKAGES=\"cmake imagemagick librsvg2-bin libz-dev libtiff-tools libtinfo5 python3-setuptools xorriso\"\n export XCODE_VERSION=12.1\n export XCODE_BUILD_ID=12A7403"
      },
      {
        "sha": "02889ec936365d30cfc4ef68d21c041074acc729",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,7 +6,7 @@\n \n export LC_ALL=C.UTF-8\n \n-export HOST=x86_64-apple-darwin18\n+export HOST=x86_64-apple-darwin19\n export PIP_PACKAGES=\"zmq lief\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\""
      },
      {
        "sha": "e9a20fca7d26be86e48f1407e6ba18018d375d38",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_nowallet\n export DOCKER_NAME_TAG=ubuntu:18.04  # Use bionic to have one config run the tests in python3.6, see doc/dependencies.md\n-export PACKAGES=\"python3-zmq clang-5.0 llvm-5.0\"  # Use clang-5 to test C++17 compatibility, see doc/dependencies.md\n-export DEP_OPTS=\"NO_WALLET=1\"\n+export PACKAGES=\"python3-zmq clang-7 llvm-7 libc++abi-7-dev libc++-7-dev\"  # Use clang-7 to test C++17 compatibility, see doc/dependencies.md\n+export DEP_OPTS=\"NO_WALLET=1 CC=clang-7 CXX='clang++-7 -stdlib=libc++'\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports CC=clang-7 CXX='clang++-7 -stdlib=libc++'\""
      },
      {
        "sha": "8176179f0b94ed56fe3ffad869f5add37bee332b",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -7,13 +7,13 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_qt5\n-export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic gcc-7 can compile our c++17 and run our functional tests in python3, see doc/dependencies.md\n-export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n+export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic gcc-8 can compile our C++17 and run our functional tests in python3, see doc/dependencies.md\n+export PACKAGES=\"gcc-8 g++-8 python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 NO_NATPMP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports\n---enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-reduce-exports\n+--enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CC=gcc-8 CXX=g++-8\""
      },
      {
        "sha": "78af869e702b7bf9fcf542c6a37c70f381161b86",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,10 +6,11 @@\n \n export LC_ALL=C.UTF-8\n \n+export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_valgrind\n export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n-export TEST_RUNNER_EXTRA=\"--exclude rpc_bind\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n+export TEST_RUNNER_EXTRA=\"--exclude rpc_bind,feature_bind_extra\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no CC=clang CXX=clang++\"  # TODO enable GUI"
      },
      {
        "sha": "fd253123e601d875d15db9f6c1207ae11403edc3",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -18,9 +18,9 @@ if [ -n \"$QEMU_USER_CMD\" ]; then\n fi\n # Use debian to avoid 404 apt errors\n export CONTAINER_NAME=ci_s390x\n-export DOCKER_NAME_TAG=\"debian:buster\"\n-export RUN_UNIT_TESTS=true\n+export DOCKER_NAME_TAG=\"debian:bookworm\"\n export TEST_RUNNER_ENV=\"LC_ALL=C\"\n+export TEST_RUNNER_EXTRA=\"--exclude rpc_bind,feature_bind_extra\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\""
      },
      {
        "sha": "7c05ef3af0a56692243bca35405b4fe8f2dfef91",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 78,
        "deletions": 41,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (-sandbox), default is yes if seccomp-bpf is detected under Linux x86_64])],\n+  [seccomp_found=$withval],\n+  [seccomp_found=auto])\n+\n dnl Require C++17 compiler (no GNU extensions)\n AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n \n@@ -240,15 +246,9 @@ AC_ARG_ENABLE([lcov-branch-coverage],\n   [use_lcov_branch=yes],\n   [use_lcov_branch=no])\n \n-AC_ARG_ENABLE([glibc-back-compat],\n-  [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc])],\n-  [use_glibc_compat=$enableval],\n-  [use_glibc_compat=no])\n-\n AC_ARG_ENABLE([threadlocal],\n   [AS_HELP_STRING([--enable-threadlocal],\n-  [enable features that depend on the c++ thread_local keyword (currently just thread names in debug logs). (default is to enabled if there is platform support and glibc-back-compat is not enabled)])],\n+  [enable features that depend on the c++ thread_local keyword (currently just thread names in debug logs). (default is to enable if there is platform support)])],\n   [use_thread_local=$enableval],\n   [use_thread_local=auto])\n \n@@ -574,13 +574,17 @@ AX_CHECK_COMPILE_FLAG([-march=armv8-a+crc+crypto],[[ARM_CRC_CXXFLAGS=\"-march=arm\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $ARM_CRC_CXXFLAGS\"\n-AC_MSG_CHECKING(for ARM CRC32 intrinsics)\n+AC_MSG_CHECKING(for AArch64 CRC32 intrinsics)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <arm_acle.h>\n     #include <arm_neon.h>\n   ]],[[\n+#ifdef __aarch64__\n     __crc32cb(0, 0); __crc32ch(0, 0); __crc32cw(0, 0); __crc32cd(0, 0);\n     vmull_p64(0, 0);\n+#else\n+#error \"crc32c library does not support hardware acceleration on 32-bit ARM\"\n+#endif\n   ]])],\n  [ AC_MSG_RESULT(yes); enable_arm_crc=yes; ],\n  [ AC_MSG_RESULT(no)]\n@@ -705,6 +709,33 @@ case $host in\n          if $BREW list --versions qt5 >/dev/null; then\n            export PKG_CONFIG_PATH=\"$($BREW --prefix qt5 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n          fi\n+\n+         case $host in\n+           *aarch64*)\n+             dnl The preferred Homebrew prefix for Apple Silicon is /opt/homebrew.\n+             dnl Therefore, as we do not use pkg-config to detect miniupnpc and libnatpmp\n+             dnl packages, we should set the CPPFLAGS and LDFLAGS variables for them\n+             dnl explicitly.\n+             if test \"x$use_upnp\" != xno && $BREW list --versions miniupnpc >/dev/null; then\n+               miniupnpc_prefix=$($BREW --prefix miniupnpc 2>/dev/null)\n+               if test \"x$suppress_external_warnings\" != xno; then\n+                 CPPFLAGS=\"$CPPFLAGS -isystem $miniupnpc_prefix/include\"\n+               else\n+                 CPPFLAGS=\"$CPPFLAGS -I$miniupnpc_prefix/include\"\n+               fi\n+               LDFLAGS=\"$LDFLAGS -L$miniupnpc_prefix/lib\"\n+             fi\n+             if test \"x$use_natpmp\" != xno && $BREW list --versions libnatpmp >/dev/null; then\n+               libnatpmp_prefix=$($BREW --prefix libnatpmp 2>/dev/null)\n+               if test \"x$suppress_external_warnings\" != xno; then\n+                 CPPFLAGS=\"$CPPFLAGS -isystem $libnatpmp_prefix/include\"\n+               else\n+                 CPPFLAGS=\"$CPPFLAGS -I$libnatpmp_prefix/include\"\n+               fi\n+               LDFLAGS=\"$LDFLAGS -L$libnatpmp_prefix/lib\"\n+             fi\n+             ;;\n+         esac\n        fi\n      else\n        case $build_os in\n@@ -836,17 +867,7 @@ if test x$ac_cv_sys_large_files != x &&\n   CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\n fi\n \n-if test x$use_glibc_compat != xno; then\n-  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n-  case $host in\n-    powerpc64* | ppc64*)\n-      AX_CHECK_LINK_FLAG([[-Wl,--no-tls-get-addr-optimize]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--no-tls-get-addr-optimize\"])\n-    ;;\n-  esac\n-else\n-  AC_SEARCH_LIBS([clock_gettime],[rt])\n-fi\n+AC_SEARCH_LIBS([clock_gettime],[rt])\n \n if test \"x$enable_gprof\" = xyes; then\n     dnl -pg is incompatible with -pie. Since hardening and profiling together doesn't make sense,\n@@ -1038,7 +1059,7 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n dnl thread_local is currently disabled when building with glibc back compat.\n dnl Our minimum supported glibc is 2.17, however support for thread_local\n dnl did not arrive in glibc until 2.18.\n-if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && test \"x$use_glibc_compat\" = xno; }; then\n+if test \"x$use_thread_local\" = xyes || test \"x$use_thread_local\" = xauto; then\n   TEMP_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n   AC_MSG_CHECKING([for thread_local support])\n@@ -1195,8 +1216,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <xmmintrin.h>]], [[\n \n AC_MSG_CHECKING(for strong getauxval support in the system headers)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-    #include <arm_acle.h>\n-    #include <arm_neon.h>\n     #include <sys/auxv.h>\n   ]], [[\n     getauxval(AT_HWCAP);\n@@ -1205,26 +1224,14 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n  [ AC_MSG_RESULT(no); HAVE_STRONG_GETAUXVAL=0 ]\n )\n \n-AC_MSG_CHECKING(for weak getauxval support in the compiler)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-    #ifdef __linux__\n-    unsigned long getauxval(unsigned long type) __attribute__((weak));\n-    #define AT_HWCAP 16\n-    #endif\n-  ]], [[\n-    getauxval(AT_HWCAP);\n-  ]])],\n- [ AC_MSG_RESULT(yes); HAVE_WEAK_GETAUXVAL=1; AC_DEFINE(HAVE_WEAK_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval (weak linking)]) ],\n- [ AC_MSG_RESULT(no); HAVE_WEAK_GETAUXVAL=0 ]\n-)\n-\n+have_any_system=no\n AC_MSG_CHECKING([for std::system])\n AC_LINK_IFELSE(\n     [ AC_LANG_PROGRAM(\n         [[ #include <cstdlib> ]],\n         [[ int nErr = std::system(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if std::system is available.)],\n+    [ AC_MSG_RESULT(yes); have_any_system=yes],\n     [ AC_MSG_RESULT(no) ]\n )\n \n@@ -1234,11 +1241,13 @@ AC_LINK_IFELSE(\n         [[ ]],\n         [[ int nErr = ::_wsystem(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if ::wsystem is available.)],\n+    [ AC_MSG_RESULT(yes); have_any_system=yes],\n     [ AC_MSG_RESULT(no) ]\n )\n \n-AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+if test \"x$have_any_system\" != \"xno\"; then\n+  AC_DEFINE(HAVE_SYSTEM, 1, Define to 1 if std::system or ::wsystem is available.)\n+fi\n \n LEVELDB_CPPFLAGS=\n LIBLEVELDB=\n@@ -1429,6 +1438,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+  AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+  seccomp_found=no\n+fi\n+if test \"x$seccomp_found\" != \"xno\"; then\n+  AC_MSG_CHECKING([for seccomp-bpf (Linux x86-64)])\n+  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n+      @%:@include <linux/seccomp.h>\n+    ]], [[\n+      #if !defined(__x86_64__)\n+      #  error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+      #endif\n+    ]])],[\n+      AC_MSG_RESULT(yes)\n+      seccomp_found=\"yes\"\n+      AC_DEFINE(USE_SYSCALL_SANDBOX, 1, [Define this symbol to build with syscall sandbox support.])\n+    ],[\n+      AC_MSG_RESULT(no)\n+      seccomp_found=\"no\"\n+  ])\n+fi\n+dnl Currently only enable -sandbox=<mode> feature if seccomp is found.\n+dnl In the future, sandboxing could be also be supported with other\n+dnl sandboxing mechanisms besides seccomp.\n+use_syscall_sandbox=$seccomp_found\n+AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"x$use_syscall_sandbox\" != \"xno\"])\n+\n dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n@@ -1779,7 +1818,6 @@ AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_LIBEVENT],[test x$use_libevent = xyes])\n-AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n@@ -1822,7 +1860,6 @@ AC_SUBST(DEBUG_CPPFLAGS)\n AC_SUBST(WARN_CXXFLAGS)\n AC_SUBST(NOWARN_CXXFLAGS)\n AC_SUBST(DEBUG_CXXFLAGS)\n-AC_SUBST(COMPAT_LDFLAGS)\n AC_SUBST(ERROR_CXXFLAGS)\n AC_SUBST(GPROF_CXXFLAGS)\n AC_SUBST(GPROF_LDFLAGS)\n@@ -1862,7 +1899,6 @@ AC_SUBST(HAVE_O_CLOEXEC)\n AC_SUBST(HAVE_BUILTIN_PREFETCH)\n AC_SUBST(HAVE_MM_PREFETCH)\n AC_SUBST(HAVE_STRONG_GETAUXVAL)\n-AC_SUBST(HAVE_WEAK_GETAUXVAL)\n AC_SUBST(ANDROID_ARCH)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n@@ -1921,6 +1957,7 @@ echo\n echo \"Options used to compile and link:\"\n echo \"  external signer = $use_external_signer\"\n echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with experimental syscall sandbox support = $use_syscall_sandbox\"\n echo \"  with libs       = $build_bitcoin_libs\"\n echo \"  with wallet     = $enable_wallet\"\n if test \"x$enable_wallet\" != \"xno\"; then"
      },
      {
        "sha": "98cab1b7fcb004f75a91851c393b2de1b44ad6db",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -217,7 +217,7 @@ def check_MACHO_libraries(filename) -> bool:\n \n def check_MACHO_min_os(filename) -> bool:\n     binary = lief.parse(filename)\n-    if binary.build_version.minos == [10,14,0]:\n+    if binary.build_version.minos == [10,15,0]:\n         return True\n     return False\n "
      },
      {
        "sha": "651589c11bc99debfa37da7c16296791f334d3b8",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -137,7 +137,7 @@ def test_MACHO(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.14', '-Wl,11.4']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.15', '-Wl,11.4']),\n                 (1, f'{executable}: failed SDK'))\n \n     def test_PE(self):"
      },
      {
        "sha": "68aae18731d04d84193437838796fff649325020",
        "filename": "contrib/guix/INSTALL.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/INSTALL.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -358,7 +358,7 @@ This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n `guile-git` from source.\n \n-Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+Source: https://logs.guix.gnu.org/guix/2020-11-12.log#232527\n \n ##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n "
      },
      {
        "sha": "51a034c26ee53e75c0968bd57d88622d25b05fb7",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -75,7 +75,7 @@ crucial differences:\n \n 1. Since only Windows and macOS build outputs require codesigning, the `HOSTS`\n    environment variable will have a sane default value of `x86_64-w64-mingw32\n-   x86_64-apple-darwin18` instead of all the platforms.\n+   x86_64-apple-darwin19` instead of all the platforms.\n 2. The `guix-codesign` command ***requires*** a `DETACHED_SIGS_REPO` flag.\n     * _**DETACHED_SIGS_REPO**_\n \n@@ -159,7 +159,7 @@ which case you can override the default list by setting the space-separated\n `HOSTS` environment variable:\n \n ```sh\n-env HOSTS='x86_64-w64-mingw32 x86_64-apple-darwin18' ./contrib/guix/guix-build\n+env HOSTS='x86_64-w64-mingw32 x86_64-apple-darwin19' ./contrib/guix/guix-build\n ```\n \n See the [recognized environment variables][env-vars-list] section for more\n@@ -224,7 +224,7 @@ details.\n \n   _(defaults to \"x86\\_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\n   riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n-  x86\\_64-w64-mingw32 x86\\_64-apple-darwin18\")_\n+  x86\\_64-w64-mingw32 x86\\_64-apple-darwin19\")_\n \n * _**SOURCES_PATH**_\n \n@@ -467,7 +467,7 @@ start over.\n     - `/root/.cache/guix/`\n     - `/root/.guix-profile/`\n \n-[b17e]: http://bootstrappable.org/\n+[b17e]: https://bootstrappable.org/\n [r12e/source-date-epoch]: https://reproducible-builds.org/docs/source-date-epoch/\n \n [guix/install.sh]: https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh"
      },
      {
        "sha": "9317fa7fdebd8c9b04e842fbb8fde7eee368e2d8",
        "filename": "contrib/guix/guix-build",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/guix-build",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/guix-build",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -76,7 +76,7 @@ mkdir -p \"$VERSION_BASE\"\n # Default to building for all supported HOSTs (overridable by environment)\n export HOSTS=\"${HOSTS:-x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n                        x86_64-w64-mingw32\n-                       x86_64-apple-darwin18}\"\n+                       x86_64-apple-darwin19}\"\n \n # Usage: distsrc_for_host HOST\n #"
      },
      {
        "sha": "aff897037dab3a55d7a5ad57155b9926487780fc",
        "filename": "contrib/guix/guix-codesign",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/guix-codesign",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/guix-codesign",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-codesign?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -91,7 +91,7 @@ fi\n ################\n \n # Default to building for all supported HOSTs (overridable by environment)\n-export HOSTS=\"${HOSTS:-x86_64-w64-mingw32 x86_64-apple-darwin18}\"\n+export HOSTS=\"${HOSTS:-x86_64-w64-mingw32 x86_64-apple-darwin19}\"\n \n # Usage: distsrc_for_host HOST\n #"
      },
      {
        "sha": "93526f8c45d1f7f561afbcdd5ced6641b729ca29",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -147,7 +147,7 @@ case \"$HOST\" in\n         #\n         # After the native packages in depends are built, the ld wrapper should\n         # no longer affect our build, as clang would instead reach for\n-        # x86_64-apple-darwin18-ld from cctools\n+        # x86_64-apple-darwin19-ld from cctools\n         ;;\n     *) export GUIX_LD_WRAPPER_DISABLE_RPATH=yes ;;\n esac\n@@ -423,8 +423,8 @@ mkdir -p \"$DISTSRC\"\n                 find \"${DISTNAME}\" -print0 \\\n                     | sort --zero-terminated \\\n                     | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin18/osx64}.tar.gz\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin18/osx64}.tar.gz\" && exit 1 )\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin19/osx64}.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin19/osx64}.tar.gz\" && exit 1 )\n                 ;;\n         esac\n     )  # $DISTSRC/installed"
      },
      {
        "sha": "15c82cddf2402e11b310dfa7625042d2a61260b9",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -28,7 +28,7 @@ Common `host-platform-triplet`s for cross compilation are:\n - `i686-pc-linux-gnu` for Linux 32 bit\n - `x86_64-pc-linux-gnu` for x86 Linux\n - `x86_64-w64-mingw32` for Win64\n-- `x86_64-apple-darwin18` for macOS\n+- `x86_64-apple-darwin19` for macOS\n - `arm-linux-gnueabihf` for Linux ARM 32 bit\n - `aarch64-linux-gnu` for Linux ARM 64 bit\n - `powerpc64-linux-gnu` for Linux POWER 64-bit (big endian)"
      },
      {
        "sha": "ea92bb779337ee596f6996c6ccf5d4ceeb5ec91c",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -1,4 +1,4 @@\n-OSX_MIN_VERSION=10.14\n+OSX_MIN_VERSION=10.15\n OSX_SDK_VERSION=10.15.6\n XCODE_VERSION=12.1\n XCODE_BUILD_ID=12A7403"
      },
      {
        "sha": "02c36eea7c13d5d584d94ad97188d930e4e2718e",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -348,7 +348,7 @@ To build executables for ARM:\n     make HOST=arm-linux-gnueabihf NO_QT=1\n     cd ..\n     ./autogen.sh\n-    CONFIG_SITE=$PWD/depends/arm-linux-gnueabihf/share/config.site ./configure --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\n+    CONFIG_SITE=$PWD/depends/arm-linux-gnueabihf/share/config.site ./configure --enable-reduce-exports LDFLAGS=-static-libstdc++\n     make\n \n "
      },
      {
        "sha": "0b895eadfb1f22463a7433805062d8beeda5fc7a",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 5,
        "deletions": 35,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,11 +5,9 @@ Below are some notes on how to build Bitcoin Core for Windows.\n \n The options known to work for building Bitcoin Core on Windows are:\n \n-* On Linux, using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n-and is the platform used to build the Bitcoin Core Windows release binaries.\n-* On Windows, using [Windows\n-Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about) and the Mingw-w64 cross compiler tool chain.\n-* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com). See [README.md](/build_msvc/README.md).\n+* On Linux, using the [Mingw-w64](https://www.mingw-w64.org/) cross compiler tool chain.\n+* On Windows, using [Windows Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about) and Mingw-w64.\n+* On Windows, using [Microsoft Visual Studio](https://www.visualstudio.com). See [README.md](/build_msvc/README.md).\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n \n@@ -18,40 +16,12 @@ Other options which may work, but which have not been extensively tested are (pl\n Installing Windows Subsystem for Linux\n ---------------------------------------\n \n-With Windows 10, Microsoft has released a new feature named the [Windows\n-Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about). This\n-feature allows you to run a bash shell directly on Windows in an Ubuntu-based\n-environment. Within this environment you can cross compile for Windows without\n-the need for a separate Linux VM or server. Note that while WSL can be installed with\n-other Linux variants, such as OpenSUSE, the following instructions have only been\n-tested with Ubuntu.\n-\n-This feature is not supported in versions of Windows prior to Windows 10 or on\n-Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n-Windows](https://docs.microsoft.com/windows/wsl/install-win10).\n-\n-Full instructions to install WSL are available on the above link.\n-To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n-\n-1. Enable the Windows Subsystem for Linux feature\n-  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n-  * Enable 'Windows Subsystem for Linux'\n-  * Click 'OK' and restart if necessary\n-2. Install Ubuntu\n-  * Open Microsoft Store and search for \"Ubuntu 18.04\" or use [this link](https://www.microsoft.com/store/productId/9N9TNGVNDL3Q)\n-  * Click Install\n-3. Complete Installation\n-  * Open a cmd prompt and type \"Ubuntu1804\"\n-  * Create a new UNIX user account (this is a separate account from your Windows account)\n-\n-After the bash shell is active, you can follow the instructions below, starting\n-with the \"Cross-compilation\" section. Compiling the 64-bit version is\n-recommended, but it is possible to compile the 32-bit version.\n+Follow the upstream installation instructions, available [here](https://docs.microsoft.com/windows/wsl/install-win10).\n \n Cross-compilation for Ubuntu and Windows Subsystem for Linux\n ------------------------------------------------------------\n \n-The steps below can be performed on Ubuntu (including in a VM) or WSL. The depends system\n+The steps below can be performed on Ubuntu or WSL. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n "
      },
      {
        "sha": "0c1fd6ba988e12ec848e6ebe6c4a0bd8e254af30",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -7,11 +7,12 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n-| Clang<sup>[ \\* ](#note1)</sup> |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n+| Clang<sup>[ \\* ](#note1)</sup> |  | [7.0](https://releases.llvm.org/download.html) (C++17 & std::filesystem support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Android only) |\n-| GCC |  | [7+](https://gcc.gnu.org/) (C++17 support) |  |  |  |\n+| GCC |  | [8.1](https://gcc.gnu.org/) (C++17 & std::filesystem support) |  |  |  |\n+| glibc | | [2.17](https://www.gnu.org/software/libc/) |  |  |  |  |\n | HarfBuzz-NG |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | libevent | [2.1.12-stable](https://github.com/libevent/libevent/releases) | [2.0.21](https://github.com/bitcoin/bitcoin/pull/18676) | No |  |  |\n | libnatpmp | git commit [4536032...](https://github.com/miniupnp/libnatpmp/tree/4536032ae32268a45c073a4d5e91bbab4534773a) |  | No |  |  |"
      },
      {
        "sha": "0a5a7066ab7acd4a0460c03f441ebb90e1ed9656",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 31,
        "deletions": 23,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -89,6 +89,10 @@ code.\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n   - Constant names are all uppercase, and use `_` to separate words.\n+  - Enumerator constants may be `snake_case`, `PascalCase` or `ALL_CAPS`.\n+    This is a more tolerant policy than the [C++ Core\n+    Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-caps),\n+    which recommend using `snake_case`.  Please use what seems appropriate.\n   - Class names, function names, and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n   - Test suite naming convention: The Boost test suite in file\n@@ -345,7 +349,7 @@ make cov\n \n Profiling is a good way to get a precise idea of where time is being spent in\n code. One tool for doing profiling on Linux platforms is called\n-[`perf`](http://www.brendangregg.com/perf.html), and has been integrated into\n+[`perf`](https://www.brendangregg.com/perf.html), and has been integrated into\n the functional test framework. Perf can observe a running process and sample\n (at some frequency) where its execution is.\n \n@@ -669,19 +673,19 @@ Foo(vec);\n \n ```cpp\n enum class Tabs {\n-    INFO,\n-    CONSOLE,\n-    GRAPH,\n-    PEERS\n+    info,\n+    console,\n+    network_graph,\n+    peers\n };\n \n int GetInt(Tabs tab)\n {\n     switch (tab) {\n-    case Tabs::INFO: return 0;\n-    case Tabs::CONSOLE: return 1;\n-    case Tabs::GRAPH: return 2;\n-    case Tabs::PEERS: return 3;\n+    case Tabs::info: return 0;\n+    case Tabs::console: return 1;\n+    case Tabs::network_graph: return 2;\n+    case Tabs::peers: return 3;\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -959,37 +963,41 @@ Subtrees\n \n Several parts of the repository are subtrees of software maintained elsewhere.\n \n-Some of these are maintained by active developers of Bitcoin Core, in which case changes should probably go\n-directly upstream without being PRed directly against the project. They will be merged back in the next\n-subtree merge.\n+Some of these are maintained by active developers of Bitcoin Core, in which case\n+changes should go directly upstream without being PRed directly against the project.\n+They will be merged back in the next subtree merge.\n \n-Others are external projects without a tight relationship with our project. Changes to these should also\n-be sent upstream, but bugfixes may also be prudent to PR against Bitcoin Core so that they can be integrated\n-quickly. Cosmetic changes should be purely taken upstream.\n+Others are external projects without a tight relationship with our project. Changes\n+to these should also be sent upstream, but bugfixes may also be prudent to PR against\n+a Bitcoin Core subtree, so that they can be integrated quickly. Cosmetic changes\n+should be taken upstream.\n \n-There is a tool in `test/lint/git-subtree-check.sh` ([instructions](../test/lint#git-subtree-checksh)) to check a subtree directory for consistency with\n-its upstream repository.\n+There is a tool in `test/lint/git-subtree-check.sh` ([instructions](../test/lint#git-subtree-checksh))\n+to check a subtree directory for consistency with its upstream repository.\n \n Current subtrees include:\n \n - src/leveldb\n-  - Upstream at https://github.com/google/leveldb ; Maintained by Google, but\n-    open important PRs to Core to avoid delay.\n+  - Subtree at https://github.com/bitcoin-core/leveldb-subtree ; maintained by Core contributors.\n+  - Upstream at https://github.com/google/leveldb ; maintained by Google. Open\n+    important PRs to the subtree to avoid delay.\n   - **Note**: Follow the instructions in [Upgrading LevelDB](#upgrading-leveldb) when\n     merging upstream changes to the LevelDB subtree.\n \n - src/crc32c\n   - Used by leveldb for hardware acceleration of CRC32C checksums for data integrity.\n-  - Upstream at https://github.com/google/crc32c ; Maintained by Google.\n+  - Subtree at https://github.com/bitcoin-core/crc32c-subtree ; maintained by Core contributors.\n+  - Upstream at https://github.com/google/crc32c ; maintained by Google.\n \n - src/secp256k1\n-  - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintained by Core contributors.\n+  - Upstream at https://github.com/bitcoin-core/secp256k1/ ; maintained by Core contributors.\n \n - src/crypto/ctaes\n-  - Upstream at https://github.com/bitcoin-core/ctaes ; actively maintained by Core contributors.\n+  - Upstream at https://github.com/bitcoin-core/ctaes ; maintained by Core contributors.\n \n - src/univalue\n-  - Upstream at https://github.com/bitcoin-core/univalue ; actively maintained by Core contributors, deviates from upstream https://github.com/jgarzik/univalue\n+  - Subtree at https://github.com/bitcoin-core/univalue-subtree ; maintained by Core contributors.\n+  - Deviates from upstream https://github.com/jgarzik/univalue.\n \n Upgrading LevelDB\n ---------------------"
      },
      {
        "sha": "0880f9f581af8604e3f049ccd5ec6b0de34f99c1",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -254,6 +254,73 @@ $ honggfuzz/honggfuzz --exit_upon_crash --quiet --timeout 4 -n 1 -Q \\\n                        -debug\n ```\n \n+# Fuzzing Bitcoin Core using Eclipser (v1.x)\n+\n+## Quickstart guide\n+\n+To quickly get started fuzzing Bitcoin Core using [Eclipser v1.x](https://github.com/SoftSec-KAIST/Eclipser/tree/v1.x):\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ sudo vim /etc/apt/sources.list # Uncomment the lines starting with 'deb-src'.\n+$ sudo apt-get update\n+$ sudo apt-get build-dep qemu\n+$ sudo apt-get install libtool libtool-bin wget automake autoconf bison gdb\n+```\n+\n+At this point, you must install the .NET core.  The process differs, depending on your Linux distribution.\n+See [this link](https://docs.microsoft.com/en-us/dotnet/core/install/linux) for details.\n+On ubuntu 20.04, the following should work:\n+\n+```sh\n+$ wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb\n+$ sudo dpkg -i packages-microsoft-prod.deb\n+$ rm packages-microsoft-prod.deb\n+$ sudo apt-get update\n+$ sudo apt-get install -y dotnet-sdk-2.1\n+```\n+\n+You will also want to make sure Python is installed as `python` for the Eclipser install to succeed.\n+\n+```sh\n+$ git clone https://github.com/SoftSec-KAIST/Eclipser.git\n+$ cd Eclipser\n+$ git checkout v1.x\n+$ make\n+$ cd ..\n+$ ./autogen.sh\n+$ ./configure --enable-fuzz\n+$ make\n+$ mkdir -p outputs/\n+$ FUZZ=bech32 dotnet Eclipser/build/Eclipser.dll fuzz -p src/test/fuzz/fuzz -t 36000 -o outputs --src stdin\n+```\n+\n+This will perform 10 hours of fuzzing.\n+\n+To make further use of the inputs generated by Eclipser, you\n+must first decode them:\n+\n+```sh\n+$ dotnet Eclipser/build/Eclipser.dll decode -i outputs/testcase -o decoded_outputs\n+```\n+This will place raw inputs in the directory `decoded_outputs/decoded_stdins`.  Crashes are in the `outputs/crashes` directory, and must\n+be decoded in the same way.\n+\n+Fuzzing with Eclipser will likely be much more effective if using an existing corpus:\n+\n+```sh\n+$ git clone https://github.com/bitcoin-core/qa-assets\n+$ FUZZ=bech32 dotnet Eclipser/build/Eclipser.dll fuzz -p src/test/fuzz/fuzz -t 36000 -i qa-assets/fuzz_seed_corpus/bech32 outputs --src stdin\n+```\n+\n+Note that fuzzing with Eclipser on certain targets (those that create 'full nodes', e.g. `process_message*`) will,\n+for now, slowly fill `/tmp/` with improperly cleaned-up files, which will cause spurious crashes.\n+See [this proposed patch](https://github.com/bitcoin/bitcoin/pull/22472) for more information.\n+\n+Read the [Eclipser documentation for v1.x](https://github.com/SoftSec-KAIST/Eclipser/tree/v1.x) for more details on using Eclipser.\n+\n+\n # OSS-Fuzz\n \n Bitcoin Core participates in Google's [OSS-Fuzz](https://github.com/google/oss-fuzz/tree/master/projects/bitcoin-core)"
      },
      {
        "sha": "81e79dd3a9f634db7d73457c41c8c9dcfd31283f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 37,
        "deletions": 5,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -46,7 +46,7 @@ Compatibility\n ==============\n \n Bitcoin Core is supported and extensively tested on operating systems\n-using the Linux kernel, macOS 10.14+, and Windows 7 and newer.  Bitcoin\n+using the Linux kernel, macOS 10.15+, and Windows 7 and newer.  Bitcoin\n Core should also work on most other Unix-like systems but is not as\n frequently tested on them.  It is not recommended to use Bitcoin Core on\n unsupported systems.\n@@ -61,9 +61,30 @@ P2P and network changes\n   They will become eligible for address gossip after sending an ADDR, ADDRV2,\n   or GETADDR message. (#21528)\n \n+Rescan startup parameter removed\n+--------------------------------\n+\n+The `-rescan` startup parameter has been removed. Wallets which require\n+rescanning due to corruption will still be rescanned on startup.\n+Otherwise, please use the `rescanblockchain` RPC to trigger a rescan. (#23123)\n+\n Updated RPCs\n ------------\n \n+- The `-deprecatedrpc=addresses` configuration option has been removed.  RPCs\n+  `gettxout`, `getrawtransaction`, `decoderawtransaction`, `decodescript`,\n+  `gettransaction verbose=true` and REST endpoints `/rest/tx`, `/rest/getutxos`,\n+  `/rest/block` no longer return the `addresses` and `reqSigs` fields, which\n+  were previously deprecated in 22.0. (#22650)\n+\n+- `listunspent` now includes `ancestorcount`, `ancestorsize`, and\n+  `ancestorfees` for each transaction output that is still in the mempool.\n+  (#12677)\n+\n+- `lockunspent` now optionally takes a third parameter, `persistent`, which\n+  causes the lock to be written persistently to the wallet database. This\n+  allows UTXOs to remain locked even after node restarts or crashes. (#23065)\n+\n New RPCs\n --------\n \n@@ -86,17 +107,30 @@ New settings\n Updated settings\n ----------------\n \n+- In previous releases, the meaning of the command line option\n+  `-persistmempool` (without a value provided) incorrectly disabled mempool\n+  persistence.  `-persistmempool` is now treated like other boolean options to\n+  mean `-persistmempool=1`. Passing `-persistmempool=0`, `-persistmempool=1`\n+  and `-nopersistmempool` is unaffected. (#23061)\n+\n Tools and Utilities\n -------------------\n \n - Update `-getinfo` to return data in a user-friendly format that also reduces vertical space. (#21832)\n \n+- CLI `-addrinfo` now returns a single field for the number of `onion` addresses\n+  known to the node instead of separate `torv2` and `torv3` fields, as support\n+  for Tor V2 addresses was removed from Bitcoin Core in 22.0. (#22544)\n+\n Wallet\n ------\n \n GUI changes\n -----------\n \n+- UTXOs which are locked via the GUI are now stored persistently in the\n+  wallet database, so are not lost on node shutdown or crash. (#23065)\n+\n Low-level changes\n =================\n \n@@ -109,10 +143,8 @@ Tests\n -----\n \n - For the `regtest` network the activation heights of several softforks were\n-  changed.\n-  * BIP 34 (blockheight in coinbase) from 500 to 2 (#16333)\n-  * BIP 66 (DERSIG) from 1251 to 102 (#22632)\n-  * BIP 65 (CLTV) from 1351 to 111 (#21862)\n+  set to block height 1. They can be changed by the runtime setting\n+  `-testactivationheight=name@height`. (#22818)\n \n Credits\n ======="
      },
      {
        "sha": "972c91aa6fafad60b1f6125aae58cadc32307cfb",
        "filename": "doc/release-notes/release-notes-22.0.md",
        "status": "added",
        "additions": 1163,
        "deletions": 0,
        "changes": 1163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/release-notes/release-notes-22.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/release-notes/release-notes-22.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-22.0.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,1163 @@\n+22.0 Release Notes\n+==================\n+\n+Bitcoin Core version 22.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-22.0/>\n+\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes in some cases), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but it might take some time if the data directory needs to be migrated. Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.14+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n+\n+From Bitcoin Core 22.0 onwards, macOS versions earlier than 10.14 are no longer supported.\n+\n+Notable changes\n+===============\n+\n+P2P and network changes\n+-----------------------\n+- Added support for running Bitcoin Core as an\n+  [I2P (Invisible Internet Project)](https://en.wikipedia.org/wiki/I2P) service\n+  and connect to such services. See [i2p.md](https://github.com/bitcoin/bitcoin/blob/22.x/doc/i2p.md) for details. (#20685)\n+- This release removes support for Tor version 2 hidden services in favor of Tor\n+  v3 only, as the Tor network [dropped support for Tor\n+  v2](https://blog.torproject.org/v2-deprecation-timeline) with the release of\n+  Tor version 0.4.6.  Henceforth, Bitcoin Core ignores Tor v2 addresses; it\n+  neither rumors them over the network to other peers, nor stores them in memory\n+  or to `peers.dat`.  (#22050)\n+\n+- Added NAT-PMP port mapping support via\n+  [`libnatpmp`](https://miniupnp.tuxfamily.org/libnatpmp.html). (#18077)\n+\n+New and Updated RPCs\n+--------------------\n+\n+- Due to [BIP 350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)\n+  being implemented, behavior for all RPCs that accept addresses is changed when\n+  a native witness version 1 (or higher) is passed. These now require a Bech32m\n+  encoding instead of a Bech32 one, and Bech32m encoding will be used for such\n+  addresses in RPC output as well. No version 1 addresses should be created\n+  for mainnet until consensus rules are adopted that give them meaning\n+  (as will happen through [BIP 341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki)).\n+  Once that happens, Bech32m is expected to be used for them, so this shouldn't\n+  affect any production systems, but may be observed on other networks where such\n+  addresses already have meaning (like signet). (#20861)\n+\n+- The `getpeerinfo` RPC returns two new boolean fields, `bip152_hb_to` and\n+  `bip152_hb_from`, that respectively indicate whether we selected a peer to be\n+  in compact blocks high-bandwidth mode or whether a peer selected us as a\n+  compact blocks high-bandwidth peer. High-bandwidth peers send new block\n+  announcements via a `cmpctblock` message rather than the usual inv/headers\n+  announcements. See BIP 152 for more details. (#19776)\n+\n+- `getpeerinfo` no longer returns the following fields: `addnode`, `banscore`,\n+  and `whitelisted`, which were previously deprecated in 0.21. Instead of\n+  `addnode`, the `connection_type` field returns manual. Instead of\n+  `whitelisted`, the `permissions` field indicates if the peer has special\n+  privileges. The `banscore` field has simply been removed. (#20755)\n+\n+- The following RPCs:  `gettxout`, `getrawtransaction`, `decoderawtransaction`,\n+  `decodescript`, `gettransaction`, and REST endpoints: `/rest/tx`,\n+  `/rest/getutxos`, `/rest/block` deprecated the following fields (which are no\n+  longer returned in the responses by default): `addresses`, `reqSigs`.\n+  The `-deprecatedrpc=addresses` flag must be passed for these fields to be\n+  included in the RPC response. This flag/option will be available only for this major release, after which\n+  the deprecation will be removed entirely. Note that these fields are attributes of\n+  the `scriptPubKey` object returned in the RPC response. However, in the response\n+  of `decodescript` these fields are top-level attributes, and included again as attributes\n+  of the `scriptPubKey` object. (#20286)\n+\n+- When creating a hex-encoded bitcoin transaction using the `bitcoin-tx` utility\n+  with the `-json` option set, the following fields: `addresses`, `reqSigs` are no longer\n+  returned in the tx output of the response. (#20286)\n+\n+- The `listbanned` RPC now returns two new numeric fields: `ban_duration` and `time_remaining`.\n+  Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n+  both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n+\n+- The `setban` RPC can ban onion addresses again. This fixes a regression introduced in version 0.21.0. (#20852)\n+\n+- The `getnodeaddresses` RPC now returns a \"network\" field indicating the\n+  network type (ipv4, ipv6, onion, or i2p) for each address.  (#21594)\n+\n+- `getnodeaddresses` now also accepts a \"network\" argument (ipv4, ipv6, onion,\n+  or i2p) to return only addresses of the specified network.  (#21843)\n+\n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n+  API may be unstable). This is intended for testing transaction packages with dependency\n+  relationships; it is not recommended for batch-validating independent transactions. In addition to\n+  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n+  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n+  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n+  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n+  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n+\n+- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n+  Segwit addresses. (#20867)\n+\n+Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n+\n+Build System\n+------------\n+\n+- Release binaries are now produced using the new `guix`-based build system.\n+  The [/doc/release-process.md](/doc/release-process.md) document has been updated accordingly.\n+\n+Files\n+-----\n+\n+- The list of banned hosts and networks (via `setban` RPC) is now saved on disk\n+  in JSON format in `banlist.json` instead of `banlist.dat`. `banlist.dat` is\n+  only read on startup if `banlist.json` is not present. Changes are only written to the new\n+  `banlist.json`. A future version of Bitcoin Core may completely ignore\n+  `banlist.dat`. (#20966)\n+\n+New settings\n+------------\n+\n+- The `-natpmp` option has been added to use NAT-PMP to map the listening port.\n+  If both UPnP and NAT-PMP are enabled, a successful allocation from UPnP\n+  prevails over one from NAT-PMP. (#18077)\n+\n+Updated settings\n+----------------\n+\n+Changes to Wallet or GUI related settings can be found in the GUI or Wallet section below.\n+\n+- Passing an invalid `-rpcauth` argument now cause bitcoind to fail to start.  (#20461)\n+\n+Tools and Utilities\n+-------------------\n+\n+- A new CLI `-addrinfo` command returns the number of addresses known to the\n+  node per network type (including Tor v2 versus v3) and total. This can be\n+  useful to see if the node knows enough addresses in a network to use options\n+  like `-onlynet=<network>` or to upgrade to this release of Bitcoin Core 22.0\n+  that supports Tor v3 only.  (#21595)\n+\n+- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n+  in seconds to use with `-rpcwait`. If the timeout expires,\n+  `bitcoin-cli` will report a failure. (#21056)\n+\n+Wallet\n+------\n+\n+- External signers such as hardware wallets can now be used through the new RPC methods `enumeratesigners` and `displayaddress`. Support is also added to the `send` RPC call. This feature is experimental. See [external-signer.md](https://github.com/bitcoin/bitcoin/blob/22.x/doc/external-signer.md) for details. (#16546)\n+\n+- A new `listdescriptors` RPC is available to inspect the contents of descriptor-enabled wallets.\n+  The RPC returns public versions of all imported descriptors, including their timestamp and flags.\n+  For ranged descriptors, it also returns the range boundaries and the next index to generate addresses from. (#20226)\n+\n+- The `bumpfee` RPC is not available with wallets that have private keys\n+  disabled. `psbtbumpfee` can be used instead. (#20891)\n+\n+- The `fundrawtransaction`, `send` and `walletcreatefundedpsbt` RPCs now support an `include_unsafe` option\n+  that when `true` allows using unsafe inputs to fund the transaction.\n+  Note that the resulting transaction may become invalid if one of the unsafe inputs disappears.\n+  If that happens, the transaction must be funded with different inputs and republished. (#21359)\n+\n+- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n+  under `wsh()`. (#20867)\n+\n+- Taproot descriptors can be imported into the wallet only after activation has occurred on the network (e.g. mainnet, testnet, signet) in use. See [descriptors.md](https://github.com/bitcoin/bitcoin/blob/22.x/doc/descriptors.md) for supported descriptors.\n+\n+GUI changes\n+-----------\n+\n+- External signers such as hardware wallets can now be used. These require an external tool such as [HWI](https://github.com/bitcoin-core/HWI) to be installed and configured under Options -> Wallet. When creating a new wallet a new option \"External signer\" will appear in the dialog. If the device is detected, its name is suggested as the wallet name. The watch-only keys are then automatically imported. Receive addresses can be verified on the device. The send dialog will automatically use the connected device. This feature is experimental and the UI may freeze for a few seconds when performing these actions.\n+\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+- The RPC server can process a limited number of simultaneous RPC requests.\n+  Previously, if this limit was exceeded, the RPC server would respond with\n+  [status code 500 (`HTTP_INTERNAL_SERVER_ERROR`)](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_server_errors).\n+  Now it returns status code 503 (`HTTP_SERVICE_UNAVAILABLE`). (#18335)\n+\n+- Error codes have been updated to be more accurate for the following error cases (#18466):\n+  - `signmessage` now returns RPC_INVALID_ADDRESS_OR_KEY (-5) if the\n+    passed address is invalid. Previously returned RPC_TYPE_ERROR (-3).\n+  - `verifymessage` now returns RPC_INVALID_ADDRESS_OR_KEY (-5) if the\n+    passed address is invalid. Previously returned RPC_TYPE_ERROR (-3).\n+  - `verifymessage` now returns RPC_TYPE_ERROR (-3) if the passed signature\n+    is malformed. Previously returned RPC_INVALID_ADDRESS_OR_KEY (-5).\n+\n+Tests\n+-----\n+\n+22.0 change log\n+===============\n+\n+A detailed list of changes in this version follows. To keep the list to a manageable length, small refactors and typo fixes are not included, and similar changes are sometimes condensed into one line.\n+\n+### Consensus\n+- bitcoin/bitcoin#19438 Introduce deploymentstatus (ajtowns)\n+- bitcoin/bitcoin#20207 Follow-up extra comments on taproot code and tests (sipa)\n+- bitcoin/bitcoin#21330 Deal with missing data in signature hashes more consistently (sipa)\n+\n+### Policy\n+- bitcoin/bitcoin#18766 Disable fee estimation in blocksonly mode (by removing the fee estimates global) (darosior)\n+- bitcoin/bitcoin#20497 Add `MAX_STANDARD_SCRIPTSIG_SIZE` to policy (sanket1729)\n+- bitcoin/bitcoin#20611 Move `TX_MAX_STANDARD_VERSION` to policy (MarcoFalke)\n+\n+### Mining\n+- bitcoin/bitcoin#19937, bitcoin/bitcoin#20923 Signet mining utility (ajtowns)\n+\n+### Block and transaction handling\n+- bitcoin/bitcoin#14501 Fix possible data race when committing block files (luke-jr)\n+- bitcoin/bitcoin#15946 Allow maintaining the blockfilterindex when using prune (jonasschnelli)\n+- bitcoin/bitcoin#18710 Add local thread pool to CCheckQueue (hebasto)\n+- bitcoin/bitcoin#19521 Coinstats Index (fjahr)\n+- bitcoin/bitcoin#19806 UTXO snapshot activation (jamesob)\n+- bitcoin/bitcoin#19905 Remove dead CheckForkWarningConditionsOnNewFork (MarcoFalke)\n+- bitcoin/bitcoin#19935 Move SaltedHashers to separate file and add some new ones (achow101)\n+- bitcoin/bitcoin#20054 Remove confusing and useless \"unexpected version\" warning (MarcoFalke)\n+- bitcoin/bitcoin#20519 Handle rename failure in `DumpMempool(\u2026)` by using the `RenameOver(\u2026)` return value (practicalswift)\n+- bitcoin/bitcoin#20749, bitcoin/bitcoin#20750, bitcoin/bitcoin#21055, bitcoin/bitcoin#21270, bitcoin/bitcoin#21525, bitcoin/bitcoin#21391, bitcoin/bitcoin#21767, bitcoin/bitcoin#21866 Prune `g_chainman` usage (dongcarl)\n+- bitcoin/bitcoin#20833 rpc/validation: enable packages through testmempoolaccept (glozow)\n+- bitcoin/bitcoin#20834 Locks and docs in ATMP and CheckInputsFromMempoolAndCache (glozow)\n+- bitcoin/bitcoin#20854 Remove unnecessary try-block (amitiuttarwar)\n+- bitcoin/bitcoin#20868 Remove redundant check on pindex (jarolrod)\n+- bitcoin/bitcoin#20921 Don't try to invalidate genesis block in CChainState::InvalidateBlock (theStack)\n+- bitcoin/bitcoin#20972 Locks: Annotate CTxMemPool::check to require `cs_main` (dongcarl)\n+- bitcoin/bitcoin#21009 Remove RewindBlockIndex logic (dhruv)\n+- bitcoin/bitcoin#21025 Guard chainman chainstates with `cs_main` (dongcarl)\n+- bitcoin/bitcoin#21202 Two small clang lock annotation improvements (amitiuttarwar)\n+- bitcoin/bitcoin#21523 Run VerifyDB on all chainstates (jamesob)\n+- bitcoin/bitcoin#21573 Update libsecp256k1 subtree to latest master (sipa)\n+- bitcoin/bitcoin#21582, bitcoin/bitcoin#21584, bitcoin/bitcoin#21585 Fix assumeutxo crashes (MarcoFalke)\n+- bitcoin/bitcoin#21681 Fix ActivateSnapshot to use hardcoded nChainTx (jamesob)\n+- bitcoin/bitcoin#21796 index: Avoid async shutdown on init error (MarcoFalke)\n+- bitcoin/bitcoin#21946 Document and test lack of inherited signaling in RBF policy (ariard)\n+- bitcoin/bitcoin#22084 Package testmempoolaccept followups (glozow)\n+- bitcoin/bitcoin#22102 Remove `Warning:` from warning message printed for unknown new rules (prayank23)\n+- bitcoin/bitcoin#22112 Force port 0 in I2P (vasild)\n+- bitcoin/bitcoin#22135 CRegTestParams: Use `args` instead of `gArgs` (kiminuo)\n+- bitcoin/bitcoin#22146 Reject invalid coin height and output index when loading assumeutxo (MarcoFalke)\n+- bitcoin/bitcoin#22253 Distinguish between same tx and same-nonwitness-data tx in mempool (glozow)\n+- bitcoin/bitcoin#22261 Two small fixes to node broadcast logic (jnewbery)\n+- bitcoin/bitcoin#22415 Make `m_mempool` optional in CChainState (jamesob)\n+- bitcoin/bitcoin#22499 Update assumed chain params (sriramdvt)\n+- bitcoin/bitcoin#22589 net, doc: update I2P hardcoded seeds and docs for 22.0 (jonatack)\n+\n+### P2P protocol and network code\n+- bitcoin/bitcoin#18077 Add NAT-PMP port forwarding support (hebasto)\n+- bitcoin/bitcoin#18722 addrman: improve performance by using more suitable containers (vasild)\n+- bitcoin/bitcoin#18819 Replace `cs_feeFilter` with simple std::atomic (MarcoFalke)\n+- bitcoin/bitcoin#19203 Add regression fuzz harness for CVE-2017-18350. Add FuzzedSocket (practicalswift)\n+- bitcoin/bitcoin#19288 fuzz: Add fuzzing harness for TorController (practicalswift)\n+- bitcoin/bitcoin#19415 Make DNS lookup mockable, add fuzzing harness (practicalswift)\n+- bitcoin/bitcoin#19509 Per-Peer Message Capture (troygiorshev)\n+- bitcoin/bitcoin#19763 Don't try to relay to the address' originator (vasild)\n+- bitcoin/bitcoin#19771 Replace enum CConnMan::NumConnections with enum class ConnectionDirection (luke-jr)\n+- bitcoin/bitcoin#19776 net, rpc: expose high bandwidth mode state via getpeerinfo (theStack)\n+- bitcoin/bitcoin#19832 Put disconnecting logs into BCLog::NET category (hebasto)\n+- bitcoin/bitcoin#19858 Periodically make block-relay connections and sync headers (sdaftuar)\n+- bitcoin/bitcoin#19884 No delay in adding fixed seeds if -dnsseed=0 and peers.dat is empty (dhruv)\n+- bitcoin/bitcoin#20079 Treat handshake misbehavior like unknown message (MarcoFalke)\n+- bitcoin/bitcoin#20138 Assume that SetCommonVersion is called at most once per peer (MarcoFalke)\n+- bitcoin/bitcoin#20162 p2p: declare Announcement::m_state as uint8_t, add getter/setter (jonatack)\n+- bitcoin/bitcoin#20197 Protect onions in AttemptToEvictConnection(), add eviction protection test coverage (jonatack)\n+- bitcoin/bitcoin#20210 assert `CNode::m_inbound_onion` is inbound in ctor, add getter, unit tests (jonatack)\n+- bitcoin/bitcoin#20228 addrman: Make addrman a top-level component (jnewbery)\n+- bitcoin/bitcoin#20234 Don't bind on 0.0.0.0 if binds are restricted to Tor (vasild)\n+- bitcoin/bitcoin#20477 Add unit testing of node eviction logic (practicalswift)\n+- bitcoin/bitcoin#20516 Well-defined CAddress disk serialization, and addrv2 anchors.dat (sipa)\n+- bitcoin/bitcoin#20557 addrman: Fix new table bucketing during unserialization (jnewbery)\n+- bitcoin/bitcoin#20561 Periodically clear `m_addr_known` (sdaftuar)\n+- bitcoin/bitcoin#20599 net processing: Tolerate sendheaders and sendcmpct messages before verack (jnewbery)\n+- bitcoin/bitcoin#20616 Check CJDNS address is valid (lontivero)\n+- bitcoin/bitcoin#20617 Remove `m_is_manual_connection` from CNodeState (ariard)\n+- bitcoin/bitcoin#20624 net processing: Remove nStartingHeight check from block relay (jnewbery)\n+- bitcoin/bitcoin#20651 Make p2p recv buffer timeout 20 minutes for all peers (jnewbery)\n+- bitcoin/bitcoin#20661 Only select from addrv2-capable peers for torv3 address relay (sipa)\n+- bitcoin/bitcoin#20685 Add I2P support using I2P SAM (vasild)\n+- bitcoin/bitcoin#20690 Clean up logging of outbound connection type (sdaftuar)\n+- bitcoin/bitcoin#20721 Move ping data to `net_processing` (jnewbery)\n+- bitcoin/bitcoin#20724 Cleanup of -debug=net log messages (ajtowns)\n+- bitcoin/bitcoin#20747 net processing: Remove dropmessagestest (jnewbery)\n+- bitcoin/bitcoin#20764 cli -netinfo peer connections dashboard updates \ud83c\udf84 \u2728 (jonatack)\n+- bitcoin/bitcoin#20788 add RAII socket and use it instead of bare SOCKET (vasild)\n+- bitcoin/bitcoin#20791 remove unused legacyWhitelisted in AcceptConnection() (jonatack)\n+- bitcoin/bitcoin#20816 Move RecordBytesSent() call out of `cs_vSend` lock (jnewbery)\n+- bitcoin/bitcoin#20845 Log to net debug in MaybeDiscourageAndDisconnect except for noban and manual peers (MarcoFalke)\n+- bitcoin/bitcoin#20864 Move SocketSendData lock annotation to header (MarcoFalke)\n+- bitcoin/bitcoin#20965 net, rpc:  return `NET_UNROUTABLE` as `not_publicly_routable`, automate helps (jonatack)\n+- bitcoin/bitcoin#20966 banman: save the banlist in a JSON format on disk (vasild)\n+- bitcoin/bitcoin#21015 Make all of `net_processing` (and some of net) use std::chrono types (dhruv)\n+- bitcoin/bitcoin#21029 bitcoin-cli: Correct docs (no \"generatenewaddress\" exists) (luke-jr)\n+- bitcoin/bitcoin#21148 Split orphan handling from `net_processing` into txorphanage (ajtowns)\n+- bitcoin/bitcoin#21162 Net Processing: Move RelayTransaction() into PeerManager (jnewbery)\n+- bitcoin/bitcoin#21167 make `CNode::m_inbound_onion` public, initialize explicitly (jonatack)\n+- bitcoin/bitcoin#21186 net/net processing: Move addr data into `net_processing` (jnewbery)\n+- bitcoin/bitcoin#21187 Net processing: Only call PushAddress() from `net_processing` (jnewbery)\n+- bitcoin/bitcoin#21198 Address outstanding review comments from PR20721 (jnewbery)\n+- bitcoin/bitcoin#21222 log: Clarify log message when file does not exist (MarcoFalke)\n+- bitcoin/bitcoin#21235 Clarify disconnect log message in ProcessGetBlockData, remove send bool (MarcoFalke)\n+- bitcoin/bitcoin#21236 Net processing: Extract `addr` send functionality into MaybeSendAddr() (jnewbery)\n+- bitcoin/bitcoin#21261 update inbound eviction protection for multiple networks, add I2P peers (jonatack)\n+- bitcoin/bitcoin#21328 net, refactor: pass uint16 CService::port as uint16 (jonatack)\n+- bitcoin/bitcoin#21387 Refactor sock to add I2P fuzz and unit tests (vasild)\n+- bitcoin/bitcoin#21395 Net processing: Remove unused CNodeState.address member (jnewbery)\n+- bitcoin/bitcoin#21407 i2p: limit the size of incoming messages (vasild)\n+- bitcoin/bitcoin#21506 p2p, refactor: make NetPermissionFlags an enum class (jonatack)\n+- bitcoin/bitcoin#21509 Don't send FEEFILTER in blocksonly mode (mzumsande)\n+- bitcoin/bitcoin#21560 Add Tor v3 hardcoded seeds (laanwj)\n+- bitcoin/bitcoin#21563 Restrict period when `cs_vNodes` mutex is locked (hebasto)\n+- bitcoin/bitcoin#21564 Avoid calling getnameinfo when formatting IPv4 addresses in CNetAddr::ToStringIP (practicalswift)\n+- bitcoin/bitcoin#21631 i2p: always check the return value of Sock::Wait() (vasild)\n+- bitcoin/bitcoin#21644 p2p, bugfix: use NetPermissions::HasFlag() in CConnman::Bind() (jonatack)\n+- bitcoin/bitcoin#21659 flag relevant Sock methods with [[nodiscard]] (vasild)\n+- bitcoin/bitcoin#21750 remove unnecessary check of `CNode::cs_vSend` (vasild)\n+- bitcoin/bitcoin#21756 Avoid calling `getnameinfo` when formatting IPv6 addresses in `CNetAddr::ToStringIP` (practicalswift)\n+- bitcoin/bitcoin#21775 Limit `m_block_inv_mutex` (MarcoFalke)\n+- bitcoin/bitcoin#21825 Add I2P hardcoded seeds (jonatack)\n+- bitcoin/bitcoin#21843 p2p, rpc: enable GetAddr, GetAddresses, and getnodeaddresses by network (jonatack)\n+- bitcoin/bitcoin#21845 net processing: Don't require locking `cs_main` before calling RelayTransactions() (jnewbery)\n+- bitcoin/bitcoin#21872 Sanitize message type for logging (laanwj)\n+- bitcoin/bitcoin#21914 Use stronger AddLocal() for our I2P address (vasild)\n+- bitcoin/bitcoin#21985 Return IPv6 scope id in `CNetAddr::ToStringIP()` (laanwj)\n+- bitcoin/bitcoin#21992 Remove -feefilter option (amadeuszpawlik)\n+- bitcoin/bitcoin#21996 Pass strings to NetPermissions::TryParse functions by const ref (jonatack)\n+- bitcoin/bitcoin#22013 ignore block-relay-only peers when skipping DNS seed (ajtowns)\n+- bitcoin/bitcoin#22050 Remove tor v2 support (jonatack)\n+- bitcoin/bitcoin#22096 AddrFetch - don't disconnect on self-announcements (mzumsande)\n+- bitcoin/bitcoin#22141 net processing: Remove hash and fValidatedHeaders from QueuedBlock (jnewbery)\n+- bitcoin/bitcoin#22144 Randomize message processing peer order (sipa)\n+- bitcoin/bitcoin#22147 Protect last outbound HB compact block peer (sdaftuar)\n+- bitcoin/bitcoin#22179 Torv2 removal followups (vasild)\n+- bitcoin/bitcoin#22211 Relay I2P addresses even if not reachable (by us) (vasild)\n+- bitcoin/bitcoin#22284 Performance improvements to ProtectEvictionCandidatesByRatio() (jonatack)\n+- bitcoin/bitcoin#22387 Rate limit the processing of rumoured addresses (sipa)\n+- bitcoin/bitcoin#22455 addrman: detect on-disk corrupted nNew and nTried during unserialization (vasild)\n+\n+### Wallet\n+- bitcoin/bitcoin#15710 Catch `ios_base::failure` specifically (Bushstar)\n+- bitcoin/bitcoin#16546 External signer support - Wallet Box edition (Sjors)\n+- bitcoin/bitcoin#17331 Use effective values throughout coin selection (achow101)\n+- bitcoin/bitcoin#18418 Increase `OUTPUT_GROUP_MAX_ENTRIES` to 100 (fjahr)\n+- bitcoin/bitcoin#18842 Mark replaced tx to not be in the mempool anymore (MarcoFalke)\n+- bitcoin/bitcoin#19136 Add `parent_desc` to `getaddressinfo` (achow101)\n+- bitcoin/bitcoin#19137 wallettool: Add dump and createfromdump commands (achow101)\n+- bitcoin/bitcoin#19651 `importdescriptor`s update existing (S3RK)\n+- bitcoin/bitcoin#20040 Refactor OutputGroups to handle fees and spending eligibility on grouping (achow101)\n+- bitcoin/bitcoin#20202 Make BDB support optional (achow101)\n+- bitcoin/bitcoin#20226, bitcoin/bitcoin#21277, - bitcoin/bitcoin#21063 Add `listdescriptors` command (S3RK)\n+- bitcoin/bitcoin#20267 Disable and fix tests for when BDB is not compiled (achow101)\n+- bitcoin/bitcoin#20275 List all wallets in non-SQLite and non-BDB builds (ryanofsky)\n+- bitcoin/bitcoin#20365 wallettool: Add parameter to create descriptors wallet (S3RK)\n+- bitcoin/bitcoin#20403 `upgradewallet` fixes, improvements, test coverage (jonatack)\n+- bitcoin/bitcoin#20448 `unloadwallet`: Allow specifying `wallet_name` param matching RPC endpoint wallet (luke-jr)\n+- bitcoin/bitcoin#20536 Error with \"Transaction too large\" if the funded tx will end up being too large after signing (achow101)\n+- bitcoin/bitcoin#20687 Add missing check for -descriptors wallet tool option (MarcoFalke)\n+- bitcoin/bitcoin#20952 Add BerkeleyDB version sanity check at init time (laanwj)\n+- bitcoin/bitcoin#21127 Load flags before everything else (Sjors)\n+- bitcoin/bitcoin#21141 Add new format string placeholders for walletnotify (maayank)\n+- bitcoin/bitcoin#21238 A few descriptor improvements to prepare for Taproot support (sipa)\n+- bitcoin/bitcoin#21302 `createwallet` examples for descriptor wallets (S3RK)\n+- bitcoin/bitcoin#21329 descriptor wallet: Cache last hardened xpub and use in normalized descriptors (achow101)\n+- bitcoin/bitcoin#21365 Basic Taproot signing support for descriptor wallets (sipa)\n+- bitcoin/bitcoin#21417 Misc external signer improvement and HWI 2 support (Sjors)\n+- bitcoin/bitcoin#21467 Move external signer out of wallet module (Sjors)\n+- bitcoin/bitcoin#21572 Fix wrong wallet RPC context set after #21366 (ryanofsky)\n+- bitcoin/bitcoin#21574 Drop JSONRPCRequest constructors after #21366 (ryanofsky)\n+- bitcoin/bitcoin#21666 Miscellaneous external signer changes (fanquake)\n+- bitcoin/bitcoin#21759 Document coin selection code (glozow)\n+- bitcoin/bitcoin#21786 Ensure sat/vB feerates are in range (mantissa of 3) (jonatack)\n+- bitcoin/bitcoin#21944 Fix issues when `walletdir` is root directory (prayank23)\n+- bitcoin/bitcoin#22042 Replace size/weight estimate tuple with struct for named fields (instagibbs)\n+- bitcoin/bitcoin#22051 Basic Taproot derivation support for descriptors (sipa)\n+- bitcoin/bitcoin#22154 Add OutputType::BECH32M and related wallet support for fetching bech32m addresses (achow101)\n+- bitcoin/bitcoin#22156 Allow tr() import only when Taproot is active (achow101)\n+- bitcoin/bitcoin#22166 Add support for inferring tr() descriptors (sipa)\n+- bitcoin/bitcoin#22173 Do not load external signers wallets when unsupported (achow101)\n+- bitcoin/bitcoin#22308 Add missing BlockUntilSyncedToCurrentChain (MarcoFalke)\n+- bitcoin/bitcoin#22334 Do not spam about non-existent spk managers (S3RK)\n+- bitcoin/bitcoin#22379 Erase spkmans rather than setting to nullptr (achow101)\n+- bitcoin/bitcoin#22421 Make IsSegWitOutput return true for taproot outputs (sipa)\n+- bitcoin/bitcoin#22461 Change ScriptPubKeyMan::Upgrade default to True (achow101)\n+- bitcoin/bitcoin#22492 Reorder locks in dumpwallet to avoid lock order assertion (achow101)\n+- bitcoin/bitcoin#22686 Use GetSelectionAmount in ApproximateBestSubset (achow101)\n+\n+### RPC and other APIs\n+- bitcoin/bitcoin#18335, bitcoin/bitcoin#21484 cli: Print useful error if bitcoind rpc work queue exceeded (LarryRuane)\n+- bitcoin/bitcoin#18466 Fix invalid parameter error codes for `{sign,verify}message` RPCs (theStack)\n+- bitcoin/bitcoin#18772 Calculate fees in `getblock` using BlockUndo data (robot-visions)\n+- bitcoin/bitcoin#19033 http: Release work queue after event base finish (promag)\n+- bitcoin/bitcoin#19055 Add MuHash3072 implementation (fjahr)\n+- bitcoin/bitcoin#19145 Add `hash_type` MUHASH for gettxoutsetinfo (fjahr)\n+- bitcoin/bitcoin#19847 Avoid duplicate set lookup in `gettxoutproof` (promag)\n+- bitcoin/bitcoin#20286 Deprecate `addresses` and `reqSigs` from RPC outputs (mjdietzx)\n+- bitcoin/bitcoin#20459 Fail to return undocumented return values (MarcoFalke)\n+- bitcoin/bitcoin#20461 Validate `-rpcauth` arguments (promag)\n+- bitcoin/bitcoin#20556 Properly document return values (`submitblock`, `gettxout`, `getblocktemplate`, `scantxoutset`) (MarcoFalke)\n+- bitcoin/bitcoin#20755 Remove deprecated fields from `getpeerinfo` (amitiuttarwar)\n+- bitcoin/bitcoin#20832 Better error messages for invalid addresses (eilx2)\n+- bitcoin/bitcoin#20867 Support up to 20 keys for multisig under Segwit context (darosior)\n+- bitcoin/bitcoin#20877 cli: `-netinfo` user help and argument parsing improvements (jonatack)\n+- bitcoin/bitcoin#20891 Remove deprecated bumpfee behavior (achow101)\n+- bitcoin/bitcoin#20916 Return wtxid from `testmempoolaccept` (MarcoFalke)\n+- bitcoin/bitcoin#20917 Add missing signet mentions in network name lists (theStack)\n+- bitcoin/bitcoin#20941 Document `RPC_TRANSACTION_ALREADY_IN_CHAIN` exception (jarolrod)\n+- bitcoin/bitcoin#20944 Return total fee in `getmempoolinfo` (MarcoFalke)\n+- bitcoin/bitcoin#20964 Add specific error code for \"wallet already loaded\" (laanwj)\n+- bitcoin/bitcoin#21053 Document {previous,next}blockhash as optional (theStack)\n+- bitcoin/bitcoin#21056 Add a `-rpcwaittimeout` parameter to limit time spent waiting (cdecker)\n+- bitcoin/bitcoin#21192 cli: Treat high detail levels as maximum in `-netinfo` (laanwj)\n+- bitcoin/bitcoin#21311 Document optional fields for `getchaintxstats` result (theStack)\n+- bitcoin/bitcoin#21359 `include_unsafe` option for fundrawtransaction (t-bast)\n+- bitcoin/bitcoin#21426 Remove `scantxoutset` EXPERIMENTAL warning (jonatack)\n+- bitcoin/bitcoin#21544 Missing doc updates for bumpfee psbt update (MarcoFalke)\n+- bitcoin/bitcoin#21594 Add `network` field to `getnodeaddresses` (jonatack)\n+- bitcoin/bitcoin#21595, bitcoin/bitcoin#21753 cli: Create `-addrinfo` (jonatack)\n+- bitcoin/bitcoin#21602 Add additional ban time fields to `listbanned` (jarolrod)\n+- bitcoin/bitcoin#21679 Keep default argument value in correct type (promag)\n+- bitcoin/bitcoin#21718 Improve error message for `getblock` invalid datatype (klementtan)\n+- bitcoin/bitcoin#21913 RPCHelpMan fixes (kallewoof)\n+- bitcoin/bitcoin#22021 `bumpfee`/`psbtbumpfee` fixes and updates (jonatack)\n+- bitcoin/bitcoin#22043 `addpeeraddress` test coverage, code simplify/constness (jonatack)\n+- bitcoin/bitcoin#22327 cli: Avoid truncating `-rpcwaittimeout` (MarcoFalke)\n+\n+### GUI\n+- bitcoin/bitcoin#18948 Call setParent() in the parent's context (hebasto)\n+- bitcoin/bitcoin#20482 Add depends qt fix for ARM macs (jonasschnelli)\n+- bitcoin/bitcoin#21836 scripted-diff: Replace three dots with ellipsis in the ui strings (hebasto)\n+- bitcoin/bitcoin#21935 Enable external signer support for GUI builds (Sjors)\n+- bitcoin/bitcoin#22133 Make QWindowsVistaStylePlugin available again (regression) (hebasto)\n+- bitcoin-core/gui#4 UI external signer support (e.g. hardware wallet) (Sjors)\n+- bitcoin-core/gui#13 Hide peer detail view if multiple are selected (promag)\n+- bitcoin-core/gui#18 Add peertablesortproxy module (hebasto)\n+- bitcoin-core/gui#21 Improve pruning tooltip (fluffypony, BitcoinErrorLog)\n+- bitcoin-core/gui#72 Log static plugins meta data and used style (hebasto)\n+- bitcoin-core/gui#79 Embed monospaced font (hebasto)\n+- bitcoin-core/gui#85 Remove unused \"What's This\" button in dialogs on Windows OS (hebasto)\n+- bitcoin-core/gui#115 Replace \"Hide tray icon\" option with positive \"Show tray icon\" one (hebasto)\n+- bitcoin-core/gui#118 Remove BDB version from the Information tab (hebasto)\n+- bitcoin-core/gui#121 Early subscribe core signals in transaction table model (promag)\n+- bitcoin-core/gui#123 Do not accept command while executing another one (hebasto)\n+- bitcoin-core/gui#125 Enable changing the autoprune block space size in intro dialog (luke-jr)\n+- bitcoin-core/gui#138 Unlock encrypted wallet \"OK\" button bugfix (mjdietzx)\n+- bitcoin-core/gui#139 doc: Improve gui/src/qt README.md (jarolrod)\n+- bitcoin-core/gui#154 Support macOS Dark mode (goums, Uplab)\n+- bitcoin-core/gui#162 Add network to peers window and peer details (jonatack)\n+- bitcoin-core/gui#163, bitcoin-core/gui#180 Peer details: replace Direction with Connection Type (jonatack)\n+- bitcoin-core/gui#164 Handle peer addition/removal in a right way (hebasto)\n+- bitcoin-core/gui#165 Save QSplitter state in QSettings (hebasto)\n+- bitcoin-core/gui#173 Follow Qt docs when implementing rowCount and columnCount (hebasto)\n+- bitcoin-core/gui#179 Add Type column to peers window, update peer details name/tooltip (jonatack)\n+- bitcoin-core/gui#186 Add information to \"Confirm fee bump\" window (prayank23)\n+- bitcoin-core/gui#189 Drop workaround for QTBUG-42503 which was fixed in Qt 5.5.0 (prusnak)\n+- bitcoin-core/gui#194 Save/restore RPCConsole geometry only for window (hebasto)\n+- bitcoin-core/gui#202 Fix right panel toggle in peers tab (RandyMcMillan)\n+- bitcoin-core/gui#203 Display plain \"Inbound\" in peer details (jonatack)\n+- bitcoin-core/gui#204 Drop buggy TableViewLastColumnResizingFixer class (hebasto)\n+- bitcoin-core/gui#205, bitcoin-core/gui#229 Save/restore TransactionView and recentRequestsView tables column sizes (hebasto)\n+- bitcoin-core/gui#206 Display fRelayTxes and `bip152_highbandwidth_{to, from}` in peer details (jonatack)\n+- bitcoin-core/gui#213 Add Copy Address Action to Payment Requests (jarolrod)\n+- bitcoin-core/gui#214 Disable requests context menu actions when appropriate (jarolrod)\n+- bitcoin-core/gui#217 Make warning label look clickable (jarolrod)\n+- bitcoin-core/gui#219 Prevent the main window popup menu (hebasto)\n+- bitcoin-core/gui#220 Do not translate file extensions (hebasto)\n+- bitcoin-core/gui#221 RPCConsole translatable string fixes and improvements (jonatack)\n+- bitcoin-core/gui#226 Add \"Last Block\" and \"Last Tx\" rows to peer details area (jonatack)\n+- bitcoin-core/gui#233 qt test: Don't bind to regtest port (achow101)\n+- bitcoin-core/gui#243 Fix issue when disabling the auto-enabled blank wallet checkbox (jarolrod)\n+- bitcoin-core/gui#246 Revert \"qt: Use \"fusion\" style on macOS Big Sur with old Qt\" (hebasto)\n+- bitcoin-core/gui#248 For values of \"Bytes transferred\" and \"Bytes/s\" with 1000-based prefix names use 1000-based divisor instead of 1024-based (wodry)\n+- bitcoin-core/gui#251 Improve URI/file handling message (hebasto)\n+- bitcoin-core/gui#256 Save/restore column sizes of the tables in the Peers tab (hebasto)\n+- bitcoin-core/gui#260 Handle exceptions isntead of crash (hebasto)\n+- bitcoin-core/gui#263 Revamp context menus (hebasto)\n+- bitcoin-core/gui#271 Don't clear console prompt when font resizing (jarolrod)\n+- bitcoin-core/gui#275 Support runtime appearance adjustment on macOS (hebasto)\n+- bitcoin-core/gui#276 Elide long strings in their middle in the Peers tab (hebasto)\n+- bitcoin-core/gui#281 Set shortcuts for console's resize buttons (jarolrod)\n+- bitcoin-core/gui#293 Enable wordWrap for Services (RandyMcMillan)\n+- bitcoin-core/gui#296 Do not use QObject::tr plural syntax for numbers with a unit symbol (hebasto)\n+- bitcoin-core/gui#297 Avoid unnecessary translations (hebasto)\n+- bitcoin-core/gui#298 Peertableview alternating row colors (RandyMcMillan)\n+- bitcoin-core/gui#300 Remove progress bar on modal overlay (brunoerg)\n+- bitcoin-core/gui#309 Add access to the Peers tab from the network icon (hebasto)\n+- bitcoin-core/gui#311 Peers Window rename 'Peer id' to 'Peer' (jarolrod)\n+- bitcoin-core/gui#313 Optimize string concatenation by default (hebasto)\n+- bitcoin-core/gui#325 Align numbers in the \"Peer Id\" column to the right (hebasto)\n+- bitcoin-core/gui#329 Make console buttons look clickable (jarolrod)\n+- bitcoin-core/gui#330 Allow prompt icon to be colorized (jarolrod)\n+- bitcoin-core/gui#331 Make RPC console welcome message translation-friendly (hebasto)\n+- bitcoin-core/gui#332 Replace disambiguation strings with translator comments (hebasto)\n+- bitcoin-core/gui#335 test: Use QSignalSpy instead of QEventLoop (jarolrod)\n+- bitcoin-core/gui#343 Improve the GUI responsiveness when progress dialogs are used (hebasto)\n+- bitcoin-core/gui#361 Fix GUI segfault caused by bitcoin/bitcoin#22216 (ryanofsky)\n+- bitcoin-core/gui#362 Add keyboard shortcuts to context menus (luke-jr)\n+- bitcoin-core/gui#366 Dark Mode fixes/portability (luke-jr)\n+- bitcoin-core/gui#375 Emit dataChanged signal to dynamically re-sort Peers table (hebasto)\n+- bitcoin-core/gui#393 Fix regression in \"Encrypt Wallet\" menu item (hebasto)\n+- bitcoin-core/gui#396 Ensure external signer option remains disabled without signers (achow101)\n+- bitcoin-core/gui#406 Handle new added plurals in `bitcoin_en.ts` (hebasto)\n+\n+### Build system\n+- bitcoin/bitcoin#17227 Add Android packaging support (icota)\n+- bitcoin/bitcoin#17920 guix: Build support for macOS (dongcarl)\n+- bitcoin/bitcoin#18298 Fix Qt processing of configure script for depends with DEBUG=1 (hebasto)\n+- bitcoin/bitcoin#19160 multiprocess: Add basic spawn and IPC support (ryanofsky)\n+- bitcoin/bitcoin#19504 Bump minimum python version to 3.6 (ajtowns)\n+- bitcoin/bitcoin#19522 fix building libconsensus with reduced exports for Darwin targets (fanquake)\n+- bitcoin/bitcoin#19683 Pin clang search paths for darwin host (dongcarl)\n+- bitcoin/bitcoin#19764 Split boost into build/host packages + bump + cleanup (dongcarl)\n+- bitcoin/bitcoin#19817 libtapi 1100.0.11 (fanquake)\n+- bitcoin/bitcoin#19846 enable unused member function diagnostic (Zero-1729)\n+- bitcoin/bitcoin#19867 Document and cleanup Qt hacks (fanquake)\n+- bitcoin/bitcoin#20046 Set `CMAKE_INSTALL_RPATH` for native packages (ryanofsky)\n+- bitcoin/bitcoin#20223 Drop the leading 0 from the version number (achow101)\n+- bitcoin/bitcoin#20333 Remove `native_biplist` dependency (fanquake)\n+- bitcoin/bitcoin#20353 configure: Support -fdebug-prefix-map and -fmacro-prefix-map (ajtowns)\n+- bitcoin/bitcoin#20359 Various config.site.in improvements and linting (dongcarl)\n+- bitcoin/bitcoin#20413 Require C++17 compiler (MarcoFalke)\n+- bitcoin/bitcoin#20419 Set minimum supported macOS to 10.14 (fanquake)\n+- bitcoin/bitcoin#20421 miniupnpc 2.2.2 (fanquake)\n+- bitcoin/bitcoin#20422 Mac deployment unification (fanquake)\n+- bitcoin/bitcoin#20424 Update univalue subtree (MarcoFalke)\n+- bitcoin/bitcoin#20449 Fix Windows installer build (achow101)\n+- bitcoin/bitcoin#20468 Warn when generating man pages for binaries built from a dirty branch (tylerchambers)\n+- bitcoin/bitcoin#20469 Avoid secp256k1.h include from system (dergoegge)\n+- bitcoin/bitcoin#20470 Replace genisoimage with xorriso (dongcarl)\n+- bitcoin/bitcoin#20471 Use C++17 in depends (fanquake)\n+- bitcoin/bitcoin#20496 Drop unneeded macOS framework dependencies (hebasto)\n+- bitcoin/bitcoin#20520 Do not force Precompiled Headers (PCH) for building Qt on Linux (hebasto)\n+- bitcoin/bitcoin#20549 Support make src/bitcoin-node and src/bitcoin-gui (promag)\n+- bitcoin/bitcoin#20565 Ensure PIC build for bdb on Android (BlockMechanic)\n+- bitcoin/bitcoin#20594 Fix getauxval calls in randomenv.cpp (jonasschnelli)\n+- bitcoin/bitcoin#20603 Update crc32c subtree (MarcoFalke)\n+- bitcoin/bitcoin#20609 configure: output notice that test binary is disabled by fuzzing (apoelstra)\n+- bitcoin/bitcoin#20619 guix: Quality of life improvements (dongcarl)\n+- bitcoin/bitcoin#20629 Improve id string robustness (dongcarl)\n+- bitcoin/bitcoin#20641 Use Qt top-level build facilities (hebasto)\n+- bitcoin/bitcoin#20650 Drop workaround for a fixed bug in Qt build system (hebasto)\n+- bitcoin/bitcoin#20673 Use more legible qmake commands in qt package (hebasto)\n+- bitcoin/bitcoin#20684 Define .INTERMEDIATE target once only (hebasto)\n+- bitcoin/bitcoin#20720 more robustly check for fcf-protection support (fanquake)\n+- bitcoin/bitcoin#20734 Make platform-specific targets available for proper platform builds only (hebasto)\n+- bitcoin/bitcoin#20936 build fuzz tests by default (danben)\n+- bitcoin/bitcoin#20937 guix: Make nsis reproducible by respecting SOURCE-DATE-EPOCH (dongcarl)\n+- bitcoin/bitcoin#20938 fix linking against -latomic when building for riscv (fanquake)\n+- bitcoin/bitcoin#20939 fix `RELOC_SECTION` security check for bitcoin-util (fanquake)\n+- bitcoin/bitcoin#20963 gitian-linux: Build binaries for 64-bit POWER (continued) (laanwj)\n+- bitcoin/bitcoin#21036 gitian: Bump descriptors to focal for 22.0 (fanquake)\n+- bitcoin/bitcoin#21045 Adds switch to enable/disable randomized base address in MSVC builds (EthanHeilman)\n+- bitcoin/bitcoin#21065 make macOS HOST in download-osx generic (fanquake)\n+- bitcoin/bitcoin#21078 guix: only download sources for hosts being built (fanquake)\n+- bitcoin/bitcoin#21116 Disable --disable-fuzz-binary for gitian/guix builds (hebasto)\n+- bitcoin/bitcoin#21182 remove mostly pointless `BOOST_PROCESS` macro (fanquake)\n+- bitcoin/bitcoin#21205 actually fail when Boost is missing (fanquake)\n+- bitcoin/bitcoin#21209 use newer source for libnatpmp (fanquake)\n+- bitcoin/bitcoin#21226 Fix fuzz binary compilation under windows (danben)\n+- bitcoin/bitcoin#21231 Add /opt/homebrew to path to look for boost libraries (fyquah)\n+- bitcoin/bitcoin#21239 guix: Add codesignature attachment support for osx+win (dongcarl)\n+- bitcoin/bitcoin#21250 Make `HAVE_O_CLOEXEC` available outside LevelDB (bugfix) (theStack)\n+- bitcoin/bitcoin#21272 guix: Passthrough `SDK_PATH` into container (dongcarl)\n+- bitcoin/bitcoin#21274 assumptions:  Assume C++17 (fanquake)\n+- bitcoin/bitcoin#21286 Bump minimum Qt version to 5.9.5 (hebasto)\n+- bitcoin/bitcoin#21298 guix: Bump time-machine, glibc, and linux-headers (dongcarl)\n+- bitcoin/bitcoin#21304 guix: Add guix-clean script + establish gc-root for container profiles (dongcarl)\n+- bitcoin/bitcoin#21320 fix libnatpmp macos cross compile (fanquake)\n+- bitcoin/bitcoin#21321 guix: Add curl to required tool list (hebasto)\n+- bitcoin/bitcoin#21333 set Unicode true for NSIS installer (fanquake)\n+- bitcoin/bitcoin#21339 Make `AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER])` unconditional (hebasto)\n+- bitcoin/bitcoin#21349 Fix fuzz-cuckoocache cross-compiling with DEBUG=1 (hebasto)\n+- bitcoin/bitcoin#21354 build, doc: Drop no longer required packages from macOS cross-compiling dependencies (hebasto)\n+- bitcoin/bitcoin#21363 build, qt: Improve Qt static plugins/libs check code (hebasto)\n+- bitcoin/bitcoin#21375 guix: Misc feedback-based fixes + hier restructuring (dongcarl)\n+- bitcoin/bitcoin#21376 Qt 5.12.10 (fanquake)\n+- bitcoin/bitcoin#21382 Clean remnants of QTBUG-34748 fix (hebasto)\n+- bitcoin/bitcoin#21400 Fix regression introduced in #21363 (hebasto)\n+- bitcoin/bitcoin#21403 set --build when configuring packages in depends (fanquake)\n+- bitcoin/bitcoin#21421 don't try and use -fstack-clash-protection on Windows (fanquake)\n+- bitcoin/bitcoin#21423 Cleanups and follow ups after bumping Qt to 5.12.10 (hebasto)\n+- bitcoin/bitcoin#21427 Fix `id_string` invocations (dongcarl)\n+- bitcoin/bitcoin#21430 Add -Werror=implicit-fallthrough compile flag (hebasto)\n+- bitcoin/bitcoin#21457 Split libtapi and clang out of `native_cctools` (fanquake)\n+- bitcoin/bitcoin#21462 guix: Add guix-{attest,verify} scripts (dongcarl)\n+- bitcoin/bitcoin#21495 build, qt: Fix static builds on macOS Big Sur (hebasto)\n+- bitcoin/bitcoin#21497 Do not opt-in unused CoreWLAN stuff in depends for macOS (hebasto)\n+- bitcoin/bitcoin#21543 Enable safe warnings for msvc builds (hebasto)\n+- bitcoin/bitcoin#21565 Make `bitcoin_qt.m4` more generic (fanquake)\n+- bitcoin/bitcoin#21610 remove -Wdeprecated-register from NOWARN flags (fanquake)\n+- bitcoin/bitcoin#21613 enable -Wdocumentation (fanquake)\n+- bitcoin/bitcoin#21629 Fix configuring when building depends with `NO_BDB=1` (fanquake)\n+- bitcoin/bitcoin#21654 build, qt: Make Qt rcc output always deterministic (hebasto)\n+- bitcoin/bitcoin#21655 build, qt: No longer need to set `QT_RCC_TEST=1` for determinism (hebasto)\n+- bitcoin/bitcoin#21658 fix make deploy for arm64-darwin (sgulls)\n+- bitcoin/bitcoin#21694 Use XLIFF file to provide more context to Transifex translators (hebasto)\n+- bitcoin/bitcoin#21708, bitcoin/bitcoin#21593 Drop pointless sed commands (hebasto)\n+- bitcoin/bitcoin#21731 Update msvc build to use Qt5.12.10 binaries (sipsorcery)\n+- bitcoin/bitcoin#21733 Re-add command to install vcpkg (dplusplus1024)\n+- bitcoin/bitcoin#21793 Use `-isysroot` over `--sysroot` on macOS (fanquake)\n+- bitcoin/bitcoin#21869 Add missing `-D_LIBCPP_DEBUG=1` to debug flags (MarcoFalke)\n+- bitcoin/bitcoin#21889 macho: check for control flow instrumentation (fanquake)\n+- bitcoin/bitcoin#21920 Improve macro for testing -latomic requirement (MarcoFalke)\n+- bitcoin/bitcoin#21991 libevent 2.1.12-stable (fanquake)\n+- bitcoin/bitcoin#22054 Bump Qt version to 5.12.11 (hebasto)\n+- bitcoin/bitcoin#22063 Use Qt archive of the same version as the compiled binaries (hebasto)\n+- bitcoin/bitcoin#22070 Don't use cf-protection when targeting arm-apple-darwin (fanquake)\n+- bitcoin/bitcoin#22071 Latest config.guess and config.sub (fanquake)\n+- bitcoin/bitcoin#22075 guix: Misc leftover usability improvements (dongcarl)\n+- bitcoin/bitcoin#22123 Fix qt.mk for mac arm64 (promag)\n+- bitcoin/bitcoin#22174 build, qt: Fix libraries linking order for Linux hosts (hebasto)\n+- bitcoin/bitcoin#22182 guix: Overhaul how guix-{attest,verify} works and hierarchy (dongcarl)\n+- bitcoin/bitcoin#22186 build, qt: Fix compiling qt package in depends with GCC 11 (hebasto)\n+- bitcoin/bitcoin#22199 macdeploy: minor fixups and simplifications (fanquake)\n+- bitcoin/bitcoin#22230 Fix MSVC linker /SubSystem option for bitcoin-qt.exe (hebasto)\n+- bitcoin/bitcoin#22234 Mark print-% target as phony (dgoncharov)\n+- bitcoin/bitcoin#22238 improve detection of eBPF support (fanquake)\n+- bitcoin/bitcoin#22258 Disable deprecated-copy warning only when external warnings are enabled (MarcoFalke)\n+- bitcoin/bitcoin#22320 set minimum required Boost to 1.64.0 (fanquake)\n+- bitcoin/bitcoin#22348 Fix cross build for Windows with Boost Process (hebasto)\n+- bitcoin/bitcoin#22365 guix: Avoid relying on newer symbols by rebasing our cross toolchains on older glibcs (dongcarl)\n+- bitcoin/bitcoin#22381 guix: Test security-check sanity before performing them (with macOS) (fanquake)\n+- bitcoin/bitcoin#22405 Remove --enable-glibc-back-compat from Guix build (fanquake)\n+- bitcoin/bitcoin#22406 Remove --enable-determinism configure option (fanquake)\n+- bitcoin/bitcoin#22410 Avoid GCC 7.1 ABI change warning in guix build (sipa)\n+- bitcoin/bitcoin#22436 use aarch64 Clang if cross-compiling for darwin on aarch64 (fanquake)\n+- bitcoin/bitcoin#22465 guix: Pin kernel-header version, time-machine to upstream 1.3.0 commit (dongcarl)\n+- bitcoin/bitcoin#22511 guix: Silence `getent(1)` invocation, doc fixups (dongcarl)\n+- bitcoin/bitcoin#22531 guix: Fixes to guix-{attest,verify} (achow101)\n+- bitcoin/bitcoin#22642 release: Release with separate sha256sums and sig files (dongcarl)\n+- bitcoin/bitcoin#22685 clientversion: No suffix `#if CLIENT_VERSION_IS_RELEASE` (dongcarl)\n+- bitcoin/bitcoin#22713 Fix build with Boost 1.77.0 (sizeofvoid)\n+\n+### Tests and QA\n+- bitcoin/bitcoin#14604 Add test and refactor `feature_block.py` (sanket1729)\n+- bitcoin/bitcoin#17556 Change `feature_config_args.py` not to rely on strange regtest=0 behavior (ryanofsky)\n+- bitcoin/bitcoin#18795 wallet issue with orphaned rewards (domob1812)\n+- bitcoin/bitcoin#18847 compressor: Use a prevector in CompressScript serialization (jb55)\n+- bitcoin/bitcoin#19259 fuzz: Add fuzzing harness for LoadMempool(\u2026) and DumpMempool(\u2026) (practicalswift)\n+- bitcoin/bitcoin#19315 Allow outbound & block-relay-only connections in functional tests. (amitiuttarwar)\n+- bitcoin/bitcoin#19698 Apply strict verification flags for transaction tests and assert backwards compatibility (glozow)\n+- bitcoin/bitcoin#19801 Check for all possible `OP_CLTV` fail reasons in `feature_cltv.py` (BIP 65) (theStack)\n+- bitcoin/bitcoin#19893 Remove or explain syncwithvalidationinterfacequeue (MarcoFalke)\n+- bitcoin/bitcoin#19972 fuzz: Add fuzzing harness for node eviction logic (practicalswift)\n+- bitcoin/bitcoin#19982 Fix inconsistent lock order in `wallet_tests/CreateWallet` (hebasto)\n+- bitcoin/bitcoin#20000 Fix creation of \"std::string\"s with \\0s (vasild)\n+- bitcoin/bitcoin#20047 Use `wait_for_{block,header}` helpers in `p2p_fingerprint.py` (theStack)\n+- bitcoin/bitcoin#20171 Add functional test `test_txid_inv_delay` (ariard)\n+- bitcoin/bitcoin#20189 Switch to BIP341's suggested scheme for outputs without script (sipa)\n+- bitcoin/bitcoin#20248 Fix length of R check in `key_signature_tests` (dgpv)\n+- bitcoin/bitcoin#20276, bitcoin/bitcoin#20385, bitcoin/bitcoin#20688, bitcoin/bitcoin#20692 Run various mempool tests even with wallet disabled (mjdietzx)\n+- bitcoin/bitcoin#20323 Create or use existing properly initialized NodeContexts (dongcarl)\n+- bitcoin/bitcoin#20354 Add `feature_taproot.py --previous_release` (MarcoFalke)\n+- bitcoin/bitcoin#20370 fuzz: Version handshake (MarcoFalke)\n+- bitcoin/bitcoin#20377 fuzz: Fill various small fuzzing gaps (practicalswift)\n+- bitcoin/bitcoin#20425 fuzz: Make CAddrMan fuzzing harness deterministic (practicalswift)\n+- bitcoin/bitcoin#20430 Sanitizers: Add suppression for unsigned-integer-overflow in libstdc++ (jonasschnelli)\n+- bitcoin/bitcoin#20437 fuzz: Avoid time-based \"non-determinism\" in fuzzing harnesses by using mocked GetTime() (practicalswift)\n+- bitcoin/bitcoin#20458 Add `is_bdb_compiled` helper (Sjors)\n+- bitcoin/bitcoin#20466 Fix intermittent `p2p_fingerprint` issue (MarcoFalke)\n+- bitcoin/bitcoin#20472 Add testing of ParseInt/ParseUInt edge cases with leading +/-/0:s (practicalswift)\n+- bitcoin/bitcoin#20507 sync: print proper lock order location when double lock is detected (vasild)\n+- bitcoin/bitcoin#20522 Fix sync issue in `disconnect_p2ps` (amitiuttarwar)\n+- bitcoin/bitcoin#20524 Move `MIN_VERSION_SUPPORTED` to p2p.py (jnewbery)\n+- bitcoin/bitcoin#20540 Fix `wallet_multiwallet` issue on windows (MarcoFalke)\n+- bitcoin/bitcoin#20560 fuzz: Link all targets once (MarcoFalke)\n+- bitcoin/bitcoin#20567 Add option to git-subtree-check to do full check, add help (laanwj)\n+- bitcoin/bitcoin#20569 Fix intermittent `wallet_multiwallet` issue with `got_loading_error` (MarcoFalke)\n+- bitcoin/bitcoin#20613 Use Popen.wait instead of RPC in `assert_start_raises_init_error` (MarcoFalke)\n+- bitcoin/bitcoin#20663 fuzz: Hide `script_assets_test_minimizer` (MarcoFalke)\n+- bitcoin/bitcoin#20674 fuzz: Call SendMessages after ProcessMessage to increase coverage (MarcoFalke)\n+- bitcoin/bitcoin#20683 Fix restart node race (MarcoFalke)\n+- bitcoin/bitcoin#20686 fuzz: replace CNode code with fuzz/util.h::ConsumeNode() (jonatack)\n+- bitcoin/bitcoin#20733 Inline non-member functions with body in fuzzing headers (pstratem)\n+- bitcoin/bitcoin#20737 Add missing assignment in `mempool_resurrect.py` (MarcoFalke)\n+- bitcoin/bitcoin#20745 Correct `epoll_ctl` data race suppression (hebasto)\n+- bitcoin/bitcoin#20748 Add race:SendZmqMessage tsan suppression (MarcoFalke)\n+- bitcoin/bitcoin#20760 Set correct nValue for multi-op-return policy check (MarcoFalke)\n+- bitcoin/bitcoin#20761 fuzz: Check that `NULL_DATA` is unspendable (MarcoFalke)\n+- bitcoin/bitcoin#20765 fuzz: Check that certain script TxoutType are nonstandard (mjdietzx)\n+- bitcoin/bitcoin#20772 fuzz: Bolster ExtractDestination(s) checks (mjdietzx)\n+- bitcoin/bitcoin#20789 fuzz: Rework strong and weak net enum fuzzing (MarcoFalke)\n+- bitcoin/bitcoin#20828 fuzz: Introduce CallOneOf helper to replace switch-case (MarcoFalke)\n+- bitcoin/bitcoin#20839 fuzz: Avoid extraneous copy of input data, using Span<> (MarcoFalke)\n+- bitcoin/bitcoin#20844 Add sanitizer suppressions for AMD EPYC CPUs (MarcoFalke)\n+- bitcoin/bitcoin#20857 Update documentation in `feature_csv_activation.py` (PiRK)\n+- bitcoin/bitcoin#20876 Replace getmempoolentry with testmempoolaccept in MiniWallet (MarcoFalke)\n+- bitcoin/bitcoin#20881 fuzz: net permission flags in net processing (MarcoFalke)\n+- bitcoin/bitcoin#20882 fuzz: Add missing muhash registration (MarcoFalke)\n+- bitcoin/bitcoin#20908 fuzz: Use mocktime in `process_message*` fuzz targets (MarcoFalke)\n+- bitcoin/bitcoin#20915 fuzz: Fail if message type is not fuzzed (MarcoFalke)\n+- bitcoin/bitcoin#20946 fuzz: Consolidate fuzzing TestingSetup initialization (dongcarl)\n+- bitcoin/bitcoin#20954 Declare `nodes` type `in test_framework.py` (kiminuo)\n+- bitcoin/bitcoin#20955 Fix `get_previous_releases.py` for aarch64 (MarcoFalke)\n+- bitcoin/bitcoin#20969 check that getblockfilter RPC fails without block filter index (theStack)\n+- bitcoin/bitcoin#20971 Work around libFuzzer deadlock (MarcoFalke)\n+- bitcoin/bitcoin#20993 Store subversion (user agent) as string in `msg_version` (theStack)\n+- bitcoin/bitcoin#20995 fuzz: Avoid initializing version to less than `MIN_PEER_PROTO_VERSION` (MarcoFalke)\n+- bitcoin/bitcoin#20998 Fix BlockToJsonVerbose benchmark (martinus)\n+- bitcoin/bitcoin#21003 Move MakeNoLogFileContext to `libtest_util`, and use it in bench (MarcoFalke)\n+- bitcoin/bitcoin#21008 Fix zmq test flakiness, improve speed (theStack)\n+- bitcoin/bitcoin#21023 fuzz: Disable shuffle when merge=1 (MarcoFalke)\n+- bitcoin/bitcoin#21037 fuzz: Avoid designated initialization (C++20) in fuzz tests (practicalswift)\n+- bitcoin/bitcoin#21042 doc, test: Improve `setup_clean_chain` documentation (fjahr)\n+- bitcoin/bitcoin#21080 fuzz: Configure check for main function (take 2) (MarcoFalke)\n+- bitcoin/bitcoin#21084 Fix timeout decrease in `feature_assumevalid` (brunoerg)\n+- bitcoin/bitcoin#21096 Re-add dead code detection (flack)\n+- bitcoin/bitcoin#21100 Remove unused function `xor_bytes` (theStack)\n+- bitcoin/bitcoin#21115 Fix Windows cross build (hebasto)\n+- bitcoin/bitcoin#21117 Remove `assert_blockchain_height` (MarcoFalke)\n+- bitcoin/bitcoin#21121 Small unit test improvements, including helper to make mempool transaction (amitiuttarwar)\n+- bitcoin/bitcoin#21124 Remove unnecessary assignment in bdb (brunoerg)\n+- bitcoin/bitcoin#21125 Change `BOOST_CHECK` to `BOOST_CHECK_EQUAL` for paths (kiminuo)\n+- bitcoin/bitcoin#21142, bitcoin/bitcoin#21512 fuzz: Add `tx_pool` fuzz target (MarcoFalke)\n+- bitcoin/bitcoin#21165 Use mocktime in `test_seed_peers` (dhruv)\n+- bitcoin/bitcoin#21169 fuzz: Add RPC interface fuzzing. Increase fuzzing coverage from 65% to 70% (practicalswift)\n+- bitcoin/bitcoin#21170 bench: Add benchmark to write json into a string (martinus)\n+- bitcoin/bitcoin#21178 Run `mempool_reorg.py` even with wallet disabled (DariusParvin)\n+- bitcoin/bitcoin#21185 fuzz: Remove expensive and redundant muhash from crypto fuzz target (MarcoFalke)\n+- bitcoin/bitcoin#21200 Speed up `rpc_blockchain.py` by removing miniwallet.generate() (MarcoFalke)\n+- bitcoin/bitcoin#21211 Move `P2WSH_OP_TRUE` to shared test library (MarcoFalke)\n+- bitcoin/bitcoin#21228 Avoid comparision of integers with different signs (jonasschnelli)\n+- bitcoin/bitcoin#21230 Fix `NODE_NETWORK_LIMITED_MIN_BLOCKS` disconnection (MarcoFalke)\n+- bitcoin/bitcoin#21252 Add missing wait for sync to `feature_blockfilterindex_prune` (MarcoFalke)\n+- bitcoin/bitcoin#21254 Avoid connecting to real network when running tests (MarcoFalke)\n+- bitcoin/bitcoin#21264 fuzz: Two scripted diff renames (MarcoFalke)\n+- bitcoin/bitcoin#21280 Bug fix in `transaction_tests` (glozow)\n+- bitcoin/bitcoin#21293 Replace accidentally placed bit-OR with logical-OR (hebasto)\n+- bitcoin/bitcoin#21297 `feature_blockfilterindex_prune.py` improvements (jonatack)\n+- bitcoin/bitcoin#21310 zmq test: fix sync-up by matching notification to generated block (theStack)\n+- bitcoin/bitcoin#21334 Additional BIP9 tests (Sjors)\n+- bitcoin/bitcoin#21338 Add functional test for anchors.dat (brunoerg)\n+- bitcoin/bitcoin#21345 Bring `p2p_leak.py` up to date (mzumsande)\n+- bitcoin/bitcoin#21357 Unconditionally check for fRelay field in test framework (jarolrod)\n+- bitcoin/bitcoin#21358 fuzz: Add missing include (`test/util/setup_common.h`) (MarcoFalke)\n+- bitcoin/bitcoin#21371 fuzz: fix gcc Woverloaded-virtual build warnings (jonatack)\n+- bitcoin/bitcoin#21373 Generate fewer blocks in `feature_nulldummy` to fix timeouts, speed up (jonatack)\n+- bitcoin/bitcoin#21390 Test improvements for UTXO set hash tests (fjahr)\n+- bitcoin/bitcoin#21410 increase `rpc_timeout` for fundrawtx `test_transaction_too_large` (jonatack)\n+- bitcoin/bitcoin#21411 add logging, reduce blocks, move `sync_all` in `wallet_` groups (jonatack)\n+- bitcoin/bitcoin#21438 Add ParseUInt8() test coverage (jonatack)\n+- bitcoin/bitcoin#21443 fuzz: Implement `fuzzed_dns_lookup_function` as a lambda (practicalswift)\n+- bitcoin/bitcoin#21445 cirrus: Use SSD cluster for speedup (MarcoFalke)\n+- bitcoin/bitcoin#21477 Add test for CNetAddr::ToString IPv6 address formatting (RFC 5952) (practicalswift)\n+- bitcoin/bitcoin#21487 fuzz: Use ConsumeWeakEnum in addrman for service flags (MarcoFalke)\n+- bitcoin/bitcoin#21488 Add ParseUInt16() unit test and fuzz coverage (jonatack)\n+- bitcoin/bitcoin#21491 test: remove duplicate assertions in util_tests (jonatack)\n+- bitcoin/bitcoin#21522 fuzz: Use PickValue where possible (MarcoFalke)\n+- bitcoin/bitcoin#21531 remove qt byteswap compattests (fanquake)\n+- bitcoin/bitcoin#21557 small cleanup in RPCNestedTests tests (fanquake)\n+- bitcoin/bitcoin#21586 Add missing suppression for signed-integer-overflow:txmempool.cpp (MarcoFalke)\n+- bitcoin/bitcoin#21592 Remove option to make TestChain100Setup non-deterministic (MarcoFalke)\n+- bitcoin/bitcoin#21597 Document `race:validation_chainstatemanager_tests` suppression (MarcoFalke)\n+- bitcoin/bitcoin#21599 Replace file level integer overflow suppression with function level suppression (practicalswift)\n+- bitcoin/bitcoin#21604 Document why no symbol names can be used for suppressions (MarcoFalke)\n+- bitcoin/bitcoin#21606 fuzz: Extend psbt fuzz target a bit (MarcoFalke)\n+- bitcoin/bitcoin#21617 fuzz: Fix uninitialized read in i2p test (MarcoFalke)\n+- bitcoin/bitcoin#21630 fuzz: split FuzzedSock interface and implementation (vasild)\n+- bitcoin/bitcoin#21634 Skip SQLite fsyncs while testing (achow101)\n+- bitcoin/bitcoin#21669 Remove spurious double lock tsan suppressions by bumping to clang-12 (MarcoFalke)\n+- bitcoin/bitcoin#21676 Use mocktime to avoid intermittent failure in `rpc_tests` (MarcoFalke)\n+- bitcoin/bitcoin#21677 fuzz: Avoid use of low file descriptor ids (which may be in use) in FuzzedSock (practicalswift)\n+- bitcoin/bitcoin#21678 Fix TestPotentialDeadLockDetected suppression (hebasto)\n+- bitcoin/bitcoin#21689 Remove intermittently failing and not very meaningful `BOOST_CHECK` in `cnetaddr_basic` (practicalswift)\n+- bitcoin/bitcoin#21691 Check that no versionbits are re-used (MarcoFalke)\n+- bitcoin/bitcoin#21707 Extend functional tests for addr relay (mzumsande)\n+- bitcoin/bitcoin#21712 Test default `include_mempool` value of gettxout (promag)\n+- bitcoin/bitcoin#21738 Use clang-12 for ASAN, Add missing suppression (MarcoFalke)\n+- bitcoin/bitcoin#21740 add new python linter to check file names and permissions (windsok)\n+- bitcoin/bitcoin#21749 Bump shellcheck version (hebasto)\n+- bitcoin/bitcoin#21754 Run `feature_cltv` with MiniWallet (MarcoFalke)\n+- bitcoin/bitcoin#21762 Speed up `mempool_spend_coinbase.py` (MarcoFalke)\n+- bitcoin/bitcoin#21773 fuzz: Ensure prevout is consensus-valid (MarcoFalke)\n+- bitcoin/bitcoin#21777 Fix `feature_notifications.py` intermittent issue (MarcoFalke)\n+- bitcoin/bitcoin#21785 Fix intermittent issue in `p2p_addr_relay.py` (MarcoFalke)\n+- bitcoin/bitcoin#21787 Fix off-by-ones in `rpc_fundrawtransaction` assertions (jonatack)\n+- bitcoin/bitcoin#21792 Fix intermittent issue in `p2p_segwit.py` (MarcoFalke)\n+- bitcoin/bitcoin#21795 fuzz: Terminate immediately if a fuzzing harness tries to perform a DNS lookup (belt and suspenders) (practicalswift)\n+- bitcoin/bitcoin#21798 fuzz: Create a block template in `tx_pool` targets (MarcoFalke)\n+- bitcoin/bitcoin#21804 Speed up `p2p_segwit.py` (jnewbery)\n+- bitcoin/bitcoin#21810 fuzz: Various RPC fuzzer follow-ups (practicalswift)\n+- bitcoin/bitcoin#21814 Fix `feature_config_args.py` intermittent issue (MarcoFalke)\n+- bitcoin/bitcoin#21821 Add missing test for empty P2WSH redeem (MarcoFalke)\n+- bitcoin/bitcoin#21822 Resolve bug in `interface_bitcoin_cli.py` (klementtan)\n+- bitcoin/bitcoin#21846 fuzz: Add `-fsanitize=integer` suppression needed for RPC fuzzer (`generateblock`) (practicalswift)\n+- bitcoin/bitcoin#21849 fuzz: Limit toxic test globals to their respective scope (MarcoFalke)\n+- bitcoin/bitcoin#21867 use MiniWallet for `p2p_blocksonly.py` (theStack)\n+- bitcoin/bitcoin#21873 minor fixes & improvements for files linter test (windsok)\n+- bitcoin/bitcoin#21874 fuzz: Add `WRITE_ALL_FUZZ_TARGETS_AND_ABORT` (MarcoFalke)\n+- bitcoin/bitcoin#21884 fuzz: Remove unused --enable-danger-fuzz-link-all option (MarcoFalke)\n+- bitcoin/bitcoin#21890 fuzz: Limit ParseISO8601DateTime fuzzing to 32-bit (MarcoFalke)\n+- bitcoin/bitcoin#21891 fuzz: Remove strprintf test cases that are known to fail (MarcoFalke)\n+- bitcoin/bitcoin#21892 fuzz: Avoid excessively large min fee rate in `tx_pool` (MarcoFalke)\n+- bitcoin/bitcoin#21895 Add TSA annotations to the WorkQueue class members (hebasto)\n+- bitcoin/bitcoin#21900 use MiniWallet for `feature_csv_activation.py` (theStack)\n+- bitcoin/bitcoin#21909 fuzz: Limit max insertions in timedata fuzz test (MarcoFalke)\n+- bitcoin/bitcoin#21922 fuzz: Avoid timeout in EncodeBase58 (MarcoFalke)\n+- bitcoin/bitcoin#21927 fuzz: Run const CScript member functions only once (MarcoFalke)\n+- bitcoin/bitcoin#21929 fuzz: Remove incorrect float round-trip serialization test (MarcoFalke)\n+- bitcoin/bitcoin#21936 fuzz: Terminate immediately if a fuzzing harness tries to create a TCP socket (belt and suspenders) (practicalswift)\n+- bitcoin/bitcoin#21941 fuzz: Call const member functions in addrman fuzz test only once (MarcoFalke)\n+- bitcoin/bitcoin#21945 add P2PK support to MiniWallet (theStack)\n+- bitcoin/bitcoin#21948 Fix off-by-one in mockscheduler test RPC (MarcoFalke)\n+- bitcoin/bitcoin#21953 fuzz: Add `utxo_snapshot` target (MarcoFalke)\n+- bitcoin/bitcoin#21970 fuzz: Add missing CheckTransaction before CheckTxInputs (MarcoFalke)\n+- bitcoin/bitcoin#21989 Use `COINBASE_MATURITY` in functional tests (kiminuo)\n+- bitcoin/bitcoin#22003 Add thread safety annotations (ajtowns)\n+- bitcoin/bitcoin#22004 fuzz: Speed up transaction fuzz target (MarcoFalke)\n+- bitcoin/bitcoin#22005 fuzz: Speed up banman fuzz target (MarcoFalke)\n+- bitcoin/bitcoin#22029 [fuzz] Improve transport deserialization fuzz test coverage (dhruv)\n+- bitcoin/bitcoin#22048 MiniWallet: introduce enum type for output mode (theStack)\n+- bitcoin/bitcoin#22057 use MiniWallet (P2PK mode) for `feature_dersig.py` (theStack)\n+- bitcoin/bitcoin#22065 Mark `CheckTxInputs` `[[nodiscard]]`. Avoid UUM in fuzzing harness `coins_view` (practicalswift)\n+- bitcoin/bitcoin#22069 fuzz: don't try and use fopencookie() when building for Android (fanquake)\n+- bitcoin/bitcoin#22082 update nanobench from release 4.0.0 to 4.3.4 (martinus)\n+- bitcoin/bitcoin#22086 remove BasicTestingSetup from unit tests that don't need it (fanquake)\n+- bitcoin/bitcoin#22089 MiniWallet: fix fee calculation for P2PK and check tx vsize (theStack)\n+- bitcoin/bitcoin#21107, bitcoin/bitcoin#22092 Convert documentation into type annotations (fanquake)\n+- bitcoin/bitcoin#22095 Additional BIP32 test vector for hardened derivation with leading zeros (kristapsk)\n+- bitcoin/bitcoin#22103 Fix IPv6 check on BSD systems (n-thumann)\n+- bitcoin/bitcoin#22118 check anchors.dat when node starts for the first time (brunoerg)\n+- bitcoin/bitcoin#22120 `p2p_invalid_block`: Check that a block rejected due to too-new tim\u2026 (willcl-ark)\n+- bitcoin/bitcoin#22153 Fix `p2p_leak.py` intermittent failure (mzumsande)\n+- bitcoin/bitcoin#22169 p2p, rpc, fuzz: various tiny follow-ups (jonatack)\n+- bitcoin/bitcoin#22176 Correct outstanding -Werror=sign-compare errors (Empact)\n+- bitcoin/bitcoin#22180 fuzz: Increase branch coverage of the float fuzz target (MarcoFalke)\n+- bitcoin/bitcoin#22187 Add `sync_blocks` in `wallet_orphanedreward.py` (domob1812)\n+- bitcoin/bitcoin#22201 Fix TestShell to allow running in Jupyter Notebook (josibake)\n+- bitcoin/bitcoin#22202 Add temporary coinstats suppressions (MarcoFalke)\n+- bitcoin/bitcoin#22203 Use ConnmanTestMsg from test lib in `denialofservice_tests` (MarcoFalke)\n+- bitcoin/bitcoin#22210 Use MiniWallet in `test_no_inherited_signaling` RBF test (MarcoFalke)\n+- bitcoin/bitcoin#22224 Update msvc and appveyor builds to use Qt5.12.11 binaries (sipsorcery)\n+- bitcoin/bitcoin#22249 Kill process group to avoid dangling processes when using `--failfast` (S3RK)\n+- bitcoin/bitcoin#22267 fuzz: Speed up crypto fuzz target (MarcoFalke)\n+- bitcoin/bitcoin#22270 Add bitcoin-util tests (+refactors) (MarcoFalke)\n+- bitcoin/bitcoin#22271 fuzz: Assert roundtrip equality for `CPubKey` (theStack)\n+- bitcoin/bitcoin#22279 fuzz: add missing ECCVerifyHandle to `base_encode_decode` (apoelstra)\n+- bitcoin/bitcoin#22292 bench, doc: benchmarking updates and fixups (jonatack)\n+- bitcoin/bitcoin#22306 Improvements to `p2p_addr_relay.py` (amitiuttarwar)\n+- bitcoin/bitcoin#22310 Add functional test for replacement relay fee check (ariard)\n+- bitcoin/bitcoin#22311 Add missing syncwithvalidationinterfacequeue in `p2p_blockfilters` (MarcoFalke)\n+- bitcoin/bitcoin#22313 Add missing `sync_all` to `feature_coinstatsindex` (MarcoFalke)\n+- bitcoin/bitcoin#22322 fuzz: Check banman roundtrip (MarcoFalke)\n+- bitcoin/bitcoin#22363 Use `script_util` helpers for creating P2{PKH,SH,WPKH,WSH} scripts (theStack)\n+- bitcoin/bitcoin#22399 fuzz: Rework CTxDestination fuzzing (MarcoFalke)\n+- bitcoin/bitcoin#22408 add tests for `bad-txns-prevout-null` reject reason (theStack)\n+- bitcoin/bitcoin#22445 fuzz: Move implementations of non-template fuzz helpers from util.h to util.cpp (sriramdvt)\n+- bitcoin/bitcoin#22446 Fix `wallet_listdescriptors.py` if bdb is not compiled (hebasto)\n+- bitcoin/bitcoin#22447 Whitelist `rpc_rawtransaction` peers to speed up tests (jonatack)\n+- bitcoin/bitcoin#22742 Use proper target in `do_fund_send` (S3RK)\n+\n+### Miscellaneous\n+- bitcoin/bitcoin#19337 sync: Detect double lock from the same thread (vasild)\n+- bitcoin/bitcoin#19809 log: Prefix log messages with function name and source code location if -logsourcelocations is set (practicalswift)\n+- bitcoin/bitcoin#19866 eBPF Linux tracepoints (jb55)\n+- bitcoin/bitcoin#20024 init: Fix incorrect warning \"Reducing -maxconnections from N to N-1, because of system limitations\" (practicalswift)\n+- bitcoin/bitcoin#20145 contrib: Add getcoins.py script to get coins from (signet) faucet (kallewoof)\n+- bitcoin/bitcoin#20255 util: Add assume() identity function (MarcoFalke)\n+- bitcoin/bitcoin#20288 script, doc: Contrib/seeds updates (jonatack)\n+- bitcoin/bitcoin#20358 src/randomenv.cpp: Fix build on uclibc (ffontaine)\n+- bitcoin/bitcoin#20406 util: Avoid invalid integer negation in formatmoney and valuefromamount (practicalswift)\n+- bitcoin/bitcoin#20434 contrib: Parse elf directly for symbol and security checks (laanwj)\n+- bitcoin/bitcoin#20451 lint: Run mypy over contrib/devtools (fanquake)\n+- bitcoin/bitcoin#20476 contrib: Add test for elf symbol-check (laanwj)\n+- bitcoin/bitcoin#20530 lint: Update cppcheck linter to c++17 and improve explicit usage (fjahr)\n+- bitcoin/bitcoin#20589 log: Clarify that failure to read/write `fee_estimates.dat` is non-fatal (MarcoFalke)\n+- bitcoin/bitcoin#20602 util: Allow use of c++14 chrono literals (MarcoFalke)\n+- bitcoin/bitcoin#20605 init: Signal-safe instant shutdown (laanwj)\n+- bitcoin/bitcoin#20608 contrib: Add symbol check test for PE binaries (fanquake)\n+- bitcoin/bitcoin#20689 contrib: Replace binary verification script verify.sh with python rewrite (theStack)\n+- bitcoin/bitcoin#20715 util: Add argsmanager::getcommand() and use it in bitcoin-wallet (MarcoFalke)\n+- bitcoin/bitcoin#20735 script: Remove outdated extract-osx-sdk.sh (hebasto)\n+- bitcoin/bitcoin#20817 lint: Update list of spelling linter false positives, bump to codespell 2.0.0 (theStack)\n+- bitcoin/bitcoin#20884 script: Improve robustness of bitcoind.service on startup (hebasto)\n+- bitcoin/bitcoin#20906 contrib: Embed c++11 patch in `install_db4.sh` (gruve-p)\n+- bitcoin/bitcoin#21004 contrib: Fix docker args conditional in gitian-build (setpill)\n+- bitcoin/bitcoin#21007 bitcoind: Add -daemonwait option to wait for initialization (laanwj)\n+- bitcoin/bitcoin#21041 log: Move \"Pre-allocating up to position 0x[\u2026] in [\u2026].dat\" log message to debug category (practicalswift)\n+- bitcoin/bitcoin#21059 Drop boost/preprocessor dependencies (hebasto)\n+- bitcoin/bitcoin#21087 guix: Passthrough `BASE_CACHE` into container (dongcarl)\n+- bitcoin/bitcoin#21088 guix: Jump forwards in time-machine and adapt (dongcarl)\n+- bitcoin/bitcoin#21089 guix: Add support for powerpc64{,le} (dongcarl)\n+- bitcoin/bitcoin#21110 util: Remove boost `posix_time` usage from `gettime*` (fanquake)\n+- bitcoin/bitcoin#21111 Improve OpenRC initscript (parazyd)\n+- bitcoin/bitcoin#21123 code style: Add EditorConfig file (kiminuo)\n+- bitcoin/bitcoin#21173 util: Faster hexstr => 13% faster blocktojson (martinus)\n+- bitcoin/bitcoin#21221 tools: Allow argument/parameter bin packing in clang-format (jnewbery)\n+- bitcoin/bitcoin#21244 Move GetDataDir to ArgsManager (kiminuo)\n+- bitcoin/bitcoin#21255 contrib: Run test-symbol-check for risc-v (fanquake)\n+- bitcoin/bitcoin#21271 guix: Explicitly set umask in build container (dongcarl)\n+- bitcoin/bitcoin#21300 script: Add explanatory comment to tc.sh (dscotese)\n+- bitcoin/bitcoin#21317 util: Make assume() usable as unary expression (MarcoFalke)\n+- bitcoin/bitcoin#21336 Make .gitignore ignore src/test/fuzz/fuzz.exe (hebasto)\n+- bitcoin/bitcoin#21337 guix: Update darwin native packages dependencies (hebasto)\n+- bitcoin/bitcoin#21405 compat: remove memcpy -> memmove backwards compatibility alias (fanquake)\n+- bitcoin/bitcoin#21418 contrib: Make systemd invoke dependencies only when ready (laanwj)\n+- bitcoin/bitcoin#21447 Always add -daemonwait to known command line arguments (hebasto)\n+- bitcoin/bitcoin#21471 bugfix: Fix `bech32_encode` calls in `gen_key_io_test_vectors.py` (sipa)\n+- bitcoin/bitcoin#21615 script: Add trusted key for hebasto (hebasto)\n+- bitcoin/bitcoin#21664 contrib: Use lief for macos and windows symbol & security checks (fanquake)\n+- bitcoin/bitcoin#21695 contrib: Remove no longer used contrib/bitcoin-qt.pro (hebasto)\n+- bitcoin/bitcoin#21711 guix: Add full installation and usage documentation (dongcarl)\n+- bitcoin/bitcoin#21799 guix: Use `gcc-8` across the board (dongcarl)\n+- bitcoin/bitcoin#21802 Avoid UB in util/asmap (advance a dereferenceable iterator outside its valid range) (MarcoFalke)\n+- bitcoin/bitcoin#21823 script: Update reviewers (jonatack)\n+- bitcoin/bitcoin#21850 Remove `GetDataDir(net_specific)` function (kiminuo)\n+- bitcoin/bitcoin#21871 scripts: Add checks for minimum required os versions (fanquake)\n+- bitcoin/bitcoin#21966 Remove double serialization; use software encoder for fee estimation (sipa)\n+- bitcoin/bitcoin#22060 contrib: Add torv3 seed nodes for testnet, drop v2 ones (laanwj)\n+- bitcoin/bitcoin#22244 devtools: Correctly extract symbol versions in symbol-check (laanwj)\n+- bitcoin/bitcoin#22533 guix/build: Remove vestigial SKIPATTEST.TAG (dongcarl)\n+- bitcoin/bitcoin#22643 guix-verify: Non-zero exit code when anything fails (dongcarl)\n+- bitcoin/bitcoin#22654 guix: Don't include directory name in SHA256SUMS (achow101)\n+\n+### Documentation\n+- bitcoin/bitcoin#15451 clarify getdata limit after #14897 (HashUnlimited)\n+- bitcoin/bitcoin#15545 Explain why CheckBlock() is called before AcceptBlock (Sjors)\n+- bitcoin/bitcoin#17350 Add developer documentation to isminetype (HAOYUatHZ)\n+- bitcoin/bitcoin#17934 Use `CONFIG_SITE` variable instead of --prefix option (hebasto)\n+- bitcoin/bitcoin#18030 Coin::IsSpent() can also mean never existed (Sjors)\n+- bitcoin/bitcoin#18096 IsFinalTx comment about nSequence & `OP_CLTV` (nothingmuch)\n+- bitcoin/bitcoin#18568 Clarify developer notes about constant naming (ryanofsky)\n+- bitcoin/bitcoin#19961 doc: tor.md updates (jonatack)\n+- bitcoin/bitcoin#19968 Clarify CRollingBloomFilter size estimate (robot-dreams)\n+- bitcoin/bitcoin#20200 Rename CODEOWNERS to REVIEWERS (adamjonas)\n+- bitcoin/bitcoin#20329 docs/descriptors.md: Remove hardened marker in the path after xpub (dgpv)\n+- bitcoin/bitcoin#20380 Add instructions on how to fuzz the P2P layer using Honggfuzz NetDriver (practicalswift)\n+- bitcoin/bitcoin#20414 Remove generated manual pages from master branch (laanwj)\n+- bitcoin/bitcoin#20473 Document current boost dependency as 1.71.0 (laanwj)\n+- bitcoin/bitcoin#20512 Add bash as an OpenBSD dependency (emilengler)\n+- bitcoin/bitcoin#20568 Use FeeModes doc helper in estimatesmartfee (MarcoFalke)\n+- bitcoin/bitcoin#20577 libconsensus: add missing error code description, fix NBitcoin link (theStack)\n+- bitcoin/bitcoin#20587 Tidy up Tor doc (more stringent) (wodry)\n+- bitcoin/bitcoin#20592 Update wtxidrelay documentation per BIP339 (jonatack)\n+- bitcoin/bitcoin#20601 Update for FreeBSD 12.2, add GUI Build Instructions (jarolrod)\n+- bitcoin/bitcoin#20635 fix misleading comment about call to non-existing function (pox)\n+- bitcoin/bitcoin#20646 Refer to BIPs 339/155 in feature negotiation (jonatack)\n+- bitcoin/bitcoin#20653 Move addr relay comment in net to correct place (MarcoFalke)\n+- bitcoin/bitcoin#20677 Remove shouty enums in `net_processing` comments (sdaftuar)\n+- bitcoin/bitcoin#20741 Update 'Secure string handling' (prayank23)\n+- bitcoin/bitcoin#20757 tor.md and -onlynet help updates (jonatack)\n+- bitcoin/bitcoin#20829 Add -netinfo help (jonatack)\n+- bitcoin/bitcoin#20830 Update developer notes with signet (jonatack)\n+- bitcoin/bitcoin#20890 Add explicit macdeployqtplus dependencies install step (hebasto)\n+- bitcoin/bitcoin#20913 Add manual page generation for bitcoin-util (laanwj)\n+- bitcoin/bitcoin#20985 Add xorriso to macOS depends packages (fanquake)\n+- bitcoin/bitcoin#20986 Update developer notes to discourage very long lines (jnewbery)\n+- bitcoin/bitcoin#20987 Add instructions for generating RPC docs (ben-kaufman)\n+- bitcoin/bitcoin#21026 Document use of make-tag script to make tags (laanwj)\n+- bitcoin/bitcoin#21028 doc/bips: Add BIPs 43, 44, 49, and 84 (luke-jr)\n+- bitcoin/bitcoin#21049 Add release notes for listdescriptors RPC (S3RK)\n+- bitcoin/bitcoin#21060 More precise -debug and -debugexclude doc (wodry)\n+- bitcoin/bitcoin#21077 Clarify -timeout and -peertimeout config options (glozow)\n+- bitcoin/bitcoin#21105 Correctly identify script type (niftynei)\n+- bitcoin/bitcoin#21163 Guix is shipped in Debian and Ubuntu (MarcoFalke)\n+- bitcoin/bitcoin#21210 Rework internal and external links (MarcoFalke)\n+- bitcoin/bitcoin#21246 Correction for VerifyTaprootCommitment comments (roconnor-blockstream)\n+- bitcoin/bitcoin#21263 Clarify that squashing should happen before review (MarcoFalke)\n+- bitcoin/bitcoin#21323 guix, doc: Update default HOSTS value (hebasto)\n+- bitcoin/bitcoin#21324 Update build instructions for Fedora (hebasto)\n+- bitcoin/bitcoin#21343 Revamp macOS build doc (jarolrod)\n+- bitcoin/bitcoin#21346 install qt5 when building on macOS (fanquake)\n+- bitcoin/bitcoin#21384 doc: add signet to bitcoin.conf documentation (jonatack)\n+- bitcoin/bitcoin#21394 Improve comment about protected peers (amitiuttarwar)\n+- bitcoin/bitcoin#21398 Update fuzzing docs for afl-clang-lto (MarcoFalke)\n+- bitcoin/bitcoin#21444 net, doc: Doxygen updates and fixes in netbase.{h,cpp} (jonatack)\n+- bitcoin/bitcoin#21481 Tell howto install clang-format on Debian/Ubuntu (wodry)\n+- bitcoin/bitcoin#21567 Fix various misleading comments (glozow)\n+- bitcoin/bitcoin#21661 Fix name of script guix-build (Emzy)\n+- bitcoin/bitcoin#21672 Remove boostrap info from `GUIX_COMMON_FLAGS` doc (fanquake)\n+- bitcoin/bitcoin#21688 Note on SDK for macOS depends cross-compile (jarolrod)\n+- bitcoin/bitcoin#21709 Update reduce-memory.md and bitcoin.conf -maxconnections info (jonatack)\n+- bitcoin/bitcoin#21710 update helps for addnode rpc and -addnode/-maxconnections config options (jonatack)\n+- bitcoin/bitcoin#21752 Clarify that feerates are per virtual size (MarcoFalke)\n+- bitcoin/bitcoin#21811 Remove Visual Studio 2017 reference from readme (sipsorcery)\n+- bitcoin/bitcoin#21818 Fixup -coinstatsindex help, update bitcoin.conf and files.md (jonatack)\n+- bitcoin/bitcoin#21856 add OSS-Fuzz section to fuzzing.md doc (adamjonas)\n+- bitcoin/bitcoin#21912 Remove mention of priority estimation (MarcoFalke)\n+- bitcoin/bitcoin#21925 Update bips.md for 0.21.1 (MarcoFalke)\n+- bitcoin/bitcoin#21942 improve make with parallel jobs description (klementtan)\n+- bitcoin/bitcoin#21947 Fix OSS-Fuzz links (MarcoFalke)\n+- bitcoin/bitcoin#21988 note that brew installed qt is not supported (jarolrod)\n+- bitcoin/bitcoin#22056 describe in fuzzing.md how to reproduce a CI crash (jonatack)\n+- bitcoin/bitcoin#22080 add maxuploadtarget to bitcoin.conf example (jarolrod)\n+- bitcoin/bitcoin#22088 Improve note on choosing posix mingw32 (jarolrod)\n+- bitcoin/bitcoin#22109 Fix external links (IRC, \u2026) (MarcoFalke)\n+- bitcoin/bitcoin#22121 Various validation doc fixups (MarcoFalke)\n+- bitcoin/bitcoin#22172 Update tor.md, release notes with removal of tor v2 support (jonatack)\n+- bitcoin/bitcoin#22204 Remove obsolete `okSafeMode` RPC guideline from developer notes (theStack)\n+- bitcoin/bitcoin#22208 Update `REVIEWERS` (practicalswift)\n+- bitcoin/bitcoin#22250 add basic I2P documentation (vasild)\n+- bitcoin/bitcoin#22296 Final merge of release notes snippets, mv to wiki (MarcoFalke)\n+- bitcoin/bitcoin#22335 recommend `--disable-external-signer` in OpenBSD build guide (theStack)\n+- bitcoin/bitcoin#22339 Document minimum required libc++ version (hebasto)\n+- bitcoin/bitcoin#22349 Repository IRC updates (jonatack)\n+- bitcoin/bitcoin#22360 Remove unused section from release process (MarcoFalke)\n+- bitcoin/bitcoin#22369 Add steps for Transifex to release process (jonatack)\n+- bitcoin/bitcoin#22393 Added info to bitcoin.conf doc (bliotti)\n+- bitcoin/bitcoin#22402 Install Rosetta on M1-macOS for qt in depends (hebasto)\n+- bitcoin/bitcoin#22432 Fix incorrect `testmempoolaccept` doc (glozow)\n+- bitcoin/bitcoin#22648 doc, test: improve i2p/tor docs and i2p reachable unit tests (jonatack)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Aaron Clauson\n+- Adam Jonas\n+- amadeuszpawlik\n+- Amiti Uttarwar\n+- Andrew Chow\n+- Andrew Poelstra\n+- Anthony Towns\n+- Antoine Poinsot\n+- Antoine Riard\n+- apawlik\n+- apitko\n+- Ben Carman\n+- Ben Woosley\n+- benk10\n+- Bezdrighin\n+- Block Mechanic\n+- Brian Liotti\n+- Bruno Garcia\n+- Carl Dong\n+- Christian Decker\n+- coinforensics\n+- Cory Fields\n+- Dan Benjamin\n+- Daniel Kraft\n+- Darius Parvin\n+- Dhruv Mehta\n+- Dmitry Goncharov\n+- Dmitry Petukhov\n+- dplusplus1024\n+- dscotese\n+- Duncan Dean\n+- Elle Mouton\n+- Elliott Jin\n+- Emil Engler\n+- Ethan Heilman\n+- eugene\n+- Evan Klitzke\n+- Fabian Jahr\n+- Fabrice Fontaine\n+- fanquake\n+- fdov\n+- flack\n+- Fotis Koutoupas\n+- Fu Yong Quah\n+- fyquah\n+- glozow\n+- Gregory Sanders\n+- Guido Vranken\n+- Gunar C. Gessner\n+- h\n+- HAOYUatHZ\n+- Hennadii Stepanov\n+- Igor Cota\n+- Ikko Ashimine\n+- Ivan Metlushko\n+- jackielove4u\n+- James O'Beirne\n+- Jarol Rodriguez\n+- Joel Klabo\n+- John Newbery\n+- Jon Atack\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Josiah Baker\n+- Karl-Johan Alm\n+- Kiminuo\n+- Klement Tan\n+- Kristaps Kaupe\n+- Larry Ruane\n+- lisa neigut\n+- Lucas Ontivero\n+- Luke Dashjr\n+- Maayan Keshet\n+- MarcoFalke\n+- Martin Ankerl\n+- Martin Zumsande\n+- Michael Dietz\n+- Michael Polzer\n+- Michael Tidwell\n+- Niklas G\u00f6gge\n+- nthumann\n+- Oliver Gugger\n+- parazyd\n+- Patrick Strateman\n+- Pavol Rusnak\n+- Peter Bushnell\n+- Pierre K\n+- Pieter Wuille\n+- PiRK\n+- pox\n+- practicalswift\n+- Prayank\n+- R E Broadley\n+- Rafael Sadowski\n+- randymcmillan\n+- Raul Siles\n+- Riccardo Spagni\n+- Russell O'Connor\n+- Russell Yanofsky\n+- S3RK\n+- saibato\n+- Samuel Dobson\n+- sanket1729\n+- Sawyer Billings\n+- Sebastian Falbesoner\n+- setpill\n+- sgulls\n+- sinetek\n+- Sjors Provoost\n+- Sriram\n+- Stephan Oeste\n+- Suhas Daftuar\n+- Sylvain Goumy\n+- t-bast\n+- Troy Giorshev\n+- Tushar Singla\n+- Tyler Chambers\n+- Uplab\n+- Vasil Dimov\n+- W. J. van der Laan\n+- willcl-ark\n+- William Bright\n+- William Casarin\n+- windsok\n+- wodry\n+- Yerzhan Mazhkenov\n+- Yuval Kogman\n+- Zero\n+\n+As well as to everyone that helped with translations on\n+[Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "6a5202d0f900f96acdd11839e883a769a7fa222d",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 20,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -271,26 +271,7 @@ cat \"$VERSION\"/*/all.SHA256SUMS.asc > SHA256SUMS.asc\n \n       - Push the flatpak to flathub, e.g. https://github.com/flathub/org.bitcoincore.bitcoin-qt/pull/2\n \n-      - Push the latest version to master (if applicable), e.g. https://github.com/bitcoin-core/packaging/pull/32\n-\n-      - Create a new branch for the major release \"0.xx\" from master (used to build the snap package) and request the\n-        track (if applicable), e.g. https://forum.snapcraft.io/t/track-request-for-bitcoin-core-snap/10112/7\n-\n-      - Notify MarcoFalke so that he can start building the snap package\n-\n-        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging (Click \"Import Now\" to fetch the branch)\n-        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging/+ref/0.xx (Click \"Create snap package\")\n-        - Name it \"bitcoin-core-snap-0.xx\"\n-        - Leave owner and series as-is\n-        - Select architectures that are compiled via guix\n-        - Leave \"automatically build when branch changes\" unticked\n-        - Tick \"automatically upload to store\"\n-        - Put \"bitcoin-core\" in the registered store package name field\n-        - Tick the \"edge\" box\n-        - Put \"0.xx\" in the track field\n-        - Click \"create snap package\"\n-        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest guix results)\n-        - Promote release on https://snapcraft.io/bitcoin-core/releases if it passes sanity checks\n+      - Push the snap, see https://github.com/bitcoin-core/packaging/blob/master/snap/build.md\n \n   - This repo\n "
      },
      {
        "sha": "8dc82ca91e0c7da8f370cd4faacb37820f9506a4",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -23,10 +23,9 @@ There are several ways to see your local onion address in Bitcoin Core:\n You may set the `-debug=tor` config logging option to have additional\n information in the debug log about your Tor configuration.\n \n-CLI `-addrinfo` returns the number of addresses known to your node per network\n-type, including Tor v2 and v3. This is useful to see how many onion addresses\n-are known to your node for `-onlynet=onion` and how many Tor v3 addresses it\n-knows when upgrading to Bitcoin Core v22.0 and up that supports Tor v3 only.\n+CLI `-addrinfo` returns the number of addresses known to your node per\n+network. This can be useful to see how many onion peers your node knows,\n+e.g. for `-onlynet=onion`.\n \n ## 1. Run Bitcoin Core behind a Tor proxy\n \n@@ -134,7 +133,7 @@ You can also check the group of the cookie file. On most Linux systems, the Tor\n auth cookie will usually be `/run/tor/control.authcookie`:\n \n ```\n-stat -c '%G' /run/tor/control.authcookie\n+TORGROUP=$(stat -c '%G' /run/tor/control.authcookie)\n ```\n \n Once you have determined the `${TORGROUP}` and selected the `${USER}` that will"
      },
      {
        "sha": "0521fe08d8d1be705477db7efdf962927c62b48b",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -84,6 +84,7 @@ For instance:\n \n     $ bitcoind -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                -zmqpubhashtx=tcp://192.168.1.2:28332 \\\n+               -zmqpubhashblock=\"tcp://[::1]:28333\" \\\n                -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw \\\n                -zmqpubhashtxhwm=10000\n \n@@ -125,6 +126,9 @@ Setting the keepalive values appropriately for your operating environment may\n improve connectivity in situations where long-lived connections are silently\n dropped by network middle boxes.\n \n+Also, the socket's ZMQ_IPV6 option is enabled to accept connections from IPv6\n+hosts as well. If needed, this option has to be set on the client side too.\n+\n ## Remarks\n \n From the perspective of bitcoind, the ZeroMQ socket is write-only; PUB"
      },
      {
        "sha": "c5b79709c71f0c506d627274e445f021293ba0fe",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -157,7 +157,7 @@\n #coinstatsindex=1\n \n # Enable pruning to reduce storage requirements by deleting old blocks.\n-# This mode is incompatible with -txindex, -coinstatsindex and -rescan.\n+# This mode is incompatible with -txindex and -coinstatsindex.\n # 0 = default (no pruning).\n # 1 = allows manual pruning via RPC.\n # >=550 = target to stay under in MiB."
      },
      {
        "sha": "053359e0a8874d1f3865051b0d90b6cf99e84539",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,7 +3,7 @@\n <plist version=\"0.9\">\n <dict>\n   <key>LSMinimumSystemVersion</key>\n-  <string>10.14.0</string>\n+  <string>10.15.0</string>\n \n   <key>LSArchitecturePriority</key>\n   <array>\n@@ -16,6 +16,11 @@\n   <key>CFBundlePackageType</key>\n   <string>APPL</string>\n \n+  <key>CFBundleSupportedPlatforms</key>\n+  <array>\n+\t   <string>MacOSX</string>\n+  </array>\n+\n   <key>NSHumanReadableCopyright</key>\n   <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_BUILD@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n "
      },
      {
        "sha": "27616ad072fc3f6d33f7eabdb9ba6f5c937fb4bc",
        "filename": "src/.clang-tidy",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/.clang-tidy",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/.clang-tidy",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-tidy?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,2 @@\n+Checks:          '-*,bugprone-argument-comment'\n+WarningsAsErrors: bugprone-argument-comment"
      },
      {
        "sha": "b366252ba339bada26acef52e3cce02c12f889b8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -261,13 +261,15 @@ BITCOIN_CORE_H = \\\n   util/sock.h \\\n   util/spanparsing.h \\\n   util/string.h \\\n+  util/syscall_sandbox.h \\\n   util/system.h \\\n   util/thread.h \\\n   util/threadnames.h \\\n   util/time.h \\\n   util/tokenpipe.h \\\n   util/trace.h \\\n   util/translation.h \\\n+  util/types.h \\\n   util/ui_change_type.h \\\n   util/url.h \\\n   util/vector.h \\\n@@ -497,9 +499,9 @@ crypto_libbitcoin_crypto_shani_a_SOURCES = crypto/sha256_shani.cpp\n libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_consensus_a_SOURCES = \\\n-  amount.h \\\n   arith_uint256.cpp \\\n   arith_uint256.h \\\n+  consensus/amount.h \\\n   consensus/merkle.cpp \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n@@ -570,7 +572,7 @@ libbitcoin_common_a_SOURCES = \\\n \n # util: shared between all executables.\n # This library *must* be included to make sure that the glibc\n-# backward-compatibility objects and their sanity checks are linked.\n+# sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_util_a_SOURCES = \\\n@@ -610,6 +612,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/spanparsing.cpp \\\n   util/strencodings.cpp \\\n   util/string.cpp \\\n+  util/syscall_sandbox.cpp \\\n   util/time.cpp \\\n   util/tokenpipe.cpp \\\n   $(BITCOIN_CORE_H)\n@@ -618,11 +621,6 @@ if USE_LIBEVENT\n libbitcoin_util_a_SOURCES += util/url.cpp\n endif\n \n-if GLIBC_BACK_COMPAT\n-libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n-AM_LDFLAGS += $(COMPAT_LDFLAGS)\n-endif\n-\n # cli: shared between bitcoin-cli and bitcoin-qt\n libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -750,10 +748,6 @@ if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = support/cleanse.cpp $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n \n-if GLIBC_BACK_COMPAT\n-  libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n-endif\n-\n libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(LIBSECP256K1)\n libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj -I$(srcdir)/secp256k1/include -DBUILD_BITCOIN_INTERNAL"
      },
      {
        "sha": "3cbe71792cae8e81f2102b730e0ceb536844869a",
        "filename": "src/Makefile.crc32c.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.crc32c.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.crc32c.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.crc32c.include?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,7 +14,6 @@ CRC32C_CPPFLAGS_INT += -I$(srcdir)/crc32c/include\n CRC32C_CPPFLAGS_INT += -DHAVE_BUILTIN_PREFETCH=@HAVE_BUILTIN_PREFETCH@\n CRC32C_CPPFLAGS_INT += -DHAVE_MM_PREFETCH=@HAVE_MM_PREFETCH@\n CRC32C_CPPFLAGS_INT += -DHAVE_STRONG_GETAUXVAL=@HAVE_STRONG_GETAUXVAL@\n-CRC32C_CPPFLAGS_INT += -DHAVE_WEAK_GETAUXVAL=@HAVE_WEAK_GETAUXVAL@\n CRC32C_CPPFLAGS_INT += -DCRC32C_TESTS_BUILT_WITH_GLOG=0\n \n if ENABLE_SSE42"
      },
      {
        "sha": "f4b0b3adbe0ce5519aed406c9490d96b995ebb0e",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -338,14 +338,14 @@ bitcoin_qt_libtoolflags = $(AM_LIBTOOLFLAGS) --tag CXX\n \n qt_bitcoin_qt_CPPFLAGS = $(bitcoin_qt_cppflags)\n qt_bitcoin_qt_CXXFLAGS = $(bitcoin_qt_cxxflags)\n-qt_bitcoin_qt_SOURCES = $(bitcoin_qt_sources)\n+qt_bitcoin_qt_SOURCES = $(bitcoin_qt_sources) init/bitcoind.cpp\n qt_bitcoin_qt_LDADD = $(bitcoin_qt_ldadd)\n qt_bitcoin_qt_LDFLAGS = $(bitcoin_qt_ldflags)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(bitcoin_qt_libtoolflags)\n \n bitcoin_gui_CPPFLAGS = $(bitcoin_qt_cppflags)\n bitcoin_gui_CXXFLAGS = $(bitcoin_qt_cxxflags)\n-bitcoin_gui_SOURCES = $(bitcoin_qt_sources)\n+bitcoin_gui_SOURCES = $(bitcoin_qt_sources) init/bitcoind.cpp\n bitcoin_gui_LDADD = $(bitcoin_qt_ldadd)\n bitcoin_gui_LDFLAGS = $(bitcoin_qt_ldflags)\n bitcoin_gui_LIBTOOLFLAGS = $(bitcoin_qt_libtoolflags)"
      },
      {
        "sha": "8a5521eeb546f2822633bde7d6caf1bb95a9f4d4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -28,6 +28,7 @@ qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n+  init/bitcoind.cpp \\\n   qt/test/apptests.cpp \\\n   qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\"
      },
      {
        "sha": "be63214c238ead64ab07f503ef64ee8b79bad19f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -232,7 +232,6 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/crypto_hkdf_hmac_sha256_l32.cpp \\\n  test/fuzz/crypto_poly1305.cpp \\\n  test/fuzz/cuckoocache.cpp \\\n- test/fuzz/data_stream.cpp \\\n  test/fuzz/decode_tx.cpp \\\n  test/fuzz/descriptor_parse.cpp \\\n  test/fuzz/deserialize.cpp \\"
      },
      {
        "sha": "0a3b99e7d23b0a20eef632afaf5778c84d533faf",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,6 +9,7 @@ EXTRA_LIBRARIES += \\\n \n TEST_UTIL_H = \\\n     test/util/blockfilter.h \\\n+    test/util/chainstate.h \\\n     test/util/logging.h \\\n     test/util/mining.h \\\n     test/util/net.h \\"
      },
      {
        "sha": "94c77a6d896bcfb88bc45996916699bc25077558",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 41,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -18,8 +18,15 @@\n #include <univalue.h>\n #include <util/settings.h>\n #include <util/system.h>\n+#include <util/translation.h>\n \n namespace {\n+\n+class DbNotFoundError : public std::exception\n+{\n+    using std::exception::exception;\n+};\n+\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {\n@@ -77,47 +84,40 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n }\n \n template <typename Stream, typename Data>\n-bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n+void DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n {\n-    try {\n-        CHashVerifier<Stream> verifier(&stream);\n-        // de-serialize file header (network specific magic number) and ..\n-        unsigned char pchMsgTmp[4];\n-        verifier >> pchMsgTmp;\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s: Invalid network magic number\", __func__);\n-\n-        // de-serialize data\n-        verifier >> data;\n-\n-        // verify checksum\n-        if (fCheckSum) {\n-            uint256 hashTmp;\n-            stream >> hashTmp;\n-            if (hashTmp != verifier.GetHash()) {\n-                return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-            }\n-        }\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    CHashVerifier<Stream> verifier(&stream);\n+    // de-serialize file header (network specific magic number) and ..\n+    unsigned char pchMsgTmp[4];\n+    verifier >> pchMsgTmp;\n+    // ... verify the network matches ours\n+    if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp))) {\n+        throw std::runtime_error{\"Invalid network magic number\"};\n     }\n \n-    return true;\n+    // de-serialize data\n+    verifier >> data;\n+\n+    // verify checksum\n+    if (fCheckSum) {\n+        uint256 hashTmp;\n+        stream >> hashTmp;\n+        if (hashTmp != verifier.GetHash()) {\n+            throw std::runtime_error{\"Checksum mismatch, data corrupted\"};\n+        }\n+    }\n }\n \n template <typename Data>\n-bool DeserializeFileDB(const fs::path& path, Data& data, int version)\n+void DeserializeFileDB(const fs::path& path, Data& data, int version)\n {\n     // open input file, and associate with CAutoFile\n     FILE* file = fsbridge::fopen(path, \"rb\");\n     CAutoFile filein(file, SER_DISK, version);\n     if (filein.IsNull()) {\n-        LogPrintf(\"Missing or invalid file %s\\n\", path.string());\n-        return false;\n+        throw DbNotFoundError{};\n     }\n-    return DeserializeDB(filein, data);\n+    DeserializeDB(filein, data);\n }\n } // namespace\n \n@@ -170,24 +170,38 @@ bool CBanDB::Read(banmap_t& banSet)\n     return true;\n }\n \n-CAddrDB::CAddrDB()\n-{\n-    pathAddr = gArgs.GetDataDirNet() / \"peers.dat\";\n-}\n-\n-bool CAddrDB::Write(const CAddrMan& addr)\n+bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr)\n {\n+    const auto pathAddr = args.GetDataDirNet() / \"peers.dat\";\n     return SerializeFileDB(\"peers\", pathAddr, addr, CLIENT_VERSION);\n }\n \n-bool CAddrDB::Read(CAddrMan& addr)\n+void ReadFromStream(CAddrMan& addr, CDataStream& ssPeers)\n {\n-    return DeserializeFileDB(pathAddr, addr, CLIENT_VERSION);\n+    DeserializeDB(ssPeers, addr, false);\n }\n \n-bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n+std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const ArgsManager& args, std::unique_ptr<CAddrMan>& addrman)\n {\n-    return DeserializeDB(ssPeers, addr, false);\n+    auto check_addrman = std::clamp<int32_t>(args.GetIntArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+\n+    int64_t nStart = GetTimeMillis();\n+    const auto path_addr{args.GetDataDirNet() / \"peers.dat\"};\n+    try {\n+        DeserializeFileDB(path_addr, *addrman, CLIENT_VERSION);\n+        LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman->size(), GetTimeMillis() - nStart);\n+    } catch (const DbNotFoundError&) {\n+        // Addrman can be in an inconsistent state after failure, reset it\n+        addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+        LogPrintf(\"Creating peers.dat because the file was not found (%s)\\n\", path_addr);\n+        DumpPeerAddresses(args, *addrman);\n+    } catch (const std::exception& e) {\n+        addrman = nullptr;\n+        return strprintf(_(\"Invalid or corrupt peers.dat (%s). If you believe this is a bug, please report it to %s. As a workaround, you can move the file (%s) out of the way (rename, move, or delete) to have a new one created on the next start.\"),\n+                         e.what(), PACKAGE_BUGREPORT, path_addr);\n+    }\n+    return std::nullopt;\n }\n \n void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& anchors)\n@@ -199,9 +213,10 @@ void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& a\n std::vector<CAddress> ReadAnchors(const fs::path& anchors_db_path)\n {\n     std::vector<CAddress> anchors;\n-    if (DeserializeFileDB(anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT)) {\n+    try {\n+        DeserializeFileDB(anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT);\n         LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), anchors_db_path.filename());\n-    } else {\n+    } catch (const std::exception&) {\n         anchors.clear();\n     }\n "
      },
      {
        "sha": "33cc1f92040f09e8a832f2b9eaa01da079db4d56",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -10,23 +10,18 @@\n #include <net_types.h> // For banmap_t\n #include <univalue.h>\n \n+#include <optional>\n #include <vector>\n \n-class CAddress;\n+class ArgsManager;\n class CAddrMan;\n+class CAddress;\n class CDataStream;\n+struct bilingual_str;\n \n-/** Access to the (IP) address database (peers.dat) */\n-class CAddrDB\n-{\n-private:\n-    fs::path pathAddr;\n-public:\n-    CAddrDB();\n-    bool Write(const CAddrMan& addr);\n-    bool Read(CAddrMan& addr);\n-    static bool Read(CAddrMan& addr, CDataStream& ssPeers);\n-};\n+bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr);\n+/** Only used by tests. */\n+void ReadFromStream(CAddrMan& addr, CDataStream& ssPeers);\n \n /** Access to the banlist database (banlist.json) */\n class CBanDB\n@@ -52,6 +47,9 @@ class CBanDB\n     bool Read(banmap_t& banSet);\n };\n \n+/** Returns an error string on failure */\n+std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const ArgsManager& args, std::unique_ptr<CAddrMan>& addrman);\n+\n /**\n  * Dump the anchor IP address database (anchors.dat)\n  *"
      },
      {
        "sha": "7c6b8fe64db5ed73a0d0ba7eaf42da9864601cd5",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 52,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,10 +5,13 @@\n \n #include <addrman.h>\n \n+#include <clientversion.h>\n #include <hash.h>\n #include <logging.h>\n #include <netaddress.h>\n #include <serialize.h>\n+#include <streams.h>\n+#include <util/check.h>\n \n #include <cmath>\n #include <optional>\n@@ -98,10 +101,11 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-CAddrMan::CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n+CAddrMan::CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)\n     : insecure_rand{deterministic}\n     , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n     , m_consistency_check_ratio{consistency_check_ratio}\n+    , m_asmap{std::move(asmap)}\n {\n     for (auto& bucket : vvNew) {\n         for (auto& entry : bucket) {\n@@ -242,9 +246,9 @@ void CAddrMan::Unserialize(Stream& s_)\n     const uint8_t lowest_compatible = compat - INCOMPATIBILITY_BASE;\n     if (lowest_compatible > FILE_FORMAT) {\n         throw std::ios_base::failure(strprintf(\n-                    \"Unsupported format of addrman database: %u. It is compatible with formats >=%u, \"\n-                    \"but the maximum supported by this version of %s is %u.\",\n-                    format, lowest_compatible, PACKAGE_NAME, static_cast<uint8_t>(FILE_FORMAT)));\n+            \"Unsupported format of addrman database: %u. It is compatible with formats >=%u, \"\n+            \"but the maximum supported by this version of %s is %u.\",\n+            uint8_t{format}, uint8_t{lowest_compatible}, PACKAGE_NAME, uint8_t{FILE_FORMAT}));\n     }\n \n     s >> nKey;\n@@ -382,7 +386,12 @@ void CAddrMan::Unserialize(Stream& s_)\n         LogPrint(BCLog::ADDRMAN, \"addrman lost %i new and %i tried addresses due to collisions or invalid addresses\\n\", nLostUnk, nLost);\n     }\n \n-    Check();\n+    const int check_code{ForceCheckAddrman()};\n+    if (check_code != 0) {\n+        throw std::ios_base::failure(strprintf(\n+            \"Corrupt data. Consistency check failed with code %s\",\n+            check_code));\n+    }\n }\n \n // explicit instantiation\n@@ -485,11 +494,14 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n     AssertLockHeld(cs);\n \n     // remove the entry from all new buckets\n-    for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n-        int pos = info.GetBucketPosition(nKey, true, bucket);\n+    const int start_bucket{info.GetNewBucket(nKey, m_asmap)};\n+    for (int n = 0; n < ADDRMAN_NEW_BUCKET_COUNT; ++n) {\n+        const int bucket{(start_bucket + n) % ADDRMAN_NEW_BUCKET_COUNT};\n+        const int pos{info.GetBucketPosition(nKey, true, bucket)};\n         if (vvNew[bucket][pos] == nId) {\n             vvNew[bucket][pos] = -1;\n             info.nRefCount--;\n+            if (info.nRefCount == 0) break;\n         }\n     }\n     nNew--;\n@@ -561,22 +573,10 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n     if (info.fInTried)\n         return;\n \n-    // find a bucket it is in now\n-    int nRnd = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n-    int nUBucket = -1;\n-    for (unsigned int n = 0; n < ADDRMAN_NEW_BUCKET_COUNT; n++) {\n-        int nB = (n + nRnd) % ADDRMAN_NEW_BUCKET_COUNT;\n-        int nBpos = info.GetBucketPosition(nKey, true, nB);\n-        if (vvNew[nB][nBpos] == nId) {\n-            nUBucket = nB;\n-            break;\n-        }\n-    }\n-\n-    // if no bucket is found, something bad happened;\n-    // TODO: maybe re-add the node, but for now, just bail out\n-    if (nUBucket == -1)\n+    // if it is not in new, something bad happened\n+    if (!Assume(info.nRefCount > 0)) {\n         return;\n+    }\n \n     // which tried bucket to move the entry to\n     int tried_bucket = info.GetTriedBucket(nKey, m_asmap);\n@@ -748,13 +748,24 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n     }\n }\n \n-int CAddrMan::Check_() const\n+void CAddrMan::Check() const\n {\n     AssertLockHeld(cs);\n \n     // Run consistency checks 1 in m_consistency_check_ratio times if enabled\n-    if (m_consistency_check_ratio == 0) return 0;\n-    if (insecure_rand.randrange(m_consistency_check_ratio) >= 1) return 0;\n+    if (m_consistency_check_ratio == 0) return;\n+    if (insecure_rand.randrange(m_consistency_check_ratio) >= 1) return;\n+\n+    const int err{ForceCheckAddrman()};\n+    if (err) {\n+        LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        assert(false);\n+    }\n+}\n+\n+int CAddrMan::ForceCheckAddrman() const\n+{\n+    AssertLockHeld(cs);\n \n     LogPrint(BCLog::ADDRMAN, \"Addrman checks started: new %i, tried %i, total %u\\n\", nNew, nTried, vRandom.size());\n \n@@ -1006,30 +1017,3 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n \n     return mapInfo[id_old];\n }\n-\n-std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n-{\n-    std::vector<bool> bits;\n-    FILE *filestr = fsbridge::fopen(path, \"rb\");\n-    CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n-    if (file.IsNull()) {\n-        LogPrintf(\"Failed to open asmap file from disk\\n\");\n-        return bits;\n-    }\n-    fseek(filestr, 0, SEEK_END);\n-    int length = ftell(filestr);\n-    LogPrintf(\"Opened asmap file %s (%d bytes) from disk\\n\", path, length);\n-    fseek(filestr, 0, SEEK_SET);\n-    uint8_t cur_byte;\n-    for (int i = 0; i < length; ++i) {\n-        file >> cur_byte;\n-        for (int bit = 0; bit < 8; ++bit) {\n-            bits.push_back((cur_byte >> bit) & 1);\n-        }\n-    }\n-    if (!SanityCheckASMap(bits)) {\n-        LogPrintf(\"Sanity check of asmap file %s failed\\n\", path);\n-        return {};\n-    }\n-    return bits;\n-}"
      },
      {
        "sha": "7dd8528bef1dcd6c43883396d4ab9e73456bd3c4",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,23 +6,16 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include <clientversion.h>\n-#include <config/bitcoin-config.h>\n #include <fs.h>\n-#include <hash.h>\n+#include <logging.h>\n #include <netaddress.h>\n #include <protocol.h>\n-#include <random.h>\n-#include <streams.h>\n #include <sync.h>\n #include <timedata.h>\n-#include <tinyformat.h>\n-#include <util/system.h>\n \n-#include <iostream>\n+#include <cstdint>\n #include <optional>\n #include <set>\n-#include <stdint.h>\n #include <unordered_map>\n #include <vector>\n \n@@ -149,32 +142,13 @@ static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n class CAddrMan\n {\n public:\n-    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n-    // Should be always empty if no file was provided.\n-    // This mapping is then used for bucketing nodes in Addrman.\n-    //\n-    // If asmap is provided, nodes will be bucketed by\n-    // AS they belong to, in order to make impossible for a node\n-    // to connect to several nodes hosted in a single AS.\n-    // This is done in response to Erebus attack, but also to generally\n-    // diversify the connections every node creates,\n-    // especially useful when a large fraction of nodes\n-    // operate under a couple of cloud providers.\n-    //\n-    // If a new asmap was provided, the existing records\n-    // would be re-bucketed accordingly.\n-    std::vector<bool> m_asmap;\n-\n-    // Read asmap from provided binary file\n-    static std::vector<bool> DecodeAsmap(fs::path path);\n-\n     template <typename Stream>\n     void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n \n     template <typename Stream>\n     void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n \n-    explicit CAddrMan(bool deterministic, int32_t consistency_check_ratio);\n+    explicit CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio);\n \n     ~CAddrMan()\n     {\n@@ -296,6 +270,8 @@ class CAddrMan\n         Check();\n     }\n \n+    const std::vector<bool>& GetAsmap() const { return m_asmap; }\n+\n private:\n     //! A mutex to protect the inner data structures.\n     mutable Mutex cs;\n@@ -363,6 +339,22 @@ class CAddrMan\n     /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n     const int32_t m_consistency_check_ratio;\n \n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n@@ -399,20 +391,12 @@ class CAddrMan\n     //! Return a random to-be-evicted tried table address.\n     CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    //! Consistency check\n-    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n-    {\n-        AssertLockHeld(cs);\n-\n-        const int err = Check_();\n-        if (err) {\n-            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-            assert(false);\n-        }\n-    }\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    //! Perform consistency check. Returns an error code or zero.\n-    int Check_() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /**\n      * Return all or many randomly selected addresses, optionally by network."
      },
      {
        "sha": "9da2488ef2afb60ed9970d5f70b6ad069b06697a",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -66,6 +66,26 @@ uint32_t PolyMod(const data& v)\n     // the above example, `c` initially corresponds to 1 mod g(x), and after processing 2 inputs of\n     // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n     // for `c`.\n+\n+    // The following Sage code constructs the generator used:\n+    //\n+    // B = GF(2) # Binary field\n+    // BP.<b> = B[] # Polynomials over the binary field\n+    // F_mod = b**5 + b**3 + 1\n+    // F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+    // FP.<x> = F[] # Polynomials over GF(32)\n+    // E_mod = x**2 + F.fetch_int(9)*x + F.fetch_int(23)\n+    // E.<e> = F.extension(E_mod) # GF(1024) extension field definition\n+    // for p in divisors(E.order() - 1): # Verify e has order 1023.\n+    //    assert((e**p == 1) == (p % 1023 == 0))\n+    // G = lcm([(e**i).minpoly() for i in range(997,1000)])\n+    // print(G) # Print out the generator\n+    //\n+    // It demonstrates that g(x) is the least common multiple of the minimal polynomials\n+    // of 3 consecutive powers (997,998,999) of a primitive element (e) of GF(1024).\n+    // That guarantees it is, in fact, the generator of a primitive BCH code with cycle\n+    // length 1023 and distance 4. See https://en.wikipedia.org/wiki/BCH_code for more details.\n+\n     uint32_t c = 1;\n     for (const auto v_i : v) {\n         // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n@@ -88,12 +108,21 @@ uint32_t PolyMod(const data& v)\n         // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i:\n         c = ((c & 0x1ffffff) << 5) ^ v_i;\n \n-        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x). These constants can be\n+        // computed using the following Sage code (continuing the code above):\n+        //\n+        // for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(g(x) mod x^6), packed in hex integers.\n+        //     v = 0\n+        //     for coef in reversed((F.fetch_int(i)*(G % x**6)).coefficients(sparse=True)):\n+        //         v = v*32 + coef.integer_representation()\n+        //     print(\"0x%x\" % v)\n+        //\n         if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n         if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n         if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n         if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n         if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+\n     }\n     return c;\n }\n@@ -125,7 +154,8 @@ Encoding VerifyChecksum(const std::string& hrp, const data& values)\n     // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n     // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n     // list of values would result in a new valid list. For that reason, Bech32 requires the\n-    // resulting checksum to be 1 instead. In Bech32m, this constant was amended.\n+    // resulting checksum to be 1 instead. In Bech32m, this constant was amended. See\n+    // https://gist.github.com/sipa/14c248c288c3880a3b191f978a34508e for details.\n     const uint32_t check = PolyMod(Cat(ExpandHRP(hrp), values));\n     if (check == EncodingConstant(Encoding::BECH32)) return Encoding::BECH32;\n     if (check == EncodingConstant(Encoding::BECH32M)) return Encoding::BECH32M;"
      },
      {
        "sha": "bebf86a09d93c75f5def7ffc77419939fe8a2937",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 25,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n #include <addrman.h>\n #include <bench/bench.h>\n #include <random.h>\n+#include <util/check.h>\n #include <util/time.h>\n \n #include <optional>\n@@ -73,14 +74,14 @@ static void AddrManAdd(benchmark::Bench& bench)\n     CreateAddresses();\n \n     bench.run([&] {\n-        CAddrMan addrman{/* deterministic */ false, /* consistency_check_ratio */ 0};\n+        CAddrMan addrman{/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0};\n         AddAddressesToAddrMan(addrman);\n     });\n }\n \n static void AddrManSelect(benchmark::Bench& bench)\n {\n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     FillAddrMan(addrman);\n \n@@ -92,7 +93,7 @@ static void AddrManSelect(benchmark::Bench& bench)\n \n static void AddrManGetAddr(benchmark::Bench& bench)\n {\n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     FillAddrMan(addrman);\n \n@@ -102,40 +103,33 @@ static void AddrManGetAddr(benchmark::Bench& bench)\n     });\n }\n \n-static void AddrManGood(benchmark::Bench& bench)\n+static void AddrManAddThenGood(benchmark::Bench& bench)\n {\n-    /* Create many CAddrMan objects - one to be modified at each loop iteration.\n-     * This is necessary because the CAddrMan::Good() method modifies the\n-     * object, affecting the timing of subsequent calls to the same method and\n-     * we want to do the same amount of work in every loop iteration. */\n-\n-    bench.epochs(5).epochIterations(1);\n-    const size_t addrman_count{bench.epochs() * bench.epochIterations()};\n-\n-    std::vector<std::unique_ptr<CAddrMan>> addrmans(addrman_count);\n-    for (size_t i{0}; i < addrman_count; ++i) {\n-        addrmans[i] = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ 0);\n-        FillAddrMan(*addrmans[i]);\n-    }\n-\n     auto markSomeAsGood = [](CAddrMan& addrman) {\n         for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n             for (size_t addr_i = 0; addr_i < NUM_ADDRESSES_PER_SOURCE; ++addr_i) {\n-                if (addr_i % 32 == 0) {\n-                    addrman.Good(g_addresses[source_i][addr_i]);\n-                }\n+                addrman.Good(g_addresses[source_i][addr_i]);\n             }\n         }\n     };\n \n-    uint64_t i = 0;\n+    CreateAddresses();\n+\n     bench.run([&] {\n-        markSomeAsGood(*addrmans.at(i));\n-        ++i;\n+        // To make the benchmark independent of the number of evaluations, we always prepare a new addrman.\n+        // This is necessary because CAddrMan::Good() method modifies the object, affecting the timing of subsequent calls\n+        // to the same method and we want to do the same amount of work in every loop iteration.\n+        //\n+        // This has some overhead (exactly the result of AddrManAdd benchmark), but that overhead is constant so improvements in\n+        // CAddrMan::Good() will still be noticeable.\n+        CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+        AddAddressesToAddrMan(addrman);\n+\n+        markSomeAsGood(addrman);\n     });\n }\n \n BENCHMARK(AddrManAdd);\n BENCHMARK(AddrManSelect);\n BENCHMARK(AddrManGetAddr);\n-BENCHMARK(AddrManGood);\n+BENCHMARK(AddrManAddThenGood);"
      },
      {
        "sha": "bc3685818e5683618ee7222b09fe1233c7b6d2f5",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <bench/nanobench.h>\n \n #include <bech32.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "030bc43396165c9f6e00c5f0f982f5972d9d9a8c",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,11 +4,18 @@\n \n #include <bench/bench.h>\n \n-#include <chainparams.h>\n #include <test/util/setup_common.h>\n-#include <validation.h>\n \n+#include <chrono>\n+#include <fstream>\n+#include <functional>\n+#include <iostream>\n+#include <map>\n #include <regex>\n+#include <string>\n+#include <vector>\n+\n+using namespace std::chrono_literals;\n \n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n@@ -61,6 +68,12 @@ void benchmark::BenchRunner::RunAll(const Args& args)\n \n         Bench bench;\n         bench.name(p.first);\n+        if (args.min_time > 0ms) {\n+            // convert to nanos before dividing to reduce rounding errors\n+            std::chrono::nanoseconds min_time_ns = args.min_time;\n+            bench.minEpochTime(min_time_ns / bench.epochs());\n+        }\n+\n         if (args.asymptote.empty()) {\n             p.second(bench);\n         } else {"
      },
      {
        "sha": "b0e4006ee32aaf63d3b710a46d5c59b99cb14178",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -41,11 +41,12 @@ using ankerl::nanobench::Bench;\n typedef std::function<void(Bench&)> BenchFunction;\n \n struct Args {\n-    std::string regex_filter;\n     bool is_list_only;\n+    std::chrono::milliseconds min_time;\n     std::vector<double> asymptote;\n     std::string output_csv;\n     std::string output_json;\n+    std::string regex_filter;\n };\n \n class BenchRunner"
      },
      {
        "sha": "0b43ea1fd56a3ad889a901b9260f0053e527a83c",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 6,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,21 +4,28 @@\n \n #include <bench/bench.h>\n \n+#include <clientversion.h>\n #include <crypto/sha256.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n \n-#include <memory>\n+#include <chrono>\n+#include <cstdint>\n+#include <iostream>\n+#include <sstream>\n+#include <vector>\n \n static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n \n static void SetupBenchArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-asymptote=<n1,n2,n3,...>\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-min_time=<milliseconds>\", strprintf(\"Minimum runtime per benchmark, in milliseconds (default: %d)\", DEFAULT_MIN_TIME_MS), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n@@ -48,17 +55,62 @@ int main(int argc, char** argv)\n     }\n \n     if (HelpRequested(argsman)) {\n-        std::cout << argsman.GetHelpMessage();\n+        std::cout << \"Usage:  bench_bitcoin [options]\\n\"\n+                     \"\\n\"\n+                  << argsman.GetHelpMessage()\n+                  << \"Description:\\n\"\n+                     \"\\n\"\n+                     \"  bench_bitcoin executes microbenchmarks. The quality of the benchmark results\\n\"\n+                     \"  highly depend on the stability of the machine. It can sometimes be difficult\\n\"\n+                     \"  to get stable, repeatable results, so here are a few tips:\\n\"\n+                     \"\\n\"\n+                     \"  * Use pyperf [1] to disable frequency scaling, turbo boost etc. For best\\n\"\n+                     \"    results, use CPU pinning and CPU isolation (see [2]).\\n\"\n+                     \"\\n\"\n+                     \"  * Each call of run() should do exactly the same work. E.g. inserting into\\n\"\n+                     \"    a std::vector doesn't do that as it will reallocate on certain calls. Make\\n\"\n+                     \"    sure each run has exactly the same preconditions.\\n\"\n+                     \"\\n\"\n+                     \"  * If results are still not reliable, increase runtime with e.g.\\n\"\n+                     \"    -min_time=5000 to let a benchmark run for at least 5 seconds.\\n\"\n+                     \"\\n\"\n+                     \"  * bench_bitcoin uses nanobench [3] for which there is extensive\\n\"\n+                     \"    documentation available online.\\n\"\n+                     \"\\n\"\n+                     \"Environment Variables:\\n\"\n+                     \"\\n\"\n+                     \"  To attach a profiler you can run a benchmark in endless mode. This can be\\n\"\n+                     \"  done with the environment variable NANOBENCH_ENDLESS. E.g. like so:\\n\"\n+                     \"\\n\"\n+                     \"    NANOBENCH_ENDLESS=MuHash ./bench_bitcoin -filter=MuHash\\n\"\n+                     \"\\n\"\n+                     \"  In rare cases it can be useful to suppress stability warnings. This can be\\n\"\n+                     \"  done with the environment variable NANOBENCH_SUPPRESS_WARNINGS, e.g:\\n\"\n+                     \"\\n\"\n+                     \"    NANOBENCH_SUPPRESS_WARNINGS=1 ./bench_bitcoin\\n\"\n+                     \"\\n\"\n+                     \"Notes:\\n\"\n+                     \"\\n\"\n+                     \"  1. pyperf\\n\"\n+                     \"     https://github.com/psf/pyperf\\n\"\n+                     \"\\n\"\n+                     \"  2. CPU pinning & isolation\\n\"\n+                     \"     https://pyperf.readthedocs.io/en/latest/system.html\\n\"\n+                     \"\\n\"\n+                     \"  3. nanobench\\n\"\n+                     \"     https://github.com/martinus/nanobench\\n\"\n+                     \"\\n\";\n \n         return EXIT_SUCCESS;\n     }\n \n     benchmark::Args args;\n-    args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n-    args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n     args.asymptote = parseAsymptote(argsman.GetArg(\"-asymptote\", \"\"));\n+    args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n+    args.min_time = std::chrono::milliseconds(argsman.GetIntArg(\"-min_time\", DEFAULT_MIN_TIME_MS));\n     args.output_csv = argsman.GetArg(\"-output_csv\", \"\");\n     args.output_json = argsman.GetArg(\"-output_json\", \"\");\n+    args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n \n     benchmark::BenchRunner::RunAll(args);\n "
      },
      {
        "sha": "934b574f8b39222ae92674186c16cd6f5742a82d",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -53,7 +53,7 @@ static void CoinSelection(benchmark::Bench& bench)\n     const CoinSelectionParams coin_selection_params(/* change_output_size= */ 34,\n                                                     /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                                     /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n-                                                    /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n+                                                    /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {\n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;"
      },
      {
        "sha": "d36e504bfcb6c03444e73bcc6186ce1b70c3850e",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -110,9 +110,9 @@ static void MuHash(benchmark::Bench& bench)\n {\n     MuHash3072 acc;\n     unsigned char key[32] = {0};\n-    int i = 0;\n+    uint32_t i = 0;\n     bench.run([&] {\n-        key[0] = ++i;\n+        key[0] = ++i & 0xFF;\n         acc *= MuHash3072(key);\n     });\n }\n@@ -134,10 +134,6 @@ static void MuHashDiv(benchmark::Bench& bench)\n     FastRandomContext rng(true);\n     MuHash3072 muhash{rng.randbytes(32)};\n \n-    for (size_t i = 0; i < bench.epochIterations(); ++i) {\n-        acc *= muhash;\n-    }\n-\n     bench.run([&] {\n         acc /= muhash;\n     });"
      },
      {
        "sha": "27df08fb690874bb1316b50ef4200ed160a13c21",
        "filename": "src/bench/nanobench.h",
        "status": "modified",
        "additions": 24,
        "deletions": 19,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/nanobench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/nanobench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/nanobench.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -33,7 +33,7 @@\n // see https://semver.org/\n #define ANKERL_NANOBENCH_VERSION_MAJOR 4 // incompatible API changes\n #define ANKERL_NANOBENCH_VERSION_MINOR 3 // backwards-compatible changes\n-#define ANKERL_NANOBENCH_VERSION_PATCH 4 // backwards-compatible bug fixes\n+#define ANKERL_NANOBENCH_VERSION_PATCH 6 // backwards-compatible bug fixes\n \n ///////////////////////////////////////////////////////////////////////////////////////////////////\n // public facing api - as minimal as possible\n@@ -88,13 +88,15 @@\n         } while (0)\n #endif\n \n-#if defined(__linux__) && defined(PERF_EVENT_IOC_ID) && defined(PERF_COUNT_HW_REF_CPU_CYCLES) && defined(PERF_FLAG_FD_CLOEXEC) && \\\n-    !defined(ANKERL_NANOBENCH_DISABLE_PERF_COUNTERS)\n-// only enable perf counters on kernel 3.14 which seems to have all the necessary defines. The three PERF_... defines are not in\n-// kernel 2.6.32 (all others are).\n-#    define ANKERL_NANOBENCH_PRIVATE_PERF_COUNTERS() 1\n-#else\n-#    define ANKERL_NANOBENCH_PRIVATE_PERF_COUNTERS() 0\n+#define ANKERL_NANOBENCH_PRIVATE_PERF_COUNTERS() 0\n+#if defined(__linux__) && !defined(ANKERL_NANOBENCH_DISABLE_PERF_COUNTERS)\n+#    include <linux/version.h>\n+#    if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)\n+// PERF_COUNT_HW_REF_CPU_CYCLES only available since kernel 3.3\n+// PERF_FLAG_FD_CLOEXEC since kernel 3.14\n+#        undef ANKERL_NANOBENCH_PRIVATE_PERF_COUNTERS\n+#        define ANKERL_NANOBENCH_PRIVATE_PERF_COUNTERS() 1\n+#    endif\n #endif\n \n #if defined(__clang__)\n@@ -2210,20 +2212,20 @@ struct IterationLogic::Impl {\n             columns.emplace_back(10, 1, \"err%\", \"%\", rErrorMedian * 100.0);\n \n             double rInsMedian = -1.0;\n-            if (mResult.has(Result::Measure::instructions)) {\n+            if (mBench.performanceCounters() && mResult.has(Result::Measure::instructions)) {\n                 rInsMedian = mResult.median(Result::Measure::instructions);\n                 columns.emplace_back(18, 2, \"ins/\" + mBench.unit(), \"\", rInsMedian / mBench.batch());\n             }\n \n             double rCycMedian = -1.0;\n-            if (mResult.has(Result::Measure::cpucycles)) {\n+            if (mBench.performanceCounters() && mResult.has(Result::Measure::cpucycles)) {\n                 rCycMedian = mResult.median(Result::Measure::cpucycles);\n                 columns.emplace_back(18, 2, \"cyc/\" + mBench.unit(), \"\", rCycMedian / mBench.batch());\n             }\n             if (rInsMedian > 0.0 && rCycMedian > 0.0) {\n                 columns.emplace_back(9, 3, \"IPC\", \"\", rCycMedian <= 0.0 ? 0.0 : rInsMedian / rCycMedian);\n             }\n-            if (mResult.has(Result::Measure::branchinstructions)) {\n+            if (mBench.performanceCounters() && mResult.has(Result::Measure::branchinstructions)) {\n                 double rBraMedian = mResult.median(Result::Measure::branchinstructions);\n                 columns.emplace_back(17, 2, \"bra/\" + mBench.unit(), \"\", rBraMedian / mBench.batch());\n                 if (mResult.has(Result::Measure::branchmisses)) {\n@@ -2402,6 +2404,14 @@ class LinuxPerformanceCounters {\n         return (a + divisor / 2) / divisor;\n     }\n \n+    ANKERL_NANOBENCH_NO_SANITIZE(\"integer\", \"undefined\")\n+    static inline uint32_t mix(uint32_t x) noexcept {\n+        x ^= x << 13;\n+        x ^= x >> 17;\n+        x ^= x << 5;\n+        return x;\n+    }\n+\n     template <typename Op>\n     ANKERL_NANOBENCH_NO_SANITIZE(\"integer\", \"undefined\")\n     void calibrate(Op&& op) {\n@@ -2441,15 +2451,10 @@ class LinuxPerformanceCounters {\n             uint64_t const numIters = 100000U + (std::random_device{}() & 3);\n             uint64_t n = numIters;\n             uint32_t x = 1234567;\n-            auto fn = [&]() {\n-                x ^= x << 13;\n-                x ^= x >> 17;\n-                x ^= x << 5;\n-            };\n \n             beginMeasure();\n             while (n-- > 0) {\n-                fn();\n+                x = mix(x);\n             }\n             endMeasure();\n             detail::doNotOptimizeAway(x);\n@@ -2459,8 +2464,8 @@ class LinuxPerformanceCounters {\n             beginMeasure();\n             while (n-- > 0) {\n                 // we now run *twice* so we can easily calculate the overhead\n-                fn();\n-                fn();\n+                x = mix(x);\n+                x = mix(x);\n             }\n             endMeasure();\n             detail::doNotOptimizeAway(x);"
      },
      {
        "sha": "8429f186133eeed0439877784829d5a2c35a30b8",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -20,19 +20,17 @@ static void EvictionProtectionCommon(\n {\n     using Candidates = std::vector<NodeEvictionCandidate>;\n     FastRandomContext random_context{true};\n-    bench.warmup(100).epochIterations(1100);\n \n     Candidates candidates{GetRandomNodeEvictionCandidates(num_candidates, random_context)};\n     for (auto& c : candidates) {\n         candidate_setup_fn(c);\n     }\n \n-    std::vector<Candidates> copies{\n-        static_cast<size_t>(bench.epochs() * bench.epochIterations()), candidates};\n-    size_t i{0};\n+\n     bench.run([&] {\n-        ProtectEvictionCandidatesByRatio(copies.at(i));\n-        ++i;\n+        // creating a copy has an overhead of about 3%, so it does not influence the benchmark results much.\n+        auto copy = candidates;\n+        ProtectEvictionCandidatesByRatio(copy);\n     });\n }\n "
      },
      {
        "sha": "28167767dbeef4d02dde2419b60db1573dc65232",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -13,16 +13,16 @@ static void RollingBloom(benchmark::Bench& bench)\n     uint32_t count = 0;\n     bench.run([&] {\n         count++;\n-        data[0] = count;\n-        data[1] = count >> 8;\n-        data[2] = count >> 16;\n-        data[3] = count >> 24;\n+        data[0] = count & 0xFF;\n+        data[1] = (count >> 8) & 0xFF;\n+        data[2] = (count >> 16) & 0xFF;\n+        data[3] = (count >> 24) & 0xFF;\n         filter.insert(data);\n \n-        data[0] = count >> 24;\n-        data[1] = count >> 16;\n-        data[2] = count >> 8;\n-        data[3] = count;\n+        data[0] = (count >> 24) & 0xFF;\n+        data[1] = (count >> 16) & 0xFF;\n+        data[2] = (count >> 8) & 0xFF;\n+        data[3] = count & 0xFF;\n         filter.contains(data);\n     });\n }"
      },
      {
        "sha": "3c22ee0f6786eded6e5c270afc7f6f216fedab0e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 14,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -93,9 +93,6 @@ static void SetupCliArgs(ArgsManager& argsman)\n /** libevent event log callback */\n static void libevent_log_cb(int severity, const char *msg)\n {\n-#ifndef EVENT_LOG_ERR // EVENT_LOG_ERR was added in 2.0.19; but before then _EVENT_LOG_ERR existed.\n-# define EVENT_LOG_ERR _EVENT_LOG_ERR\n-#endif\n     // Ignore everything other than errors\n     if (severity >= EVENT_LOG_ERR) {\n         throw std::runtime_error(strprintf(\"libevent error: %s\", msg));\n@@ -245,7 +242,7 @@ class BaseRequestHandler\n class AddrinfoRequestHandler : public BaseRequestHandler\n {\n private:\n-    static constexpr std::array m_networks{\"ipv4\", \"ipv6\", \"torv2\", \"torv3\", \"i2p\"};\n+    static constexpr std::array m_networks{\"ipv4\", \"ipv6\", \"onion\", \"i2p\"};\n     int8_t NetworkStringToId(const std::string& str) const\n     {\n         for (size_t i = 0; i < m_networks.size(); ++i) {\n@@ -271,13 +268,10 @@ class AddrinfoRequestHandler : public BaseRequestHandler\n         if (!nodes.empty() && nodes.at(0)[\"network\"].isNull()) {\n             throw std::runtime_error(\"-addrinfo requires bitcoind server to be running v22.0 and up\");\n         }\n-        // Count the number of peers we know by network, including torv2 versus torv3.\n+        // Count the number of peers known to our node, by network.\n         std::array<uint64_t, m_networks.size()> counts{{}};\n         for (const UniValue& node : nodes) {\n             std::string network_name{node[\"network\"].get_str()};\n-            if (network_name == \"onion\") {\n-                network_name = node[\"address\"].get_str().size() > 22 ? \"torv3\" : \"torv2\";\n-            }\n             const int8_t network_id{NetworkStringToId(network_name)};\n             if (network_id == UNKNOWN_NETWORK) continue;\n             ++counts.at(network_id);\n@@ -343,7 +337,7 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         connections.pushKV(\"total\", batch[ID_NETWORKINFO][\"result\"][\"connections\"]);\n         result.pushKV(\"connections\", connections);\n \n-        result.pushKV(\"proxy\", batch[ID_NETWORKINFO][\"result\"][\"networks\"][0][\"proxy\"]);\n+        result.pushKV(\"networks\", batch[ID_NETWORKINFO][\"result\"][\"networks\"]);\n         result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n         result.pushKV(\"chain\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"]));\n         if (!batch[ID_WALLETINFO][\"result\"].isNull()) {\n@@ -708,7 +702,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n     //     3. default port for chain\n     uint16_t port{BaseParams().RPCPort()};\n     SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", port));\n+    port = static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", port));\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n@@ -718,7 +712,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n \n     // Set connection timeout\n     {\n-        const int timeout = gArgs.GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n+        const int timeout = gArgs.GetIntArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n         if (timeout > 0) {\n             evhttp_connection_set_timeout(evcon.get(), timeout);\n         } else {\n@@ -828,7 +822,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n     const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {\n@@ -992,8 +986,26 @@ static void ParseGetInfoResult(UniValue& result)\n         RESET);\n     result_string += strprintf(\"Version: %s\\n\", result[\"version\"].getValStr());\n     result_string += strprintf(\"Time offset (s): %s\\n\", result[\"timeoffset\"].getValStr());\n-    const std::string proxy = result[\"proxy\"].getValStr();\n-    result_string += strprintf(\"Proxy: %s\\n\", proxy.empty() ? \"N/A\" : proxy);\n+\n+    // proxies\n+    std::map<std::string, std::vector<std::string>> proxy_networks;\n+    std::vector<std::string> ordered_proxies;\n+\n+    for (const UniValue& network : result[\"networks\"].getValues()) {\n+        const std::string proxy = network[\"proxy\"].getValStr();\n+        if (proxy.empty()) continue;\n+        // Add proxy to ordered_proxy if has not been processed\n+        if (proxy_networks.find(proxy) == proxy_networks.end()) ordered_proxies.push_back(proxy);\n+\n+        proxy_networks[proxy].push_back(network[\"name\"].getValStr());\n+    }\n+\n+    std::vector<std::string> formatted_proxies;\n+    for (const std::string& proxy : ordered_proxies) {\n+        formatted_proxies.emplace_back(strprintf(\"%s (%s)\", proxy, Join(proxy_networks.find(proxy)->second, \", \")));\n+    }\n+    result_string += strprintf(\"Proxies: %s\\n\", formatted_proxies.empty() ? \"n/a\" : Join(formatted_proxies, \", \"));\n+\n     result_string += strprintf(\"Min tx relay fee rate (%s/kvB): %s\\n\\n\", CURRENCY_UNIT, result[\"relayfee\"].getValStr());\n \n     if (!result[\"has_wallet\"].isNull()) {"
      },
      {
        "sha": "fc3bc6aa7134f12a12fef1f233a0a4505d7eb49d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <clientversion.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <core_io.h>\n #include <key_io.h>\n@@ -727,7 +728,7 @@ static void MutateTx(CMutableTransaction& tx, const std::string& command,\n static void OutputTxJSON(const CTransaction& tx)\n {\n     UniValue entry(UniValue::VOBJ);\n-    TxToUniv(tx, uint256(), /* include_addresses */ false, entry);\n+    TxToUniv(tx, uint256(), entry);\n \n     std::string jsonOutput = entry.write(4);\n     tfm::format(std::cout, \"%s\\n\", jsonOutput);"
      },
      {
        "sha": "25ec2809e91ae46ad7714b3c76b73f3ae9717bc2",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -19,6 +19,7 @@\n #include <shutdown.h>\n #include <util/check.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/tokenpipe.h>\n@@ -238,6 +239,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         daemon_ep.Close();\n     }\n #endif\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SHUTOFF);\n     if (fRet) {\n         WaitForShutdown();\n     }"
      },
      {
        "sha": "15e06389deb920fb1a81ebc6219e686441eb2b90",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 41,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,20 +4,22 @@\n \n #include <bloom.h>\n \n-#include <primitives/transaction.h>\n #include <hash.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n #include <script/script.h>\n #include <script/standard.h>\n-#include <random.h>\n+#include <span.h>\n #include <streams.h>\n \n-#include <math.h>\n-#include <stdlib.h>\n-\n #include <algorithm>\n+#include <cmath>\n+#include <cstdlib>\n+#include <limits>\n+#include <vector>\n \n-#define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n-#define LN2 0.6931471805599453094172321214581765680755001343602552\n+static constexpr double LN2SQUARED = 0.4804530139182014246671025263266649717305529515945455;\n+static constexpr double LN2 = 0.6931471805599453094172321214581765680755001343602552;\n \n CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn, unsigned char nFlagsIn) :\n     /**\n@@ -37,13 +39,13 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n {\n }\n \n-inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n+inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, Span<const unsigned char> vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CBloomFilter::insert(Span<const unsigned char> vKey)\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n@@ -59,17 +61,10 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    insert(data);\n+    insert(stream);\n }\n \n-void CBloomFilter::insert(const uint256& hash)\n-{\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n-}\n-\n-bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(Span<const unsigned char> vKey) const\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n@@ -87,14 +82,7 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    return contains(data);\n-}\n-\n-bool CBloomFilter::contains(const uint256& hash) const\n-{\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    return contains(MakeUCharSpan(stream));\n }\n \n bool CBloomFilter::IsWithinSizeConstraints() const\n@@ -198,7 +186,8 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, Span<const unsigned char> vDataToHash)\n+{\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n@@ -210,7 +199,7 @@ static inline uint32_t FastMod(uint32_t x, size_t n) {\n     return ((uint64_t)x * (uint64_t)n) >> 32;\n }\n \n-void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CRollingBloomFilter::insert(Span<const unsigned char> vKey)\n {\n     if (nEntriesThisGeneration == nEntriesPerGeneration) {\n         nEntriesThisGeneration = 0;\n@@ -241,13 +230,7 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n-void CRollingBloomFilter::insert(const uint256& hash)\n-{\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    insert(vData);\n-}\n-\n-bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CRollingBloomFilter::contains(Span<const unsigned char> vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n@@ -261,12 +244,6 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return true;\n }\n \n-bool CRollingBloomFilter::contains(const uint256& hash) const\n-{\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    return contains(vData);\n-}\n-\n void CRollingBloomFilter::reset()\n {\n     nTweak = GetRand(std::numeric_limits<unsigned int>::max());"
      },
      {
        "sha": "422646d8b9f14dd85400c9ce551b15ca525cd0a7",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,16 +6,16 @@\n #define BITCOIN_BLOOM_H\n \n #include <serialize.h>\n+#include <span.h>\n \n #include <vector>\n \n class COutPoint;\n class CTransaction;\n-class uint256;\n \n //! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n-static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n-static const unsigned int MAX_HASH_FUNCS = 50;\n+static constexpr unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n+static constexpr unsigned int MAX_HASH_FUNCS = 50;\n \n /**\n  * First two bits of nFlags control how much IsRelevantAndUpdate actually updates\n@@ -49,7 +49,7 @@ class CBloomFilter\n     unsigned int nTweak;\n     unsigned char nFlags;\n \n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n+    unsigned int Hash(unsigned int nHashNum, Span<const unsigned char> vDataToHash) const;\n \n public:\n     /**\n@@ -66,13 +66,11 @@ class CBloomFilter\n \n     SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(Span<const unsigned char> vKey);\n     void insert(const COutPoint& outpoint);\n-    void insert(const uint256& hash);\n \n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(Span<const unsigned char> vKey) const;\n     bool contains(const COutPoint& outpoint) const;\n-    bool contains(const uint256& hash) const;\n \n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n@@ -112,10 +110,8 @@ class CRollingBloomFilter\n public:\n     CRollingBloomFilter(const unsigned int nElements, const double nFPRate);\n \n-    void insert(const std::vector<unsigned char>& vKey);\n-    void insert(const uint256& hash);\n-    bool contains(const std::vector<unsigned char>& vKey) const;\n-    bool contains(const uint256& hash) const;\n+    void insert(Span<const unsigned char> vKey);\n+    bool contains(Span<const unsigned char> vKey) const;\n \n     void reset();\n "
      },
      {
        "sha": "365a7f79b6998c34cad6b4d7299260013f5a9fd1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -126,7 +126,15 @@ enum BlockStatus: uint32_t {\n     BLOCK_FAILED_CHILD       =   64, //!< descends from failed block\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n \n-    BLOCK_OPT_WITNESS       =   128, //!< block data in blk*.data was received with a witness-enforcing client\n+    BLOCK_OPT_WITNESS        =   128, //!< block data in blk*.dat was received with a witness-enforcing client\n+\n+    /**\n+     * If set, this indicates that the block index entry is assumed-valid.\n+     * Certain diagnostics will be skipped in e.g. CheckBlockIndex().\n+     * It almost certainly means that the block's full validation is pending\n+     * on a background chainstate. See `doc/assumeutxo.md`.\n+     */\n+    BLOCK_ASSUMED_VALID      =   256,\n };\n \n /** The block chain is a tree shaped structure starting with the\n@@ -300,14 +308,24 @@ class CBlockIndex\n         return ((nStatus & BLOCK_VALID_MASK) >= nUpTo);\n     }\n \n+    //! @returns true if the block is assumed-valid; this means it is queued to be\n+    //!   validated by a background chainstate.\n+    bool IsAssumedValid() const { return nStatus & BLOCK_ASSUMED_VALID; }\n+\n     //! Raise the validity level of this block index entry.\n     //! Returns true if the validity was changed.\n     bool RaiseValidity(enum BlockStatus nUpTo)\n     {\n         assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n-        if (nStatus & BLOCK_FAILED_MASK)\n-            return false;\n+        if (nStatus & BLOCK_FAILED_MASK) return false;\n+\n         if ((nStatus & BLOCK_VALID_MASK) < nUpTo) {\n+            // If this block had been marked assumed-valid and we're raising\n+            // its validity to a certain point, there is no longer an assumption.\n+            if (nStatus & BLOCK_ASSUMED_VALID && nUpTo >= BLOCK_VALID_SCRIPTS) {\n+                nStatus &= ~BLOCK_ASSUMED_VALID;\n+            }\n+\n             nStatus = (nStatus & ~BLOCK_VALID_MASK) | nUpTo;\n             return true;\n         }"
      },
      {
        "sha": "b155745794a04fedf51e48fd96220c336389513e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 12,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -280,8 +280,10 @@ class SigNetParams : public CChainParams {\n \n         if (!args.IsArgSet(\"-signetchallenge\")) {\n             bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            vSeeds.emplace_back(\"seed.signet.bitcoin.sprovoost.nl\");\n+\n+            // Hardcoded nodes can be removed once there are more DNS seeds\n             vSeeds.emplace_back(\"178.128.221.177\");\n-            vSeeds.emplace_back(\"2a01:7c8:d005:390::5\");\n             vSeeds.emplace_back(\"v7ajjeirttkbnt32wpy3c6w3emwnfr3fkla7hpxcfokr3ysd3kqtzmqd.onion:38333\");\n \n             consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000000000008546553c03\");\n@@ -390,12 +392,12 @@ class CRegTestParams : public CChainParams {\n         consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n-        consensus.BIP34Height = 2; // BIP34 activated on regtest (Block at height 1 not enforced for testing purposes)\n+        consensus.BIP34Height = 1; // Always active unless overridden\n         consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 111; // BIP65 activated on regtest (Block at height 110 and earlier not enforced for testing purposes)\n-        consensus.BIP66Height = 102; // BIP66 activated on regtest (Block at height 101 and earlier not enforced for testing purposes)\n-        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n-        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n+        consensus.BIP65Height = 1;  // Always active unless overridden\n+        consensus.BIP66Height = 1;  // Always active unless overridden\n+        consensus.CSVHeight = 1;    // Always active unless overridden\n+        consensus.SegwitHeight = 1; // Always active unless overridden\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -487,15 +489,38 @@ class CRegTestParams : public CChainParams {\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n \n-void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n+static void MaybeUpdateHeights(const ArgsManager& args, Consensus::Params& consensus)\n {\n-    if (args.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n-        if (height < 0 || height >= std::numeric_limits<int>::max()) {\n-            throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range.\", height));\n+    for (const std::string& arg : args.GetArgs(\"-testactivationheight\")) {\n+        const auto found{arg.find('@')};\n+        if (found == std::string::npos) {\n+            throw std::runtime_error(strprintf(\"Invalid format (%s) for -testactivationheight=name@height.\", arg));\n+        }\n+        const auto name{arg.substr(0, found)};\n+        const auto value{arg.substr(found + 1)};\n+        int32_t height;\n+        if (!ParseInt32(value, &height) || height < 0 || height >= std::numeric_limits<int>::max()) {\n+            throw std::runtime_error(strprintf(\"Invalid height value (%s) for -testactivationheight=name@height.\", arg));\n+        }\n+        if (name == \"segwit\") {\n+            consensus.SegwitHeight = int{height};\n+        } else if (name == \"bip34\") {\n+            consensus.BIP34Height = int{height};\n+        } else if (name == \"dersig\") {\n+            consensus.BIP66Height = int{height};\n+        } else if (name == \"cltv\") {\n+            consensus.BIP65Height = int{height};\n+        } else if (name == \"csv\") {\n+            consensus.CSVHeight = int{height};\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid name (%s) for -testactivationheight=name@height.\", arg));\n         }\n-        consensus.SegwitHeight = static_cast<int>(height);\n     }\n+}\n+\n+void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n+{\n+    MaybeUpdateHeights(args, consensus);\n \n     if (!args.IsArgSet(\"-vbparams\")) return;\n "
      },
      {
        "sha": "dc484f5c0356a0b8a65bf4fb5c2ed84778b29a4a",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -20,7 +20,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, signet, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-testactivationheight=name@height.\", \"Set the activation height of 'name' (segwit, bip34, dersig, cltv, csv). (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "7c20e2013c358124adb629654bee8cb42e772788",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <sync.h>\n #include <tinyformat.h>\n+#include <util/syscall_sandbox.h>\n #include <util/threadnames.h>\n \n #include <algorithm>\n@@ -151,6 +152,7 @@ class CCheckQueue\n         for (int n = 0; n < threads_num; ++n) {\n             m_worker_threads.emplace_back([this, n]() {\n                 util::ThreadRename(strprintf(\"scriptch.%i\", n));\n+                SetSyscallSandboxPolicy(SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK);\n                 Loop(false /* worker thread */);\n             });\n         }"
      },
      {
        "sha": "ff581d4a9e1866d980bdb6f8f87e6f6c3ec71f65",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269aeea72eaeb4e2919a1eff0356c10d42959160/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269aeea72eaeb4e2919a1eff0356c10d42959160/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=269aeea72eaeb4e2919a1eff0356c10d42959160",
        "patch": "@@ -1,62 +0,0 @@\n-// Copyright (c) 2009-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#include <cstddef>\n-#include <cstdint>\n-\n-#if defined(__i386__) || defined(__arm__)\n-\n-extern \"C\" int64_t __udivmoddi4(uint64_t u, uint64_t v, uint64_t* rp);\n-\n-extern \"C\" int64_t __wrap___divmoddi4(int64_t u, int64_t v, int64_t* rp)\n-{\n-    int32_t c1 = 0, c2 = 0;\n-    int64_t uu = u, vv = v;\n-    int64_t w;\n-    int64_t r;\n-\n-    if (uu < 0) {\n-        c1 = ~c1, c2 = ~c2, uu = -uu;\n-    }\n-    if (vv < 0) {\n-        c1 = ~c1, vv = -vv;\n-    }\n-\n-    w = __udivmoddi4(uu, vv, (uint64_t*)&r);\n-    if (c1)\n-        w = -w;\n-    if (c2)\n-        r = -r;\n-\n-    *rp = r;\n-    return w;\n-}\n-#endif\n-\n-extern \"C\" float log2f_old(float x);\n-#ifdef __i386__\n-__asm(\".symver log2f_old,log2f@GLIBC_2.1\");\n-#elif defined(__amd64__)\n-__asm(\".symver log2f_old,log2f@GLIBC_2.2.5\");\n-#elif defined(__arm__)\n-__asm(\".symver log2f_old,log2f@GLIBC_2.4\");\n-#elif defined(__aarch64__)\n-__asm(\".symver log2f_old,log2f@GLIBC_2.17\");\n-#elif defined(__powerpc64__)\n-#  ifdef WORDS_BIGENDIAN\n-__asm(\".symver log2f_old,log2f@GLIBC_2.3\");\n-#  else\n-__asm(\".symver log2f_old,log2f@GLIBC_2.17\");\n-#  endif\n-#elif defined(__riscv)\n-__asm(\".symver log2f_old,log2f@GLIBC_2.27\");\n-#endif\n-extern \"C\" float __wrap_log2f(float x)\n-{\n-    return log2f_old(x);\n-}"
      },
      {
        "sha": "8b41a2277dfc1b09ba5c07521431a00f27643fba",
        "filename": "src/consensus/amount.h",
        "status": "renamed",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/amount.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_AMOUNT_H\n-#define BITCOIN_AMOUNT_H\n+#ifndef BITCOIN_CONSENSUS_AMOUNT_H\n+#define BITCOIN_CONSENSUS_AMOUNT_H\n \n-#include <stdint.h>\n+#include <cstdint>\n \n /** Amount in satoshis (Can be negative) */\n typedef int64_t CAmount;\n \n-static const CAmount COIN = 100000000;\n+static constexpr CAmount COIN = 100000000;\n \n /** No amount larger than this (in satoshi) is valid.\n  *\n@@ -22,7 +22,7 @@ static const CAmount COIN = 100000000;\n  * critical; in unusual circumstances like a(nother) overflow bug that allowed\n  * for the creation of coins out of thin air modification could lead to a fork.\n  * */\n-static const CAmount MAX_MONEY = 21000000 * COIN;\n+static constexpr CAmount MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n-#endif //  BITCOIN_AMOUNT_H\n+#endif //  BITCOIN_CONSENSUS_AMOUNT_H",
        "previous_filename": "src/amount.h"
      },
      {
        "sha": "de4824fadc04d41680df342b7b57f124638081d3",
        "filename": "src/consensus/tx_check.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/tx_check.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/tx_check.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <consensus/tx_check.h>\n \n+#include <consensus/amount.h>\n #include <primitives/transaction.h>\n #include <consensus/validation.h>\n "
      },
      {
        "sha": "a07adae536ad32cae5184dafe6a9ae0a43bec4cb",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <consensus/tx_verify.h>\n \n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <primitives/transaction.h>\n #include <script/interpreter.h>"
      },
      {
        "sha": "777556808a84a94e34547103c340e01cdcfca2a6",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CONSENSUS_TX_VERIFY_H\n #define BITCOIN_CONSENSUS_TX_VERIFY_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "be93a17efee76c95d3de5c5627fadc1c36f1bdb2",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CORE_IO_H\n #define BITCOIN_CORE_IO_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <attributes.h>\n \n #include <string>\n@@ -44,8 +44,8 @@ UniValue ValueFromAmount(const CAmount amount);\n std::string FormatScript(const CScript& script);\n std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);\n-void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex, bool include_addresses);\n-void ScriptToUniv(const CScript& script, UniValue& out, bool include_address);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_addresses, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool include_hex, bool include_address = true);\n+void ScriptToUniv(const CScript& script, UniValue& out);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "320811b9e986d6d4021224d310f13717df3b7298",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -69,7 +69,7 @@ CScript ParseScript(const std::string& s)\n             (w->front() == '-' && w->size() > 1 && std::all_of(w->begin()+1, w->end(), ::IsDigit)))\n         {\n             // Number\n-            int64_t n = atoi64(*w);\n+            int64_t n = LocaleIndependentAtoi<int64_t>(*w);\n \n             //limit the range of numbers ParseScript accepts in decimal\n             //since numbers outside -0xFFFFFFFF...0xFFFFFFFF are illegal in scripts"
      },
      {
        "sha": "6b13e4c5862305150d19a3a7a25d677e89cd052c",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 37,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <core_io.h>\n \n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <key_io.h>\n@@ -141,56 +142,28 @@ std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags)\n     return HexStr(ssTx);\n }\n \n-void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n+void ScriptToUniv(const CScript& script, UniValue& out)\n {\n-    out.pushKV(\"asm\", ScriptToAsmStr(script));\n-    out.pushKV(\"hex\", HexStr(script));\n-\n-    std::vector<std::vector<unsigned char>> solns;\n-    TxoutType type = Solver(script, solns);\n-    out.pushKV(\"type\", GetTxnOutputType(type));\n-\n-    CTxDestination address;\n-    if (include_address && ExtractDestination(script, address) && type != TxoutType::PUBKEY) {\n-        out.pushKV(\"address\", EncodeDestination(address));\n-    }\n+    ScriptPubKeyToUniv(script, out, /* include_hex */ true, /* include_address */ false);\n }\n \n-// TODO: from v23 (\"addresses\" and \"reqSigs\" deprecated) this method should be refactored to remove the `include_addresses` option\n-// this method can also be combined with `ScriptToUniv` as they will overlap\n-void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n-                        UniValue& out, bool fIncludeHex, bool include_addresses)\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool include_hex, bool include_address)\n {\n-    TxoutType type;\n     CTxDestination address;\n-    std::vector<CTxDestination> addresses;\n-    int nRequired;\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));\n-    if (fIncludeHex)\n-        out.pushKV(\"hex\", HexStr(scriptPubKey));\n+    if (include_hex) out.pushKV(\"hex\", HexStr(scriptPubKey));\n \n-    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired) || type == TxoutType::PUBKEY) {\n-        out.pushKV(\"type\", GetTxnOutputType(type));\n-        return;\n-    }\n+    std::vector<std::vector<unsigned char>> solns;\n+    const TxoutType type{Solver(scriptPubKey, solns)};\n \n-    if (ExtractDestination(scriptPubKey, address)) {\n+    if (include_address && ExtractDestination(scriptPubKey, address) && type != TxoutType::PUBKEY) {\n         out.pushKV(\"address\", EncodeDestination(address));\n     }\n     out.pushKV(\"type\", GetTxnOutputType(type));\n-\n-    if (include_addresses) {\n-        UniValue a(UniValue::VARR);\n-        for (const CTxDestination& addr : addresses) {\n-            a.push_back(EncodeDestination(addr));\n-        }\n-        out.pushKV(\"addresses\", a);\n-        out.pushKV(\"reqSigs\", nRequired);\n-    }\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_addresses, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n@@ -249,7 +222,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_add\n         out.pushKV(\"n\", (int64_t)i);\n \n         UniValue o(UniValue::VOBJ);\n-        ScriptPubKeyToUniv(txout.scriptPubKey, o, true, include_addresses);\n+        ScriptPubKeyToUniv(txout.scriptPubKey, o, true);\n         out.pushKV(\"scriptPubKey\", o);\n         vout.push_back(out);\n "
      },
      {
        "sha": "183a5fba45fff6ee158de093625542499db2de73",
        "filename": "src/crc32c/.travis.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/.travis.yml?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,7 +4,7 @@\n \n language: cpp\n dist: bionic\n-osx_image: xcode10.3\n+osx_image: xcode12.5\n \n compiler:\n - gcc\n@@ -24,20 +24,20 @@ env:\n addons:\n   apt:\n     sources:\n-    - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'\n+    - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main'\n       key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'\n     - sourceline: 'ppa:ubuntu-toolchain-r/test'\n     packages:\n-    - clang-9\n+    - clang-12\n     - cmake\n-    - gcc-9\n-    - g++-9\n+    - gcc-11\n+    - g++-11\n     - ninja-build\n   homebrew:\n     packages:\n     - cmake\n-    - gcc@9\n-    - llvm@9\n+    - gcc@11\n+    - llvm@12\n     - ninja\n     update: true\n \n@@ -48,14 +48,14 @@ install:\n     export PATH=\"$(brew --prefix llvm)/bin:$PATH\";\n   fi\n # /usr/bin/gcc points to an older compiler on both Linux and macOS.\n-- if [ \"$CXX\" = \"g++\" ]; then export CXX=\"g++-9\" CC=\"gcc-9\"; fi\n+- if [ \"$CXX\" = \"g++\" ]; then export CXX=\"g++-11\" CC=\"gcc-11\"; fi\n # /usr/bin/clang points to an older compiler on both Linux and macOS.\n #\n # Homebrew's llvm package doesn't ship a versioned clang++ binary, so the values\n # below don't work on macOS. Fortunately, the path change above makes the\n # default values (clang and clang++) resolve to the correct compiler on macOS.\n - if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then\n-    if [ \"$CXX\" = \"clang++\" ]; then export CXX=\"clang++-9\" CC=\"clang-9\"; fi;\n+    if [ \"$CXX\" = \"clang++\" ]; then export CXX=\"clang++-12\" CC=\"clang-12\"; fi;\n   fi\n - echo ${CC}\n - echo ${CXX}"
      },
      {
        "sha": "62daa8a4acf6d31d1e605360cc5996b875cc35e1",
        "filename": "src/crc32c/.ycm_extra_conf.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/.ycm_extra_conf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/.ycm_extra_conf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/.ycm_extra_conf.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,10 +4,10 @@\n \"\"\"YouCompleteMe configuration that interprets a .clang_complete file.\n \n This module implementes the YouCompleteMe configuration API documented at:\n-https://github.com/Valloric/ycmd#ycm_extra_confpy-specification\n+https://github.com/ycm-core/ycmd#ycm_extra_confpy-specification\n \n The implementation loads and processes a .clang_complete file, documented at:\n-https://github.com/Rip-Rip/clang_complete/blob/master/README.md\n+https://github.com/xavierd/clang_complete/blob/master/README.md\n \"\"\"\n \n import os"
      },
      {
        "sha": "58ba38e611998d56c5166e3471e71b356a3775e8",
        "filename": "src/crc32c/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -65,7 +65,7 @@ apm install autocomplete-clang build build-cmake clang-format language-cmake \\\n \n If you don't mind more setup in return for more speed, replace\n `autocomplete-clang` and `linter-clang` with `you-complete-me`. This requires\n-[setting up ycmd](https://github.com/Valloric/ycmd#building).\n+[setting up ycmd](https://github.com/ycm-core/ycmd#building).\n \n ```bash\n apm install autocomplete-plus build build-cmake clang-format language-cmake \\"
      },
      {
        "sha": "6b80f700377a111b6802fd0577d6940b1271f13a",
        "filename": "src/crc32c/src/crc32c_arm64_check.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/src/crc32c_arm64_check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/crc32c/src/crc32c_arm64_check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c_arm64_check.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -40,7 +40,15 @@ inline bool CanUseArm64Crc32() {\n   // From 'arch/arm64/include/uapi/asm/hwcap.h' in Linux kernel source code.\n   constexpr unsigned long kHWCAP_PMULL = 1 << 4;\n   constexpr unsigned long kHWCAP_CRC32 = 1 << 7;\n-  unsigned long hwcap = (&getauxval != nullptr) ? getauxval(AT_HWCAP) : 0;\n+  unsigned long hwcap =\n+#if HAVE_STRONG_GETAUXVAL\n+      // Some compilers warn on (&getauxval != nullptr) in the block below.\n+      getauxval(AT_HWCAP);\n+#elif HAVE_WEAK_GETAUXVAL\n+      (&getauxval != nullptr) ? getauxval(AT_HWCAP) : 0;\n+#else\n+#error This is supposed to be nested inside a check for HAVE_*_GETAUXVAL.\n+#endif  // HAVE_STRONG_GETAUXVAL\n   return (hwcap & (kHWCAP_PMULL | kHWCAP_CRC32)) ==\n          (kHWCAP_PMULL | kHWCAP_CRC32);\n #elif defined(__APPLE__)"
      },
      {
        "sha": "7f6471740f721d7277ae3a0cef052850a8433fe7",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,12 +5,14 @@\n #include <util/system.h>\n #include <walletinitinterface.h>\n \n+class ArgsManager;\n class CWallet;\n \n namespace interfaces {\n class Chain;\n class Handler;\n class Wallet;\n+class WalletClient;\n }\n \n class DummyWalletInit : public WalletInitInterface {\n@@ -37,8 +39,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-maxtxfee=<amt>\",\n         \"-mintxfee=<amt>\",\n         \"-paytxfee=<amt>\",\n-        \"-rescan\",\n-        \"-salvagewallet\",\n         \"-signer=<cmd>\",\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\",\n@@ -64,4 +64,9 @@ std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n+std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n } // namespace interfaces"
      },
      {
        "sha": "92c923fbd2ef8ae7912b755aad47f32307c30fda",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <hash.h>\n+#include <span.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n "
      },
      {
        "sha": "6e75e285963d8ae59fa72d35258169addf850994",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -12,6 +12,7 @@\n #include <shutdown.h>\n #include <sync.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n@@ -279,6 +280,7 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n static bool ThreadHTTP(struct event_base* base)\n {\n     util::ThreadRename(\"http\");\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER);\n     LogPrint(BCLog::HTTP, \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n@@ -289,7 +291,7 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    uint16_t http_port{static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort()))};\n+    uint16_t http_port{static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", BaseParams().RPCPort()))};\n     std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n@@ -332,16 +334,13 @@ static bool HTTPBindAddresses(struct evhttp* http)\n static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n {\n     util::ThreadRename(strprintf(\"httpworker.%i\", worker_num));\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER);\n     queue->Run();\n }\n \n /** libevent event log callback */\n static void libevent_log_cb(int severity, const char *msg)\n {\n-#ifndef EVENT_LOG_WARN\n-// EVENT_LOG_WARN was added in 2.0.19; but before then _EVENT_LOG_WARN existed.\n-# define EVENT_LOG_WARN _EVENT_LOG_WARN\n-#endif\n     if (severity >= EVENT_LOG_WARN) // Log warn messages and higher without debug category\n         LogPrintf(\"libevent: %s\\n\", msg);\n     else\n@@ -378,7 +377,7 @@ bool InitHTTPServer()\n         return false;\n     }\n \n-    evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n@@ -389,7 +388,7 @@ bool InitHTTPServer()\n     }\n \n     LogPrint(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n@@ -419,7 +418,7 @@ static std::vector<std::thread> g_thread_http_workers;\n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n-    int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n "
      },
      {
        "sha": "3ca86a310e1cd84c62701ae3c4762f1d7013b10a",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,6 +8,7 @@\n #include <node/ui_interface.h>\n #include <shutdown.h>\n #include <tinyformat.h>\n+#include <util/syscall_sandbox.h>\n #include <util/thread.h>\n #include <util/translation.h>\n #include <validation.h> // For g_chainman\n@@ -123,6 +124,7 @@ static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev, CChain&\n \n void BaseIndex::ThreadSync()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TX_INDEX);\n     const CBlockIndex* pindex = m_best_block_index.load();\n     if (!m_synced) {\n         auto& consensus_params = Params().GetConsensus();"
      },
      {
        "sha": "1390e3e57075b1d2583b56498f96fdf1da5129fd",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,11 +6,10 @@\n #define BITCOIN_INDEX_BASE_H\n \n #include <dbwrapper.h>\n-#include <primitives/block.h>\n-#include <primitives/transaction.h>\n #include <threadinterrupt.h>\n #include <validationinterface.h>\n \n+class CBlock;\n class CBlockIndex;\n class CChainState;\n "
      },
      {
        "sha": "209785d487c8bdfdfce5ea950291ac92dc20d853",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 161,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,18 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <index/disktxpos.h>\n #include <index/txindex.h>\n+\n+#include <index/disktxpos.h>\n #include <node/blockstorage.h>\n-#include <node/ui_interface.h>\n-#include <shutdown.h>\n #include <util/system.h>\n-#include <util/translation.h>\n #include <validation.h>\n \n-constexpr uint8_t DB_BEST_BLOCK{'B'};\n constexpr uint8_t DB_TXINDEX{'t'};\n-constexpr uint8_t DB_TXINDEX_BLOCK{'T'};\n \n std::unique_ptr<TxIndex> g_txindex;\n \n@@ -30,10 +26,6 @@ class TxIndex::DB : public BaseIndex::DB\n \n     /// Write a batch of transaction positions to the DB.\n     bool WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n-\n-    /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n-    /// been upgraded yet to the new database.\n-    bool MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator);\n };\n \n TxIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n@@ -54,163 +46,12 @@ bool TxIndex::DB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_\n     return WriteBatch(batch);\n }\n \n-/*\n- * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n- * range of keys updated. This is used internally by MigrateData.\n- */\n-static void WriteTxIndexMigrationBatches(CDBWrapper& newdb, CDBWrapper& olddb,\n-                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n-                                         const std::pair<uint8_t, uint256>& begin_key,\n-                                         const std::pair<uint8_t, uint256>& end_key)\n-{\n-    // Sync new DB changes to disk before deleting from old DB.\n-    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n-    olddb.WriteBatch(batch_olddb);\n-    olddb.CompactRange(begin_key, end_key);\n-\n-    batch_newdb.Clear();\n-    batch_olddb.Clear();\n-}\n-\n-bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)\n-{\n-    // The prior implementation of txindex was always in sync with block index\n-    // and presence was indicated with a boolean DB flag. If the flag is set,\n-    // this means the txindex from a previous version is valid and in sync with\n-    // the chain tip. The first step of the migration is to unset the flag and\n-    // write the chain hash to a separate key, DB_TXINDEX_BLOCK. After that, the\n-    // index entries are copied over in batches to the new database. Finally,\n-    // DB_TXINDEX_BLOCK is erased from the old database and the block hash is\n-    // written to the new database.\n-    //\n-    // Unsetting the boolean flag ensures that if the node is downgraded to a\n-    // previous version, it will not see a corrupted, partially migrated index\n-    // -- it will see that the txindex is disabled. When the node is upgraded\n-    // again, the migration will pick up where it left off and sync to the block\n-    // with hash DB_TXINDEX_BLOCK.\n-    bool f_legacy_flag = false;\n-    block_tree_db.ReadFlag(\"txindex\", f_legacy_flag);\n-    if (f_legacy_flag) {\n-        if (!block_tree_db.Write(DB_TXINDEX_BLOCK, best_locator)) {\n-            return error(\"%s: cannot write block indicator\", __func__);\n-        }\n-        if (!block_tree_db.WriteFlag(\"txindex\", false)) {\n-            return error(\"%s: cannot write block index db flag\", __func__);\n-        }\n-    }\n-\n-    CBlockLocator locator;\n-    if (!block_tree_db.Read(DB_TXINDEX_BLOCK, locator)) {\n-        return true;\n-    }\n-\n-    int64_t count = 0;\n-    LogPrintf(\"Upgrading txindex database... [0%%]\\n\");\n-    uiInterface.ShowProgress(_(\"Upgrading txindex database\").translated, 0, true);\n-    int report_done = 0;\n-    const size_t batch_size = 1 << 24; // 16 MiB\n-\n-    CDBBatch batch_newdb(*this);\n-    CDBBatch batch_olddb(block_tree_db);\n-\n-    std::pair<uint8_t, uint256> key;\n-    std::pair<uint8_t, uint256> begin_key{DB_TXINDEX, uint256()};\n-    std::pair<uint8_t, uint256> prev_key = begin_key;\n-\n-    bool interrupted = false;\n-    std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());\n-    for (cursor->Seek(begin_key); cursor->Valid(); cursor->Next()) {\n-        if (ShutdownRequested()) {\n-            interrupted = true;\n-            break;\n-        }\n-\n-        if (!cursor->GetKey(key)) {\n-            return error(\"%s: cannot get key from valid cursor\", __func__);\n-        }\n-        if (key.first != DB_TXINDEX) {\n-            break;\n-        }\n-\n-        // Log progress every 10%.\n-        if (++count % 256 == 0) {\n-            // Since txids are uniformly random and traversed in increasing order, the high 16 bits\n-            // of the hash can be used to estimate the current progress.\n-            const uint256& txid = key.second;\n-            uint32_t high_nibble =\n-                (static_cast<uint32_t>(*(txid.begin() + 0)) << 8) +\n-                (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\n-            int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\n-\n-            uiInterface.ShowProgress(_(\"Upgrading txindex database\").translated, percentage_done, true);\n-            if (report_done < percentage_done/10) {\n-                LogPrintf(\"Upgrading txindex database... [%d%%]\\n\", percentage_done);\n-                report_done = percentage_done/10;\n-            }\n-        }\n-\n-        CDiskTxPos value;\n-        if (!cursor->GetValue(value)) {\n-            return error(\"%s: cannot parse txindex record\", __func__);\n-        }\n-        batch_newdb.Write(key, value);\n-        batch_olddb.Erase(key);\n-\n-        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n-            // NOTE: it's OK to delete the key pointed at by the current DB cursor while iterating\n-            // because LevelDB iterators are guaranteed to provide a consistent view of the\n-            // underlying data, like a lightweight snapshot.\n-            WriteTxIndexMigrationBatches(*this, block_tree_db,\n-                                         batch_newdb, batch_olddb,\n-                                         prev_key, key);\n-            prev_key = key;\n-        }\n-    }\n-\n-    // If these final DB batches complete the migration, write the best block\n-    // hash marker to the new database and delete from the old one. This signals\n-    // that the former is fully caught up to that point in the blockchain and\n-    // that all txindex entries have been removed from the latter.\n-    if (!interrupted) {\n-        batch_olddb.Erase(DB_TXINDEX_BLOCK);\n-        batch_newdb.Write(DB_BEST_BLOCK, locator);\n-    }\n-\n-    WriteTxIndexMigrationBatches(*this, block_tree_db,\n-                                 batch_newdb, batch_olddb,\n-                                 begin_key, key);\n-\n-    if (interrupted) {\n-        LogPrintf(\"[CANCELLED].\\n\");\n-        return false;\n-    }\n-\n-    uiInterface.ShowProgress(\"\", 100, false);\n-\n-    LogPrintf(\"[DONE].\\n\");\n-    return true;\n-}\n-\n TxIndex::TxIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n     : m_db(std::make_unique<TxIndex::DB>(n_cache_size, f_memory, f_wipe))\n {}\n \n TxIndex::~TxIndex() {}\n \n-bool TxIndex::Init()\n-{\n-    LOCK(cs_main);\n-\n-    // Attempt to migrate txindex from the old database to the new one. Even if\n-    // chain_tip is null, the node could be reindexing and we still want to\n-    // delete txindex records in the old database.\n-    if (!m_db->MigrateData(*m_chainstate->m_blockman.m_block_tree_db, m_chainstate->m_chain.GetLocator())) {\n-        return false;\n-    }\n-\n-    return BaseIndex::Init();\n-}\n-\n bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n {\n     // Exclude genesis block transaction because outputs are not spendable."
      },
      {
        "sha": "59375bc20470da4d3505a5825eaaab488c84bfbd",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,9 +5,7 @@\n #ifndef BITCOIN_INDEX_TXINDEX_H\n #define BITCOIN_INDEX_TXINDEX_H\n \n-#include <chain.h>\n #include <index/base.h>\n-#include <txdb.h>\n \n /**\n  * TxIndex is used to look up transactions included in the blockchain by hash.\n@@ -23,9 +21,6 @@ class TxIndex final : public BaseIndex\n     const std::unique_ptr<DB> m_db;\n \n protected:\n-    /// Override base class init to migrate from old database.\n-    bool Init() override;\n-\n     bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n \n     BaseIndex::DB& GetDB() const override;"
      },
      {
        "sha": "4495ded64da1742d9877b6a92729c71454a31aec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 68,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -10,12 +10,12 @@\n #include <init.h>\n \n #include <addrman.h>\n-#include <amount.h>\n #include <banman.h>\n #include <blockfilter.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <compat/sanity.h>\n+#include <consensus/amount.h>\n #include <deploymentstatus.h>\n #include <fs.h>\n #include <hash.h>\n@@ -26,6 +26,7 @@\n #include <index/txindex.h>\n #include <init/common.h>\n #include <interfaces/chain.h>\n+#include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <mapport.h>\n #include <miner.h>\n@@ -59,6 +60,7 @@\n #include <util/check.h>\n #include <util/moneystr.h>\n #include <util/string.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n #include <util/threadnames.h>\n@@ -217,7 +219,7 @@ void Shutdown(NodeContext& node)\n     node.banman.reset();\n     node.addrman.reset();\n \n-    if (node.mempool && node.mempool->IsLoaded() && node.args->GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (node.mempool && node.mempool->IsLoaded() && node.args->GetBoolArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(*node.mempool);\n     }\n \n@@ -396,7 +398,7 @@ void SetupServerArgs(ArgsManager& argsman)\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex, -coinstatsindex and -rescan. \"\n+    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -coinstatsindex. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -561,6 +563,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (-sandbox=log-and-abort or -sandbox=abort). Allow only expected syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"log-and-abort\\\" mode the invocation of an unexpected syscall results in a debug handler being invoked which will log the incident and terminate the program (without executing the unexpected syscall). In the \\\"abort\\\" mode the invocation of an unexpected syscall results in the entire process being killed immediately by the kernel without executing the unexpected syscall.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#endif // USE_SYSCALL_SANDBOX\n+\n     // Add the hidden options\n     argsman.AddHiddenArgs(hidden_args);\n }\n@@ -842,7 +848,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // if using block pruning, then disallow txindex and coinstatsindex\n-    if (args.GetArg(\"-prune\", 0)) {\n+    if (args.GetIntArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n@@ -867,18 +873,18 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = args.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = args.GetIntArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n-    // Trim requested connection counts, to fit into system limitations\n-    // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n     nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS + nBind + NUM_FDS_MESSAGE_CAPTURE);\n \n #ifdef USE_POLL\n     int fd_max = nFD;\n #else\n     int fd_max = FD_SETSIZE;\n #endif\n+    // Trim requested connection counts, to fit into system limitations\n+    // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS - NUM_FDS_MESSAGE_CAPTURE), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));\n@@ -914,8 +920,8 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = args.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n@@ -929,7 +935,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = args.GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = args.GetIntArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -946,12 +952,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         fPruneMode = true;\n     }\n \n-    nConnectTimeout = args.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = args.GetIntArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n     }\n \n-    peer_connect_timeout = args.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    peer_connect_timeout = args.GetIntArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n         return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n@@ -991,32 +997,63 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n-    nBytesPerSigOp = args.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = args.GetIntArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = args.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    nMaxDatacarrierBytes = args.GetIntArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(args.GetIntArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n     if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n-    nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = args.GetIntArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     if (args.IsArgSet(\"-proxy\") && args.GetArg(\"-proxy\", \"\").empty()) {\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-abort\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"abort\") {\n+            // log_syscall_violation_before_terminating is false by default.\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-abort\\\" and \\\"abort\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (!args.GetArg(feature_using_execve, \"\").empty()) {\n+                return InitError(Untranslated(strprintf(\"The experimental syscall sandbox feature (-sandbox=<mode>) is incompatible with %s (which uses execve).\", feature_using_execve)));\n+            }\n+        }\n+        if (!SetupSyscallSandbox(log_syscall_violation_before_terminating)) {\n+            return InitError(Untranslated(\"Installation of the syscall sandbox failed.\"));\n+        }\n+        LogPrintf(\"Experimental syscall sandbox enabled (-sandbox=%s): bitcoind will terminate if an unexpected (not allowlisted) syscall is invoked.\\n\", sandbox_arg);\n+    }\n+#endif // USE_SYSCALL_SANDBOX\n+\n     return true;\n }\n \n@@ -1063,7 +1100,7 @@ bool AppInitLockDataDirectory()\n \n bool AppInitInterfaces(NodeContext& node)\n {\n-    node.chain = interfaces::MakeChain(node);\n+    node.chain = node.init->makeChain();\n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs\n     // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n@@ -1100,7 +1137,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    int script_threads = args.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    int script_threads = args.GetIntArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n         // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n@@ -1171,25 +1208,43 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     fDiscover = args.GetBoolArg(\"-discover\", true);\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n-    assert(!node.addrman);\n-    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n-    node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n     {\n-        // Load addresses from peers.dat\n-        uiInterface.InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n-        int64_t nStart = GetTimeMillis();\n-        CAddrDB adb;\n-        if (adb.Read(*node.addrman)) {\n-            LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", node.addrman->size(), GetTimeMillis() - nStart);\n+        // Initialize addrman\n+        assert(!node.addrman);\n+\n+        // Read asmap file if configured\n+        std::vector<bool> asmap;\n+        if (args.IsArgSet(\"-asmap\")) {\n+            fs::path asmap_path = fs::path(args.GetArg(\"-asmap\", \"\"));\n+            if (asmap_path.empty()) {\n+                asmap_path = DEFAULT_ASMAP_FILENAME;\n+            }\n+            if (!asmap_path.is_absolute()) {\n+                asmap_path = gArgs.GetDataDirNet() / asmap_path;\n+            }\n+            if (!fs::exists(asmap_path)) {\n+                InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n+                return false;\n+            }\n+            asmap = DecodeAsmap(asmap_path);\n+            if (asmap.size() == 0) {\n+                InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n+                return false;\n+            }\n+            const uint256 asmap_version = SerializeHash(asmap);\n+            LogPrintf(\"Using asmap version %s for IP bucketing\\n\", asmap_version.ToString());\n         } else {\n-            // Addrman can be in an inconsistent state after failure, reset it\n-            node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-            LogPrintf(\"Recreating peers.dat\\n\");\n-            adb.Write(*node.addrman);\n+            LogPrintf(\"Using /16 prefix for IP bucketing\\n\");\n+        }\n+\n+        uiInterface.InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n+        if (const auto error{LoadAddrman(asmap, args, node.addrman)}) {\n+            return InitError(*error);\n         }\n     }\n+\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetIntArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1199,7 +1254,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     if (!ignores_incoming_txs) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n-    int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int check_ratio = std::min<int>(std::max<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n@@ -1292,31 +1347,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             return InitError(ResolveErrMsg(\"externalip\", strAddr));\n     }\n \n-    // Read asmap file if configured\n-    if (args.IsArgSet(\"-asmap\")) {\n-        fs::path asmap_path = fs::path(args.GetArg(\"-asmap\", \"\"));\n-        if (asmap_path.empty()) {\n-            asmap_path = DEFAULT_ASMAP_FILENAME;\n-        }\n-        if (!asmap_path.is_absolute()) {\n-            asmap_path = gArgs.GetDataDirNet() / asmap_path;\n-        }\n-        if (!fs::exists(asmap_path)) {\n-            InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n-            return false;\n-        }\n-        std::vector<bool> asmap = CAddrMan::DecodeAsmap(asmap_path);\n-        if (asmap.size() == 0) {\n-            InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n-            return false;\n-        }\n-        const uint256 asmap_version = SerializeHash(asmap);\n-        node.connman->SetAsmap(std::move(asmap));\n-        LogPrintf(\"Using asmap version %s for IP bucketing\\n\", asmap_version.ToString());\n-    } else {\n-        LogPrintf(\"Using /16 prefix for IP bucketing\\n\");\n-    }\n-\n #if ENABLE_ZMQ\n     g_zmq_notification_interface = CZMQNotificationInterface::Create();\n \n@@ -1331,7 +1361,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n@@ -1349,7 +1379,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n@@ -1505,7 +1535,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                        if (fHavePruned && args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                             LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                                 MIN_BLOCKS_TO_KEEP);\n                         }\n@@ -1522,8 +1552,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                         if (!CVerifyDB().VerifyDB(\n                                 *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n@@ -1573,6 +1603,10 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+        if (const auto error{CheckLegacyTxindex(*Assert(chainman.m_blockman.m_block_tree_db))}) {\n+            return InitError(*error);\n+        }\n+\n         g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n         if (!g_txindex->Start(chainman.ActiveChainstate())) {\n             return false;\n@@ -1711,11 +1745,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peerman.get();\n-    connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.nSendBufferMaxSize = 1000 * args.GetIntArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000 * args.GetIntArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n \n-    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n+    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {"
      },
      {
        "sha": "fa56153745d8b5570a1ad11787185e8870920245",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,9 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <interfaces/chain.h>\n #include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n #include <node/context.h>\n #include <util/system.h>\n \n@@ -24,6 +27,12 @@ class BitcoinNodeInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n     NodeContext& m_node;"
      },
      {
        "sha": "9c8d5bd9bbe1c573725287a35940ab9d2409ef89",
        "filename": "src/init/bitcoind.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/init/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/init/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoind.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <interfaces/chain.h>\n+#include <interfaces/echo.h>\n #include <interfaces/init.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n #include <node/context.h>\n #include <util/system.h>\n \n@@ -18,6 +22,13 @@ class BitcoindInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     NodeContext& m_node;\n };\n } // namespace"
      },
      {
        "sha": "9a97cad1f80d7ddd07b07aa9b3080ea7a5bef596",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -177,7 +177,7 @@ class Chain\n         std::string& err_string) = 0;\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n-    virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n+    virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n     //! Get the node's package limits.\n     //! Currently only returns the ancestor and descendant count limits, but could be enhanced to"
      },
      {
        "sha": "34fdde3774aad61ee50f5e079a718f809ff0f645",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_INTERFACES_NODE_H\n #define BITCOIN_INTERFACES_NODE_H\n \n-#include <amount.h>     // For CAmount\n+#include <consensus/amount.h>\n #include <external_signer.h>\n #include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n@@ -230,7 +230,7 @@ class Node\n };\n \n //! Return implementation of Node interface.\n-std::unique_ptr<Node> MakeNode(NodeContext* context = nullptr);\n+std::unique_ptr<Node> MakeNode(NodeContext& context);\n \n //! Block tip (could be a header or not, depends on the subscribed signal).\n struct BlockTip {"
      },
      {
        "sha": "490563426c65fd5c77a2a255499eeaae2ae14204",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_INTERFACES_WALLET_H\n #define BITCOIN_INTERFACES_WALLET_H\n \n-#include <amount.h>                    // For CAmount\n+#include <consensus/amount.h>\n #include <interfaces/chain.h>          // For ChainClient\n #include <pubkey.h>                    // For CKeyID and CScriptID (definitions needed in CTxDestination instantiation)\n #include <script/standard.h>           // For CTxDestination\n@@ -122,10 +122,10 @@ class Wallet\n     virtual bool displayAddress(const CTxDestination& dest) = 0;\n \n     //! Lock coin.\n-    virtual void lockCoin(const COutPoint& output) = 0;\n+    virtual bool lockCoin(const COutPoint& output, const bool write_to_db) = 0;\n \n     //! Unlock coin.\n-    virtual void unlockCoin(const COutPoint& output) = 0;\n+    virtual bool unlockCoin(const COutPoint& output) = 0;\n \n     //! Return whether coin is locked.\n     virtual bool isLockedCoin(const COutPoint& output) = 0;"
      },
      {
        "sha": "9b94baa026ace45278436efc4f831a68b5a56194",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -17,7 +17,6 @@\n \n \n /**\n- * secure_allocator is defined in allocators.h\n  * CPrivKey is a serialized private key, with all parameters included\n  * (SIZE bytes)\n  */"
      },
      {
        "sha": "a352e106e5ecfcdbf6f506f35005ce65f7b53983",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -160,6 +160,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n     {BCLog::LOCK, \"lock\"},\n+    {BCLog::UTIL, \"util\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "02e64a7c4868d72848a7350959fca02059e7c302",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -60,6 +60,7 @@ namespace BCLog {\n         I2P         = (1 << 22),\n         IPC         = (1 << 23),\n         LOCK        = (1 << 24),\n+        UTIL        = (1 << 25),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "79627b1fe31a2308317fb2bb366fa0845923bef6",
        "filename": "src/logging/timer.h",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/logging/timer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/logging/timer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging/timer.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,6 +9,7 @@\n #include <logging.h>\n #include <util/macros.h>\n #include <util/time.h>\n+#include <util/types.h>\n \n #include <chrono>\n #include <string>\n@@ -58,23 +59,15 @@ class Timer\n             return strprintf(\"%s: %s\", m_prefix, msg);\n         }\n \n-        if (std::is_same<TimeType, std::chrono::microseconds>::value) {\n+        if constexpr (std::is_same<TimeType, std::chrono::microseconds>::value) {\n             return strprintf(\"%s: %s (%i\u03bcs)\", m_prefix, msg, end_time.count());\n+        } else if constexpr (std::is_same<TimeType, std::chrono::milliseconds>::value) {\n+            return strprintf(\"%s: %s (%.2fms)\", m_prefix, msg, end_time.count() * 0.001);\n+        } else if constexpr (std::is_same<TimeType, std::chrono::seconds>::value) {\n+            return strprintf(\"%s: %s (%.2fs)\", m_prefix, msg, end_time.count() * 0.000001);\n+        } else {\n+            static_assert(ALWAYS_FALSE<TimeType>, \"Error: unexpected time type\");\n         }\n-\n-        std::string units;\n-        float divisor = 1;\n-\n-        if (std::is_same<TimeType, std::chrono::milliseconds>::value) {\n-            units = \"ms\";\n-            divisor = 1000.;\n-        } else if (std::is_same<TimeType, std::chrono::seconds>::value) {\n-            units = \"s\";\n-            divisor = 1000. * 1000.;\n-        }\n-\n-        const float time_ms = end_time.count() / divisor;\n-        return strprintf(\"%s: %s (%.2f%s)\", m_prefix, msg, time_ms, units);\n     }\n \n private:\n@@ -89,7 +82,6 @@ class Timer\n     //! Forwarded on to LogPrint if specified - has the effect of only\n     //! outputting the timing log when a particular debug= category is specified.\n     const BCLog::LogFlags m_log_category{};\n-\n };\n \n } // namespace BCLog"
      },
      {
        "sha": "a2d06c68b432ccd2d45276829c6c549054701c74",
        "filename": "src/mapport.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/mapport.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/mapport.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mapport.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,6 +14,7 @@\n #include <netaddress.h>\n #include <netbase.h>\n #include <threadinterrupt.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n \n@@ -222,6 +223,7 @@ static bool ProcessUpnp()\n \n static void ThreadMapPort()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_MAP_PORT);\n     bool ok;\n     do {\n         ok = false;"
      },
      {
        "sha": "1ef246cd1412d8bfdba94cef0e9fea846ca9993b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,10 +5,10 @@\n \n #include <miner.h>\n \n-#include <amount.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n@@ -72,7 +72,7 @@ static BlockAssembler::Options DefaultOptions()\n     // Block resource limits\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n+    options.nBlockMaxWeight = gArgs.GetIntArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n         std::optional<CAmount> parsed = ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"));\n         options.blockMinFeeRate = CFeeRate{parsed.value_or(DEFAULT_BLOCK_MIN_TX_FEE)};\n@@ -125,7 +125,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n+        pblock->nVersion = gArgs.GetIntArg(\"-blockversion\", pblock->nVersion);\n \n     pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n@@ -237,7 +237,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n \n     bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n-        LogPrintf(\"fee %s txid %s\\n\",\n+        LogPrintf(\"fee rate %s txid %s\\n\",\n                   CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n                   iter->GetTx().GetHash().ToString());\n     }"
      },
      {
        "sha": "fca53a6f0972dc3ab0d2f4c0a8c51c5128edd2b8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 22,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <net.h>\n \n+#include <addrdb.h>\n #include <banman.h>\n #include <clientversion.h>\n #include <compat.h>\n@@ -24,6 +25,8 @@\n #include <scheduler.h>\n #include <util/sock.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n+#include <util/system.h>\n #include <util/thread.h>\n #include <util/trace.h>\n #include <util/translation.h>\n@@ -121,7 +124,7 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return static_cast<uint16_t>(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return static_cast<uint16_t>(gArgs.GetIntArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -190,8 +193,8 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n static int GetnScore(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n-    if (mapLocalHost.count(addr) == 0) return 0;\n-    return mapLocalHost[addr].nScore;\n+    const auto it = mapLocalHost.find(addr);\n+    return (it != mapLocalHost.end()) ? it->second.nScore : 0;\n }\n \n // Is our peer's addrLocal potentially useful as an external IP source?\n@@ -243,10 +246,10 @@ bool AddLocal(const CService& addr, int nScore)\n \n     {\n         LOCK(cs_mapLocalHost);\n-        bool fAlready = mapLocalHost.count(addr) > 0;\n-        LocalServiceInfo &info = mapLocalHost[addr];\n-        if (!fAlready || nScore >= info.nScore) {\n-            info.nScore = nScore + (fAlready ? 1 : 0);\n+        const auto [it, is_newly_added] = mapLocalHost.emplace(addr, LocalServiceInfo());\n+        LocalServiceInfo &info = it->second;\n+        if (is_newly_added || nScore >= info.nScore) {\n+            info.nScore = nScore + (is_newly_added ? 0 : 1);\n             info.nPort = addr.GetPort();\n         }\n     }\n@@ -288,12 +291,10 @@ bool IsReachable(const CNetAddr &addr)\n /** vote for a local address */\n bool SeenLocal(const CService& addr)\n {\n-    {\n-        LOCK(cs_mapLocalHost);\n-        if (mapLocalHost.count(addr) == 0)\n-            return false;\n-        mapLocalHost[addr].nScore++;\n-    }\n+    LOCK(cs_mapLocalHost);\n+    const auto it = mapLocalHost.find(addr);\n+    if (it == mapLocalHost.end()) return false;\n+    ++it->second.nScore;\n     return true;\n }\n \n@@ -552,14 +553,13 @@ Network CNode::ConnectedThroughNetwork() const\n \n #undef X\n #define X(name) stats.name = name\n-void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n+void CNode::CopyStats(CNodeStats& stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n     X(addrBind);\n     stats.m_network = ConnectedThroughNetwork();\n-    stats.m_mapped_as = addr.GetMappedAS(m_asmap);\n     if (m_tx_relay != nullptr) {\n         LOCK(m_tx_relay->cs_filter);\n         stats.fRelayTxes = m_tx_relay->fRelayTxes;\n@@ -1616,6 +1616,7 @@ void CConnman::SocketHandler()\n \n void CConnman::ThreadSocketHandler()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\n     while (!interruptNet)\n     {\n         DisconnectNodes();\n@@ -1635,6 +1636,7 @@ void CConnman::WakeMessageHandler()\n \n void CConnman::ThreadDNSAddressSeed()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_DNS_SEED);\n     FastRandomContext rng;\n     std::vector<std::string> seeds = Params().DNSSeeds();\n     Shuffle(seeds.begin(), seeds.end(), rng);\n@@ -1747,8 +1749,7 @@ void CConnman::DumpAddresses()\n {\n     int64_t nStart = GetTimeMillis();\n \n-    CAddrDB adb;\n-    adb.Write(addrman);\n+    DumpPeerAddresses(::gArgs, addrman);\n \n     LogPrint(BCLog::NET, \"Flushed %d addresses to peers.dat  %dms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n@@ -1818,6 +1819,7 @@ int CConnman::GetExtraBlockRelayCount() const\n \n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_OPEN_CONNECTION);\n     // Connect to specific addresses\n     if (!connect.empty())\n     {\n@@ -1921,7 +1923,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     case ConnectionType::BLOCK_RELAY:\n                     case ConnectionType::ADDR_FETCH:\n                     case ConnectionType::FEELER:\n-                        setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n+                        setConnected.insert(pnode->addr.GetGroup(addrman.GetAsmap()));\n                 } // no default case, so the compiler can warn about missing cases\n             }\n         }\n@@ -1995,7 +1997,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 m_anchors.pop_back();\n                 if (!addr.IsValid() || IsLocal(addr) || !IsReachable(addr) ||\n                     !HasAllDesirableServiceFlags(addr.nServices) ||\n-                    setConnected.count(addr.GetGroup(addrman.m_asmap))) continue;\n+                    setConnected.count(addr.GetGroup(addrman.GetAsmap()))) continue;\n                 addrConnect = addr;\n                 LogPrint(BCLog::NET, \"Trying to make an anchor connection to %s\\n\", addrConnect.ToString());\n                 break;\n@@ -2035,7 +2037,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n \n             // Require outbound connections, other than feelers, to be to distinct network groups\n-            if (!fFeeler && setConnected.count(addr.GetGroup(addrman.m_asmap))) {\n+            if (!fFeeler && setConnected.count(addr.GetGroup(addrman.GetAsmap()))) {\n                 break;\n             }\n \n@@ -2157,6 +2159,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo() const\n \n void CConnman::ThreadOpenAddedConnections()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_ADD_CONNECTION);\n     while (true)\n     {\n         CSemaphoreGrant grant(*semAddnode);\n@@ -2220,6 +2223,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n \n void CConnman::ThreadMessageHandler()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::MESSAGE_HANDLER);\n     FastRandomContext rng;\n     while (!flagInterruptMsgProc)\n     {\n@@ -2804,7 +2808,8 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats) const\n     vstats.reserve(vNodes.size());\n     for (CNode* pnode : vNodes) {\n         vstats.emplace_back();\n-        pnode->copyStats(vstats.back(), addrman.m_asmap);\n+        pnode->CopyStats(vstats.back());\n+        vstats.back().m_mapped_as = pnode->addr.GetMappedAS(addrman.GetAsmap());\n     }\n }\n \n@@ -3067,7 +3072,7 @@ CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n \n uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n-    std::vector<unsigned char> vchNetGroup(ad.GetGroup(addrman.m_asmap));\n+    std::vector<unsigned char> vchNetGroup(ad.GetGroup(addrman.GetAsmap()));\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }"
      },
      {
        "sha": "a97ed9946d91e0452fac86470091374ea04708c5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,12 +6,11 @@\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n-#include <addrdb.h>\n #include <addrman.h>\n-#include <amount.h>\n #include <bloom.h>\n #include <chainparams.h>\n #include <compat.h>\n+#include <consensus/amount.h>\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <i2p.h>\n@@ -652,7 +651,7 @@ class CNode\n \n     void CloseSocketDisconnect();\n \n-    void copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap);\n+    void CopyStats(CNodeStats& stats);\n \n     ServiceFlags GetLocalServices() const\n     {\n@@ -768,7 +767,6 @@ class CConnman\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n-        std::vector<bool> m_asmap;\n         bool m_i2p_accept_incoming;\n     };\n \n@@ -943,8 +941,6 @@ class CConnman\n     */\n     std::chrono::microseconds PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::seconds average_interval);\n \n-    void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n-\n     /** Return true if we should disconnect the peer for failing an inactivity check. */\n     bool ShouldRunInactivityChecks(const CNode& node, std::optional<int64_t> now=std::nullopt) const;\n "
      },
      {
        "sha": "aaad34be660d70fdb09dea6402c2ce347541fae2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -10,6 +10,7 @@\n #include <blockencodings.h>\n #include <blockfilter.h>\n #include <chainparams.h>\n+#include <consensus/amount.h>\n #include <consensus/validation.h>\n #include <deploymentstatus.h>\n #include <hash.h>\n@@ -884,6 +885,12 @@ bool PeerManagerImpl::BlockRequested(NodeId nodeid, const CBlockIndex& block, st\n void PeerManagerImpl::MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid)\n {\n     AssertLockHeld(cs_main);\n+\n+    // Never request high-bandwidth mode from peers if we're blocks-only. Our\n+    // mempool will not contain the transactions necessary to reconstruct the\n+    // compact block.\n+    if (m_ignore_incoming_txs) return;\n+\n     CNodeState* nodestate = State(nodeid);\n     if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n         // Never ask from peers who can't provide witnesses.\n@@ -1300,7 +1307,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n     if (!vExtraTxnForCompact.size())\n@@ -2165,7 +2172,11 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n-                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                    if (!m_ignore_incoming_txs &&\n+                        nodestate->fSupportsDesiredCmpctVersion &&\n+                        vGetData.size() == 1 &&\n+                        mapBlocksInFlight.size() == 1 &&\n+                        pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n                     }\n@@ -2909,13 +2920,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        // We won't accept tx inv's if we're in blocks-only mode, or this is a\n+        // Reject tx INVs when the -blocksonly setting is enabled, or this is a\n         // block-relay-only peer\n-        bool fBlocksOnly = m_ignore_incoming_txs || (pfrom.m_tx_relay == nullptr);\n+        bool reject_tx_invs{m_ignore_incoming_txs || (pfrom.m_tx_relay == nullptr)};\n \n         // Allow peers with relay permission to send data other than blocks in blocks only mode\n         if (pfrom.HasPermission(NetPermissionFlags::Relay)) {\n-            fBlocksOnly = false;\n+            reject_tx_invs = false;\n         }\n \n         LOCK(cs_main);\n@@ -2954,7 +2965,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 pfrom.AddKnownTx(inv.hash);\n-                if (fBlocksOnly) {\n+                if (reject_tx_invs) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom.GetId());\n                     pfrom.fDisconnect = true;\n                     return;\n@@ -3315,7 +3326,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n-                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetIntArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n                     LogPrint(BCLog::MEMPOOL, \"orphanage overflow, removed %u tx\\n\", nEvicted);\n@@ -4416,7 +4427,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, std::chrono::microseconds c\n     // peers with the forcerelay permission should not filter txs to us\n     if (pto.HasPermission(NetPermissionFlags::ForceRelay)) return;\n \n-    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n \n     if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {"
      },
      {
        "sha": "b2f4945e3bc816d7fc60c09da84f64924fcc4e21",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -1242,8 +1242,3 @@ bool operator<(const CSubNet& a, const CSubNet& b)\n {\n     return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));\n }\n-\n-bool SanityCheckASMap(const std::vector<bool>& asmap)\n-{\n-    return SanityCheckASMap(asmap, 128); // For IP address lookups, the input is 128 bits\n-}"
      },
      {
        "sha": "cfb2edcd34b2d68155824d23dec61e8b28b8fe13",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -567,6 +567,4 @@ class CService : public CNetAddr\n     }\n };\n \n-bool SanityCheckASMap(const std::vector<bool>& asmap);\n-\n #endif // BITCOIN_NETADDRESS_H"
      },
      {
        "sha": "64d17189a6abe7065af94f18ad61535d60a98380",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -23,8 +23,6 @@\n \n #ifndef WIN32\n #include <fcntl.h>\n-#else\n-#include <codecvt>\n #endif\n \n #ifdef USE_POLL"
      },
      {
        "sha": "0b7df9bd9abf7caa1cfc91089e6d9d69a6bc4259",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -16,6 +16,7 @@\n #include <signet.h>\n #include <streams.h>\n #include <undo.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <validation.h>\n \n@@ -85,7 +86,7 @@ void CleanupBlockRevFiles()\n     // start removing block files.\n     int nContigCounter = 0;\n     for (const std::pair<const std::string, fs::path>& item : mapBlockFiles) {\n-        if (atoi(item.first) == nContigCounter) {\n+        if (LocaleIndependentAtoi<int>(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n         }\n@@ -394,18 +395,14 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n \n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    FlatFilePos blockPos;\n-    {\n-        LOCK(cs_main);\n-        blockPos = pindex->GetBlockPos();\n-    }\n+    const FlatFilePos block_pos{WITH_LOCK(cs_main, return pindex->GetBlockPos())};\n \n-    if (!ReadBlockFromDisk(block, blockPos, consensusParams)) {\n+    if (!ReadBlockFromDisk(block, block_pos, consensusParams)) {\n         return false;\n     }\n     if (block.GetHash() != pindex->GetBlockHash()) {\n         return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n-                     pindex->ToString(), pindex->GetBlockPos().ToString());\n+                     pindex->ToString(), block_pos.ToString());\n     }\n     return true;\n }\n@@ -493,6 +490,7 @@ struct CImportingNow {\n \n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS);\n     ScheduleBatchPriority();\n \n     {"
      },
      {
        "sha": "9e9503ff5d24614f1b04f1c44894b90aba66013b",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_NODE_COINSTATS_H\n #define BITCOIN_NODE_COINSTATS_H\n \n-#include <amount.h>\n #include <chain.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <streams.h>\n #include <uint256.h>\n "
      },
      {
        "sha": "5b6d8416a736ff00290d2d9de35b98454c6653d7",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -72,7 +72,7 @@ class NodeImpl : public Node\n private:\n     ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n-    explicit NodeImpl(NodeContext* context) { setContext(context); }\n+    explicit NodeImpl(NodeContext& context) { setContext(&context); }\n     void initLogging() override { InitLogging(*Assert(m_context->args)); }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n@@ -575,27 +575,27 @@ class ChainImpl : public Chain\n         // that Chain clients do not need to know about.\n         return TransactionError::OK == err;\n     }\n-    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n+    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize, CAmount* ancestorfees) override\n     {\n         ancestors = descendants = 0;\n         if (!m_node.mempool) return;\n-        m_node.mempool->GetTransactionAncestry(txid, ancestors, descendants);\n+        m_node.mempool->GetTransactionAncestry(txid, ancestors, descendants, ancestorsize, ancestorfees);\n     }\n     void getPackageLimits(unsigned int& limit_ancestor_count, unsigned int& limit_descendant_count) override\n     {\n-        limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n     }\n     bool checkChainLimits(const CTransactionRef& tx) override\n     {\n         if (!m_node.mempool) return true;\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries ancestors;\n-        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n-        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        auto limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n         std::string unused_error_string;\n         LOCK(m_node.mempool->cs);\n         return m_node.mempool->CalculateMemPoolAncestors(\n@@ -615,7 +615,7 @@ class ChainImpl : public Chain\n     CFeeRate mempoolMinFee() override\n     {\n         if (!m_node.mempool) return {};\n-        return m_node.mempool->GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        return m_node.mempool->GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }\n@@ -710,6 +710,6 @@ class ChainImpl : public Chain\n } // namespace node\n \n namespace interfaces {\n-std::unique_ptr<Node> MakeNode(NodeContext* context) { return std::make_unique<node::NodeImpl>(context); }\n+std::unique_ptr<Node> MakeNode(NodeContext& context) { return std::make_unique<node::NodeImpl>(context); }\n std::unique_ptr<Chain> MakeChain(NodeContext& context) { return std::make_unique<node::ChainImpl>(context); }\n } // namespace interfaces"
      },
      {
        "sha": "9ad65d15d2152ced9da9924ec5731df2be4d8066",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <consensus/tx_verify.h>\n #include <node/psbt.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "b16f3f82515f2d88911d6eafaf5a45370cd67aee",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_POLICY_FEERATE_H\n #define BITCOIN_POLICY_FEERATE_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <serialize.h>\n \n #include <string>"
      },
      {
        "sha": "27f9120c64c46e90bdec8c63afbb336472bce0b2",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_POLICY_FEES_H\n #define BITCOIN_POLICY_FEES_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <policy/feerate.h>\n #include <uint256.h>\n #include <random.h>"
      },
      {
        "sha": "7ac2e22006fc7692410595516683af6b82021fcd",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 24,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -13,7 +13,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n {\n     AssertLockHeld(pool.cs);\n \n-    CTxMemPool::setEntries setAncestors;\n+    CTxMemPool::setEntries ancestors;\n \n     // First check the transaction itself.\n     if (SignalsOptInRBF(tx)) {\n@@ -31,9 +31,9 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n     CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n-    pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n+    pool.CalculateMemPoolAncestors(entry, ancestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    for (CTxMemPool::txiter it : setAncestors) {\n+    for (CTxMemPool::txiter it : ancestors) {\n         if (SignalsOptInRBF(it->GetTx())) {\n             return RBFTransactionState::REPLACEABLE_BIP125;\n         }\n@@ -47,33 +47,130 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n-bool GetEntriesForConflicts(const CTransaction& tx,\n-                            CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string)\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n+                                                  CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n {\n-    AssertLockHeld(m_pool.cs);\n-    const uint256 hash = tx.GetHash();\n+    AssertLockHeld(pool.cs);\n+    const uint256 txid = tx.GetHash();\n     uint64_t nConflictingCount = 0;\n-    for (const auto& mi : setIterConflicting) {\n+    for (const auto& mi : iters_conflicting) {\n         nConflictingCount += mi->GetCountWithDescendants();\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n+        // BIP125 Rule #5: don't consider replacing more than MAX_BIP125_REPLACEMENT_CANDIDATES\n+        // entries from the mempool. This potentially overestimates the number of actual\n+        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n+        // times), but we just want to be conservative to avoid doing too much work.\n         if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n-            err_string = strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        MAX_BIP125_REPLACEMENT_CANDIDATES);\n-            return false;\n+            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                             txid.ToString(),\n+                             nConflictingCount,\n+                             MAX_BIP125_REPLACEMENT_CANDIDATES);\n         }\n     }\n-    // If not too many to replace, then calculate the set of\n-    // transactions that would have to be evicted\n-    for (CTxMemPool::txiter it : setIterConflicting) {\n-        m_pool.CalculateDescendants(it, allConflicting);\n+    // Calculate the set of all transactions that would have to be evicted.\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n     }\n-    return true;\n+    return std::nullopt;\n }\n \n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n+                                               const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn& txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++) {\n+        // BIP125 Rule #2: We don't want to accept replacements that require low feerate junk to be\n+        // mined first.  Ideally we'd keep track of the ancestor feerates and make the decision\n+        // based on that, but for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation which subtracts the conflict count/size from the\n+        // descendant limit.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n+                return strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                                 tx.GetHash().ToString(), j);\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n+                                                   const uint256& txid)\n+{\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n+        const uint256& hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (direct_conflicts.count(hashAncestor)) {\n+            return strprintf(\"%s spends conflicting transaction %s\",\n+                             txid.ToString(),\n+                             hashAncestor.ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate,\n+                                                 const uint256& txid)\n+{\n+    for (const auto& mi : iters_conflicting) {\n+        // Don't allow the replacement to reduce the feerate of the mempool.\n+        //\n+        // We usually don't want to accept replacements with lower feerates than what they replaced\n+        // as that would lower the feerate of the next block. Requiring that the feerate always be\n+        // increased is also an easy-to-reason about way to prevent DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly replaced, not their indirect\n+        // descendants. While that does mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more overall fees too, mitigating\n+        // most cases.\n+        CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (replacement_feerate <= original_feerate) {\n+            return strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                             txid.ToString(),\n+                             replacement_feerate.ToString(),\n+                             original_feerate.ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PaysForRBF(CAmount original_fees,\n+                                      CAmount replacement_fees,\n+                                      size_t replacement_vsize,\n+                                      CFeeRate relay_fee,\n+                                      const uint256& txid)\n+{\n+    // BIP125 Rule #3: The replacement fees must be greater than or equal to fees of the\n+    // transactions it replaces, otherwise the bandwidth used by those conflicting transactions\n+    // would not be paid for.\n+    if (replacement_fees < original_fees) {\n+        return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                         txid.ToString(), FormatMoney(replacement_fees), FormatMoney(original_fees));\n+    }\n+\n+    // BIP125 Rule #4: The new transaction must pay for its own bandwidth. Otherwise, we have a DoS\n+    // vector where attackers can cause a transaction to be replaced (and relayed) repeatedly by\n+    // increasing the fee by tiny amounts.\n+    CAmount additional_fees = replacement_fees - original_fees;\n+    if (additional_fees < relay_fee.GetFee(replacement_vsize)) {\n+        return strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                         txid.ToString(),\n+                         FormatMoney(additional_fees),\n+                         FormatMoney(relay_fee.GetFee(replacement_vsize)));\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "be8c2e5b8bc404480452e0ef26406304140a6e59",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 59,
        "deletions": 10,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,12 @@\n #ifndef BITCOIN_POLICY_RBF_H\n #define BITCOIN_POLICY_RBF_H\n \n+#include <primitives/transaction.h>\n #include <txmempool.h>\n+#include <uint256.h>\n+\n+#include <optional>\n+#include <string>\n \n /** Maximum number of transactions that can be replaced by BIP125 RBF (Rule #5). This includes all\n  * mempool conflicts and their descendants. */\n@@ -35,19 +40,63 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n-/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  err_string          Used to return errors, if any.\n- * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n- *                                  which includes descendants of setIterConflicting. Not cleared at\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n- * @returns false if Rule 5 is broken.\n+ * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n+    EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n+ * was included in one of the original transactions.\"\n+ * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+    EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n+ * txids) to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n+ * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n+ */\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n+                                                   const uint256& txid);\n+\n+/** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n+ * of the transactions in iters_conflicting.\n+ * @param[in]   iters_conflicting  The set of mempool entries.\n+ * @returns error message if fees insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate, const uint256& txid);\n+\n+/** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n+ * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n+ * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n+ * @param[in]   original_fees       Total modified fees of original transaction(s).\n+ * @param[in]   replacement_fees    Total modified fees of replacement transaction(s).\n+ * @param[in]   replacement_vsize   Total virtual size of replacement transaction(s).\n+ * @param[in]   relay_fee           The node's minimum feerate for transaction relay.\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n+ * @returns error string if fees are insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysForRBF(CAmount original_fees,\n+                                      CAmount replacement_fees,\n+                                      size_t replacement_vsize,\n+                                      CFeeRate relay_fee,\n+                                      const uint256& txid);\n+\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "a871912225020ec54eb453c92c421b0bc2c9ec42",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <primitives/transaction.h>\n \n+#include <consensus/amount.h>\n #include <hash.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "46db39f8db18d7866aa235d617e0f1e65a3db05c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include <stdint.h>\n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <script/script.h>\n #include <serialize.h>\n #include <uint256.h>"
      },
      {
        "sha": "a617bb44511ffe587f86e23d9ffff59378d6b2bd",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -182,14 +182,14 @@ void AddressBookPage::onEditAction()\n     if(indexes.isEmpty())\n         return;\n \n-    EditAddressDialog dlg(\n+    auto dlg = new EditAddressDialog(\n         tab == SendingTab ?\n         EditAddressDialog::EditSendingAddress :\n         EditAddressDialog::EditReceivingAddress, this);\n-    dlg.setModel(model);\n+    dlg->setModel(model);\n     QModelIndex origIndex = proxyModel->mapToSource(indexes.at(0));\n-    dlg.loadRow(origIndex.row());\n-    dlg.exec();\n+    dlg->loadRow(origIndex.row());\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n void AddressBookPage::on_newAddress_clicked()\n@@ -282,7 +282,7 @@ void AddressBookPage::on_exportButton_clicked()\n     QString filename = GUIUtil::getSaveFileName(this,\n         tr(\"Export Address List\"), QString(),\n         /*: Expanded name of the CSV file format.\n-            See https://en.wikipedia.org/wiki/Comma-separated_values */\n+            See: https://en.wikipedia.org/wiki/Comma-separated_values. */\n         tr(\"Comma separated file\") + QLatin1String(\" (*.csv)\"), nullptr);\n \n     if (filename.isNull())"
      },
      {
        "sha": "4b5b38e43f887e88264229f6c38c4ae22c15f155",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_QT_BANTABLEMODEL_H\n #define BITCOIN_QT_BANTABLEMODEL_H\n \n+#include <addrdb.h>\n #include <net.h>\n \n #include <memory>"
      },
      {
        "sha": "00c9fd3059881d887a181a97a7e7e9c4a58a9e73",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -11,6 +11,7 @@\n #include <chainparams.h>\n #include <init.h>\n #include <interfaces/handler.h>\n+#include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n@@ -54,6 +55,7 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n+#include <QWindow>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -258,6 +260,7 @@ void BitcoinApplication::createOptionsModel(bool resetSettings)\n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n     window = new BitcoinGUI(node(), platformStyle, networkStyle, nullptr);\n+    connect(window, &BitcoinGUI::quitRequested, this, &BitcoinApplication::requestShutdown);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, &QTimer::timeout, window, &BitcoinGUI::detectShutdown);\n@@ -275,10 +278,10 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }\n \n-void BitcoinApplication::setNode(interfaces::Node& node)\n+void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n-    m_node = &node;\n+    m_node = init.makeNode();\n     if (optionsModel) optionsModel->setNode(*m_node);\n     if (m_splash) m_splash->setNode(*m_node);\n }\n@@ -295,7 +298,7 @@ void BitcoinApplication::startThread()\n \n     /*  communication to and from thread */\n     connect(&m_executor.value(), &InitExecutor::initializeResult, this, &BitcoinApplication::initializeResult);\n-    connect(&m_executor.value(), &InitExecutor::shutdownResult, this, &BitcoinApplication::shutdownResult);\n+    connect(&m_executor.value(), &InitExecutor::shutdownResult, this, &QCoreApplication::quit);\n     connect(&m_executor.value(), &InitExecutor::runawayException, this, &BitcoinApplication::handleRunawayException);\n     connect(this, &BitcoinApplication::requestedInitialize, &m_executor.value(), &InitExecutor::initialize);\n     connect(this, &BitcoinApplication::requestedShutdown, &m_executor.value(), &InitExecutor::shutdown);\n@@ -325,13 +328,17 @@ void BitcoinApplication::requestInitialize()\n \n void BitcoinApplication::requestShutdown()\n {\n+    for (const auto w : QGuiApplication::topLevelWindows()) {\n+        w->hide();\n+    }\n+\n     // Show a simple window indicating shutdown status\n     // Do this first as some of the steps may take some time below,\n     // for example the RPC console may still be executing a command.\n     shutdownWindow.reset(ShutdownWindow::showShutdownWindow(window));\n \n     qDebug() << __func__ << \": Requesting shutdown\";\n-    window->hide();\n+\n     // Must disconnect node signals otherwise current thread can deadlock since\n     // no event loop is running.\n     window->unsubscribeFromCoreSignals();\n@@ -408,15 +415,10 @@ void BitcoinApplication::initializeResult(bool success, interfaces::BlockAndHead\n         pollShutdownTimer->start(200);\n     } else {\n         Q_EMIT splashFinished(); // Make sure splash screen doesn't stick around during shutdown\n-        quit(); // Exit first main loop invocation\n+        requestShutdown();\n     }\n }\n \n-void BitcoinApplication::shutdownResult()\n-{\n-    quit(); // Exit second main loop invocation after shutdown finished\n-}\n-\n void BitcoinApplication::handleRunawayException(const QString &message)\n {\n     QMessageBox::critical(\n@@ -460,11 +462,13 @@ int GuiMain(int argc, char* argv[])\n     util::WinCmdLineArgs winArgs;\n     std::tie(argc, argv) = winArgs.get();\n #endif\n-    SetupEnvironment();\n-    util::ThreadSetInternalName(\"main\");\n \n     NodeContext node_context;\n-    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode(&node_context);\n+    int unused_exit_status;\n+    std::unique_ptr<interfaces::Init> init = interfaces::MakeNodeInit(node_context, argc, argv, unused_exit_status);\n+\n+    SetupEnvironment();\n+    util::ThreadSetInternalName(\"main\");\n \n     // Subscribe to global signals from core\n     boost::signals2::scoped_connection handler_message_box = ::uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n@@ -492,7 +496,6 @@ int GuiMain(int argc, char* argv[])\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n-    node_context.args = &gArgs;\n     SetupServerArgs(gArgs);\n     SetupUIArgs(gArgs);\n     std::string error;\n@@ -623,7 +626,7 @@ int GuiMain(int argc, char* argv[])\n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n-    app.setNode(*node);\n+    app.createNode(*init);\n \n     int rv = EXIT_SUCCESS;\n     try\n@@ -637,8 +640,6 @@ int GuiMain(int argc, char* argv[])\n #if defined(Q_OS_WIN)\n             WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely\u2026\").arg(PACKAGE_NAME), (HWND)app.getMainWinId());\n #endif\n-            app.exec();\n-            app.requestShutdown();\n             app.exec();\n             rv = app.getReturnValue();\n         } else {"
      },
      {
        "sha": "5678ca90d2617e1ea9fee8a8e59ee8c7db235673",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -27,6 +27,9 @@ class PlatformStyle;\n class SplashScreen;\n class WalletController;\n class WalletModel;\n+namespace interfaces {\n+class Init;\n+} // namespace interfaces\n \n \n /** Main Bitcoin application object */\n@@ -51,13 +54,13 @@ class BitcoinApplication: public QApplication\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n     void createSplashScreen(const NetworkStyle *networkStyle);\n+    /// Create or spawn node\n+    void createNode(interfaces::Init& init);\n     /// Basic initialization, before starting initialization/shutdown thread. Return true on success.\n     bool baseInitialize();\n \n     /// Request core initialization\n     void requestInitialize();\n-    /// Request core shutdown\n-    void requestShutdown();\n \n     /// Get process return value\n     int getReturnValue() const { return returnValue; }\n@@ -69,11 +72,11 @@ class BitcoinApplication: public QApplication\n     void setupPlatformStyle();\n \n     interfaces::Node& node() const { assert(m_node); return *m_node; }\n-    void setNode(interfaces::Node& node);\n \n public Q_SLOTS:\n     void initializeResult(bool success, interfaces::BlockAndHeaderTipInfo tip_info);\n-    void shutdownResult();\n+    /// Request core shutdown\n+    void requestShutdown();\n     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n     void handleRunawayException(const QString &message);\n \n@@ -103,7 +106,7 @@ public Q_SLOTS:\n     const PlatformStyle *platformStyle;\n     std::unique_ptr<QWidget> shutdownWindow;\n     SplashScreen* m_splash = nullptr;\n-    interfaces::Node* m_node = nullptr;\n+    std::unique_ptr<interfaces::Node> m_node;\n \n     void startThread();\n };"
      },
      {
        "sha": "4855ada51325fe223be247a0b2fff38e9ec2afb7",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BITCOINAMOUNTFIELD_H\n #define BITCOIN_QT_BITCOINAMOUNTFIELD_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QWidget>\n "
      },
      {
        "sha": "610637360bd5fd9af40c1260d838fe662e5b7435",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -107,7 +107,6 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n         walletFrame = new WalletFrame(_platformStyle, this);\n         connect(walletFrame, &WalletFrame::createWalletButtonClicked, [this] {\n             auto activity = new CreateWalletActivity(getWalletController(), this);\n-            connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n             activity->create();\n         });\n         connect(walletFrame, &WalletFrame::message, [this](const QString& title, const QString& message, unsigned int style) {\n@@ -171,7 +170,9 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n         frameBlocksLayout->addWidget(unitDisplayControl);\n         frameBlocksLayout->addStretch();\n         frameBlocksLayout->addWidget(labelWalletEncryptionIcon);\n+        labelWalletEncryptionIcon->hide();\n         frameBlocksLayout->addWidget(labelWalletHDStatusIcon);\n+        labelWalletHDStatusIcon->hide();\n     }\n     frameBlocksLayout->addWidget(labelProxyIcon);\n     frameBlocksLayout->addStretch();\n@@ -371,7 +372,7 @@ void BitcoinGUI::createActions()\n     m_mask_values_action->setStatusTip(tr(\"Mask the values in the Overview tab\"));\n     m_mask_values_action->setCheckable(true);\n \n-    connect(quitAction, &QAction::triggered, qApp, QApplication::quit);\n+    connect(quitAction, &QAction::triggered, this, &BitcoinGUI::quitRequested);\n     connect(aboutAction, &QAction::triggered, this, &BitcoinGUI::aboutClicked);\n     connect(aboutQtAction, &QAction::triggered, qApp, QApplication::aboutQt);\n     connect(optionsAction, &QAction::triggered, this, &BitcoinGUI::optionsClicked);\n@@ -416,7 +417,6 @@ void BitcoinGUI::createActions()\n                 connect(action, &QAction::triggered, [this, path] {\n                     auto activity = new OpenWalletActivity(m_wallet_controller, this);\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n-                    connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n                     activity->open(path);\n                 });\n             }\n@@ -431,7 +431,6 @@ void BitcoinGUI::createActions()\n         connect(m_create_wallet_action, &QAction::triggered, [this] {\n             auto activity = new CreateWalletActivity(m_wallet_controller, this);\n             connect(activity, &CreateWalletActivity::created, this, &BitcoinGUI::setCurrentWallet);\n-            connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n             activity->create();\n         });\n         connect(m_close_all_wallets_action, &QAction::triggered, [this] {\n@@ -662,9 +661,8 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n     GUIUtil::ExceptionSafeConnect(wallet_controller, &WalletController::walletAdded, this, &BitcoinGUI::addWallet);\n     connect(wallet_controller, &WalletController::walletRemoved, this, &BitcoinGUI::removeWallet);\n \n-    for (WalletModel* wallet_model : m_wallet_controller->getOpenWallets()) {\n-        addWallet(wallet_model);\n-    }\n+    auto activity = new LoadWalletsActivity(m_wallet_controller, this);\n+    activity->load();\n }\n \n WalletController* BitcoinGUI::getWalletController()\n@@ -676,8 +674,8 @@ void BitcoinGUI::addWallet(WalletModel* walletModel)\n {\n     if (!walletFrame) return;\n \n-    WalletView* wallet_view = new WalletView(platformStyle, walletFrame);\n-    if (!walletFrame->addWallet(walletModel, wallet_view)) return;\n+    WalletView* wallet_view = new WalletView(walletModel, platformStyle, walletFrame);\n+    if (!walletFrame->addView(wallet_view)) return;\n \n     rpcConsole->addWallet(walletModel);\n     if (m_wallet_selector->count() == 0) {\n@@ -848,8 +846,8 @@ void BitcoinGUI::aboutClicked()\n     if(!clientModel)\n         return;\n \n-    HelpMessageDialog dlg(this, true);\n-    dlg.exec();\n+    auto dlg = new HelpMessageDialog(this, /* about */ true);\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n void BitcoinGUI::showDebugWindow()\n@@ -990,10 +988,11 @@ void BitcoinGUI::openOptionsDialogWithTab(OptionsDialog::Tab tab)\n     if (!clientModel || !clientModel->getOptionsModel())\n         return;\n \n-    OptionsDialog dlg(this, enableWallet);\n-    dlg.setCurrentTab(tab);\n-    dlg.setModel(clientModel->getOptionsModel());\n-    dlg.exec();\n+    auto dlg = new OptionsDialog(this, enableWallet);\n+    connect(dlg, &OptionsDialog::quitOnReset, this, &BitcoinGUI::quitRequested);\n+    dlg->setCurrentTab(tab);\n+    dlg->setModel(clientModel->getOptionsModel());\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header, SynchronizationState sync_state)\n@@ -1216,7 +1215,7 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n             // close rpcConsole in case it was open to make some space for the shutdown window\n             rpcConsole->close();\n \n-            QApplication::quit();\n+            Q_EMIT quitRequested();\n         }\n         else\n         {\n@@ -1410,7 +1409,7 @@ void BitcoinGUI::detectShutdown()\n     {\n         if(rpcConsole)\n             rpcConsole->hide();\n-        qApp->quit();\n+        Q_EMIT quitRequested();\n     }\n }\n "
      },
      {
        "sha": "fa7ae4b87dd07ed87bfcb51e7bbdd854e953ac45",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -12,7 +12,7 @@\n #include <qt/guiutil.h>\n #include <qt/optionsdialog.h>\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QLabel>\n #include <QMainWindow>\n@@ -214,6 +214,7 @@ class BitcoinGUI : public QMainWindow\n     void openOptionsDialogWithTab(OptionsDialog::Tab tab);\n \n Q_SIGNALS:\n+    void quitRequested();\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n     /** Signal raised when RPC console shown */"
      },
      {
        "sha": "66d5eea7ac08f1f1844b2012a9c71498748c493d",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <qt/bitcoinunits.h>\n \n+#include <consensus/amount.h>\n+\n #include <QStringList>\n \n #include <cassert>"
      },
      {
        "sha": "e78a347bb12b2b6357cf8df27c33d9a2bb0a9034",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BITCOINUNITS_H\n #define BITCOIN_QT_BITCOINUNITS_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QAbstractListModel>\n #include <QString>"
      },
      {
        "sha": "e93fedad280d227db6661577152888186ede7d24",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -55,7 +55,7 @@ CoinControlDialog::CoinControlDialog(CCoinControl& coin_control, WalletModel* _m\n     contextMenu->addAction(tr(\"&Copy address\"), this, &CoinControlDialog::copyAddress);\n     contextMenu->addAction(tr(\"Copy &label\"), this, &CoinControlDialog::copyLabel);\n     contextMenu->addAction(tr(\"Copy &amount\"), this, &CoinControlDialog::copyAmount);\n-    copyTransactionHashAction = contextMenu->addAction(tr(\"Copy transaction &ID\"), this, &CoinControlDialog::copyTransactionHash);\n+    m_copy_transaction_outpoint_action = contextMenu->addAction(tr(\"Copy transaction &ID and output index\"), this, &CoinControlDialog::copyTransactionOutpoint);\n     contextMenu->addSeparator();\n     lockAction = contextMenu->addAction(tr(\"L&ock unspent\"), this, &CoinControlDialog::lockCoin);\n     unlockAction = contextMenu->addAction(tr(\"&Unlock unspent\"), this, &CoinControlDialog::unlockCoin);\n@@ -180,7 +180,7 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n         if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n         {\n-            copyTransactionHashAction->setEnabled(true);\n+            m_copy_transaction_outpoint_action->setEnabled(true);\n             if (model->wallet().isLockedCoin(COutPoint(uint256S(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), item->data(COLUMN_ADDRESS, VOutRole).toUInt())))\n             {\n                 lockAction->setEnabled(false);\n@@ -194,7 +194,7 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         }\n         else // this means click on parent node in tree mode -> disable all\n         {\n-            copyTransactionHashAction->setEnabled(false);\n+            m_copy_transaction_outpoint_action->setEnabled(false);\n             lockAction->setEnabled(false);\n             unlockAction->setEnabled(false);\n         }\n@@ -228,10 +228,14 @@ void CoinControlDialog::copyAddress()\n         GUIUtil::setClipboard(contextMenuItem->text(COLUMN_ADDRESS));\n }\n \n-// context menu action: copy transaction id\n-void CoinControlDialog::copyTransactionHash()\n+// context menu action: copy transaction id and vout index\n+void CoinControlDialog::copyTransactionOutpoint()\n {\n-    GUIUtil::setClipboard(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString());\n+    const QString address = contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString();\n+    const QString vout = contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toString();\n+    const QString outpoint = QString(\"%1:%2\").arg(address).arg(vout);\n+\n+    GUIUtil::setClipboard(outpoint);\n }\n \n // context menu action: lock coin\n@@ -241,7 +245,7 @@ void CoinControlDialog::lockCoin()\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n     COutPoint outpt(uint256S(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());\n-    model->wallet().lockCoin(outpt);\n+    model->wallet().lockCoin(outpt, /* write_to_db = */ true);\n     contextMenuItem->setDisabled(true);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n     updateLabelLocked();"
      },
      {
        "sha": "ec2619d1153fc20889801f48f0372387db19d44b",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_COINCONTROLDIALOG_H\n #define BITCOIN_QT_COINCONTROLDIALOG_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QAbstractButton>\n #include <QAction>\n@@ -63,7 +63,7 @@ class CoinControlDialog : public QDialog\n \n     QMenu *contextMenu;\n     QTreeWidgetItem *contextMenuItem;\n-    QAction *copyTransactionHashAction;\n+    QAction* m_copy_transaction_outpoint_action;\n     QAction *lockAction;\n     QAction *unlockAction;\n \n@@ -95,7 +95,7 @@ private Q_SLOTS:\n     void copyAmount();\n     void copyLabel();\n     void copyAddress();\n-    void copyTransactionHash();\n+    void copyTransactionOutpoint();\n     void lockCoin();\n     void unlockCoin();\n     void clipboardQuantity();"
      },
      {
        "sha": "1c221246169c3c9dfe5abc2c3218577a75cf040a",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -33,7 +33,7 @@\n           <string>Automatically start %1 after logging in to the system.</string>\n          </property>\n          <property name=\"text\">\n-          <string>&amp;Start %1 on system login</string>\n+          <string>Start %1 on system &amp;login</string>\n          </property>\n         </widget>\n        </item>\n@@ -104,6 +104,9 @@\n         <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Main\">\n          <item>\n           <widget class=\"QLabel\" name=\"databaseCacheLabel\">\n+           <property name=\"toolTip\">\n+            <string extracomment=\"Tooltip text for Options window setting that sets the size of the database cache. Explains the corresponding effects of increasing/decreasing this value.\">Maximum database cache size. A larger cache can contribute to faster sync, after which the benefit is less pronounced for most use cases. Lowering the cache size will reduce memory usage. Unused mempool memory is shared for this cache.</string>\n+           </property>\n            <property name=\"text\">\n             <string>Size of &amp;database cache</string>\n            </property>\n@@ -147,6 +150,9 @@\n         <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Main_VerifyLabel\">\n          <item>\n           <widget class=\"QLabel\" name=\"threadsScriptVerifLabel\">\n+           <property name=\"toolTip\">\n+            <string extracomment=\"Tooltip text for Options window setting that sets the number of script verification threads. Explains that negative values mean to leave these many cores free to the system.\">Set the number of script verification threads. Negative values correspond to the number of cores you want to leave free to the system.</string>\n+           </property>\n            <property name=\"text\">\n             <string>Number of script &amp;verification threads</string>\n            </property>\n@@ -173,13 +179,23 @@\n            <property name=\"sizeHint\" stdset=\"0\">\n             <size>\n              <width>40</width>\n-             <height>20</height>\n+             <height>40</height>\n             </size>\n            </property>\n           </spacer>\n          </item>\n         </layout>\n        </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"enableServer\">\n+         <property name=\"toolTip\">\n+          <string extracomment=\"Tooltip text for Options window setting that enables the RPC server.\">This allows you or a third party tool to communicate with the node through command-line and JSON-RPC commands.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string extracomment=\"An Options window setting to enable the RPC server.\">Enable RPC &amp;server</string>\n+         </property>\n+        </widget>\n+       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Main\">\n          <property name=\"orientation\">\n@@ -723,10 +739,10 @@\n          <item>\n           <widget class=\"QLabel\" name=\"thirdPartyTxUrlsLabel\">\n            <property name=\"toolTip\">\n-            <string>Third party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</string>\n+            <string>Third-party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</string>\n            </property>\n            <property name=\"text\">\n-            <string>&amp;Third party transaction URLs</string>\n+            <string>&amp;Third-party transaction URLs</string>\n            </property>\n            <property name=\"buddy\">\n             <cstring>thirdPartyTxUrls</cstring>\n@@ -736,7 +752,7 @@\n          <item>\n           <widget class=\"QLineEdit\" name=\"thirdPartyTxUrls\">\n            <property name=\"toolTip\">\n-            <string>Third party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</string>\n+            <string>Third-party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</string>\n            </property>\n            <property name=\"placeholderText\">\n             <string notr=\"true\">https://example.com/tx/%s</string>"
      },
      {
        "sha": "7b1384b485b7871e50021836a061a0c74e220a05",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -36,6 +36,7 @@\n #include <QClipboard>\n #include <QDateTime>\n #include <QDesktopServices>\n+#include <QDialog>\n #include <QDoubleValidator>\n #include <QFileDialog>\n #include <QFont>\n@@ -673,14 +674,26 @@ QString ConnectionTypeToQString(ConnectionType conn_type, bool prepend_direction\n {\n     QString prefix;\n     if (prepend_direction) {\n-        prefix = (conn_type == ConnectionType::INBOUND) ? QObject::tr(\"Inbound\") : QObject::tr(\"Outbound\") + \" \";\n+        prefix = (conn_type == ConnectionType::INBOUND) ?\n+                     /*: An inbound connection from a peer. An inbound connection\n+                         is a connection initiated by a peer. */\n+                     QObject::tr(\"Inbound\") :\n+                     /*: An outbound connection to a peer. An outbound connection\n+                         is a connection initiated by us. */\n+                     QObject::tr(\"Outbound\") + \" \";\n     }\n     switch (conn_type) {\n     case ConnectionType::INBOUND: return prefix;\n+    //: Peer connection type that relays all network information.\n     case ConnectionType::OUTBOUND_FULL_RELAY: return prefix + QObject::tr(\"Full Relay\");\n+    /*: Peer connection type that relays network information about\n+        blocks and not transactions or addresses. */\n     case ConnectionType::BLOCK_RELAY: return prefix + QObject::tr(\"Block Relay\");\n+    //: Peer connection type established manually through one of several methods.\n     case ConnectionType::MANUAL: return prefix + QObject::tr(\"Manual\");\n+    //: Short-lived peer connection type that tests the aliveness of known addresses.\n     case ConnectionType::FEELER: return prefix + QObject::tr(\"Feeler\");\n+    //: Short-lived peer connection type that solicits known addresses from a peer.\n     case ConnectionType::ADDR_FETCH: return prefix + QObject::tr(\"Address Fetch\");\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n@@ -958,4 +971,11 @@ void PrintSlotException(\n     PrintExceptionContinue(exception, description.c_str());\n }\n \n+void ShowModalDialogAndDeleteOnClose(QDialog* dialog)\n+{\n+    dialog->setAttribute(Qt::WA_DeleteOnClose);\n+    dialog->setWindowModality(Qt::ApplicationModal);\n+    dialog->show();\n+}\n+\n } // namespace GUIUtil"
      },
      {
        "sha": "6287f951923689b6ec053c9d5b382662fe2e41a4",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_GUIUTIL_H\n #define BITCOIN_QT_GUIUTIL_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <fs.h>\n #include <net.h>\n #include <netaddress.h>\n@@ -41,6 +41,7 @@ class QAbstractButton;\n class QAbstractItemView;\n class QAction;\n class QDateTime;\n+class QDialog;\n class QFont;\n class QKeySequence;\n class QLineEdit;\n@@ -417,6 +418,11 @@ namespace GUIUtil\n             type);\n     }\n \n+    /**\n+     * Shows a QDialog instance asynchronously, and deletes it on close.\n+     */\n+    void ShowModalDialogAndDeleteOnClose(QDialog* dialog);\n+\n } // namespace GUIUtil\n \n #endif // BITCOIN_QT_GUIUTIL_H"
      },
      {
        "sha": "24ae7ba73d3d56e5a3a1b1fdb2bbe22d88f57c52",
        "filename": "src/qt/initexecutor.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 22,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/initexecutor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/initexecutor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/initexecutor.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n #include <qt/initexecutor.h>\n \n #include <interfaces/node.h>\n+#include <qt/guiutil.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n \n@@ -18,7 +19,7 @@\n InitExecutor::InitExecutor(interfaces::Node& node)\n     : QObject(), m_node(node)\n {\n-    this->moveToThread(&m_thread);\n+    m_context.moveToThread(&m_thread);\n     m_thread.start();\n }\n \n@@ -38,29 +39,33 @@ void InitExecutor::handleRunawayException(const std::exception* e)\n \n void InitExecutor::initialize()\n {\n-    try {\n-        util::ThreadRename(\"qt-init\");\n-        qDebug() << __func__ << \": Running initialization in thread\";\n-        interfaces::BlockAndHeaderTipInfo tip_info;\n-        bool rv = m_node.appInitMain(&tip_info);\n-        Q_EMIT initializeResult(rv, tip_info);\n-    } catch (const std::exception& e) {\n-        handleRunawayException(&e);\n-    } catch (...) {\n-        handleRunawayException(nullptr);\n-    }\n+    GUIUtil::ObjectInvoke(&m_context, [this] {\n+        try {\n+            util::ThreadRename(\"qt-init\");\n+            qDebug() << \"Running initialization in thread\";\n+            interfaces::BlockAndHeaderTipInfo tip_info;\n+            bool rv = m_node.appInitMain(&tip_info);\n+            Q_EMIT initializeResult(rv, tip_info);\n+        } catch (const std::exception& e) {\n+            handleRunawayException(&e);\n+        } catch (...) {\n+            handleRunawayException(nullptr);\n+        }\n+    });\n }\n \n void InitExecutor::shutdown()\n {\n-    try {\n-        qDebug() << __func__ << \": Running Shutdown in thread\";\n-        m_node.appShutdown();\n-        qDebug() << __func__ << \": Shutdown finished\";\n-        Q_EMIT shutdownResult();\n-    } catch (const std::exception& e) {\n-        handleRunawayException(&e);\n-    } catch (...) {\n-        handleRunawayException(nullptr);\n-    }\n+    GUIUtil::ObjectInvoke(&m_context, [this] {\n+        try {\n+            qDebug() << \"Running Shutdown in thread\";\n+            m_node.appShutdown();\n+            qDebug() << \"Shutdown finished\";\n+            Q_EMIT shutdownResult();\n+        } catch (const std::exception& e) {\n+            handleRunawayException(&e);\n+        } catch (...) {\n+            handleRunawayException(nullptr);\n+        }\n+    });\n }"
      },
      {
        "sha": "410c44fa2d8d44ed0ac37aad7694a62759c7e68d",
        "filename": "src/qt/initexecutor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/initexecutor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/initexecutor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/initexecutor.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -40,6 +40,7 @@ public Q_SLOTS:\n     void handleRunawayException(const std::exception* e);\n \n     interfaces::Node& m_node;\n+    QObject m_context;\n     QThread m_thread;\n };\n "
      },
      {
        "sha": "4c78fba7526f51397735597b8199354100e65cb7",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -113,7 +113,7 @@ namespace {\n //! Return pruning size that will be used if automatic pruning is enabled.\n int GetPruneTargetGB()\n {\n-    int64_t prune_target_mib = gArgs.GetArg(\"-prune\", 0);\n+    int64_t prune_target_mib = gArgs.GetIntArg(\"-prune\", 0);\n     // >1 means automatic pruning is enabled by config, 1 means manual pruning, 0 means no pruning.\n     return prune_target_mib > 1 ? PruneMiBtoGB(prune_target_mib) : DEFAULT_PRUNE_TARGET_GB;\n }\n@@ -142,7 +142,7 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.GetArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n+    if (gArgs.GetIntArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }"
      },
      {
        "sha": "0cc2d61df613b8bf755a58dfd7e7768bfb7aec1d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -210,6 +210,7 @@ void OptionsDialog::setModel(OptionsModel *_model)\n     connect(ui->spendZeroConfChange, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n     /* Network */\n     connect(ui->allowIncoming, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n+    connect(ui->enableServer, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n     connect(ui->connectSocks, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n     connect(ui->connectSocksTor, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n     /* Display */\n@@ -246,6 +247,7 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);\n     mapper->addMapping(ui->mapPortNatpmp, OptionsModel::MapPortNatpmp);\n     mapper->addMapping(ui->allowIncoming, OptionsModel::Listen);\n+    mapper->addMapping(ui->enableServer, OptionsModel::Server);\n \n     mapper->addMapping(ui->connectSocks, OptionsModel::ProxyUse);\n     mapper->addMapping(ui->proxyIp, OptionsModel::ProxyIP);\n@@ -290,16 +292,29 @@ void OptionsDialog::on_resetButton_clicked()\n \n         /* reset all options and close GUI */\n         model->Reset();\n-        QApplication::quit();\n+        close();\n+        Q_EMIT quitOnReset();\n     }\n }\n \n void OptionsDialog::on_openBitcoinConfButton_clicked()\n {\n-    /* explain the purpose of the config file */\n-    QMessageBox::information(this, tr(\"Configuration options\"),\n-        tr(\"The configuration file is used to specify advanced user options which override GUI settings. \"\n-           \"Additionally, any command-line options will override this configuration file.\"));\n+    QMessageBox config_msgbox(this);\n+    config_msgbox.setIcon(QMessageBox::Information);\n+    //: Window title text of pop-up box that allows opening up of configuration file.\n+    config_msgbox.setWindowTitle(tr(\"Configuration options\"));\n+    /*: Explanatory text about the priority order of instructions considered by client.\n+        The order from high to low being: command-line, configuration file, GUI settings. */\n+    config_msgbox.setText(tr(\"The configuration file is used to specify advanced user options which override GUI settings. \"\n+                             \"Additionally, any command-line options will override this configuration file.\"));\n+\n+    QPushButton* open_button = config_msgbox.addButton(tr(\"Continue\"), QMessageBox::ActionRole);\n+    config_msgbox.addButton(tr(\"Cancel\"), QMessageBox::RejectRole);\n+    open_button->setDefault(true);\n+\n+    config_msgbox.exec();\n+\n+    if (config_msgbox.clickedButton() != open_button) return;\n \n     /* show an error if there was some problem opening the file */\n     if (!GUIUtil::openBitcoinConf())"
      },
      {
        "sha": "f14aec3449bac0866f96c7af3eb519179c7bb946",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -68,6 +68,7 @@ private Q_SLOTS:\n \n Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, uint16_t nProxyPort);\n+    void quitOnReset();\n \n private:\n     Ui::OptionsDialog *ui;"
      },
      {
        "sha": "9e2f38f7ec6310ba1b4e56071abeac361605f2cf",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -149,6 +149,13 @@ void OptionsModel::Init(bool resetSettings)\n     if (!gArgs.SoftSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n         addOverriddenOption(\"-listen\");\n \n+    if (!settings.contains(\"server\")) {\n+        settings.setValue(\"server\", false);\n+    }\n+    if (!gArgs.SoftSetBoolArg(\"-server\", settings.value(\"server\").toBool())) {\n+        addOverriddenOption(\"-server\");\n+    }\n+\n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n     if (!settings.contains(\"addrProxy\"))\n@@ -363,6 +370,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return settings.value(\"nThreadsScriptVerif\");\n         case Listen:\n             return settings.value(\"fListen\");\n+        case Server:\n+            return settings.value(\"server\");\n         default:\n             return QVariant();\n         }\n@@ -528,6 +537,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n                 setRestartRequired(true);\n             }\n             break;\n+        case Server:\n+            if (settings.value(\"server\") != value) {\n+                settings.setValue(\"server\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n         default:\n             break;\n         }"
      },
      {
        "sha": "8f1513e48d37a69fa6d902fb9b5e57eb6f87a73a",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_QT_OPTIONSMODEL_H\n #define BITCOIN_QT_OPTIONSMODEL_H\n \n-#include <amount.h>\n #include <cstdint>\n #include <qt/guiconstants.h>\n \n@@ -69,6 +68,7 @@ class OptionsModel : public QAbstractListModel\n         ExternalSignerPath,     // QString\n         SpendZeroConfChange,    // bool\n         Listen,                 // bool\n+        Server,                 // bool\n         OptionIDRowCount,\n     };\n "
      },
      {
        "sha": "34d56e5506a359fd2cdebf2cf0d7932cda5d39a8",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -71,6 +71,9 @@ void PSBTOperationsDialog::signTransaction()\n {\n     bool complete;\n     size_t n_signed;\n+\n+    WalletModel::UnlockContext ctx(m_wallet_model->requestUnlock());\n+\n     TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed, m_transaction_data, complete);\n \n     if (err != TransactionError::OK) {\n@@ -81,7 +84,9 @@ void PSBTOperationsDialog::signTransaction()\n \n     updateTransactionDisplay();\n \n-    if (!complete && n_signed < 1) {\n+    if (!complete && !ctx.isValid()) {\n+        showStatus(tr(\"Cannot sign inputs while wallet is locked.\"), StatusLevel::WARN);\n+    } else if (!complete && n_signed < 1) {\n         showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARN);\n     } else if (!complete) {\n         showStatus(tr(\"Signed %1 inputs, but more signatures are still required.\").arg(n_signed),"
      },
      {
        "sha": "0799e01aac1a0a0d9d370d1423cc1f45538d2e22",
        "filename": "src/qt/qrimagewidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/qrimagewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/qrimagewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrimagewidget.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -119,7 +119,7 @@ void QRImageWidget::saveImage()\n     QString fn = GUIUtil::getSaveFileName(\n         this, tr(\"Save QR Code\"), QString(),\n         /*: Expanded name of the PNG file format.\n-            See https://en.wikipedia.org/wiki/Portable_Network_Graphics */\n+            See: https://en.wikipedia.org/wiki/Portable_Network_Graphics. */\n         tr(\"PNG Image\") + QLatin1String(\" (*.png)\"), nullptr);\n     if (!fn.isEmpty())\n     {"
      },
      {
        "sha": "3c0dc5aa40bdc0076ba52709e52f447f694127d0",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -250,7 +250,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                                     for(char argch: curarg)\n                                         if (!IsDigit(argch))\n                                             throw std::runtime_error(\"Invalid result query\");\n-                                    subelement = lastResult[atoi(curarg.c_str())];\n+                                    subelement = lastResult[LocaleIndependentAtoi<int>(curarg)];\n                                 }\n                                 else if (lastResult.isObject())\n                                     subelement = find_value(lastResult, curarg);\n@@ -495,14 +495,28 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n \n     constexpr QChar nonbreaking_hyphen(8209);\n     const std::vector<QString> CONNECTION_TYPE_DOC{\n+        //: Explanatory text for an inbound peer connection.\n         tr(\"Inbound: initiated by peer\"),\n+        /*: Explanatory text for an outbound peer connection that\n+            relays all network information. This is the default behavior for\n+            outbound connections. */\n         tr(\"Outbound Full Relay: default\"),\n+        /*: Explanatory text for an outbound peer connection that relays\n+            network information about blocks and not transactions or addresses. */\n         tr(\"Outbound Block Relay: does not relay transactions or addresses\"),\n+        /*: Explanatory text for an outbound peer connection that was\n+            established manually through one of several methods. The numbered\n+            arguments are stand-ins for the methods available to establish\n+            manual connections. */\n         tr(\"Outbound Manual: added using RPC %1 or %2/%3 configuration options\")\n             .arg(\"addnode\")\n             .arg(QString(nonbreaking_hyphen) + \"addnode\")\n             .arg(QString(nonbreaking_hyphen) + \"connect\"),\n+        /*: Explanatory text for a short-lived outbound peer connection that\n+            is used to test the aliveness of known addresses. */\n         tr(\"Outbound Feeler: short-lived, for testing addresses\"),\n+        /*: Explanatory text for a short-lived outbound peer connection that is used\n+            to request addresses from a peer. */\n         tr(\"Outbound Address Fetch: short-lived, for soliciting addresses\")};\n     const QString list{\"<ul><li>\" + Join(CONNECTION_TYPE_DOC, QString(\"</li><li>\")) + \"</li></ul>\"};\n     ui->peerConnectionTypeLabel->setToolTip(ui->peerConnectionTypeLabel->toolTip().arg(list));\n@@ -680,6 +694,11 @@ void RPCConsole::setClientModel(ClientModel *model, int bestblock_height, int64_\n \n         // create peer table context menu\n         peersTableContextMenu = new QMenu(this);\n+        //: Context menu action to copy the address of a peer.\n+        peersTableContextMenu->addAction(tr(\"&Copy address\"), [this] {\n+            GUIUtil::copyEntryData(ui->peerWidget, PeerTableModel::Address, Qt::DisplayRole);\n+        });\n+        peersTableContextMenu->addSeparator();\n         peersTableContextMenu->addAction(tr(\"&Disconnect\"), this, &RPCConsole::disconnectSelectedNode);\n         peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 &hour\"), [this] { banSelectedNode(60 * 60); });\n         peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 d&ay\"), [this] { banSelectedNode(60 * 60 * 24); });\n@@ -708,7 +727,7 @@ void RPCConsole::setClientModel(ClientModel *model, int bestblock_height, int64_\n         banTableContextMenu = new QMenu(this);\n         /*: Context menu action to copy the IP/Netmask of a banned peer.\n             IP/Netmask is the combination of a peer's IP address and its Netmask.\n-            For IP address see: https://en.wikipedia.org/wiki/IP_address */\n+            For IP address, see: https://en.wikipedia.org/wiki/IP_address. */\n         banTableContextMenu->addAction(tr(\"&Copy IP/Netmask\"), [this] {\n             GUIUtil::copyEntryData(ui->banlistWidget, BanTableModel::Address, Qt::DisplayRole);\n         });"
      },
      {
        "sha": "271839294067a7f6156a6d95d2ee1c9c88a10968",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -200,7 +200,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         ui->optInRBF->setCheckState(Qt::Checked);\n \n         if (model->wallet().hasExternalSigner()) {\n-            //: \"device\" usually means a hardware wallet\n+            //: \"device\" usually means a hardware wallet.\n             ui->sendButton->setText(tr(\"Sign on device\"));\n             if (gArgs.GetArg(\"-signer\", \"\") != \"\") {\n                 ui->sendButton->setEnabled(true);\n@@ -399,9 +399,10 @@ void SendCoinsDialog::sendButtonClicked([[maybe_unused]] bool checked)\n \n     const QString confirmation = model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n     const QString confirmButtonText = model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner() ? tr(\"Create Unsigned\") : tr(\"Sign and send\");\n-    SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n-    confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n+    auto confirmationDialog = new SendConfirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n+    confirmationDialog->setAttribute(Qt::WA_DeleteOnClose);\n+    // TODO: Replace QDialog::exec() with safer QDialog::show().\n+    const auto retval = static_cast<QMessageBox::StandardButton>(confirmationDialog->exec());\n \n     if(retval != QMessageBox::Yes)\n     {\n@@ -914,9 +915,9 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n // Coin Control: button inputs -> show actual coin control dialog\n void SendCoinsDialog::coinControlButtonClicked()\n {\n-    CoinControlDialog dlg(*m_coin_control, model, platformStyle);\n-    dlg.exec();\n-    coinControlUpdateLabels();\n+    auto dlg = new CoinControlDialog(*m_coin_control, model, platformStyle);\n+    connect(dlg, &QDialog::finished, this, &SendCoinsDialog::coinControlUpdateLabels);\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n // Coin Control: checkbox custom change address"
      },
      {
        "sha": "c23afcab24601fb7a2b4e70474d1b6657066557b",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,7 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <serialize.h>\n \n #include <string>"
      },
      {
        "sha": "0de781661ac57e71ab6fa8d0f465287b52a1db59",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -60,6 +60,8 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook(interfaces::Node& node)\n {\n     TestChain100Setup test;\n+    auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n+    test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n@@ -112,7 +114,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     WalletContext& context = *node.walletClient().context();\n     AddWallet(context, wallet);\n     WalletModel walletModel(interfaces::MakeWallet(context, wallet), clientModel, platformStyle.get());\n-    RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n+    RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "55d00bb37e13d05169d0bf9fcf3014e681e0ed8b",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,9 +6,9 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <qt/bitcoin.h>\n-#include <qt/initexecutor.h>\n #include <qt/test/apptests.h>\n #include <qt/test/rpcnestedtests.h>\n #include <qt/test/uritests.h>\n@@ -53,7 +53,8 @@ int main(int argc, char* argv[])\n     }\n \n     NodeContext node_context;\n-    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode(&node_context);\n+    int unused_exit_status;\n+    std::unique_ptr<interfaces::Init> init = interfaces::MakeNodeInit(node_context, argc, argv, unused_exit_status);\n     gArgs.ForceSetArg(\"-listen\", \"0\");\n     gArgs.ForceSetArg(\"-listenonion\", \"0\");\n     gArgs.ForceSetArg(\"-discover\", \"0\");\n@@ -76,10 +77,9 @@ int main(int argc, char* argv[])\n     // Don't remove this, it's needed to access\n     // QApplication:: and QCoreApplication:: in the tests\n     BitcoinApplication app;\n-    app.setNode(*node);\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n+    app.createNode(*init);\n \n-    app.node().context()->args = &gArgs;     // Make gArgs available in the NodeContext\n     AppTests app_tests(app);\n     if (QTest::qExec(&app_tests) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "62b135d3f17283bf506b0ad5dfb862f249c81e71",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -138,6 +138,8 @@ void TestGUI(interfaces::Node& node)\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n+    auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n+    test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n@@ -167,7 +169,7 @@ void TestGUI(interfaces::Node& node)\n     WalletContext& context = *node.walletClient().context();\n     AddWallet(context, wallet);\n     WalletModel walletModel(interfaces::MakeWallet(context, wallet), clientModel, platformStyle.get());\n-    RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n+    RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n "
      },
      {
        "sha": "270b8ef78c0a2ec11cd5e2c26ad3574d9b3afb76",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONFILTERPROXY_H\n #define BITCOIN_QT_TRANSACTIONFILTERPROXY_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QDateTime>\n #include <QSortFilterProxyModel>"
      },
      {
        "sha": "fb88ca424fec4474b73fab464939e09fdafcc936",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONRECORD_H\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <uint256.h>\n \n #include <QList>"
      },
      {
        "sha": "653f3dda6d7cef0eed54a65120df8ef4c0dffd96",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -222,17 +222,21 @@ void TransactionView::setModel(WalletModel *_model)\n         {\n             // Add third party transaction URLs to context menu\n             QStringList listUrls = GUIUtil::SplitSkipEmptyParts(_model->getOptionsModel()->getThirdPartyTxUrls(), \"|\");\n+            bool actions_created = false;\n             for (int i = 0; i < listUrls.size(); ++i)\n             {\n                 QString url = listUrls[i].trimmed();\n                 QString host = QUrl(url, QUrl::StrictMode).host();\n                 if (!host.isEmpty())\n                 {\n-                    QAction *thirdPartyTxUrlAction = new QAction(host, this); // use host as menu item label\n-                    if (i == 0)\n+                    if (!actions_created) {\n                         contextMenu->addSeparator();\n-                    contextMenu->addAction(thirdPartyTxUrlAction);\n-                    connect(thirdPartyTxUrlAction, &QAction::triggered, [this, url] { openThirdPartyTxUrl(url); });\n+                        actions_created = true;\n+                    }\n+                    /*: Transactions table context menu action to show the\n+                        selected transaction in a third-party block explorer.\n+                        %1 is a stand-in argument for the URL of the explorer. */\n+                    contextMenu->addAction(tr(\"Show in %1\").arg(host), [this, url] { openThirdPartyTxUrl(url); });\n                 }\n             }\n         }\n@@ -353,7 +357,7 @@ void TransactionView::exportClicked()\n     QString filename = GUIUtil::getSaveFileName(this,\n         tr(\"Export Transaction History\"), QString(),\n         /*: Expanded name of the CSV file format.\n-            See https://en.wikipedia.org/wiki/Comma-separated_values */\n+            See: https://en.wikipedia.org/wiki/Comma-separated_values. */\n         tr(\"Comma separated file\") + QLatin1String(\" (*.csv)\"), nullptr);\n \n     if (filename.isNull())\n@@ -500,22 +504,22 @@ void TransactionView::editLabel()\n             // Determine type of address, launch appropriate editor dialog type\n             QString type = modelIdx.data(AddressTableModel::TypeRole).toString();\n \n-            EditAddressDialog dlg(\n+            auto dlg = new EditAddressDialog(\n                 type == AddressTableModel::Receive\n                 ? EditAddressDialog::EditReceivingAddress\n                 : EditAddressDialog::EditSendingAddress, this);\n-            dlg.setModel(addressBook);\n-            dlg.loadRow(idx);\n-            dlg.exec();\n+            dlg->setModel(addressBook);\n+            dlg->loadRow(idx);\n+            GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n         }\n         else\n         {\n             // Add sending address\n-            EditAddressDialog dlg(EditAddressDialog::NewSendingAddress,\n+            auto dlg = new EditAddressDialog(EditAddressDialog::NewSendingAddress,\n                 this);\n-            dlg.setModel(addressBook);\n-            dlg.setAddress(address);\n-            dlg.exec();\n+            dlg->setModel(addressBook);\n+            dlg->setAddress(address);\n+            GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n         }\n     }\n }"
      },
      {
        "sha": "4c74bcd48074e2b37fd86494b4fe0f1124097b92",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 35,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -41,10 +41,6 @@ WalletController::WalletController(ClientModel& client_model, const PlatformStyl\n         getOrCreateWallet(std::move(wallet));\n     });\n \n-    for (std::unique_ptr<interfaces::Wallet>& wallet : m_node.walletClient().getWallets()) {\n-        getOrCreateWallet(std::move(wallet));\n-    }\n-\n     m_activity_worker->moveToThread(m_activity_thread);\n     m_activity_thread->start();\n     QTimer::singleShot(0, m_activity_worker, []() {\n@@ -61,12 +57,6 @@ WalletController::~WalletController()\n     delete m_activity_worker;\n }\n \n-std::vector<WalletModel*> WalletController::getOpenWallets() const\n-{\n-    QMutexLocker locker(&m_mutex);\n-    return m_wallets;\n-}\n-\n std::map<std::string, bool> WalletController::listWalletDir() const\n {\n     QMutexLocker locker(&m_mutex);\n@@ -191,33 +181,23 @@ WalletControllerActivity::WalletControllerActivity(WalletController* wallet_cont\n     , m_wallet_controller(wallet_controller)\n     , m_parent_widget(parent_widget)\n {\n-}\n-\n-WalletControllerActivity::~WalletControllerActivity()\n-{\n-    delete m_progress_dialog;\n+    connect(this, &WalletControllerActivity::finished, this, &QObject::deleteLater);\n }\n \n void WalletControllerActivity::showProgressDialog(const QString& label_text)\n {\n-    assert(!m_progress_dialog);\n-    m_progress_dialog = new QProgressDialog(m_parent_widget);\n-\n-    m_progress_dialog->setLabelText(label_text);\n-    m_progress_dialog->setRange(0, 0);\n-    m_progress_dialog->setCancelButton(nullptr);\n-    m_progress_dialog->setWindowModality(Qt::ApplicationModal);\n-    GUIUtil::PolishProgressDialog(m_progress_dialog);\n+    auto progress_dialog = new QProgressDialog(m_parent_widget);\n+    progress_dialog->setAttribute(Qt::WA_DeleteOnClose);\n+    connect(this, &WalletControllerActivity::finished, progress_dialog, &QWidget::close);\n+\n+    progress_dialog->setLabelText(label_text);\n+    progress_dialog->setRange(0, 0);\n+    progress_dialog->setCancelButton(nullptr);\n+    progress_dialog->setWindowModality(Qt::ApplicationModal);\n+    GUIUtil::PolishProgressDialog(progress_dialog);\n     // The setValue call forces QProgressDialog to start the internal duration estimation.\n     // See details in https://bugreports.qt.io/browse/QTBUG-47042.\n-    m_progress_dialog->setValue(0);\n-}\n-\n-void WalletControllerActivity::destroyProgressDialog()\n-{\n-    assert(m_progress_dialog);\n-    delete m_progress_dialog;\n-    m_progress_dialog = nullptr;\n+    progress_dialog->setValue(0);\n }\n \n CreateWalletActivity::CreateWalletActivity(WalletController* wallet_controller, QWidget* parent_widget)\n@@ -279,8 +259,6 @@ void CreateWalletActivity::createWallet()\n \n void CreateWalletActivity::finish()\n {\n-    destroyProgressDialog();\n-\n     if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n@@ -329,8 +307,6 @@ OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, QWid\n \n void OpenWalletActivity::finish()\n {\n-    destroyProgressDialog();\n-\n     if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n@@ -356,3 +332,21 @@ void OpenWalletActivity::open(const std::string& path)\n         QTimer::singleShot(0, this, &OpenWalletActivity::finish);\n     });\n }\n+\n+LoadWalletsActivity::LoadWalletsActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : WalletControllerActivity(wallet_controller, parent_widget)\n+{\n+}\n+\n+void LoadWalletsActivity::load()\n+{\n+    showProgressDialog(tr(\"Loading wallets\u2026\"));\n+\n+    QTimer::singleShot(0, worker(), [this] {\n+        for (auto& wallet : node().walletClient().getWallets()) {\n+            m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+        }\n+\n+        QTimer::singleShot(0, this, [this] { Q_EMIT finished(); });\n+    });\n+}"
      },
      {
        "sha": "f97a7a1e8487d2991d7394fbf9c2a99410200b11",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -52,9 +52,6 @@ class WalletController : public QObject\n     WalletController(ClientModel& client_model, const PlatformStyle* platform_style, QObject* parent);\n     ~WalletController();\n \n-    //! Returns wallet models currently open.\n-    std::vector<WalletModel*> getOpenWallets() const;\n-\n     WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n \n     //! Returns all wallet names in the wallet dir mapped to whether the wallet\n@@ -90,7 +87,7 @@ class WalletControllerActivity : public QObject\n \n public:\n     WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget);\n-    virtual ~WalletControllerActivity();\n+    virtual ~WalletControllerActivity() = default;\n \n Q_SIGNALS:\n     void finished();\n@@ -100,11 +97,9 @@ class WalletControllerActivity : public QObject\n     QObject* worker() const { return m_wallet_controller->m_activity_worker; }\n \n     void showProgressDialog(const QString& label_text);\n-    void destroyProgressDialog();\n \n     WalletController* const m_wallet_controller;\n     QWidget* const m_parent_widget;\n-    QProgressDialog* m_progress_dialog{nullptr};\n     WalletModel* m_wallet_model{nullptr};\n     bilingual_str m_error_message;\n     std::vector<bilingual_str> m_warning_message;\n@@ -150,4 +145,14 @@ class OpenWalletActivity : public WalletControllerActivity\n     void finish();\n };\n \n+class LoadWalletsActivity : public WalletControllerActivity\n+{\n+    Q_OBJECT\n+\n+public:\n+    LoadWalletsActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+\n+    void load();\n+};\n+\n #endif // BITCOIN_QT_WALLETCONTROLLER_H"
      },
      {
        "sha": "4ff92bf82cd003c3ba030f80444a4b27e1ffd2ce",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -11,6 +11,7 @@\n #include <qt/psbtoperationsdialog.h>\n #include <qt/walletmodel.h>\n #include <qt/walletview.h>\n+#include <util/system.h>\n \n #include <cassert>\n \n@@ -64,14 +65,13 @@ void WalletFrame::setClientModel(ClientModel *_clientModel)\n     }\n }\n \n-bool WalletFrame::addWallet(WalletModel* walletModel, WalletView* walletView)\n+bool WalletFrame::addView(WalletView* walletView)\n {\n-    if (!clientModel || !walletModel) return false;\n+    if (!clientModel) return false;\n \n-    if (mapWalletViews.count(walletModel) > 0) return false;\n+    if (mapWalletViews.count(walletView->getWalletModel()) > 0) return false;\n \n     walletView->setClientModel(clientModel);\n-    walletView->setWalletModel(walletModel);\n     walletView->showOutOfSyncWarning(bOutOfSync);\n \n     WalletView* current_wallet_view = currentWalletView();\n@@ -82,7 +82,7 @@ bool WalletFrame::addWallet(WalletModel* walletModel, WalletView* walletView)\n     }\n \n     walletStack->addWidget(walletView);\n-    mapWalletViews[walletModel] = walletView;\n+    mapWalletViews[walletView->getWalletModel()] = walletView;\n \n     return true;\n }\n@@ -221,10 +221,9 @@ void WalletFrame::gotoLoadPSBT(bool from_clipboard)\n         return;\n     }\n \n-    PSBTOperationsDialog* dlg = new PSBTOperationsDialog(this, currentWalletModel(), clientModel);\n+    auto dlg = new PSBTOperationsDialog(this, currentWalletModel(), clientModel);\n     dlg->openWithPSBT(psbtx);\n-    dlg->setAttribute(Qt::WA_DeleteOnClose);\n-    dlg->exec();\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n void WalletFrame::encryptWallet()"
      },
      {
        "sha": "cfca5c4c5c9f4e3bf273346af3520591cbbff0c9",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -35,7 +35,7 @@ class WalletFrame : public QFrame\n \n     void setClientModel(ClientModel *clientModel);\n \n-    bool addWallet(WalletModel* walletModel, WalletView* walletView);\n+    bool addView(WalletView* walletView);\n     void setCurrentWallet(WalletModel* wallet_model);\n     void removeWallet(WalletModel* wallet_model);\n     void removeAllWallets();"
      },
      {
        "sha": "052453cf65de9acfb3867aeb2746b064563f8c05",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -506,9 +506,10 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n         questionString.append(tr(\"Warning: This may pay the additional fee by reducing change outputs or adding inputs, when necessary. It may add a new change output if one does not already exist. These changes may potentially leak privacy.\"));\n     }\n \n-    SendConfirmationDialog confirmationDialog(tr(\"Confirm fee bump\"), questionString);\n-    confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n+    auto confirmationDialog = new SendConfirmationDialog(tr(\"Confirm fee bump\"), questionString);\n+    confirmationDialog->setAttribute(Qt::WA_DeleteOnClose);\n+    // TODO: Replace QDialog::exec() with safer QDialog::show().\n+    const auto retval = static_cast<QMessageBox::StandardButton>(confirmationDialog->exec());\n \n     // cancel sign&broadcast if user doesn't want to bump the fee\n     if (retval != QMessageBox::Yes) {"
      },
      {
        "sha": "0bae4bade366451b078e6fd8544ae894bc9e3ddc",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,7 +8,7 @@\n #include <primitives/transaction.h>\n #include <qt/sendcoinsrecipient.h>\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QObject>\n "
      },
      {
        "sha": "7813b89e41ae348fc71267724aca930ce1c10109",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 61,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -30,19 +30,24 @@\n #include <QPushButton>\n #include <QVBoxLayout>\n \n-WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n-    QStackedWidget(parent),\n-    clientModel(nullptr),\n-    walletModel(nullptr),\n-    platformStyle(_platformStyle)\n+WalletView::WalletView(WalletModel* wallet_model, const PlatformStyle* _platformStyle, QWidget* parent)\n+    : QStackedWidget(parent),\n+      clientModel(nullptr),\n+      walletModel(wallet_model),\n+      platformStyle(_platformStyle)\n {\n+    assert(walletModel);\n+\n     // Create tabs\n     overviewPage = new OverviewPage(platformStyle);\n+    overviewPage->setWalletModel(walletModel);\n \n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n     QHBoxLayout *hbox_buttons = new QHBoxLayout();\n     transactionView = new TransactionView(platformStyle, this);\n+    transactionView->setModel(walletModel);\n+\n     vbox->addWidget(transactionView);\n     QPushButton *exportButton = new QPushButton(tr(\"&Export\"), this);\n     exportButton->setToolTip(tr(\"Export the data in the current tab to a file\"));\n@@ -55,10 +60,16 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     transactionsPage->setLayout(vbox);\n \n     receiveCoinsPage = new ReceiveCoinsDialog(platformStyle);\n+    receiveCoinsPage->setModel(walletModel);\n+\n     sendCoinsPage = new SendCoinsDialog(platformStyle);\n+    sendCoinsPage->setModel(walletModel);\n \n     usedSendingAddressesPage = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n+    usedSendingAddressesPage->setModel(walletModel->getAddressTableModel());\n+\n     usedReceivingAddressesPage = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n+    usedReceivingAddressesPage->setModel(walletModel->getAddressTableModel());\n \n     addWidget(overviewPage);\n     addWidget(transactionsPage);\n@@ -84,6 +95,21 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     connect(transactionView, &TransactionView::message, this, &WalletView::message);\n \n     connect(this, &WalletView::setPrivacy, overviewPage, &OverviewPage::setPrivacy);\n+\n+    // Receive and pass through messages from wallet model\n+    connect(walletModel, &WalletModel::message, this, &WalletView::message);\n+\n+    // Handle changes in encryption status\n+    connect(walletModel, &WalletModel::encryptionStatusChanged, this, &WalletView::encryptionStatusChanged);\n+\n+    // Balloon pop-up for new transaction\n+    connect(walletModel->getTransactionTableModel(), &TransactionTableModel::rowsInserted, this, &WalletView::processNewTransaction);\n+\n+    // Ask for passphrase if needed\n+    connect(walletModel, &WalletModel::requireUnlock, this, &WalletView::unlockWallet);\n+\n+    // Show progress dialog\n+    connect(walletModel, &WalletModel::showProgress, this, &WalletView::showProgress);\n }\n \n WalletView::~WalletView()\n@@ -96,45 +122,15 @@ void WalletView::setClientModel(ClientModel *_clientModel)\n \n     overviewPage->setClientModel(_clientModel);\n     sendCoinsPage->setClientModel(_clientModel);\n-    if (walletModel) walletModel->setClientModel(_clientModel);\n-}\n-\n-void WalletView::setWalletModel(WalletModel *_walletModel)\n-{\n-    this->walletModel = _walletModel;\n-\n-    // Put transaction list in tabs\n-    transactionView->setModel(_walletModel);\n-    overviewPage->setWalletModel(_walletModel);\n-    receiveCoinsPage->setModel(_walletModel);\n-    sendCoinsPage->setModel(_walletModel);\n-    usedReceivingAddressesPage->setModel(_walletModel ? _walletModel->getAddressTableModel() : nullptr);\n-    usedSendingAddressesPage->setModel(_walletModel ? _walletModel->getAddressTableModel() : nullptr);\n-\n-    if (_walletModel)\n-    {\n-        // Receive and pass through messages from wallet model\n-        connect(_walletModel, &WalletModel::message, this, &WalletView::message);\n-\n-        // Handle changes in encryption status\n-        connect(_walletModel, &WalletModel::encryptionStatusChanged, this, &WalletView::encryptionStatusChanged);\n-\n-        // Balloon pop-up for new transaction\n-        connect(_walletModel->getTransactionTableModel(), &TransactionTableModel::rowsInserted, this, &WalletView::processNewTransaction);\n-\n-        // Ask for passphrase if needed\n-        connect(_walletModel, &WalletModel::requireUnlock, this, &WalletView::unlockWallet);\n-\n-        // Show progress dialog\n-        connect(_walletModel, &WalletModel::showProgress, this, &WalletView::showProgress);\n-    }\n+    walletModel->setClientModel(_clientModel);\n }\n \n void WalletView::processNewTransaction(const QModelIndex& parent, int start, int /*end*/)\n {\n     // Prevent balloon-spam when initial block download is in progress\n-    if (!walletModel || !clientModel || clientModel->node().isInitialBlockDownload())\n+    if (!clientModel || clientModel->node().isInitialBlockDownload()) {\n         return;\n+    }\n \n     TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n     if (!ttm || ttm->processingQueuedTransactions())\n@@ -209,13 +205,10 @@ void WalletView::showOutOfSyncWarning(bool fShow)\n \n void WalletView::encryptWallet()\n {\n-    if(!walletModel)\n-        return;\n-    AskPassphraseDialog dlg(AskPassphraseDialog::Encrypt, this);\n-    dlg.setModel(walletModel);\n-    dlg.exec();\n-\n-    Q_EMIT encryptionStatusChanged();\n+    auto dlg = new AskPassphraseDialog(AskPassphraseDialog::Encrypt, this);\n+    dlg->setModel(walletModel);\n+    connect(dlg, &QDialog::finished, this, &WalletView::encryptionStatusChanged);\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n void WalletView::backupWallet()\n@@ -240,37 +233,28 @@ void WalletView::backupWallet()\n \n void WalletView::changePassphrase()\n {\n-    AskPassphraseDialog dlg(AskPassphraseDialog::ChangePass, this);\n-    dlg.setModel(walletModel);\n-    dlg.exec();\n+    auto dlg = new AskPassphraseDialog(AskPassphraseDialog::ChangePass, this);\n+    dlg->setModel(walletModel);\n+    GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n }\n \n void WalletView::unlockWallet()\n {\n-    if(!walletModel)\n-        return;\n     // Unlock wallet when requested by wallet model\n-    if (walletModel->getEncryptionStatus() == WalletModel::Locked)\n-    {\n-        AskPassphraseDialog dlg(AskPassphraseDialog::Unlock, this);\n-        dlg.setModel(walletModel);\n-        dlg.exec();\n+    if (walletModel->getEncryptionStatus() == WalletModel::Locked) {\n+        auto dlg = new AskPassphraseDialog(AskPassphraseDialog::Unlock, this);\n+        dlg->setModel(walletModel);\n+        GUIUtil::ShowModalDialogAndDeleteOnClose(dlg);\n     }\n }\n \n void WalletView::usedSendingAddresses()\n {\n-    if(!walletModel)\n-        return;\n-\n     GUIUtil::bringToFront(usedSendingAddressesPage);\n }\n \n void WalletView::usedReceivingAddresses()\n {\n-    if(!walletModel)\n-        return;\n-\n     GUIUtil::bringToFront(usedReceivingAddressesPage);\n }\n "
      },
      {
        "sha": "86a835c48437eea5a81822f2e9bc32790e69706c",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETVIEW_H\n #define BITCOIN_QT_WALLETVIEW_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n #include <QStackedWidget>\n \n@@ -35,27 +35,27 @@ class WalletView : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit WalletView(const PlatformStyle *platformStyle, QWidget *parent);\n+    explicit WalletView(WalletModel* wallet_model, const PlatformStyle* platformStyle, QWidget* parent);\n     ~WalletView();\n \n     /** Set the client model.\n         The client model represents the part of the core that communicates with the P2P network, and is wallet-agnostic.\n     */\n     void setClientModel(ClientModel *clientModel);\n-    WalletModel *getWalletModel() { return walletModel; }\n-    /** Set the wallet model.\n-        The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending\n-        functionality.\n-    */\n-    void setWalletModel(WalletModel *walletModel);\n+    WalletModel* getWalletModel() const noexcept { return walletModel; }\n \n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     void showOutOfSyncWarning(bool fShow);\n \n private:\n     ClientModel *clientModel;\n-    WalletModel *walletModel;\n+\n+    //!\n+    //! The wallet model represents a bitcoin wallet, and offers access to\n+    //! the list of transactions, address book and sending functionality.\n+    //!\n+    WalletModel* const walletModel;\n \n     OverviewPage *overviewPage;\n     QWidget *transactionsPage;"
      },
      {
        "sha": "bf23ea4a12af36c4d65c89faca67f4319ae2c150",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -53,7 +53,7 @@\n #include <sys/vmmeter.h>\n #endif\n #endif\n-#if defined(HAVE_STRONG_GETAUXVAL) || defined(HAVE_WEAK_GETAUXVAL)\n+#if defined(HAVE_STRONG_GETAUXVAL)\n #include <sys/auxv.h>\n #endif\n \n@@ -326,7 +326,7 @@ void RandAddStaticEnv(CSHA512& hasher)\n     // Bitcoin client version\n     hasher << CLIENT_VERSION;\n \n-#if defined(HAVE_STRONG_GETAUXVAL) || defined(HAVE_WEAK_GETAUXVAL)\n+#if defined(HAVE_STRONG_GETAUXVAL)\n     // Information available through getauxval()\n #  ifdef AT_HWCAP\n     hasher << getauxval(AT_HWCAP);\n@@ -346,7 +346,7 @@ void RandAddStaticEnv(CSHA512& hasher)\n     const char* exec_str = (const char*)getauxval(AT_EXECFN);\n     if (exec_str) hasher.Write((const unsigned char*)exec_str, strlen(exec_str) + 1);\n #  endif\n-#endif // HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n+#endif // HAVE_STRONG_GETAUXVAL\n \n #ifdef HAVE_GETCPUID\n     AddAllCPUID(hasher);"
      },
      {
        "sha": "ac746de32f65c2aec0207b75f24e8b056ce9d76e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 59,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,11 +5,11 @@\n \n #include <rpc/blockchain.h>\n \n-#include <amount.h>\n #include <blockfilter.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n@@ -1115,11 +1115,11 @@ static RPCHelpMan gettxoutsetinfo()\n                         {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", /* optional */ true, \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n                         {RPCResult::Type::STR_HEX, \"muhash\", /* optional */ true, \"The serialized hash (only present if 'muhash' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"transactions\", /* optional */ true, \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", /* optional */ true, \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\"},\n-                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", /* optional */ true, \"The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", /* optional */ true, \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n                         {\n                             {RPCResult::Type::STR_AMOUNT, \"prevout_spent\", \"Total amount of all prevouts spent in this block\"},\n                             {RPCResult::Type::STR_AMOUNT, \"coinbase\", \"Coinbase subsidy amount of this block\"},\n@@ -1256,11 +1256,8 @@ static RPCHelpMan gettxout()\n                 {RPCResult::Type::OBJ, \"scriptPubKey\", \"\", {\n                     {RPCResult::Type::STR, \"asm\", \"\"},\n                     {RPCResult::Type::STR_HEX, \"hex\", \"\"},\n-                    {RPCResult::Type::NUM, \"reqSigs\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Number of required signatures\"},\n                     {RPCResult::Type::STR, \"type\", \"The type, eg pubkeyhash\"},\n-                    {RPCResult::Type::STR, \"address\", /* optional */ true, \"bitcoin address (only if a well-defined address exists)\"},\n-                    {RPCResult::Type::ARR, \"addresses\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Array of bitcoin addresses\",\n-                        {{RPCResult::Type::STR, \"address\", \"bitcoin address\"}}},\n+                    {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n                 }},\n                 {RPCResult::Type::BOOL, \"coinbase\", \"Coinbase or not\"},\n             }},\n@@ -1436,32 +1433,32 @@ RPCHelpMan getblockchaininfo()\n                         {RPCResult::Type::STR_HEX, \"chainwork\", \"total amount of work in active chain, in hexadecimal\"},\n                         {RPCResult::Type::NUM, \"size_on_disk\", \"the estimated size of the block and undo files on disk\"},\n                         {RPCResult::Type::BOOL, \"pruned\", \"if the blocks are subject to pruning\"},\n-                        {RPCResult::Type::NUM, \"pruneheight\", \"lowest-height complete block stored (only present if pruning is enabled)\"},\n-                        {RPCResult::Type::BOOL, \"automatic_pruning\", \"whether automatic pruning is enabled (only present if pruning is enabled)\"},\n-                        {RPCResult::Type::NUM, \"prune_target_size\", \"the target size used by pruning (only present if automatic pruning is enabled)\"},\n+                        {RPCResult::Type::NUM, \"pruneheight\", /* optional */ true, \"lowest-height complete block stored (only present if pruning is enabled)\"},\n+                        {RPCResult::Type::BOOL, \"automatic_pruning\", /* optional */ true, \"whether automatic pruning is enabled (only present if pruning is enabled)\"},\n+                        {RPCResult::Type::NUM, \"prune_target_size\", /* optional */ true, \"the target size used by pruning (only present if automatic pruning is enabled)\"},\n                         {RPCResult::Type::OBJ_DYN, \"softforks\", \"status of softforks\",\n                         {\n                             {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n                                 {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n-                                {RPCResult::Type::OBJ, \"bip9\", \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {RPCResult::Type::OBJ, \"bip9\", /* optional */ true, \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n-                                    {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n+                                    {RPCResult::Type::NUM, \"bit\", /* optional */ true, \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n                                     {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::NUM, \"min_activation_height\", \"minimum height of blocks for which the rules may be enforced\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n+                                    {RPCResult::Type::OBJ, \"statistics\", /* optional */ true, \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n                                     {\n                                         {RPCResult::Type::NUM, \"period\", \"the length in blocks of the signalling period\"},\n-                                        {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature (only for \\\"started\\\" status)\"},\n+                                        {RPCResult::Type::NUM, \"threshold\", /* optional */ true, \"the number of blocks with the version bit set required to activate the feature (only for \\\"started\\\" status)\"},\n                                         {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n-                                        {RPCResult::Type::BOOL, \"possible\", \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n+                                        {RPCResult::Type::BOOL, \"possible\", /* optional */ true, \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n                                 {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                             }},\n                         }},\n@@ -1503,7 +1500,7 @@ RPCHelpMan getblockchaininfo()\n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n-        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n             obj.pushKV(\"prune_target_size\",  nPruneTarget);\n@@ -1650,7 +1647,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n@@ -1933,16 +1930,6 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n     }\n }\n \n-void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex)\n-{\n-    ScriptPubKeyToUniv(scriptPubKey, out, fIncludeHex, IsDeprecatedRPCEnabled(\"addresses\"));\n-}\n-\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n-{\n-    TxToUniv(tx, hashBlock, IsDeprecatedRPCEnabled(\"addresses\"), entry, include_hex, serialize_flags, txundo);\n-}\n-\n template<typename T>\n static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n template<typename T, typename Tk, typename... Args>\n@@ -1971,42 +1958,42 @@ static RPCHelpMan getblockstats()\n                 RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n             {\n-                {RPCResult::Type::NUM, \"avgfee\", \"Average fee in the block\"},\n-                {RPCResult::Type::NUM, \"avgfeerate\", \"Average feerate (in satoshis per virtual byte)\"},\n-                {RPCResult::Type::NUM, \"avgtxsize\", \"Average transaction size\"},\n-                {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash (to check for potential reorgs)\"},\n-                {RPCResult::Type::ARR_FIXED, \"feerate_percentiles\", \"Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\",\n+                {RPCResult::Type::NUM, \"avgfee\", /* optional */ true, \"Average fee in the block\"},\n+                {RPCResult::Type::NUM, \"avgfeerate\", /* optional */ true, \"Average feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"avgtxsize\", /* optional */ true, \"Average transaction size\"},\n+                {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"The block hash (to check for potential reorgs)\"},\n+                {RPCResult::Type::ARR_FIXED, \"feerate_percentiles\", /* optional */ true, \"Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\",\n                 {\n                     {RPCResult::Type::NUM, \"10th_percentile_feerate\", \"The 10th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"25th_percentile_feerate\", \"The 25th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"50th_percentile_feerate\", \"The 50th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"75th_percentile_feerate\", \"The 75th percentile feerate\"},\n                     {RPCResult::Type::NUM, \"90th_percentile_feerate\", \"The 90th percentile feerate\"},\n                 }},\n-                {RPCResult::Type::NUM, \"height\", \"The height of the block\"},\n-                {RPCResult::Type::NUM, \"ins\", \"The number of inputs (excluding coinbase)\"},\n-                {RPCResult::Type::NUM, \"maxfee\", \"Maximum fee in the block\"},\n-                {RPCResult::Type::NUM, \"maxfeerate\", \"Maximum feerate (in satoshis per virtual byte)\"},\n-                {RPCResult::Type::NUM, \"maxtxsize\", \"Maximum transaction size\"},\n-                {RPCResult::Type::NUM, \"medianfee\", \"Truncated median fee in the block\"},\n-                {RPCResult::Type::NUM, \"mediantime\", \"The block median time past\"},\n-                {RPCResult::Type::NUM, \"mediantxsize\", \"Truncated median transaction size\"},\n-                {RPCResult::Type::NUM, \"minfee\", \"Minimum fee in the block\"},\n-                {RPCResult::Type::NUM, \"minfeerate\", \"Minimum feerate (in satoshis per virtual byte)\"},\n-                {RPCResult::Type::NUM, \"mintxsize\", \"Minimum transaction size\"},\n-                {RPCResult::Type::NUM, \"outs\", \"The number of outputs\"},\n-                {RPCResult::Type::NUM, \"subsidy\", \"The block subsidy\"},\n-                {RPCResult::Type::NUM, \"swtotal_size\", \"Total size of all segwit transactions\"},\n-                {RPCResult::Type::NUM, \"swtotal_weight\", \"Total weight of all segwit transactions\"},\n-                {RPCResult::Type::NUM, \"swtxs\", \"The number of segwit transactions\"},\n-                {RPCResult::Type::NUM, \"time\", \"The block time\"},\n-                {RPCResult::Type::NUM, \"total_out\", \"Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\"},\n-                {RPCResult::Type::NUM, \"total_size\", \"Total size of all non-coinbase transactions\"},\n-                {RPCResult::Type::NUM, \"total_weight\", \"Total weight of all non-coinbase transactions\"},\n-                {RPCResult::Type::NUM, \"totalfee\", \"The fee total\"},\n-                {RPCResult::Type::NUM, \"txs\", \"The number of transactions (including coinbase)\"},\n-                {RPCResult::Type::NUM, \"utxo_increase\", \"The increase/decrease in the number of unspent outputs\"},\n-                {RPCResult::Type::NUM, \"utxo_size_inc\", \"The increase/decrease in size for the utxo index (not discounting op_return and similar)\"},\n+                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"The height of the block\"},\n+                {RPCResult::Type::NUM, \"ins\", /* optional */ true, \"The number of inputs (excluding coinbase)\"},\n+                {RPCResult::Type::NUM, \"maxfee\", /* optional */ true, \"Maximum fee in the block\"},\n+                {RPCResult::Type::NUM, \"maxfeerate\", /* optional */ true, \"Maximum feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"maxtxsize\", /* optional */ true, \"Maximum transaction size\"},\n+                {RPCResult::Type::NUM, \"medianfee\", /* optional */ true, \"Truncated median fee in the block\"},\n+                {RPCResult::Type::NUM, \"mediantime\", /* optional */ true, \"The block median time past\"},\n+                {RPCResult::Type::NUM, \"mediantxsize\", /* optional */ true, \"Truncated median transaction size\"},\n+                {RPCResult::Type::NUM, \"minfee\", /* optional */ true, \"Minimum fee in the block\"},\n+                {RPCResult::Type::NUM, \"minfeerate\", /* optional */ true, \"Minimum feerate (in satoshis per virtual byte)\"},\n+                {RPCResult::Type::NUM, \"mintxsize\", /* optional */ true, \"Minimum transaction size\"},\n+                {RPCResult::Type::NUM, \"outs\", /* optional */ true, \"The number of outputs\"},\n+                {RPCResult::Type::NUM, \"subsidy\", /* optional */ true, \"The block subsidy\"},\n+                {RPCResult::Type::NUM, \"swtotal_size\", /* optional */ true, \"Total size of all segwit transactions\"},\n+                {RPCResult::Type::NUM, \"swtotal_weight\", /* optional */ true, \"Total weight of all segwit transactions\"},\n+                {RPCResult::Type::NUM, \"swtxs\", /* optional */ true, \"The number of segwit transactions\"},\n+                {RPCResult::Type::NUM, \"time\", /* optional */ true, \"The block time\"},\n+                {RPCResult::Type::NUM, \"total_out\", /* optional */ true, \"Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\"},\n+                {RPCResult::Type::NUM, \"total_size\", /* optional */ true, \"Total size of all non-coinbase transactions\"},\n+                {RPCResult::Type::NUM, \"total_weight\", /* optional */ true, \"Total weight of all non-coinbase transactions\"},\n+                {RPCResult::Type::NUM, \"totalfee\", /* optional */ true, \"The fee total\"},\n+                {RPCResult::Type::NUM, \"txs\", /* optional */ true, \"The number of transactions (including coinbase)\"},\n+                {RPCResult::Type::NUM, \"utxo_increase\", /* optional */ true, \"The increase/decrease in the number of unspent outputs\"},\n+                {RPCResult::Type::NUM, \"utxo_size_inc\", /* optional */ true, \"The increase/decrease in size for the utxo index (not discounting op_return and similar)\"},\n             }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblockstats\", R\"('\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"' '[\"minfeerate\",\"avgfeerate\"]')\") +"
      },
      {
        "sha": "09e471afddf5035808f09bdde04ca11dd8d31510",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,8 +5,7 @@\n #ifndef BITCOIN_RPC_BLOCKCHAIN_H\n #define BITCOIN_RPC_BLOCKCHAIN_H\n \n-#include <amount.h>\n-#include <core_io.h>\n+#include <consensus/amount.h>\n #include <streams.h>\n #include <sync.h>\n \n@@ -53,9 +52,6 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n-void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n-\n NodeContext& EnsureAnyNodeContext(const std::any& context);\n CTxMemPool& EnsureMemPool(const NodeContext& node);\n CTxMemPool& EnsureAnyMemPool(const std::any& context);"
      },
      {
        "sha": "93e49cb9a891bf1a1b9856f38c697a3539df6798",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -131,6 +131,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxoutsetinfo\", 2, \"use_index\"},\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n+    { \"lockunspent\", 2, \"persistent\" },\n     { \"send\", 0, \"outputs\" },\n     { \"send\", 1, \"conf_target\" },\n     { \"send\", 3, \"fee_rate\"},\n@@ -192,6 +193,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"unloadwallet\", 1, \"load_on_startup\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"addpeeraddress\", 1, \"port\"},\n+    { \"addpeeraddress\", 2, \"tried\"},\n     { \"stop\", 0, \"wait\" },\n };\n // clang-format on"
      },
      {
        "sha": "60ec15e904d611f34d203d8347de9eafcfc6c7b3",
        "filename": "src/rpc/external_signer.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/external_signer.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -24,8 +24,11 @@ static RPCHelpMan enumeratesigners()\n             {\n                 {RPCResult::Type::ARR, \"signers\", /* optional */ false, \"\",\n                 {\n-                    {RPCResult::Type::STR_HEX, \"masterkeyfingerprint\", \"Master key fingerprint\"},\n-                    {RPCResult::Type::STR, \"name\", \"Device name\"},\n+                    {RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"fingerprint\", \"Master key fingerprint\"},\n+                        {RPCResult::Type::STR, \"name\", \"Device name\"},\n+                    }},\n                 },\n                 }\n             }"
      },
      {
        "sha": "518c41d12a1d622ea5880e78ffefc6a886b7a4e3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n #include <chain.h>\n #include <chainparams.h>\n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <consensus/params.h>\n #include <consensus/validation.h>\n@@ -553,6 +553,10 @@ static RPCHelpMan getblocktemplate()\n                 {\n                     {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                 }},\n+                {RPCResult::Type::ARR, \"capabilities\", \"\",\n+                {\n+                    {RPCResult::Type::STR, \"value\", \"A supported feature, for example 'proposal'\"},\n+                }},\n                 {RPCResult::Type::NUM, \"vbrequired\", \"bit mask of versionbits the server requires set in submissions\"},\n                 {RPCResult::Type::STR, \"previousblockhash\", \"The hash of current highest block\"},\n                 {RPCResult::Type::ARR, \"transactions\", \"contents of non-coinbase transactions that should be included in the next block\",\n@@ -586,11 +590,12 @@ static RPCHelpMan getblocktemplate()\n                 {RPCResult::Type::STR_HEX, \"noncerange\", \"A range of valid nonces\"},\n                 {RPCResult::Type::NUM, \"sigoplimit\", \"limit of sigops in blocks\"},\n                 {RPCResult::Type::NUM, \"sizelimit\", \"limit of block size\"},\n-                {RPCResult::Type::NUM, \"weightlimit\", \"limit of block weight\"},\n+                {RPCResult::Type::NUM, \"weightlimit\", /* optional */ true, \"limit of block weight\"},\n                 {RPCResult::Type::NUM_TIME, \"curtime\", \"current timestamp in \" + UNIX_EPOCH_TIME},\n                 {RPCResult::Type::STR, \"bits\", \"compressed target of next block\"},\n                 {RPCResult::Type::NUM, \"height\", \"The height of the next block\"},\n-                {RPCResult::Type::STR, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"},\n+                {RPCResult::Type::STR_HEX, \"signet_challenge\", /* optional */ true, \"Only on signet\"},\n+                {RPCResult::Type::STR_HEX, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"},\n             }},\n         },\n         RPCExamples{\n@@ -697,7 +702,7 @@ static RPCHelpMan getblocktemplate()\n             std::string lpstr = lpval.get_str();\n \n             hashWatchedChain = ParseHashV(lpstr.substr(0, 64), \"longpollid\");\n-            nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n+            nTransactionsUpdatedLastLP = LocaleIndependentAtoi<int64_t>(lpstr.substr(64));\n         }\n         else\n         {\n@@ -1098,6 +1103,8 @@ static RPCHelpMan estimatesmartfee()\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n \n     CBlockPolicyEstimator& fee_estimator = EnsureAnyFeeEstimator(request.context);\n+    const NodeContext& node = EnsureAnyNodeContext(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n \n     unsigned int max_target = fee_estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n@@ -1113,7 +1120,10 @@ static RPCHelpMan estimatesmartfee()\n     UniValue result(UniValue::VOBJ);\n     UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n+    CFeeRate feeRate{fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative)};\n+    CFeeRate min_mempool_feerate{mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000)};\n+    CFeeRate min_relay_feerate{::minRelayTxFee};\n+    feeRate = std::max({feeRate, min_mempool_feerate, min_relay_feerate});\n     if (feeRate != CFeeRate(0)) {\n         result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {"
      },
      {
        "sha": "39bd9c6091d961756f3c7922fc3f67116ec81245",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 7,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -22,6 +22,7 @@\n #include <util/check.h>\n #include <util/message.h> // For MessageSign(), MessageVerify()\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n \n #include <optional>\n@@ -44,10 +45,10 @@ static RPCHelpMan validateaddress()\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n-                        {RPCResult::Type::STR, \"address\", \"The bitcoin address validated\"},\n-                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address\"},\n-                        {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script\"},\n-                        {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address\"},\n+                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n+                        {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n+                        {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n                         {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n                         {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n                         {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n@@ -417,6 +418,27 @@ static RPCHelpMan setmocktime()\n     };\n }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+static RPCHelpMan invokedisallowedsyscall()\n+{\n+    return RPCHelpMan{\n+        \"invokedisallowedsyscall\",\n+        \"\\nInvoke a disallowed syscall to trigger a syscall sandbox violation. Used for testing purposes.\\n\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"invokedisallowedsyscall\", \"\") + HelpExampleRpc(\"invokedisallowedsyscall\", \"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            if (!Params().IsTestChain()) {\n+                throw std::runtime_error(\"invokedisallowedsyscall is used for testing only.\");\n+            }\n+            TestDisallowedSandboxCall();\n+            return NullUniValue;\n+        },\n+    };\n+}\n+#endif // USE_SYSCALL_SANDBOX\n+\n static RPCHelpMan mockscheduler()\n {\n     return RPCHelpMan{\"mockscheduler\",\n@@ -670,8 +692,9 @@ static RPCHelpMan echoipc()\n         RPCExamples{HelpExampleCli(\"echo\", \"\\\"Hello world\\\"\") +\n                     HelpExampleRpc(\"echo\", \"\\\"Hello world\\\"\")},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            interfaces::Init& local_init = *EnsureAnyNodeContext(request.context).init;\n             std::unique_ptr<interfaces::Echo> echo;\n-            if (interfaces::Ipc* ipc = Assert(EnsureAnyNodeContext(request.context).init)->ipc()) {\n+            if (interfaces::Ipc* ipc = local_init.ipc()) {\n                 // Spawn a new bitcoin-node process and call makeEcho to get a\n                 // client pointer to a interfaces::Echo instance running in\n                 // that process. This is just for testing. A slightly more\n@@ -689,7 +712,7 @@ static RPCHelpMan echoipc()\n                 // interfaces::Echo object and return it so the `echoipc` RPC\n                 // method will work, and the python test calling `echoipc`\n                 // can expect the same result.\n-                echo = interfaces::MakeEcho();\n+                echo = local_init.makeEcho();\n             }\n             return echo->echo(request.params[0].get_str());\n         },\n@@ -716,7 +739,7 @@ static RPCHelpMan getindexinfo()\n                     {\"index_name\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Filter results for an index with a specific name.\"},\n                 },\n                 RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\", {\n+                    RPCResult::Type::OBJ_DYN, \"\", \"\", {\n                         {\n                             RPCResult::Type::OBJ, \"name\", \"The name of the index\",\n                             {\n@@ -776,6 +799,9 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             &echo,                    },\n     { \"hidden\",             &echojson,                },\n     { \"hidden\",             &echoipc,                 },\n+#if defined(USE_SYSCALL_SANDBOX)\n+    { \"hidden\",             &invokedisallowedsyscall, },\n+#endif // USE_SYSCALL_SANDBOX\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "a9bee33c5d08fa156454c970158bdd2088b6428c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -116,10 +116,10 @@ static RPCHelpMan getpeerinfo()\n                             {\n                             {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n                             {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", \"(ip:port) Local address as reported by the peer\"},\n+                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n                             {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n                                                                 \"peer selection (only available if the asmap config flag is set)\"},\n                             {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n                             {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n@@ -135,9 +135,9 @@ static RPCHelpMan getpeerinfo()\n                             {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n                             {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n                             {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", \"ping wait (if non-zero)\"},\n+                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n                             {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n                             {RPCResult::Type::STR, \"subver\", \"The string version\"},\n                             {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n@@ -921,6 +921,7 @@ static RPCHelpMan addpeeraddress()\n         {\n             {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address of the peer\"},\n             {\"port\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The port of the peer\"},\n+            {\"tried\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, attempt to add the peer to the tried addresses table\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -929,8 +930,8 @@ static RPCHelpMan addpeeraddress()\n             },\n         },\n         RPCExamples{\n-            HelpExampleCli(\"addpeeraddress\", \"\\\"1.2.3.4\\\" 8333\")\n-    + HelpExampleRpc(\"addpeeraddress\", \"\\\"1.2.3.4\\\", 8333\")\n+            HelpExampleCli(\"addpeeraddress\", \"\\\"1.2.3.4\\\" 8333 true\")\n+    + HelpExampleRpc(\"addpeeraddress\", \"\\\"1.2.3.4\\\", 8333, true\")\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n@@ -941,6 +942,7 @@ static RPCHelpMan addpeeraddress()\n \n     const std::string& addr_string{request.params[0].get_str()};\n     const uint16_t port{static_cast<uint16_t>(request.params[1].get_int())};\n+    const bool tried{request.params[2].isTrue()};\n \n     UniValue obj(UniValue::VOBJ);\n     CNetAddr net_addr;\n@@ -951,7 +953,13 @@ static RPCHelpMan addpeeraddress()\n         address.nTime = GetAdjustedTime();\n         // The source address is set equal to the address. This is equivalent to the peer\n         // announcing itself.\n-        if (node.addrman->Add({address}, address)) success = true;\n+        if (node.addrman->Add({address}, address)) {\n+            success = true;\n+            if (tried) {\n+                // Attempt to move the address to the tried addresses table.\n+                node.addrman->Good(address);\n+            }\n+        }\n     }\n \n     obj.pushKV(\"success\", success);"
      },
      {
        "sha": "483717aa7a698e90a3655a0b6360d0e6b78804aa",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 57,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <chain.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <index/txindex.h>\n@@ -94,7 +95,7 @@ static RPCHelpMan getrawtransaction()\n                      RPCResult{\"if verbose is set to true\",\n                          RPCResult::Type::OBJ, \"\", \"\",\n                          {\n-                             {RPCResult::Type::BOOL, \"in_active_chain\", \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\"},\n+                             {RPCResult::Type::BOOL, \"in_active_chain\", /* optional */ true, \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\"},\n                              {RPCResult::Type::STR_HEX, \"hex\", \"The serialized, hex-encoded data for 'txid'\"},\n                              {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id (same as provided)\"},\n                              {RPCResult::Type::STR_HEX, \"hash\", \"The transaction hash (differs from txid for witness transactions)\"},\n@@ -115,7 +116,7 @@ static RPCHelpMan getrawtransaction()\n                                          {RPCResult::Type::STR_HEX, \"hex\", \"hex\"},\n                                      }},\n                                      {RPCResult::Type::NUM, \"sequence\", \"The script sequence number\"},\n-                                     {RPCResult::Type::ARR, \"txinwitness\", \"\",\n+                                     {RPCResult::Type::ARR, \"txinwitness\", /* optional */ true, \"\",\n                                      {\n                                          {RPCResult::Type::STR_HEX, \"hex\", \"hex-encoded witness data (if any)\"},\n                                      }},\n@@ -131,20 +132,15 @@ static RPCHelpMan getrawtransaction()\n                                      {\n                                          {RPCResult::Type::STR, \"asm\", \"the asm\"},\n                                          {RPCResult::Type::STR, \"hex\", \"the hex\"},\n-                                         {RPCResult::Type::NUM, \"reqSigs\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Number of required signatures\"},\n                                          {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n-                                         {RPCResult::Type::STR, \"address\", /* optional */ true, \"bitcoin address (only if a well-defined address exists)\"},\n-                                         {RPCResult::Type::ARR, \"addresses\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Array of bitcoin addresses\",\n-                                         {\n-                                             {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n-                                         }},\n+                                         {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n                                      }},\n                                  }},\n                              }},\n-                             {RPCResult::Type::STR_HEX, \"blockhash\", \"the block hash\"},\n-                             {RPCResult::Type::NUM, \"confirmations\", \"The confirmations\"},\n-                             {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME},\n-                             {RPCResult::Type::NUM, \"time\", \"Same as \\\"blocktime\\\"\"},\n+                             {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"the block hash\"},\n+                             {RPCResult::Type::NUM, \"confirmations\", /* optional */ true, \"The confirmations\"},\n+                             {RPCResult::Type::NUM_TIME, \"blocktime\", /* optional */ true, \"The block time expressed in \" + UNIX_EPOCH_TIME},\n+                             {RPCResult::Type::NUM, \"time\", /* optional */ true, \"Same as \\\"blocktime\\\"\"},\n                         }\n                     },\n                 },\n@@ -470,14 +466,15 @@ static RPCHelpMan decoderawtransaction()\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\",\n                             {\n-                                {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n-                                {RPCResult::Type::NUM, \"vout\", \"The output number\"},\n-                                {RPCResult::Type::OBJ, \"scriptSig\", \"The script\",\n+                                {RPCResult::Type::STR_HEX, \"coinbase\", /* optional */ true, \"\"},\n+                                {RPCResult::Type::STR_HEX, \"txid\", /* optional */ true, \"The transaction id\"},\n+                                {RPCResult::Type::NUM, \"vout\", /* optional */ true, \"The output number\"},\n+                                {RPCResult::Type::OBJ, \"scriptSig\", /* optional */ true, \"The script\",\n                                 {\n                                     {RPCResult::Type::STR, \"asm\", \"asm\"},\n                                     {RPCResult::Type::STR_HEX, \"hex\", \"hex\"},\n                                 }},\n-                                {RPCResult::Type::ARR, \"txinwitness\", \"\",\n+                                {RPCResult::Type::ARR, \"txinwitness\", /* optional */ true, \"\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"hex\", \"hex-encoded witness data (if any)\"},\n                                 }},\n@@ -494,13 +491,8 @@ static RPCHelpMan decoderawtransaction()\n                                 {\n                                     {RPCResult::Type::STR, \"asm\", \"the asm\"},\n                                     {RPCResult::Type::STR_HEX, \"hex\", \"the hex\"},\n-                                    {RPCResult::Type::NUM, \"reqSigs\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Number of required signatures\"},\n                                     {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n-                                    {RPCResult::Type::STR, \"address\", /* optional */ true, \"bitcoin address (only if a well-defined address exists)\"},\n-                                    {RPCResult::Type::ARR, \"addresses\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Array of bitcoin addresses\",\n-                                    {\n-                                        {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n-                                    }},\n+                                    {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n                                 }},\n                             }},\n                         }},\n@@ -553,24 +545,14 @@ static RPCHelpMan decodescript()\n                     {\n                         {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n                         {RPCResult::Type::STR, \"type\", \"The output type (e.g. \"+GetAllOutputTypes()+\")\"},\n-                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"bitcoin address (only if a well-defined address exists)\"},\n-                        {RPCResult::Type::NUM, \"reqSigs\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Number of required signatures\"},\n-                        {RPCResult::Type::ARR, \"addresses\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Array of bitcoin addresses\",\n-                        {\n-                            {RPCResult::Type::STR, \"address\", \"bitcoin address\"},\n-                        }},\n-                        {RPCResult::Type::STR, \"p2sh\", \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n-                        {RPCResult::Type::OBJ, \"segwit\", \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n+                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n+                        {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n+                        {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n                         {\n                             {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n                             {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n                             {RPCResult::Type::STR, \"type\", \"The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\"},\n-                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"bitcoin address (only if a well-defined address exists)\"},\n-                            {RPCResult::Type::NUM, \"reqSigs\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Number of required signatures\"},\n-                            {RPCResult::Type::ARR, \"addresses\", /* optional */ true, \"(DEPRECATED, returned only if config option -deprecatedrpc=addresses is passed) Array of bitcoin addresses\",\n-                            {\n-                                {RPCResult::Type::STR, \"address\", \"segwit address\"},\n-                            }},\n+                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n                             {RPCResult::Type::STR, \"p2sh-segwit\", \"address of the P2SH script wrapping this witness redeem script\"},\n                         }},\n                     }\n@@ -591,7 +573,7 @@ static RPCHelpMan decodescript()\n     } else {\n         // Empty scripts are valid\n     }\n-    ScriptPubKeyToUniv(script, r, /* fIncludeHex */ false);\n+    ScriptPubKeyToUniv(script, r, /* include_hex */ false);\n \n     UniValue type;\n     type = find_value(r, \"type\");\n@@ -625,7 +607,7 @@ static RPCHelpMan decodescript()\n                 // Newer segwit program versions should be considered when then become available.\n                 segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n             }\n-            ScriptPubKeyToUniv(segwitScr, sr, /* fIncludeHex */ true);\n+            ScriptPubKeyToUniv(segwitScr, sr, /* include_hex */ true);\n             sr.pushKV(\"p2sh-segwit\", EncodeDestination(ScriptHash(segwitScr)));\n             r.pushKV(\"segwit\", sr);\n         }\n@@ -772,6 +754,10 @@ static RPCHelpMan signrawtransactionwithkey()\n                             {\n                                 {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::ARR, \"witness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"witness\", \"\"},\n+                                }},\n                                 {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n                                 {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n                                 {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n@@ -909,15 +895,15 @@ static RPCHelpMan testmempoolaccept()\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate.\"\n+                            {RPCResult::Type::STR, \"package-error\", /* optional */ true, \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", /* optional */ true, \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate. \"\n                                                                \"If not present, the tx was not fully validated due to a failure in another tx in the list.\"},\n-                            {RPCResult::Type::NUM, \"vsize\", \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n-                            {RPCResult::Type::OBJ, \"fees\", \"Transaction fees (only present if 'allowed' is true)\",\n+                            {RPCResult::Type::NUM, \"vsize\", /* optional */ true, \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n+                            {RPCResult::Type::OBJ, \"fees\", /* optional */ true, \"Transaction fees (only present if 'allowed' is true)\",\n                             {\n                                 {RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee in \" + CURRENCY_UNIT},\n                             }},\n-                            {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n+                            {RPCResult::Type::STR, \"reject-reason\", /* optional */ true, \"Rejection string (only present when 'allowed' is false)\"},\n                         }},\n                     }\n                 },\n@@ -1056,7 +1042,7 @@ static RPCHelpMan decodepsbt()\n                                         {RPCResult::Type::STR, \"asm\", \"The asm\"},\n                                         {RPCResult::Type::STR_HEX, \"hex\", \"The hex\"},\n                                         {RPCResult::Type::STR, \"type\", \"The type, eg 'pubkeyhash'\"},\n-                                        {RPCResult::Type::STR, \"address\",\" Bitcoin address if there is one\"},\n+                                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n                                     }},\n                                 }},\n                                 {RPCResult::Type::OBJ_DYN, \"partial_signatures\", /* optional */ true, \"\",\n@@ -1078,22 +1064,23 @@ static RPCHelpMan decodepsbt()\n                                 }},\n                                 {RPCResult::Type::ARR, \"bip32_derivs\", /* optional */ true, \"\",\n                                 {\n-                                    {RPCResult::Type::OBJ, \"pubkey\", /* optional */ true, \"The public key with the derivation path as the value.\",\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n                                     {\n+                                        {RPCResult::Type::STR, \"pubkey\", \"The public key with the derivation path as the value.\"},\n                                         {RPCResult::Type::STR, \"master_fingerprint\", \"The fingerprint of the master key\"},\n                                         {RPCResult::Type::STR, \"path\", \"The path\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::OBJ, \"final_scriptsig\", /* optional */ true, \"\",\n+                                {RPCResult::Type::OBJ, \"final_scriptSig\", /* optional */ true, \"\",\n                                 {\n                                     {RPCResult::Type::STR, \"asm\", \"The asm\"},\n                                     {RPCResult::Type::STR, \"hex\", \"The hex\"},\n                                 }},\n-                                {RPCResult::Type::ARR, \"final_scriptwitness\", \"\",\n+                                {RPCResult::Type::ARR, \"final_scriptwitness\", /* optional */ true, \"\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"\", \"hex-encoded witness data (if any)\"},\n                                 }},\n-                                {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                                {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n@@ -1124,7 +1111,7 @@ static RPCHelpMan decodepsbt()\n                                         {RPCResult::Type::STR, \"path\", \"The path\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n+                                {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n@@ -1175,7 +1162,7 @@ static RPCHelpMan decodepsbt()\n             txout = input.witness_utxo;\n \n             UniValue o(UniValue::VOBJ);\n-            ScriptToUniv(txout.scriptPubKey, o, true);\n+            ScriptPubKeyToUniv(txout.scriptPubKey, o, /* include_hex */ true);\n \n             UniValue out(UniValue::VOBJ);\n             out.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n@@ -1222,12 +1209,12 @@ static RPCHelpMan decodepsbt()\n         // Redeem script and witness script\n         if (!input.redeem_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n-            ScriptToUniv(input.redeem_script, r, false);\n+            ScriptToUniv(input.redeem_script, r);\n             in.pushKV(\"redeem_script\", r);\n         }\n         if (!input.witness_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n-            ScriptToUniv(input.witness_script, r, false);\n+            ScriptToUniv(input.witness_script, r);\n             in.pushKV(\"witness_script\", r);\n         }\n \n@@ -1282,12 +1269,12 @@ static RPCHelpMan decodepsbt()\n         // Redeem script and witness script\n         if (!output.redeem_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n-            ScriptToUniv(output.redeem_script, r, false);\n+            ScriptToUniv(output.redeem_script, r);\n             out.pushKV(\"redeem_script\", r);\n         }\n         if (!output.witness_script.empty()) {\n             UniValue r(UniValue::VOBJ);\n-            ScriptToUniv(output.witness_script, r, false);\n+            ScriptToUniv(output.witness_script, r);\n             out.pushKV(\"witness_script\", r);\n         }\n \n@@ -1398,8 +1385,8 @@ static RPCHelpMan finalizepsbt()\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n-                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded partially signed transaction if not extracted\"},\n-                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded network transaction if extracted\"},\n+                        {RPCResult::Type::STR, \"psbt\", /* optional */ true, \"The base64-encoded partially signed transaction if not extracted\"},\n+                        {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"The hex-encoded network transaction if extracted\"},\n                         {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n                     }\n                 },\n@@ -1791,7 +1778,7 @@ static RPCHelpMan analyzepsbt()\n             RPCResult {\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n-                    {RPCResult::Type::ARR, \"inputs\", \"\",\n+                    {RPCResult::Type::ARR, \"inputs\", /* optional */ true, \"\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {"
      },
      {
        "sha": "d550160260e0986f22a598fe16bc2dfdb30f0e59",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,6 +6,7 @@\n #include <rpc/rawtransaction_util.h>\n \n #include <coins.h>\n+#include <consensus/amount.h>\n #include <core_io.h>\n #include <key_io.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "0d02ec5c47d8784e7eb0833db25542f9a5d79c0a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -540,7 +540,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n int RPCSerializationFlags()\n {\n     int flag = 0;\n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+    if (gArgs.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n         flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n     return flag;\n }"
      },
      {
        "sha": "e6bb35fc33e49e55ecf408b2de5a7c37c64bb9c4",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_RPC_SERVER_H\n #define BITCOIN_RPC_SERVER_H\n \n-#include <amount.h>\n #include <rpc/request.h>\n #include <rpc/util.h>\n "
      },
      {
        "sha": "2d7f5f2894f284f9f030f46e7ceefe1b861d2429",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/amount.h>\n #include <key_io.h>\n #include <outputtype.h>\n #include <rpc/util.h>"
      },
      {
        "sha": "162cced6c7cd36c6a03f22a19544ffb749b3dbb6",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n #include <scheduler.h>\n \n #include <random.h>\n+#include <util/syscall_sandbox.h>\n #include <util/time.h>\n \n #include <assert.h>\n@@ -24,6 +25,7 @@ CScheduler::~CScheduler()\n \n void CScheduler::serviceQueue()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SCHEDULER);\n     WAIT_LOCK(newTaskMutex, lock);\n     ++nThreadsServicingQueue;\n "
      },
      {
        "sha": "6f911f4fe7489ab6c82cbdff20d38c2733aaf24b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -96,7 +96,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "4cb212574747539503abd504a6461f944046741e",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <script/sign.h>\n \n+#include <consensus/amount.h>\n #include <key.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>"
      },
      {
        "sha": "d9656c781dae8903b9881eeae1aa2fa667a7b7c6",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -266,47 +266,6 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     assert(false);\n }\n \n-// TODO: from v23 (\"addresses\" and \"reqSigs\" deprecated) \"ExtractDestinations\" should be removed\n-bool ExtractDestinations(const CScript& scriptPubKey, TxoutType& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)\n-{\n-    addressRet.clear();\n-    std::vector<valtype> vSolutions;\n-    typeRet = Solver(scriptPubKey, vSolutions);\n-    if (typeRet == TxoutType::NONSTANDARD) {\n-        return false;\n-    } else if (typeRet == TxoutType::NULL_DATA) {\n-        // This is data, not addresses\n-        return false;\n-    }\n-\n-    if (typeRet == TxoutType::MULTISIG)\n-    {\n-        nRequiredRet = vSolutions.front()[0];\n-        for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n-        {\n-            CPubKey pubKey(vSolutions[i]);\n-            if (!pubKey.IsValid())\n-                continue;\n-\n-            CTxDestination address = PKHash(pubKey);\n-            addressRet.push_back(address);\n-        }\n-\n-        if (addressRet.empty())\n-            return false;\n-    }\n-    else\n-    {\n-        nRequiredRet = 1;\n-        CTxDestination address;\n-        if (!ExtractDestination(scriptPubKey, address))\n-           return false;\n-        addressRet.push_back(address);\n-    }\n-\n-    return true;\n-}\n-\n namespace {\n class CScriptVisitor\n {"
      },
      {
        "sha": "a8e57231bf7a92927962c583c52837e413188fea",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -176,27 +176,11 @@ TxoutType Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned c\n \n /**\n  * Parse a standard scriptPubKey for the destination address. Assigns result to\n- * the addressRet parameter and returns true if successful. For multisig\n- * scripts, instead use ExtractDestinations. Currently only works for P2PK,\n+ * the addressRet parameter and returns true if successful. Currently only works for P2PK,\n  * P2PKH, P2SH, P2WPKH, and P2WSH scripts.\n  */\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n \n-/**\n- * Parse a standard scriptPubKey with one or more destination addresses. For\n- * multisig scripts, this populates the addressRet vector with the pubkey IDs\n- * and nRequiredRet with the n required to spend. For other destinations,\n- * addressRet is populated with a single value and nRequiredRet is set to 1.\n- * Returns true if successful.\n- *\n- * Note: this function confuses destinations (a subset of CScripts that are\n- * encodable as an address) with key identifiers (of keys involved in a\n- * CScript), and its use should be phased out.\n- *\n- * TODO: from v23 (\"addresses\" and \"reqSigs\" deprecated) \"ExtractDestinations\" should be removed\n- */\n-bool ExtractDestinations(const CScript& scriptPubKey, TxoutType& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n-\n /**\n  * Generate a Bitcoin scriptPubKey for the given CTxDestination. Returns a P2PKH\n  * script for a CKeyID destination, a P2SH script for a CScriptID, and an empty"
      },
      {
        "sha": "aafd1999eeb064cd5d7aac0367543b586b45ffbb",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -141,7 +141,7 @@ bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& cons\n \n     PrecomputedTransactionData txdata;\n     txdata.Init(signet_txs->m_to_sign, {signet_txs->m_to_spend.vout[0]});\n-    TransactionSignatureChecker sigcheck(&signet_txs->m_to_sign, /*nIn=*/ 0, /*amount=*/ signet_txs->m_to_spend.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n+    TransactionSignatureChecker sigcheck(&signet_txs->m_to_sign, /* nInIn= */ 0, /* amountIn= */ signet_txs->m_to_spend.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n \n     if (!VerifyScript(scriptSig, signet_txs->m_to_spend.vout[0].scriptPubKey, &witness, BLOCK_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n         LogPrint(BCLog::VALIDATION, \"CheckSignetBlockSolution: Errors in block (block solution invalid)\\n\");"
      },
      {
        "sha": "c9fd8e347ed1e060bd33acb2fe542b6496606e6a",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,7 +9,6 @@\n #include <sync.h>\n \n #include <logging.h>\n-#include <logging/timer.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/threadnames.h>\n@@ -24,11 +23,6 @@\n #include <utility>\n #include <vector>\n \n-void LockContention(const char* pszName, const char* pszFile, int nLine)\n-{\n-    LOG_TIME_MICROS_WITH_CATEGORY(strprintf(\"%s, %s:%d\", pszName, pszFile, nLine), BCLog::LOCK);\n-}\n-\n #ifdef DEBUG_LOCKORDER\n //\n // Early deadlock detection.\n@@ -103,27 +97,29 @@ static void potential_deadlock_detected(const LockPair& mismatch, const LockStac\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     for (const LockStackItem& i : s1) {\n+        std::string prefix{};\n         if (i.first == mismatch.first) {\n-            LogPrintf(\" (1)\"); /* Continued */\n+            prefix = \" (1)\";\n         }\n         if (i.first == mismatch.second) {\n-            LogPrintf(\" (2)\"); /* Continued */\n+            prefix = \" (2)\";\n         }\n-        LogPrintf(\" %s\\n\", i.second.ToString());\n+        LogPrintf(\"%s %s\\n\", prefix, i.second.ToString());\n     }\n \n     std::string mutex_a, mutex_b;\n     LogPrintf(\"Current lock order is:\\n\");\n     for (const LockStackItem& i : s2) {\n+        std::string prefix{};\n         if (i.first == mismatch.first) {\n-            LogPrintf(\" (1)\"); /* Continued */\n+            prefix = \" (1)\";\n             mutex_a = i.second.Name();\n         }\n         if (i.first == mismatch.second) {\n-            LogPrintf(\" (2)\"); /* Continued */\n+            prefix = \" (2)\";\n             mutex_b = i.second.Name();\n         }\n-        LogPrintf(\" %s\\n\", i.second.ToString());\n+        LogPrintf(\"%s %s\\n\", prefix, i.second.ToString());\n     }\n     if (g_debug_lockorder_abort) {\n         tfm::format(std::cerr, \"Assertion failed: detected inconsistent lock order for %s, details in debug log.\\n\", s2.back().second.ToString());\n@@ -137,10 +133,11 @@ static void double_lock_detected(const void* mutex, const LockStack& lock_stack)\n     LogPrintf(\"DOUBLE LOCK DETECTED\\n\");\n     LogPrintf(\"Lock order:\\n\");\n     for (const LockStackItem& i : lock_stack) {\n+        std::string prefix{};\n         if (i.first == mutex) {\n-            LogPrintf(\" (*)\"); /* Continued */\n+            prefix = \" (*)\";\n         }\n-        LogPrintf(\" %s\\n\", i.second.ToString());\n+        LogPrintf(\"%s %s\\n\", prefix, i.second.ToString());\n     }\n     if (g_debug_lockorder_abort) {\n         tfm::format(std::cerr,"
      },
      {
        "sha": "6ba63d5e4ded9b1ca6f059a18433f4f15bb3bf15",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_SYNC_H\n #define BITCOIN_SYNC_H\n \n+#include <logging.h>\n+#include <logging/timer.h>\n #include <threadsafety.h>\n #include <util/macros.h>\n \n@@ -126,9 +128,6 @@ using RecursiveMutex = AnnotatedMixin<std::recursive_mutex>;\n /** Wrapped mutex: supports waiting but not recursive locking */\n typedef AnnotatedMixin<std::mutex> Mutex;\n \n-/** Prints a lock contention to the log */\n-void LockContention(const char* pszName, const char* pszFile, int nLine);\n-\n /** Wrapper around std::unique_lock style lock for Mutex. */\n template <typename Mutex, typename Base = typename Mutex::UniqueLock>\n class SCOPED_LOCKABLE UniqueLock : public Base\n@@ -138,7 +137,7 @@ class SCOPED_LOCKABLE UniqueLock : public Base\n     {\n         EnterCritical(pszName, pszFile, nLine, Base::mutex());\n         if (Base::try_lock()) return;\n-        LockContention(pszName, pszFile, nLine); // log the contention\n+        LOG_TIME_MICROS_WITH_CATEGORY(strprintf(\"lock contention %s, %s:%d\", pszName, pszFile, nLine), BCLog::LOCK);\n         Base::lock();\n     }\n "
      },
      {
        "sha": "d03411c3eda99f29c7b110fc54c5a6d211715b57",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -74,3 +74,29 @@ start debugging, just like you would with any other program:\n ```bash\n gdb src/test/test_bitcoin\n ```\n+\n+#### Segmentation faults\n+\n+If you hit a segmentation fault during a test run, you can diagnose where the fault\n+is happening by running `gdb ./src/test/test_bitcoin` and then using the `bt` command\n+within gdb.\n+\n+Another tool that can be used to resolve segmentation faults is\n+[valgrind](https://valgrind.org/).\n+\n+If for whatever reason you want to produce a core dump file for this fault, you can do\n+that as well. By default, the boost test runner will intercept system errors and not\n+produce a core file. To bypass this, add `--catch_system_errors=no` to the\n+`test_bitcoin` arguments and ensure that your ulimits are set properly (e.g. `ulimit -c\n+unlimited`).\n+\n+Running the tests and hitting a segmentation fault should now produce a file called `core`\n+(on Linux platforms, the file name will likely depend on the contents of\n+`/proc/sys/kernel/core_pattern`).\n+\n+You can then explore the core dump using\n+``` bash\n+gdb src/test/test_bitcoin core\n+\n+(gbd) bt  # produce a backtrace for where a segfault occurred\n+```"
      },
      {
        "sha": "01a492a20b8a8633bb9ed291fdee475b20a7d13a",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,13 +5,14 @@\n #include <addrdb.h>\n #include <addrman.h>\n #include <chainparams.h>\n+#include <clientversion.h>\n+#include <hash.h>\n+#include <netbase.h>\n+#include <random.h>\n #include <test/data/asmap.raw.h>\n #include <test/util/setup_common.h>\n #include <util/asmap.h>\n #include <util/string.h>\n-#include <hash.h>\n-#include <netbase.h>\n-#include <random.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -26,7 +27,7 @@ class CAddrManSerializationMock : public CAddrMan\n     virtual void Serialize(CDataStream& s) const = 0;\n \n     CAddrManSerializationMock()\n-        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 100)\n+        : CAddrMan(/* asmap */ std::vector<bool>(), /* deterministic */ true, /* consistency_check_ratio */ 100)\n     {}\n };\n \n@@ -82,10 +83,9 @@ class CAddrManTest : public CAddrMan\n public:\n     explicit CAddrManTest(bool makeDeterministic = true,\n                           std::vector<bool> asmap = std::vector<bool>())\n-        : CAddrMan(makeDeterministic, /* consistency_check_ratio */ 100)\n+        : CAddrMan(asmap, makeDeterministic, /* consistency_check_ratio */ 100)\n     {\n         deterministic = makeDeterministic;\n-        m_asmap = asmap;\n     }\n \n     CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n@@ -1003,7 +1003,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n }\n \n-BOOST_AUTO_TEST_CASE(caddrdb_read)\n+BOOST_AUTO_TEST_CASE(load_addrman)\n {\n     CAddrManUncorrupted addrmanUncorrupted;\n \n@@ -1024,7 +1024,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n \n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n@@ -1038,24 +1038,24 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     BOOST_CHECK(addrman1.size() == 3);\n     BOOST_CHECK(exceptionThrown == false);\n \n-    // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n+    // Test that ReadFromStream creates an addrman with the correct number of addrs.\n     CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n \n-    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n-    BOOST_CHECK(CAddrDB::Read(addrman2, ssPeers2));\n+    ReadFromStream(addrman2, ssPeers2);\n     BOOST_CHECK(addrman2.size() == 3);\n }\n \n \n-BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n+BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n {\n     CAddrManCorrupted addrmanCorrupted;\n \n     // Test that the de-serialization of corrupted addrman throws an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n@@ -1064,16 +1064,16 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     } catch (const std::exception&) {\n         exceptionThrown = true;\n     }\n-    // Even through de-serialization failed addrman is not left in a clean state.\n+    // Even though de-serialization failed addrman is not left in a clean state.\n     BOOST_CHECK(addrman1.size() == 1);\n     BOOST_CHECK(exceptionThrown);\n \n-    // Test that CAddrDB::Read fails if peers.dat is corrupt\n+    // Test that ReadFromStream fails if peers.dat is corrupt\n     CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n \n-    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n-    BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n+    BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n "
      },
      {
        "sha": "114fe3907c6ded3f1c0d52176f680cdc29e1fef6",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <policy/feerate.h>\n \n #include <limits>"
      },
      {
        "sha": "23ef2062ef02265c41d16f3baa81f0257a371ffc",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n     uint160 hash = pubkey.GetID();\n-    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));\n+    filter.insert(hash);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;"
      },
      {
        "sha": "a05d9c668b999da0fc8793ba238ff698139305c8",
        "filename": "src/test/data/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/data/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/data/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,5 +8,5 @@ License\n \n The data files in this directory are distributed under the MIT software\n license, see the accompanying file COPYING or\n-http://www.opensource.org/licenses/mit-license.php.\n+https://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "45ee778b871dd66e68421ae884593194ef3a6c86",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 35,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -23,22 +23,27 @@ void initialize_addrman()\n     SelectParams(CBaseChainParams::REGTEST);\n }\n \n+FUZZ_TARGET_INIT(data_stream_addr_man, initialize_addrman)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n+    CAddrMan addr_man(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    try {\n+        ReadFromStream(addr_man, data_stream);\n+    } catch (const std::exception&) {\n+    }\n+}\n+\n class CAddrManDeterministic : public CAddrMan\n {\n public:\n     FuzzedDataProvider& m_fuzzed_data_provider;\n \n-    explicit CAddrManDeterministic(FuzzedDataProvider& fuzzed_data_provider)\n-        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 0)\n+    explicit CAddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n+        : CAddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n         , m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n         WITH_LOCK(cs, insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n-        if (fuzzed_data_provider.ConsumeBool()) {\n-            m_asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-            if (!SanityCheckASMap(m_asmap)) {\n-                m_asmap.clear();\n-            }\n-        }\n     }\n \n     /**\n@@ -91,7 +96,7 @@ class CAddrManDeterministic : public CAddrMan\n         // 0, 1, 2, 3 corresponding to 0%, 100%, 50%, 33%\n         const size_t n = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n \n-        const size_t num_sources = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(10, 50);\n+        const size_t num_sources = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n         CNetAddr prev_source;\n         // Use insecure_rand inside the loops instead of m_fuzzed_data_provider because when\n         // the latter is exhausted it just returns 0.\n@@ -102,31 +107,12 @@ class CAddrManDeterministic : public CAddrMan\n             for (size_t j = 0; j < num_addresses; ++j) {\n                 const auto addr = CAddress{CService{RandAddr(), 8333}, NODE_NETWORK};\n                 const auto time_penalty = insecure_rand.randrange(100000001);\n-#if 1\n-                // 2.83 sec to fill.\n-                if (n > 0 && mapInfo.size() % n == 0 && mapAddr.find(addr) == mapAddr.end()) {\n-                    // Add to the \"tried\" table (if the bucket slot is free).\n-                    const CAddrInfo dummy{addr, source};\n-                    const int bucket = dummy.GetTriedBucket(nKey, m_asmap);\n-                    const int bucket_pos = dummy.GetBucketPosition(nKey, false, bucket);\n-                    if (vvTried[bucket][bucket_pos] == -1) {\n-                        int id;\n-                        CAddrInfo* addr_info = Create(addr, source, &id);\n-                        vvTried[bucket][bucket_pos] = id;\n-                        addr_info->fInTried = true;\n-                        ++nTried;\n-                    }\n-                } else {\n-                    // Add to the \"new\" table.\n-                    Add_(addr, source, time_penalty);\n-                }\n-#else\n-                // 261.91 sec to fill.\n                 Add_(addr, source, time_penalty);\n+\n                 if (n > 0 && mapInfo.size() % n == 0) {\n                     Good_(addr, false, GetTime());\n                 }\n-#endif\n+\n                 // Add 10% of the addresses from more than one source.\n                 if (insecure_rand.randrange(10) == 0 && prev_source.IsValid()) {\n                     Add_(addr, prev_source, time_penalty);\n@@ -224,11 +210,19 @@ class CAddrManDeterministic : public CAddrMan\n     }\n };\n \n+[[nodiscard]] inline std::vector<bool> ConsumeAsmap(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n+    if (!SanityCheckASMap(asmap, 128)) asmap.clear();\n+    return asmap;\n+}\n+\n FUZZ_TARGET_INIT(addrman, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    auto addr_man_ptr = std::make_unique<CAddrManDeterministic>(fuzzed_data_provider);\n+    std::vector<bool> asmap = ConsumeAsmap(fuzzed_data_provider);\n+    auto addr_man_ptr = std::make_unique<CAddrManDeterministic>(asmap, fuzzed_data_provider);\n     if (fuzzed_data_provider.ConsumeBool()) {\n         const std::vector<uint8_t> serialized_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n         CDataStream ds(serialized_data, SER_DISK, INIT_PROTO_VERSION);\n@@ -237,7 +231,7 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n         try {\n             ds >> *addr_man_ptr;\n         } catch (const std::ios_base::failure&) {\n-            addr_man_ptr = std::make_unique<CAddrManDeterministic>(fuzzed_data_provider);\n+            addr_man_ptr = std::make_unique<CAddrManDeterministic>(asmap, fuzzed_data_provider);\n         }\n     }\n     CAddrManDeterministic& addr_man = *addr_man_ptr;\n@@ -306,9 +300,9 @@ FUZZ_TARGET_INIT(addrman_serdeser, initialize_addrman)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n \n-    CAddrManDeterministic addr_man1{fuzzed_data_provider};\n-    CAddrManDeterministic addr_man2{fuzzed_data_provider};\n-    addr_man2.m_asmap = addr_man1.m_asmap;\n+    std::vector<bool> asmap = ConsumeAsmap(fuzzed_data_provider);\n+    CAddrManDeterministic addr_man1{asmap, fuzzed_data_provider};\n+    CAddrManDeterministic addr_man2{asmap, fuzzed_data_provider};\n \n     CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n "
      },
      {
        "sha": "d402f8632ca4d9f9eeb685058a4ef8c50963b868",
        "filename": "src/test/fuzz/asmap.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/asmap.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <netaddress.h>\n #include <test/fuzz/fuzz.h>\n+#include <util/asmap.h>\n \n #include <cstdint>\n #include <vector>\n@@ -42,7 +43,7 @@ FUZZ_TARGET(asmap)\n             asmap.push_back((buffer[1 + i] >> j) & 1);\n         }\n     }\n-    if (!SanityCheckASMap(asmap)) return;\n+    if (!SanityCheckASMap(asmap, 128)) return;\n \n     const uint8_t* addr_data = buffer.data() + 1 + asmap_size;\n     CNetAddr net_addr;"
      },
      {
        "sha": "87e70861fa29cc8c79bc437bcee57bd227b2081b",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <consensus/tx_check.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>"
      },
      {
        "sha": "01741103e42202f91d6a6975f5d49cf9a0874962",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -25,7 +25,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);\n@@ -103,12 +103,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 connman.RemoveAddedNode(random_string);\n             },\n-            [&] {\n-                const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-                if (SanityCheckASMap(asmap)) {\n-                    connman.SetAsmap(asmap);\n-                }\n-            },\n             [&] {\n                 connman.SetNetworkActive(fuzzed_data_provider.ConsumeBool());\n             },"
      },
      {
        "sha": "53400082abe7ac73f150a86658d71292ae810bb4",
        "filename": "src/test/fuzz/data_stream.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269aeea72eaeb4e2919a1eff0356c10d42959160/src/test/fuzz/data_stream.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269aeea72eaeb4e2919a1eff0356c10d42959160/src/test/fuzz/data_stream.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/data_stream.cpp?ref=269aeea72eaeb4e2919a1eff0356c10d42959160",
        "patch": "@@ -1,26 +0,0 @@\n-// Copyright (c) 2020-2021 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <addrman.h>\n-#include <net.h>\n-#include <test/fuzz/FuzzedDataProvider.h>\n-#include <test/fuzz/fuzz.h>\n-#include <test/fuzz/util.h>\n-#include <test/util/setup_common.h>\n-\n-#include <cstdint>\n-#include <vector>\n-\n-void initialize_data_stream_addr_man()\n-{\n-    static const auto testing_setup = MakeNoLogFileContext<>();\n-}\n-\n-FUZZ_TARGET_INIT(data_stream_addr_man, initialize_data_stream_addr_man)\n-{\n-    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n-    CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n-    CAddrMan addr_man(/* deterministic */ false, /* consistency_check_ratio */ 0);\n-    CAddrDB::Read(addr_man, data_stream);\n-}"
      },
      {
        "sha": "83ae1680e39d45b42966197528e3b6b8f0d8967a",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -188,7 +188,7 @@ FUZZ_TARGET_DESERIALIZE(blockmerkleroot, {\n     BlockMerkleRoot(block, &mutated);\n })\n FUZZ_TARGET_DESERIALIZE(addrman_deserialize, {\n-    CAddrMan am(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan am(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     DeserializeFromFuzzingInput(buffer, am);\n })\n FUZZ_TARGET_DESERIALIZE(blockheader_deserialize, {"
      },
      {
        "sha": "a852f8fb60100b0787273f406f17096499bde740",
        "filename": "src/test/fuzz/fee_rate.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/fee_rate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/fee_rate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fee_rate.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <policy/feerate.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "b5a07c7ba330544062cefc2ee8b3eafbd7a49d7d",
        "filename": "src/test/fuzz/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fees.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <policy/fees.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "b6c40809e3f204631f5d328f195d817a31fcdf31",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n #include <arith_uint256.h>\n #include <compressor.h>\n+#include <consensus/amount.h>\n #include <consensus/merkle.h>\n #include <core_io.h>\n #include <crypto/common.h>\n@@ -23,6 +23,7 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <uint256.h>\n+#include <univalue.h>\n #include <util/check.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "4ad81235540142619087d532f6e9c2a9a6477c2c",
        "filename": "src/test/fuzz/locale.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/locale.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/locale.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/locale.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -50,8 +50,6 @@ FUZZ_TARGET(locale)\n     const bool parseint32_without_locale = ParseInt32(random_string, &parseint32_out_without_locale);\n     int64_t parseint64_out_without_locale;\n     const bool parseint64_without_locale = ParseInt64(random_string, &parseint64_out_without_locale);\n-    const int64_t atoi64_without_locale = atoi64(random_string);\n-    const int atoi_without_locale = atoi(random_string);\n     const int64_t random_int64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const std::string tostring_without_locale = ToString(random_int64);\n     // The variable `random_int32` is no longer used, but the harness still needs to\n@@ -77,10 +75,6 @@ FUZZ_TARGET(locale)\n     if (parseint64_without_locale) {\n         assert(parseint64_out_without_locale == parseint64_out_with_locale);\n     }\n-    const int64_t atoi64_with_locale = atoi64(random_string);\n-    assert(atoi64_without_locale == atoi64_with_locale);\n-    const int atoi_with_locale = atoi(random_string);\n-    assert(atoi_without_locale == atoi_with_locale);\n     const std::string tostring_with_locale = ToString(random_int64);\n     assert(tostring_without_locale == tostring_with_locale);\n     const std::string strprintf_int_with_locale = strprintf(\"%d\", random_int64);"
      },
      {
        "sha": "8304e6fdb87e933253058c81bb0d181072dd81ae",
        "filename": "src/test/fuzz/muhash.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 39,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/muhash.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -12,52 +12,47 @@\n FUZZ_TARGET(muhash)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n-    std::vector<uint8_t> data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    std::vector<uint8_t> data2 = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    if (data.empty()) {\n-        data.resize(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 4096), fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n-    }\n-    if (data2.empty()) {\n-        data2.resize(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 4096), fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n-    }\n-\n-    data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    data2 = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    std::vector<uint8_t> data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+    std::vector<uint8_t> data2{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n \n     MuHash3072 muhash;\n \n-    // Test that MuHash result is consistent independent of order of operations\n     muhash.Insert(data);\n     muhash.Insert(data2);\n \n+    const std::string initial_state_hash{\"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\"};\n     uint256 out;\n-    muhash.Finalize(out);\n-\n-    muhash = MuHash3072();\n-    muhash.Insert(data2);\n-    muhash.Insert(data);\n-\n     uint256 out2;\n-    muhash.Finalize(out2);\n-\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // Test that MuHash result is consistent independent of order of operations\n+            muhash.Finalize(out);\n+\n+            muhash = MuHash3072();\n+            muhash.Insert(data2);\n+            muhash.Insert(data);\n+            muhash.Finalize(out2);\n+        },\n+        [&] {\n+            // Test that multiplication with the initial state never changes the finalized result\n+            muhash.Finalize(out);\n+            MuHash3072 muhash3;\n+            muhash3 *= muhash;\n+            muhash3.Finalize(out2);\n+        },\n+        [&] {\n+            // Test that dividing a MuHash by itself brings it back to it's initial state\n+            muhash /= muhash;\n+            muhash.Finalize(out);\n+            out2 = uint256S(initial_state_hash);\n+        },\n+        [&] {\n+            // Test that removing all added elements brings the object back to it's initial state\n+            muhash.Remove(data);\n+            muhash.Remove(data2);\n+            muhash.Finalize(out);\n+            out2 = uint256S(initial_state_hash);\n+        });\n     assert(out == out2);\n-    MuHash3072 muhash3;\n-    muhash3 *= muhash;\n-    uint256 out3;\n-    muhash3.Finalize(out3);\n-    assert(out == out3);\n-\n-    // Test that removing all added elements brings the object back to it's initial state\n-    muhash /= muhash;\n-    muhash.Finalize(out);\n-\n-    MuHash3072 muhash2;\n-    muhash2.Finalize(out2);\n-\n-    assert(out == out2);\n-\n-    muhash3.Remove(data);\n-    muhash3.Remove(data2);\n-    muhash3.Finalize(out3);\n-    assert(out == out3);\n }"
      },
      {
        "sha": "bd1bb79d0ee39755b1dfc5df34985eed3423b89c",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,6 +14,7 @@\n #include <test/fuzz/util.h>\n #include <test/util/net.h>\n #include <test/util/setup_common.h>\n+#include <util/asmap.h>\n \n #include <cstdint>\n #include <optional>\n@@ -38,12 +39,8 @@ FUZZ_TARGET_INIT(net, initialize_net)\n                 node.CloseSocketDisconnect();\n             },\n             [&] {\n-                const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-                if (!SanityCheckASMap(asmap)) {\n-                    return;\n-                }\n                 CNodeStats stats;\n-                node.copyStats(stats, asmap);\n+                node.CopyStats(stats);\n             },\n             [&] {\n                 const CNode* add_ref_node = node.AddRef();"
      },
      {
        "sha": "85fee062f02ad84b726ab11658f08dc717913299",
        "filename": "src/test/fuzz/parse_numbers.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/parse_numbers.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/parse_numbers.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_numbers.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,9 +14,6 @@ FUZZ_TARGET(parse_numbers)\n \n     (void)ParseMoney(random_string);\n \n-    double d;\n-    (void)ParseDouble(random_string, &d);\n-\n     uint8_t u8;\n     (void)ParseUInt8(random_string, &u8);\n \n@@ -25,13 +22,13 @@ FUZZ_TARGET(parse_numbers)\n \n     int32_t i32;\n     (void)ParseInt32(random_string, &i32);\n-    (void)atoi(random_string);\n+    (void)LocaleIndependentAtoi<int>(random_string);\n \n     uint32_t u32;\n     (void)ParseUInt32(random_string, &u32);\n \n     int64_t i64;\n-    (void)atoi64(random_string);\n+    (void)LocaleIndependentAtoi<int64_t>(random_string);\n     (void)ParseFixedPoint(random_string, 3, &i64);\n     (void)ParseInt64(random_string, &i64);\n "
      },
      {
        "sha": "74c576322a92888e1ecec39bfc8f309326aad0ec",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 45,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -56,46 +56,8 @@ FUZZ_TARGET_INIT(script, initialize_script)\n         assert(script == decompressed_script);\n     }\n \n-    CTxDestination address;\n-    TxoutType type_ret;\n-    std::vector<CTxDestination> addresses;\n-    int required_ret;\n-    bool extract_destinations_ret = ExtractDestinations(script, type_ret, addresses, required_ret);\n-    bool extract_destination_ret = ExtractDestination(script, address);\n-    if (!extract_destinations_ret) {\n-        assert(!extract_destination_ret);\n-        if (type_ret == TxoutType::MULTISIG) {\n-            assert(addresses.empty() && required_ret == 0);\n-        } else {\n-            assert(type_ret == TxoutType::PUBKEY ||\n-                   type_ret == TxoutType::NONSTANDARD ||\n-                   type_ret == TxoutType::NULL_DATA);\n-        }\n-    } else {\n-        assert(required_ret >= 1 && required_ret <= 16);\n-        assert((unsigned long)required_ret == addresses.size());\n-        assert(type_ret == TxoutType::MULTISIG || required_ret == 1);\n-    }\n-    if (type_ret == TxoutType::NONSTANDARD || type_ret == TxoutType::NULL_DATA) {\n-        assert(!extract_destinations_ret);\n-    }\n-    if (!extract_destination_ret) {\n-        assert(type_ret == TxoutType::PUBKEY ||\n-               type_ret == TxoutType::NONSTANDARD ||\n-               type_ret == TxoutType::NULL_DATA ||\n-               type_ret == TxoutType::MULTISIG);\n-    } else {\n-        assert(address == addresses[0]);\n-    }\n-    if (type_ret == TxoutType::NONSTANDARD ||\n-        type_ret == TxoutType::NULL_DATA ||\n-        type_ret == TxoutType::MULTISIG) {\n-        assert(!extract_destination_ret);\n-    }\n-\n     TxoutType which_type;\n     bool is_standard_ret = IsStandard(script, which_type);\n-    assert(type_ret == which_type);\n     if (!is_standard_ret) {\n         assert(which_type == TxoutType::NONSTANDARD ||\n                which_type == TxoutType::NULL_DATA ||\n@@ -112,6 +74,20 @@ FUZZ_TARGET_INIT(script, initialize_script)\n                which_type == TxoutType::NONSTANDARD);\n     }\n \n+    CTxDestination address;\n+    bool extract_destination_ret = ExtractDestination(script, address);\n+    if (!extract_destination_ret) {\n+        assert(which_type == TxoutType::PUBKEY ||\n+               which_type == TxoutType::NONSTANDARD ||\n+               which_type == TxoutType::NULL_DATA ||\n+               which_type == TxoutType::MULTISIG);\n+    }\n+    if (which_type == TxoutType::NONSTANDARD ||\n+        which_type == TxoutType::NULL_DATA ||\n+        which_type == TxoutType::MULTISIG) {\n+        assert(!extract_destination_ret);\n+    }\n+\n     const FlatSigningProvider signing_provider;\n     (void)InferDescriptor(script, signing_provider);\n     (void)IsSegWitOutput(signing_provider, script);\n@@ -133,15 +109,11 @@ FUZZ_TARGET_INIT(script, initialize_script)\n     (void)ScriptToAsmStr(script, true);\n \n     UniValue o1(UniValue::VOBJ);\n-    ScriptPubKeyToUniv(script, o1, true, true);\n-    ScriptPubKeyToUniv(script, o1, true, false);\n+    ScriptPubKeyToUniv(script, o1, true);\n     UniValue o2(UniValue::VOBJ);\n-    ScriptPubKeyToUniv(script, o2, false, true);\n-    ScriptPubKeyToUniv(script, o2, false, false);\n+    ScriptPubKeyToUniv(script, o2, false);\n     UniValue o3(UniValue::VOBJ);\n-    ScriptToUniv(script, o3, true);\n-    UniValue o4(UniValue::VOBJ);\n-    ScriptToUniv(script, o4, false);\n+    ScriptToUniv(script, o3);\n \n     {\n         const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);"
      },
      {
        "sha": "43927772ae775f5d94b95fb49301d2bfab4a1805",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/amount.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <streams.h>"
      },
      {
        "sha": "ab646c68fcf665aa1bbe6b03b5e7ce151008015f",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 159,
        "deletions": 0,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -31,9 +31,105 @@\n #include <version.h>\n \n #include <cstdint>\n+#include <cstdlib>\n #include <string>\n #include <vector>\n \n+namespace {\n+bool LegacyParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size() - 1]))) // No padding allowed\n+        return false;\n+    if (!ValidAsCString(str)) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool LegacyParseInt32(const std::string& str, int32_t* out)\n+{\n+    if (!LegacyParsePrechecks(str))\n+        return false;\n+    char* endp = nullptr;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if (out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+           n >= std::numeric_limits<int32_t>::min() &&\n+           n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool LegacyParseInt64(const std::string& str, int64_t* out)\n+{\n+    if (!LegacyParsePrechecks(str))\n+        return false;\n+    char* endp = nullptr;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if (out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+           n >= std::numeric_limits<int64_t>::min() &&\n+           n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool LegacyParseUInt32(const std::string& str, uint32_t* out)\n+{\n+    if (!LegacyParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char* endp = nullptr;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if (out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+           n <= std::numeric_limits<uint32_t>::max();\n+}\n+\n+bool LegacyParseUInt8(const std::string& str, uint8_t* out)\n+{\n+    uint32_t u32;\n+    if (!LegacyParseUInt32(str, &u32) || u32 > std::numeric_limits<uint8_t>::max()) {\n+        return false;\n+    }\n+    if (out != nullptr) {\n+        *out = static_cast<uint8_t>(u32);\n+    }\n+    return true;\n+}\n+\n+bool LegacyParseUInt64(const std::string& str, uint64_t* out)\n+{\n+    if (!LegacyParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoull accepts these by default if they fit in the range\n+        return false;\n+    char* endp = nullptr;\n+    errno = 0; // strtoull will not set errno if valid\n+    unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n+    if (out) *out = (uint64_t)n;\n+    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n+    // we still have to check that the returned value is within the range of an *uint64_t*.\n+    return endp && *endp == 0 && !errno &&\n+           n <= std::numeric_limits<uint64_t>::max();\n+}\n+\n+// For backwards compatibility checking.\n+int64_t atoi64_legacy(const std::string& str)\n+{\n+    return strtoll(str.c_str(), nullptr, 10);\n+}\n+}; // namespace\n+\n FUZZ_TARGET(string)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n@@ -133,4 +229,67 @@ FUZZ_TARGET(string)\n         const bilingual_str bs2{random_string_2, random_string_1};\n         (void)(bs1 + bs2);\n     }\n+    {\n+        int32_t i32;\n+        int64_t i64;\n+        uint32_t u32;\n+        uint64_t u64;\n+        uint8_t u8;\n+        const bool ok_i32 = ParseInt32(random_string_1, &i32);\n+        const bool ok_i64 = ParseInt64(random_string_1, &i64);\n+        const bool ok_u32 = ParseUInt32(random_string_1, &u32);\n+        const bool ok_u64 = ParseUInt64(random_string_1, &u64);\n+        const bool ok_u8 = ParseUInt8(random_string_1, &u8);\n+\n+        int32_t i32_legacy;\n+        int64_t i64_legacy;\n+        uint32_t u32_legacy;\n+        uint64_t u64_legacy;\n+        uint8_t u8_legacy;\n+        const bool ok_i32_legacy = LegacyParseInt32(random_string_1, &i32_legacy);\n+        const bool ok_i64_legacy = LegacyParseInt64(random_string_1, &i64_legacy);\n+        const bool ok_u32_legacy = LegacyParseUInt32(random_string_1, &u32_legacy);\n+        const bool ok_u64_legacy = LegacyParseUInt64(random_string_1, &u64_legacy);\n+        const bool ok_u8_legacy = LegacyParseUInt8(random_string_1, &u8_legacy);\n+\n+        assert(ok_i32 == ok_i32_legacy);\n+        assert(ok_i64 == ok_i64_legacy);\n+        assert(ok_u32 == ok_u32_legacy);\n+        assert(ok_u64 == ok_u64_legacy);\n+        assert(ok_u8 == ok_u8_legacy);\n+\n+        if (ok_i32) {\n+            assert(i32 == i32_legacy);\n+        }\n+        if (ok_i64) {\n+            assert(i64 == i64_legacy);\n+        }\n+        if (ok_u32) {\n+            assert(u32 == u32_legacy);\n+        }\n+        if (ok_u64) {\n+            assert(u64 == u64_legacy);\n+        }\n+        if (ok_u8) {\n+            assert(u8 == u8_legacy);\n+        }\n+    }\n+\n+    {\n+        const int atoi_result = atoi(random_string_1.c_str());\n+        const int locale_independent_atoi_result = LocaleIndependentAtoi<int>(random_string_1);\n+        const int64_t atoi64_result = atoi64_legacy(random_string_1);\n+        const bool out_of_range = atoi64_result < std::numeric_limits<int>::min() || atoi64_result > std::numeric_limits<int>::max();\n+        if (out_of_range) {\n+            assert(locale_independent_atoi_result == 0);\n+        } else {\n+            assert(atoi_result == locale_independent_atoi_result);\n+        }\n+    }\n+\n+    {\n+        const int64_t atoi64_result = atoi64_legacy(random_string_1);\n+        const int64_t locale_independent_atoi_result = LocaleIndependentAtoi<int64_t>(random_string_1);\n+        assert(atoi64_result == locale_independent_atoi_result || locale_independent_atoi_result == 0);\n+    }\n }"
      },
      {
        "sha": "dc3f9c8b8f9ae4fb7fb0bc13f70240d711dc7994",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,13 +5,19 @@\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/system.h>\n \n #include <cstdint>\n #include <string>\n #include <vector>\n \n namespace {\n+void initialize_system()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>();\n+}\n+\n std::string GetArgumentName(const std::string& name)\n {\n     size_t idx = name.find('=');\n@@ -20,9 +26,8 @@ std::string GetArgumentName(const std::string& name)\n     }\n     return name.substr(0, idx);\n }\n-} // namespace\n \n-FUZZ_TARGET(system)\n+FUZZ_TARGET_INIT(system, initialize_system)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     ArgsManager args_manager{};\n@@ -97,7 +102,7 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n+    (void)args_manager.GetIntArg(s1, i64);\n     (void)args_manager.GetArg(s1, s2);\n     (void)args_manager.GetArgFlags(s1);\n     (void)args_manager.GetArgs(s1);\n@@ -114,3 +119,4 @@ FUZZ_TARGET(system)\n \n     (void)HelpRequested(args_manager);\n }\n+} // namespace"
      },
      {
        "sha": "a21e5cea0cda353ece14cf4e78dac4d54731d2db",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -103,6 +103,6 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n     (void)IsWitnessStandard(tx, coins_view_cache);\n \n     UniValue u(UniValue::VOBJ);\n-    TxToUniv(tx, /* hashBlock */ uint256::ZERO, /* include_addresses */ true, u);\n-    TxToUniv(tx, /* hashBlock */ uint256::ONE, /* include_addresses */ false, u);\n+    TxToUniv(tx, /* hashBlock */ uint256::ZERO, u);\n+    TxToUniv(tx, /* hashBlock */ uint256::ONE, u);\n }"
      },
      {
        "sha": "d83d2924bb1a9cd9e06e03ec13bfb5c109457951",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/amount.h>\n #include <pubkey.h>\n #include <test/fuzz/util.h>\n #include <test/util/script.h>"
      },
      {
        "sha": "1bc6f1db45ac93f5d0a3eff913f1c79b7d253739",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef BITCOIN_TEST_FUZZ_UTIL_H\n #define BITCOIN_TEST_FUZZ_UTIL_H\n \n-#include <amount.h>\n #include <arith_uint256.h>\n #include <attributes.h>\n #include <chainparamsbase.h>\n #include <coins.h>\n #include <compat.h>\n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <merkleblock.h>\n #include <net.h>"
      },
      {
        "sha": "8d2a06f11ae5eaf594df333d72ac1540c8b11126",
        "filename": "src/test/fuzz/utxo_snapshot.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/utxo_snapshot.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/utxo_snapshot.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/utxo_snapshot.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <node/utxo_snapshot.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>"
      },
      {
        "sha": "73a7d24971a4df1a1fd5f379f4dd06442cdfd98f",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <primitives/block.h>\n+#include <util/system.h>\n #include <versionbits.h>\n \n #include <test/fuzz/FuzzedDataProvider.h>"
      },
      {
        "sha": "17e904fcffec129941790aa027f69a4429cb2ee2",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n     BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)"
      },
      {
        "sha": "84ddbc50c668b52673c97e5109c6f6664cac9367",
        "filename": "src/test/logging_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/logging_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/logging_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/logging_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -15,19 +15,19 @@ BOOST_FIXTURE_TEST_SUITE(logging_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(logging_timer)\n {\n     SetMockTime(1);\n-    auto sec_timer = BCLog::Timer<std::chrono::seconds>(\"tests\", \"end_msg\");\n+    auto micro_timer = BCLog::Timer<std::chrono::microseconds>(\"tests\", \"end_msg\");\n     SetMockTime(2);\n-    BOOST_CHECK_EQUAL(sec_timer.LogMsg(\"test secs\"), \"tests: test secs (1.00s)\");\n+    BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000\u03bcs)\");\n \n     SetMockTime(1);\n     auto ms_timer = BCLog::Timer<std::chrono::milliseconds>(\"tests\", \"end_msg\");\n     SetMockTime(2);\n     BOOST_CHECK_EQUAL(ms_timer.LogMsg(\"test ms\"), \"tests: test ms (1000.00ms)\");\n \n     SetMockTime(1);\n-    auto micro_timer = BCLog::Timer<std::chrono::microseconds>(\"tests\", \"end_msg\");\n+    auto sec_timer = BCLog::Timer<std::chrono::seconds>(\"tests\", \"end_msg\");\n     SetMockTime(2);\n-    BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000\u03bcs)\");\n+    BOOST_CHECK_EQUAL(sec_timer.LogMsg(\"test secs\"), \"tests: test secs (1.00s)\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "f9c7d04d6c15a4e6c3726aa0f851ed5a03182c91",
        "filename": "src/test/policy_fee_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/policy_fee_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/policy_fee_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policy_fee_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <policy/fees.h>\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "bf8ff5f5e226dd5067ce9a0e50415a1a992446f3",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 61,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -252,67 +252,6 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     BOOST_CHECK(std::get<WitnessUnknown>(address) == unk);\n }\n \n-BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n-{\n-    CKey keys[3];\n-    CPubKey pubkeys[3];\n-    for (int i = 0; i < 3; i++) {\n-        keys[i].MakeNewKey(true);\n-        pubkeys[i] = keys[i].GetPubKey();\n-    }\n-\n-    CScript s;\n-    TxoutType whichType;\n-    std::vector<CTxDestination> addresses;\n-    int nRequired;\n-\n-    // TxoutType::PUBKEY\n-    s.clear();\n-    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n-    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEY);\n-    BOOST_CHECK_EQUAL(addresses.size(), 1U);\n-    BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(std::get<PKHash>(addresses[0]) == PKHash(pubkeys[0]));\n-\n-    // TxoutType::PUBKEYHASH\n-    s.clear();\n-    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEYHASH);\n-    BOOST_CHECK_EQUAL(addresses.size(), 1U);\n-    BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(std::get<PKHash>(addresses[0]) == PKHash(pubkeys[0]));\n-\n-    // TxoutType::SCRIPTHASH\n-    CScript redeemScript(s); // initialize with leftover P2PKH script\n-    s.clear();\n-    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n-    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TxoutType::SCRIPTHASH);\n-    BOOST_CHECK_EQUAL(addresses.size(), 1U);\n-    BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(std::get<ScriptHash>(addresses[0]) == ScriptHash(redeemScript));\n-\n-    // TxoutType::MULTISIG\n-    s.clear();\n-    s << OP_2 <<\n-        ToByteVector(pubkeys[0]) <<\n-        ToByteVector(pubkeys[1]) <<\n-        OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TxoutType::MULTISIG);\n-    BOOST_CHECK_EQUAL(addresses.size(), 2U);\n-    BOOST_CHECK_EQUAL(nRequired, 2);\n-    BOOST_CHECK(std::get<PKHash>(addresses[0]) == PKHash(pubkeys[0]));\n-    BOOST_CHECK(std::get<PKHash>(addresses[1]) == PKHash(pubkeys[1]));\n-\n-    // TxoutType::NULL_DATA\n-    s.clear();\n-    s << OP_RETURN << std::vector<unsigned char>({75});\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-}\n-\n BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n {\n     CKey keys[3];"
      },
      {
        "sha": "c813fbea321ed4e58f1567e3279a0de6059b73bb",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <checkqueue.h>\n #include <clientversion.h>\n+#include <consensus/amount.h>\n #include <consensus/tx_check.h>\n #include <consensus/validation.h>\n #include <core_io.h>"
      },
      {
        "sha": "afb3ad0cfd06be0e1c8ef074943b9e2bbe0a230f",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -13,14 +13,19 @@\n \n #include <boost/test/unit_test.hpp>\n \n+struct Dersig100Setup : public TestChain100Setup {\n+    Dersig100Setup()\n+        : TestChain100Setup{{\"-testactivationheight=dersig@102\"}} {}\n+};\n+\n bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,\n                        const CCoinsViewCache& inputs, unsigned int flags, bool cacheSigStore,\n                        bool cacheFullScriptStore, PrecomputedTransactionData& txdata,\n                        std::vector<CScriptCheck>* pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n BOOST_AUTO_TEST_SUITE(txvalidationcache_tests)\n \n-BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, Dersig100Setup)\n {\n     // Make sure skipping validation of transactions that were\n     // validated going into the memory pool does not allow\n@@ -153,7 +158,7 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n     }\n }\n \n-BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(checkinputs_test, Dersig100Setup)\n {\n     // Test that passing CheckInputScripts with one set of script flags doesn't imply\n     // that we would pass again with a different set of flags."
      },
      {
        "sha": "81ea4c38f57448057fbcf01c5a6ddc225669dcb0",
        "filename": "src/test/util/chainstate.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/chainstate.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#ifndef BITCOIN_TEST_UTIL_CHAINSTATE_H\n+#define BITCOIN_TEST_UTIL_CHAINSTATE_H\n+\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <node/context.h>\n+#include <node/utxo_snapshot.h>\n+#include <rpc/blockchain.h>\n+#include <validation.h>\n+\n+#include <univalue.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+const auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+/**\n+ * Create and activate a UTXO snapshot, optionally providing a function to\n+ * malleate the snapshot.\n+ */\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+\n+#endif // BITCOIN_TEST_UTIL_CHAINSTATE_H"
      },
      {
        "sha": "97e614379c90efe89f83fae98c2844392e7699f0",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -114,7 +114,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     InitSignatureCache();\n     InitScriptExecutionCache();\n     m_node.chain = interfaces::MakeChain(m_node);\n-    g_wallet_init_interface.Construct(m_node);\n     fCheckBlockIndex = true;\n     static bool noui_connected = false;\n     if (!noui_connected) {\n@@ -193,7 +192,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    m_node.addrman = std::make_unique<CAddrMan>(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n@@ -206,7 +205,8 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n }\n \n-TestChain100Setup::TestChain100Setup()\n+TestChain100Setup::TestChain100Setup(const std::vector<const char*>& extra_args)\n+    : TestingSetup{CBaseChainParams::REGTEST, extra_args}\n {\n     SetMockTime(1598887952);\n     constexpr std::array<unsigned char, 32> vchKey = {\n@@ -235,11 +235,14 @@ void TestChain100Setup::mineBlocks(int num_blocks)\n     }\n }\n \n-CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n+CBlock TestChain100Setup::CreateBlock(\n+    const std::vector<CMutableTransaction>& txns,\n+    const CScript& scriptPubKey,\n+    CChainState& chainstate)\n {\n     const CChainParams& chainparams = Params();\n     CTxMemPool empty_pool;\n-    CBlock block = BlockAssembler(m_node.chainman->ActiveChainstate(), empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n+    CBlock block = BlockAssembler(chainstate, empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n \n     Assert(block.vtx.size() == 1);\n     for (const CMutableTransaction& tx : txns) {\n@@ -249,6 +252,20 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n+    return block;\n+}\n+\n+CBlock TestChain100Setup::CreateAndProcessBlock(\n+    const std::vector<CMutableTransaction>& txns,\n+    const CScript& scriptPubKey,\n+    CChainState* chainstate)\n+{\n+    if (!chainstate) {\n+        chainstate = &Assert(m_node.chainman)->ActiveChainstate();\n+    }\n+\n+    const CChainParams& chainparams = Params();\n+    const CBlock block = this->CreateBlock(txns, scriptPubKey, *chainstate);\n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n \n@@ -305,11 +322,6 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n     return mempool_txn;\n }\n \n-TestChain100Setup::~TestChain100Setup()\n-{\n-    gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n-}\n-\n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction& tx) const\n {\n     return FromTx(MakeTransactionRef(tx));"
      },
      {
        "sha": "7518cdb042c4f4f622b2b0b97773d1254e4b5b42",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -113,15 +113,26 @@ class CScript;\n /**\n  * Testing fixture that pre-creates a 100-block REGTEST-mode block chain\n  */\n-struct TestChain100Setup : public RegTestingSetup {\n-    TestChain100Setup();\n+struct TestChain100Setup : public TestingSetup {\n+    TestChain100Setup(const std::vector<const char*>& extra_args = {});\n \n     /**\n      * Create a new block with just given transactions, coinbase paying to\n      * scriptPubKey, and try to add it to the current chain.\n+     * If no chainstate is specified, default to the active.\n      */\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n-                                 const CScript& scriptPubKey);\n+                                 const CScript& scriptPubKey,\n+                                 CChainState* chainstate = nullptr);\n+\n+    /**\n+     * Create a new block with just given transactions, coinbase paying to\n+     * scriptPubKey.\n+     */\n+    CBlock CreateBlock(\n+        const std::vector<CMutableTransaction>& txns,\n+        const CScript& scriptPubKey,\n+        CChainState& chainstate);\n \n     //! Mine a series of new blocks on the active chain.\n     void mineBlocks(int num_blocks);\n@@ -145,8 +156,6 @@ struct TestChain100Setup : public RegTestingSetup {\n                                                       CAmount output_amount = CAmount(1 * COIN),\n                                                       bool submit = true);\n \n-    ~TestChain100Setup();\n-\n     std::vector<CTransactionRef> m_coinbase_txns; // For convenience, coinbase transactions\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };"
      },
      {
        "sha": "51707310a2d1a1dec6b4da77259dd063e6cf4d7c",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 169,
        "deletions": 33,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -300,9 +300,9 @@ class CheckValueTest : public TestChain100Setup\n         }\n \n         if (expect.default_int) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n         } else {\n             BOOST_CHECK(!success);\n         }\n@@ -432,8 +432,8 @@ static void TestParse(const std::string& str, bool expected_bool, int64_t expect\n     BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99998), expected_int);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99998), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), expected_int);\n }\n \n // Test bool and int parsing.\n@@ -784,9 +784,9 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest3\", -1), -1);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);\n@@ -1474,6 +1474,168 @@ BOOST_AUTO_TEST_CASE(test_ParseInt32)\n     BOOST_CHECK(!ParseInt32(\"32482348723847471234\", nullptr));\n }\n \n+template <typename T>\n+static void RunToIntegralTests()\n+{\n+    BOOST_CHECK(!ToIntegral<T>(STRING_WITH_EMBEDDED_NULL_CHAR));\n+    BOOST_CHECK(!ToIntegral<T>(\" 1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1a\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1.1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1.9\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+01.9\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+\"));\n+    BOOST_CHECK(!ToIntegral<T>(\" -1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\" -1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\" +1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\" +1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+-1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-+1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"++1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"--1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"aap\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"0x1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-32482348723847471234\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"32482348723847471234\"));\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_ToIntegral)\n+{\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"1234\").value(), 1'234);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"0\").value(), 0);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"01234\").value(), 1'234);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"00000000000000001234\").value(), 1'234);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-00000000000000001234\").value(), -1'234);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"00000000000000000000\").value(), 0);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-00000000000000000000\").value(), 0);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-1234\").value(), -1'234);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-1\").value(), -1);\n+\n+    RunToIntegralTests<uint64_t>();\n+    RunToIntegralTests<int64_t>();\n+    RunToIntegralTests<uint32_t>();\n+    RunToIntegralTests<int32_t>();\n+    RunToIntegralTests<uint16_t>();\n+    RunToIntegralTests<int16_t>();\n+    RunToIntegralTests<uint8_t>();\n+    RunToIntegralTests<int8_t>();\n+\n+    BOOST_CHECK(!ToIntegral<int64_t>(\"-9223372036854775809\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<int64_t>(\"-9223372036854775808\").value(), -9'223'372'036'854'775'807LL - 1LL);\n+    BOOST_CHECK_EQUAL(ToIntegral<int64_t>(\"9223372036854775807\").value(), 9'223'372'036'854'775'807);\n+    BOOST_CHECK(!ToIntegral<int64_t>(\"9223372036854775808\"));\n+\n+    BOOST_CHECK(!ToIntegral<uint64_t>(\"-1\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<uint64_t>(\"0\").value(), 0U);\n+    BOOST_CHECK_EQUAL(ToIntegral<uint64_t>(\"18446744073709551615\").value(), 18'446'744'073'709'551'615ULL);\n+    BOOST_CHECK(!ToIntegral<uint64_t>(\"18446744073709551616\"));\n+\n+    BOOST_CHECK(!ToIntegral<int32_t>(\"-2147483649\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-2147483648\").value(), -2'147'483'648LL);\n+    BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"2147483647\").value(), 2'147'483'647);\n+    BOOST_CHECK(!ToIntegral<int32_t>(\"2147483648\"));\n+\n+    BOOST_CHECK(!ToIntegral<uint32_t>(\"-1\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<uint32_t>(\"0\").value(), 0U);\n+    BOOST_CHECK_EQUAL(ToIntegral<uint32_t>(\"4294967295\").value(), 4'294'967'295U);\n+    BOOST_CHECK(!ToIntegral<uint32_t>(\"4294967296\"));\n+\n+    BOOST_CHECK(!ToIntegral<int16_t>(\"-32769\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<int16_t>(\"-32768\").value(), -32'768);\n+    BOOST_CHECK_EQUAL(ToIntegral<int16_t>(\"32767\").value(), 32'767);\n+    BOOST_CHECK(!ToIntegral<int16_t>(\"32768\"));\n+\n+    BOOST_CHECK(!ToIntegral<uint16_t>(\"-1\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<uint16_t>(\"0\").value(), 0U);\n+    BOOST_CHECK_EQUAL(ToIntegral<uint16_t>(\"65535\").value(), 65'535U);\n+    BOOST_CHECK(!ToIntegral<uint16_t>(\"65536\"));\n+\n+    BOOST_CHECK(!ToIntegral<int8_t>(\"-129\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<int8_t>(\"-128\").value(), -128);\n+    BOOST_CHECK_EQUAL(ToIntegral<int8_t>(\"127\").value(), 127);\n+    BOOST_CHECK(!ToIntegral<int8_t>(\"128\"));\n+\n+    BOOST_CHECK(!ToIntegral<uint8_t>(\"-1\"));\n+    BOOST_CHECK_EQUAL(ToIntegral<uint8_t>(\"0\").value(), 0U);\n+    BOOST_CHECK_EQUAL(ToIntegral<uint8_t>(\"255\").value(), 255U);\n+    BOOST_CHECK(!ToIntegral<uint8_t>(\"256\"));\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_LocaleIndependentAtoi)\n+{\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1234\"), 1'234);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"0\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"01234\"), 1'234);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-1234\"), -1'234);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" 1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1 \"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1a\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1.1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1.9\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"+01.9\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-1\"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" -1\"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-1 \"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" -1 \"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"+1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" +1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" +1 \"), 1);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"+-1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-+1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"++1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"--1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"aap\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"0x1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-32482348723847471234\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"32482348723847471234\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"-9223372036854775809\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"-9223372036854775808\"), -9'223'372'036'854'775'807LL - 1LL);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"9223372036854775807\"), 9'223'372'036'854'775'807);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"9223372036854775808\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"18446744073709551615\"), 18'446'744'073'709'551'615ULL);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"18446744073709551616\"), 0U);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-2147483649\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-2147483648\"), -2'147'483'648LL);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"2147483647\"), 2'147'483'647);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"2147483648\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"4294967295\"), 4'294'967'295U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"4294967296\"), 0U);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"-32769\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"-32768\"), -32'768);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"32767\"), 32'767);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"32768\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"65535\"), 65'535U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"65536\"), 0U);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"-129\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"-128\"), -128);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"127\"), 127);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"128\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"255\"), 255U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"256\"), 0U);\n+}\n+\n BOOST_AUTO_TEST_CASE(test_ParseInt64)\n {\n     int64_t n;\n@@ -1639,32 +1801,6 @@ BOOST_AUTO_TEST_CASE(test_ParseUInt64)\n     BOOST_CHECK(!ParseUInt64(\"-1234\", &n));\n }\n \n-BOOST_AUTO_TEST_CASE(test_ParseDouble)\n-{\n-    double n;\n-    // Valid values\n-    BOOST_CHECK(ParseDouble(\"1234\", nullptr));\n-    BOOST_CHECK(ParseDouble(\"0\", &n) && n == 0.0);\n-    BOOST_CHECK(ParseDouble(\"1234\", &n) && n == 1234.0);\n-    BOOST_CHECK(ParseDouble(\"01234\", &n) && n == 1234.0); // no octal\n-    BOOST_CHECK(ParseDouble(\"2147483647\", &n) && n == 2147483647.0);\n-    BOOST_CHECK(ParseDouble(\"-2147483648\", &n) && n == -2147483648.0);\n-    BOOST_CHECK(ParseDouble(\"-1234\", &n) && n == -1234.0);\n-    BOOST_CHECK(ParseDouble(\"1e6\", &n) && n == 1e6);\n-    BOOST_CHECK(ParseDouble(\"-1e6\", &n) && n == -1e6);\n-    // Invalid values\n-    BOOST_CHECK(!ParseDouble(\"\", &n));\n-    BOOST_CHECK(!ParseDouble(\" 1\", &n)); // no padding inside\n-    BOOST_CHECK(!ParseDouble(\"1 \", &n));\n-    BOOST_CHECK(!ParseDouble(\"1a\", &n));\n-    BOOST_CHECK(!ParseDouble(\"aap\", &n));\n-    BOOST_CHECK(!ParseDouble(\"0x1\", &n)); // no hex\n-    BOOST_CHECK(!ParseDouble(STRING_WITH_EMBEDDED_NULL_CHAR, &n));\n-    // Overflow and underflow\n-    BOOST_CHECK(!ParseDouble(\"-1e10000\", nullptr));\n-    BOOST_CHECK(!ParseDouble(\"1e10000\", nullptr));\n-}\n-\n BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n {\n     BOOST_CHECK_EQUAL(FormatParagraph(\"\", 79, 0), \"\");"
      },
      {
        "sha": "726c9ebbb841008a75c2cbf4892bc7a076123583",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,10 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n+#include <chainparams.h>\n #include <random.h>\n #include <uint256.h>\n #include <consensus/validation.h>\n #include <sync.h>\n+#include <rpc/blockchain.h>\n+#include <test/util/chainstate.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n \n@@ -73,4 +76,77 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n     WITH_LOCK(::cs_main, manager.Unload());\n }\n \n+//! Test UpdateTip behavior for both active and background chainstates.\n+//!\n+//! When run on the background chainstate, UpdateTip should do a subset\n+//! of what it does for the active chainstate.\n+BOOST_FIXTURE_TEST_CASE(chainstate_update_tip, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    uint256 curr_tip = ::g_best_block;\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+\n+    // After adding some blocks to the tip, best block should have changed.\n+    BOOST_CHECK(::g_best_block != curr_tip);\n+\n+    BOOST_REQUIRE(CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+\n+    // Ensure our active chain is the snapshot chainstate.\n+    BOOST_CHECK(chainman.IsSnapshotActive());\n+\n+    curr_tip = ::g_best_block;\n+\n+    // Mine a new block on top of the activated snapshot chainstate.\n+    mineBlocks(1);  // Defined in TestChain100Setup.\n+\n+    // After adding some blocks to the snapshot tip, best block should have changed.\n+    BOOST_CHECK(::g_best_block != curr_tip);\n+\n+    curr_tip = ::g_best_block;\n+\n+    CChainState* background_cs;\n+\n+    BOOST_CHECK_EQUAL(chainman.GetAll().size(), 2);\n+    for (CChainState* cs : chainman.GetAll()) {\n+        if (cs != &chainman.ActiveChainstate()) {\n+            background_cs = cs;\n+        }\n+    }\n+    BOOST_CHECK(background_cs);\n+\n+    // Create a block to append to the validation chain.\n+    std::vector<CMutableTransaction> noTxns;\n+    CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    CBlock validation_block = this->CreateBlock(noTxns, scriptPubKey, *background_cs);\n+    auto pblock = std::make_shared<const CBlock>(validation_block);\n+    BlockValidationState state;\n+    CBlockIndex* pindex = nullptr;\n+    const CChainParams& chainparams = Params();\n+    bool newblock = false;\n+\n+    // TODO: much of this is inlined from ProcessNewBlock(); just reuse PNB()\n+    // once it is changed to support multiple chainstates.\n+    {\n+        LOCK(::cs_main);\n+        bool checked = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        BOOST_CHECK(checked);\n+        bool accepted = background_cs->AcceptBlock(\n+            pblock, state, &pindex, true, nullptr, &newblock);\n+        BOOST_CHECK(accepted);\n+    }\n+    // UpdateTip is called here\n+    bool block_added = background_cs->ActivateBestChain(state, pblock);\n+\n+    // Ensure tip is as expected\n+    BOOST_CHECK_EQUAL(background_cs->m_chain.Tip()->GetBlockHash(), validation_block.GetHash());\n+\n+    // g_best_block should be unchanged after adding a block to the background\n+    // validation chain.\n+    BOOST_CHECK(block_added);\n+    BOOST_CHECK_EQUAL(curr_tip, ::g_best_block);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "be9e05a65e6d77fe0977791f2daaff7106a564d0",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 55,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,13 +8,13 @@\n #include <random.h>\n #include <rpc/blockchain.h>\n #include <sync.h>\n+#include <test/util/chainstate.h>\n #include <test/util/setup_common.h>\n #include <uint256.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n #include <tinyformat.h>\n-#include <univalue.h>\n \n #include <vector>\n \n@@ -44,7 +44,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     BOOST_CHECK(!manager.IsSnapshotActive());\n     BOOST_CHECK(!manager.IsSnapshotValidated());\n-    BOOST_CHECK(!manager.IsBackgroundIBD(&c1));\n     auto all = manager.GetAll();\n     BOOST_CHECK_EQUAL_COLLECTIONS(all.begin(), all.end(), chainstates.begin(), chainstates.end());\n \n@@ -57,9 +56,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     auto exp_tip = c1.m_chain.Tip();\n     BOOST_CHECK_EQUAL(active_tip, exp_tip);\n \n-    auto& validated_cs = manager.ValidatedChainstate();\n-    BOOST_CHECK_EQUAL(&validated_cs, &c1);\n-\n     BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\n \n     // Create a snapshot-based chainstate.\n@@ -81,8 +77,8 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     BOOST_CHECK(manager.IsSnapshotActive());\n     BOOST_CHECK(!manager.IsSnapshotValidated());\n-    BOOST_CHECK(manager.IsBackgroundIBD(&c1));\n-    BOOST_CHECK(!manager.IsBackgroundIBD(&c2));\n+    BOOST_CHECK_EQUAL(&c2, &manager.ActiveChainstate());\n+    BOOST_CHECK(&c1 != &manager.ActiveChainstate());\n     auto all2 = manager.GetAll();\n     BOOST_CHECK_EQUAL_COLLECTIONS(all2.begin(), all2.end(), chainstates.begin(), chainstates.end());\n \n@@ -99,16 +95,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     // CCoinsViewCache instances.\n     BOOST_CHECK(exp_tip != exp_tip2);\n \n-    auto& validated_cs2 = manager.ValidatedChainstate();\n-    BOOST_CHECK_EQUAL(&validated_cs2, &c1);\n-\n-    auto& validated_chain = manager.ValidatedChain();\n-    BOOST_CHECK_EQUAL(&validated_chain, &c1.m_chain);\n-\n-    auto validated_tip = manager.ValidatedTip();\n-    exp_tip = c1.m_chain.Tip();\n-    BOOST_CHECK_EQUAL(validated_tip, exp_tip);\n-\n     // Let scheduler events finish running to avoid accessing memory that is going to be unloaded\n     SyncWithValidationInterfaceQueue();\n \n@@ -168,36 +154,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n-auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n-\n-template<typename F = decltype(NoMalleation)>\n-static bool\n-CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n-{\n-    // Write out a snapshot to the test's tempdir.\n-    //\n-    int height;\n-    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n-    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n-    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n-    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n-\n-    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n-    BOOST_TEST_MESSAGE(\n-        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n-\n-    // Read the written snapshot in and then activate it.\n-    //\n-    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n-    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n-    SnapshotMetadata metadata;\n-    auto_infile >> metadata;\n-\n-    malleation(auto_infile, metadata);\n-\n-    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n-}\n-\n //! Test basic snapshot activation.\n BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n {\n@@ -321,27 +277,27 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n     {\n         LOCK(::cs_main);\n         size_t coins_in_active{0};\n-        size_t coins_in_ibd{0};\n-        size_t coins_missing_ibd{0};\n+        size_t coins_in_background{0};\n+        size_t coins_missing_from_background{0};\n \n         for (CChainState* chainstate : chainman.GetAll()) {\n             BOOST_TEST_MESSAGE(\"Checking coins in \" << chainstate->ToString());\n             CCoinsViewCache& coinscache = chainstate->CoinsTip();\n-            bool is_ibd = chainman.IsBackgroundIBD(chainstate);\n+            bool is_background = chainstate != &chainman.ActiveChainstate();\n \n             for (CTransactionRef& txn : m_coinbase_txns) {\n                 COutPoint op{txn->GetHash(), 0};\n                 if (coinscache.HaveCoin(op)) {\n-                    (is_ibd ? coins_in_ibd : coins_in_active)++;\n-                } else if (is_ibd) {\n-                    coins_missing_ibd++;\n+                    (is_background ? coins_in_background : coins_in_active)++;\n+                } else if (is_background) {\n+                    coins_missing_from_background++;\n                 }\n             }\n         }\n \n         BOOST_CHECK_EQUAL(coins_in_active, initial_total_coins + new_coins);\n-        BOOST_CHECK_EQUAL(coins_in_ibd, initial_total_coins);\n-        BOOST_CHECK_EQUAL(coins_missing_ibd, new_coins);\n+        BOOST_CHECK_EQUAL(coins_in_background, initial_total_coins);\n+        BOOST_CHECK_EQUAL(coins_missing_from_background, new_coins);\n     }\n \n     // Snapshot should refuse to load after one has already loaded."
      },
      {
        "sha": "9136c497ea004a797c6b28a8ce9413f00c97a0b0",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,7 +9,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, ChainTestingSetup)\n \n //! Test utilities for detecting when we need to flush the coins cache based\n //! on estimated memory usage.\n@@ -20,7 +20,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n {\n     CTxMemPool mempool;\n     BlockManager blockman{};\n-    CChainState chainstate{&mempool, blockman};\n+    CChainState chainstate{&mempool, blockman, *Assert(m_node.chainman)};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n "
      },
      {
        "sha": "ca52ecba2ff48d1849dfccf2c028bf8d6aa21834",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <consensus/amount.h>\n #include <net.h>\n #include <signet.h>\n #include <uint256.h>"
      },
      {
        "sha": "69d0273e7937a06325ff4433502041dd05870f50",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -11,6 +11,7 @@\n #include <netaddress.h>\n #include <node/ui_interface.h>\n #include <sync.h>\n+#include <tinyformat.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <warnings.h>\n@@ -74,7 +75,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         int64_t nMedian = vTimeOffsets.median();\n         std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n-        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n+        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetIntArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n         if (nMedian >= -max_adjustment && nMedian <= max_adjustment) {\n             nTimeOffset = nMedian;\n         } else {\n@@ -98,11 +99,12 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         }\n \n         if (LogAcceptCategory(BCLog::NET)) {\n+            std::string log_message{\"time data samples: \"};\n             for (const int64_t n : vSorted) {\n-                LogPrint(BCLog::NET, \"%+d  \", n); /* Continued */\n+                log_message += strprintf(\"%+d  \", n);\n             }\n-            LogPrint(BCLog::NET, \"|  \"); /* Continued */\n-            LogPrint(BCLog::NET, \"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset / 60);\n+            log_message += strprintf(\"|  median offset = %+d  (%+d minutes)\", nTimeOffset, nTimeOffset / 60);\n+            LogPrint(BCLog::NET, \"%s\\n\", log_message);\n         }\n     }\n }"
      },
      {
        "sha": "f9caf48df86ab59f758877bbfb22fdba3d5812c3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,6 +14,7 @@\n #include <netbase.h>\n #include <util/readwritefile.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n #include <util/time.h>\n@@ -83,7 +84,7 @@ void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n         if (s.size() < 4) // Short line\n             continue;\n         // <status>(-|+| )<data><CRLF>\n-        self->message.code = atoi(s.substr(0,3));\n+        self->message.code = LocaleIndependentAtoi<int>(s.substr(0,3));\n         self->message.lines.push_back(s.substr(4));\n         char ch = s[3]; // '-','+' or ' '\n         if (ch == ' ') {\n@@ -585,6 +586,7 @@ static std::thread torControlThread;\n \n static void TorControlThread(CService onion_service_target)\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TOR_CONTROL);\n     TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), onion_service_target);\n \n     event_base_dispatch(gBase);"
      },
      {
        "sha": "3839c9083ce4855056c8ba731478f01c0457945c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <txdb.h>\n \n+#include <chain.h>\n #include <node/ui_interface.h>\n #include <pow.h>\n #include <random.h>\n@@ -27,6 +28,28 @@ static constexpr uint8_t DB_FLAG{'F'};\n static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n static constexpr uint8_t DB_LAST_BLOCK{'l'};\n \n+// Keys used in previous version that might still be found in the DB:\n+static constexpr uint8_t DB_TXINDEX_BLOCK{'T'};\n+//               uint8_t DB_TXINDEX{'t'}\n+\n+std::optional<bilingual_str> CheckLegacyTxindex(CBlockTreeDB& block_tree_db)\n+{\n+    CBlockLocator ignored{};\n+    if (block_tree_db.Read(DB_TXINDEX_BLOCK, ignored)) {\n+        return _(\"The -txindex upgrade started by a previous version can not be completed. Restart with the previous version or run a full -reindex.\");\n+    }\n+    bool txindex_legacy_flag{false};\n+    block_tree_db.ReadFlag(\"txindex\", txindex_legacy_flag);\n+    if (txindex_legacy_flag) {\n+        // Disable legacy txindex and warn once about occupied disk space\n+        if (!block_tree_db.WriteFlag(\"txindex\", false)) {\n+            return Untranslated(\"Failed to write block index db flag 'txindex'='0'\");\n+        }\n+        return _(\"The block index db contains a legacy 'txindex'. To clear the occupied disk space, run a full -reindex, otherwise ignore this error. This error message will not be displayed again.\");\n+    }\n+    return std::nullopt;\n+}\n+\n namespace {\n \n struct CoinEntry {\n@@ -84,8 +107,8 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n-    size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-    int crash_simulate = gArgs.GetArg(\"-dbcrashratio\", 0);\n+    size_t batch_size = (size_t)gArgs.GetIntArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = gArgs.GetIntArg(\"-dbcrashratio\", 0);\n     assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();"
      },
      {
        "sha": "1bdce711264a3df7541c671007b56f67948c9c25",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,17 +8,20 @@\n \n #include <coins.h>\n #include <dbwrapper.h>\n-#include <chain.h>\n-#include <primitives/block.h>\n \n #include <memory>\n+#include <optional>\n #include <string>\n #include <utility>\n #include <vector>\n \n+class CBlockFileInfo;\n class CBlockIndex;\n-class CCoinsViewDBCursor;\n class uint256;\n+namespace Consensus {\n+struct Params;\n+};\n+struct bilingual_str;\n \n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 450;\n@@ -86,4 +89,6 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+std::optional<bilingual_str> CheckLegacyTxindex(CBlockTreeDB& block_tree_db);\n+\n #endif // BITCOIN_TXDB_H"
      },
      {
        "sha": "5a93f30c8a31134d934abcd0382078a9b073615d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -21,23 +21,23 @@\n #include <cmath>\n #include <optional>\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, unsigned int _entryHeight,\n-                                 bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n-    : tx(_tx), nFee(_nFee), nTxWeight(GetTransactionWeight(*tx)), nUsageSize(RecursiveDynamicUsage(tx)), nTime(_nTime), entryHeight(_entryHeight),\n-    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n-{\n-    nCountWithDescendants = 1;\n-    nSizeWithDescendants = GetTxSize();\n-    nModFeesWithDescendants = nFee;\n-\n-    feeDelta = 0;\n-\n-    nCountWithAncestors = 1;\n-    nSizeWithAncestors = GetTxSize();\n-    nModFeesWithAncestors = nFee;\n-    nSigOpCostWithAncestors = sigOpCost;\n-}\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& tx, CAmount fee,\n+                                 int64_t time, unsigned int entry_height,\n+                                 bool spends_coinbase, int64_t sigops_cost, LockPoints lp)\n+    : tx{tx},\n+      nFee{fee},\n+      nTxWeight(GetTransactionWeight(*tx)),\n+      nUsageSize{RecursiveDynamicUsage(tx)},\n+      nTime{time},\n+      entryHeight{entry_height},\n+      spendsCoinbase{spends_coinbase},\n+      sigOpCost{sigops_cost},\n+      lockPoints{lp},\n+      nSizeWithDescendants{GetTxSize()},\n+      nModFeesWithDescendants{nFee},\n+      nSizeWithAncestors{GetTxSize()},\n+      nModFeesWithAncestors{nFee},\n+      nSigOpCostWithAncestors{sigOpCost} {}\n \n void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n {\n@@ -924,7 +924,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n             ++nTransactionsUpdated;\n         }\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s feerate += %s\\n\", hash.ToString(), FormatMoney(nFeeDelta));\n+    LogPrintf(\"PrioritiseTransaction: %s fee += %s\\n\", hash.ToString(), FormatMoney(nFeeDelta));\n }\n \n void CTxMemPool::ApplyDelta(const uint256& hash, CAmount &nFeeDelta) const\n@@ -1174,12 +1174,14 @@ uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {\n     return maximum;\n }\n \n-void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const {\n+void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* const ancestorsize, CAmount* const ancestorfees) const {\n     LOCK(cs);\n     auto it = mapTx.find(txid);\n     ancestors = descendants = 0;\n     if (it != mapTx.end()) {\n         ancestors = it->GetCountWithAncestors();\n+        if (ancestorsize) *ancestorsize = it->GetSizeWithAncestors();\n+        if (ancestorfees) *ancestorfees = it->GetModFeesWithAncestors();\n         descendants = CalculateDescendantMaximum(it);\n     }\n }"
      },
      {
        "sha": "0be51db18173387a64069c0a0d35327cadf99b8d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,8 +14,8 @@\n #include <utility>\n #include <vector>\n \n-#include <amount.h>\n #include <coins.h>\n+#include <consensus/amount.h>\n #include <indirectmap.h>\n #include <policy/feerate.h>\n #include <policy/packages.h>\n@@ -37,19 +37,16 @@ extern RecursiveMutex cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n-struct LockPoints\n-{\n+struct LockPoints {\n     // Will be set to the blockchain height and median time past\n     // values that would be necessary to satisfy all relative locktime\n     // constraints (BIP68) of this tx given our view of block chain history\n-    int height;\n-    int64_t time;\n+    int height{0};\n+    int64_t time{0};\n     // As long as the current chain descends from the highest height block\n     // containing one of the inputs used in the calculation, then the cached\n     // values are still valid even after a reorg.\n-    CBlockIndex* maxInputBlock;\n-\n-    LockPoints() : height(0), time(0), maxInputBlock(nullptr) { }\n+    CBlockIndex* maxInputBlock{nullptr};\n };\n \n struct CompareIteratorByHash {\n@@ -98,27 +95,27 @@ class CTxMemPoolEntry\n     const unsigned int entryHeight; //!< Chain height when entering the mempool\n     const bool spendsCoinbase;      //!< keep track of transactions that spend a coinbase\n     const int64_t sigOpCost;        //!< Total sigop cost\n-    int64_t feeDelta;          //!< Used for determining the priority of the transaction for mining in a block\n+    int64_t feeDelta{0};            //!< Used for determining the priority of the transaction for mining in a block\n     LockPoints lockPoints;     //!< Track the height and time at which tx was final\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n     // descendants as well.\n-    uint64_t nCountWithDescendants;  //!< number of descendant transactions\n+    uint64_t nCountWithDescendants{1}; //!< number of descendant transactions\n     uint64_t nSizeWithDescendants;   //!< ... and size\n     CAmount nModFeesWithDescendants; //!< ... and total fees (all including us)\n \n     // Analogous statistics for ancestor transactions\n-    uint64_t nCountWithAncestors;\n+    uint64_t nCountWithAncestors{1};\n     uint64_t nSizeWithAncestors;\n     CAmount nModFeesWithAncestors;\n     int64_t nSigOpCostWithAncestors;\n \n public:\n-    CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, unsigned int _entryHeight,\n-                    bool spendsCoinbase,\n-                    int64_t nSigOpsCost, LockPoints lp);\n+    CTxMemPoolEntry(const CTransactionRef& tx, CAmount fee,\n+                    int64_t time, unsigned int entry_height,\n+                    bool spends_coinbase,\n+                    int64_t sigops_cost, LockPoints lp);\n \n     const CTransaction& GetTx() const { return *this->tx; }\n     CTransactionRef GetSharedTx() const { return this->tx; }\n@@ -748,8 +745,10 @@ class CTxMemPool\n     /**\n      * Calculate the ancestor and descendant count for the given transaction.\n      * The counts include the transaction itself.\n+     * When ancestors is non-zero (ie, the transaction itself is in the mempool),\n+     * ancestorsize and ancestorfees will also be set to the appropriate values.\n      */\n-    void GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const;\n+    void GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) const;\n \n     /** @returns true if the mempool is fully loaded */\n     bool IsLoaded() const;"
      },
      {
        "sha": "5695c620125c9a27372621176b4cc54aba8d00ca",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,10 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <util/asmap.h>\n+\n+#include <clientversion.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <streams.h>\n+\n+#include <cassert>\n #include <map>\n #include <vector>\n-#include <assert.h>\n-#include <crypto/common.h>\n \n namespace {\n \n@@ -183,3 +189,31 @@ bool SanityCheckASMap(const std::vector<bool>& asmap, int bits)\n     }\n     return false; // Reached EOF without RETURN instruction\n }\n+\n+std::vector<bool> DecodeAsmap(fs::path path)\n+{\n+    std::vector<bool> bits;\n+    FILE *filestr = fsbridge::fopen(path, \"rb\");\n+    CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"Failed to open asmap file from disk\\n\");\n+        return bits;\n+    }\n+    fseek(filestr, 0, SEEK_END);\n+    int length = ftell(filestr);\n+    LogPrintf(\"Opened asmap file %s (%d bytes) from disk\\n\", path, length);\n+    fseek(filestr, 0, SEEK_SET);\n+    uint8_t cur_byte;\n+    for (int i = 0; i < length; ++i) {\n+        file >> cur_byte;\n+        for (int bit = 0; bit < 8; ++bit) {\n+            bits.push_back((cur_byte >> bit) & 1);\n+        }\n+    }\n+    if (!SanityCheckASMap(bits, 128)) {\n+        LogPrintf(\"Sanity check of asmap file %s failed\\n\", path);\n+        return {};\n+    }\n+    return bits;\n+}\n+"
      },
      {
        "sha": "810d70b9a1af1389b70af3bb95042c34d6a44612",
        "filename": "src/util/asmap.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/asmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/asmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,11 +5,16 @@\n #ifndef BITCOIN_UTIL_ASMAP_H\n #define BITCOIN_UTIL_ASMAP_H\n \n-#include <stdint.h>\n+#include <fs.h>\n+\n+#include <cstdint>\n #include <vector>\n \n uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip);\n \n bool SanityCheckASMap(const std::vector<bool>& asmap, int bits);\n \n+/** Read asmap from provided binary file */\n+std::vector<bool> DecodeAsmap(fs::path path);\n+\n #endif // BITCOIN_UTIL_ASMAP_H"
      },
      {
        "sha": "6776e7785b2729c10fd45798f07694f6e526d1f2",
        "filename": "src/util/getuniquepath.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/getuniquepath.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/getuniquepath.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/getuniquepath.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <random.h>\n #include <fs.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "1aed7daacf6ac150334408604e3e45fd21b8c900",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n \n #include <util/moneystr.h>\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -77,8 +77,7 @@ std::optional<CAmount> ParseMoney(const std::string& money_string)\n         return std::nullopt;\n     if (nUnits < 0 || nUnits > COIN)\n         return std::nullopt;\n-    int64_t nWhole = atoi64(strWhole);\n-\n+    int64_t nWhole = LocaleIndependentAtoi<int64_t>(strWhole);\n     CAmount value = nWhole * COIN + nUnits;\n \n     if (!MoneyRange(value)) {"
      },
      {
        "sha": "f37dc1cffdaa7746b59ec608d8078366072b9f08",
        "filename": "src/util/moneystr.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/moneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/moneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,8 +9,8 @@\n #ifndef BITCOIN_UTIL_MONEYSTR_H\n #define BITCOIN_UTIL_MONEYSTR_H\n \n-#include <amount.h>\n #include <attributes.h>\n+#include <consensus/amount.h>\n \n #include <optional>\n #include <string>"
      },
      {
        "sha": "aa522d8bfb21cccbf6158cbe3381661a415568a6",
        "filename": "src/util/rbf.h",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,17 +9,15 @@\n \n class CTransaction;\n \n-static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n+static constexpr uint32_t MAX_BIP125_RBF_SEQUENCE{0xfffffffd};\n \n-/** Check whether the sequence numbers on this transaction are signaling\n-* opt-in to replace-by-fee, according to BIP 125.\n-* Allow opt-out of transaction replacement by setting\n-* nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+/** Check whether the sequence numbers on this transaction are signaling opt-in to replace-by-fee,\n+ * according to BIP 125.  Allow opt-out of transaction replacement by setting nSequence >\n+ * MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n *\n-* SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n-* non-replaceable transactions. All inputs rather than just one\n-* is for the sake of multi-party protocols, where we don't\n-* want a single party to be able to disable replacement. */\n-bool SignalsOptInRBF(const CTransaction &tx);\n+* SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by non-replaceable transactions. All\n+* inputs rather than just one is for the sake of multi-party protocols, where we don't want a single\n+* party to be able to disable replacement by opting out in their own input. */\n+bool SignalsOptInRBF(const CTransaction& tx);\n \n #endif // BITCOIN_UTIL_RBF_H"
      },
      {
        "sha": "1a4d67a65eeed315b4a73915022b2e82fdb74b2b",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -10,12 +10,14 @@\n #include <util/system.h>\n #include <util/time.h>\n \n-#include <codecvt>\n-#include <cwchar>\n-#include <locale>\n #include <stdexcept>\n #include <string>\n \n+#ifdef WIN32\n+#include <codecvt>\n+#include <locale>\n+#endif\n+\n #ifdef USE_POLL\n #include <poll.h>\n #endif"
      },
      {
        "sha": "15bd07b374e2858dc33d3c3cdd8a0d8e8444edcb",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 105,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -11,8 +11,7 @@\n #include <algorithm>\n #include <cstdlib>\n #include <cstring>\n-#include <errno.h>\n-#include <limits>\n+#include <optional>\n \n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n@@ -282,118 +281,55 @@ std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n-[[nodiscard]] static bool ParsePrechecks(const std::string& str)\n+namespace {\n+template <typename T>\n+bool ParseIntegral(const std::string& str, T* out)\n {\n-    if (str.empty()) // No empty string allowed\n+    static_assert(std::is_integral<T>::value);\n+    // Replicate the exact behavior of strtol/strtoll/strtoul/strtoull when\n+    // handling leading +/- for backwards compatibility.\n+    if (str.length() >= 2 && str[0] == '+' && str[1] == '-') {\n         return false;\n-    if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (!ValidAsCString(str)) // No embedded NUL characters allowed\n+    }\n+    const std::optional<T> opt_int = ToIntegral<T>((!str.empty() && str[0] == '+') ? str.substr(1) : str);\n+    if (!opt_int) {\n         return false;\n+    }\n+    if (out != nullptr) {\n+        *out = *opt_int;\n+    }\n     return true;\n }\n+}; // namespace\n \n-bool ParseInt32(const std::string& str, int32_t *out)\n+bool ParseInt32(const std::string& str, int32_t* out)\n {\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n+    return ParseIntegral<int32_t>(str, out);\n }\n \n-bool ParseInt64(const std::string& str, int64_t *out)\n+bool ParseInt64(const std::string& str, int64_t* out)\n {\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n+    return ParseIntegral<int64_t>(str, out);\n }\n \n-bool ParseUInt8(const std::string& str, uint8_t *out)\n+bool ParseUInt8(const std::string& str, uint8_t* out)\n {\n-    uint32_t u32;\n-    if (!ParseUInt32(str, &u32) || u32 > std::numeric_limits<uint8_t>::max()) {\n-        return false;\n-    }\n-    if (out != nullptr) {\n-        *out = static_cast<uint8_t>(u32);\n-    }\n-    return true;\n+    return ParseIntegral<uint8_t>(str, out);\n }\n \n bool ParseUInt16(const std::string& str, uint16_t* out)\n {\n-    uint32_t u32;\n-    if (!ParseUInt32(str, &u32) || u32 > std::numeric_limits<uint16_t>::max()) {\n-        return false;\n-    }\n-    if (out != nullptr) {\n-        *out = static_cast<uint16_t>(u32);\n-    }\n-    return true;\n+    return ParseIntegral<uint16_t>(str, out);\n }\n \n-bool ParseUInt32(const std::string& str, uint32_t *out)\n+bool ParseUInt32(const std::string& str, uint32_t* out)\n {\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtoul will not set errno if valid\n-    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n-    if(out) *out = (uint32_t)n;\n-    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint32_t>::max();\n-}\n-\n-bool ParseUInt64(const std::string& str, uint64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoull accepts these by default if they fit in the range\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtoull will not set errno if valid\n-    unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n-    if(out) *out = (uint64_t)n;\n-    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *uint64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint64_t>::max();\n+    return ParseIntegral<uint32_t>(str, out);\n }\n \n-\n-bool ParseDouble(const std::string& str, double *out)\n+bool ParseUInt64(const std::string& str, uint64_t* out)\n {\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n+    return ParseIntegral<uint64_t>(str, out);\n }\n \n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n@@ -437,20 +373,6 @@ std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n     return out.str();\n }\n \n-int64_t atoi64(const std::string& str)\n-{\n-#ifdef _MSC_VER\n-    return _atoi64(str.c_str());\n-#else\n-    return strtoll(str.c_str(), nullptr, 10);\n-#endif\n-}\n-\n-int atoi(const std::string& str)\n-{\n-    return atoi(str.c_str());\n-}\n-\n /** Upper bound for mantissa.\n  * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer.\n  * Larger integers cannot consist of arbitrary combinations of 0-9:"
      },
      {
        "sha": "1f7762aeef8644645e3404af672163ebb39a8b13",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 50,
        "deletions": 9,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -11,9 +11,12 @@\n \n #include <attributes.h>\n #include <span.h>\n+#include <util/string.h>\n \n+#include <charconv>\n #include <cstdint>\n #include <iterator>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -66,8 +69,33 @@ std::string EncodeBase32(Span<const unsigned char> input, bool pad = true);\n std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut);\n-int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+// LocaleIndependentAtoi is provided for backwards compatibility reasons.\n+//\n+// New code should use the ParseInt64/ParseUInt64/ParseInt32/ParseUInt32 functions\n+// which provide parse error feedback.\n+//\n+// The goal of LocaleIndependentAtoi is to replicate the exact defined behaviour\n+// of atoi and atoi64 as they behave under the \"C\" locale.\n+template <typename T>\n+T LocaleIndependentAtoi(const std::string& str)\n+{\n+    static_assert(std::is_integral<T>::value);\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;\n+    }\n+    return result;\n+}\n \n /**\n  * Tests if the given character is a decimal digit.\n@@ -94,6 +122,26 @@ constexpr inline bool IsSpace(char c) noexcept {\n     return c == ' ' || c == '\\f' || c == '\\n' || c == '\\r' || c == '\\t' || c == '\\v';\n }\n \n+/**\n+ * Convert string to integral type T. Leading whitespace, a leading +, or any\n+ * trailing character fail the parsing. The required format expressed as regex\n+ * is `-?[0-9]+`.\n+ *\n+ * @returns std::nullopt if the entire string could not be parsed, or if the\n+ *   parsed value is not in the range representable by the type T.\n+ */\n+template <typename T>\n+std::optional<T> ToIntegral(const std::string& str)\n+{\n+    static_assert(std::is_integral<T>::value);\n+    T result;\n+    const auto [first_nonmatching, error_condition] = std::from_chars(str.data(), str.data() + str.size(), result);\n+    if (first_nonmatching != str.data() + str.size() || error_condition != std::errc{}) {\n+        return std::nullopt;\n+    }\n+    return result;\n+}\n+\n /**\n  * Convert string to signed 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n@@ -136,13 +184,6 @@ constexpr inline bool IsSpace(char c) noexcept {\n  */\n [[nodiscard]] bool ParseUInt64(const std::string& str, uint64_t *out);\n \n-/**\n- * Convert string to double with strict parse error feedback.\n- * @returns true if the entire string could be parsed as valid double,\n- *   false if not the entire string could be parsed or when overflow or underflow occurred.\n- */\n-[[nodiscard]] bool ParseDouble(const std::string& str, double *out);\n-\n /**\n  * Convert a span of bytes to a lower-case hexadecimal string.\n  */"
      },
      {
        "sha": "c4006cbd3cc8c4055b37a4735a7c472778bf6e85",
        "filename": "src/util/syscall_sandbox.cpp",
        "status": "added",
        "additions": 882,
        "deletions": 0,
        "changes": 882,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/syscall_sandbox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/syscall_sandbox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };\n+    // Do not allow abilities to be regained after being dropped.\n+    //\n+    // PR_SET_NO_NEW_PRIVS documentation: <https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html>\n+    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) != 0) {\n+        throw std::runtime_error(\"Syscall sandbox enforcement failed: prctl(PR_SET_NO_NEW_PRIVS)\");\n+    }\n+    // Install seccomp-bpf syscall filter.\n+    //\n+    // PR_SET_SECCOMP documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+    if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog) != 0) {\n+        throw std::runtime_error(\"Syscall sandbox enforcement failed: prctl(PR_SET_SECCOMP)\");\n+    }\n+\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    LogPrint(BCLog::UTIL, \"Syscall filter installed for thread \\\"%s\\\"\\n\", thread_name);\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+}"
      },
      {
        "sha": "0a0c964f942f0d83803d8fe19810f19022eddc50",
        "filename": "src/util/syscall_sandbox.h",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/syscall_sandbox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/syscall_sandbox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+\n+    // 2. Steady state (non-initialization, non-shutdown)\n+    MESSAGE_HANDLER,\n+    NET,\n+    NET_ADD_CONNECTION,\n+    NET_HTTP_SERVER,\n+    NET_HTTP_SERVER_WORKER,\n+    NET_OPEN_CONNECTION,\n+    SCHEDULER,\n+    TOR_CONTROL,\n+    TX_INDEX,\n+    VALIDATION_SCRIPT_CHECK,\n+\n+    // 3. Shutdown\n+    SHUTOFF,\n+};\n+\n+//! Force the current thread (and threads created from the current thread) into a restricted-service\n+//! operating mode where only a subset of all syscalls are available.\n+//!\n+//! Subsequent calls to this function can reduce the abilities further, but abilities can never be\n+//! regained.\n+//!\n+//! This function is a no-op unless SetupSyscallSandbox(...) has been called.\n+//!\n+//! SetupSyscallSandbox(...) is called during bitcoind initialization if Bitcoin Core was compiled\n+//! with seccomp-bpf support (--with-seccomp) *and* the parameter -sandbox=<mode> was passed to\n+//! bitcoind.\n+//!\n+//! This experimental feature is available under Linux x86_64 only.\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+//! Setup and enable the experimental syscall sandbox for the running process.\n+//!\n+//! SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION) is called as part of\n+//! SetupSyscallSandbox(...).\n+[[nodiscard]] bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating);\n+\n+//! Invoke a disallowed syscall. Use for testing purposes.\n+void TestDisallowedSandboxCall();\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+#endif // BITCOIN_UTIL_SYSCALL_SANDBOX_H"
      },
      {
        "sha": "79c08816fa69b70d72a4465dee109d803e0fff63",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -158,16 +158,14 @@ std::streampos GetFileSize(const char* path, std::streamsize max) {\n /**\n  * Interpret a string argument as a boolean.\n  *\n- * The definition of atoi() requires that non-numeric string values like \"foo\",\n- * return 0. This means that if a user unintentionally supplies a non-integer\n- * argument here, the return value is always false. This means that -foo=false\n- * does what the user probably expects, but -foo=true is well defined but does\n- * not do what they probably expected.\n+ * The definition of LocaleIndependentAtoi<int>() requires that non-numeric string values\n+ * like \"foo\", return 0. This means that if a user unintentionally supplies a\n+ * non-integer argument here, the return value is always false. This means that\n+ * -foo=false does what the user probably expects, but -foo=true is well defined\n+ * but does not do what they probably expected.\n  *\n- * The return value of atoi() is undefined when given input not representable as\n- * an int. On most systems this means string value between \"-2147483648\" and\n- * \"2147483647\" are well defined (this method will return true). Setting\n- * -txindex=2147483648 on most systems, however, is probably undefined.\n+ * The return value of LocaleIndependentAtoi<int>(...) is zero when given input not\n+ * representable as an int.\n  *\n  * For a more extensive discussion of this topic (and a wide range of opinions\n  * on the Right Way to change this code), see PR12713.\n@@ -176,7 +174,7 @@ static bool InterpretBool(const std::string& strValue)\n {\n     if (strValue.empty())\n         return true;\n-    return (atoi(strValue) != 0);\n+    return (LocaleIndependentAtoi<int>(strValue) != 0);\n }\n \n static std::string SettingName(const std::string& arg)\n@@ -591,10 +589,10 @@ std::string ArgsManager::GetArg(const std::string& strArg, const std::string& st\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n-int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n+int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : LocaleIndependentAtoi<int64_t>(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n@@ -1306,7 +1304,7 @@ void SetupEnvironment()\n #endif\n     // On most POSIX systems (e.g. Linux, but not BSD) the environment's locale\n     // may be invalid, in which case the \"C.UTF-8\" locale is used as fallback.\n-#if !defined(WIN32) && !defined(MAC_OSX) && !defined(__FreeBSD__) && !defined(__OpenBSD__)\n+#if !defined(WIN32) && !defined(MAC_OSX) && !defined(__FreeBSD__) && !defined(__OpenBSD__) && !defined(__NetBSD__)\n     try {\n         std::locale(\"\"); // Raises a runtime error if current locale is invalid\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "2e217f6f90c25605523224e6b75a7fcc96fa250b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -327,7 +327,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;\n \n     /**\n      * Return boolean argument or default value"
      },
      {
        "sha": "0047b00026b48443e4897c25440ac5354503cead",
        "filename": "src/util/types.h",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/util/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/types.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,11 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_TYPES_H\n+#define BITCOIN_UTIL_TYPES_H\n+\n+template <class>\n+inline constexpr bool ALWAYS_FALSE{false};\n+\n+#endif // BITCOIN_UTIL_TYPES_H"
      },
      {
        "sha": "880a01eb7df9b2c766ed71f6f76e40055bfbadbe",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 150,
        "deletions": 151,
        "changes": 301,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,6 +9,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <checkqueue.h>\n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_check.h>\n@@ -24,6 +25,7 @@\n #include <node/blockstorage.h>\n #include <node/coinstats.h>\n #include <node/ui_interface.h>\n+#include <node/utxo_snapshot.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <policy/settings.h>\n@@ -192,7 +194,7 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n \n     // CheckFinalTx() uses active_chain_tip.Height()+1 to evaluate\n     // nLockTime because when IsFinalTx() is called within\n-    // CBlock::AcceptBlock(), the height of the block *being*\n+    // AcceptBlock(), the height of the block *being*\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than active_chain_tip.Height().\n@@ -372,8 +374,8 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     LimitMempoolSize(\n         *m_mempool,\n         this->CoinsTip(),\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n-        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -415,7 +417,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     }\n \n     // Call CheckInputScripts() to cache signature and script validity against current tip consensus rules.\n-    return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n+    return CheckInputScripts(tx, state, view, flags, /* cacheSigStore= */ true, /* cacheFullScriptStore= */ true, txdata);\n }\n \n namespace {\n@@ -424,10 +426,10 @@ class MemPoolAccept\n {\n public:\n     explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n-        m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n-        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n-        m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        m_limit_ancestors(gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n+        m_limit_ancestor_size(gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_descendants(gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n+        m_limit_descendant_size(gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -509,7 +511,7 @@ class MemPoolAccept\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }\n@@ -770,117 +772,45 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // that we have the set of all ancestors we can detect this\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n-    {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n-        {\n-            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n-                    strprintf(\"%s spends conflicting transaction %s\",\n-                        hash.ToString(),\n-                        hashAncestor.ToString()));\n-        }\n+    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+        // We classify this as a consensus error because a transaction depending on something it\n+        // conflicts with would be inconsistent.\n+        return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n \n-    // If we don't hold the lock allConflicting might be incomplete; the\n-    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n-    // mempool consistency for us.\n     fReplacementTransaction = setConflicts.size();\n-    if (fReplacementTransaction)\n-    {\n-        std::string err_string;\n+    if (fReplacementTransaction) {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        for (const auto& mi : setIterConflicting) {\n-            // Don't allow the replacement to reduce the feerate of the\n-            // mempool.\n-            //\n-            // We usually don't want to accept replacements with lower\n-            // feerates than what they replaced as that would lower the\n-            // feerate of the next block. Requiring that the feerate always\n-            // be increased is also an easy-to-reason about way to prevent\n-            // DoS attacks via replacements.\n-            //\n-            // We only consider the feerates of transactions being directly\n-            // replaced, not their indirect descendants. While that does\n-            // mean high feerate children are ignored when deciding whether\n-            // or not to replace, we do require the replacement to pay more\n-            // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-            if (newFeeRate <= oldFeeRate)\n-            {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                            hash.ToString(),\n-                            newFeeRate.ToString(),\n-                            oldFeeRate.ToString()));\n-            }\n+        // It's possible that the replacement pays more fees than its direct conflicts but not more\n+        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+        // more economically rational to mine. Before we go digging through the mempool for all\n+        // transactions that would need to be removed (direct conflicts and all descendants), check\n+        // that the replacement transaction pays more than its direct conflicts.\n+        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n \n-        // Calculate all conflicting entries and enforce Rule #5.\n-        if (!GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting, err_string)) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\", err_string);\n+        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n+        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                                 \"too many potential replacements\", *err_string);\n+        }\n+        // Enforce BIP125 Rule #2.\n+        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                                 \"replacement-adds-unconfirmed\", *err_string);\n         }\n \n-        // Check if it's economically rational to mine this transaction rather\n-        // than the ones it replaces.\n+        // Check if it's economically rational to mine this transaction rather than the ones it\n+        // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n         for (CTxMemPool::txiter it : allConflicting) {\n             nConflictingFees += it->GetModifiedFee();\n             nConflictingSize += it->GetTxSize();\n         }\n-\n-        std::set<uint256> setConflictsParents;\n-        for (const auto& mi : setIterConflicting) {\n-            for (const CTxIn &txin : mi->GetTx().vin)\n-            {\n-                setConflictsParents.insert(txin.prevout.hash);\n-            }\n-        }\n-\n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        {\n-            // We don't want to accept replacements that require low\n-            // feerate junk to be mined first. Ideally we'd keep track of\n-            // the ancestor feerates and make the decision based on that,\n-            // but for now requiring all new inputs to be confirmed works.\n-            //\n-            // Note that if you relax this to make RBF a little more useful,\n-            // this may break the CalculateMempoolAncestors RBF relaxation,\n-            // above. See the comment above the first CalculateMempoolAncestors\n-            // call for more info.\n-            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-            {\n-                // Rather than check the UTXO set - potentially expensive -\n-                // it's cheaper to just check if the new input refers to a\n-                // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n-                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                hash.ToString(), j));\n-                }\n-            }\n-        }\n-\n-        // The replacement must pay greater fees than the transactions it\n-        // replaces - if we did the bandwidth used by those conflicting\n-        // transactions would not be paid for.\n-        if (nModifiedFees < nConflictingFees)\n-        {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                    strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                        hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n-        }\n-\n-        // Finally in addition to paying more fees than the conflicts the\n-        // new transaction must pay for its own bandwidth.\n-        CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-        if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n-        {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                    strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n-                        hash.ToString(),\n-                        FormatMoney(nDeltaFees),\n-                        FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n+        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, ::incrementalRelayFee, hash)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n     }\n     return true;\n@@ -982,7 +912,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1166,10 +1096,15 @@ void CoinsViews::InitCache()\n     m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);\n }\n \n-CChainState::CChainState(CTxMemPool* mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n+CChainState::CChainState(\n+    CTxMemPool* mempool,\n+    BlockManager& blockman,\n+    ChainstateManager& chainman,\n+    std::optional<uint256> from_snapshot_blockhash)\n     : m_mempool(mempool),\n       m_params(::Params()),\n       m_blockman(blockman),\n+      m_chainman(chainman),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n void CChainState::InitCoinsDB(\n@@ -1339,7 +1274,7 @@ void InitScriptExecutionCache() {\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -1643,7 +1578,6 @@ static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n static int64_t nTimeConnect = 0;\n static int64_t nTimeIndex = 0;\n-static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n static int64_t nBlocksTotal = 0;\n \n@@ -1948,9 +1882,6 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime5 - nTime4), nTimeIndex * MICRO, nTimeIndex * MILLI / nBlocksTotal);\n \n-    int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n-    LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);\n-\n     TRACE7(validation, block_connected,\n         block.GetHash().ToString().c_str(),\n         pindex->nHeight,\n@@ -1968,7 +1899,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n         m_coinstip_cache_size_bytes,\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n@@ -2165,8 +2096,42 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n     res += warn;\n }\n \n+static void UpdateTipLog(\n+    const CCoinsViewCache& coins_tip,\n+    const CBlockIndex* tip,\n+    const CChainParams& params,\n+    const std::string& func_name,\n+    const std::string& prefix,\n+    const std::string& warning_messages) EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n+{\n+\n+    AssertLockHeld(::cs_main);\n+    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n+        prefix, func_name,\n+        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n+        log(tip->nChainWork.getdouble()) / log(2.0), (unsigned long)tip->nChainTx,\n+        FormatISO8601DateTime(tip->GetBlockTime()),\n+        GuessVerificationProgress(params.TxData(), tip),\n+        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n+        coins_tip.GetCacheSize(),\n+        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+}\n+\n void CChainState::UpdateTip(const CBlockIndex* pindexNew)\n {\n+    const auto& coins_tip = this->CoinsTip();\n+\n+    // The remainder of the function isn't relevant if we are not acting on\n+    // the active chainstate, so return if need be.\n+    if (this != &m_chainman.ActiveChainstate()) {\n+        // Only log every so often so that we don't bury log messages at the tip.\n+        constexpr int BACKGROUND_LOG_INTERVAL = 2000;\n+        if (pindexNew->nHeight % BACKGROUND_LOG_INTERVAL == 0) {\n+            UpdateTipLog(coins_tip, pindexNew, m_params, __func__, \"[background validation] \", \"\");\n+        }\n+        return;\n+    }\n+\n     // New best block\n     if (m_mempool) {\n         m_mempool->AddTransactionsUpdated(1);\n@@ -2194,12 +2159,7 @@ void CChainState::UpdateTip(const CBlockIndex* pindexNew)\n             }\n         }\n     }\n-    LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\", __func__,\n-      pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n-      log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n-      FormatISO8601DateTime(pindexNew->GetBlockTime()),\n-      GuessVerificationProgress(m_params.TxData(), pindexNew), this->CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), this->CoinsTip().GetCacheSize(),\n-      !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages.original) : \"\");\n+    UpdateTipLog(coins_tip, pindexNew, m_params, __func__, \"\", warning_messages.original);\n }\n \n /** Disconnect m_chain's tip.\n@@ -2593,7 +2553,7 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n-    int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n+    int nStopAtHeight = gArgs.GetIntArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         // Block until the validation queue drains. This should largely\n         // never happen in normal operation, however may happen during\n@@ -3696,7 +3656,9 @@ bool BlockManager::LoadBlockIndex(\n             pindex->nStatus |= BLOCK_FAILED_CHILD;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr)) {\n+        if (pindex->IsAssumedValid() ||\n+                (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n+                 (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n             block_index_candidates.insert(pindex);\n         }\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n@@ -3779,7 +3741,7 @@ bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkCompar\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (!m_mempool) return;\n-    if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (args.GetBoolArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         ::LoadMempool(*m_mempool, *this);\n     }\n     m_mempool->SetIsLoaded(!ShutdownRequested());\n@@ -4275,12 +4237,33 @@ void CChainState::CheckBlockIndex()\n     while (pindex != nullptr) {\n         nNodes++;\n         if (pindexFirstInvalid == nullptr && pindex->nStatus & BLOCK_FAILED_VALID) pindexFirstInvalid = pindex;\n-        if (pindexFirstMissing == nullptr && !(pindex->nStatus & BLOCK_HAVE_DATA)) pindexFirstMissing = pindex;\n+        // Assumed-valid index entries will not have data since we haven't downloaded the\n+        // full block yet.\n+        if (pindexFirstMissing == nullptr && !(pindex->nStatus & BLOCK_HAVE_DATA) && !pindex->IsAssumedValid()) {\n+            pindexFirstMissing = pindex;\n+        }\n         if (pindexFirstNeverProcessed == nullptr && pindex->nTx == 0) pindexFirstNeverProcessed = pindex;\n         if (pindex->pprev != nullptr && pindexFirstNotTreeValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TREE) pindexFirstNotTreeValid = pindex;\n-        if (pindex->pprev != nullptr && pindexFirstNotTransactionsValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TRANSACTIONS) pindexFirstNotTransactionsValid = pindex;\n-        if (pindex->pprev != nullptr && pindexFirstNotChainValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_CHAIN) pindexFirstNotChainValid = pindex;\n-        if (pindex->pprev != nullptr && pindexFirstNotScriptsValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_SCRIPTS) pindexFirstNotScriptsValid = pindex;\n+\n+        if (pindex->pprev != nullptr && !pindex->IsAssumedValid()) {\n+            // Skip validity flag checks for BLOCK_ASSUMED_VALID index entries, since these\n+            // *_VALID_MASK flags will not be present for index entries we are temporarily assuming\n+            // valid.\n+            if (pindexFirstNotTransactionsValid == nullptr &&\n+                    (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TRANSACTIONS) {\n+                pindexFirstNotTransactionsValid = pindex;\n+            }\n+\n+            if (pindexFirstNotChainValid == nullptr &&\n+                    (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_CHAIN) {\n+                pindexFirstNotChainValid = pindex;\n+            }\n+\n+            if (pindexFirstNotScriptsValid == nullptr &&\n+                    (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_SCRIPTS) {\n+                pindexFirstNotScriptsValid = pindex;\n+            }\n+        }\n \n         // Begin: actual consistency checks.\n         if (pindex->pprev == nullptr) {\n@@ -4291,7 +4274,9 @@ void CChainState::CheckBlockIndex()\n         if (!pindex->HaveTxsDownloaded()) assert(pindex->nSequenceId <= 0); // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n         // VALID_TRANSACTIONS is equivalent to nTx > 0 for all nodes (whether or not pruning has occurred).\n         // HAVE_DATA is only equivalent to nTx > 0 (or VALID_TRANSACTIONS) if no pruning has occurred.\n-        if (!fHavePruned) {\n+        // Unless these indexes are assumed valid and pending block download on a\n+        // background chainstate.\n+        if (!fHavePruned && !pindex->IsAssumedValid()) {\n             // If we've never pruned, then HAVE_DATA should be equivalent to nTx > 0\n             assert(!(pindex->nStatus & BLOCK_HAVE_DATA) == (pindex->nTx == 0));\n             assert(pindexFirstMissing == pindexFirstNeverProcessed);\n@@ -4300,7 +4285,16 @@ void CChainState::CheckBlockIndex()\n             if (pindex->nStatus & BLOCK_HAVE_DATA) assert(pindex->nTx > 0);\n         }\n         if (pindex->nStatus & BLOCK_HAVE_UNDO) assert(pindex->nStatus & BLOCK_HAVE_DATA);\n-        assert(((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) == (pindex->nTx > 0)); // This is pruning-independent.\n+        if (pindex->IsAssumedValid()) {\n+            // Assumed-valid blocks should have some nTx value.\n+            assert(pindex->nTx > 0);\n+            // Assumed-valid blocks should connect to the main chain.\n+            assert((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TREE);\n+        } else {\n+            // Otherwise there should only be an nTx value if we have\n+            // actually seen a block's transactions.\n+            assert(((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) == (pindex->nTx > 0)); // This is pruning-independent.\n+        }\n         // All parents having had data (at some point) is equivalent to all parents being VALID_TRANSACTIONS, which is equivalent to HaveTxsDownloaded().\n         assert((pindexFirstNeverProcessed == nullptr) == pindex->HaveTxsDownloaded());\n         assert((pindexFirstNotTransactionsValid == nullptr) == pindex->HaveTxsDownloaded());\n@@ -4317,11 +4311,17 @@ void CChainState::CheckBlockIndex()\n         }\n         if (!CBlockIndexWorkComparator()(pindex, m_chain.Tip()) && pindexFirstNeverProcessed == nullptr) {\n             if (pindexFirstInvalid == nullptr) {\n+                const bool is_active = this == &m_chainman.ActiveChainstate();\n+\n                 // If this block sorts at least as good as the current tip and\n                 // is valid and we have all data for its parents, it must be in\n                 // setBlockIndexCandidates.  m_chain.Tip() must also be there\n                 // even if some data has been pruned.\n-                if (pindexFirstMissing == nullptr || pindex == m_chain.Tip()) {\n+                //\n+                // Don't perform this check for the background chainstate since\n+                // its setBlockIndexCandidates shouldn't have some entries (i.e. those past the\n+                // snapshot block) which do exist in the block index for the active chainstate.\n+                if (is_active && (pindexFirstMissing == nullptr || pindex == m_chain.Tip())) {\n                     assert(setBlockIndexCandidates.count(pindex));\n                 }\n                 // If some parent is missing, then it could be that this block was in\n@@ -4459,7 +4459,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    int64_t nExpiryTimeout = gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n@@ -4656,7 +4656,7 @@ CChainState& ChainstateManager::InitializeChainstate(\n     if (to_modify) {\n         throw std::logic_error(\"should not be overwriting a chainstate\");\n     }\n-    to_modify.reset(new CChainState(mempool, m_blockman, snapshot_blockhash));\n+    to_modify.reset(new CChainState(mempool, m_blockman, *this, snapshot_blockhash));\n \n     // Snapshot chainstates and initial IBD chaintates always become active.\n     if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {\n@@ -4725,8 +4725,9 @@ bool ChainstateManager::ActivateSnapshot(\n             static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n     }\n \n-    auto snapshot_chainstate = WITH_LOCK(::cs_main, return std::make_unique<CChainState>(\n-        /* mempool */ nullptr, m_blockman, base_blockhash));\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main,\n+        return std::make_unique<CChainState>(\n+            /* mempool */ nullptr, m_blockman, *this, base_blockhash));\n \n     {\n         LOCK(::cs_main);\n@@ -4929,11 +4930,25 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n         // Fake nChainTx so that GuessVerificationProgress reports accurately\n         index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n \n+        // Mark unvalidated block index entries beneath the snapshot base block as assumed-valid.\n+        if (!index->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            // This flag will be removed once the block is fully validated by a\n+            // background chainstate.\n+            index->nStatus |= BLOCK_ASSUMED_VALID;\n+        }\n+\n         // Fake BLOCK_OPT_WITNESS so that CChainState::NeedsRedownload()\n         // won't ask to rewind the entire assumed-valid chain on startup.\n         if (index->pprev && DeploymentActiveAt(*index, ::Params().GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n             index->nStatus |= BLOCK_OPT_WITNESS;\n         }\n+\n+        setDirtyBlockIndex.insert(index);\n+        // Changes to the block index will be flushed to disk after this call\n+        // returns in `ActivateSnapshot()`, when `MaybeRebalanceCaches()` is\n+        // called, since we've added a snapshot chainstate and therefore will\n+        // have to downsize the IBD chainstate, which will result in a call to\n+        // `FlushStateToDisk(ALWAYS)`.\n     }\n \n     assert(index);\n@@ -4958,22 +4973,6 @@ bool ChainstateManager::IsSnapshotActive() const\n     return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();\n }\n \n-CChainState& ChainstateManager::ValidatedChainstate() const\n-{\n-    LOCK(::cs_main);\n-    if (m_snapshot_chainstate && IsSnapshotValidated()) {\n-        return *m_snapshot_chainstate.get();\n-    }\n-    assert(m_ibd_chainstate);\n-    return *m_ibd_chainstate.get();\n-}\n-\n-bool ChainstateManager::IsBackgroundIBD(CChainState* chainstate) const\n-{\n-    LOCK(::cs_main);\n-    return (m_snapshot_chainstate && chainstate == m_ibd_chainstate.get());\n-}\n-\n void ChainstateManager::Unload()\n {\n     for (CChainState* chainstate : this->GetAll()) {"
      },
      {
        "sha": "b10050f93106e6138ec9ca2507cac7818f68b4b9",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 17,
        "deletions": 37,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -10,21 +10,18 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <amount.h>\n+#include <arith_uint256.h>\n #include <attributes.h>\n-#include <coins.h>\n-#include <consensus/validation.h>\n-#include <crypto/common.h> // for ReadLE64\n+#include <chain.h>\n+#include <consensus/amount.h>\n #include <fs.h>\n-#include <node/utxo_snapshot.h>\n #include <policy/feerate.h>\n #include <policy/packages.h>\n-#include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n #include <sync.h>\n-#include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n-#include <serialize.h>\n+#include <txmempool.h> // For CTxMemPool::cs\n+#include <uint256.h>\n #include <util/check.h>\n #include <util/hasher.h>\n #include <util/translation.h>\n@@ -41,19 +38,13 @@\n #include <vector>\n \n class CChainState;\n-class BlockValidationState;\n-class CBlockIndex;\n class CBlockTreeDB;\n-class CBlockUndo;\n class CChainParams;\n struct CCheckpointData;\n-class CInv;\n-class CConnman;\n-class CScriptCheck;\n class CTxMemPool;\n class ChainstateManager;\n+class SnapshotMetadata;\n struct ChainTxData;\n-\n struct DisconnectedBlockTransactions;\n struct PrecomputedTransactionData;\n struct LockPoints;\n@@ -109,6 +100,7 @@ extern RecursiveMutex cs_main;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern Mutex g_best_block_mutex;\n extern std::condition_variable g_best_block_cv;\n+/** Used to notify getblocktemplate RPC of new tips. */\n extern uint256 g_best_block;\n /** Whether there are dedicated script-checking threads running.\n  * False indicates all script checking is done on the main threadMessageHandler thread.\n@@ -593,9 +585,15 @@ class CChainState\n     //! CChainState instances.\n     BlockManager& m_blockman;\n \n+    //! The chainstate manager that owns this chainstate. The reference is\n+    //! necessary so that this instance can check whether it is the active\n+    //! chainstate within deeply nested method calls.\n+    ChainstateManager& m_chainman;\n+\n     explicit CChainState(\n         CTxMemPool* mempool,\n         BlockManager& blockman,\n+        ChainstateManager& chainman,\n         std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n \n     /**\n@@ -632,9 +630,10 @@ class CChainState\n     const std::optional<uint256> m_from_snapshot_blockhash;\n \n     /**\n-     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n-     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n-     * missing the data for the block.\n+     * The set of all CBlockIndex entries with either BLOCK_VALID_TRANSACTIONS (for\n+     * itself and all ancestors) *or* BLOCK_ASSUMED_VALID (if using background\n+     * chainstates) and as good as our current tip or better. Entries may be failed,\n+     * though, and pruning nodes may be missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n \n@@ -846,12 +845,6 @@ class CChainState\n  * *Background IBD chainstate*: an IBD chainstate for which the\n  *    IBD process is happening in the background while use of the\n  *    active (snapshot) chainstate allows the rest of the system to function.\n- *\n- * *Validated chainstate*: the most-work chainstate which has been validated\n- *   locally via initial block download. This will be the snapshot chainstate\n- *   if a snapshot was loaded and all blocks up to the snapshot starting point\n- *   have been downloaded and validated (via background validation), otherwise\n- *   it will be the IBD chainstate.\n  */\n class ChainstateManager\n {\n@@ -970,19 +963,6 @@ class ChainstateManager\n     //! Is there a snapshot in use and has it been fully validated?\n     bool IsSnapshotValidated() const { return m_snapshot_validated; }\n \n-    //! @returns true if this chainstate is being used to validate an active\n-    //!          snapshot in the background.\n-    bool IsBackgroundIBD(CChainState* chainstate) const;\n-\n-    //! Return the most-work chainstate that has been fully validated.\n-    //!\n-    //! During background validation of a snapshot, this is the IBD chain. After\n-    //! background validation has completed, this is the snapshot chain.\n-    CChainState& ValidatedChainstate() const;\n-\n-    CChain& ValidatedChain() const { return ValidatedChainstate().m_chain; }\n-    CBlockIndex* ValidatedTip() const { return ValidatedChain().Tip(); }\n-\n     /**\n      * Process an incoming block. This only returns after the best known valid\n      * block is made active. Note that it does not, however, guarantee that the"
      },
      {
        "sha": "2eb4d3106c2604f39a5479a0378ac532f73329c3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -375,7 +375,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetIntArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n "
      },
      {
        "sha": "c989512d3ef60e31018e83088f382a3b908d6a99",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,9 +9,14 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n+#include <script/keyorigin.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n \n #include <optional>\n+#include <algorithm>\n+#include <map>\n+#include <set>\n \n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n@@ -53,6 +58,8 @@ class CCoinControl\n     int m_min_depth = DEFAULT_MIN_DEPTH;\n     //! Maximum chain depth value for coin availability\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n+    //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n+    FlatSigningProvider m_external_provider;\n \n     CCoinControl();\n \n@@ -66,11 +73,32 @@ class CCoinControl\n         return (setSelected.count(output) > 0);\n     }\n \n+    bool IsExternalSelected(const COutPoint& output) const\n+    {\n+        return (m_external_txouts.count(output) > 0);\n+    }\n+\n+    bool GetExternalOutput(const COutPoint& outpoint, CTxOut& txout) const\n+    {\n+        const auto ext_it = m_external_txouts.find(outpoint);\n+        if (ext_it == m_external_txouts.end()) {\n+            return false;\n+        }\n+        txout = ext_it->second;\n+        return true;\n+    }\n+\n     void Select(const COutPoint& output)\n     {\n         setSelected.insert(output);\n     }\n \n+    void Select(const COutPoint& outpoint, const CTxOut& txout)\n+    {\n+        setSelected.insert(outpoint);\n+        m_external_txouts.emplace(outpoint, txout);\n+    }\n+\n     void UnSelect(const COutPoint& output)\n     {\n         setSelected.erase(output);\n@@ -88,6 +116,7 @@ class CCoinControl\n \n private:\n     std::set<COutPoint> setSelected;\n+    std::map<COutPoint, CTxOut> m_external_txouts;\n };\n \n #endif // BITCOIN_WALLET_COINCONTROL_H"
      },
      {
        "sha": "e1ca3fb379883429d1553e1d0d12759347af8e34",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,10 +4,13 @@\n \n #include <wallet/coinselection.h>\n \n+#include <consensus/amount.h>\n #include <policy/feerate.h>\n+#include <util/check.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n+#include <numeric>\n #include <optional>\n \n // Descending order comparator\n@@ -168,6 +171,30 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n     return true;\n }\n \n+std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n+{\n+    std::set<CInputCoin> out_set;\n+    CAmount value_ret = 0;\n+\n+    std::vector<size_t> indexes;\n+    indexes.resize(utxo_pool.size());\n+    std::iota(indexes.begin(), indexes.end(), 0);\n+    Shuffle(indexes.begin(), indexes.end(), FastRandomContext());\n+\n+    CAmount selected_eff_value = 0;\n+    for (const size_t i : indexes) {\n+        const OutputGroup& group = utxo_pool.at(i);\n+        Assume(group.GetSelectionAmount() > 0);\n+        selected_eff_value += group.GetSelectionAmount();\n+        value_ret += group.m_value;\n+        util::insert(out_set, group.m_outputs);\n+        if (selected_eff_value >= target_value) {\n+            return std::make_pair(out_set, value_ret);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n@@ -279,13 +306,13 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n         }\n \n         if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \"); /* Continued */\n+            std::string log_message{\"Coin selection best subset: \"};\n             for (unsigned int i = 0; i < applicable_groups.size(); i++) {\n                 if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(applicable_groups[i].m_value)); /* Continued */\n+                    log_message += strprintf(\"%s \", FormatMoney(applicable_groups[i].m_value));\n                 }\n             }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            LogPrint(BCLog::SELECTCOINS, \"%stotal %s\\n\", log_message, FormatMoney(nBest));\n         }\n     }\n "
      },
      {
        "sha": "e7d467660f68b4bae1d294f4d912fe07a6045301",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,11 +5,13 @@\n #ifndef BITCOIN_WALLET_COINSELECTION_H\n #define BITCOIN_WALLET_COINSELECTION_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <random.h>\n \n+#include <optional>\n+\n //! target minimum change amount\n static constexpr CAmount MIN_CHANGE{COIN / 100};\n //! final minimum change amount after paying for fees\n@@ -35,6 +37,18 @@ class CInputCoin {\n         m_input_bytes = input_bytes;\n     }\n \n+    CInputCoin(const COutPoint& outpoint_in, const CTxOut& txout_in)\n+    {\n+        outpoint = outpoint_in;\n+        txout = txout_in;\n+        effective_value = txout.nValue;\n+    }\n+\n+    CInputCoin(const COutPoint& outpoint_in, const CTxOut& txout_in, int input_bytes) : CInputCoin(outpoint_in, txout_in)\n+    {\n+        m_input_bytes = input_bytes;\n+    }\n+\n     COutPoint outpoint;\n     CTxOut txout;\n     CAmount effective_value;\n@@ -174,7 +188,9 @@ struct OutputGroup\n  * change_cost = effective_feerate * change_output_size + long_term_feerate * change_spend_size\n  *\n  * @param[in] inputs The selected inputs\n- * @param[in] change_cost The cost of creating change and spending it in the future. Only used if there is change. Must be 0 if there is no change.\n+ * @param[in] change_cost The cost of creating change and spending it in the future.\n+ *                        Only used if there is change, in which case it must be positive.\n+ *                        Must be 0 if there is no change.\n  * @param[in] target The amount targeted by the coin selection algorithm.\n  * @param[in] use_effective_value Whether to use the input's effective value (when true) or the real value (when false).\n  * @return The waste\n@@ -183,6 +199,15 @@ struct OutputGroup\n \n bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n \n+/** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible\n+ * outputs until the target is satisfied\n+ *\n+ * @param[in]  utxo_pool    The positive effective value OutputGroups eligible for selection\n+ * @param[in]  target_value The target value to select for\n+ * @returns If successful, a pair of set of outputs and total selected value, otherwise, std::nullopt\n+ */\n+std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n+\n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n "
      },
      {
        "sha": "d6d625d9c1839ba32d8527eb6c02e2aff4fad10f",
        "filename": "src/wallet/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_WALLET_FEES_H\n #define BITCOIN_WALLET_FEES_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n \n class CCoinControl;\n class CFeeRate;"
      },
      {
        "sha": "59a59f9794e7047855ac04d4204c435fc77910d5",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <init.h>\n #include <interfaces/chain.h>\n+#include <interfaces/init.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n@@ -61,7 +62,6 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #ifdef ENABLE_EXTERNAL_SIGNER\n     argsman.AddArg(\"-signer=<cmd>\", \"External signing tool, see doc/external-signer.md\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n@@ -130,7 +130,7 @@ void WalletInit::Construct(NodeContext& node) const\n         LogPrintf(\"Wallet disabled!\\n\");\n         return;\n     }\n-    auto wallet_client = interfaces::MakeWalletClient(*node.chain, args);\n+    auto wallet_client = node.init->makeWalletClient(*node.chain);\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "7d0cdb69347b1801b3e1b5791829855ba64677fb",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <interfaces/wallet.h>\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <policy/fees.h>\n@@ -214,15 +214,17 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->DisplayAddress(dest);\n     }\n-    void lockCoin(const COutPoint& output) override\n+    bool lockCoin(const COutPoint& output, const bool write_to_db) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->LockCoin(output);\n+        std::unique_ptr<WalletBatch> batch = write_to_db ? std::make_unique<WalletBatch>(m_wallet->GetDatabase()) : nullptr;\n+        return m_wallet->LockCoin(output, batch.get());\n     }\n-    void unlockCoin(const COutPoint& output) override\n+    bool unlockCoin(const COutPoint& output) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->UnlockCoin(output);\n+        std::unique_ptr<WalletBatch> batch = std::make_unique<WalletBatch>(m_wallet->GetDatabase());\n+        return m_wallet->UnlockCoin(output, batch.get());\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {"
      },
      {
        "sha": "1b841026b892b9f1b2dea8ab0474270dbf61fd91",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -165,7 +165,7 @@ void UnloadWallets(WalletContext& context)\n         auto wallet = wallets.back();\n         wallets.pop_back();\n         std::vector<bilingual_str> warnings;\n-        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt, warnings);\n+        RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt, warnings);\n         UnloadWallet(std::move(wallet));\n     }\n }"
      },
      {
        "sha": "2fb274b55f2b1e43c4265c36a7fdfb88fea8466c",
        "filename": "src/wallet/receive.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/receive.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/receive.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/receive.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <wallet/receive.h>\n #include <wallet/transaction.h>"
      },
      {
        "sha": "f659955fc6cc71d3138d9088b542dd3afca201ae",
        "filename": "src/wallet/receive.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/receive.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/receive.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/receive.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_WALLET_RECEIVE_H\n #define BITCOIN_WALLET_RECEIVE_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <wallet/ismine.h>\n #include <wallet/transaction.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "4d7fb2d38cee75b3a843a4df781452fe99545ef6",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -1439,7 +1439,7 @@ RPCHelpMan importmulti()\n                                       \"and coins using this key may not appear in the wallet. This error could be \"\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n-                                      \"and -rescan options).\",\n+                                      \"option and rescanblockchain RPC).\",\n                                 GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }\n@@ -1488,7 +1488,7 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 warnings.push_back(\"Range not given, using default keypool range\");\n                 range_start = 0;\n-                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+                range_end = gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n             }\n             next_index = range_start;\n \n@@ -1744,7 +1744,7 @@ RPCHelpMan importdescriptors()\n                                       \"and coins using this desc may not appear in the wallet. This error could be \"\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n-                                      \"and -rescan options).\",\n+                                      \"option and rescanblockchain RPC).\",\n                                 GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }"
      },
      {
        "sha": "39cde4e4ecc93322be0eab11f6503dab9d8970a9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 222,
        "deletions": 58,
        "changes": 280,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <core_io.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n@@ -43,6 +43,7 @@\n \n #include <univalue.h>\n \n+#include <map>\n \n using interfaces::FoundBlock;\n \n@@ -472,7 +473,7 @@ static RPCHelpMan sendtoaddress()\n                         RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n-                            {RPCResult::Type::STR, \"fee reason\", \"The transaction fee reason.\"}\n+                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n                         },\n                     },\n                 },\n@@ -899,7 +900,7 @@ static RPCHelpMan sendmany()\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n                 \"the number of addresses.\"},\n-                            {RPCResult::Type::STR, \"fee reason\", \"The transaction fee reason.\"}\n+                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n                         },\n                     },\n                 },\n@@ -1213,7 +1214,7 @@ static RPCHelpMan listreceivedbyaddress()\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n                             {RPCResult::Type::STR, \"address\", \"The receiving address\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received by the address\"},\n                             {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n@@ -1261,7 +1262,7 @@ static RPCHelpMan listreceivedbylabel()\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount received by addresses with this label\"},\n                             {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n                             {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n@@ -1388,20 +1389,24 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n {\n     return{{RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations for the transaction. Negative confirmations means the\\n\"\n                \"transaction conflicted that many blocks ago.\"},\n-           {RPCResult::Type::BOOL, \"generated\", \"Only present if transaction only input is a coinbase one.\"},\n-           {RPCResult::Type::BOOL, \"trusted\", \"Only present if we consider transaction to be trusted and so safe to spend from.\"},\n-           {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash containing the transaction.\"},\n-           {RPCResult::Type::NUM, \"blockheight\", \"The block height containing the transaction.\"},\n-           {RPCResult::Type::NUM, \"blockindex\", \"The index of the transaction in the block that includes it.\"},\n-           {RPCResult::Type::NUM_TIME, \"blocktime\", \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::BOOL, \"generated\", /* optional */ true, \"Only present if transaction only input is a coinbase one.\"},\n+           {RPCResult::Type::BOOL, \"trusted\", /* optional */ true, \"Only present if we consider transaction to be trusted and so safe to spend from.\"},\n+           {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"The block hash containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockheight\", /* optional */ true, \"The block height containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockindex\", /* optional */ true, \"The index of the transaction in the block that includes it.\"},\n+           {RPCResult::Type::NUM_TIME, \"blocktime\", /* optional */ true, \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n            {RPCResult::Type::ARR, \"walletconflicts\", \"Conflicting transaction ids.\",\n            {\n                {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n            }},\n+           {RPCResult::Type::STR_HEX, \"replaced_by_txid\", /* optional */ true, \"The txid if this tx was replaced.\"},\n+           {RPCResult::Type::STR_HEX, \"replaces_txid\", /* optional */ true, \"The txid if the tx replaces one.\"},\n+           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"\"},\n+           {RPCResult::Type::STR, \"to\", /* optional */ true, \"If a comment to is associated with the transaction.\"},\n            {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n-           {RPCResult::Type::STR, \"comment\", \"If a comment is associated with the transaction, only present if not empty.\"},\n+           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"If a comment is associated with the transaction, only present if not empty.\"},\n            {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n                \"may be unknown for unconfirmed transactions not in the mempool\"}};\n }\n@@ -1423,7 +1428,7 @@ static RPCHelpMan listtransactions()\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n                         {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n                             {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n                             {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n                                 \"\\\"send\\\"                  Transactions sent.\\n\"\n@@ -1433,14 +1438,14 @@ static RPCHelpMan listtransactions()\n                                 \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n                                 \"for all other categories\"},\n-                            {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n                             {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                            {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n                                  \"'send' category of transactions.\"},\n                         },\n                         TransactionDescriptionString()),\n                         {\n-                            {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                            {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n                                  \"'send' category of transactions.\"},\n                         })},\n                     }\n@@ -1537,7 +1542,7 @@ static RPCHelpMan listsinceblock()\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n                             {\n-                                {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n                                 {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n                                 {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n                                     \"\\\"send\\\"                  Transactions sent.\\n\"\n@@ -1548,18 +1553,17 @@ static RPCHelpMan listsinceblock()\n                                 {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n                                     \"for all other categories\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n                                      \"'send' category of transactions.\"},\n                             },\n                             TransactionDescriptionString()),\n                             {\n-                                {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n                                      \"'send' category of transactions.\"},\n-                                {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n-                                {RPCResult::Type::STR, \"to\", \"If a comment to is associated with the transaction.\"},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n                             })},\n                         }},\n-                        {RPCResult::Type::ARR, \"removed\", \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n+                        {RPCResult::Type::ARR, \"removed\", /* optional */ true, \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n                             \"Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\"\n                         , {{RPCResult::Type::ELISION, \"\", \"\"},}},\n                         {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain, or the genesis hash if the referenced block does not exist yet. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n@@ -1672,7 +1676,7 @@ static RPCHelpMan gettransaction()\n                     RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n                     {\n                         {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n                                      \"'send' category of transactions.\"},\n                     },\n                     TransactionDescriptionString()),\n@@ -1681,25 +1685,25 @@ static RPCHelpMan gettransaction()\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\",\n                             {\n-                                {RPCResult::Type::BOOL, \"involvesWatchonly\", \"Only returns true if imported addresses were involved in transaction.\"},\n-                                {RPCResult::Type::STR, \"address\", \"The bitcoin address involved in the transaction.\"},\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address involved in the transaction.\"},\n                                 {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n                                     \"\\\"send\\\"                  Transactions sent.\\n\"\n                                     \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n                                     \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n                                     \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n                                     \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n                                 {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                                {RPCResult::Type::STR, \"label\", \"A comment for the address/transaction, if any\"},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n                                     \"'send' category of transactions.\"},\n-                                {RPCResult::Type::BOOL, \"abandoned\", \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n                                      \"'send' category of transactions.\"},\n                             }},\n                         }},\n                         {RPCResult::Type::STR_HEX, \"hex\", \"Raw data for transaction\"},\n-                        {RPCResult::Type::OBJ, \"decoded\", \"Optional, the decoded transaction (only present when `verbose` is passed)\",\n+                        {RPCResult::Type::OBJ, \"decoded\", /* optional */ true, \"The decoded transaction (only present when `verbose` is passed)\",\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"Equivalent to the RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\"},\n                         }},\n@@ -1759,7 +1763,7 @@ static RPCHelpMan gettransaction()\n \n     if (verbose) {\n         UniValue decoded(UniValue::VOBJ);\n-        TxToUniv(*wtx.tx, uint256(), pwallet->chain().rpcEnableDeprecated(\"addresses\"), decoded, false);\n+        TxToUniv(*wtx.tx, uint256(), decoded, false);\n         entry.pushKV(\"decoded\", decoded);\n     }\n \n@@ -2137,8 +2141,9 @@ static RPCHelpMan lockunspent()\n                 \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n                 \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n                 \"Manually selected coins are automatically unlocked.\\n\"\n-                \"Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\\n\"\n-                \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n+                \"Locks are stored in memory only, unless persistent=true, in which case they will be written to the\\n\"\n+                \"wallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\\n\"\n+                \"(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\\n\"\n                 \"Also see the listunspent call\\n\",\n                 {\n                     {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n@@ -2152,6 +2157,7 @@ static RPCHelpMan lockunspent()\n                             },\n                         },\n                     },\n+                    {\"persistent\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to write/erase this lock in the wallet database, or keep the change in memory only. Ignored for unlocking.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::BOOL, \"\", \"Whether the command was successful or not\"\n@@ -2165,6 +2171,8 @@ static RPCHelpMan lockunspent()\n             + HelpExampleCli(\"listlockunspent\", \"\") +\n             \"\\nUnlock the transaction again\\n\"\n             + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nLock the transaction persistently in the wallet database\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\" true\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n                 },\n@@ -2183,9 +2191,13 @@ static RPCHelpMan lockunspent()\n \n     bool fUnlock = request.params[0].get_bool();\n \n+    const bool persistent{request.params[2].isNull() ? false : request.params[2].get_bool()};\n+\n     if (request.params[1].isNull()) {\n-        if (fUnlock)\n-            pwallet->UnlockAllCoins();\n+        if (fUnlock) {\n+            if (!pwallet->UnlockAllCoins())\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coins failed\");\n+        }\n         return true;\n     }\n \n@@ -2236,17 +2248,24 @@ static RPCHelpMan lockunspent()\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n         }\n \n-        if (!fUnlock && is_locked) {\n+        if (!fUnlock && is_locked && !persistent) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output already locked\");\n         }\n \n         outputs.push_back(outpt);\n     }\n \n+    std::unique_ptr<WalletBatch> batch = nullptr;\n+    // Unlock is always persistent\n+    if (fUnlock || persistent) batch = std::make_unique<WalletBatch>(pwallet->GetDatabase());\n+\n     // Atomically set (un)locked status for the outputs.\n     for (const COutPoint& outpt : outputs) {\n-        if (fUnlock) pwallet->UnlockCoin(outpt);\n-        else pwallet->LockCoin(outpt);\n+        if (fUnlock) {\n+            if (!pwallet->UnlockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coin failed\");\n+        } else {\n+            if (!pwallet->LockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Locking coin failed\");\n+        }\n     }\n \n     return true;\n@@ -2362,9 +2381,9 @@ static RPCHelpMan getbalances()\n                     {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"used\", \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"used\", /* optional */ true, \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n                 }},\n-                {RPCResult::Type::OBJ, \"watchonly\", \"watchonly balances (not present if wallet does not watch anything)\",\n+                {RPCResult::Type::OBJ, \"watchonly\", /* optional */ true, \"watchonly balances (not present if wallet does not watch anything)\",\n                 {\n                     {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n                     {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n@@ -2431,9 +2450,9 @@ static RPCHelpMan getwalletinfo()\n                         {RPCResult::Type::STR_AMOUNT, \"unconfirmed_balance\", \"DEPRECATED. Identical to getbalances().mine.untrusted_pending\"},\n                         {RPCResult::Type::STR_AMOUNT, \"immature_balance\", \"DEPRECATED. Identical to getbalances().mine.immature\"},\n                         {RPCResult::Type::NUM, \"txcount\", \"the total number of transactions in the wallet\"},\n-                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool. Legacy wallets only.\"},\n+                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", /* optional */ true, \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool. Legacy wallets only.\"},\n                         {RPCResult::Type::NUM, \"keypoolsize\", \"how many new keys are pre-generated (only counts external keys)\"},\n-                        {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n+                        {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", /* optional */ true, \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n                         {RPCResult::Type::NUM_TIME, \"unlocked_until\", /* optional */ true, \"the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked (only present for passphrase-encrypted wallets)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"paytxfee\", \"the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kvB\"},\n                         {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"the Hash160 of the HD seed (only present when HD is enabled)\"},\n@@ -2614,7 +2633,7 @@ static RPCHelpMan loadwallet()\n     return RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-                \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n+                \"\\napplied to the new wallet.\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                     {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED_NAMED_ARG, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n@@ -2955,17 +2974,20 @@ static RPCHelpMan listunspent()\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"the transaction id\"},\n                             {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                            {RPCResult::Type::STR, \"address\", \"the bitcoin address\"},\n-                            {RPCResult::Type::STR, \"label\", \"The associated label, or \\\"\\\" for the default label\"},\n+                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"the bitcoin address\"},\n+                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"The associated label, or \\\"\\\" for the default label\"},\n                             {RPCResult::Type::STR, \"scriptPubKey\", \"the script key\"},\n                             {RPCResult::Type::STR_AMOUNT, \"amount\", \"the transaction output amount in \" + CURRENCY_UNIT},\n                             {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n-                            {RPCResult::Type::STR_HEX, \"redeemScript\", \"The redeemScript if scriptPubKey is P2SH\"},\n-                            {RPCResult::Type::STR, \"witnessScript\", \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n+                            {RPCResult::Type::NUM, \"ancestorcount\", /* optional */ true, \"The number of in-mempool ancestor transactions, including this one (if transaction is in the mempool)\"},\n+                            {RPCResult::Type::NUM, \"ancestorsize\", /* optional */ true, \"The virtual transaction size of in-mempool ancestors, including this one (if transaction is in the mempool)\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"ancestorfees\", /* optional */ true, \"The total fees of in-mempool ancestors (including this one) with fee deltas used for mining priority in \" + CURRENCY_ATOM + \" (if transaction is in the mempool)\"},\n+                            {RPCResult::Type::STR_HEX, \"redeemScript\", /* optional */ true, \"The redeemScript if scriptPubKey is P2SH\"},\n+                            {RPCResult::Type::STR, \"witnessScript\", /* optional */ true, \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n                             {RPCResult::Type::BOOL, \"spendable\", \"Whether we have the private keys to spend this output\"},\n                             {RPCResult::Type::BOOL, \"solvable\", \"Whether we know how to spend this output, ignoring the lack of keys\"},\n-                            {RPCResult::Type::BOOL, \"reused\", \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n-                            {RPCResult::Type::STR, \"desc\", \"(only when solvable) A descriptor for spending this output\"},\n+                            {RPCResult::Type::BOOL, \"reused\", /* optional */ true, \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n+                            {RPCResult::Type::STR, \"desc\", /* optional */ true, \"(only when solvable) A descriptor for spending this output\"},\n                             {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n                                                             \"from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n                                                             \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n@@ -3126,6 +3148,16 @@ static RPCHelpMan listunspent()\n         entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n         entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n         entry.pushKV(\"confirmations\", out.nDepth);\n+        if (!out.nDepth) {\n+            size_t ancestor_count, descendant_count, ancestor_size;\n+            CAmount ancestor_fees;\n+            pwallet->chain().getTransactionAncestry(out.tx->GetHash(), ancestor_count, descendant_count, &ancestor_size, &ancestor_fees);\n+            if (ancestor_count) {\n+                entry.pushKV(\"ancestorcount\", uint64_t(ancestor_count));\n+                entry.pushKV(\"ancestorsize\", uint64_t(ancestor_size));\n+                entry.pushKV(\"ancestorfees\", uint64_t(ancestor_fees));\n+            }\n+        }\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n@@ -3182,6 +3214,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n                 {\"feeRate\", UniValueType()}, // will be checked by AmountFromValue() below\n                 {\"psbt\", UniValueType(UniValue::VBOOL)},\n+                {\"solving_data\", UniValueType(UniValue::VOBJ)},\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n@@ -3258,6 +3291,54 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n         coinControl.fAllowWatchOnly = ParseIncludeWatchonly(NullUniValue, wallet);\n     }\n \n+    if (options.exists(\"solving_data\")) {\n+        UniValue solving_data = options[\"solving_data\"].get_obj();\n+        if (solving_data.exists(\"pubkeys\")) {\n+            for (const UniValue& pk_univ : solving_data[\"pubkeys\"].get_array().getValues()) {\n+                const std::string& pk_str = pk_univ.get_str();\n+                if (!IsHex(pk_str)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not hex\", pk_str));\n+                }\n+                const std::vector<unsigned char> data(ParseHex(pk_str));\n+                CPubKey pubkey(data.begin(), data.end());\n+                if (!pubkey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not a valid public key\", pk_str));\n+                }\n+                coinControl.m_external_provider.pubkeys.emplace(pubkey.GetID(), pubkey);\n+                // Add witness script for pubkeys\n+                const CScript wit_script = GetScriptForDestination(WitnessV0KeyHash(pubkey));\n+                coinControl.m_external_provider.scripts.emplace(CScriptID(wit_script), wit_script);\n+            }\n+        }\n+\n+        if (solving_data.exists(\"scripts\")) {\n+            for (const UniValue& script_univ : solving_data[\"scripts\"].get_array().getValues()) {\n+                const std::string& script_str = script_univ.get_str();\n+                if (!IsHex(script_str)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not hex\", script_str));\n+                }\n+                std::vector<unsigned char> script_data(ParseHex(script_str));\n+                const CScript script(script_data.begin(), script_data.end());\n+                coinControl.m_external_provider.scripts.emplace(CScriptID(script), script);\n+            }\n+        }\n+\n+        if (solving_data.exists(\"descriptors\")) {\n+            for (const UniValue& desc_univ : solving_data[\"descriptors\"].get_array().getValues()) {\n+                const std::string& desc_str  = desc_univ.get_str();\n+                FlatSigningProvider desc_out;\n+                std::string error;\n+                std::vector<CScript> scripts_temp;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, desc_out, error, true);\n+                if (!desc) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unable to parse descriptor '%s': %s\", desc_str, error));\n+                }\n+                desc->Expand(0, desc_out, scripts_temp, desc_out);\n+                coinControl.m_external_provider = Merge(coinControl.m_external_provider, desc_out);\n+            }\n+        }\n+    }\n+\n     if (tx.vout.size() == 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n \n@@ -3275,6 +3356,19 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n         setSubtractFeeFromOutputs.insert(pos);\n     }\n \n+    // Fetch specified UTXOs from the UTXO set to get the scriptPubKeys and values of the outputs being selected\n+    // and to match with the given solving_data. Only used for non-wallet outputs.\n+    std::map<COutPoint, Coin> coins;\n+    for (const CTxIn& txin : tx.vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    wallet.chain().findCoins(coins);\n+    for (const auto& coin : coins) {\n+        if (!coin.second.out.IsNull()) {\n+            coinControl.Select(coin.first, coin.second.out);\n+        }\n+    }\n+\n     bilingual_str error;\n \n     if (!FundTransaction(wallet, tx, fee_out, change_position, error, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n@@ -3290,8 +3384,9 @@ static RPCHelpMan fundrawtransaction()\n                 \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n                 \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                 \"The inputs added will not be signed, use signrawtransactionwithkey\\n\"\n-                \" or signrawtransactionwithwallet for that.\\n\"\n-                \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n+                \"or signrawtransactionwithwallet for that.\\n\"\n+                \"All existing inputs must either have their previous output transaction be in the wallet\\n\"\n+                \"or be in the UTXO set. Solving data must be provided for non-wallet inputs.\\n\"\n                 \"Note that all inputs selected must be of standard form and P2SH scripts must be\\n\"\n                 \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n                 \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n@@ -3326,6 +3421,26 @@ static RPCHelpMan fundrawtransaction()\n                             {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                            {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n+                                \"Used for fee estimation during coin selection.\",\n+                                {\n+                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n+                                        {\n+                                            {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n+                                        },\n+                                    },\n+                                    {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n+                                        {\n+                                            {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n+                                        },\n+                                    },\n+                                    {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n+                                        {\n+                                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n+                                        },\n+                                    }\n+                                }\n+                            },\n                         },\n                         \"options\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n@@ -3429,6 +3544,10 @@ RPCHelpMan signrawtransactionwithwallet()\n                             {\n                                 {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n                                 {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::ARR, \"witness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"witness\", \"\"},\n+                                }},\n                                 {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n                                 {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n                                 {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n@@ -3764,7 +3883,6 @@ class DescribeWalletAddressVisitor\n             obj.pushKV(\"embedded\", std::move(subobj));\n         } else if (which_type == TxoutType::MULTISIG) {\n             // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n             obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n             UniValue pubkeys(UniValue::VARR);\n             for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n@@ -4168,16 +4286,36 @@ static RPCHelpMan send()\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                   \"Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n+                        \"Used for fee estimation during coin selection.\",\n+                        {\n+                            {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n+                                {\n+                                    {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n+                                },\n+                            },\n+                            {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n+                                {\n+                                    {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n+                                },\n+                            },\n+                            {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n+                                {\n+                                    {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n+                                },\n+                            }\n+                        }\n+                    },\n                 },\n                 \"options\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n-                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n-                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n-                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                    {RPCResult::Type::STR_HEX, \"txid\", /* optional */ true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /* optional */ true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n                 }\n         },\n         RPCExamples{\"\"\n@@ -4385,7 +4523,7 @@ static RPCHelpMan walletprocesspsbt()\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n                     {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n-                    {\"sign\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also sign the transaction when updating\"},\n+                    {\"sign\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also sign the transaction when updating (requires wallet to be unlocked)\"},\n                     {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n             \"       \\\"DEFAULT\\\"\\n\"\n             \"       \\\"ALL\\\"\\n\"\n@@ -4432,6 +4570,9 @@ static RPCHelpMan walletprocesspsbt()\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n     bool complete = true;\n+\n+    if (sign) EnsureWalletIsUnlocked(*pwallet);\n+\n     const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n@@ -4452,7 +4593,9 @@ static RPCHelpMan walletcreatefundedpsbt()\n {\n     return RPCHelpMan{\"walletcreatefundedpsbt\",\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n-                \"Implements the Creator and Updater roles.\\n\",\n+                \"Implements the Creator and Updater roles.\\n\"\n+                \"All existing inputs must either have their previous output transaction be in the wallet\\n\"\n+                \"or be in the UTXO set. Solving data must be provided for non-wallet inputs.\\n\",\n                 {\n                     {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. See add_inputs option.\",\n                         {\n@@ -4509,6 +4652,26 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                            {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n+                                \"Used for fee estimation during coin selection.\",\n+                                {\n+                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n+                                        {\n+                                            {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n+                                        },\n+                                    },\n+                                    {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n+                                        {\n+                                            {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n+                                        },\n+                                    },\n+                                    {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n+                                        {\n+                                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n+                                        },\n+                                    }\n+                                }\n+                            },\n                         },\n                         \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n@@ -4650,10 +4813,11 @@ static RPCHelpMan upgradewallet()\n #ifdef ENABLE_EXTERNAL_SIGNER\n static RPCHelpMan walletdisplayaddress()\n {\n-    return RPCHelpMan{\"walletdisplayaddress\",\n+    return RPCHelpMan{\n+        \"walletdisplayaddress\",\n         \"Display address on an external signer for verification.\",\n         {\n-            {\"address\",     RPCArg::Type::STR, RPCArg::Optional::NO, /* default_val */ \"\", \"bitcoin address to display\"},\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"bitcoin address to display\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ,\"\",\"\","
      },
      {
        "sha": "4151099c1ff117a8e7d12fbba00de865df6919dc",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -45,7 +45,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     // Call Salvage with fAggressive=true to\n     // get as much data as possible.\n     // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n+    // Rescan so any missing transactions will be\n     // found.\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);"
      },
      {
        "sha": "fdfb36bb0ac640d8b6ec7f595299352e19ba682f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -331,7 +331,7 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     CHDChain& chain = it->second;\n \n     // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    int64_t target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n \n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n@@ -1259,7 +1259,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+            nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n@@ -1764,7 +1764,7 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     if (size > 0) {\n         target_size = size;\n     } else {\n-        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+        target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n     // Calculate the new range_end"
      },
      {
        "sha": "5bed09e067f96a6acdb862813363cef4775a5d74",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 29,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,9 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/amount.h>\n #include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <policy/policy.h>\n+#include <script/signingprovider.h>\n #include <util/check.h>\n #include <util/fees.h>\n #include <util/moneystr.h>\n@@ -31,21 +33,27 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n-int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)\n+int CalculateMaximumSignedInputSize(const CTxOut& txout, const SigningProvider* provider, bool use_max_sig)\n {\n     CMutableTransaction txn;\n     txn.vin.push_back(CTxIn(COutPoint()));\n-    if (!wallet->DummySignInput(txn.vin[0], txout, use_max_sig)) {\n+    if (!provider || !DummySignInput(*provider, txn.vin[0], txout, use_max_sig)) {\n         return -1;\n     }\n     return GetVirtualTransactionInputSize(txn.vin[0]);\n }\n \n+int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)\n+{\n+    const std::unique_ptr<SigningProvider> provider = wallet->GetSolvingProvider(txout.scriptPubKey);\n+    return CalculateMaximumSignedInputSize(txout, provider.get(), use_max_sig);\n+}\n+\n // txouts needs to be in the order of tx.vin\n-TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)\n+TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, const CCoinControl* coin_control)\n {\n     CMutableTransaction txNew(tx);\n-    if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n+    if (!wallet->DummySignTx(txNew, txouts, coin_control)) {\n         return TxSize{-1, -1};\n     }\n     CTransaction ctx(txNew);\n@@ -54,19 +62,27 @@ TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *walle\n     return TxSize{vsize, weight};\n }\n \n-TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n+TxSize CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const CCoinControl* coin_control)\n {\n     std::vector<CTxOut> txouts;\n+    // Look up the inputs. The inputs are either in the wallet, or in coin_control.\n     for (const CTxIn& input : tx.vin) {\n         const auto mi = wallet->mapWallet.find(input.prevout.hash);\n         // Can not estimate size without knowing the input details\n-        if (mi == wallet->mapWallet.end()) {\n+        if (mi != wallet->mapWallet.end()) {\n+            assert(input.prevout.n < mi->second.tx->vout.size());\n+            txouts.emplace_back(mi->second.tx->vout.at(input.prevout.n));\n+        } else if (coin_control) {\n+            CTxOut txout;\n+            if (!coin_control->GetExternalOutput(input.prevout, txout)) {\n+                return TxSize{-1, -1};\n+            }\n+            txouts.emplace_back(txout);\n+        } else {\n             return TxSize{-1, -1};\n         }\n-        assert(input.prevout.n < mi->second.tx->vout.size());\n-        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n     }\n-    return CalculateMaximumSignedTxSize(tx, wallet, txouts, use_max_sig);\n+    return CalculateMaximumSignedTxSize(tx, wallet, txouts, coin_control);\n }\n \n void AvailableCoins(const CWallet& wallet, std::vector<COutput>& vCoins, const CCoinControl* coinControl, const CAmount& nMinimumAmount, const CAmount& nMaximumAmount, const CAmount& nMinimumSumAmount, const uint64_t nMaximumCount)\n@@ -387,6 +403,15 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n         results.emplace_back(std::make_tuple(waste, std::move(knapsack_coins), knapsack_value));\n     }\n \n+    // We include the minimum final change for SRD as we do want to avoid making really small change.\n+    // KnapsackSolver does not need this because it includes MIN_CHANGE internally.\n+    const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n+    auto srd_result = SelectCoinsSRD(positive_groups, srd_target);\n+    if (srd_result != std::nullopt) {\n+        const auto waste = GetSelectionWaste(srd_result->first, coin_selection_params.m_cost_of_change, srd_target, !coin_selection_params.m_subtract_fee_outputs);\n+        results.emplace_back(std::make_tuple(waste, std::move(srd_result->first), srd_result->second));\n+    }\n+\n     if (results.size() == 0) {\n         // No solution found\n         return false;\n@@ -426,32 +451,40 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n \n     std::vector<COutPoint> vPresetInputs;\n     coin_control.ListSelected(vPresetInputs);\n-    for (const COutPoint& outpoint : vPresetInputs)\n-    {\n+    for (const COutPoint& outpoint : vPresetInputs) {\n+        int input_bytes = -1;\n+        CTxOut txout;\n         std::map<uint256, CWalletTx>::const_iterator it = wallet.mapWallet.find(outpoint.hash);\n-        if (it != wallet.mapWallet.end())\n-        {\n+        if (it != wallet.mapWallet.end()) {\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n             if (wtx.tx->vout.size() <= outpoint.n) {\n                 return false;\n             }\n-            // Just to calculate the marginal byte size\n-            CInputCoin coin(wtx.tx, outpoint.n, GetTxSpendSize(wallet, wtx, outpoint.n, false));\n-            nValueFromPresetInputs += coin.txout.nValue;\n-            if (coin.m_input_bytes <= 0) {\n-                return false; // Not solvable, can't estimate size for fee\n-            }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.m_subtract_fee_outputs) {\n-                value_to_select -= coin.txout.nValue;\n-            } else {\n-                value_to_select -= coin.effective_value;\n+            input_bytes = GetTxSpendSize(wallet, wtx, outpoint.n, false);\n+            txout = wtx.tx->vout.at(outpoint.n);\n+        }\n+        if (input_bytes == -1) {\n+            // The input is external. We either did not find the tx in mapWallet, or we did but couldn't compute the input size with wallet data\n+            if (!coin_control.GetExternalOutput(outpoint, txout)) {\n+                // Not ours, and we don't have solving data.\n+                return false;\n             }\n-            setPresetCoins.insert(coin);\n+            input_bytes = CalculateMaximumSignedInputSize(txout, &coin_control.m_external_provider, /* use_max_sig */ true);\n+        }\n+\n+        CInputCoin coin(outpoint, txout, input_bytes);\n+        nValueFromPresetInputs += coin.txout.nValue;\n+        if (coin.m_input_bytes <= 0) {\n+            return false; // Not solvable, can't estimate size for fee\n+        }\n+        coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n+        if (coin_selection_params.m_subtract_fee_outputs) {\n+            value_to_select -= coin.txout.nValue;\n         } else {\n-            return false; // TODO: Allow non-wallet inputs\n+            value_to_select -= coin.effective_value;\n         }\n+        setPresetCoins.insert(coin);\n     }\n \n     // remove preset inputs from vCoins so that Coin Selection doesn't pick them.\n@@ -779,10 +812,10 @@ static bool CreateTransactionInternal(\n     }\n \n     // Calculate the transaction fee\n-    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), &wallet, coin_control.fAllowWatchOnly);\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), &wallet, &coin_control);\n     int nBytes = tx_sizes.vsize;\n     if (nBytes < 0) {\n-        error = _(\"Signing transaction failed\");\n+        error = _(\"Missing solving data for estimating transaction size\");\n         return false;\n     }\n     nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n@@ -804,7 +837,7 @@ static bool CreateTransactionInternal(\n         txNew.vout.erase(change_position);\n \n         // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n-        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), &wallet, coin_control.fAllowWatchOnly);\n+        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), &wallet, &coin_control);\n         nBytes = tx_sizes.vsize;\n         fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n     }"
      },
      {
        "sha": "7467dd9fa3d1d4ffb12a683d3fecb274278b7af9",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_SPEND_H\n #define BITCOIN_WALLET_SPEND_H\n \n+#include <consensus/amount.h>\n #include <wallet/coinselection.h>\n #include <wallet/transaction.h>\n #include <wallet/wallet.h>\n@@ -66,6 +67,7 @@ class COutput\n \n //Get the marginal bytes of spending the specified output\n int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet, bool use_max_sig = false);\n+int CalculateMaximumSignedInputSize(const CTxOut& txout, const SigningProvider* pwallet, bool use_max_sig = false);\n \n struct TxSize {\n     int64_t vsize{-1};\n@@ -76,8 +78,8 @@ struct TxSize {\n * Use DummySignatureCreator, which inserts 71 byte signatures everywhere.\n * NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n * be AllInputsMine). */\n-TxSize CalculateMaximumSignedTxSize(const CTransaction& tx, const CWallet* wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n-TxSize CalculateMaximumSignedTxSize(const CTransaction& tx, const CWallet* wallet, bool use_max_sig = false) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet);\n+TxSize CalculateMaximumSignedTxSize(const CTransaction& tx, const CWallet* wallet, const std::vector<CTxOut>& txouts, const CCoinControl* coin_control = nullptr);\n+TxSize CalculateMaximumSignedTxSize(const CTransaction& tx, const CWallet* wallet, const CCoinControl* coin_control = nullptr) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet);\n \n /**\n  * populate vCoins with vector of available COutputs."
      },
      {
        "sha": "815d17967c74e437388b15f77dfa3ab5b79c3990",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -212,6 +212,10 @@ void SQLiteDatabase::Open()\n         if (ret != SQLITE_OK) {\n             throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n         }\n+        ret = sqlite3_extended_result_codes(m_db, 1);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable extended result codes: %s\\n\", sqlite3_errstr(ret)));\n+        }\n     }\n \n     if (sqlite3_db_readonly(m_db, \"main\") != 0) {"
      },
      {
        "sha": "f80c4637b8f1a5621467a312295f81fbe593ec32",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <node/context.h>\n #include <primitives/transaction.h>\n #include <random.h>\n@@ -40,7 +40,7 @@ CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n CoinSelectionParams coin_selection_params(/* change_output_size= */ 0,\n                                           /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(0),\n                                           /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n-                                          /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n+                                          /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n@@ -287,7 +287,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     CoinSelectionParams coin_selection_params_bnb(/* change_output_size= */ 0,\n                                                   /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(3000),\n                                                   /* long_term_feerate= */ CFeeRate(1000), /* discard_feerate= */ CFeeRate(1000),\n-                                                  /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n+                                                  /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n     empty_wallet();\n@@ -654,7 +654,7 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         CoinSelectionParams cs_params(/* change_output_size= */ 34,\n                                       /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                       /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n-                                      /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n+                                      /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSet out_set;\n         CAmount out_value = 0;\n         CCoinControl cc;\n@@ -724,12 +724,25 @@ BOOST_AUTO_TEST_CASE(waste_test)\n     BOOST_CHECK_LT(waste_nochange2, waste_nochange1);\n     selection.clear();\n \n-    // 0 Waste only when fee == long term fee, no change, and no excess\n+    // No Waste when fee == long_term_fee, no change, and no excess\n     add_coin(1 * COIN, 1, selection, fee, fee);\n     add_coin(2 * COIN, 2, selection, fee, fee);\n-    const CAmount exact_target = in_amt - 2 * fee;\n-    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, 0, exact_target));\n+    const CAmount exact_target{in_amt - fee * 2};\n+    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, /* change_cost */ 0, exact_target));\n+    selection.clear();\n \n+    // No Waste when (fee - long_term_fee) == (-cost_of_change), and no excess\n+    const CAmount new_change_cost{fee_diff * 2};\n+    add_coin(1 * COIN, 1, selection, fee, fee + fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee, fee + fee_diff);\n+    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, new_change_cost, target));\n+    selection.clear();\n+\n+    // No Waste when (fee - long_term_fee) == (-excess), no change cost\n+    const CAmount new_target{in_amt - fee * 2 - fee_diff * 2};\n+    add_coin(1 * COIN, 1, selection, fee, fee + fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee, fee + fee_diff);\n+    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, /* change cost */ 0, new_target));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "becef707295a457d5f5d90a478d6b0d26ec7f58f",
        "filename": "src/wallet/test/spend_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/test/spend_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/test/spend_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/spend_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/amount.h>\n #include <policy/fees.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>"
      },
      {
        "sha": "9938380369034b5671dbe547e73f2a653b404bcd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -232,10 +232,10 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n                       \"seconds of key creation, and could contain transactions pertaining to the key. As a result, \"\n                       \"transactions and coins using this key may not appear in the wallet. This error could be caused \"\n                       \"by pruning or data corruption (see bitcoind log for details) and could be dealt with by \"\n-                      \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n-                      \"options).\\\"}},{\\\"success\\\":true}]\",\n+                      \"downloading and rescanning the relevant blocks (see -reindex option and rescanblockchain \"\n+                      \"RPC).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n+        RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n     }\n }\n \n@@ -280,7 +280,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n \n         ::dumpwallet().HandleRequest(request);\n-        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n+        RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n@@ -299,7 +299,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         AddWallet(context, wallet);\n         wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n-        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n+        RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);"
      },
      {
        "sha": "6fc1bd1eed3384fdcbcfa453887091f02ab132ce",
        "filename": "src/wallet/transaction.h",
        "status": "modified",
        "additions": 8,
        "deletions": 23,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/transaction.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_WALLET_TRANSACTION_H\n #define BITCOIN_WALLET_TRANSACTION_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <primitives/transaction.h>\n #include <serialize.h>\n #include <wallet/ismine.h>\n@@ -19,25 +19,6 @@\n \n typedef std::map<std::string, std::string> mapValue_t;\n \n-\n-static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (!mapValue.count(\"n\"))\n-    {\n-        nOrderPos = -1; // TODO: calculate elsewhere\n-        return;\n-    }\n-    nOrderPos = atoi64(mapValue[\"n\"]);\n-}\n-\n-\n-static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (nOrderPos == -1)\n-        return;\n-    mapValue[\"n\"] = ToString(nOrderPos);\n-}\n-\n /** Legacy class used for deserializing vtxPrev for backwards compatibility.\n  * vtxPrev was removed in commit 93a18a3650292afbb441a47d1fa1b94aeb0164e3,\n  * but old wallet.dat files may still contain vtxPrev vectors of CMerkleTxs.\n@@ -192,7 +173,9 @@ class CWalletTx\n         mapValue_t mapValueCopy = mapValue;\n \n         mapValueCopy[\"fromaccount\"] = \"\";\n-        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nOrderPos != -1) {\n+            mapValueCopy[\"n\"] = ToString(nOrderPos);\n+        }\n         if (nTimeSmart) {\n             mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n@@ -232,8 +215,10 @@ class CWalletTx\n             setConfirmed();\n         }\n \n-        ReadOrderPos(nOrderPos, mapValue);\n-        nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n+        const auto it_op = mapValue.find(\"n\");\n+        nOrderPos = (it_op != mapValue.end()) ? LocaleIndependentAtoi<int64_t>(it_op->second) : -1;\n+        const auto it_ts = mapValue.find(\"timesmart\");\n+        nTimeSmart = (it_ts != mapValue.end()) ? static_cast<unsigned int>(LocaleIndependentAtoi<int64_t>(it_ts->second)) : 0;\n \n         mapValue.erase(\"fromaccount\");\n         mapValue.erase(\"spent\");"
      },
      {
        "sha": "abfe9d7dbae68200d39f8f0b470541244f7e083d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 63,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,6 +6,7 @@\n #include <wallet/wallet.h>\n \n #include <chain.h>\n+#include <consensus/amount.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <external_signer.h>\n@@ -589,19 +590,24 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n-void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n+void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid, WalletBatch* batch)\n {\n     mapTxSpends.insert(std::make_pair(outpoint, wtxid));\n \n-    setLockedCoins.erase(outpoint);\n+    if (batch) {\n+        UnlockCoin(outpoint, batch);\n+    } else {\n+        WalletBatch temp_batch(GetDatabase());\n+        UnlockCoin(outpoint, &temp_batch);\n+    }\n \n     std::pair<TxSpends::iterator, TxSpends::iterator> range;\n     range = mapTxSpends.equal_range(outpoint);\n     SyncMetaData(range);\n }\n \n \n-void CWallet::AddToSpends(const uint256& wtxid)\n+void CWallet::AddToSpends(const uint256& wtxid, WalletBatch* batch)\n {\n     auto it = mapWallet.find(wtxid);\n     assert(it != mapWallet.end());\n@@ -610,7 +616,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n         return;\n \n     for (const CTxIn& txin : thisTx.tx->vin)\n-        AddToSpends(txin.prevout, wtxid);\n+        AddToSpends(txin.prevout, wtxid, batch);\n }\n \n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n@@ -879,7 +885,7 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n-CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose)\n+CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose, bool rescanning_old_block)\n {\n     LOCK(cs_wallet);\n \n@@ -909,8 +915,8 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n         wtx.nTimeReceived = chain().getAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n-        wtx.nTimeSmart = ComputeTimeSmart(wtx);\n-        AddToSpends(hash);\n+        wtx.nTimeSmart = ComputeTimeSmart(wtx, rescanning_old_block);\n+        AddToSpends(hash, &batch);\n     }\n \n     if (!fInsertedNew)\n@@ -1026,7 +1032,7 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate, bool rescanning_old_block)\n {\n     const CTransaction& tx = *ptx;\n     {\n@@ -1064,7 +1070,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n \n             // Block disconnection override an abandoned tx as unconfirmed\n             // which means user may have to call abandontransaction again\n-            return AddToWallet(MakeTransactionRef(tx), confirm, /* update_wtx= */ nullptr, /* fFlushOnClose= */ false);\n+            return AddToWallet(MakeTransactionRef(tx), confirm, /* update_wtx= */ nullptr, /* fFlushOnClose= */ false, rescanning_old_block);\n         }\n     }\n     return false;\n@@ -1193,9 +1199,9 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx)\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx, bool rescanning_old_block)\n {\n-    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx))\n+    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx, rescanning_old_block))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1443,34 +1449,35 @@ bool CWallet::AddWalletFlags(uint64_t flags)\n \n // Helper for producing a max-sized low-S low-R signature (eg 71 bytes)\n // or a max-sized low-S signature (e.g. 72 bytes) if use_max_sig is true\n-bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig) const\n+bool DummySignInput(const SigningProvider& provider, CTxIn &tx_in, const CTxOut &txout, bool use_max_sig)\n {\n     // Fill in dummy signatures for fee calculation.\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    std::unique_ptr<SigningProvider> provider = GetSolvingProvider(scriptPubKey);\n-    if (!provider) {\n-        // We don't know about this scriptpbuKey;\n-        return false;\n-    }\n-\n-    if (!ProduceSignature(*provider, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n+    if (!ProduceSignature(provider, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n         return false;\n     }\n     UpdateInput(tx_in, sigdata);\n     return true;\n }\n \n // Helper for producing a bunch of max-sized low-S low-R signatures (eg 71 bytes)\n-bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig) const\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, const CCoinControl* coin_control) const\n {\n     // Fill in dummy signatures for fee calculation.\n     int nIn = 0;\n     for (const auto& txout : txouts)\n     {\n-        if (!DummySignInput(txNew.vin[nIn], txout, use_max_sig)) {\n-            return false;\n+        CTxIn& txin = txNew.vin[nIn];\n+        // Use max sig if watch only inputs were used or if this particular input is an external input\n+        // to ensure a sufficient fee is attained for the requested feerate.\n+        const bool use_max_sig = coin_control && (coin_control->fAllowWatchOnly || coin_control->IsExternalSelected(txin.prevout));\n+        const std::unique_ptr<SigningProvider> provider = GetSolvingProvider(txout.scriptPubKey);\n+        if (!provider || !DummySignInput(*provider, txin, txout, use_max_sig)) {\n+            if (!coin_control || !DummySignInput(coin_control->m_external_provider, txin, txout, use_max_sig)) {\n+                return false;\n+            }\n         }\n \n         nIn++;\n@@ -1595,7 +1602,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     fAbortRescan = false;\n-    ShowProgress(strprintf(\"%s \" + _(\"Rescanning\u2026\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n+    ShowProgress(strprintf(\"%s \" + _(\"Rescanning\u2026\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if rescan required on startup (e.g. due to corruption)\n     uint256 tip_hash = WITH_LOCK(cs_wallet, return GetLastBlockHash());\n     uint256 end_hash = tip_hash;\n     if (max_height) chain().findAncestorByHeight(tip_hash, *max_height, FoundBlock().hash(end_hash));\n@@ -1638,7 +1645,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n                 break;\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                SyncTransaction(block.vtx[posInBlock], {CWalletTx::Status::CONFIRMED, block_height, block_hash, (int)posInBlock}, fUpdate);\n+                SyncTransaction(block.vtx[posInBlock], {CWalletTx::Status::CONFIRMED, block_height, block_hash, (int)posInBlock}, fUpdate, /* rescanning_old_block */ true);\n             }\n             // scan succeeded, record block as most recent successfully scanned\n             result.last_scanned_block = block_hash;\n@@ -2002,10 +2009,7 @@ DBErrors CWallet::LoadWallet()\n         assert(m_internal_spk_managers.empty());\n     }\n \n-    if (nLoadWalletRet != DBErrors::LOAD_OK)\n-        return nLoadWalletRet;\n-\n-    return DBErrors::LOAD_OK;\n+    return nLoadWalletRet;\n }\n \n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n@@ -2191,7 +2195,7 @@ void CWallet::MarkDestinationsDirty(const std::set<CTxDestination>& destinations\n \n std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) const\n {\n-    LOCK(cs_wallet);\n+    AssertLockHeld(cs_wallet);\n     std::set<CTxDestination> result;\n     for (const std::pair<const CTxDestination, CAddressBookData>& item : m_address_book)\n     {\n@@ -2260,22 +2264,36 @@ bool CWallet::DisplayAddress(const CTxDestination& dest)\n     return signer_spk_man->DisplayAddress(scriptPubKey, signer);\n }\n \n-void CWallet::LockCoin(const COutPoint& output)\n+bool CWallet::LockCoin(const COutPoint& output, WalletBatch* batch)\n {\n     AssertLockHeld(cs_wallet);\n     setLockedCoins.insert(output);\n+    if (batch) {\n+        return batch->WriteLockedUTXO(output);\n+    }\n+    return true;\n }\n \n-void CWallet::UnlockCoin(const COutPoint& output)\n+bool CWallet::UnlockCoin(const COutPoint& output, WalletBatch* batch)\n {\n     AssertLockHeld(cs_wallet);\n-    setLockedCoins.erase(output);\n+    bool was_locked = setLockedCoins.erase(output);\n+    if (batch && was_locked) {\n+        return batch->EraseLockedUTXO(output);\n+    }\n+    return true;\n }\n \n-void CWallet::UnlockAllCoins()\n+bool CWallet::UnlockAllCoins()\n {\n     AssertLockHeld(cs_wallet);\n+    bool success = true;\n+    WalletBatch batch(GetDatabase());\n+    for (auto it = setLockedCoins.begin(); it != setLockedCoins.end(); ++it) {\n+        success &= batch.EraseLockedUTXO(*it);\n+    }\n     setLockedCoins.clear();\n+    return success;\n }\n \n bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n@@ -2365,6 +2383,8 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t>& mapKeyBirth) const {\n  * - If sending a transaction, assign its timestamp to the current time.\n  * - If receiving a transaction outside a block, assign its timestamp to the\n  *   current time.\n+ * - If receiving a transaction during a rescanning process, assign all its\n+ *   (not already known) transactions' timestamps to the block time.\n  * - If receiving a block with a future timestamp, assign all its (not already\n  *   known) transactions' timestamps to the current time.\n  * - If receiving a block with a past timestamp, before the most recent known\n@@ -2379,38 +2399,43 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t>& mapKeyBirth) const {\n  * https://bitcointalk.org/?topic=54527, or\n  * https://github.com/bitcoin/bitcoin/pull/1393.\n  */\n-unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n+unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx, bool rescanning_old_block) const\n {\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n     if (!wtx.isUnconfirmed() && !wtx.isAbandoned()) {\n         int64_t blocktime;\n-        if (chain().findBlock(wtx.m_confirm.hashBlock, FoundBlock().time(blocktime))) {\n-            int64_t latestNow = wtx.nTimeReceived;\n-            int64_t latestEntry = 0;\n-\n-            // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-            int64_t latestTolerated = latestNow + 300;\n-            const TxItems& txOrdered = wtxOrdered;\n-            for (auto it = txOrdered.rbegin(); it != txOrdered.rend(); ++it) {\n-                CWalletTx* const pwtx = it->second;\n-                if (pwtx == &wtx) {\n-                    continue;\n-                }\n-                int64_t nSmartTime;\n-                nSmartTime = pwtx->nTimeSmart;\n-                if (!nSmartTime) {\n-                    nSmartTime = pwtx->nTimeReceived;\n-                }\n-                if (nSmartTime <= latestTolerated) {\n-                    latestEntry = nSmartTime;\n-                    if (nSmartTime > latestNow) {\n-                        latestNow = nSmartTime;\n+        int64_t block_max_time;\n+        if (chain().findBlock(wtx.m_confirm.hashBlock, FoundBlock().time(blocktime).maxTime(block_max_time))) {\n+            if (rescanning_old_block) {\n+                nTimeSmart = block_max_time;\n+            } else {\n+                int64_t latestNow = wtx.nTimeReceived;\n+                int64_t latestEntry = 0;\n+\n+                // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                int64_t latestTolerated = latestNow + 300;\n+                const TxItems& txOrdered = wtxOrdered;\n+                for (auto it = txOrdered.rbegin(); it != txOrdered.rend(); ++it) {\n+                    CWalletTx* const pwtx = it->second;\n+                    if (pwtx == &wtx) {\n+                        continue;\n+                    }\n+                    int64_t nSmartTime;\n+                    nSmartTime = pwtx->nTimeSmart;\n+                    if (!nSmartTime) {\n+                        nSmartTime = pwtx->nTimeReceived;\n+                    }\n+                    if (nSmartTime <= latestTolerated) {\n+                        latestEntry = nSmartTime;\n+                        if (nSmartTime > latestNow) {\n+                            latestNow = nSmartTime;\n+                        }\n+                        break;\n                     }\n-                    break;\n                 }\n-            }\n \n-            nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+                nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+            }\n         } else {\n             WalletLogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.m_confirm.hashBlock.ToString());\n         }\n@@ -2516,6 +2541,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), ReleaseWallet);\n+    bool rescan_required = false;\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet();\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n@@ -2536,6 +2562,10 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         {\n             error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), PACKAGE_NAME);\n             return nullptr;\n+        } else if (nLoadWalletRet == DBErrors::NEED_RESCAN) {\n+            warnings.push_back(strprintf(_(\"Error reading %s! Transaction data may be missing or incorrect.\"\n+                                           \" Rescanning wallet.\"), walletFile));\n+            rescan_required = true;\n         }\n         else {\n             error = strprintf(_(\"Error loading %s\"), walletFile);\n@@ -2716,7 +2746,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n-    walletInstance->m_confirm_target = args.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_confirm_target = args.GetIntArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = args.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = args.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n@@ -2727,7 +2757,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n \n     LOCK(walletInstance->cs_wallet);\n \n-    if (chain && !AttachChain(walletInstance, *chain, error, warnings)) {\n+    if (chain && !AttachChain(walletInstance, *chain, rescan_required, error, warnings)) {\n         return nullptr;\n     }\n \n@@ -2749,7 +2779,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     return walletInstance;\n }\n \n-bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interfaces::Chain& chain, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interfaces::Chain& chain, const bool rescan_required, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     LOCK(walletInstance->cs_wallet);\n     // allow setting the chain if it hasn't been set already but prevent changing it\n@@ -2766,8 +2796,9 @@ bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interf\n     // interface.\n     walletInstance->m_chain_notifications_handler = walletInstance->chain().handleNotifications(walletInstance);\n \n+    // If rescan_required = true, rescan_height remains equal to 0\n     int rescan_height = 0;\n-    if (!gArgs.GetBoolArg(\"-rescan\", false))\n+    if (!rescan_required)\n     {\n         WalletBatch batch(walletInstance->GetDatabase());\n         CBlockLocator locator;\n@@ -3252,12 +3283,13 @@ DescriptorScriptPubKeyMan* CWallet::GetDescriptorScriptPubKeyMan(const WalletDes\n \n ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal)\n {\n+    AssertLockHeld(cs_wallet);\n+\n     if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n         WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n         return nullptr;\n     }\n \n-    LOCK(cs_wallet);\n     auto spk_man = GetDescriptorScriptPubKeyMan(desc);\n     if (spk_man) {\n         WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());"
      },
      {
        "sha": "767b24adbb33f32a22616bed2b8e69471f22a29f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_WALLET_WALLET_H\n #define BITCOIN_WALLET_WALLET_H\n \n-#include <amount.h>\n+#include <consensus/amount.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <outputtype.h>\n@@ -256,8 +256,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     typedef std::multimap<COutPoint, uint256> TxSpends;\n     TxSpends mapTxSpends GUARDED_BY(cs_wallet);\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void AddToSpends(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void AddToSpends(const uint256& wtxid, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n@@ -271,8 +271,11 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * abandoned is an indication that it is not safe to be considered abandoned.\n      * Abandoned state should probably be more carefully tracked via different\n      * posInBlock signals or by checking mempool presence when necessary.\n+     *\n+     * Should be called with rescanning_old_block set to true, if the transaction is\n+     * not discovered in real time, but during a rescan of old blocks.\n      */\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate, bool rescanning_old_block) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n     void MarkConflicted(const uint256& hashBlock, int conflicting_height, const uint256& hashTx);\n@@ -284,7 +287,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected/ScanForWalletTransactions.\n      * Should be called with non-zero block_hash and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool update_tx = true, bool rescanning_old_block = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** WalletFlags set on this wallet. */\n     std::atomic<uint64_t> m_wallet_flags{0};\n@@ -334,7 +337,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * block locator and m_last_block_processed, and registering for\n      * notifications about new blocks and transactions.\n      */\n-    static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+    static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, const bool rescan_required, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n public:\n     /**\n@@ -449,9 +452,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool DisplayAddress(const CTxDestination& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool LockCoin(const COutPoint& output, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool UnlockCoin(const COutPoint& output, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /*\n@@ -484,7 +487,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n     void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n+    unsigned int ComputeTimeSmart(const CWalletTx& wtx, bool rescanning_old_block) const;\n \n     /**\n      * Increment the next transaction order id\n@@ -503,7 +506,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @return true if wtx is changed and needs to be saved to disk, otherwise false\n     using UpdateWalletTxFn = std::function<bool(CWalletTx& wtx, bool new_tx)>;\n \n-    CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true);\n+    CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true, bool rescanning_old_block = false);\n     bool LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void transactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) override;\n     void blockConnected(const CBlock& block, int height) override;\n@@ -573,14 +576,13 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     /** Pass this transaction to node for mempool insertion and relay to peers if flag set to true */\n     bool SubmitTxMemoryPoolAndRelay(const CWalletTx& wtx, std::string& err_string, bool relay) const;\n \n-    bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n+    bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, const CCoinControl* coin_control = nullptr) const\n     {\n         std::vector<CTxOut> v_txouts(txouts.size());\n         std::copy(txouts.begin(), txouts.end(), v_txouts.begin());\n-        return DummySignTx(txNew, v_txouts, use_max_sig);\n+        return DummySignTx(txNew, v_txouts, coin_control);\n     }\n-    bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig = false) const;\n-    bool DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig = false) const;\n+    bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, const CCoinControl* coin_control = nullptr) const;\n \n     bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -630,7 +632,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     int64_t GetOldestKeyPoolTime() const;\n \n-    std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n+    std::set<CTxDestination> GetLabelAddresses(const std::string& label) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Marks all outputs in each one of the destinations dirty, so their cache is\n@@ -876,7 +878,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     DescriptorScriptPubKeyMan* GetDescriptorScriptPubKeyMan(const WalletDescriptor& desc) const;\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n-    ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal);\n+    ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n };\n \n /**\n@@ -925,4 +927,6 @@ bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n //! Remove wallet name from persistent configuration so it will not be loaded on startup.\n bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n \n+bool DummySignInput(const SigningProvider& provider, CTxIn &tx_in, const CTxOut &txout, bool use_max_sig);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      },
      {
        "sha": "8ff09a0878fe88d3b03d8d5b48c5b45973c15855",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -40,6 +40,7 @@ const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n+const std::string LOCKED_UTXO{\"lockedutxo\"};\n const std::string MASTER_KEY{\"mkey\"};\n const std::string MINVERSION{\"minversion\"};\n const std::string NAME{\"name\"};\n@@ -284,6 +285,16 @@ bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const Descri\n     return true;\n }\n \n+bool WalletBatch::WriteLockedUTXO(const COutPoint& output)\n+{\n+    return WriteIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)), uint8_t{'1'});\n+}\n+\n+bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n+{\n+    return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};\n@@ -300,6 +311,7 @@ class CWalletScanState {\n     std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n     std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n     std::map<uint160, CHDChain> m_hd_chains;\n+    bool tx_corrupt{false};\n \n     CWalletScanState() {\n     }\n@@ -334,7 +346,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             // LoadToWallet call below creates a new CWalletTx that fill_wtx\n             // callback fills with transaction metadata.\n             auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                assert(new_tx);\n+                if(!new_tx) {\n+                    // There's some corruption here since the tx we just tried to load was already in the wallet.\n+                    // We don't consider this type of corruption critical, and can fix it by removing tx data and\n+                    // rescanning.\n+                    wss.tx_corrupt = true;\n+                    return false;\n+                }\n                 ssValue >> wtx;\n                 if (wtx.GetHash() != hash)\n                     return false;\n@@ -701,6 +719,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n             wss.fIsEncrypted = true;\n+        } else if (strType == DBKeys::LOCKED_UTXO) {\n+            uint256 hash;\n+            uint32_t n;\n+            ssKey >> hash;\n+            ssKey >> n;\n+            pwallet->LockCoin(COutPoint(hash, n));\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&\n@@ -738,6 +762,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n {\n     CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n+    bool rescan_required = false;\n     DBErrors result = DBErrors::LOAD_OK;\n \n     LOCK(pwallet->cs_wallet);\n@@ -801,12 +826,17 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 } else if (strType == DBKeys::FLAGS) {\n                     // reading the wallet flags can only fail if unknown flags are present\n                     result = DBErrors::TOO_NEW;\n+                } else if (wss.tx_corrupt) {\n+                    pwallet->WalletLogPrintf(\"Error: Corrupt transaction found. This can be fixed by removing transactions from wallet and rescanning.\\n\");\n+                    // Set tx_corrupt back to false so that the error is only printed once (per corrupt tx)\n+                    wss.tx_corrupt = false;\n+                    result = DBErrors::CORRUPT;\n                 } else {\n                     // Leave other errors alone, if we try to fix them we might make things worse.\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n                     if (strType == DBKeys::TX)\n                         // Rescan if there is a bad transaction record:\n-                        gArgs.SoftSetBoolArg(\"-rescan\", true);\n+                        rescan_required = true;\n                 }\n             }\n             if (!strErr.empty())\n@@ -842,8 +872,11 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n     }\n \n-    if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n+    if (rescan_required && result == DBErrors::LOAD_OK) {\n+        result = DBErrors::NEED_RESCAN;\n+    } else if (fNoncriticalErrors && result == DBErrors::LOAD_OK) {\n         result = DBErrors::NONCRITICAL_ERROR;\n+    }\n \n     // Any wallet corruption at all: skip any rewriting or\n     // upgrading, we don't want to make it worse."
      },
      {
        "sha": "9c752623b3bb77fdf667d4beb77313fab2618c9d",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_WALLET_WALLETDB_H\n #define BITCOIN_WALLET_WALLETDB_H\n \n-#include <amount.h>\n #include <script/sign.h>\n #include <wallet/db.h>\n #include <wallet/walletutil.h>\n@@ -48,7 +47,8 @@ enum class DBErrors\n     NONCRITICAL_ERROR,\n     TOO_NEW,\n     LOAD_FAIL,\n-    NEED_REWRITE\n+    NEED_REWRITE,\n+    NEED_RESCAN\n };\n \n namespace DBKeys {\n@@ -65,6 +65,7 @@ extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n extern const std::string KEY;\n extern const std::string KEYMETA;\n+extern const std::string LOCKED_UTXO;\n extern const std::string MASTER_KEY;\n extern const std::string MINVERSION;\n extern const std::string NAME;\n@@ -250,6 +251,9 @@ class WalletBatch\n     bool WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n     bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n+    bool WriteLockedUTXO(const COutPoint& output);\n+    bool EraseLockedUTXO(const COutPoint& output);\n+\n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database"
      },
      {
        "sha": "e3cb5cee5d7481c300b7ef28fcab4c1cbbd8ac22",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -76,6 +76,10 @@ static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::pa\n         } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n             tfm::format(std::cerr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n             return nullptr;\n+        } else if (load_wallet_ret == DBErrors::NEED_RESCAN) {\n+            tfm::format(std::cerr, \"Error reading %s! Some transaction data might be missing or\"\n+                           \" incorrect. Wallet requires a rescan.\",\n+                name);\n         } else {\n             tfm::format(std::cerr, \"Error loading %s\", name);\n             return nullptr;"
      },
      {
        "sha": "a53de34db486f32e1e415798c8c73ca107c6a36d",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -47,7 +47,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n             std::unique_ptr<CZMQAbstractNotifier> notifier = factory();\n             notifier->SetType(entry.first);\n             notifier->SetAddress(address);\n-            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n+            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetIntArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n             notifiers.push_back(std::move(notifier));\n         }\n     }"
      },
      {
        "sha": "56f4c98317e28d3b1215156a256276b121184cfd",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <netbase.h>\n #include <node/blockstorage.h>\n #include <rpc/server.h>\n #include <streams.h>\n@@ -73,6 +74,20 @@ static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)\n     return 0;\n }\n \n+static bool IsZMQAddressIPV6(const std::string &zmq_address)\n+{\n+    const std::string tcp_prefix = \"tcp://\";\n+    const size_t tcp_index = zmq_address.rfind(tcp_prefix);\n+    const size_t colon_index = zmq_address.rfind(\":\");\n+    if (tcp_index == 0 && colon_index != std::string::npos) {\n+        const std::string ip = zmq_address.substr(tcp_prefix.length(), colon_index - tcp_prefix.length());\n+        CNetAddr addr;\n+        LookupHost(ip, addr, false);\n+        if (addr.IsIPv6()) return true;\n+    }\n+    return false;\n+}\n+\n bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n {\n     assert(!psocket);\n@@ -107,6 +122,15 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n             return false;\n         }\n \n+        // On some systems (e.g. OpenBSD) the ZMQ_IPV6 must not be enabled, if the address to bind isn't IPv6\n+        const int enable_ipv6 { IsZMQAddressIPV6(address) ? 1 : 0};\n+        rc = zmq_setsockopt(psocket, ZMQ_IPV6, &enable_ipv6, sizeof(enable_ipv6));\n+        if (rc != 0) {\n+            zmqError(\"Failed to set ZMQ_IPV6\");\n+            zmq_close(psocket);\n+            return false;\n+        }\n+\n         rc = zmq_bind(psocket, address.c_str());\n         if (rc != 0)\n         {"
      },
      {
        "sha": "acd68d8d8f4510f524b12441a2d53a616cdfed8a",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -26,13 +26,20 @@ See [/doc/fuzzing.md](/doc/fuzzing.md)\n \n ### Functional tests\n \n-#### Dependencies\n+#### Dependencies and prerequisites\n \n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n+\n+On Windows the `PYTHONUTF8` environment variable must be set to 1:\n+\n+```cmd\n+set PYTHONUTF8=1\n+```\n+\n #### Running the tests\n \n Individual tests can be run by directly calling the test script, e.g.:"
      },
      {
        "sha": "8bcba1b39caf63273172d650d47379c025114539",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -24,3 +24,4 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true\n @ENABLE_EXTERNAL_SIGNER_TRUE@ENABLE_EXTERNAL_SIGNER=true\n+@ENABLE_SYSCALL_SANDBOX_TRUE@ENABLE_SYSCALL_SANDBOX=true"
      },
      {
        "sha": "926810cf03f87d49e6d7419b0dcbd8570f6cdca5",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -188,5 +188,5 @@ perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt |\n #### See also:\n \n - [Installing perf](https://askubuntu.com/q/50145)\n-- [Perf examples](http://www.brendangregg.com/perf.html)\n+- [Perf examples](https://www.brendangregg.com/perf.html)\n - [Hotspot](https://github.com/KDAB/hotspot): a GUI for perf output analysis"
      },
      {
        "sha": "d6fc2d580f71bbb79ea812a0ca0bc3520159a645",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -141,7 +141,7 @@ def run_test(self):\n         peer_messaging = self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+        blocks = [int(self.generate(self.nodes[0], nblocks=1)[0], 16)]\n         self.sync_all(self.nodes[0:2])\n \n         # Notice above how we called an RPC by calling a method with the same"
      },
      {
        "sha": "e3cb7725bd716eb6824a0cc9c4aa8181fd928463",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -26,18 +26,18 @@ def setup_network(self):\n         # We'll connect the nodes later\n \n     def run_test(self):\n-        self.nodes[0].generate(3)\n+        self.generate(self.nodes[0], 3)\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         # Deleting the undo file will result in reorg failure\n         os.unlink(os.path.join(datadir, self.chain, 'blocks', 'rev00000.dat'))\n \n         # Connecting to a node with a more work chain will trigger a reorg\n         # attempt.\n-        self.nodes[1].generate(3)\n+        self.generate(self.nodes[1], 3)\n         with self.nodes[0].assert_debug_log([\"Failed to disconnect block\"]):\n             self.connect_nodes(0, 1)\n-            self.nodes[1].generate(1)\n+            self.generate(self.nodes[1], 1)\n \n             # Check that node0 aborted\n             self.log.info(\"Waiting for crash\")"
      },
      {
        "sha": "5a8394db2e16d4829484394a4da0fcce510a74aa",
        "filename": "test/functional/feature_addrman.py",
        "status": "added",
        "additions": 143,
        "deletions": 0,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_addrman.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_addrman.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_addrman.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test addrman functionality\"\"\"\n+\n+import os\n+import re\n+import struct\n+\n+from test_framework.messages import ser_uint256, hash256\n+from test_framework.p2p import MAGIC_BYTES\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import assert_equal\n+\n+\n+def serialize_addrman(\n+    *,\n+    format=1,\n+    lowest_compatible=3,\n+    net_magic=\"regtest\",\n+    bucket_key=1,\n+    len_new=None,\n+    len_tried=None,\n+    mock_checksum=None,\n+):\n+    new = []\n+    tried = []\n+    INCOMPATIBILITY_BASE = 32\n+    r = MAGIC_BYTES[net_magic]\n+    r += struct.pack(\"B\", format)\n+    r += struct.pack(\"B\", INCOMPATIBILITY_BASE + lowest_compatible)\n+    r += ser_uint256(bucket_key)\n+    r += struct.pack(\"i\", len_new or len(new))\n+    r += struct.pack(\"i\", len_tried or len(tried))\n+    ADDRMAN_NEW_BUCKET_COUNT = 1 << 10\n+    r += struct.pack(\"i\", ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30))\n+    for _ in range(ADDRMAN_NEW_BUCKET_COUNT):\n+        r += struct.pack(\"i\", 0)\n+    checksum = hash256(r)\n+    r += mock_checksum or checksum\n+    return r\n+\n+\n+def write_addrman(peers_dat, **kwargs):\n+    with open(peers_dat, \"wb\") as f:\n+        f.write(serialize_addrman(**kwargs))\n+\n+\n+class AddrmanTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        peers_dat = os.path.join(self.nodes[0].datadir, self.chain, \"peers.dat\")\n+        init_error = lambda reason: (\n+            f\"Error: Invalid or corrupt peers.dat \\\\({reason}\\\\). If you believe this \"\n+            f\"is a bug, please report it to {self.config['environment']['PACKAGE_BUGREPORT']}. \"\n+            f'As a workaround, you can move the file \\\\(\"{re.escape(peers_dat)}\"\\\\) out of the way \\\\(rename, '\n+            \"move, or delete\\\\) to have a new one created on the next start.\"\n+        )\n+\n+        self.log.info(\"Check that mocked addrman is valid\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat)\n+        with self.nodes[0].assert_debug_log([\"Loaded 0 addresses from peers.dat\"]):\n+            self.start_node(0, extra_args=[\"-checkaddrman=1\"])\n+        assert_equal(self.nodes[0].getnodeaddresses(), [])\n+\n+        self.log.info(\"Check that addrman from future cannot be read\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, lowest_compatible=111)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\n+                \"Unsupported format of addrman database: 1. It is compatible with \"\n+                \"formats >=111, but the maximum supported by this version of \"\n+                f\"{self.config['environment']['PACKAGE_NAME']} is 3.: (.+)\"\n+            ),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (EOF)\")\n+        self.stop_node(0)\n+        with open(peers_dat, \"wb\") as f:\n+            f.write(serialize_addrman()[:-1])\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"CAutoFile::read: end of file.*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (magic)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, net_magic=\"signet\")\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Invalid network magic number\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (checksum)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, mock_checksum=b\"ab\" * 32)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Checksum mismatch, data corrupted\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (len_tried)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, len_tried=-1)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Corrupt CAddrMan serialization: nTried=-1, should be in \\\\[0, 16384\\\\]:.*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (len_new)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, len_new=-1)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Corrupt CAddrMan serialization: nNew=-1, should be in \\\\[0, 65536\\\\]:.*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (failed check)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, bucket_key=0)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Corrupt data. Consistency check failed with code -16: .*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that missing addrman is recreated\")\n+        self.stop_node(0)\n+        os.remove(peers_dat)\n+        with self.nodes[0].assert_debug_log([\n+                f'Creating peers.dat because the file was not found (\"{peers_dat}\")',\n+        ]):\n+            self.start_node(0)\n+        assert_equal(self.nodes[0].getnodeaddresses(), [])\n+\n+\n+if __name__ == \"__main__\":\n+    AddrmanTest().main()"
      },
      {
        "sha": "7be393a4ea9d552d7bad1f2a32b95db34f6d64a7",
        "filename": "test/functional/feature_anchors.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_anchors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_anchors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_anchors.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -25,9 +25,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.disable_autoconnect = False\n \n-    def setup_network(self):\n-        self.setup_nodes()\n-\n     def run_test(self):\n         node_anchors_path = os.path.join(\n             self.nodes[0].datadir, \"regtest\", \"anchors.dat\""
      },
      {
        "sha": "debd87962fd1e553c5c933d5a1fa02df71ae7133",
        "filename": "test/functional/feature_asmap.py",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_asmap.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_asmap.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_asmap.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -14,9 +14,11 @@\n \n 4. `bitcoind -asmap/-asmap=` with no file specified, using the default asmap\n \n-5. `bitcoind -asmap` with no file specified and a missing default asmap file\n+5. `bitcoind -asmap` restart with an addrman containing new and tried entries\n \n-6. `bitcoind -asmap` with an empty (unparsable) default asmap file\n+6. `bitcoind -asmap` with no file specified and a missing default asmap file\n+\n+7. `bitcoind -asmap` with an empty (unparsable) default asmap file\n \n The tests are order-independent.\n \n@@ -37,6 +39,12 @@ def expected_messages(filename):\n class AsmapTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [[\"-checkaddrman=1\"]]  # Do addrman checks on all operations.\n+\n+    def fill_addrman(self, node_id):\n+        \"\"\"Add 1 tried address to the addrman, followed by 1 new address.\"\"\"\n+        for addr, tried in [[0, True], [1, False]]:\n+            self.nodes[node_id].addpeeraddress(address=f\"101.{addr}.0.0\", tried=tried, port=8333)\n \n     def test_without_asmap_arg(self):\n         self.log.info('Test bitcoind with no -asmap arg passed')\n@@ -72,6 +80,22 @@ def test_default_asmap(self):\n                 self.start_node(0, [arg])\n         os.remove(self.default_asmap)\n \n+    def test_asmap_interaction_with_addrman_containing_entries(self):\n+        self.log.info(\"Test bitcoind -asmap restart with addrman containing new and tried entries\")\n+        self.stop_node(0)\n+        shutil.copyfile(self.asmap_raw, self.default_asmap)\n+        self.start_node(0, [\"-asmap\", \"-checkaddrman=1\"])\n+        self.fill_addrman(node_id=0)\n+        self.restart_node(0, [\"-asmap\", \"-checkaddrman=1\"])\n+        with self.node.assert_debug_log(\n+            expected_msgs=[\n+                \"Addrman checks started: new 1, tried 1, total 2\",\n+                \"Addrman checks completed successfully\",\n+            ]\n+        ):\n+            self.node.getnodeaddresses()  # getnodeaddresses re-runs the addrman checks\n+        os.remove(self.default_asmap)\n+\n     def test_default_asmap_with_missing_file(self):\n         self.log.info('Test bitcoind -asmap with missing default map file')\n         self.stop_node(0)\n@@ -97,6 +121,7 @@ def run_test(self):\n         self.test_asmap_with_absolute_path()\n         self.test_asmap_with_relative_path()\n         self.test_default_asmap()\n+        self.test_asmap_interaction_with_addrman_containing_entries()\n         self.test_default_asmap_with_missing_file()\n         self.test_empty_asmap()\n "
      },
      {
        "sha": "e65525a0237ca7ec5cad0d2d191d19365bebe18e",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -64,7 +64,7 @@ def setup_nodes(self):\n         self.import_deterministic_coinbase_privkeys()\n \n     def run_test(self):\n-        self.nodes[0].generatetoaddress(COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n+        self.generatetoaddress(self.nodes[0], COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n \n         self.sync_blocks()\n \n@@ -92,15 +92,15 @@ def run_test(self):\n         address = wallet.getnewaddress()\n         self.nodes[0].sendtoaddress(address, 10)\n         self.sync_mempools()\n-        self.nodes[0].generate(1)\n+        self.generate(self.nodes[0], 1)\n         self.sync_blocks()\n         # Create a conflicting transaction using RBF\n         return_address = self.nodes[0].getnewaddress()\n         tx1_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx2_id = self.nodes[1].bumpfee(tx1_id)[\"txid\"]\n         # Confirm the transaction\n         self.sync_mempools()\n-        self.nodes[0].generate(1)\n+        self.generate(self.nodes[0], 1)\n         self.sync_blocks()\n         # Create another conflicting transaction using RBF\n         tx3_id = self.nodes[1].sendtoaddress(return_address, 1)"
      },
      {
        "sha": "ee2c71cd42d6de21876a21bf646735b97ae9cd75",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -42,10 +42,13 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [\n             [\n+                '-testactivationheight=csv@432',\n                 \"-acceptnonstdtxn=1\",\n-                \"-peertimeout=9999\",  # bump because mocktime might cause a disconnect otherwise\n             ],\n-            [\"-acceptnonstdtxn=0\"],\n+            [\n+                '-testactivationheight=csv@432',\n+                \"-acceptnonstdtxn=0\",\n+            ],\n         ]\n \n     def skip_test_if_missing_module(self):\n@@ -55,7 +58,7 @@ def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n \n         # Generate some coins\n-        self.nodes[0].generate(110)\n+        self.generate(self.nodes[0], 110)\n \n         self.log.info(\"Running test disable flag\")\n         self.test_disable_flag()\n@@ -143,7 +146,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             for i in range(num_outputs):\n                 outputs[addresses[i]] = random.randint(1, 20)*0.01\n             self.nodes[0].sendmany(\"\", outputs)\n-            self.nodes[0].generate(1)\n+            self.generate(self.nodes[0], 1)\n \n         utxos = self.nodes[0].listunspent()\n \n@@ -273,7 +276,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n-            self.nodes[0].generate(1)\n+            self.generate(self.nodes[0], 1)\n             cur_time += 600\n \n         assert tx2.hash in self.nodes[0].getrawmempool()\n@@ -288,15 +291,15 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         self.nodes[0].setmocktime(cur_time+600)\n         # Save block template now to use for the reorg later\n         tmpl = self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n-        self.nodes[0].generate(1)\n+        self.generate(self.nodes[0], 1)\n         assert tx2.hash not in self.nodes[0].getrawmempool()\n \n         # Now that tx2 is not in the mempool, a sequence locked spend should\n         # succeed\n         tx3 = test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n         assert tx3.hash in self.nodes[0].getrawmempool()\n \n-        self.nodes[0].generate(1)\n+        self.generate(self.nodes[0], 1)\n         assert tx3.hash not in self.nodes[0].getrawmempool()\n \n         # One more test, this time using height locks\n@@ -349,7 +352,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Reset the chain and get rid of the mocktimed-blocks\n         self.nodes[0].setmocktime(0)\n         self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n-        self.nodes[0].generate(10)\n+        self.generate(self.nodes[0], 10)\n \n     # Make sure that BIP68 isn't being used to validate blocks prior to\n     # activation height.  If more blocks are mined prior to this test\n@@ -403,9 +406,9 @@ def activateCSV(self):\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)\n-        self.nodes[0].generate(min_activation_height - height - 2)\n+        self.generate(self.nodes[0], min_activation_height - height - 2)\n         assert not softfork_active(self.nodes[0], 'csv')\n-        self.nodes[0].generate(1)\n+        self.generate(self.nodes[0], 1)\n         assert softfork_active(self.nodes[0], 'csv')\n         self.sync_blocks()\n "
      },
      {
        "sha": "b06ea8542bdc44081ba52b663140f23e25672697",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -82,7 +82,10 @@ class FullBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [['-acceptnonstdtxn=1']]  # This is a consensus block test, we don't care about tx policy\n+        self.extra_args = [[\n+            '-acceptnonstdtxn=1',  # This is a consensus block test, we don't care about tx policy\n+            '-testactivationheight=bip34@2',\n+        ]]\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node"
      },
      {
        "sha": "b740f2cc27ee60f46bb7cdaf0e7fbb91da239ce3",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -25,9 +25,9 @@ def run_test(self):\n         self.sync_index(height=200)\n         assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n-        self.nodes[0].generate(250)\n+        self.generate(self.nodes[0], 250)\n         self.sync_all()\n-        self.nodes[0].generate(250)\n+        self.generate(self.nodes[0], 250)\n         self.sync_all()\n         self.sync_index(height=700)\n \n@@ -46,7 +46,7 @@ def run_test(self):\n \n         self.log.info(\"make sure accessing the blockfilters throws an error\")\n         assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\", self.nodes[0].getblockfilter, self.nodes[0].getblockhash(2))\n-        self.nodes[0].generate(1000)\n+        self.generate(self.nodes[0], 1000)\n \n         self.log.info(\"prune below the blockfilterindexes best block while blockfilters are disabled\")\n         pruneheight_new = self.nodes[0].pruneblockchain(1000)"
      },
      {
        "sha": "28e6d6cdf92af59d3877c129df41c8d253a316a8",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -29,7 +29,7 @@ def run_test(self):\n         self.log.info(\"Starting with existing blocksdir ...\")\n         self.start_node(0, [f\"-blocksdir={blocksdir_path}\"])\n         self.log.info(\"mining blocks..\")\n-        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n+        self.generatetoaddress(self.nodes[0], 10, self.nodes[0].get_deterministic_priv_key().address)\n         assert os.path.isfile(os.path.join(blocksdir_path, self.chain, \"blocks\", \"blk00000.dat\"))\n         assert os.path.isdir(os.path.join(self.nodes[0].datadir, self.chain, \"blocks\", \"index\"))\n "
      },
      {
        "sha": "3dc858f5d23d30d3c2b8262d772a98bff513246c",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,7 +8,6 @@\n \"\"\"\n \n from test_framework.blocktools import (\n-    CLTV_HEIGHT,\n     create_block,\n     create_coinbase,\n )\n@@ -76,10 +75,14 @@ def cltv_validate(tx, height):\n     cltv_modify_tx(tx, prepend_scriptsig=scheme[0], nsequence=scheme[1], nlocktime=scheme[2])\n \n \n+CLTV_HEIGHT = 111\n+\n+\n class BIP65Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n+            f'-testactivationheight=cltv@{CLTV_HEIGHT}',\n             '-whitelist=noban@127.0.0.1',\n             '-par=1',  # Use only one script thread to get the exact reject reason for testing\n             '-acceptnonstdtxn=1',  # cltv_invalidate is nonstandard\n@@ -102,8 +105,8 @@ def run_test(self):\n         self.test_cltv_info(is_active=False)\n \n         self.log.info(\"Mining %d blocks\", CLTV_HEIGHT - 2)\n-        wallet.generate(10)\n-        self.nodes[0].generate(CLTV_HEIGHT - 2 - 10)\n+        self.generate(wallet, 10)\n+        self.generate(self.nodes[0], CLTV_HEIGHT - 2 - 10)\n         assert_equal(self.nodes[0].getblockcount(), CLTV_HEIGHT - 2)\n \n         self.log.info(\"Test that invalid-according-to-CLTV transactions can still appear in a block\")"
      },
      {
        "sha": "c592d7bd69e7cb890bea178473229799031a3a5c",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -67,10 +67,10 @@ def _test_coin_stats_index(self):\n         index_hash_options = ['none', 'muhash']\n \n         # Generate a normal transaction and mine it\n-        node.generate(COINBASE_MATURITY + 1)\n+        self.generate(node, COINBASE_MATURITY + 1)\n         address = self.nodes[0].get_deterministic_priv_key().address\n         node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n-        node.generate(1)\n+        self.generate(node, 1)\n \n         self.sync_blocks(timeout=120)\n \n@@ -92,7 +92,7 @@ def _test_coin_stats_index(self):\n         self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")\n \n         # Generate a new tip\n-        node.generate(5)\n+        self.generate(node, 5)\n \n         for hash_option in index_hash_options:\n             # Fetch old stats by height\n@@ -164,27 +164,27 @@ def _test_coin_stats_index(self):\n         # Generate and send another tx with an OP_RETURN output (which is unspendable)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n-        tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n+        tx2.vout.append(CTxOut(int(Decimal('20.99') * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n         tx2_hex = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())['hex']\n         self.nodes[0].sendrawtransaction(tx2_hex)\n \n         # Include both txs in a block\n-        self.nodes[0].generate(1)\n+        self.generate(self.nodes[0], 1)\n         self.sync_all()\n \n         for hash_option in index_hash_options:\n             # Check all amounts were registered correctly\n             res6 = index_node.gettxoutsetinfo(hash_option, 108)\n-            assert_equal(res6['total_unspendable_amount'], Decimal('70.98999999'))\n+            assert_equal(res6['total_unspendable_amount'], Decimal('70.99000000'))\n             assert_equal(res6['block_info'], {\n-                'unspendable': Decimal('20.98999999'),\n+                'unspendable': Decimal('20.99000000'),\n                 'prevout_spent': 111,\n                 'new_outputs_ex_coinbase': Decimal('89.99993620'),\n-                'coinbase': Decimal('50.01006381'),\n+                'coinbase': Decimal('50.01006380'),\n                 'unspendables': {\n                     'genesis_block': 0,\n                     'bip30': 0,\n-                    'scripts': Decimal('20.98999999'),\n+                    'scripts': Decimal('20.99000000'),\n                     'unclaimed_rewards': 0\n                 }\n             })\n@@ -206,7 +206,7 @@ def _test_coin_stats_index(self):\n \n         for hash_option in index_hash_options:\n             res7 = index_node.gettxoutsetinfo(hash_option, 109)\n-            assert_equal(res7['total_unspendable_amount'], Decimal('80.98999999'))\n+            assert_equal(res7['total_unspendable_amount'], Decimal('80.99000000'))\n             assert_equal(res7['block_info'], {\n                 'unspendable': 10,\n                 'prevout_spent': 0,\n@@ -228,7 +228,7 @@ def _test_coin_stats_index(self):\n         res9 = index_node.gettxoutsetinfo('muhash')\n         assert_equal(res8, res9)\n \n-        index_node.generate(1)\n+        self.generate(index_node, 1)\n         res10 = index_node.gettxoutsetinfo('muhash')\n         assert(res8['txouts'] < res10['txouts'])\n \n@@ -247,14 +247,14 @@ def _test_reorg_index(self):\n \n         # Generate two block, let the index catch up, then invalidate the blocks\n         index_node = self.nodes[1]\n-        reorg_blocks = index_node.generatetoaddress(2, index_node.getnewaddress())\n+        reorg_blocks = self.generatetoaddress(index_node, 2, index_node.getnewaddress())\n         reorg_block = reorg_blocks[1]\n         res_invalid = index_node.gettxoutsetinfo('muhash')\n         index_node.invalidateblock(reorg_blocks[0])\n         assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n \n         # Add two new blocks\n-        block = index_node.generate(2)[1]\n+        block = self.generate(index_node, 2)[1]\n         res = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=None, use_index=False)\n \n         # Test that the result of the reorged block is not returned for its old block height\n@@ -270,7 +270,7 @@ def _test_reorg_index(self):\n \n         # Add another block, so we don't depend on reconsiderblock remembering which\n         # blocks were touched by invalidateblock\n-        index_node.generate(1)\n+        self.generate(index_node, 1)\n         self.sync_all()\n \n         # Ensure that removing and re-adding blocks yields consistent results"
      },
      {
        "sha": "3d9d8b74417ea1137608898e017b7e6f0b17675f",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -164,11 +164,14 @@ def test_seed_peers(self):\n         # fixed seeds\n         assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n         start = int(time.time())\n-        with self.nodes[0].assert_debug_log(expected_msgs=[\n-                \"Loaded 0 addresses from peers.dat\",\n-                \"0 addresses found from DNS seeds\",\n-                \"opencon thread start\",  # Ensure ThreadOpenConnections::start time is properly set\n-        ]):\n+        with self.nodes[0].assert_debug_log(\n+                expected_msgs=[\n+                    \"Loaded 0 addresses from peers.dat\",\n+                    \"0 addresses found from DNS seeds\",\n+                    \"opencon thread start\",  # Ensure ThreadOpenConnections::start time is properly set\n+                ],\n+                timeout=10,\n+        ):\n             self.start_node(0, extra_args=['-dnsseed=1', '-fixedseeds=1', f'-mocktime={start}'])\n         with self.nodes[0].assert_debug_log(expected_msgs=[\n                 \"Adding fixed seeds as 60 seconds have passed and addrman is empty\",\n@@ -206,11 +209,14 @@ def test_seed_peers(self):\n         # We expect the node will allow 60 seconds prior to using fixed seeds\n         assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n         start = int(time.time())\n-        with self.nodes[0].assert_debug_log(expected_msgs=[\n-                \"Loaded 0 addresses from peers.dat\",\n-                \"DNS seeding disabled\",\n-                \"opencon thread start\",  # Ensure ThreadOpenConnections::start time is properly set\n-        ]):\n+        with self.nodes[0].assert_debug_log(\n+                expected_msgs=[\n+                    \"Loaded 0 addresses from peers.dat\",\n+                    \"DNS seeding disabled\",\n+                    \"opencon thread start\",  # Ensure ThreadOpenConnections::start time is properly set\n+                ],\n+                timeout=10,\n+        ):\n             self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=1', '-addnode=fakenodeaddr', f'-mocktime={start}'])\n         with self.nodes[0].assert_debug_log(expected_msgs=[\n                 \"Adding fixed seeds as 60 seconds have passed and addrman is empty\","
      },
      {
        "sha": "5255b13bd19e1586030eef14757d5238ac38e906",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -41,7 +41,6 @@\n import time\n \n from test_framework.blocktools import (\n-    CSV_ACTIVATION_HEIGHT,\n     create_block,\n     create_coinbase,\n )\n@@ -69,6 +68,7 @@\n SEQ_TYPE_FLAG = 1 << 22\n SEQ_RANDOM_LOW_BIT = 1 << 18\n \n+\n def relative_locktime(sdf, srhb, stf, srlb):\n     \"\"\"Returns a locktime with certain bits set.\"\"\"\n \n@@ -83,16 +83,21 @@ def relative_locktime(sdf, srhb, stf, srlb):\n         locktime |= SEQ_RANDOM_LOW_BIT\n     return locktime\n \n+\n def all_rlt_txs(txs):\n     return [tx['tx'] for tx in txs]\n \n \n+CSV_ACTIVATION_HEIGHT = 432\n+\n+\n class BIP68_112_113Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [[\n             '-whitelist=noban@127.0.0.1',\n+            f'-testactivationheight=csv@{CSV_ACTIVATION_HEIGHT}',\n             '-par=1',  # Use only one script thread to get the exact reject reason for testing\n         ]]\n         self.supports_cli = False\n@@ -143,13 +148,13 @@ def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta=0\n         for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n             locktime = relative_locktime(sdf, srhb, stf, srlb)\n             tx = self.create_self_transfer_from_utxo(bip112inputs[i])\n-            if (varyOP_CSV):  # if varying OP_CSV, nSequence is fixed\n+            if varyOP_CSV:  # if varying OP_CSV, nSequence is fixed\n                 tx.vin[0].nSequence = BASE_RELATIVE_LOCKTIME + locktime_delta\n             else:  # vary nSequence instead, OP_CSV is fixed\n                 tx.vin[0].nSequence = locktime + locktime_delta\n             tx.nVersion = txversion\n             self.miniwallet.sign_tx(tx)\n-            if (varyOP_CSV):\n+            if varyOP_CSV:\n                 tx.vin[0].scriptSig = CScript([locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(tx.vin[0].scriptSig)))\n             else:\n                 tx.vin[0].scriptSig = CScript([BASE_RELATIVE_LOCKTIME, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(tx.vin[0].scriptSig)))\n@@ -189,15 +194,15 @@ def run_test(self):\n         self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n         long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n         self.nodes[0].setmocktime(long_past_time - 100)  # enough so that the generated blocks will still all be before long_past_time\n-        self.coinbase_blocks = self.miniwallet.generate(COINBASE_BLOCK_COUNT)  # blocks generated for inputs\n+        self.coinbase_blocks = self.generate(self.miniwallet, COINBASE_BLOCK_COUNT)  # blocks generated for inputs\n         self.nodes[0].setmocktime(0)  # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n         self.tipheight = COINBASE_BLOCK_COUNT  # height of the next block to build\n         self.last_block_time = long_past_time\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # Activation height is hardcoded\n         # We advance to block height five below BIP112 activation for the following tests\n-        test_blocks = self.generate_blocks(CSV_ACTIVATION_HEIGHT-5 - COINBASE_BLOCK_COUNT)\n+        test_blocks = self.generate_blocks(CSV_ACTIVATION_HEIGHT - 5 - COINBASE_BLOCK_COUNT)\n         self.send_blocks(test_blocks)\n         assert not softfork_active(self.nodes[0], 'csv')\n \n@@ -235,7 +240,7 @@ def run_test(self):\n         bip113input = self.send_generic_input_tx(self.coinbase_blocks)\n \n         self.nodes[0].setmocktime(self.last_block_time + 600)\n-        inputblockhash = self.nodes[0].generate(1)[0]  # 1 block generated for inputs to be in chain at height 431\n+        inputblockhash = self.generate(self.nodes[0], 1)[0]  # 1 block generated for inputs to be in chain at height 431\n         self.nodes[0].setmocktime(0)\n         self.tip = int(inputblockhash, 16)\n         self.tipheight += 1\n@@ -482,5 +487,6 @@ def run_test(self):\n         self.send_blocks([self.create_test_block(time_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n+\n if __name__ == '__main__':\n     BIP68_112_113Test().main()"
      },
      {
        "sha": "28aff1f2f99715dc09610e3037e062f1aa6506ad",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -8,7 +8,6 @@\n \"\"\"\n \n from test_framework.blocktools import (\n-    DERSIG_HEIGHT,\n     create_block,\n     create_coinbase,\n )\n@@ -42,10 +41,14 @@ def unDERify(tx):\n     tx.vin[0].scriptSig = CScript(newscript)\n \n \n+DERSIG_HEIGHT = 102\n+\n+\n class BIP66Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n+            f'-testactivationheight=dersig@{DERSIG_HEIGHT}',\n             '-whitelist=noban@127.0.0.1',\n             '-par=1',  # Use only one script thread to get the exact log msg for testing\n         ]]\n@@ -72,7 +75,7 @@ def run_test(self):\n         self.test_dersig_info(is_active=False)\n \n         self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n-        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.miniwallet.generate(DERSIG_HEIGHT - 2)]\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(self.miniwallet, DERSIG_HEIGHT - 2)]\n \n         self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n \n@@ -83,7 +86,6 @@ def run_test(self):\n         tip = self.nodes[0].getbestblockhash()\n         block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n         block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time)\n-        block.nVersion = 2\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n@@ -110,7 +112,7 @@ def run_test(self):\n             peer.sync_with_ping()\n \n         self.log.info(\"Test that transactions with non-DER signatures cannot appear in a block\")\n-        block.nVersion = 3\n+        block.nVersion = 4\n \n         spendtx = self.create_tx(self.coinbase_txids[1])\n         unDERify(spendtx)\n@@ -139,7 +141,7 @@ def run_test(self):\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             peer.sync_with_ping()\n \n-        self.log.info(\"Test that a version 3 block with a DERSIG-compliant transaction is accepted\")\n+        self.log.info(\"Test that a block with a DERSIG-compliant transaction is accepted\")\n         block.vtx[1] = self.create_tx(self.coinbase_txids[1])\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()"
      },
      {
        "sha": "9c225dc6877c4f69378bc0c67b910f93baf95791",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -132,9 +132,13 @@ def check_smart_estimates(node, fees_seen):\n     delta = 1.0e-6  # account for rounding error\n     last_feerate = float(max(fees_seen))\n     all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n+    mempoolMinFee = node.getmempoolinfo()['mempoolminfee']\n+    minRelaytxFee = node.getmempoolinfo()['minrelaytxfee']\n     for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n         feerate = float(e[\"feerate\"])\n         assert_greater_than(feerate, 0)\n+        assert_greater_than_or_equal(feerate, float(mempoolMinFee))\n+        assert_greater_than_or_equal(feerate, float(minRelaytxFee))\n \n         if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n             raise AssertionError(f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\")\n@@ -197,7 +201,7 @@ def transact_and_mine(self, numblocks, mining_node):\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee) / tx_kbytes)\n             self.sync_mempools(wait=.1)\n-            mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n+            mined = mining_node.getblock(self.generate(mining_node, 1)[0], True)[\"tx\"]\n             self.sync_blocks(wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n@@ -221,7 +225,7 @@ def run_test(self):\n \n         # Mine\n         while len(self.nodes[0].getrawmempool()) > 0:\n-            self.nodes[0].generate(1)\n+            self.generate(self.nodes[0], 1)\n \n         # Repeatedly split those 2 outputs, doubling twice for each rep\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n@@ -231,12 +235,12 @@ def run_test(self):\n             while len(self.txouts) > 0:\n                 split_inputs(self.nodes[0], self.txouts, self.txouts2)\n             while len(self.nodes[0].getrawmempool()) > 0:\n-                self.nodes[0].generate(1)\n+                self.generate(self.nodes[0], 1)\n             # Double txouts2 to txouts\n             while len(self.txouts2) > 0:\n                 split_inputs(self.nodes[0], self.txouts2, self.txouts)\n             while len(self.nodes[0].getrawmempool()) > 0:\n-                self.nodes[0].generate(1)\n+                self.generate(self.nodes[0], 1)\n             reps += 1\n         self.log.info(\"Finished splitting\")\n \n@@ -269,12 +273,18 @@ def run_test(self):\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:\n-            self.nodes[1].generate(1)\n+            self.generate(self.nodes[1], 1)\n \n         self.sync_blocks(self.nodes[0:3], wait=.1)\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n+        # check that the effective feerate is greater than or equal to the mempoolminfee even for high mempoolminfee\n+        self.log.info(\"Test fee rate estimation after restarting node with high MempoolMinFee\")\n+        high_val = 3*self.nodes[1].estimatesmartfee(1)['feerate']\n+        self.restart_node(1, extra_args=[f'-minrelaytxfee={high_val}'])\n+        check_estimates(self.nodes[1], self.fees_per_kb)\n+\n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])\n         assert_raises_rpc_error(-32603, \"Fee estimation disabled\","
      },
      {
        "sha": "13e6a8d6d72b42533b2faf3caaee009373327809",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -29,7 +29,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.nodes[1].setnetworkactive(state=False)\n-        self.nodes[0].generate(COINBASE_MATURITY)\n+        self.generate(self.nodes[0], COINBASE_MATURITY)\n \n         # Parsing the url of our node to get settings for config file\n         data_dir = self.nodes[0].datadir"
      },
      {
        "sha": "ac4d40638e03e1f4cc6fdf5c848271760bf69ee5",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -38,7 +38,6 @@ def set_test_params(self):\n         self.extra_args = [[\n             \"-maxuploadtarget=800\",\n             \"-acceptnonstdtxn=1\",\n-            \"-peertimeout=9999\",  # bump because mocktime might cause a disconnect otherwise\n         ]]\n         self.supports_cli = False\n \n@@ -56,7 +55,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(old_time)\n \n         # Generate some old blocks\n-        self.nodes[0].generate(130)\n+        self.generate(self.nodes[0], 130)\n \n         # p2p_conns[0] will only request old blocks\n         # p2p_conns[1] will only request new blocks"
      },
      {
        "sha": "11cb4aa3cbc3fbb4585a08b6f2406f090c93b140",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n         self.log.info(f\"Generating {num_blocks_to_generate} blocks on node0\")\n-        hashes = self.nodes[0].generatetoaddress(num_blocks_to_generate,\n+        hashes = self.generatetoaddress(self.nodes[0], num_blocks_to_generate,\n                                                  self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(f\"Node0 current chain work: {self.nodes[0].getblockheader(hashes[-1])['chainwork']}\")\n@@ -73,7 +73,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n \n         self.log.info(\"Generating one more block\")\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.generatetoaddress(self.nodes[0], 1, self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Verifying nodes are all synced\")\n "
      },
      {
        "sha": "2a507c75c403f8f4be3e2f4c1d9a14694fec2c22",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -27,6 +27,9 @@ class NotificationsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        # The experimental syscall sandbox feature (-sandbox) is not compatible with -alertnotify,\n+        # -blocknotify or -walletnotify (which all invoke execve).\n+        self.disable_syscall_sandbox = True\n \n     def setup_network(self):\n         self.wallet = ''.join(chr(i) for i in range(FILE_CHAR_START, FILE_CHAR_END) if chr(i) not in FILE_CHARS_DISALLOWED)\n@@ -42,7 +45,6 @@ def setup_network(self):\n             f\"-alertnotify=echo > {os.path.join(self.alertnotify_dir, '%s')}\",\n             f\"-blocknotify=echo > {os.path.join(self.blocknotify_dir, '%s')}\",\n         ], [\n-            \"-rescan\",\n             f\"-walletnotify=echo %h_%b > {os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))}\",\n         ]]\n         self.wallet_names = [self.default_wallet_name, self.wallet]\n@@ -76,7 +78,7 @@ def run_test(self):\n \n         self.log.info(\"test -blocknotify\")\n         block_count = 10\n-        blocks = self.nodes[1].generatetoaddress(block_count, self.nodes[1].getnewaddress() if self.is_wallet_compiled() else ADDRESS_BCRT1_UNSPENDABLE)\n+        blocks = self.generatetoaddress(self.nodes[1], block_count, self.nodes[1].getnewaddress() if self.is_wallet_compiled() else ADDRESS_BCRT1_UNSPENDABLE)\n \n         # wait at most 10 seconds for expected number of files before reading the content\n         self.wait_until(lambda: len(os.listdir(self.blocknotify_dir)) == block_count, timeout=10)\n@@ -91,16 +93,15 @@ def run_test(self):\n \n             # directory content should equal the generated transaction hashes\n             tx_details = list(map(lambda t: (t['txid'], t['blockheight'], t['blockhash']), self.nodes[1].listtransactions(\"*\", block_count)))\n-            self.stop_node(1)\n             self.expect_wallet_notify(tx_details)\n \n             self.log.info(\"test -walletnotify after rescan\")\n-            # restart node to rescan to force wallet notifications\n-            self.start_node(1)\n-            self.connect_nodes(0, 1)\n-\n+            # rescan to force wallet notifications\n+            self.nodes[1].rescanblockchain()\n             self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n+            self.connect_nodes(0, 1)\n+\n             # directory content should equal the generated transaction hashes\n             tx_details = list(map(lambda t: (t['txid'], t['blockheight'], t['blockhash']), self.nodes[1].listtransactions(\"*\", block_count)))\n             self.expect_wallet_notify(tx_details)\n@@ -110,7 +111,7 @@ def run_test(self):\n             # triggered by node 1\n             self.log.info(\"test -walletnotify with conflicting transactions\")\n             self.nodes[0].rescanblockchain()\n-            self.nodes[0].generatetoaddress(100, ADDRESS_BCRT1_UNSPENDABLE)\n+            self.generatetoaddress(self.nodes[0], 100, ADDRESS_BCRT1_UNSPENDABLE)\n             self.sync_blocks()\n \n             # Generate transaction on node 0, sync mempools, and check for\n@@ -131,7 +132,7 @@ def run_test(self):\n \n             # Add bump1 transaction to new block, checking for a notification\n             # and the correct number of confirmations.\n-            blockhash1 = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+            blockhash1 = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n             blockheight1 = self.nodes[0].getblockcount()\n             self.sync_blocks()\n             self.expect_wallet_notify([(bump1, blockheight1, blockhash1)])\n@@ -148,7 +149,7 @@ def run_test(self):\n             # about newly confirmed bump2 and newly conflicted tx2.\n             self.disconnect_nodes(0, 1)\n             bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n-            blockhash2 = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+            blockhash2 = self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n             blockheight2 = self.nodes[0].getblockcount()\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)"
      },
      {
        "sha": "217a38050d0ac50288e1d26335805331cdc030ac",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -52,7 +52,7 @@ def set_test_params(self):\n         # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [[\n-            f'-segwitheight={COINBASE_MATURITY + 5}',\n+            f'-testactivationheight=segwit@{COINBASE_MATURITY + 5}',\n             '-addresstype=legacy',\n             '-par=1',  # Use only one script thread to get the exact reject reason for testing\n         ]]\n@@ -74,11 +74,11 @@ def run_test(self):\n             wmulti.importaddress(self.ms_address)\n             wmulti.importaddress(self.wit_ms_address)\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)  # block height = 2\n+        self.coinbase_blocks = self.generate(self.nodes[0], 2)  # block height = 2\n         coinbase_txid = []\n         for i in self.coinbase_blocks:\n             coinbase_txid.append(self.nodes[0].getblock(i)['tx'][0])\n-        self.nodes[0].generate(COINBASE_MATURITY)  # block height = COINBASE_MATURITY + 2\n+        self.generate(self.nodes[0], COINBASE_MATURITY)  # block height = COINBASE_MATURITY + 2\n         self.lastblockhash = self.nodes[0].getbestblockhash()\n         self.lastblockheight = COINBASE_MATURITY + 2\n         self.lastblocktime = int(time.time()) + self.lastblockheight"
      },
      {
        "sha": "aac42d4dbf62daf9e251708194097e360e87d95b",
        "filename": "test/functional/feature_presegwit_node_upgrade.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_presegwit_node_upgrade.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_presegwit_node_upgrade.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_presegwit_node_upgrade.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -9,12 +9,14 @@\n     assert_equal,\n     softfork_active,\n )\n+import os\n+\n \n class SegwitUpgradeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\"-segwitheight=10\"]]\n+        self.extra_args = [[\"-testactivationheight=segwit@10\"]]\n \n     def run_test(self):\n         \"\"\"A pre-segwit node with insufficiently validated blocks needs to redownload blocks\"\"\"\n@@ -28,18 +30,21 @@ def run_test(self):\n         assert not softfork_active(node, \"segwit\")\n \n         # Generate 8 blocks without witness data\n-        node.generate(8)\n+        self.generate(node, 8)\n         assert_equal(node.getblockcount(), 8)\n \n         self.stop_node(0)\n         # Restarting the node (with segwit activation height set to 5) should result in a shutdown\n         # because the blockchain consists of 3 insufficiently validated blocks per segwit consensus rules.\n         node.assert_start_raises_init_error(\n-                extra_args=[\"-segwitheight=5\"],\n-                expected_msg=\": Witness data for blocks after height 5 requires validation. Please restart with -reindex..\\nPlease restart with -reindex or -reindex-chainstate to recover.\")\n+            extra_args=[\"-testactivationheight=segwit@5\"],\n+            expected_msg=\": Witness data for blocks after height 5 requires \"\n+            f\"validation. Please restart with -reindex..{os.linesep}\"\n+            \"Please restart with -reindex or -reindex-chainstate to recover.\",\n+        )\n \n         # As directed, the user restarts the node with -reindex\n-        self.start_node(0, extra_args=[\"-reindex\", \"-segwitheight=5\"])\n+        self.start_node(0, extra_args=[\"-reindex\", \"-testactivationheight=segwit@5\"])\n \n         # With the segwit consensus rules, the node is able to validate only up to block 4\n         assert_equal(node.getblockcount(), 4)"
      },
      {
        "sha": "c2463d0bccd260b49c6e834f42625ff3bdf85557",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "patch": "@@ -118,9 +118,9 @@ def setup_nodes(self):\n \n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n-        self.nodes[1].generate(200)\n+        self.generate(self.nodes[1], 200)\n         self.sync_blocks(self.nodes[0:2])\n-        self.nodes[0].generate(150)\n+        self.generate(self.nodes[0], 150)\n \n         # Then mine enough full blocks to create more than 550MiB of data\n         mine_large_blocks(self.nodes[0], 645)\n@@ -211,7 +211,7 @@ def reorg_test(self):\n         self.disconnect_nodes(1, 2)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n-        self.nodes[1].generate(300)\n+        self.generate(self.nodes[1], 300)\n \n         self.log.info(\"Reconnect nodes\")\n         self.connect_nodes(0, 1)\n@@ -263,7 +263,7 @@ def reorg_back(self):\n             self.nodes[0].invalidateblock(curchainhash)\n             assert_equal(self.nodes[0].getblockcount(), self.mainchainheight)\n             assert_equal(self.nodes[0].getbestblockhash(), self.mainchainhash2)\n-            goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n+            goalbesthash = self.generate(self.nodes[0], blocks_to_mine)[-1]\n             goalbestheight = first_reorg_height + 1\n \n         self.log.info(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n@@ -306,7 +306,7 @@ def has_block(index):\n         assert_equal(block1_details[\"nTx\"], len(block1_details[\"tx\"]))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n-        node.generate(6)\n+        self.generate(node, 6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # Pruned block should still know the number of transactions\n@@ -337,7 +337,7 @@ def has_block(index):\n         assert has_block(2), \"blk00002.dat is still there, should be pruned by now\"\n \n         # advance the tip so blk00002.dat and blk00003.dat can be pruned (the last 288 blocks should now be in blk00004.dat)\n-        node.generate(288)\n+        self.generate(node, 288)\n         prune(1000)\n         assert not has_block(2), \"blk00002.dat is still there, should be pruned by now\"\n         assert not has_block(3), \"blk00003.dat is still there, should be pruned by now\""
      }
    ]
  },
  {
    "sha": "108603ef8381ff492105befef11114be5b92bb2e",
    "node_id": "C_kwDOABII59oAKDEwODYwM2VmODM4MWZmNDkyMTA1YmVmZWYxMTExNGJlNWI5MmJiMmU",
    "commit": {
      "author": {
        "name": "Naiza Singla",
        "email": "naiza@iitk.ac.in",
        "date": "2021-10-05T11:20:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-10-05T11:20:30Z"
      },
      "message": "Merge branch 'bitcoin:master' into master",
      "tree": {
        "sha": "876bd67d7cc3d5b165c456435cbf307517b346fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/876bd67d7cc3d5b165c456435cbf307517b346fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/108603ef8381ff492105befef11114be5b92bb2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXDT+CRBK7hj4Ov3rIwAAiL4IAIXKR8NebUxdeCDnJUEk6ZLT\ndODHk1EcSSJexQpnyZIUYxEOJcb0UuLF6oBHUs0ZHk7tkD14huXWrUWfAC26jURs\n/OEETgwd0AfcPYfMqTe6ciFjPZP8e3opUPCTdCVygC0uhigwXBTL6BguvNfqQfCj\nYZt9/J+CsqA3YVI8DiTXw4eGkppUHZR7kPmYhdy/wNqjxmQLeT6FsC35jKbM2rWI\nq8nyQ01wDBGvRaQs50iiEZ0hEsxDzIX9r8MRsjNpXTagfzX1hCVyrNBIpmlupTct\nKcZUJ6edO1tLRL1FA/zlNsvl373c7yB6+6PY/FLvt9BUwfo4kJmHFuX1avQ3KE4=\n=eUMN\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 876bd67d7cc3d5b165c456435cbf307517b346fc\nparent adb1c5d4ed2995560b00575a3b3aeee1786dfbfb\nparent c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4\nauthor Naiza Singla <naiza@iitk.ac.in> 1633432830 +0530\ncommitter GitHub <noreply@github.com> 1633432830 +0530\n\nMerge branch 'bitcoin:master' into master\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108603ef8381ff492105befef11114be5b92bb2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/108603ef8381ff492105befef11114be5b92bb2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108603ef8381ff492105befef11114be5b92bb2e/comments",
    "author": {
      "login": "naiza2000",
      "id": 58358790,
      "node_id": "MDQ6VXNlcjU4MzU4Nzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naiza2000",
      "html_url": "https://github.com/naiza2000",
      "followers_url": "https://api.github.com/users/naiza2000/followers",
      "following_url": "https://api.github.com/users/naiza2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/naiza2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naiza2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naiza2000/subscriptions",
      "organizations_url": "https://api.github.com/users/naiza2000/orgs",
      "repos_url": "https://api.github.com/users/naiza2000/repos",
      "events_url": "https://api.github.com/users/naiza2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naiza2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adb1c5d4ed2995560b00575a3b3aeee1786dfbfb"
      },
      {
        "sha": "c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c79d9fb2f6e5f47dcb0ac45d66a542dad0c8e7e4"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 28,
      "deletions": 26
    },
    "files": [
      {
        "sha": "7dbefd9042a1f03b992add7b5d80bf4b301d12a1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108603ef8381ff492105befef11114be5b92bb2e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108603ef8381ff492105befef11114be5b92bb2e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=108603ef8381ff492105befef11114be5b92bb2e",
        "patch": "@@ -107,7 +107,7 @@ AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_TOOL(LLVM_COV, llvm-cov)\n AC_PATH_PROG(LCOV, lcov)\n dnl Python 3.6 is specified in .python-version and should be used if available, see doc/dependencies.md\n-AC_PATH_PROGS([PYTHON], [python3.6 python3.7 python3.8 python3.9 python3 python])\n+AC_PATH_PROGS([PYTHON], [python3.6 python3.7 python3.8 python3.9, python3.10, python3 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)"
      },
      {
        "sha": "2b479a072e0cb46dfbc44b8179b61b56dcaf513b",
        "filename": "src/util/syscall_sandbox.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108603ef8381ff492105befef11114be5b92bb2e/src/util/syscall_sandbox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108603ef8381ff492105befef11114be5b92bb2e/src/util/syscall_sandbox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.cpp?ref=108603ef8381ff492105befef11114be5b92bb2e",
        "patch": "@@ -536,31 +536,33 @@ class SeccompPolicyBuilder\n \n     void AllowFileSystem()\n     {\n-        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n-        allowed_syscalls.insert(__NR_chdir);      // change working directory\n-        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n-        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n-        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n-        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n-        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n-        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n-        allowed_syscalls.insert(__NR_fstat);      // get file status\n-        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n-        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n-        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n-        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n-        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n-        allowed_syscalls.insert(__NR_lstat);      // get file status\n-        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n-        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n-        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n-        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n-        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n-        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n-        allowed_syscalls.insert(__NR_stat);       // get file status\n-        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n-        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n-        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+        allowed_syscalls.insert(__NR_access);          // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);           // change working directory\n+        allowed_syscalls.insert(__NR_chmod);           // change permissions of a file\n+        allowed_syscalls.insert(__NR_copy_file_range); // copy a range of data from one file to another\n+        allowed_syscalls.insert(__NR_fallocate);       // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);          // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);          // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);       // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);           // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);           // get file status\n+        allowed_syscalls.insert(__NR_newfstatat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);           // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);       // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);          // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);        // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64);      // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);           // get file status\n+        allowed_syscalls.insert(__NR_mkdir);           // create a directory\n+        allowed_syscalls.insert(__NR_open);            // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);          // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);        // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);          // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);           // delete a directory\n+        allowed_syscalls.insert(__NR_stat);            // get file status\n+        allowed_syscalls.insert(__NR_statfs);          // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);           // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);          // delete a name and possibly the file it refers to\n     }\n \n     void AllowFutex()"
      }
    ]
  }
]