gmaxwell,2014-07-06T04:34:38Z,While syncing with this code from a pair of local peers:\n\n2014-07-06 04:26:28 UpdateTip: new best=000000001ee1d3053357a374d6d9746e80d56a666f3827c92e80e0d1b3f2f2a1  height=1888  log2_work=42.883429  tx=1917  date=2009-01-26 03:\n21:12 progress=0.000023\n2014-07-06 04:26:28   nActualTimespan = 942027  before bounds\n2014-07-06 04:26:28 GetNextWorkRequired RETARGET\n2014-07-06 04:26:28 Params().Tar,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48102820,48102820,
gmaxwell,2014-07-06T05:13:47Z,"2014-07-06 04:38:07 Leaving block file 0: CBlockFileInfo(blocks=119950, size=134216038, heights=0...309426, time=2009-01-03...2014-07-06)\n2014-07-06 04:38:37 Leaving block file 1: CBlockFileInfo(blocks=11284, size=134206314, heights=119942...131232, time=2011-04-24...2011-06-16)\n\nThe first range looks wrong. :)\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48103260,48103260,
sipa,2014-07-06T07:46:44Z,"@gmaxwell The 'prev block not found' should be fixed; there is a code path to fetch blocks directly (ignoring the headers-based fetching), in case we're very close to being synced (to avoid an extra roundtrip for newly inv'ed blocks)... but the time comparison used < instead of >.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48105340,48105340,
gmaxwell,2014-07-06T13:45:11Z,"3hr 46 minute resync over the network here.  I'm a bit confused that the ping time to the two peers I was pulling from was still >10 seconds even when the sync was well into the cpu bound part (for their own part, the peers were fairly low on cpu utilization).\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48112187,48112187,
sipa,2014-07-06T15:57:40Z,"4h21m here, from random peers, and default dbcache.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48115402,48115402,
laanwj,2014-07-07T05:04:53Z,Woohoo!\nTesting...\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48141243,48141243,
laanwj,2014-07-07T10:55:51Z,"Synced in 3:43 here, and with lots of other things running on the same computer.\n\nI do get this error when running with `-checkblocks=0 -checklevel=4` afterwards (after shutting down with 'stop'):\n\n```\n2014-07-07 10:48:02 Verifying last 309612 blocks at level 4\n2014-07-07 10:48:03 ERROR: ReadFromDisk : Deserialize or I/O error - CAutoFile::read : end of file\n2014-07-07 10:48:03 ERROR: Verif",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48164861,48164861,
sipa,2014-07-08T15:04:36Z,Changed the code to use block-first-seen rather than header-first-seen to distinguish between equal-work branches.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48349716,48349716,
sipa,2014-07-11T15:37:00Z,Rebased on top of #4496 and #4497 (which were already included here).\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48745898,48745898,
sipa,2014-07-11T22:23:29Z,"Moved RPC changes to a separate commit (now the actual headers-first commit is a net negative in lines, while adding comments!).\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48789766,48789766,
gmaxwell,2014-07-14T13:10:48Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48897493,48897493,
sipa,2014-07-14T14:21:14Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48905238,48905238,
laanwj,2014-07-15T06:52:53Z,"I retried my testing, now with a non-corrupting destination, and found no issues. I tickled it in various ways with -checklevel -checkblocks and it completed fine. \n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-48996544,48996544,
rebroad,2014-07-16T10:34:21Z,"Ok, I have a thought/question. With this pull, won't it effectively mean that the average height of the average node be less than without this pull? I.e. detrimental to the bitcoin network?\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49147984,49147984,
gmaxwell,2014-07-16T11:55:26Z,"@rebroad I can't figure out why you'd think that. Once synchronized the heights of all nodes will be the best available to them, and this change makes the system synchronize much faster.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49154968,49154968,
rebroad,2014-07-17T10:51:36Z,It's not the headers first aspect that makes them sync faster but rather the use of concurrent block downloads. The getting of headers first and the downloading of blocks that aren't necessarily in the best chain will delay nodes getting up to date.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49291716,49291716,
laanwj,2014-07-17T11:04:36Z,"I'm not convinced by your claim @rebroad. Let's look at the evidence here: with this code, new nodes get up to speed _much_ faster. With a decent internet connection this is scarcely longer than a -reindex would take. I don't see one single case of a user reporting that this makes a node get up to date slower. \n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49292774,49292774,
gmaxwell,2014-07-17T11:48:46Z,"@rebroad Part of the whole point is that it can use the headers to determine the best chain (with very high probability— only invalidated if the majority hashrate chain is invalidated) _very_ fast, then it only downloads blocks in the best chain.  New blocks at the tip are downloaded like they've always been.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49296718,49296718,
laanwj,2014-07-17T11:51:12Z,"Right, this mostly avoids downloading blocks not on the best chain _unlike_ before. No more orphans...\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49296900,49296900,
sipa,2014-07-17T14:29:19Z,"In the steady state, headers and blocks are fetched in a single request (unless there is a reorg), so there are no additional roundtrips for getting synchronized. There's an extra 100 bytes or so to get the header...\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49314082,49314082,
sipa,2014-07-24T01:09:36Z,Rebased and addressed some comments by @mikehearn and @laanwj.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-49956536,49956536,
sipa,2014-07-26T20:10:42Z,"Modified the fetch-block selection a bit: the download window does not start one past the current active tip anymore, but at the first block we don't have in common with a particular peer. The previous algorithm would fail to reorg further back than the download window. Also added extra comments and asserts.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-50247109,50247109,
sipa,2014-08-23T23:55:15Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-53171126,53171126,
rebroad,2014-09-04T05:07:37Z,"@sipa Regarding this pull breaking re-orgs - why doesn't it, instead of adding out of order blocks to the leveldb, deal with those blocks in the same way it used to do with orphans? (or a temporary database where they are deleted when added to the block index).\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54408046,54408046,
gmaxwell,2014-09-04T05:12:35Z,"This pull does not break re-orgs. (And as an aside, storing blocks in memory is not acceptable because it may cause very high peak memory usage)\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54408266,54408266,
rebroad,2014-09-04T07:46:02Z,"@gmaxwell Sorry, I meant reindexing. Yes, I agree not good to store in memory. I don't know enough about why it breaks reindexing, but I'm assuming a separate database would be the answer (for the out-of-order blocks, which would then be added to the main database in order),.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54424004,54424004,
gmaxwell,2014-09-04T07:52:14Z,"Reindexing should just handle out of order blocks exactly as headers first does, no need for a separate database. Reindexing works like a peer feeding us blocks, with headers first it should be made like the headers first process— e.g. scan the blocks on disk to learn their headers, add them to the block index, and then connect them as we can.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54424950,54424950,
sipa,2014-09-04T09:02:49Z,"@gmaxwell That's not exactly true. When receiving from network, we always have all the parent headers before processing a block, so it can just be entered into our block tree. When reindexing, that is not the case, and there is actually need for some handling of ""orphan headers"".\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54435516,54435516,
sipa,2014-09-04T09:49:05Z,Rebased and removed the DoS banning for duplicate blocks (but left as a TODO).\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54442972,54442972,
rebroad,2014-09-04T10:53:49Z,@sipa Shall I provide a patch to the duplicate block DoS stuff and submit it as a pull request to this branch?\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54452128,54452128,
rebroad,2014-09-05T06:09:05Z,"The stalled block detection math is wrong I think:-\n\n2014-09-05 05:52:50 inv (get) block 00000000000000000ecadcd9cfa2f30ae66783aa07b53355f97f1b90a4999694 from peer=95\n2014-09-05 05:52:50 received 1 headers from peer=95\n2014-09-05 05:52:50 Stall started peer=95\n2014-09-05 05:52:53 nNow=1409896373020224 nStallingSince=1409896370957264\n2014-09-05 05:52:53 Peer=95 is stalling block download, dis",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54588619,54588619,
rebroad,2014-09-06T06:49:48Z,Found a bug - it getdatas blocks even when the same block has already been received (but not processed). debug.log extract:-\n\n2014-09-06 05:56:20 inv (get) block 000000000000000002498192998dc2fbe440f3d37282e8e5b3c2ab19873a3ecb from peer=18\n2014-09-06 05:56:20 getheaders (319311) 000000000000000002498192998dc2fbe440f3d37282e8e5b3c2ab19873a3ecb to peer=18\n2014-09-06 05:56:21 inv (get) block 0000,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54704558,54704558,
rebroad,2014-09-06T06:57:48Z,"Another interesting feature is that when a new block inv is seen, it both getheaders the node and getdata's the block in the hope that the headers arrive first. However, if the block arrives before the headers, and the previous block hasn't been fetched yet, it will actually DoS the node the sent the block because it doesn't have the previous block... \n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54704697,54704697,
sipa,2014-09-06T15:53:37Z,"@rebroad You're right to point out that the request of headers + getdata of an inved block simultaneously makes an assumption about the order in which the peer will process them. However, it's a very reasonable assumption to make, as there are already systems that rely on this assumption (though not for block propagation). I would argue that it's already implicitly part of the protocol definition.",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54716169,54716169,
sipa,2014-09-06T15:58:26Z,"@rebroad I fixed the stalling detection (still testing it, now). The older version sometimes triggered when there was just a single block in flight, which is silly. Stalling peer P is now strictly defined as ""we can't download anything from peer Q (!= P), because all blocks in the download window are in flight, and we're waiting for a block from P for the window to move"".\n\nThe timeout value is c",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54716321,54716321,
sipa,2014-09-06T16:13:36Z,"@rebroad If a block is _ever_ simultaneously requested multiple times, that's a bug. Looking at the code, I don't see how that would be possible. Both block `getdata` code paths (direct request on inv when caught up, and from sendmessages as part of the normal parallel block fetching) check both whether it's not already marked BLOCK_HAVE_DATA or in mapBlocksInFlight, and the transition between the",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54716791,54716791,
sipa,2014-09-06T19:18:13Z,"Added a commit: removing pow's CheckMinWork, which verified whether an nBits/nTime was possible, without knowing the parents. As we always know all headers before validation, this is no longer necessary.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54725302,54725302,
sipa,2014-09-07T12:34:26Z,"@rebroad regarding reindexing: it's not that we're adding blocks to leveldb out of order (they're only applied to the chainstate when being validated, which happens in-order), but they're written to the blk*.dat files in the order they are downloaded (after validating the headers). The current reindexing logic (and that of earlier versions) assumes that the files on disk contain blocks in order, s",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-54745422,54745422,
BitcoinPullTester,2014-09-09T23:56:17Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p4468_c248436f60f18bc2ee886c912872a124212d04b9/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-55053858,55053858,
rebroad,2014-09-29T00:27:41Z,"@sipa Currently, download is stalling using this code because the stall logic is flawed. It is too impatient, and it's asked about 50 nodes so far for the same block and disconnected all of them because none of them could deliver it quickly enough.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57106150,57106150,
sipa,2014-09-29T03:11:19Z,"@rebroad Good to know - that definitely sounds like unintended behavior. I'll have a look at it later, I'm now working on other things.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57112524,57112524,
rebroad,2014-09-30T09:44:20Z,@sipa Let me know if you want a copy of my debug.log\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57289970,57289970,
laanwj,2014-10-01T13:16:34Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57460995,57460995,
sipa,2014-10-01T19:40:59Z,"Comparison tool works when run locally, but on Travis it disconnects after the genesis block. @theuni is there any way to look at the log files produced on travis?\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57523153,57523153,
sipa,2014-10-01T19:41:28Z,"Perhaps we can cat debug.log to the log output in Travis, on comparison tool failure?\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57523227,57523227,
theuni,2014-10-01T20:51:46Z,"See #5025. We have to be careful about dumping too much, because Travis has an output size ceiling.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57536322,57536322,
sipa,2014-10-01T23:00:25Z,NPE in pulltester... @TheBlueMatt ?\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57555439,57555439,
sipa,2014-10-02T01:42:48Z,"IT'S GREEEEEEEEEEEN!\n\nThanks a lot for the efforts, @TheBlueMatt!\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57569092,57569092,
sipa,2014-10-02T02:00:41Z,"Moved the comparison tool upgrade to #5027, so this will fail CI again until that is merged.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57570531,57570531,
sipa,2014-10-02T04:12:49Z,@rebroad Added a comment that should clarify that.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57581052,57581052,
rebroad,2014-10-03T08:43:36Z,@sipa I think the current method of downloading sequential blocks from the same node is fundamentally flawed when there are multiple nodes available because the stall/key node is likely to remain the same node for subsequent blocks. Wouldn't it be better to skip blocks so that if the node becomes slow it doesn't slow down the whole window (due to the node at the end of the window remaining the sam,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57769876,57769876,
laanwj,2014-10-03T10:29:01Z,"So great to finally see a green tick! Thanks @TheBlueMatt and @sipa! I say we should move to merge this as soon as possible, as it's clearly an improvement over the current state.\n\n> it breaks reindexing, which cannot deal with out-of-order blocks on disk yet\n\nI suppose this is still a blocker?\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57778479,57778479,
sipa,2014-10-03T15:21:01Z,"Interleaving blocks is an interesting way to improve things. I'm not\nagainst that, but at this stage I really just want some form of HF to be merged\nas it's so fundamentally better in many ways (independent of the actual\ndownload logic improvements). There are various things that could be done,\nincluding reducing the window size of slower peers based on how frequently\na node comes close to st",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57810702,57810702,
gmaxwell,2014-10-03T16:06:31Z,"Interleaving is pretty pessimal for IO performance of the senders. I don't think any scheme of interleaving could have more effect than a increase in window size (proportional to the number of peers). Might be interesting to experiment with, but I don't expect it to be a win all considered.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57816791,57816791,
sipa,2014-10-03T16:58:39Z,"@laanwj Yeah, I'll work on fixing reindexing soon. I wasn't expecting comparison tool to grow compatible so quickly :)\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57823421,57823421,
rebroad,2014-10-04T06:00:27Z,"@sipa Actually, in some scenarios it would more sense to disconnect all nodes EXCEPT the node currently providing the oldest block (so that the incoming bandwidth isn't being saturated).\n\nAlso, the code as is seems to have no limit on how many nodes are sync nodes. I'd suggest setting a limit, and then in the situation where the stall node is disconnected (which was providing the oldest block) i",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57895855,57895855,
TheBlueMatt,2014-10-05T07:40:10Z,"Was mid-review when you rebased, I'm assuming nothing changed in the first commit...in any case, there are some comments on bcf870bf54578d166b5856d8e7978a2072f8a377\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57929026,57929026,
TheBlueMatt,2014-10-05T07:43:20Z,"So I stared at this for a while and couldnt come up with anything clearly broken outside of the few small comments above...still, I'm not as farmiliar with that code as I used to be, so I dont feel comfortable ACKing directly.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-57929072,57929072,
TheBlueMatt,2014-10-06T19:21:32Z,"So I'm reasonably happy with everything that isnt -reindex on this one, at least for merge, maybe not release.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58077695,58077695,
sipa,2014-10-07T19:37:06Z,"Included a squashed version of #5057, together with a commit that fixes the skipping of out-of-order blocks on continued reindex.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58246828,58246828,
TheBlueMatt,2014-10-07T22:10:44Z,It seems with the new changes it is no longer possible to concatenate every blk****.dat file into one big bootstrap.dat (with orphans) and import that. I think that is needless feature loss.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58271505,58271505,
sipa,2014-10-07T22:26:34Z,"We could have a feature to export the blocks in the block files to a\nbootstrap.dat... but that is exactly already what the linearize python\nscript does.\n\nAlso, catting the block files together _will_ work for the import\nfunctionality in this PR, so it is still internally consistent. Just\nperhaps not with external application that cannot deal with out-of-order\nblocks (but that's what lineari",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58273288,58273288,
TheBlueMatt,2014-10-07T23:51:15Z,"The way I read it it can only handle non-linear blocks if dbp is non-NULL, which it only is for -reindex.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58282048,58282048,
sipa,2014-10-08T01:17:39Z,@TheBlueMatt Looks like you're right. That's unfortunate but not a blocker imho.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58290857,58290857,
TheBlueMatt,2014-10-08T01:49:52Z,"Well, should be an easy fix so I brought it up.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58293842,58293842,
TheBlueMatt,2014-10-08T01:50:22Z,"AFAICT dbp is essentially useless there, so adding another one pointing to 0 should be doable?\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58293881,58293881,
laanwj,2014-10-08T06:12:16Z,"> It seems with the new changes it is no longer possible to concatenate every blk****.dat file into one big bootstrap.dat (with orphans) and import that.\n\nI did that intentially. Handling out-of-order blocks in the general case would result in more complicated code than just handling it for reindex. `CDiskBlockPos` only work inside block files, not to outside files.\n(the worst case scenario is ",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58314896,58314896,
TheBlueMatt,2014-10-08T06:31:01Z,"OK, if its more work you're right its not worth it, I just figured it'd be 0 extra work, so I'm happy if this were merged pending remaining questions.\nNote that that is not an ACK, I'd like to see this merged and move forward pending enough ACKs from others, but I dont feel comfortable enough with the block import code to ACK this directly. \n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58316100,58316100,
sipa,2014-10-08T22:14:00Z,"@rebroad to get back on the initial getheaders request and the locator passed to it.\n\nCBlockLocators contain a list of hashes the peer may know about, including just the last 11 leading up to the block referred to, and then several that go further and further back. This means that it's always safe to send a locator that is too far ahead - it's just less efficient.\n\nThe reason for starting with",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58436634,58436634,
rebroad,2014-10-11T06:35:38Z,"@sipa If we send the locator for the block at the advertised block height of the node, then we would get no headers back. If we send the pprev of that block, then we would get 1 header back, the latest header that node has. If for some reason the node has obtained new blocks since we connected to it, we might receive 2 headers back. Either way, I'm not sure I understand your logic that would resul",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58740096,58740096,
gmaxwell,2014-10-11T06:42:49Z,"@rebroad as sipa was saying, your knoweldge of the peer is often out of sync (consider that its by getting blocks/headers from it at all that we learn anything about it).  If we only ask for a block it doesn't have we're just going to end up pulling like we have nothing in common at all, which is very inefficient.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-58740248,58740248,
sipa,2014-10-14T23:37:58Z,"I added a commit that AFAICT should allow >2000 deep reorgs. I tried to enable the reorg test in Travis, but that fails due to >4Mbyte of produced log.\n",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-59135639,59135639,
laanwj,2014-10-17T08:48:57Z,Tested ACK\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-59484837,59484837,
gmaxwell,2014-10-17T08:56:25Z,"Tested ACK.\n\nI've reviewed this at many points in time and tried many cases (and hit a number of issues which have been fixed).   I expect that it still has some remaining bugs, but our behavior without it is almost uselessly bad in the common case... getting some wider usage (in master) will help shake out issues. We know we're going to have a long cycle of testing in master on this version, so",https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-59485598,59485598,
ghost,2014-10-17T09:41:44Z,Seems to function fine on ARMv6.\n,https://github.com/bitcoin/bitcoin/pull/4468#issuecomment-59490374,59490374,
rebroad,2014-07-07T05:30:12Z,Why wait until a complete block is received before marking it as not stalling? Wouldn't it be better to consider it as not stalling as long as a block is being downloaded (even if it takes a while on a slow connection)?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14581874,14581874,src/main.cpp
rebroad,2014-07-07T05:32:39Z,Are you trying to break #4431 ?!\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14581901,14581901,src/main.cpp
rebroad,2014-07-07T05:44:57Z,"If duplicate blocks aren't requested, then surely if we receive them this should be considered misbehaviour.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14582040,14582040,src/main.cpp
fanquake,2014-07-07T06:00:02Z,Sipa [already mentioned](https://github.com/bitcoin/bitcoin/pull/4431#issuecomment-48091674) that headers first would render #4431 almost obselete \n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14582219,14582219,src/main.cpp
rebroad,2014-07-07T11:47:36Z,"yes he did, but it's somewhat annoying when so newly introduced variables are removed by the same author in subsequent pulls. \n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14591774,14591774,src/main.cpp
sipa,2014-07-07T12:22:45Z,"We already download every block that peers advertize. In PR changes it to\nfirst ask for headers, and only asks for the block immediately if we're\nclose to being synced. Validating the header first would require an extra\nroundtrip, which can hurt network propagation time.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14592784,14592784,src/main.cpp
sipa,2014-07-07T12:24:54Z,"We do, for initial sync (see SendMessages). This code is for dealing with\nnewly announced blocks so they can propagate.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14592852,14592852,src/main.cpp
sipa,2014-07-07T12:26:00Z,We use getheaders instead of getblocks. See SendMessages.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14592881,14592881,src/main.cpp
gmaxwell,2014-07-07T12:27:46Z,"It does, under ""// Start block sync"" in SendMessages(). The code you're commenting on is for newly announced blocks. Not that it's relevant to an inv.hash, so it's not something we can do before even hearing something from the peer.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14592939,14592939,src/main.cpp
laanwj,2014-07-07T12:28:37Z,"The node / block chain handling code is very much in flux at the moment, you'll have to live with that. I can understand annoyance if it is just some white-space reordering that broke your pull for the zillionth time, but these are difficult and important changes and it's not possible to know everything in advance.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14592968,14592968,src/main.cpp
sipa,2014-07-07T12:31:16Z,"I understand, but some temporary code was necessary to get the block\ntracking code into the existing (non headers first) mechanism. I think I\nmentioned that in the PR or commit that introduced it.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14593038,14593038,src/main.cpp
sipa,2014-07-07T12:54:31Z,"""Stalling"" is already a rather strong condition: it means all blocks in\nflight are from a single peer, and we can't ask any peer for other blocks\nbecause they are outside the download window. It does not just mean that\nwe're not receiving anything from this peer, it means we can't download\nanything from anyone because of this peer. The 2 second delay before\nactually connecting is to give us s",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14593818,14593818,src/main.cpp
sipa,2014-07-07T12:57:21Z,"Good catch. I can't check the code now, but if there is no other logic for\npunishing duplicates, that will need fixing.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14593935,14593935,src/main.cpp
sipa,2014-07-08T15:03:38Z,"Fixed. Made it a level 20 dossable offense (in AcceptBlock, which already has cs_main).\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r14657727,14657727,src/main.cpp
laanwj,2014-07-23T07:27:11Z,"What does 'may be failed' mean in this context? The block has valid transactions, but failed the higher checks?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15274365,15274365,src/main.cpp
sipa,2014-07-23T08:48:50Z,"Indeed. Feel free to suggest better wording.\n\nThe reason is that we don't have a map from blocks to their successors, only backwards. That means that if there's a fork A-B-C and A-B-D-E, and we try to connect E (which fails at B), A-B-D-E are marked failed (and E is removed from setBlockIndexValid), but C isn't marked failed or removed from setBlockIndexValid. This is detected as soon as we do t",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15277103,15277103,src/main.cpp
laanwj,2014-07-23T09:51:11Z,"Thanks for explaining, that makes it clear to me. \n\nI think the wording is fine, but it would be useful to add that explanation in the comment as well.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15279462,15279462,src/main.cpp
laanwj,2014-07-23T13:24:13Z,Precondition: vBlocks.empty() ?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15286704,15286704,src/main.cpp
laanwj,2014-07-23T13:43:44Z,Good idea.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15287857,15287857,src/main.cpp
laanwj,2014-07-23T13:56:46Z,Any specific reason for moving this before checking 'size limits'?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15288611,15288611,src/main.cpp
laanwj,2014-07-23T14:04:21Z,What is the reason for comparing `pindex->pprev->nChainTx` to 0 here? Is this a special value that means 'unlinked block'?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15289072,15289072,src/main.cpp
sipa,2014-07-23T14:14:59Z,Indeed. There's a comment on BLOCK_VALID_TRANSACTIONS explaining that. I'll add it to nChainTx itself.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15289611,15289611,src/main.cpp
sipa,2014-07-23T14:15:27Z,"Yes, see the comment added before the 'size limits' section.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15289634,15289634,src/main.cpp
sipa,2014-07-23T14:16:48Z,Is it fine if I change the description to 'append its not-in-flight missing successors to vBlocks'?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15289715,15289715,src/main.cpp
laanwj,2014-07-23T14:19:43Z,"Well, you're making the amount of blocks added depend on the current vBlocks.size(), so it appeared to me that you assume you're starting with an empty vector.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15289895,15289895,src/main.cpp
sipa,2014-07-23T14:24:39Z,"Update pindexLastCommonBlock and its not-in-flight missing successors to vBlocks, until that vector has at most count entries.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15290176,15290176,src/main.cpp
laanwj,2014-07-23T14:28:10Z,OK\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15290429,15290429,src/main.cpp
laanwj,2014-07-23T15:15:34Z,"Ah, makes sense.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15293623,15293623,src/main.cpp
laanwj,2014-07-23T15:17:50Z,"Right. For a moment I thought this was the case for blocks that are the successor of the genesis block, but nChainTx is inclusive so even the genesis block has nChainTx=1 because of the coinbase transaction.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15293777,15293777,src/main.cpp
laanwj,2014-07-23T16:24:16Z,Protocol version 31800 was version 0.3.18. It's absolutely reasonable to bump the minimum peer version to that.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15298255,15298255,src/version.h
gmaxwell,2014-07-24T06:04:37Z,"NACK rebroad's NACK.  0.3.18 over 3.5 years old, and ACK the change. Any systems actually running that software are no longer in-sync with the blockchain unless configuration modified and have numerous security vulnerabilities. Non-bitcoin core claiming that version number or before is still enforcing an old version of the protocol without modern facilities like ping.  There is no substantial depl",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15331147,15331147,src/version.h
laanwj,2014-07-24T06:13:36Z,"It's better if such old versions just fail to connect to the network, than that they pretend to catch up and fail due to some other reason.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r15331324,15331324,src/version.h
sipa,2014-09-02T16:25:57Z,Read a few lines before...\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r16998214,16998214,src/main.cpp
rebroad,2014-09-02T16:31:45Z,What about 6?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r16998495,16998495,src/main.h
sipa,2014-09-02T16:33:13Z,"There is no 6, nor is there a 7.\n\nMASK is just the boolean OR of the bits used for validity.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r16998557,16998557,src/main.h
jgarzik,2014-09-02T16:45:36Z,"Minor nit, since it got highlighted:  usual preference is for such a mask to be composed of prior constants, rather than a hardcoded number itself.  The exception to this rule is usually if you just want the field to store all 1's (0xffffffff).\n\nSometimes it's nice to have the constants define the actual bits (""1U << $n""), but it depends on the downstream code whether or not that makes downstrea",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r16999204,16999204,src/main.h
sipa,2014-09-02T16:58:15Z,@jgarzik See #4820.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r16999968,16999968,src/main.h
rebroad,2014-09-03T01:09:55Z,"This is an assumption. This will only work if the other node is the default bitcoind with the same MAX_HEADERS_RESULTS. It's entirely possible that other nodes will have a different maximum setting, in which case, the logic here fails.\n\nMaybe instead it's better to keep requesting until the results come back smaller than the previous results (this way no assumptions need to be made other than th",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17026905,17026905,src/main.cpp
rebroad,2014-09-03T01:17:26Z,"Do you want to be requesting headers from peers whose advertised block height is lower than our node's? They won't regognize the locator so they'll end up sending everything they have, which would surely be a waste of bandwidth and rarely helpful to our node.\n\nAlso, might it be better to change the default response to getheaders requests so that this doesn't happen?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17027096,17027096,src/main.cpp
gmaxwell,2014-09-03T01:20:44Z,"What happens when I send you a 400,000 header difficulty 1 fork (as an example) before you query someone else? A lower height does not necessarily mean a less preferable chain.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17027183,17027183,src/main.cpp
gmaxwell,2014-09-03T01:36:35Z,"Because thats how GETHEADERS is defined in the protocol, as the comment notes— changing it is an incompatible version change. See: https://en.bitcoin.it/wiki/Network#Messages. There needs to be some limit, or excessive memory consumption or message blocking happens.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17027597,17027597,src/main.h
rebroad,2014-09-03T01:38:30Z,@gmaxwell a 400000 header difficulty 1 fork would have a higher block height than our node. I'm suggesting we don't request headers from nodes with a lower block height than our node. The logic I'm proposing is in line with the previous logic the code had - i.e. we didn't getblocks from peers that had a lower height.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17027628,17027628,src/main.cpp
gmaxwell,2014-09-03T01:40:01Z,I understood what you were suggesting. If we're on the fork with more blocks we would never reorganize off it with your suggestion.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17027664,17027664,src/main.cpp
jgarzik,2014-09-03T02:26:39Z,The protocol is defined in the source code.  Satoshi added getheaders a long time ago.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17028675,17028675,src/main.h
gmaxwell,2014-09-03T02:28:39Z,"The whitepaper just explains the high level concept of the Bitcoin consensus protocol. It describes none of the implementation details, and especially doesn't describe the P2P protocol.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17028716,17028716,src/main.h
rebroad,2014-09-04T04:24:49Z,"Ok, I'm noticing this isn't ideal since using matt's bitcoinj node which sends the block before the node my node requests the block from sends it. Therefore, I'd suggest refining this to only consider it dos if it's not an ""addnode"" node AND we didn't request the block from this node.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17095155,17095155,src/main.cpp
gmaxwell,2014-09-04T04:25:30Z,"oh no, you can't currently punish blocks you didn't request, because when a node _finds_ a block itself, it relays it without INVing. (IIRC)\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17095164,17095164,src/main.cpp
sipa,2014-09-04T08:39:21Z,That only happens for just-mined blocks - peers shouldn't ever have those already?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17101393,17101393,src/main.cpp
sipa,2014-09-04T08:40:57Z,"Making MAX_HEADERS_RESULTS dynamic is possible, but it would be a protocol change. Right now, it is correct w.r.t. other nodes out there.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17101446,17101446,src/main.cpp
sipa,2014-09-04T08:43:14Z,"@rebroad Locators contain block hashes of exponentially increasing age; it's very unlikely they'll send everything they have. There are certainly possible heuristics to improve this, but making sure it works correctly has priority now.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17101528,17101528,src/main.cpp
sipa,2014-09-04T08:44:57Z,I would suggest using the whitelisting mechanism for that.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17101581,17101581,src/main.cpp
rebroad,2014-09-04T08:46:27Z,"hold on... it won't be possible to receive a duplicate block from a miner, so yes, this would be DoS.\n\n@gmaxwell can you see what I'm saying here?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17101642,17101642,src/main.cpp
gmaxwell,2014-09-04T08:51:59Z,"I'm responding to the comments, not the code— if it's only on duplicates and not just non-requested then I think its safe but only if we release note loudly.  Right now I think eloipool users will end up GBT submitting blocks to multiple Bitcoinds which will then aggressively relay.  It's bandwidth wasteful and it shouldn't be permitted. This is a borderline p2p protocol change, I think.\n\nThough",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17101860,17101860,src/main.cpp
rebroad,2014-09-04T09:00:22Z,"@sipa However, you do still need to make sure not to DoS a node for sending a block that you've requested. So far, this logic isn't in there. This happened to me today when I got the inv from the non-miner, but the miner sent the block directly and it arrived from them first. My node requested the block from the node that sent the inv, and then DoSed it when it received it - it was only doing what",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17102257,17102257,src/main.cpp
sipa,2014-09-04T09:16:09Z,"@rebroad That's a good point. I'm not sure how to deal with that correctly.\n- Making an exception for allowing a duplicate block to be received if we actually requested it is possible, but requires extra logic.\n- Not DoS/disconnecting in case of any duplicate is easy, but doesn't really encourage low bandwidth operation.\n\nPreviously my position was that sending-without-inv was safe in case you",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17102944,17102944,src/main.cpp
gmaxwell,2014-09-04T09:26:23Z,"Perhaps define that as of protocol X we'll never do that ourselves anymore, and enforce it. Later minimum support advances past protocol X.  Seems like such a minor change to bother staging…\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17103423,17103423,src/main.cpp
rebroad,2014-09-04T10:45:34Z,"@sipa more simply, miners can still send the block without it being requested, as long as they send the ""inv"" just before it (so that nodes don't think they're not receiving the block until it arrives). This way they'll very unlikely get banned since their invs will almost always be received before anyone else's.\n\nThe code can be changed easily to do what it did before, which is to record which ",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17106379,17106379,src/main.cpp
rebroad,2014-09-06T01:54:41Z,"Also, why send the pprev rather than the latest as the locator?\n\nI still don't understand why we would want to get only 1 header from up-to-date nodes, but tens of thousands of headers from not-up-to-date nodes...\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17206129,17206129,src/main.cpp
sipa,2014-09-06T15:48:30Z,"Headers do not contain the number of transactions, and just changing the protocol to also report it along with headers is pretty pointless, as the data is not verifiable.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17209324,17209324,src/main.cpp
Arnavion,2014-09-07T03:59:21Z,"```\nmain.cpp: In function 'void {anonymous}::FindNextBlocksToDownload(NodeId, unsigned int, std::vector<CBlockIndex*>&, NodeId&)':\nmain.cpp:407:67: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n                 if ((int)pindex->nHeight > chainActive.Height() + BLOCK_DOWNLOAD_WINDOW) {\n                                                                   ^\n`",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17212803,17212803,src/main.cpp
rebroad,2014-09-07T08:40:12Z,https://en.bitcoin.it/wiki/Header#Block_Headers says that there is a field for the number of transactions - why isn't this used?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17213621,17213621,src/main.cpp
sipa,2014-09-07T10:58:00Z,"It lists the number of transactions contained within the same message. For\n'headers', this number is always 0. This is because historically,\nCBlockHeader did not exist, and just a CBlock without transactions was sent.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214124,17214124,src/main.cpp
rebroad,2014-09-07T11:18:57Z,we don't need to prevent memory fill due to spam any longer?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214196,17214196,src/main.cpp
rebroad,2014-09-07T11:20:42Z,"Ah, I think I was thinking headers were more like the things mentioned in https://bitcointalk.org/index.php?topic=145066.0\n\nWhat happened to the headers described in that article? It sounded like an excellent idea.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214203,17214203,src/main.cpp
rebroad,2014-09-07T11:29:14Z,"`LogPrint(""net"", ""received %s peer=%d\n"", inv.ToString(), pfrom->id);` would be shorter :)\n\nAlso, I notice you sometimes use `pfrom->id` and sometimes `pfrom->GetId()` - what's the advantage in the latter one?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214227,17214227,src/main.cpp
sipa,2014-09-07T11:33:11Z,"If false is returned, some error condition should be set in state.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214243,17214243,src/main.cpp
sipa,2014-09-07T11:34:08Z,That article describes a novel network protocol. It's not what is implemented.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214246,17214246,src/main.cpp
sipa,2014-09-07T11:35:45Z,"We certainly do, but every case this protects against is now caught in the proof of work check below. Previously, this check was useful, because we wanted to verify whether a block was viable without knowing its parent. In headers-first, we always know all headers before processing a block, so it doesn't add anything anymore.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214249,17214249,src/main.cpp
sipa,2014-09-07T11:36:29Z,It was moved up a few lines. There's even a comment about why it was moved.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214250,17214250,src/main.cpp
rebroad,2014-09-07T11:38:41Z,"@sipa I'm unfamiliar the locators to be honest, but surely it would make more sense to send the getheaders request using a locator that won't be unrecognised, e.g. send the locator corresponding to the block height the we know the node has. It's then far more likely to send us just it's last block header rather than going back to thousands of blocks that we already know of.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214255,17214255,src/main.cpp
sipa,2014-09-07T11:43:25Z,"Just good practice in general; you shouldn't be looking at fields of complex data structures. Using a wrapper method means more flexibility about changing the implementation later.\n\nThen again, it's pretty meaningless if not done consistently.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214267,17214267,src/main.cpp
sipa,2014-09-07T11:48:49Z,"That would mean downloading all headers from all peers. Initially, we don't know anything about our peers, and it is exactly _through_ getheaders (and a bit through invs, but that's harder to rely on) that we learn about what the peer knows. Usually, when sending an initial getheaders request to a peer, they already have the majority of headers we want, and using our own best will in the average c",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214288,17214288,src/main.cpp
sipa,2014-09-07T11:51:02Z,"Sending pprev: so that we get some header back as a result in case they are at the same point as us, as we use received headers to update our information about what the peer knows.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214296,17214296,src/main.cpp
sipa,2014-09-07T11:59:03Z,"`getheaders`, in a way compatible with how this PR uses it, was added in december 2010 (Bitcoin 0.3.18) by satoshi.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17214330,17214330,src/main.h
rebroad,2014-09-07T15:22:04Z,What about when a block is sent without a header or inv first?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17215267,17215267,src/main.cpp
sipa,2014-09-07T15:24:45Z,"If it connects cleanly to the chain we already have, there is no problem. If not, it is discarded. That's the basic idea behind headers-first: we can't accept a block without knowing (the headers of) its ancestors.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17215279,17215279,src/main.cpp
rebroad,2014-09-10T03:41:07Z,"@sipa I'm not sure you're understanding what I'm trying to say. Clearly if a node is at height 295403, it's not going to recognise the locator for block 321032, so why bother sending it a locator we know it won't recognise? Why not sent it the locator for block 295403 instead?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17341483,17341483,src/main.cpp
rebroad,2014-09-10T03:44:06Z,Any plans to implement that? What would be the next step? Someone to submit a pull request implementing it?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17341521,17341521,src/main.cpp
rebroad,2014-09-11T03:46:44Z,"What if the peer that the ""getheaders"" has been sent to ignores the request? The logic doesn't seem to cater for that and assumes that one ""getheaders"" request to the first node sending the inv will be sufficient. By the peer ignoring the getheaders request, this could cause the requesting node to have to wait until the next mined block before it can request the missing block, and if the same node",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17402997,17402997,src/main.cpp
rebroad,2014-09-11T03:51:36Z,"I'd like to submit a patch for this, but I'm not sure how to find the locator for a block just from it's height - could someone help me find an example where this is done please?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17403096,17403096,src/main.cpp
rebroad,2014-09-11T03:53:21Z,changing the (int) to (unsigned int) fixes this compile warning.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17403125,17403125,src/main.cpp
sipa,2014-09-11T06:11:31Z,We call AcceptBlockHeader even for blocks received before having received\ntheir header. And the proof of work check further on is stronger than this\none.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17405573,17405573,src/main.cpp
sipa,2014-09-11T06:13:55Z,"Please understand what locators are before commenting further on this. They\nare exactly designed to keep working if either party is ahead from the\nother. And yes, it will be a bit less efficient if there is a difference,\nbut we don't _know_ how far the other peer is. We only know they are at\nleast at 295...; we send the getheaders exactly to find out how much\nfurther they are.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17405618,17405618,src/main.cpp
sipa,2014-09-11T06:19:21Z,"Yes that is a concern. It's not more a concern than a peer currently\nignoring getblocks however when it is our syncnode. Eventually we'll learn\nfrom other peers what the best headers are, when they announce a new block.\nThis is just to speed things up. It's always a compromise between bandwidth\nand reliability. Sending the request to two peers will make it safer, but\nalso means downloading al",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17405739,17405739,src/main.cpp
rebroad,2014-09-17T13:57:41Z,"Something seems to be wrong with the stalling logic, judging from my debug.log output:-\n\n2014-09-17 13:38:05 received block 0000000000000838ff0a36baecd1d4c07807ebc54a59e7e05dd4681839ba2827 (height:191655) peer=103\n2014-09-17 13:38:06 Requesting block 00000000000004f2b85c51e890bd7a445d7cbb16469c38447ab557c07eaafdc2 (192679) peer=103\n2014-09-17 13:38:07 Stall started peer=103\n2014-09-17 13:38:0",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r17664726,17664726,src/main.cpp
rebroad,2014-10-02T03:50:17Z,"Just a niggle, but the naming is a little confusing here - it looks (from the naming) like you're marking it as in flight, although technically the getdata block hasn't even occurred yet at this point. This could cause confusion later on down the line in the same way as the recent AlreadyAskedFor naming confusion did recently.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18321367,18321367,src/main.cpp
Diapolo,2014-10-02T10:20:23Z,Nit: Typo (iff)\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18331623,18331623,src/chain.h
Diapolo,2014-10-02T10:20:42Z,Nit: Unneded\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18331631,18331631,src/main.cpp
Diapolo,2014-10-02T10:25:07Z,"Just asking, is it common or good to have these translated?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18331754,18331754,src/main.cpp
Diapolo,2014-10-02T10:26:56Z,Could be `if (pindex && pfrom)`?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18331806,18331806,src/main.cpp
theuni,2014-10-02T17:23:11Z,iff == if and only if\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18353322,18353322,src/chain.h
sipa,2014-10-02T18:19:27Z,"Indeed, this crashes if we only have the genesis block otherwise.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18357123,18357123,src/main.cpp
sipa,2014-10-02T18:19:52Z,Indeed; replaced by 'if and only if'.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18357152,18357152,src/chain.h
sipa,2014-10-02T18:20:43Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18357228,18357228,src/main.cpp
sipa,2014-10-02T18:21:30Z,I'm just following existing practice in the code here. I have no opinion.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18357286,18357286,src/main.cpp
sipa,2014-10-02T18:23:33Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18357440,18357440,src/main.cpp
jtimon,2014-10-02T18:35:02Z,"isn't ""if and only if"" more clear?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18358235,18358235,src/chain.h
jtimon,2014-10-02T18:36:02Z,I don't see any reason why we shouldn't internationalize them.\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18358306,18358306,src/main.cpp
gmaxwell,2014-10-02T19:17:23Z,"Internationalization for rare errors makes them unsearchable (on the internet or in the code base).  Internal/rare errors are really not human readable to begin with.   If we're going to do that, we should do it consistently but also assign code numbers for errors.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18360789,18360789,src/main.cpp
laanwj,2014-10-02T19:24:58Z,"Please only use _() in core for messages passed to the GUI! Otherwise translators spend time translating them for no reason at all. Remember that if you run bitcoind, _() is a no-op.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18361262,18361262,src/main.cpp
rebroad,2014-10-04T06:16:06Z,What happened to the idea of sending a locator that we know the node will have (to avoid it sending thousands of headers we already have)?\n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18427863,18427863,src/main.cpp
rebroad,2014-10-11T06:37:57Z,"This almost always (in my testing) results in slowing down the download of the block chain as almost always the stalling node is currently sending the block we are waiting for, and disconnecting it simply means we'll have to discard the part of the block already downloaded and request it from another node which is no more likely to be any faster.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18739776,18739776,src/main.cpp
sipa,2014-10-11T06:45:51Z,"Yes, that's completely expected. The point is that other peers managed to progress past the whole window, while we're still waiting on this one peer. There is nothing to be gained from keeping it connected, as we're effectively faster by not downloading from them at all.\n\nYou could argue that we should wait for a short while to give them a chance to finish the block we're currently fetching, but",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18739800,18739800,src/main.cpp
gmaxwell,2014-10-11T06:45:57Z,"Almost?  should be always unless the peer is broken. :)   of course, unless its sitting around doing nothing there will be data in flight.   A result is that you should loadbalance onto faster peers, so while there is some discovery overhead here it should be finite.\n\nFurther optiimzation could make it somewhat more efficient, e.g. preemptively discontinuing requests and then disconnecting peers",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18739801,18739801,src/main.cpp
sipa,2014-10-11T07:20:16Z,"Before we know what the peer has, doing that would be asking them for _all_ headers which is much worse.\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18739949,18739949,src/main.cpp
rebroad,2014-10-16T14:40:26Z,@sipa The change I am proposing results in nodes sending just one header. \n,https://github.com/bitcoin/bitcoin/pull/4468#discussion_r18959019,18959019,src/main.cpp
rebroad,2016-11-06T09:10:26Z,"continue form ""there""? there being chainActive.Tip() or pindexBestHeader?\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r86681932,86681932,src/main.cpp
rebroad,2016-11-06T09:29:24Z,"ah, I get it... ok, coding this...\n",https://github.com/bitcoin/bitcoin/pull/4468#discussion_r86682220,86682220,src/main.cpp
