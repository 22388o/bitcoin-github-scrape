[
  {
    "sha": "c44e4c467c30fe7790372bdea8941ba29fd3327e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDRlNGM0NjdjMzBmZTc3OTAzNzJiZGVhODk0MWJhMjlmZDMzMjdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-11T06:29:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-22T02:18:23Z"
      },
      "message": "Make AcceptToMemoryPool take CTransactionRef",
      "tree": {
        "sha": "e7dba6fe81eedb3edc3bb205897835e1c81f1060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7dba6fe81eedb3edc3bb205897835e1c81f1060"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c44e4c467c30fe7790372bdea8941ba29fd3327e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c44e4c467c30fe7790372bdea8941ba29fd3327e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c44e4c467c30fe7790372bdea8941ba29fd3327e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c44e4c467c30fe7790372bdea8941ba29fd3327e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8cfe1ee2d01c493b758a67ad14707dca15792ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8cfe1ee2d01c493b758a67ad14707dca15792ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8cfe1ee2d01c493b758a67ad14707dca15792ea"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 31,
      "deletions": 26
    },
    "files": [
      {
        "sha": "98ab2a35557d2d4137ff4eb34c1de7c7ae9363fe",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -18,7 +18,7 @@ static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n     unsigned int sigOpCost = 4;\n     LockPoints lp;\n     pool.addUnchecked(tx.GetHash(), CTxMemPoolEntry(\n-                                        tx, nFee, nTime, dPriority, nHeight, pool.HasNoInputsOf(tx),\n+                                        MakeTransactionRef(tx), nFee, nTime, dPriority, nHeight, pool.HasNoInputsOf(tx),\n                                         tx.GetValueOut(), spendsCoinbase, sigOpCost, lp));\n }\n "
      },
      {
        "sha": "4c693eea04beaa108cf97908ab80467041f58dcf",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -1596,7 +1596,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         deque<COutPoint> vWorkQueue;\n         vector<uint256> vEraseQueue;\n-        CTransaction tx(deserialize, vRecv);\n+        CTransactionRef ptx;\n+        vRecv >> ptx;\n+        const CTransaction& tx = *ptx;\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n@@ -1609,7 +1611,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv.hash);\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs)) {\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -1646,7 +1648,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, MakeTransactionRef(orphanTx), true, &fMissingInputs2)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {"
      },
      {
        "sha": "28f43fbec0b691cbca3fb4da34fdab1702312a33",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -883,8 +883,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     CMutableTransaction mtx;\n     if (!DecodeHexTx(mtx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-    CTransaction tx(std::move(mtx));\n-    uint256 hashTx = tx.GetHash();\n+    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+    const uint256& hashTx = tx->GetHash();\n \n     bool fLimitFree = false;\n     CAmount nMaxRawTxFee = maxTxFee;\n@@ -899,7 +899,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, fLimitFree, &fMissingInputs, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "31551325b44b2b6c189369d92ffcba5f414c9cd0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -151,7 +151,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPo\n     // Hack to assume either its completely dependent on other mempool txs or not at all\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n-    return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n+    return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, dPriority, nHeight,\n                            hasNoDependencies, inChainValue, spendsCoinbase, sigOpCost, lp);\n }\n "
      },
      {
        "sha": "ac78fb1fd8ff9688925ebdb7e633619221c01675",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, 0);\n+    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, NULL, true, 0);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "90a80661149acbacaf79f7c9b66078bbfe16f28e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -20,22 +20,22 @@\n \n using namespace std;\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp):\n-    tx(MakeTransactionRef(_tx)), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n+    tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxWeight = GetTransactionWeight(_tx);\n-    nModSize = _tx.CalculateModifiedSize(GetTxSize());\n+    nTxWeight = GetTransactionWeight(*tx);\n+    nModSize = tx->CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n \n     nCountWithDescendants = 1;\n     nSizeWithDescendants = GetTxSize();\n     nModFeesWithDescendants = nFee;\n-    CAmount nValueIn = _tx.GetValueOut()+nFee;\n+    CAmount nValueIn = tx->GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n \n     feeDelta = 0;"
      },
      {
        "sha": "1c0fbf6052bbbca3d2d9c7ff6a759209a5bbfff7",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -111,10 +111,11 @@ class CTxMemPoolEntry\n     int64_t nSigOpCostWithAncestors;\n \n public:\n-    CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n+    CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                     bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n                     int64_t nSigOpsCost, LockPoints lp);\n+\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return *this->tx; }"
      },
      {
        "sha": "bc14c1d8c63ad0e9c95e5055f26457369eb716d3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -525,10 +525,11 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, bool fLimitFree,\n+bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n+    const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -691,7 +692,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, nAcceptTime, dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n+        CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -955,7 +956,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     return true;\n }\n \n-bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n@@ -970,7 +971,7 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), fOverrideMempoolLimit, nAbsurdFee);\n@@ -2116,7 +2117,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n             const CTransaction& tx = *it;\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n-            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n+            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, true)) {\n                 mempool.removeRecursive(tx);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n@@ -4054,15 +4055,16 @@ bool LoadMempool(void)\n         file >> num;\n         double prioritydummy = 0;\n         while (num--) {\n+            CTransactionRef tx;\n             int64_t nTime;\n             int64_t nFeeDelta;\n-            CTransaction tx(deserialize, file);\n+            file >> tx;\n             file >> nTime;\n             file >> nFeeDelta;\n \n             CAmount amountdelta = nFeeDelta;\n             if (amountdelta) {\n-                mempool.PrioritiseTransaction(tx.GetHash(), tx.GetHash().ToString(), prioritydummy, amountdelta);\n+                mempool.PrioritiseTransaction(tx->GetHash(), tx->GetHash().ToString(), prioritydummy, amountdelta);\n             }\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {"
      },
      {
        "sha": "ce3774f10ff1b5d635127f12e8d886d21ebc93ab",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -309,11 +309,11 @@ void FlushStateToDisk();\n void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** Convert CValidationState to a human-readable message for logging */"
      },
      {
        "sha": "e918b6e1565cd0ab4855f4ab595126032a5874c1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c44e4c467c30fe7790372bdea8941ba29fd3327e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "patch": "@@ -2563,7 +2563,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n     if (GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         LockPoints lp;\n-        CTxMemPoolEntry entry(txNew, 0, 0, 0, 0, false, 0, false, 0, lp);\n+        CTxMemPoolEntry entry(wtxNew.tx, 0, 0, 0, 0, false, 0, false, 0, lp);\n         CTxMemPool::setEntries setAncestors;\n         size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n         size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n@@ -3782,5 +3782,5 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, *this, true, NULL, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, false, nAbsurdFee);\n }"
      }
    ]
  },
  {
    "sha": "62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjYwN2Q3OTZjZDkzYmZjNWNlNGVlNTA1MGM5M2NmMGNhODBiYTkx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-05T08:15:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-22T02:18:28Z"
      },
      "message": "Convert COrphanTx to keep a CTransactionRef",
      "tree": {
        "sha": "c9d366d781453045829d5efc8b7863afd3271a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9d366d781453045829d5efc8b7863afd3271a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c44e4c467c30fe7790372bdea8941ba29fd3327e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c44e4c467c30fe7790372bdea8941ba29fd3327e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 25,
      "deletions": 24
    },
    "files": [
      {
        "sha": "10aaa77fff189a65f78c2936a97ccbbd7cf58c3f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
        "patch": "@@ -51,7 +51,7 @@ struct IteratorComparator\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n-    CTransaction tx;\n+    CTransactionRef tx;\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n@@ -586,9 +586,9 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    uint256 hash = tx.GetHash();\n+    const uint256& hash = tx->GetHash();\n     if (mapOrphanTransactions.count(hash))\n         return false;\n \n@@ -599,7 +599,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // have been mined or received.\n     // 100 orphans, each of which is at most 99,999 bytes big is\n     // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n-    unsigned int sz = GetTransactionWeight(tx);\n+    unsigned int sz = GetTransactionWeight(*tx);\n     if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n@@ -608,7 +608,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n \n     auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n     assert(ret.second);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    BOOST_FOREACH(const CTxIn& txin, tx->vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n@@ -622,7 +622,7 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n-    BOOST_FOREACH(const CTxIn& txin, it->second.tx.vin)\n+    BOOST_FOREACH(const CTxIn& txin, it->second.tx->vin)\n     {\n         auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n@@ -644,7 +644,7 @@ void EraseOrphansFor(NodeId peer)\n         map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n+            nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n         }\n     }\n     if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n@@ -665,7 +665,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n         {\n             map<uint256, COrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n-                nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n+                nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n             } else {\n                 nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n             }\n@@ -736,7 +736,7 @@ void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIn\n         auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n         if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n         for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n-            const CTransaction& orphanTx = (*mi)->second.tx;\n+            const CTransaction& orphanTx = *(*mi)->second.tx;\n             const uint256& orphanHash = orphanTx.GetHash();\n             vOrphanErase.push_back(orphanHash);\n         }\n@@ -1636,7 +1636,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                      mi != itByPrev->second.end();\n                      ++mi)\n                 {\n-                    const CTransaction& orphanTx = (*mi)->second.tx;\n+                    const CTransactionRef& porphanTx = (*mi)->second.tx;\n+                    const CTransaction& orphanTx = *porphanTx;\n                     const uint256& orphanHash = orphanTx.GetHash();\n                     NodeId fromPeer = (*mi)->second.fromPeer;\n                     bool fMissingInputs2 = false;\n@@ -1648,7 +1649,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, MakeTransactionRef(orphanTx), true, &fMissingInputs2)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -1701,7 +1702,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     pfrom->AddInventoryKnown(_inv);\n                     if (!AlreadyHave(_inv)) pfrom->AskFor(_inv);\n                 }\n-                AddOrphanTx(tx, pfrom->GetId());\n+                AddOrphanTx(ptx, pfrom->GetId());\n \n                 // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));"
      },
      {
        "sha": "493a568b494f115ab1a0327298c35679a11a99a9",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
        "patch": "@@ -23,11 +23,11 @@\n #include <boost/test/unit_test.hpp>\n \n // Tests this internal-to-main.cpp method:\n-extern bool AddOrphanTx(const CTransaction& tx, NodeId peer);\n+extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n struct COrphanTx {\n-    CTransaction tx;\n+    CTransactionRef tx;\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     BOOST_CHECK(!connman->IsBanned(addr));\n }\n \n-CTransaction RandomOrphan()\n+CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n@@ -143,30 +143,30 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n-        AddOrphanTx(tx, i);\n+        AddOrphanTx(MakeTransactionRef(tx), i);\n     }\n \n     // ... and 50 that depend on other orphans:\n     for (int i = 0; i < 50; i++)\n     {\n-        CTransaction txPrev = RandomOrphan();\n+        CTransactionRef txPrev = RandomOrphan();\n \n         CMutableTransaction tx;\n         tx.vin.resize(1);\n         tx.vin[0].prevout.n = 0;\n-        tx.vin[0].prevout.hash = txPrev.GetHash();\n+        tx.vin[0].prevout.hash = txPrev->GetHash();\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n-        SignSignature(keystore, txPrev, tx, 0, SIGHASH_ALL);\n+        SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL);\n \n-        AddOrphanTx(tx, i);\n+        AddOrphanTx(MakeTransactionRef(tx), i);\n     }\n \n     // This really-big orphan should be ignored:\n     for (int i = 0; i < 10; i++)\n     {\n-        CTransaction txPrev = RandomOrphan();\n+        CTransactionRef txPrev = RandomOrphan();\n \n         CMutableTransaction tx;\n         tx.vout.resize(1);\n@@ -176,15 +176,15 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {\n             tx.vin[j].prevout.n = j;\n-            tx.vin[j].prevout.hash = txPrev.GetHash();\n+            tx.vin[j].prevout.hash = txPrev->GetHash();\n         }\n-        SignSignature(keystore, txPrev, tx, 0, SIGHASH_ALL);\n+        SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL);\n         // Re-use same signature for other inputs\n         // (they don't have to be valid for this test)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        BOOST_CHECK(!AddOrphanTx(tx, i));\n+        BOOST_CHECK(!AddOrphanTx(MakeTransactionRef(tx), i));\n     }\n \n     // Test EraseOrphansFor:"
      }
    ]
  },
  {
    "sha": "6713f0f142d97b4608c95a3ea03b4b670fceab2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzEzZjBmMTQyZDk3YjQ2MDhjOTVhM2VhMDNiNGI2NzBmY2VhYjJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-11T21:01:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-22T02:18:28Z"
      },
      "message": "Make FillBlock consume txn_available to avoid shared_ptr copies",
      "tree": {
        "sha": "fb1ea76626fcb165c700ed63a963a4dfc19f36fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb1ea76626fcb165c700ed63a963a4dfc19f36fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6713f0f142d97b4608c95a3ea03b4b670fceab2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6713f0f142d97b4608c95a3ea03b4b670fceab2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6713f0f142d97b4608c95a3ea03b4b670fceab2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6713f0f142d97b4608c95a3ea03b4b670fceab2b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62607d796cd93bfc5ce4ee5050c93cf0ca80ba91"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 40,
      "deletions": 21
    },
    "files": [
      {
        "sha": "72fe17bdc7ef88315d0b971d77ba19bf6f632236",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6713f0f142d97b4608c95a3ea03b4b670fceab2b/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6713f0f142d97b4608c95a3ea03b4b670fceab2b/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=6713f0f142d97b4608c95a3ea03b4b670fceab2b",
        "patch": "@@ -142,8 +142,9 @@ bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {\n     return txn_available[index] ? true : false;\n }\n \n-ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) const {\n+ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {\n     assert(!header.IsNull());\n+    uint256 hash = header.GetHash();\n     block = header;\n     block.vtx.resize(txn_available.size());\n \n@@ -154,8 +155,13 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n                 return READ_STATUS_INVALID;\n             block.vtx[i] = vtx_missing[tx_missing_offset++];\n         } else\n-            block.vtx[i] = txn_available[i];\n+            block.vtx[i] = std::move(txn_available[i]);\n     }\n+\n+    // Make sure we can't call FillBlock again.\n+    header.SetNull();\n+    txn_available.clear();\n+\n     if (vtx_missing.size() != tx_missing_offset)\n         return READ_STATUS_INVALID;\n \n@@ -170,10 +176,10 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         return READ_STATUS_CHECKBLOCK_FAILED;\n     }\n \n-    LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool and %lu txn requested\\n\", header.GetHash().ToString(), prefilled_count, mempool_count, vtx_missing.size());\n+    LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool and %lu txn requested\\n\", hash.ToString(), prefilled_count, mempool_count, vtx_missing.size());\n     if (vtx_missing.size() < 5) {\n         for (const auto& tx : vtx_missing)\n-            LogPrint(\"cmpctblock\", \"Reconstructed block %s required tx %s\\n\", header.GetHash().ToString(), tx->GetHash().ToString());\n+            LogPrint(\"cmpctblock\", \"Reconstructed block %s required tx %s\\n\", hash.ToString(), tx->GetHash().ToString());\n     }\n \n     return READ_STATUS_OK;"
      },
      {
        "sha": "809ccbf9363fa1c3dcb2b72815a7e73e10e7ddc2",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6713f0f142d97b4608c95a3ea03b4b670fceab2b/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6713f0f142d97b4608c95a3ea03b4b670fceab2b/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=6713f0f142d97b4608c95a3ea03b4b670fceab2b",
        "patch": "@@ -202,7 +202,7 @@ class PartiallyDownloadedBlock {\n \n     ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock);\n     bool IsTxAvailable(size_t index) const;\n-    ReadStatus FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) const;\n+    ReadStatus FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing);\n };\n \n #endif"
      },
      {
        "sha": "90f273e731cb3f71bfc2801e4e08a62ef8e89704",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 16,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6713f0f142d97b4608c95a3ea03b4b670fceab2b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6713f0f142d97b4608c95a3ea03b4b670fceab2b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=6713f0f142d97b4608c95a3ea03b4b670fceab2b",
        "patch": "@@ -85,17 +85,23 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         BOOST_CHECK_EQUAL(pool.size(), poolSize - 1);\n \n         CBlock block2;\n-        std::vector<CTransactionRef> vtx_missing;\n-        BOOST_CHECK(partialBlock.FillBlock(block2, vtx_missing) == READ_STATUS_INVALID); // No transactions\n+        {\n+            PartiallyDownloadedBlock tmp = partialBlock;\n+            BOOST_CHECK(partialBlock.FillBlock(block2, {}) == READ_STATUS_INVALID); // No transactions\n+            partialBlock = tmp;\n+        }\n \n-        vtx_missing.push_back(block.vtx[2]); // Wrong transaction\n-        partialBlock.FillBlock(block2, vtx_missing); // Current implementation doesn't check txn here, but don't require that\n+        // Wrong transaction\n+        {\n+            PartiallyDownloadedBlock tmp = partialBlock;\n+            partialBlock.FillBlock(block2, {block.vtx[2]}); // Current implementation doesn't check txn here, but don't require that\n+            partialBlock = tmp;\n+        }\n         bool mutated;\n         BOOST_CHECK(block.hashMerkleRoot != BlockMerkleRoot(block2, &mutated));\n \n-        vtx_missing[0] = block.vtx[1];\n         CBlock block3;\n-        BOOST_CHECK(partialBlock.FillBlock(block3, vtx_missing) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.FillBlock(block3, {block.vtx[1]}) == READ_STATUS_OK);\n         BOOST_CHECK_EQUAL(block.GetHash().ToString(), block3.GetHash().ToString());\n         BOOST_CHECK_EQUAL(block.hashMerkleRoot.ToString(), BlockMerkleRoot(block3, &mutated).ToString());\n         BOOST_CHECK(!mutated);\n@@ -181,17 +187,24 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n         CBlock block2;\n-        std::vector<CTransactionRef> vtx_missing;\n-        BOOST_CHECK(partialBlock.FillBlock(block2, vtx_missing) == READ_STATUS_INVALID); // No transactions\n+        {\n+            PartiallyDownloadedBlock tmp = partialBlock;\n+            BOOST_CHECK(partialBlock.FillBlock(block2, {}) == READ_STATUS_INVALID); // No transactions\n+            partialBlock = tmp;\n+        }\n \n-        vtx_missing.push_back(block.vtx[1]); // Wrong transaction\n-        partialBlock.FillBlock(block2, vtx_missing); // Current implementation doesn't check txn here, but don't require that\n+        // Wrong transaction\n+        {\n+            PartiallyDownloadedBlock tmp = partialBlock;\n+            partialBlock.FillBlock(block2, {block.vtx[1]}); // Current implementation doesn't check txn here, but don't require that\n+            partialBlock = tmp;\n+        }\n         bool mutated;\n         BOOST_CHECK(block.hashMerkleRoot != BlockMerkleRoot(block2, &mutated));\n \n-        vtx_missing[0] = block.vtx[0];\n         CBlock block3;\n-        BOOST_CHECK(partialBlock.FillBlock(block3, vtx_missing) == READ_STATUS_OK);\n+        PartiallyDownloadedBlock partialBlockCopy = partialBlock;\n+        BOOST_CHECK(partialBlock.FillBlock(block3, {block.vtx[0]}) == READ_STATUS_OK);\n         BOOST_CHECK_EQUAL(block.GetHash().ToString(), block3.GetHash().ToString());\n         BOOST_CHECK_EQUAL(block.hashMerkleRoot.ToString(), BlockMerkleRoot(block3, &mutated).ToString());\n         BOOST_CHECK(!mutated);\n@@ -200,7 +213,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n         block.vtx.clear();\n         block2.vtx.clear();\n         block3.vtx.clear();\n-        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n+        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1); // + 1 because of partialBlockCopy.\n     }\n     BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n }\n@@ -240,8 +253,8 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n         CBlock block2;\n-        std::vector<CTransactionRef> vtx_missing;\n-        BOOST_CHECK(partialBlock.FillBlock(block2, vtx_missing) == READ_STATUS_OK);\n+        PartiallyDownloadedBlock partialBlockCopy = partialBlock;\n+        BOOST_CHECK(partialBlock.FillBlock(block2, {}) == READ_STATUS_OK);\n         BOOST_CHECK_EQUAL(block.GetHash().ToString(), block2.GetHash().ToString());\n         bool mutated;\n         BOOST_CHECK_EQUAL(block.hashMerkleRoot.ToString(), BlockMerkleRoot(block2, &mutated).ToString());\n@@ -250,7 +263,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n         txhash = block.vtx[1]->GetHash();\n         block.vtx.clear();\n         block2.vtx.clear();\n-        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n+        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1); // + 1 because of partialBlockCopy.\n     }\n     BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n }"
      }
    ]
  },
  {
    "sha": "91335ba389918966c94eeb7071b6c5a998bf1be8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTMzNWJhMzg5OTE4OTY2Yzk0ZWViNzA3MWI2YzVhOTk4YmYxYmU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-06T04:38:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-22T02:18:28Z"
      },
      "message": "Remove unused MakeTransactionRef overloads",
      "tree": {
        "sha": "dea18d9501526ba7053c12dfd678016362895131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dea18d9501526ba7053c12dfd678016362895131"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91335ba389918966c94eeb7071b6c5a998bf1be8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91335ba389918966c94eeb7071b6c5a998bf1be8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91335ba389918966c94eeb7071b6c5a998bf1be8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91335ba389918966c94eeb7071b6c5a998bf1be8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6713f0f142d97b4608c95a3ea03b4b670fceab2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6713f0f142d97b4608c95a3ea03b4b670fceab2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6713f0f142d97b4608c95a3ea03b4b670fceab2b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8e5b42440830b42d3bd73d0f21c371e9e2e05411",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91335ba389918966c94eeb7071b6c5a998bf1be8/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91335ba389918966c94eeb7071b6c5a998bf1be8/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=91335ba389918966c94eeb7071b6c5a998bf1be8",
        "patch": "@@ -453,8 +453,6 @@ struct CMutableTransaction\n typedef std::shared_ptr<const CTransaction> CTransactionRef;\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n-static inline CTransactionRef MakeTransactionRef(const CTransactionRef& txIn) { return txIn; }\n-static inline CTransactionRef MakeTransactionRef(CTransactionRef&& txIn) { return std::move(txIn); }\n \n /** Compute the weight of a transaction, as defined by BIP 141 */\n int64_t GetTransactionWeight(const CTransaction &tx);"
      }
    ]
  }
]