sipa,2019-01-03T08:17:54Z,Taking the address of an array gives a pointer to its first element. It does not give you a pointer-to-a-pointer. I believe both the old and the new code are correct here.,https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451078104,451078104,
promag,2019-01-03T08:25:51Z,"utACK cd509e59, at least arguments are ""consistent"" now.",https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451079446,451079446,
bytting,2019-01-03T09:16:59Z,"> Taking the address of an array gives a pointer to its first element. It does not give you a pointer-to-a-pointer. I believe both the old and the new code are correct here.\n\nThat's what I was unsure about. For a static array this may be true, but are you sure it is defined behaviour across compilers?\n\nIf it was `&rhs.value[0]` it would be another matter.",https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451088948,451088948,
sipa,2019-01-03T09:42:10Z,"This is not an implementation detail.\n\nC arrays' behavior is specified by the language in this regard. For most operations, arrays automatically decay into a pointer to its first element. But there are a few operations specific to arrays for which this does not happen, including `sizeof` (which gives you the size of the array, not of a pointer to it), and the `&` operator, which also gives a poi",https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451094779,451094779,
laanwj,2019-01-03T13:21:22Z,"If this fixes a bug, this needs a test.\nIf not, please change the PR and commit title to say something like clarifying the code.",https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451140973,451140973,
gmaxwell,2019-01-03T17:56:31Z,"NAK, doesn't fix a bug, doesn't make the code more clear: memcmp (&,&) is perfectly idiomatic code.",https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451224430,451224430,
bytting,2019-01-05T15:06:45Z,"I take your word for it, this being defined behaviour and idiomatic code.\n\nI'll close this one.",https://github.com/bitcoin/bitcoin/pull/15083#issuecomment-451663197,451663197,
lavie,2019-01-03T05:49:17Z,"Might I ask, why is this a `memcmp` at all, when `value` is basically a `u_int8_t`?\n\nWouldn't return `rhs.value == value` be simpler?",https://github.com/bitcoin/bitcoin/pull/15083#discussion_r244915888,244915888,src/wallet/db.cpp
bytting,2019-01-03T06:32:35Z,"It's an array\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/wallet/db.h#L30",https://github.com/bitcoin/bitcoin/pull/15083#discussion_r244919007,244919007,src/wallet/db.cpp
lavie,2019-01-03T06:35:46Z,ðŸ˜¬sorry about that.,https://github.com/bitcoin/bitcoin/pull/15083#discussion_r244919260,244919260,src/wallet/db.cpp
bytting,2019-01-03T07:08:43Z,No problem :smile:,https://github.com/bitcoin/bitcoin/pull/15083#discussion_r244922264,244922264,src/wallet/db.cpp
