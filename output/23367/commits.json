[
  {
    "sha": "6825af390ca022386ad51341eab059f70be15cfd",
    "node_id": "C_kwDOABII59oAKDY4MjVhZjM5MGNhMDIyMzg2YWQ1MTM0MWVhYjA1OWY3MGJlMTVjZmQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-09T22:23:57Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Fix bnb_search_test to use set equivalence for\n\nFor BnB, we only want to check that sets are equivalent with their\nvalues, whereas in knapsack we care about the outpoints.",
      "tree": {
        "sha": "cd7a480409387a6ec271e8472f75034cbece0681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd7a480409387a6ec271e8472f75034cbece0681"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6825af390ca022386ad51341eab059f70be15cfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6825af390ca022386ad51341eab059f70be15cfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6825af390ca022386ad51341eab059f70be15cfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6825af390ca022386ad51341eab059f70be15cfd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a90186496aea8025316bc5616905ffcf1aeb29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a90186496aea8025316bc5616905ffcf1aeb29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a90186496aea8025316bc5616905ffcf1aeb29"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 27,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e9b741d5265180984767d25a4f92969da615bf00",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 8,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6825af390ca022386ad51341eab059f70be15cfd/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6825af390ca022386ad51341eab059f70be15cfd/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=6825af390ca022386ad51341eab059f70be15cfd",
        "patch": "@@ -31,12 +31,14 @@ typedef std::set<CInputCoin> CoinSet;\n static const CoinEligibilityFilter filter_standard(1, 6, 0);\n static const CoinEligibilityFilter filter_confirmed(1, 1, 0);\n static const CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n+static int nextLockTime = 0;\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     set.emplace_back(MakeTransactionRef(tx), nInput);\n }\n \n@@ -45,6 +47,7 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fe\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     CInputCoin coin(MakeTransactionRef(tx), nInput);\n     coin.effective_value = nValue - fee;\n     coin.m_fee = fee;\n@@ -54,7 +57,6 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fe\n \n static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n {\n-    static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     tx.vout.resize(nInput + 1);\n@@ -86,6 +88,23 @@ static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount\n     coins.push_back(output);\n }\n \n+static bool equivalent_sets(CoinSet a, CoinSet b)\n+{\n+    std::vector<CAmount> a_amts;\n+    std::vector<CAmount> b_amts;\n+    for (const auto& coin : a) {\n+        a_amts.push_back(coin.txout.nValue);\n+    }\n+    for (const auto& coin : b) {\n+        b_amts.push_back(coin.txout.nValue);\n+    }\n+    std::sort(a_amts.begin(), a_amts.end());\n+    std::sort(b_amts.begin(), b_amts.end());\n+\n+    std::pair<std::vector<CAmount>::iterator, std::vector<CAmount>::iterator> ret = mismatch(a_amts.begin(), a_amts.end(), b_amts.begin());\n+    return ret.first == a_amts.end() && ret.second == b_amts.end();\n+}\n+\n static bool equal_sets(CoinSet a, CoinSet b)\n {\n     std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n@@ -163,15 +182,15 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Select 1 Cent\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n     actual_selection.clear();\n     selection.clear();\n@@ -180,7 +199,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n     actual_selection.clear();\n     selection.clear();\n@@ -194,7 +213,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n@@ -209,7 +228,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     actual_selection.clear();\n     selection.clear();\n@@ -222,7 +241,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equal_sets(selection, actual_selection));\n+    // BOOST_CHECK(equivalent_sets(selection, actual_selection));\n \n     // Select 0.25 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n@@ -252,7 +271,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n \n     ////////////////////\n     // Behavior tests //"
      }
    ]
  },
  {
    "sha": "6cf7e000154759c64d9c8af5b31db1ed1e38e935",
    "node_id": "C_kwDOABII59oAKDZjZjdlMDAwMTU0NzU5YzY0ZDljOGFmNWIzMWRiMWVkMWUzOGU5MzU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T19:24:08Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Introduce SelectionResult struct\n\nIntroduces a SelectionResult struct which contains the set of selected\ninputs and the total transaction fee for the transaction. This will be\nused by the various SelectCoins* functions. Additionally helpers are\nprovided to compute the total input value and result comparisons.",
      "tree": {
        "sha": "f6fb61703af3f15e1a2ac0c0ddefe0e1d94f6707",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6fb61703af3f15e1a2ac0c0ddefe0e1d94f6707"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cf7e000154759c64d9c8af5b31db1ed1e38e935",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf7e000154759c64d9c8af5b31db1ed1e38e935",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf7e000154759c64d9c8af5b31db1ed1e38e935",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf7e000154759c64d9c8af5b31db1ed1e38e935/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6825af390ca022386ad51341eab059f70be15cfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6825af390ca022386ad51341eab059f70be15cfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6825af390ca022386ad51341eab059f70be15cfd"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 57,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e43babe89331575afc642fb636329128ea4e2dc",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf7e000154759c64d9c8af5b31db1ed1e38e935/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf7e000154759c64d9c8af5b31db1ed1e38e935/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=6cf7e000154759c64d9c8af5b31db1ed1e38e935",
        "patch": "@@ -369,6 +369,11 @@ CAmount OutputGroup::GetSelectionAmount() const\n     return m_subtract_fee_outputs ? m_value : effective_value;\n }\n \n+CAmount SelectionResult::GetWaste(CAmount change_cost) const\n+{\n+    return GetSelectionWaste(m_selected_inputs, change_cost, m_target, m_use_effective);\n+}\n+\n CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n {\n     // This function should not be called with empty inputs as that would mean the selection failed\n@@ -395,3 +400,29 @@ CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cos\n \n     return waste;\n }\n+\n+CAmount SelectionResult::GetSelectedValue() const\n+{\n+    CAmount ret = 0;\n+    for (const auto& coin : m_selected_inputs) {\n+        ret += coin.txout.nValue;\n+    }\n+    return ret;\n+}\n+\n+void SelectionResult::Clear()\n+{\n+    m_selected_inputs.clear();\n+}\n+\n+void SelectionResult::AddInput(const OutputGroup& group)\n+{\n+    util::insert(m_selected_inputs, group.m_outputs);\n+}\n+\n+std::vector<CInputCoin> SelectionResult::GetInputVector() const\n+{\n+    std::vector<CInputCoin> coins(m_selected_inputs.begin(), m_selected_inputs.end());\n+    Shuffle(coins.begin(), coins.end(), FastRandomContext());\n+    return coins;\n+}"
      },
      {
        "sha": "b47c8bd3991a843a299a30e21a5ceaea5827183a",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf7e000154759c64d9c8af5b31db1ed1e38e935/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf7e000154759c64d9c8af5b31db1ed1e38e935/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=6cf7e000154759c64d9c8af5b31db1ed1e38e935",
        "patch": "@@ -197,6 +197,32 @@ struct OutputGroup\n  */\n [[nodiscard]] CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cost, CAmount target, bool use_effective_value = true);\n \n+struct SelectionResult\n+{\n+    /** Set of inputs selected by the algorithm to use in the transaction */\n+    std::set<CInputCoin> m_selected_inputs;\n+    /** The target the algorithm selected for. Note that this may not be equal to the recipient amount as it can include non-input fees */\n+    const CAmount m_target;\n+    /** Whether the input values for calculations should be the effective value (true) or normal value (false) */\n+    bool m_use_effective{false};\n+\n+    explicit SelectionResult(const CAmount target)\n+        : m_target(target) {}\n+\n+    /** Get the sum of the input values */\n+    CAmount GetSelectedValue() const;\n+\n+    void Clear();\n+\n+    void AddInput(const OutputGroup& group);\n+\n+    /** Calculates the waste for this selection via GetSelectionWaste */\n+    CAmount GetWaste(CAmount change_cost) const;\n+\n+    /** Get the vector of CInputCoins that will be used to fill in a CTransaction's vin */\n+    std::vector<CInputCoin> GetInputVector() const;\n+};\n+\n bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n \n /** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible"
      }
    ]
  },
  {
    "sha": "c01920c2af51ef36b783cbbe6848f227e232dacb",
    "node_id": "C_kwDOABII59oAKGMwMTkyMGMyYWY1MWVmMzZiNzgzY2JiZTY4NDhmMjI3ZTIzMmRhY2I",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T19:48:00Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "scripted-diff: Use SelectionResult in coin selector tests\n\nReplace the CoinSet actual_selection with a SelectionResult\nexpected_result. We don't use the SelectionResult functions yet, but\nwill soon.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/CoinSet actual_selection/SelectionResult expected_result(CAmount(0), CAmount(0))/' src/wallet/test/coinselector_tests.cpp\nsed -i 's/actual_selection/expected_result.m_selected_inputs/' src/wallet/test/coinselector_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b154a83479bd672e050935ea9626fbd533a421e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b154a83479bd672e050935ea9626fbd533a421e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c01920c2af51ef36b783cbbe6848f227e232dacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c01920c2af51ef36b783cbbe6848f227e232dacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c01920c2af51ef36b783cbbe6848f227e232dacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c01920c2af51ef36b783cbbe6848f227e232dacb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf7e000154759c64d9c8af5b31db1ed1e38e935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf7e000154759c64d9c8af5b31db1ed1e38e935",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf7e000154759c64d9c8af5b31db1ed1e38e935"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "bdbeed68d895abe7cd545d87c81c2f03da60b475",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c01920c2af51ef36b783cbbe6848f227e232dacb/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c01920c2af51ef36b783cbbe6848f227e232dacb/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=c01920c2af51ef36b783cbbe6848f227e232dacb",
        "patch": "@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n     CoinSet selection;\n-    CoinSet actual_selection;\n+    SelectionResult expected_result(CAmount(0), CAmount(0));\n     CAmount value_ret = 0;\n \n     /////////////////////////\n@@ -180,72 +180,72 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, utxo_pool);\n \n     // Select 1 Cent\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Select 2 Cent\n-    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Select 5 Cent\n-    add_coin(4 * CENT, 4, actual_selection);\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Select 11 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret));\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Cost of change is greater than the difference between target value and utxo sum\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n-    actual_selection.clear();\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Cost of change is less than the difference between target value and utxo sum\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0, selection, value_ret));\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Select 10 Cent\n     add_coin(5 * CENT, 5, utxo_pool);\n-    add_coin(5 * CENT, 5, actual_selection);\n-    add_coin(4 * CENT, 4, actual_selection);\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n+    add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Negative effective value\n     // Select 10 Cent but have 1 Cent not be possible because too small\n-    add_coin(5 * CENT, 5, actual_selection);\n-    add_coin(3 * CENT, 3, actual_selection);\n-    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n+    add_coin(3 * CENT, 3, expected_result.m_selected_inputs);\n+    add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    // BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n \n     // Select 0.25 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n-    actual_selection.clear();\n+    expected_result.m_selected_inputs.clear();\n     selection.clear();\n \n     // Iteration exhaustion test\n@@ -256,11 +256,11 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(2 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(2 * CENT, 7, expected_result.m_selected_inputs);\n     add_coin(7 * CENT, 7, utxo_pool);\n     add_coin(7 * CENT, 7, utxo_pool);\n     add_coin(7 * CENT, 7, utxo_pool);\n@@ -271,7 +271,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n \n     ////////////////////\n     // Behavior tests //"
      }
    ]
  },
  {
    "sha": "c4d64708195211dc7dbc049b434cd40a4e18810b",
    "node_id": "C_kwDOABII59oAKGM0ZDY0NzA4MTk1MjExZGM3ZGJjMDQ5YjQzNGNkNDBhNGUxODgxMGI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T19:31:45Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Return SelectionResult from SelectCoinsBnB\n\nRemoves coins_out and value_ret has SelectCoinsBnB return a\nstd::optional<SelectionResult>",
      "tree": {
        "sha": "9bf9f001ae0ec50d9d2a15385256e9665dcdbc84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bf9f001ae0ec50d9d2a15385256e9665dcdbc84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4d64708195211dc7dbc049b434cd40a4e18810b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d64708195211dc7dbc049b434cd40a4e18810b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4d64708195211dc7dbc049b434cd40a4e18810b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d64708195211dc7dbc049b434cd40a4e18810b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c01920c2af51ef36b783cbbe6848f227e232dacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c01920c2af51ef36b783cbbe6848f227e232dacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c01920c2af51ef36b783cbbe6848f227e232dacb"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 61,
      "deletions": 71
    },
    "files": [
      {
        "sha": "0ac8fc6b34b9e30b682a8fb84802b01e890293a7",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d64708195211dc7dbc049b434cd40a4e18810b/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d64708195211dc7dbc049b434cd40a4e18810b/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=c4d64708195211dc7dbc049b434cd40a4e18810b",
        "patch": "@@ -92,17 +92,14 @@ static void BnBExhaustion(benchmark::Bench& bench)\n {\n     // Setup\n     std::vector<OutputGroup> utxo_pool;\n-    CoinSet selection;\n-    CAmount value_ret = 0;\n \n     bench.run([&] {\n         // Benchmark\n         CAmount target = make_hard_case(17, utxo_pool);\n-        SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret); // Should exhaust\n+        SelectCoinsBnB(utxo_pool, target, 0); // Should exhaust\n \n         // Cleanup\n         utxo_pool.clear();\n-        selection.clear();\n     });\n }\n "
      },
      {
        "sha": "c7af9708e6a4378c386ccfa5158516a675624982",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=c4d64708195211dc7dbc049b434cd40a4e18810b",
        "patch": "@@ -56,17 +56,14 @@ struct {\n  *        bound of the range.\n  * @param const CAmount& cost_of_change This is the cost of creating and spending a change output.\n  *        This plus selection_target is the upper bound of the range.\n- * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins\n- *        that have been selected.\n- * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins\n- *        that were selected.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n  */\n \n static const size_t TOTAL_TRIES = 100000;\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change)\n {\n-    out_set.clear();\n+    SelectionResult result(selection_target);\n     CAmount curr_value = 0;\n \n     std::vector<bool> curr_selection; // select the utxo at this index\n@@ -80,7 +77,7 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n         curr_available_value += utxo.GetSelectionAmount();\n     }\n     if (curr_available_value < selection_target) {\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Sort the utxo_pool\n@@ -156,19 +153,17 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n \n     // Check for solution\n     if (best_selection.empty()) {\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Set output set\n-    value_ret = 0;\n     for (size_t i = 0; i < best_selection.size(); ++i) {\n         if (best_selection.at(i)) {\n-            util::insert(out_set, utxo_pool.at(i).m_outputs);\n-            value_ret += utxo_pool.at(i).m_value;\n+            result.AddInput(utxo_pool.at(i));\n         }\n     }\n \n-    return true;\n+    return std::make_optional(result);\n }\n \n std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n@@ -418,6 +413,7 @@ void SelectionResult::Clear()\n void SelectionResult::AddInput(const OutputGroup& group)\n {\n     util::insert(m_selected_inputs, group.m_outputs);\n+    m_use_effective = !group.m_subtract_fee_outputs;\n }\n \n std::vector<CInputCoin> SelectionResult::GetInputVector() const"
      },
      {
        "sha": "174bd2218ff8e4f13579977eb3bece10832624e0",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=c4d64708195211dc7dbc049b434cd40a4e18810b",
        "patch": "@@ -223,7 +223,7 @@ struct SelectionResult\n     std::vector<CInputCoin> GetInputVector() const;\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n+std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change);\n \n /** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible\n  * outputs until the target is satisfied"
      },
      {
        "sha": "2af0bcded129e2981ef5ef14d6825034d4111a72",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=c4d64708195211dc7dbc049b434cd40a4e18810b",
        "patch": "@@ -385,11 +385,9 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n \n     // Note that unlike KnapsackSolver, we do not include the fee for creating a change output as BnB will not create a change output.\n     std::vector<OutputGroup> positive_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, true /* positive_only */);\n-    std::set<CInputCoin> bnb_coins;\n-    CAmount bnb_value;\n-    if (SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, bnb_coins, bnb_value)) {\n-        const auto waste = GetSelectionWaste(bnb_coins, /* cost of change */ CAmount(0), nTargetValue, !coin_selection_params.m_subtract_fee_outputs);\n-        results.emplace_back(std::make_tuple(waste, std::move(bnb_coins), bnb_value));\n+    std::optional<SelectionResult> bnb_result = SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change);\n+    if (bnb_result) {\n+        results.emplace_back(std::make_tuple(bnb_result->GetWaste(CAmount(0)), bnb_result->m_selected_inputs, bnb_result->GetSelectedValue()));\n     }\n \n     // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here."
      },
      {
        "sha": "53dedc868b4d46cf3fab42aced202002373ae1be",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 49,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4d64708195211dc7dbc049b434cd40a4e18810b/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=c4d64708195211dc7dbc049b434cd40a4e18810b",
        "patch": "@@ -14,6 +14,7 @@\n #include <wallet/test/wallet_test_fixture.h>\n #include <wallet/wallet.h>\n \n+#include <algorithm>\n #include <boost/test/unit_test.hpp>\n #include <random>\n \n@@ -88,20 +89,22 @@ static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount\n     coins.push_back(output);\n }\n \n-static bool equivalent_sets(CoinSet a, CoinSet b)\n+/** Check if SelectionResult a is equivalent to SelectionResult b.\n+ * Equivalent means same input values, but maybe different inputs (i.e. same value, different prevout) */\n+bool EquivalentResult(const SelectionResult& a, const SelectionResult& b)\n {\n     std::vector<CAmount> a_amts;\n     std::vector<CAmount> b_amts;\n-    for (const auto& coin : a) {\n+    for (const auto& coin : a.m_selected_inputs) {\n         a_amts.push_back(coin.txout.nValue);\n     }\n-    for (const auto& coin : b) {\n+    for (const auto& coin : b.m_selected_inputs) {\n         b_amts.push_back(coin.txout.nValue);\n     }\n     std::sort(a_amts.begin(), a_amts.end());\n     std::sort(b_amts.begin(), b_amts.end());\n \n-    std::pair<std::vector<CAmount>::iterator, std::vector<CAmount>::iterator> ret = mismatch(a_amts.begin(), a_amts.end(), b_amts.begin());\n+    std::pair<std::vector<CAmount>::iterator, std::vector<CAmount>::iterator> ret = std::mismatch(a_amts.begin(), a_amts.end(), b_amts.begin());\n     return ret.first == a_amts.end() && ret.second == b_amts.end();\n }\n \n@@ -161,17 +164,14 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n-    CoinSet selection;\n-    SelectionResult expected_result(CAmount(0), CAmount(0));\n-    CAmount value_ret = 0;\n+    SelectionResult expected_result(CAmount(0));\n \n     /////////////////////////\n     // Known Outcome tests //\n     /////////////////////////\n \n     // Empty utxo pool\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    selection.clear();\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT));\n \n     // Add utxos\n     add_coin(1 * CENT, 1, utxo_pool);\n@@ -181,78 +181,77 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Select 1 Cent\n     add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n-    BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n+    const auto result1 = SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result1);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result1));\n+    BOOST_CHECK_EQUAL(result1->GetSelectedValue(), 1 * CENT);\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n-    BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n+    const auto result2 = SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result2);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result2));\n+    BOOST_CHECK_EQUAL(result2->GetSelectedValue(), 2 * CENT);\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Select 5 Cent\n     add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n     add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n-    BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n+    const auto result3 = SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result3);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result3));\n+    BOOST_CHECK_EQUAL(result3->GetSelectedValue(), 5 * CENT);\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Select 11 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT));\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Cost of change is greater than the difference between target value and utxo sum\n     add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    const auto result4 = SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result4);\n+    BOOST_CHECK_EQUAL(result4->GetSelectedValue(), 1 * CENT);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result4));\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Cost of change is less than the difference between target value and utxo sum\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0, selection, value_ret));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0));\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Select 10 Cent\n     add_coin(5 * CENT, 5, utxo_pool);\n     add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n     add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n     add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n-    BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n+    const auto result5 = SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result5);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result5));\n+    BOOST_CHECK_EQUAL(result5->GetSelectedValue(), 10 * CENT);\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Negative effective value\n     // Select 10 Cent but have 1 Cent not be possible because too small\n     add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n     add_coin(3 * CENT, 3, expected_result.m_selected_inputs);\n     add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n-    BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n+    const auto result6 = SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000);\n+    BOOST_CHECK(result6);\n+    BOOST_CHECK_EQUAL(result6->GetSelectedValue(), 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    // BOOST_CHECK(EquivalentResult(expected_result, *result));\n \n     // Select 0.25 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT));\n     expected_result.m_selected_inputs.clear();\n-    selection.clear();\n \n     // Iteration exhaustion test\n     CAmount target = make_hard_case(17, utxo_pool);\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret)); // Should exhaust\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0)); // Should exhaust\n     target = make_hard_case(14, utxo_pool);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret)); // Should not exhaust\n+    const auto result7 = SelectCoinsBnB(GroupCoins(utxo_pool), target, 0); // Should not exhaust\n+    BOOST_CHECK(result7);\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n@@ -269,9 +268,10 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 50000; ++i) {\n         add_coin(5 * CENT, 7, utxo_pool);\n     }\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n-    BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    const auto result8 = SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000);\n+    BOOST_CHECK(result8);\n+    BOOST_CHECK_EQUAL(result8->GetSelectedValue(), 30 * CENT);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result8));\n \n     ////////////////////\n     // Behavior tests //\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     // Run 100 times, to make sure it is never finding a solution\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT, selection, value_ret));\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT));\n     }\n \n     // Make sure that effective value is working in AttemptSelection when BnB is used\n@@ -299,20 +299,19 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         wallet->SetupDescriptorScriptPubKeyMans();\n \n         std::vector<COutput> coins;\n-        CoinSet setCoinsRet;\n-        CAmount nValueRet;\n \n         add_coin(coins, *wallet, 1);\n         coins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n-        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change));\n \n         // Test fees subtracted from output:\n         coins.clear();\n         add_coin(coins, *wallet, 1 * CENT);\n         coins.at(0).nInputBytes = 40;\n         coin_selection_params_bnb.m_subtract_fee_outputs = true;\n-        BOOST_CHECK(SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        const auto result9 = SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change);\n+        BOOST_CHECK(result9);\n+        BOOST_CHECK_EQUAL(result9->GetSelectedValue(), 1 * CENT);\n     }\n \n     {"
      }
    ]
  },
  {
    "sha": "6f691b20308e9dac09637c9022f7a8c39e203fc4",
    "node_id": "C_kwDOABII59oAKDZmNjkxYjIwMzA4ZTlkYWMwOTYzN2M5MDIyZjdhOGMzOWUyMDNmYzQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T20:36:47Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Return SelectionResult from KnapsackSolver\n\nReturns a std::optional<SelectionResult> from KnapsackSolver instead of\nusing out parameters for the inputs set and selected value.",
      "tree": {
        "sha": "875865aca0060c3c93672892f76e2870faeb3e39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/875865aca0060c3c93672892f76e2870faeb3e39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f691b20308e9dac09637c9022f7a8c39e203fc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f691b20308e9dac09637c9022f7a8c39e203fc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f691b20308e9dac09637c9022f7a8c39e203fc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f691b20308e9dac09637c9022f7a8c39e203fc4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4d64708195211dc7dbc049b434cd40a4e18810b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d64708195211dc7dbc049b434cd40a4e18810b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4d64708195211dc7dbc049b434cd40a4e18810b"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 134,
      "deletions": 114
    },
    "files": [
      {
        "sha": "e00ed4fe2a1ad2d160c38ca801e489cd6f18c27e",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=6f691b20308e9dac09637c9022f7a8c39e203fc4",
        "patch": "@@ -236,10 +236,9 @@ static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const\n     }\n }\n \n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)\n+std::optional<SelectionResult> KnapsackSolver(std::vector<OutputGroup>& groups, const CAmount& nTargetValue)\n {\n-    setCoinsRet.clear();\n-    nValueRet = 0;\n+    SelectionResult result(nTargetValue);\n \n     // List of values less than target\n     std::optional<OutputGroup> lowest_larger;\n@@ -250,9 +249,8 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n     for (const OutputGroup& group : groups) {\n         if (group.GetSelectionAmount() == nTargetValue) {\n-            util::insert(setCoinsRet, group.m_outputs);\n-            nValueRet += group.m_value;\n-            return true;\n+            result.AddInput(group);\n+            return result;\n         } else if (group.GetSelectionAmount() < nTargetValue + MIN_CHANGE) {\n             applicable_groups.push_back(group);\n             nTotalLower += group.GetSelectionAmount();\n@@ -263,17 +261,15 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n     if (nTotalLower == nTargetValue) {\n         for (const auto& group : applicable_groups) {\n-            util::insert(setCoinsRet, group.m_outputs);\n-            nValueRet += group.m_value;\n+            result.AddInput(group);\n         }\n-        return true;\n+        return result;\n     }\n \n     if (nTotalLower < nTargetValue) {\n-        if (!lowest_larger) return false;\n-        util::insert(setCoinsRet, lowest_larger->m_outputs);\n-        nValueRet += lowest_larger->m_value;\n-        return true;\n+        if (!lowest_larger) return std::nullopt;\n+        result.AddInput(*lowest_larger);\n+        return result;\n     }\n \n     // Solve subset sum by stochastic approximation\n@@ -290,13 +286,11 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (lowest_larger &&\n         ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->GetSelectionAmount() <= nBest)) {\n-        util::insert(setCoinsRet, lowest_larger->m_outputs);\n-        nValueRet += lowest_larger->m_value;\n+        result.AddInput(*lowest_larger);\n     } else {\n         for (unsigned int i = 0; i < applicable_groups.size(); i++) {\n             if (vfBest[i]) {\n-                util::insert(setCoinsRet, applicable_groups[i].m_outputs);\n-                nValueRet += applicable_groups[i].m_value;\n+                result.AddInput(applicable_groups[i]);\n             }\n         }\n \n@@ -311,7 +305,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n         }\n     }\n \n-    return true;\n+    return result;\n }\n \n /******************************************************************************"
      },
      {
        "sha": "a6ebf9a4e93c3e9de7d166dc43715cedbcb69814",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=6f691b20308e9dac09637c9022f7a8c39e203fc4",
        "patch": "@@ -235,6 +235,6 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n \n // Original coin selection algorithm as a fallback\n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n+std::optional<SelectionResult> KnapsackSolver(std::vector<OutputGroup>& groups, const CAmount& nTargetValue);\n \n #endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "2ff129d7b8c0feff1a9a9a6260924a4b79d11e20",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=6f691b20308e9dac09637c9022f7a8c39e203fc4",
        "patch": "@@ -394,11 +394,9 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n     std::vector<OutputGroup> all_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, false /* positive_only */);\n     // While nTargetValue includes the transaction fees for non-input things, it does not include the fee for creating a change output.\n     // So we need to include that for KnapsackSolver as well, as we are expecting to create a change output.\n-    std::set<CInputCoin> knapsack_coins;\n-    CAmount knapsack_value;\n-    if (KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, all_groups, knapsack_coins, knapsack_value)) {\n-        const auto waste = GetSelectionWaste(knapsack_coins, coin_selection_params.m_cost_of_change, nTargetValue + coin_selection_params.m_change_fee, !coin_selection_params.m_subtract_fee_outputs);\n-        results.emplace_back(std::make_tuple(waste, std::move(knapsack_coins), knapsack_value));\n+    std::optional<SelectionResult> knapsack_result = KnapsackSolver(all_groups, nTargetValue + coin_selection_params.m_change_fee);\n+    if (knapsack_result) {\n+        results.emplace_back(std::make_tuple(knapsack_result->GetWaste(coin_selection_params.m_cost_of_change), knapsack_result->m_selected_inputs, knapsack_result->GetSelectedValue()));\n     }\n \n     // We include the minimum final change for SRD as we do want to avoid making really small change."
      },
      {
        "sha": "237b0f2ee6972470917d4c9f1cd5c985b7142fa6",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 90,
        "changes": 208,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f691b20308e9dac09637c9022f7a8c39e203fc4/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=6f691b20308e9dac09637c9022f7a8c39e203fc4",
        "patch": "@@ -108,10 +108,11 @@ bool EquivalentResult(const SelectionResult& a, const SelectionResult& b)\n     return ret.first == a_amts.end() && ret.second == b_amts.end();\n }\n \n-static bool equal_sets(CoinSet a, CoinSet b)\n+/** Check if this selection is equal to another one. Equal means same inputs (i.e same value and prevout) */\n+bool EqualResult(const SelectionResult& a, const SelectionResult& b)\n {\n-    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n-    return ret.first == a.end() && ret.second == b.end();\n+    std::pair<std::set<CInputCoin>::iterator, std::set<CInputCoin>::iterator> ret = std::mismatch(a.m_selected_inputs.begin(), a.m_selected_inputs.end(), b.m_selected_inputs.begin());\n+    return ret.first == a.m_selected_inputs.end() && ret.second == b.m_selected_inputs.end();\n }\n \n static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n@@ -344,8 +345,6 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     wallet->SetupDescriptorScriptPubKeyMans();\n \n-    CoinSet setCoinsRet, setCoinsRet2;\n-    CAmount nValueRet;\n     std::vector<COutput> coins;\n \n     // test multiple times to allow for differences in the shuffle order\n@@ -354,25 +353,27 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         coins.clear();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 1 * CENT));\n \n         add_coin(coins, *wallet, 1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 1 * CENT));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK(KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        const auto result1 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * CENT);\n+        BOOST_CHECK(result1);\n+        BOOST_CHECK_EQUAL(result1->GetSelectedValue(), 1 * CENT);\n \n         add_coin(coins, *wallet, 2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!KnapsackSolver(3 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 3 * CENT));\n \n         // we can make 3 cents of new coins\n-        BOOST_CHECK(KnapsackSolver(3 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n+        const auto result2 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 3 * CENT);\n+        BOOST_CHECK(result2);\n+        BOOST_CHECK_EQUAL(result2->GetSelectedValue(), 3 * CENT);\n \n         add_coin(coins, *wallet, 5*CENT);           // add a mature 5 cent coin,\n         add_coin(coins, *wallet, 10*CENT, 3, true); // a new 10 cent coin sent from one of our own addresses\n@@ -381,35 +382,41 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 38 * CENT));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard_extra), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard_extra), 38 * CENT));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK(KnapsackSolver(37 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n+        const auto result3 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 37 * CENT);\n+        BOOST_CHECK(result3);\n+        BOOST_CHECK_EQUAL(result3->GetSelectedValue(), 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK(KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n+        const auto result4 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 38 * CENT);\n+        BOOST_CHECK(result4);\n+        BOOST_CHECK_EQUAL(result4->GetSelectedValue(), 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK(KnapsackSolver(34 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n+        const auto result5 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 34 * CENT);\n+        BOOST_CHECK(result5);\n+        BOOST_CHECK_EQUAL(result5->GetSelectedValue(), 35 * CENT);       // but 35 cents is closest\n+        BOOST_CHECK_EQUAL(result5->m_selected_inputs.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK(KnapsackSolver(7 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+        const auto result6 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 7 * CENT);\n+        BOOST_CHECK(result6);\n+        BOOST_CHECK_EQUAL(result6->GetSelectedValue(), 7 * CENT);\n+        BOOST_CHECK_EQUAL(result6->m_selected_inputs.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK(KnapsackSolver(8 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK(nValueRet == 8 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n+        const auto result7 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 8 * CENT);\n+        BOOST_CHECK(result7);\n+        BOOST_CHECK(result7->GetSelectedValue() == 8 * CENT);\n+        BOOST_CHECK_EQUAL(result7->m_selected_inputs.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK(KnapsackSolver(9 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result8 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 9 * CENT);\n+        BOOST_CHECK(result8);\n+        BOOST_CHECK_EQUAL(result8->GetSelectedValue(), 10 * CENT);\n+        BOOST_CHECK_EQUAL(result8->m_selected_inputs.size(), 1U);\n \n         // now clear out the wallet and start again to test choosing between subsets of smaller coins and the next biggest coin\n         coins.clear();\n@@ -421,45 +428,52 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(coins, *wallet, 30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK(KnapsackSolver(71 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK(!KnapsackSolver(72 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n+        const auto result9 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 71 * CENT);\n+        BOOST_CHECK(result9);\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 72 * CENT));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result10 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 16 * CENT);\n+        BOOST_CHECK(result10);\n+        BOOST_CHECK_EQUAL(result10->GetSelectedValue(), 20 * CENT); // we should get 20 in one coin\n+        BOOST_CHECK_EQUAL(result10->m_selected_inputs.size(), 1U);\n \n         add_coin(coins, *wallet,  5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n+        const auto result11 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 16 * CENT);\n+        BOOST_CHECK(result11);\n+        BOOST_CHECK_EQUAL(result11->GetSelectedValue(), 18 * CENT); // we should get 18 in 3 coins\n+        BOOST_CHECK_EQUAL(result11->m_selected_inputs.size(), 3U);\n \n         add_coin(coins, *wallet,  18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n+        const auto result12 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 16 * CENT);\n+        BOOST_CHECK(result12);\n+        BOOST_CHECK_EQUAL(result12->GetSelectedValue(), 18 * CENT);  // we should get 18 in 1 coin\n+        BOOST_CHECK_EQUAL(result12->m_selected_inputs.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK(KnapsackSolver(11 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+        const auto result13 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 11 * CENT);\n+        BOOST_CHECK(result13);\n+        BOOST_CHECK_EQUAL(result13->GetSelectedValue(), 11 * CENT);\n+        BOOST_CHECK_EQUAL(result13->m_selected_inputs.size(), 2U);\n \n         // check that the smallest bigger coin is used\n         add_coin(coins, *wallet,  1*COIN);\n         add_coin(coins, *wallet,  2*COIN);\n         add_coin(coins, *wallet,  3*COIN);\n         add_coin(coins, *wallet,  4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK(KnapsackSolver(95 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result14 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 95 * CENT);\n+        BOOST_CHECK(result14);\n+        BOOST_CHECK_EQUAL(result14->GetSelectedValue(), 1 * COIN);  // we should get 1 BTC in 1 coin\n+        BOOST_CHECK_EQUAL(result14->m_selected_inputs.size(), 1U);\n \n-        BOOST_CHECK(KnapsackSolver(195 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result15 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 195 * CENT);\n+        BOOST_CHECK(result15);\n+        BOOST_CHECK_EQUAL(result15->GetSelectedValue(), 2 * COIN);  // we should get 2 BTC in 1 coin\n+        BOOST_CHECK_EQUAL(result15->m_selected_inputs.size(), 1U);\n \n         // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n \n@@ -472,33 +486,37 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n+        const auto result16 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE);\n+        BOOST_CHECK(result16);\n+        BOOST_CHECK_EQUAL(result16->GetSelectedValue(), MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n         add_coin(coins, *wallet, 1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n+        const auto result17 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * MIN_CHANGE);\n+        BOOST_CHECK(result17);\n+        BOOST_CHECK_EQUAL(result17->GetSelectedValue(), 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n         add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n+        const auto result18 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * MIN_CHANGE);\n+        BOOST_CHECK(result18);\n+        BOOST_CHECK_EQUAL(result18->GetSelectedValue(), 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see https://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n         coins.clear();\n         for (int j = 0; j < 20; j++)\n             add_coin(coins, *wallet, 50000 * COIN);\n \n-        BOOST_CHECK(KnapsackSolver(500000 * COIN, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n+        const auto result19 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 500000 * COIN);\n+        BOOST_CHECK(result19);\n+        BOOST_CHECK_EQUAL(result19->GetSelectedValue(), 500000 * COIN); // we should get the exact amount\n+        BOOST_CHECK_EQUAL(result19->m_selected_inputs.size(), 10U); // in ten coins\n \n         // if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n@@ -509,19 +527,21 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 7 / 10);\n         add_coin(coins, *wallet, 1111 * MIN_CHANGE);\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result20 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * MIN_CHANGE);\n+        BOOST_CHECK(result20);\n+        BOOST_CHECK_EQUAL(result20->GetSelectedValue(), 1111 * MIN_CHANGE); // we get the bigger coin\n+        BOOST_CHECK_EQUAL(result20->m_selected_inputs.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         coins.clear();\n         add_coin(coins, *wallet, MIN_CHANGE * 4 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 8 / 10);\n         add_coin(coins, *wallet, 1111 * MIN_CHANGE);\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n+        const auto result21 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE);\n+        BOOST_CHECK(result21);\n+        BOOST_CHECK_EQUAL(result21->GetSelectedValue(), MIN_CHANGE);   // we should get the exact amount\n+        BOOST_CHECK_EQUAL(result21->m_selected_inputs.size(), 2U); // in two coins 0.4+0.6\n \n         // test avoiding small change\n         coins.clear();\n@@ -530,14 +550,16 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(coins, *wallet, MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 10001 / 100, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n+        const auto result22 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE * 10001 / 100);\n+        BOOST_CHECK(result22);\n+        BOOST_CHECK_EQUAL(result22->GetSelectedValue(), MIN_CHANGE * 10105 / 100); // we should get all coins\n+        BOOST_CHECK_EQUAL(result22->m_selected_inputs.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 9990 / 100, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+        const auto result23 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE * 9990 / 100);\n+        BOOST_CHECK(result23);\n+        BOOST_CHECK_EQUAL(result23->GetSelectedValue(), 101 * MIN_CHANGE);\n+        BOOST_CHECK_EQUAL(result23->m_selected_inputs.size(), 2U);\n     }\n \n     // test with many inputs\n@@ -549,18 +571,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n         // We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n         for (int i = 0; i < RUN_TESTS; i++) {\n-            BOOST_CHECK(KnapsackSolver(2000, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n+            const auto result24 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 2000);\n+            BOOST_CHECK(result24);\n \n             if (amt - 2000 < MIN_CHANGE) {\n                 // needs more than one input:\n                 uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n                 CAmount returnValue = amt * returnSize;\n-                BOOST_CHECK_EQUAL(nValueRet, returnValue);\n-                BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n+                BOOST_CHECK_EQUAL(result24->GetSelectedValue(), returnValue);\n+                BOOST_CHECK_EQUAL(result24->m_selected_inputs.size(), returnSize);\n             } else {\n                 // one input is sufficient:\n-                BOOST_CHECK_EQUAL(nValueRet, amt);\n-                BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+                BOOST_CHECK_EQUAL(result24->GetSelectedValue(), amt);\n+                BOOST_CHECK_EQUAL(result24->m_selected_inputs.size(), 1U);\n             }\n         }\n     }\n@@ -575,9 +598,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(coins), setCoinsRet, nValueRet));\n-            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(coins), setCoinsRet2, nValueRet));\n-            BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n+            const auto result25 = KnapsackSolver(GroupCoins(coins), 50 * COIN);\n+            BOOST_CHECK(result25);\n+            const auto result26 = KnapsackSolver(GroupCoins(coins), 50 * COIN);\n+            BOOST_CHECK(result26);\n+            BOOST_CHECK(!EqualResult(*result25, *result26));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n@@ -586,9 +611,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n                 // When choosing 1 from 100 identical coins, 1% of the time, this test will choose the same coin twice\n                 // which will cause it to fail.\n                 // To avoid that issue, run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(coins), setCoinsRet, nValueRet));\n-                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(coins), setCoinsRet2, nValueRet));\n-                if (equal_sets(setCoinsRet, setCoinsRet2))\n+                const auto result27 = KnapsackSolver(GroupCoins(coins), COIN);\n+                BOOST_CHECK(result27);\n+                const auto result28 = KnapsackSolver(GroupCoins(coins), COIN);\n+                BOOST_CHECK(result28);\n+                if (EqualResult(*result27, *result28))\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n@@ -607,9 +634,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(coins), setCoinsRet, nValueRet));\n-                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(coins), setCoinsRet2, nValueRet));\n-                if (equal_sets(setCoinsRet, setCoinsRet2))\n+                const auto result29 = KnapsackSolver(GroupCoins(coins), 90 * CENT);\n+                BOOST_CHECK(result29);\n+                const auto result30 = KnapsackSolver(GroupCoins(coins), 90 * CENT);\n+                BOOST_CHECK(result30);\n+                if (EqualResult(*result29, *result30))\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n@@ -625,18 +654,17 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     wallet->SetupDescriptorScriptPubKeyMans();\n \n-    CoinSet setCoinsRet;\n-    CAmount nValueRet;\n     std::vector<COutput> coins;\n \n     // Test vValue sort order\n     for (int i = 0; i < 1000; i++)\n         add_coin(coins, *wallet, 1000 * COIN);\n     add_coin(coins, *wallet, 3 * COIN);\n \n-    BOOST_CHECK(KnapsackSolver(1003 * COIN, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n-    BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n-    BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+    const auto result = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 1003 * COIN);\n+    BOOST_CHECK(result);\n+    BOOST_CHECK_EQUAL(result->GetSelectedValue(), 1003 * COIN);\n+    BOOST_CHECK_EQUAL(result->m_selected_inputs.size(), 2U);\n }\n \n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value"
      }
    ]
  },
  {
    "sha": "a248f7ae76e938e114632e874d5d95dfdf3202ba",
    "node_id": "C_kwDOABII59oAKGEyNDhmN2FlNzZlOTM4ZTExNDYzMmU4NzRkNWQ5NWRmZGYzMjAyYmE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-28T03:22:34Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Return SelectionResult from SelectCoinsSRD\n\nChanges SelectCoinsSRD to return a SelectionResult.",
      "tree": {
        "sha": "2fbc84e0ad059a8c0ec2839d35361cbd41287ddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fbc84e0ad059a8c0ec2839d35361cbd41287ddf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a248f7ae76e938e114632e874d5d95dfdf3202ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a248f7ae76e938e114632e874d5d95dfdf3202ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a248f7ae76e938e114632e874d5d95dfdf3202ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a248f7ae76e938e114632e874d5d95dfdf3202ba/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f691b20308e9dac09637c9022f7a8c39e203fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f691b20308e9dac09637c9022f7a8c39e203fc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f691b20308e9dac09637c9022f7a8c39e203fc4"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0149b8dc963272d1418547ceb2a227d8749995ec",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a248f7ae76e938e114632e874d5d95dfdf3202ba/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a248f7ae76e938e114632e874d5d95dfdf3202ba/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=a248f7ae76e938e114632e874d5d95dfdf3202ba",
        "patch": "@@ -166,10 +166,9 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n     return std::make_optional(result);\n }\n \n-std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n+std::optional<SelectionResult> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n {\n-    std::set<CInputCoin> out_set;\n-    CAmount value_ret = 0;\n+    SelectionResult result(target_value);\n \n     std::vector<size_t> indexes;\n     indexes.resize(utxo_pool.size());\n@@ -181,10 +180,9 @@ std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std\n         const OutputGroup& group = utxo_pool.at(i);\n         Assume(group.GetSelectionAmount() > 0);\n         selected_eff_value += group.GetSelectionAmount();\n-        value_ret += group.m_value;\n-        util::insert(out_set, group.m_outputs);\n+        result.AddInput(group);\n         if (selected_eff_value >= target_value) {\n-            return std::make_pair(out_set, value_ret);\n+            return result;\n         }\n     }\n     return std::nullopt;"
      },
      {
        "sha": "284472162d07105e137bda822909f05770fe8cdd",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a248f7ae76e938e114632e874d5d95dfdf3202ba/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a248f7ae76e938e114632e874d5d95dfdf3202ba/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=a248f7ae76e938e114632e874d5d95dfdf3202ba",
        "patch": "@@ -230,9 +230,9 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n  *\n  * @param[in]  utxo_pool    The positive effective value OutputGroups eligible for selection\n  * @param[in]  target_value The target value to select for\n- * @returns If successful, a pair of set of outputs and total selected value, otherwise, std::nullopt\n+ * @returns If successful, a SelectionResult, otherwise, std::nullopt\n  */\n-std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n+std::optional<SelectionResult> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n \n // Original coin selection algorithm as a fallback\n std::optional<SelectionResult> KnapsackSolver(std::vector<OutputGroup>& groups, const CAmount& nTargetValue);"
      },
      {
        "sha": "26b6b953e500be3fa19e1be83e6d1eede511b2d1",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a248f7ae76e938e114632e874d5d95dfdf3202ba/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a248f7ae76e938e114632e874d5d95dfdf3202ba/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=a248f7ae76e938e114632e874d5d95dfdf3202ba",
        "patch": "@@ -404,8 +404,7 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n     const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n     auto srd_result = SelectCoinsSRD(positive_groups, srd_target);\n     if (srd_result != std::nullopt) {\n-        const auto waste = GetSelectionWaste(srd_result->first, coin_selection_params.m_cost_of_change, srd_target, !coin_selection_params.m_subtract_fee_outputs);\n-        results.emplace_back(std::make_tuple(waste, std::move(srd_result->first), srd_result->second));\n+        results.emplace_back(std::make_tuple(srd_result->GetWaste(coin_selection_params.m_cost_of_change), srd_result->m_selected_inputs, srd_result->GetSelectedValue()));\n     }\n \n     if (results.size() == 0) {"
      }
    ]
  },
  {
    "sha": "266721283743b621a85de10ba83ed3f251f12c7c",
    "node_id": "C_kwDOABII59oAKDI2NjcyMTI4Mzc0M2I2MjFhODVkZTEwYmE4M2VkM2YyNTFmMTJjN2M",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T21:39:22Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Make an OutputGroup for preset inputs\n\nIn SelectCoins, for our preset inputs, we combine all of the preset\ninputs into a single OutputGroup. This allows us to combine the preset\ninputs with additional selection algo results.",
      "tree": {
        "sha": "be6d197cae8c8b05542f2e4a6bfc8bffa2036db4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be6d197cae8c8b05542f2e4a6bfc8bffa2036db4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/266721283743b621a85de10ba83ed3f251f12c7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266721283743b621a85de10ba83ed3f251f12c7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/266721283743b621a85de10ba83ed3f251f12c7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266721283743b621a85de10ba83ed3f251f12c7c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a248f7ae76e938e114632e874d5d95dfdf3202ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a248f7ae76e938e114632e874d5d95dfdf3202ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a248f7ae76e938e114632e874d5d95dfdf3202ba"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e8558e08cd2defea7b21f9d85a33ee215ff8a5a",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266721283743b621a85de10ba83ed3f251f12c7c/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266721283743b621a85de10ba83ed3f251f12c7c/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=266721283743b621a85de10ba83ed3f251f12c7c",
        "patch": "@@ -443,6 +443,7 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n     // calculate value from preset inputs and store them\n     std::set<CInputCoin> setPresetCoins;\n     CAmount nValueFromPresetInputs = 0;\n+    OutputGroup preset_inputs(coin_selection_params);\n \n     std::vector<COutPoint> vPresetInputs;\n     coin_control.ListSelected(vPresetInputs);\n@@ -480,6 +481,10 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             value_to_select -= coin.effective_value;\n         }\n         setPresetCoins.insert(coin);\n+        /* Set depth, from_me, ancestors, and descendants to 0 or false as don't matter for preset inputs as no actual selection is being done.\n+         * positive_only is set to false because we want to include all preset inputs, even if they are dust.\n+         */\n+        preset_inputs.Insert(coin, 0, false, 0, 0, false);\n     }\n \n     // remove preset inputs from vCoins so that Coin Selection doesn't pick them."
      }
    ]
  },
  {
    "sha": "462d8595fb588b953d73eab84137a5ec1f7f7c09",
    "node_id": "C_kwDOABII59oAKDQ2MmQ4NTk1ZmI1ODhiOTUzZDczZWFiODQxMzdhNWVjMWY3ZjdjMDk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T22:15:55Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:20Z"
      },
      "message": "Use SelectionResult for waste calculation",
      "tree": {
        "sha": "daa982c10e1f03168277500c9b9408786a34d31e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daa982c10e1f03168277500c9b9408786a34d31e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/462d8595fb588b953d73eab84137a5ec1f7f7c09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/462d8595fb588b953d73eab84137a5ec1f7f7c09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/462d8595fb588b953d73eab84137a5ec1f7f7c09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/462d8595fb588b953d73eab84137a5ec1f7f7c09/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "266721283743b621a85de10ba83ed3f251f12c7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266721283743b621a85de10ba83ed3f251f12c7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/266721283743b621a85de10ba83ed3f251f12c7c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0e256cdd55a35ae74bd5155fbbed3ec21d021188",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/462d8595fb588b953d73eab84137a5ec1f7f7c09/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/462d8595fb588b953d73eab84137a5ec1f7f7c09/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=462d8595fb588b953d73eab84137a5ec1f7f7c09",
        "patch": "@@ -187,6 +187,8 @@ struct OutputGroup\n  * where excess = selected_effective_value - target\n  * change_cost = effective_feerate * change_output_size + long_term_feerate * change_spend_size\n  *\n+ * Note this function is separate from SelectionResult for the tests.\n+ *\n  * @param[in] inputs The selected inputs\n  * @param[in] change_cost The cost of creating change and spending it in the future.\n  *                        Only used if there is change, in which case it must be positive."
      },
      {
        "sha": "440489370c51915a833aaed54abebb5b52ba4df4",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/462d8595fb588b953d73eab84137a5ec1f7f7c09/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/462d8595fb588b953d73eab84137a5ec1f7f7c09/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=462d8595fb588b953d73eab84137a5ec1f7f7c09",
        "patch": "@@ -378,16 +378,14 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n-    // Vector of results for use with waste calculation\n-    // In order: calculated waste, selected inputs, selected input value (sum of input values)\n-    // TODO: Use a struct representing the selection result\n-    std::vector<std::tuple<CAmount, std::set<CInputCoin>, CAmount>> results;\n+    // Vector of result and waste pairs. We will choose the best one based on waste.\n+    std::vector<std::pair<SelectionResult, CAmount>> results;\n \n     // Note that unlike KnapsackSolver, we do not include the fee for creating a change output as BnB will not create a change output.\n     std::vector<OutputGroup> positive_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, true /* positive_only */);\n     std::optional<SelectionResult> bnb_result = SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change);\n     if (bnb_result) {\n-        results.emplace_back(std::make_tuple(bnb_result->GetWaste(CAmount(0)), bnb_result->m_selected_inputs, bnb_result->GetSelectedValue()));\n+        results.push_back(std::make_pair(*bnb_result, bnb_result->GetWaste(CAmount(0))));\n     }\n \n     // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n@@ -396,15 +394,15 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n     // So we need to include that for KnapsackSolver as well, as we are expecting to create a change output.\n     std::optional<SelectionResult> knapsack_result = KnapsackSolver(all_groups, nTargetValue + coin_selection_params.m_change_fee);\n     if (knapsack_result) {\n-        results.emplace_back(std::make_tuple(knapsack_result->GetWaste(coin_selection_params.m_cost_of_change), knapsack_result->m_selected_inputs, knapsack_result->GetSelectedValue()));\n+        results.push_back(std::make_pair(*knapsack_result, knapsack_result->GetWaste(coin_selection_params.m_cost_of_change)));\n     }\n \n     // We include the minimum final change for SRD as we do want to avoid making really small change.\n     // KnapsackSolver does not need this because it includes MIN_CHANGE internally.\n     const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n     auto srd_result = SelectCoinsSRD(positive_groups, srd_target);\n     if (srd_result != std::nullopt) {\n-        results.emplace_back(std::make_tuple(srd_result->GetWaste(coin_selection_params.m_cost_of_change), srd_result->m_selected_inputs, srd_result->GetSelectedValue()));\n+        results.push_back(std::make_pair(*srd_result, srd_result->GetWaste(coin_selection_params.m_cost_of_change)));\n     }\n \n     if (results.size() == 0) {\n@@ -414,11 +412,13 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n \n     // Choose the result with the least waste\n     // If the waste is the same, choose the one which spends more inputs.\n-    const auto& best_result = std::min_element(results.begin(), results.end(), [](const auto& a, const auto& b) {\n-        return std::get<0>(a) < std::get<0>(b) || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a).size() > std::get<1>(b).size());\n+    auto [best_result, waste] = *std::min_element(results.begin(), results.end(), [](const auto& a, const auto& b){\n+        const auto [a_result, a_waste] = a;\n+        const auto [b_result, b_waste] = b;\n+        return a_waste < b_waste || (a_waste == b_waste && a_result.m_selected_inputs.size() > b_result.m_selected_inputs.size());\n     });\n-    setCoinsRet = std::get<1>(*best_result);\n-    nValueRet = std::get<2>(*best_result);\n+    setCoinsRet = best_result.m_selected_inputs;\n+    nValueRet = best_result.GetSelectedValue();\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
    "node_id": "C_kwDOABII59oAKDYxYWJiNDJkNGJlMmZhYmNlOGZiYTViZjM0NmU2YzRkN2RhNTMyMmQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T22:39:41Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:21Z"
      },
      "message": "Use SelectionResult in AttemptSelection\n\nReplace setCoinsRet and nValueRet with a SelectionResult in\nAttemptSelection",
      "tree": {
        "sha": "68fbe85b1d271f783df690a061f6ba370ef81d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68fbe85b1d271f783df690a061f6ba370ef81d00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "462d8595fb588b953d73eab84137a5ec1f7f7c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/462d8595fb588b953d73eab84137a5ec1f7f7c09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/462d8595fb588b953d73eab84137a5ec1f7f7c09"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 43,
      "deletions": 46
    },
    "files": [
      {
        "sha": "dadbdc69f9fd6a09510f87aad2564a75af6e7a93",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
        "patch": "@@ -54,12 +54,10 @@ static void CoinSelection(benchmark::Bench& bench)\n                                                     /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                     /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {\n-        std::set<CInputCoin> setCoinsRet;\n-        CAmount nValueRet;\n-        bool success = AttemptSelection(wallet, 1003 * COIN, filter_standard, coins, setCoinsRet, nValueRet, coin_selection_params);\n-        assert(success);\n-        assert(nValueRet == 1003 * COIN);\n-        assert(setCoinsRet.size() == 2);\n+        auto result = AttemptSelection(wallet, 1003 * COIN, filter_standard, coins, coin_selection_params);\n+        assert(result);\n+        assert(result->GetSelectedValue() == 1003 * COIN);\n+        assert(result->m_selected_inputs.size() == 2);\n     });\n }\n "
      },
      {
        "sha": "d3457a5ea375aae0369061bd94d9206dda3cd460",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 38,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
        "patch": "@@ -373,11 +373,9 @@ std::vector<OutputGroup> GroupOutputs(const CWallet& wallet, const std::vector<C\n     return groups_out;\n }\n \n-bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params)\n+std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n+                               const CoinSelectionParams& coin_selection_params)\n {\n-    setCoinsRet.clear();\n-    nValueRet = 0;\n     // Vector of result and waste pairs. We will choose the best one based on waste.\n     std::vector<std::pair<SelectionResult, CAmount>> results;\n \n@@ -407,7 +405,7 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n \n     if (results.size() == 0) {\n         // No solution found\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Choose the result with the least waste\n@@ -417,9 +415,7 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n         const auto [b_result, b_waste] = b;\n         return a_waste < b_waste || (a_waste == b_waste && a_result.m_selected_inputs.size() > b_result.m_selected_inputs.size());\n     });\n-    setCoinsRet = best_result.m_selected_inputs;\n-    nValueRet = best_result.GetSelectedValue();\n-    return true;\n+    return best_result;\n }\n \n bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params)\n@@ -515,62 +511,65 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n     // Coin Selection attempts to select inputs from a pool of eligible UTXOs to fund the\n     // transaction at a target feerate. If an attempt fails, more attempts may be made using a more\n     // permissive CoinEligibilityFilter.\n-    const bool res = [&] {\n+    std::optional<SelectionResult> res = [&] {\n         // Pre-selected inputs already cover the target amount.\n-        if (value_to_select <= 0) return true;\n+        if (value_to_select <= 0) return std::make_optional(SelectionResult(nTargetValue));\n \n         // If possible, fund the transaction with confirmed UTXOs only. Prefer at least six\n         // confirmations on outputs received from other wallets and only spend confirmed change.\n-        if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params)) return true;\n-        if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params)) return true;\n+        std::optional<SelectionResult> r1 = AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, coin_selection_params);\n+        if (r1) return r1;\n+        std::optional<SelectionResult> r2 = AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, coin_selection_params);\n+        if (r2) return r2;\n \n         // Fall back to using zero confirmation change (but with as few ancestors in the mempool as\n         // possible) if we cannot fund the transaction otherwise.\n         if (wallet.m_spend_zero_conf_change) {\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) return true;\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)),\n-                                   vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n-            }\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2),\n-                                   vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n-            }\n+            std::optional<SelectionResult> r3 = AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, coin_selection_params);\n+            if (r3) return r3;\n+            std::optional<SelectionResult> r4 = AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)),\n+                                   vCoins, coin_selection_params);\n+            if (r4) return r4;\n+            std::optional<SelectionResult> r5 = AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2),\n+                                   vCoins, coin_selection_params);\n+            if (r5) return r5;\n             // If partial groups are allowed, relax the requirement of spending OutputGroups (groups\n             // of UTXOs sent to the same address, which are obviously controlled by a single wallet)\n             // in their entirety.\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n-                                   vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n-            }\n+            std::optional<SelectionResult> r6 = AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n+                                   vCoins, coin_selection_params);\n+            if (r6) return r6;\n             // Try with unsafe inputs if they are allowed. This may spend unconfirmed outputs\n             // received from other wallets.\n-            if (coin_control.m_include_unsafe_inputs\n-                && AttemptSelection(wallet, value_to_select,\n+            if (coin_control.m_include_unsafe_inputs) {\n+                std::optional<SelectionResult> r7 = AttemptSelection(wallet, value_to_select,\n                     CoinEligibilityFilter(0 /* conf_mine */, 0 /* conf_theirs */, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n-                    vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+                    vCoins, coin_selection_params);\n+                if (r7) return r7;\n             }\n             // Try with unlimited ancestors/descendants. The transaction will still need to meet\n             // mempool ancestor/descendant policy to be accepted to mempool and broadcasted, but\n             // OutputGroups use heuristics that may overestimate ancestor/descendant counts.\n-            if (!fRejectLongChains && AttemptSelection(wallet, value_to_select,\n+            if (!fRejectLongChains) {\n+                std::optional<SelectionResult> r8 = AttemptSelection(wallet, value_to_select,\n                                       CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */),\n-                                      vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+                                      vCoins, coin_selection_params);\n+                if (r8) return r8;\n             }\n         }\n         // Coin Selection failed.\n-        return false;\n+        return std::optional<SelectionResult>();\n     }();\n \n-    // AttemptSelection clears setCoinsRet, so add the preset inputs from coin_control to the coinset\n-    util::insert(setCoinsRet, setPresetCoins);\n+    if (!res) return false;\n \n-    // add preset inputs to the total value selected\n-    nValueRet += nValueFromPresetInputs;\n+    // Add preset inputs to result\n+    res->AddInput(preset_inputs);\n \n-    return res;\n+    setCoinsRet = res->m_selected_inputs;\n+    nValueRet = res->GetSelectedValue();\n+\n+    return true;\n }\n \n static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, const uint256& block_hash)"
      },
      {
        "sha": "f5b427c82a902ca691556477a94780b19587003e",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61abb42d4be2fabce8fba5bf346e6c4d7da5322d/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
        "patch": "@@ -111,8 +111,8 @@ std::vector<OutputGroup> GroupOutputs(const CWallet& wallet, const std::vector<C\n  * param@[out]  setCoinsRet     Populated with the coins selected if successful.\n  * param@[out]  nValueRet       Used to return the total value of selected coins.\n  */\n-bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n-                        std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params);\n+std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n+                        const CoinSelectionParams& coin_selection_params);\n \n /**\n  * Select a set of coins such that nValueRet >= nTargetValue and at least"
      }
    ]
  },
  {
    "sha": "3b5adbdda6768e7e0215b40b80c7f00d3679966e",
    "node_id": "C_kwDOABII59oAKDNiNWFkYmRkYTY3NjhlN2UwMjE1YjQwYjgwYzdmMDBkMzY3OTk2NmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T22:55:21Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-26T06:21:21Z"
      },
      "message": "Use SelectionResult in SelectCoins\n\nReplace setCoinsRet and nValueRet with SelectionResult",
      "tree": {
        "sha": "47290cda7e066a5a1cda5ae53fa3f0899ea74829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47290cda7e066a5a1cda5ae53fa3f0899ea74829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b5adbdda6768e7e0215b40b80c7f00d3679966e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b5adbdda6768e7e0215b40b80c7f00d3679966e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b5adbdda6768e7e0215b40b80c7f00d3679966e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b5adbdda6768e7e0215b40b80c7f00d3679966e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61abb42d4be2fabce8fba5bf346e6c4d7da5322d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61abb42d4be2fabce8fba5bf346e6c4d7da5322d"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 29,
      "deletions": 33
    },
    "files": [
      {
        "sha": "d1e56017ccc49afb66ace59554d7fb379836c1b1",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 24,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5adbdda6768e7e0215b40b80c7f00d3679966e/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5adbdda6768e7e0215b40b80c7f00d3679966e/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=3b5adbdda6768e7e0215b40b80c7f00d3679966e",
        "patch": "@@ -418,28 +418,32 @@ std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAm\n     return best_result;\n }\n \n-bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params)\n+std::optional<SelectionResult> SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params)\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n     CAmount value_to_select = nTargetValue;\n \n+    OutputGroup preset_inputs(coin_selection_params);\n+\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n-        for (const COutput& out : vCoins)\n-        {\n-            if (!out.fSpendable)\n-                 continue;\n-            nValueRet += out.tx->tx->vout[out.i].nValue;\n-            setCoinsRet.insert(out.GetInputCoin());\n+        for (const COutput& out : vCoins) {\n+            if (!out.fSpendable) continue;\n+            /* Set depth, from_me, ancestors, and descendants to 0 or false as these don't matter for preset inputs as no actual selection is being done.\n+             * positive_only is set to false because we want to include all preset inputs, even if they are dust.\n+             */\n+            preset_inputs.Insert(out.GetInputCoin(), 0, false, 0, 0, false);\n         }\n-        return (nValueRet >= nTargetValue);\n+        SelectionResult result(nTargetValue);\n+        result.AddInput(preset_inputs);\n+        if (result.GetSelectedValue() >= nTargetValue) return std::nullopt;\n+        return result;\n     }\n \n     // calculate value from preset inputs and store them\n     std::set<CInputCoin> setPresetCoins;\n     CAmount nValueFromPresetInputs = 0;\n-    OutputGroup preset_inputs(coin_selection_params);\n \n     std::vector<COutPoint> vPresetInputs;\n     coin_control.ListSelected(vPresetInputs);\n@@ -451,7 +455,7 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n             if (wtx.tx->vout.size() <= outpoint.n) {\n-                return false;\n+                return std::nullopt;\n             }\n             input_bytes = GetTxSpendSize(wallet, wtx, outpoint.n, false);\n             txout = wtx.tx->vout.at(outpoint.n);\n@@ -460,15 +464,15 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             // The input is external. We either did not find the tx in mapWallet, or we did but couldn't compute the input size with wallet data\n             if (!coin_control.GetExternalOutput(outpoint, txout)) {\n                 // Not ours, and we don't have solving data.\n-                return false;\n+                return std::nullopt;\n             }\n             input_bytes = CalculateMaximumSignedInputSize(txout, &coin_control.m_external_provider, /* use_max_sig */ true);\n         }\n \n         CInputCoin coin(outpoint, txout, input_bytes);\n         nValueFromPresetInputs += coin.txout.nValue;\n         if (coin.m_input_bytes == -1) {\n-            return false; // Not solvable, can't estimate size for fee\n+            return std::nullopt; // Not solvable, can't estimate size for fee\n         }\n         coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n         if (coin_selection_params.m_subtract_fee_outputs) {\n@@ -561,15 +565,12 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n         return std::optional<SelectionResult>();\n     }();\n \n-    if (!res) return false;\n+    if (!res) return std::nullopt;\n \n     // Add preset inputs to result\n     res->AddInput(preset_inputs);\n \n-    setCoinsRet = res->m_selected_inputs;\n-    nValueRet = res->GetSelectedValue();\n-\n-    return true;\n+    return res;\n }\n \n static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, const uint256& block_hash)\n@@ -765,17 +766,15 @@ static bool CreateTransactionInternal(\n     AvailableCoins(wallet, vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n     // Choose coins to use\n-    CAmount inputs_sum = 0;\n-    std::set<CInputCoin> setCoins;\n-    if (!SelectCoins(wallet, vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n-    {\n+    std::optional<SelectionResult> result = SelectCoins(wallet, vAvailableCoins, /* nTargetValue */ selection_target, coin_control, coin_selection_params);\n+    if (!result) {\n         error = _(\"Insufficient funds\");\n         return false;\n     }\n \n     // Always make a change output\n     // We will reduce the fee from this change output later, and remove the output if it is too small.\n-    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    const CAmount change_and_fee = result->GetSelectedValue() - recipients_sum;\n     assert(change_and_fee >= 0);\n     CTxOut newTxOut(change_and_fee, scriptChange);\n \n@@ -794,8 +793,7 @@ static bool CreateTransactionInternal(\n     auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n     // Shuffle selected coins and fill in final vin\n-    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n-    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n+    std::vector<CInputCoin> selected_coins = result->GetInputVector();\n \n     // Note how the sequence number is set to non-maxint so that\n     // the nLockTime set above actually works."
      },
      {
        "sha": "00389d803e23a74847ccd6dd90e1bd7bc63d251e",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5adbdda6768e7e0215b40b80c7f00d3679966e/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5adbdda6768e7e0215b40b80c7f00d3679966e/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=3b5adbdda6768e7e0215b40b80c7f00d3679966e",
        "patch": "@@ -122,8 +122,8 @@ std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAm\n  * param@[out]  nValueRet           Total value of selected coins including pre-selected ones\n  *                                  from coin_control and Coin Selection if successful.\n  */\n-bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n-                 const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n+std::optional<SelectionResult> SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, const CCoinControl& coin_control,\n+                 CoinSelectionParams& coin_selection_params) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n \n /**\n  * Create a new transaction paying the recipients with a set of coins"
      },
      {
        "sha": "e8d2d0ac97f5a068cd04ed33771934025ad16a69",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b5adbdda6768e7e0215b40b80c7f00d3679966e/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b5adbdda6768e7e0215b40b80c7f00d3679966e/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=3b5adbdda6768e7e0215b40b80c7f00d3679966e",
        "patch": "@@ -323,8 +323,6 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         wallet->SetupDescriptorScriptPubKeyMans();\n \n         std::vector<COutput> coins;\n-        CoinSet setCoinsRet;\n-        CAmount nValueRet;\n \n         add_coin(coins, *wallet, 5 * CENT, 6 * 24, false, 0, true);\n         add_coin(coins, *wallet, 3 * CENT, 6 * 24, false, 0, true);\n@@ -333,7 +331,8 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         coin_control.fAllowOtherInputs = true;\n         coin_control.Select(COutPoint(coins.at(0).tx->GetHash(), coins.at(0).i));\n         coin_selection_params_bnb.m_effective_feerate = CFeeRate(0);\n-        BOOST_CHECK(SelectCoins(*wallet, coins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb));\n+        const auto result10 = SelectCoins(*wallet, coins, 10 * CENT, coin_control, coin_selection_params_bnb);\n+        BOOST_CHECK(result10);\n     }\n }\n \n@@ -706,11 +705,10 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n                                       /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                       /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                       /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n-        CoinSet out_set;\n-        CAmount out_value = 0;\n         CCoinControl cc;\n-        BOOST_CHECK(SelectCoins(*wallet, coins, target, out_set, out_value, cc, cs_params));\n-        BOOST_CHECK_GE(out_value, target);\n+        const auto result = SelectCoins(*wallet, coins, target, cc, cs_params);\n+        BOOST_CHECK(result);\n+        BOOST_CHECK_GE(result->GetSelectedValue(), target);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "07bcb13cabed7504ca69aecd8905272929461946",
    "node_id": "C_kwDOABII59oAKDA3YmNiMTNjYWJlZDc1MDRjYTY5YWVjZDg5MDUyNzI5Mjk0NjE5NDY",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-27T07:06:33Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-27T07:13:09Z"
      },
      "message": "WIP. Return change from SelectionResult",
      "tree": {
        "sha": "a4fafc9a760d086019175f6b306230a7116d60db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4fafc9a760d086019175f6b306230a7116d60db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07bcb13cabed7504ca69aecd8905272929461946",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07bcb13cabed7504ca69aecd8905272929461946",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07bcb13cabed7504ca69aecd8905272929461946",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07bcb13cabed7504ca69aecd8905272929461946/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b5adbdda6768e7e0215b40b80c7f00d3679966e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b5adbdda6768e7e0215b40b80c7f00d3679966e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b5adbdda6768e7e0215b40b80c7f00d3679966e"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 73,
      "deletions": 53
    },
    "files": [
      {
        "sha": "17f3dfa1011bf170b78a684cffb44f5e4a1c038d",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 2,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07bcb13cabed7504ca69aecd8905272929461946/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07bcb13cabed7504ca69aecd8905272929461946/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=07bcb13cabed7504ca69aecd8905272929461946",
        "patch": "@@ -356,8 +356,16 @@ CAmount OutputGroup::GetSelectionAmount() const\n     return m_subtract_fee_outputs ? m_value : effective_value;\n }\n \n-CAmount SelectionResult::GetWaste(CAmount change_cost) const\n+CAmount SelectionResult::GetWaste(const CoinSelectionParams& coin_selection_params) const\n {\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    const CAmount change = GetChange(not_input_fees, coin_selection_params.m_cost_of_change);\n+\n+    CAmount change_cost = 0;\n+    if (change > 0) {\n+        change_cost = coin_selection_params.m_cost_of_change;\n+    }\n+\n     return GetSelectionWaste(m_selected_inputs, change_cost, m_target, m_use_effective);\n }\n \n@@ -405,7 +413,7 @@ void SelectionResult::Clear()\n void SelectionResult::AddInput(const OutputGroup& group)\n {\n     util::insert(m_selected_inputs, group.m_outputs);\n-    m_use_effective = !group.m_subtract_fee_outputs;\n+    m_use_effective = m_use_effective || !group.m_subtract_fee_outputs;\n }\n \n std::vector<CInputCoin> SelectionResult::GetInputVector() const\n@@ -414,3 +422,32 @@ std::vector<CInputCoin> SelectionResult::GetInputVector() const\n     Shuffle(coins.begin(), coins.end(), FastRandomContext());\n     return coins;\n }\n+\n+CAmount SelectionResult::GetInputFees() const\n+{\n+    CAmount result = 0;\n+    for (const auto& coin : m_selected_inputs) {\n+        result += coin.m_fee;\n+    }\n+    return result;\n+}\n+\n+CAmount SelectionResult::GetChange(const CAmount not_input_fees, const CAmount min_change) const\n+{\n+    CAmount change = GetSelectedValue() - m_target;\n+    // TODO: rename var maybe?\n+    if (!m_use_effective) { // opposite of m_subtract_fee_outputs\n+        // m_target already includes not_input_fees\n+        // but as they are payed by recipients we can add them back to our change\n+        change += not_input_fees;\n+    } else {\n+        change -= GetInputFees();\n+    }\n+    assert(change >= 0);\n+\n+    if (change <= min_change) { // TODO: less or less_or_equal\n+        change = 0;\n+    }\n+\n+    return change;\n+}"
      },
      {
        "sha": "de2ac9cfb32deeb6117298a9e91910356d114bb0",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07bcb13cabed7504ca69aecd8905272929461946/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07bcb13cabed7504ca69aecd8905272929461946/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=07bcb13cabed7504ca69aecd8905272929461946",
        "patch": "@@ -219,10 +219,14 @@ struct SelectionResult\n     void AddInput(const OutputGroup& group);\n \n     /** Calculates the waste for this selection via GetSelectionWaste */\n-    CAmount GetWaste(CAmount change_cost) const;\n+    CAmount GetWaste(const CoinSelectionParams& coin_selection_params) const;\n \n     /** Get the vector of CInputCoins that will be used to fill in a CTransaction's vin */\n     std::vector<CInputCoin> GetInputVector() const;\n+\n+    CAmount GetInputFees() const;\n+\n+    CAmount GetChange(const CAmount not_input_fees, const CAmount min_change) const;\n };\n \n std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change);"
      },
      {
        "sha": "04593cfbe94da484031ea508aabc1a3296e1ef68",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 50,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07bcb13cabed7504ca69aecd8905272929461946/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07bcb13cabed7504ca69aecd8905272929461946/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=07bcb13cabed7504ca69aecd8905272929461946",
        "patch": "@@ -383,7 +383,7 @@ std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAm\n     std::vector<OutputGroup> positive_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, true /* positive_only */);\n     std::optional<SelectionResult> bnb_result = SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change);\n     if (bnb_result) {\n-        results.push_back(std::make_pair(*bnb_result, bnb_result->GetWaste(CAmount(0))));\n+        results.push_back(std::make_pair(*bnb_result, bnb_result->GetWaste(coin_selection_params)));\n     }\n \n     // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n@@ -392,15 +392,15 @@ std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAm\n     // So we need to include that for KnapsackSolver as well, as we are expecting to create a change output.\n     std::optional<SelectionResult> knapsack_result = KnapsackSolver(all_groups, nTargetValue + coin_selection_params.m_change_fee);\n     if (knapsack_result) {\n-        results.push_back(std::make_pair(*knapsack_result, knapsack_result->GetWaste(coin_selection_params.m_cost_of_change)));\n+        results.push_back(std::make_pair(*knapsack_result, knapsack_result->GetWaste(coin_selection_params)));\n     }\n \n     // We include the minimum final change for SRD as we do want to avoid making really small change.\n     // KnapsackSolver does not need this because it includes MIN_CHANGE internally.\n     const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n     auto srd_result = SelectCoinsSRD(positive_groups, srd_target);\n     if (srd_result != std::nullopt) {\n-        results.push_back(std::make_pair(*srd_result, srd_result->GetWaste(coin_selection_params.m_cost_of_change)));\n+        results.push_back(std::make_pair(*srd_result, srd_result->GetWaste(coin_selection_params)));\n     }\n \n     if (results.size() == 0) {\n@@ -736,6 +736,13 @@ static bool CreateTransactionInternal(\n     coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n     coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n+    // We want to drop the change to fees if:\n+    // 1. The change output would be dust\n+    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+    const auto dust = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n+    // TODO: disambiguate between min_change and m_cost_of_change\n+    if (dust > coin_selection_params.m_cost_of_change) coin_selection_params.m_cost_of_change = dust;\n+\n     // vouts to the payees\n     if (!coin_selection_params.m_subtract_fee_outputs) {\n         coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n@@ -772,25 +779,23 @@ static bool CreateTransactionInternal(\n         return false;\n     }\n \n-    // Always make a change output\n-    // We will reduce the fee from this change output later, and remove the output if it is too small.\n-    const CAmount change_and_fee = result->GetSelectedValue() - recipients_sum;\n-    assert(change_and_fee >= 0);\n-    CTxOut newTxOut(change_and_fee, scriptChange);\n+    const CAmount change_amount = result->GetChange(not_input_fees, coin_selection_params.m_cost_of_change);\n+    if (change_amount > 0) {\n+        CTxOut newTxOut(change_amount, scriptChange);\n \n-    if (nChangePosInOut == -1)\n-    {\n-        // Insert change txn at random position:\n-        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-    }\n-    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-    {\n-        error = _(\"Change index out of range\");\n-        return false;\n-    }\n+        if (nChangePosInOut == -1)\n+        {\n+            // Insert change txn at random position:\n+            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+        }\n+        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+        {\n+            error = _(\"Change index out of range\");\n+            return false;\n+        }\n \n-    assert(nChangePosInOut != -1);\n-    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+        txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    }\n \n     // Shuffle selected coins and fill in final vin\n     std::vector<CInputCoin> selected_coins = result->GetInputVector();\n@@ -815,42 +820,16 @@ static bool CreateTransactionInternal(\n         error = _(\"Missing solving data for estimating transaction size\");\n         return false;\n     }\n-    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-\n-    // Subtract fee from the change output if not subtracting it from recipient outputs\n-    CAmount fee_needed = nFeeRet;\n-    if (!coin_selection_params.m_subtract_fee_outputs) {\n-        change_position->nValue -= fee_needed;\n-    }\n-\n-    // We want to drop the change to fees if:\n-    // 1. The change output would be dust\n-    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n-    CAmount change_amount = change_position->nValue;\n-    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n-    {\n-        nChangePosInOut = -1;\n-        change_amount = 0;\n-        txNew.vout.erase(change_position);\n-\n-        // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n-        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), &wallet, &coin_control);\n-        nBytes = tx_sizes.vsize;\n-        fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-    }\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    nFeeRet = result->GetSelectedValue() - recipients_sum - change_amount;\n \n     // The only time that fee_needed should be less than the amount available for fees (in change_and_fee - change_amount) is when\n     // we are subtracting the fee from the outputs. If this occurs at any other time, it is a bug.\n-    assert(coin_selection_params.m_subtract_fee_outputs || fee_needed <= change_and_fee - change_amount);\n-\n-    // Update nFeeRet in case fee_needed changed due to dropping the change output\n-    if (fee_needed <= change_and_fee - change_amount) {\n-        nFeeRet = change_and_fee - change_amount;\n-    }\n+    assert(coin_selection_params.m_subtract_fee_outputs || fee_needed <= nFeeRet);\n \n     // Reduce output values for subtractFeeFromAmount\n     if (coin_selection_params.m_subtract_fee_outputs) {\n-        CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n+        CAmount to_reduce = fee_needed - nFeeRet;\n         int i = 0;\n         bool fFirst = true;\n         for (const auto& recipient : vecSend)"
      }
    ]
  },
  {
    "sha": "a42cd62144880a75fe34d664902773e19fab2dc2",
    "node_id": "C_kwDOABII59oAKGE0MmNkNjIxNDQ4ODBhNzVmZTM0ZDY2NDkwMjc3M2UxOWZhYjJkYzI",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-27T07:19:12Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-27T07:19:12Z"
      },
      "message": "wallet: force no change for BnB.",
      "tree": {
        "sha": "8c7bc4da7a2ba26456c0b8818c6e71d39ec27317",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c7bc4da7a2ba26456c0b8818c6e71d39ec27317"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a42cd62144880a75fe34d664902773e19fab2dc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42cd62144880a75fe34d664902773e19fab2dc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a42cd62144880a75fe34d664902773e19fab2dc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42cd62144880a75fe34d664902773e19fab2dc2/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07bcb13cabed7504ca69aecd8905272929461946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07bcb13cabed7504ca69aecd8905272929461946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07bcb13cabed7504ca69aecd8905272929461946"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "79d53be65ba7565669c14b30d6aadf69de6ad77f",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a42cd62144880a75fe34d664902773e19fab2dc2/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a42cd62144880a75fe34d664902773e19fab2dc2/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=a42cd62144880a75fe34d664902773e19fab2dc2",
        "patch": "@@ -63,7 +63,7 @@ static const size_t TOTAL_TRIES = 100000;\n \n std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change)\n {\n-    SelectionResult result(selection_target);\n+    SelectionResult result(selection_target, /* force_no_change=*/ true);\n     CAmount curr_value = 0;\n \n     std::vector<bool> curr_selection; // select the utxo at this index\n@@ -434,6 +434,8 @@ CAmount SelectionResult::GetInputFees() const\n \n CAmount SelectionResult::GetChange(const CAmount not_input_fees, const CAmount min_change) const\n {\n+    if (m_force_no_change) return 0;\n+\n     CAmount change = GetSelectedValue() - m_target;\n     // TODO: rename var maybe?\n     if (!m_use_effective) { // opposite of m_subtract_fee_outputs"
      },
      {
        "sha": "253417f4183beeea2bb8afc4a568ab0e40630cdc",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a42cd62144880a75fe34d664902773e19fab2dc2/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a42cd62144880a75fe34d664902773e19fab2dc2/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=a42cd62144880a75fe34d664902773e19fab2dc2",
        "patch": "@@ -207,9 +207,11 @@ struct SelectionResult\n     const CAmount m_target;\n     /** Whether the input values for calculations should be the effective value (true) or normal value (false) */\n     bool m_use_effective{false};\n+    /** Force no change even if more than enough inputs are selected */\n+    bool m_force_no_change{false};\n \n-    explicit SelectionResult(const CAmount target)\n-        : m_target(target) {}\n+    explicit SelectionResult(const CAmount target, const bool force_no_change = false)\n+        : m_target(target), m_force_no_change(force_no_change) {}\n \n     /** Get the sum of the input values */\n     CAmount GetSelectedValue() const;"
      }
    ]
  },
  {
    "sha": "3f5fdfe8adbee148960a7d02e746a539fa591f91",
    "node_id": "C_kwDOABII59oAKDNmNWZkZmU4YWRiZWUxNDg5NjBhN2QwMmU3NDZhNTM5ZmE1OTFmOTE",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-27T07:28:56Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-28T07:42:37Z"
      },
      "message": "wallet: remove upper bound for BnB\n\nRemoving upper bound allows to find more changeless solutions. Most of them\nwould be terrible due to huge excess and hence waste, so another solution would\nbe chosen. But in some cases excess higher than upper bound would be\neconomically optimal based on waste metric.",
      "tree": {
        "sha": "5d28b746175830e5760a33afeb78eb5b038189db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d28b746175830e5760a33afeb78eb5b038189db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f5fdfe8adbee148960a7d02e746a539fa591f91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5fdfe8adbee148960a7d02e746a539fa591f91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5fdfe8adbee148960a7d02e746a539fa591f91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5fdfe8adbee148960a7d02e746a539fa591f91/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a42cd62144880a75fe34d664902773e19fab2dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42cd62144880a75fe34d664902773e19fab2dc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a42cd62144880a75fe34d664902773e19fab2dc2"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 10,
      "deletions": 19
    },
    "files": [
      {
        "sha": "640e2354d0ce109860cf734fa1c17a31376ddacf",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f5fdfe8adbee148960a7d02e746a539fa591f91/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f5fdfe8adbee148960a7d02e746a539fa591f91/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=3f5fdfe8adbee148960a7d02e746a539fa591f91",
        "patch": "@@ -92,7 +92,6 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n         // Conditions for starting a backtrack\n         bool backtrack = false;\n         if (curr_value + curr_available_value < selection_target ||                // Cannot possibly reach target with the amount remaining in the curr_available_value.\n-            curr_value > selection_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n             (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n             backtrack = true;\n         } else if (curr_value >= selection_target) {       // Selected value is within range"
      },
      {
        "sha": "dcee97145016815228824e176644c09447e02416",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 18,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f5fdfe8adbee148960a7d02e746a539fa591f91/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f5fdfe8adbee148960a7d02e746a539fa591f91/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=3f5fdfe8adbee148960a7d02e746a539fa591f91",
        "patch": "@@ -215,10 +215,12 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_CHECK(result4);\n     BOOST_CHECK_EQUAL(result4->GetSelectedValue(), 1 * CENT);\n     BOOST_CHECK(EquivalentResult(expected_result, *result4));\n-    expected_result.m_selected_inputs.clear();\n \n     // Cost of change is less than the difference between target value and utxo sum\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0));\n+    const auto result41 = SelectCoinsBnB(GroupCoins(utxo_pool), 0.1 * CENT, 0);\n+    BOOST_CHECK(result41);\n+    BOOST_CHECK_EQUAL(result41->GetSelectedValue(), 1 * CENT);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result41));\n     expected_result.m_selected_inputs.clear();\n \n     // Select 10 Cent\n@@ -242,17 +244,17 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_CHECK_EQUAL(result6->GetSelectedValue(), 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n     // BOOST_CHECK(EquivalentResult(expected_result, *result));\n-\n-    // Select 0.25 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT));\n     expected_result.m_selected_inputs.clear();\n \n     // Iteration exhaustion test\n     CAmount target = make_hard_case(17, utxo_pool);\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0)); // Should exhaust\n+    const auto result71 = SelectCoinsBnB(GroupCoins(utxo_pool), target, 0); // Should exhaust\n+    BOOST_CHECK(result71);\n+    BOOST_CHECK(result71->GetSelectedValue() > target);\n     target = make_hard_case(14, utxo_pool);\n-    const auto result7 = SelectCoinsBnB(GroupCoins(utxo_pool), target, 0); // Should not exhaust\n-    BOOST_CHECK(result7);\n+    const auto result72 = SelectCoinsBnB(GroupCoins(utxo_pool), target, 0); // Should not exhaust\n+    BOOST_CHECK(result72);\n+    BOOST_CHECK_EQUAL(result72->GetSelectedValue(), target);\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n@@ -277,16 +279,6 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     ////////////////////\n     // Behavior tests //\n     ////////////////////\n-    // Select 1 Cent with pool of only greater than 5 Cent\n-    utxo_pool.clear();\n-    for (int i = 5; i <= 20; ++i) {\n-        add_coin(i * CENT, i, utxo_pool);\n-    }\n-    // Run 100 times, to make sure it is never finding a solution\n-    for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT));\n-    }\n-\n     // Make sure that effective value is working in AttemptSelection when BnB is used\n     CoinSelectionParams coin_selection_params_bnb(/* change_output_size= */ 0,\n                                                   /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(3000),"
      }
    ]
  },
  {
    "sha": "13f8663ec71c87a1498c2b344299d58fa0a8a73a",
    "node_id": "C_kwDOABII59oAKDEzZjg2NjNlYzcxYzg3YTE0OThjMmIzNDQyOTlkNThmYTBhOGE3M2E",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-11T00:24:44Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-11-01T08:44:13Z"
      },
      "message": "fees: Always round up fee calculated from a feerate\n\nWhen calculating the fee for a given tx size from a fee rate, we should\nalways round up to the next satoshi. Otherwise, if we round down (via\ntruncation), the calculated fee may result in a fee with a feerate\nslightly less than targeted.\n\nThis is particularly important for coin selection as a slightly lower\nfeerate than expected can result in a variety of issues.",
      "tree": {
        "sha": "1877cd4b6ef1166dc154f973cd1a655fa5658b53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1877cd4b6ef1166dc154f973cd1a655fa5658b53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f8663ec71c87a1498c2b344299d58fa0a8a73a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f8663ec71c87a1498c2b344299d58fa0a8a73a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f8663ec71c87a1498c2b344299d58fa0a8a73a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f8663ec71c87a1498c2b344299d58fa0a8a73a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f5fdfe8adbee148960a7d02e746a539fa591f91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5fdfe8adbee148960a7d02e746a539fa591f91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5fdfe8adbee148960a7d02e746a539fa591f91"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ce149067b76adfee85d1f1f44a5b14fb1b649287",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=13f8663ec71c87a1498c2b344299d58fa0a8a73a",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <tinyformat.h>\n \n+#include <cmath>\n+\n CFeeRate::CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes)\n {\n     const int64_t nSize{num_bytes};\n@@ -22,7 +24,9 @@ CAmount CFeeRate::GetFee(uint32_t num_bytes) const\n {\n     const int64_t nSize{num_bytes};\n \n-    CAmount nFee = nSatoshisPerK * nSize / 1000;\n+    // Be explicit that we're converting from a double to int64_t (CAmount) here.\n+    // We've previously had issues with the silent double->int64_t conversion.\n+    CAmount nFee{static_cast<CAmount>(std::ceil(nSatoshisPerK * nSize / 1000.0))};\n \n     if (nFee == 0 && nSize != 0) {\n         if (nSatoshisPerK > 0) nFee = CAmount(1);"
      },
      {
        "sha": "8ba896bb01fed960a6d84f806dc12b06c40d90c0",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=13f8663ec71c87a1498c2b344299d58fa0a8a73a",
        "patch": "@@ -48,6 +48,7 @@ class CFeeRate\n     CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes);\n     /**\n      * Return the fee in satoshis for the given size in bytes.\n+     * If the calculated fee would have fractional satoshis, then the returned fee will always be rounded up to the nearest satoshi.\n      */\n     CAmount GetFee(uint32_t num_bytes) const;\n     /**"
      },
      {
        "sha": "aa23d7167106deda20b0a20f7be397cee1d3a71d",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=13f8663ec71c87a1498c2b344299d58fa0a8a73a",
        "patch": "@@ -48,13 +48,13 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(-9e3));\n \n     feeRate = CFeeRate(123);\n-    // Truncates the result, if not integer\n+    // Rounds up the result, if not integer\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n     BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(1)); // Special case: returns 1 instead of 0\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(1));\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(14));\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(122), CAmount(15));\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(122));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(2));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(15));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(122), CAmount(16));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(123));\n     BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), CAmount(123));\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(1107));\n "
      },
      {
        "sha": "252a85c282283669aa54f33ca0246424cea4295b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f8663ec71c87a1498c2b344299d58fa0a8a73a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=13f8663ec71c87a1498c2b344299d58fa0a8a73a",
        "patch": "@@ -810,10 +810,10 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     // nDustThreshold = 182 * 3702 / 1000\n     dustRelayFee = CFeeRate(3702);\n     // dust:\n-    t.vout[0].nValue = 673 - 1;\n+    t.vout[0].nValue = 674 - 1;\n     CheckIsNotStandard(t, \"dust\");\n     // not dust:\n-    t.vout[0].nValue = 673;\n+    t.vout[0].nValue = 674;\n     CheckIsStandard(t);\n     dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n "
      },
      {
        "sha": "5807a92b9d12108be0aa631d3a1d23cd569d6f74",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f8663ec71c87a1498c2b344299d58fa0a8a73a/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f8663ec71c87a1498c2b344299d58fa0a8a73a/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=13f8663ec71c87a1498c2b344299d58fa0a8a73a",
        "patch": "@@ -193,7 +193,7 @@ def run_test(self):\n         assert_equal(\"psbt\" in res, True)\n \n         # create a transaction without change at the maximum fee rate, such that the output is still spendable:\n-        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.0008824})\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.0008823})\n         assert_equal(\"psbt\" in res, True)\n         assert_equal(res[\"fee\"], Decimal(\"0.00009706\"))\n "
      }
    ]
  }
]