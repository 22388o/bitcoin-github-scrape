[
  {
    "sha": "8441e5a92d9327f1f23cd9a95115af3ae2339293",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDQxZTVhOTJkOTMyN2YxZjIzY2Q5YTk1MTE1YWYzYWUyMzM5Mjkz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-24T21:46:40Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-26T05:43:00Z"
      },
      "message": "Suppress the mempool tx arrival time information leak.\n\nCurrently an attacker can poll mempool frequently to bypass\n trickling logic and trace a transaction through the network.\n This also wastes lots of bandwidth by causing the same huge\n invs to be sent over and over.\n\nThis change makes mempool not return results with an arrival\n time greater than the current minus 16 rounded down to a\n multiple of 16 seconds. This is a 16 to 32 second delay.\n\nIt also makes mempool calls return only responses which have\n not been INVed before (using the known inv mruset) and\n limits the mempool command to considering only the top 8192\n entries in the mempool.\n\nThis also introduces the constant MAX_SETINVENTORYKNOWN_SZ\n and sets it to 50,000 (large enough to hold the inventory\n for a maximum sized INV), which is a substantial increase\n from the current default of 1000.",
      "tree": {
        "sha": "98d347752e2fa1efbfb0cee9ada8191f4eea40b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98d347752e2fa1efbfb0cee9ada8191f4eea40b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8441e5a92d9327f1f23cd9a95115af3ae2339293",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8441e5a92d9327f1f23cd9a95115af3ae2339293",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8441e5a92d9327f1f23cd9a95115af3ae2339293",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8441e5a92d9327f1f23cd9a95115af3ae2339293/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b19fe277dd6208b80fea837adf9e64631b07f946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19fe277dd6208b80fea837adf9e64631b07f946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b19fe277dd6208b80fea837adf9e64631b07f946"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 47,
      "deletions": 23
    },
    "files": [
      {
        "sha": "841b7a5cc74710afae66f36bb15c65e9f759ee5f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 17,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8441e5a92d9327f1f23cd9a95115af3ae2339293",
        "patch": "@@ -4617,26 +4617,37 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == \"mempool\")\n     {\n-        LOCK2(cs_main, pfrom->cs_filter);\n \n-        std::vector<uint256> vtxid;\n-        mempool.queryHashes(vtxid);\n-        vector<CInv> vInv;\n-        BOOST_FOREACH(uint256& hash, vtxid) {\n-            CInv inv(MSG_TX, hash);\n-            CTransaction tx;\n-            bool fInMemPool = mempool.lookup(hash, tx);\n-            if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n-               (!pfrom->pfilter))\n-                vInv.push_back(inv);\n-            if (vInv.size() == MAX_INV_SZ) {\n-                pfrom->PushMessage(\"inv\", vInv);\n-                vInv.clear();\n+        //Put the mempool on a 16 to 32 second quantized time delay to suppress the arrival time information leak.\n+        //nTimeLastMempool is reset on filter updates because some wallets will update the filter and fetch right away again..\n+        int64_t rounded_time = (GetTime() - 16) & 0x7ffffffffffffff0LL;\n+        if (rounded_time > pfrom->nTimeLastMempool) {\n+            LOCK(cs_main);\n+            std::vector<uint256> vtxid;\n+            mempool.queryHashes(vtxid, 8192, rounded_time); // Limited to 8192 result before duplicate filtering.\n+            pfrom->nTimeLastMempool = rounded_time;\n+            LOCK2(pfrom->cs_filter, pfrom->cs_inventory);\n+            vector<CInv> vInv;\n+            BOOST_FOREACH(uint256& hash, vtxid) {\n+                CInv inv(MSG_TX, hash);\n+                if (!pfrom->setInventoryKnown.count(inv)) {\n+                    CTransaction tx;\n+                    bool fInMemPool = mempool.lookup(hash, tx);\n+                    if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n+                    if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n+                       (!pfrom->pfilter)) {\n+                        vInv.push_back(inv);\n+                        pfrom->setInventoryKnown.insert(inv);\n+                    }\n+                    if (vInv.size() == MAX_INV_SZ) {\n+                        pfrom->PushMessage(\"inv\", vInv);\n+                        vInv.clear();\n+                    }\n+                }\n             }\n+            if (vInv.size() > 0)\n+                pfrom->PushMessage(\"inv\", vInv);\n         }\n-        if (vInv.size() > 0)\n-            pfrom->PushMessage(\"inv\", vInv);\n     }\n \n \n@@ -4777,6 +4788,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             LOCK(pfrom->cs_filter);\n             delete pfrom->pfilter;\n+            pfrom->nTimeLastMempool = 0; //Reset last mempool time.\n             pfrom->pfilter = new CBloomFilter(filter);\n             pfrom->pfilter->UpdateEmptyFull();\n         }\n@@ -4795,6 +4807,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             Misbehaving(pfrom->GetId(), 100);\n         } else {\n+            pfrom->nTimeLastMempool = 0; //Reset last mempool last time.\n             LOCK(pfrom->cs_filter);\n             if (pfrom->pfilter)\n                 pfrom->pfilter->insert(vData);\n@@ -4808,6 +4821,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     {\n         LOCK(pfrom->cs_filter);\n         delete pfrom->pfilter;\n+        pfrom->nTimeLastMempool = 0; //Reset last mempool time.\n         pfrom->pfilter = new CBloomFilter();\n         pfrom->fRelayTxes = true;\n     }"
      },
      {
        "sha": "855cf8c7975b17aead774a8f97a1e4ba7ffe4892",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8441e5a92d9327f1f23cd9a95115af3ae2339293",
        "patch": "@@ -2343,7 +2343,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addrKnown(5000, 0.001),\n-    setInventoryKnown(SendBufferSize() / 1000)\n+    setInventoryKnown(MAX_SETINVENTORYKNOWN_SZ)\n {\n     nServices = 0;\n     hSocket = hSocketIn;\n@@ -2352,6 +2352,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n+    nTimeLastMempool = 0;\n     nTimeConnected = GetTime();\n     nTimeOffset = 0;\n     addr = addrIn;"
      },
      {
        "sha": "9a53d19c59429fdaca4d6c050ddc7c35e83c0104",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8441e5a92d9327f1f23cd9a95115af3ae2339293",
        "patch": "@@ -64,6 +64,8 @@ static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n+/** setInventoryKnown size. */\n+static const unsigned int MAX_SETINVENTORYKNOWN_SZ = MAX_INV_SZ;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n@@ -324,6 +326,7 @@ class CNode\n \n     int64_t nLastSend;\n     int64_t nLastRecv;\n+    int64_t nTimeLastMempool;\n     int64_t nTimeConnected;\n     int64_t nTimeOffset;\n     CAddress addr;"
      },
      {
        "sha": "c498607df58df9103dfbdd8e8579134a27db5132",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=8441e5a92d9327f1f23cd9a95115af3ae2339293",
        "patch": "@@ -218,7 +218,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n     else\n     {\n         vector<uint256> vtxid;\n-        mempool.queryHashes(vtxid);\n+        mempool.queryHashes(vtxid, std::numeric_limits<size_t>::max(), std::numeric_limits<int64_t>::max());\n \n         UniValue a(UniValue::VARR);\n         BOOST_FOREACH(const uint256& hash, vtxid)"
      },
      {
        "sha": "85ee050e1962d856de869cc2d4f064ca1d2eac9d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8441e5a92d9327f1f23cd9a95115af3ae2339293",
        "patch": "@@ -677,14 +677,20 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     assert(innerUsage == cachedInnerUsage);\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(vector<uint256>& vtxid, size_t maxresults, int64_t maxtime)\n {\n     vtxid.clear();\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (indexed_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n-        vtxid.push_back(mi->GetTx().GetHash());\n+    size_t count = 0;\n+    //Doesn't use the time sorted index to avoid an information leak about when a transaction entered the mempool.\n+    for (indexed_transaction_set::iterator mi = mapTx.begin(); count < maxresults && mi != mapTx.end(); ++mi) {\n+        if (mi->GetTime() < maxtime) {\n+            vtxid.push_back(mi->GetTx().GetHash());\n+            count++;\n+        }\n+    }\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const"
      },
      {
        "sha": "48d1f59f7b62d97370272beb3a8065cea49394fa",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8441e5a92d9327f1f23cd9a95115af3ae2339293/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=8441e5a92d9327f1f23cd9a95115af3ae2339293",
        "patch": "@@ -376,7 +376,7 @@ class CTxMemPool\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n-    void queryHashes(std::vector<uint256>& vtxid);\n+    void queryHashes(std::vector<uint256>& vtxid, size_t maxresults, int64_t maxtime);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);"
      }
    ]
  }
]