gmaxwell,2016-12-19T07:40:19Z,"could we have some benchmarks do demonstrate the gains from this? though I don't doubt them, this is a fair amount of code...  and benchmarks would be important for regression testing this important behavior.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-267900573,267900573,
TheBlueMatt,2016-12-19T07:58:11Z,"Which part, specifically, would you like to see benchmarks on?\n\nOn December 18, 2016 11:40:22 PM PST, Gregory Maxwell <notifications@github.com> wrote:\n>could we have some benchmarks do demonstrate the gains from this?\n>though I don't doubt them, this is a fair amount of code...  and\n>benchmarks would be important for regression testing this important\n>behavior.\n>\n>-- \n>You are receiving ",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-267903170,267903170,
gmaxwell,2016-12-19T08:41:45Z,latency to relay a block across many connections would be the obvious thing?,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-267910206,267910206,
morcos,2016-12-21T16:50:46Z,"Is there ever a case where we would accept a block ourselves but we wouldn't want to immediately announce it?  I looked through all the places we call AcceptBlock/ProcessNewBlock and couldn't immediately see a problem, but want to make sure we think about it carefully.  I noticed this because I found it odd you had to change the preciousblock.py test.   BTW, a better change there may just be to al",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-268573271,268573271,
morcos,2016-12-21T19:54:13Z,"This seems like its going to be super awesome.\ncode review ACK modulo nits, doing some testing...",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-268622816,268622816,
TheBlueMatt,2016-12-22T08:08:23Z,"Fixed comments, note that the SendBlockTransactions function seems a bit odd now, but the goal longer-term is to move messages into their own processing groups, where such functions will be really sane.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-268742659,268742659,
gmaxwell,2016-12-22T12:36:48Z,"Perhaps Newpowvalidblock should be gated on there actually being any peers that request a compact block from us?  Otherwise we'll go through the work of constructing a compact block there only to send it to no one. :)\n\nThoughts on caching the compact block like you cache the block?  You would want it for non-pref peers that request it after you announce the header... and it's reasonably small.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-268791150,268791150,
morcos,2016-12-22T15:25:24Z,utACK 5bc61fa,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-268822139,268822139,
TheBlueMatt,2016-12-22T23:31:41Z,"@gmaxwell, well those requests are somewhat contradictory, so I picked the cache-compact-representation option :p.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-268913893,268913893,
gmaxwell,2016-12-23T18:08:47Z,"@TheBlueMatt not so! as it could skip processing when there are no peers requesting, and update caches any time it processes!\n\nI don't think it matters except in one case:\n\nIsolated mining node with no HB requesting peers, constructing the short block earlier will delay block validation which delays updating the create new block.  I'm guessing the delay is <10ms, so probably inconsequentia",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269026347,269026347,
TheBlueMatt,2016-12-23T18:18:36Z,"Yea, I'm not worried about the processing time for calling that once. Long term I'd like to run most of the CValidationInterface callbacks into background threads, but that's probably an 0.15-targeted thing.\n\nOn December 23, 2016 1:08:51 PM EST, Gregory Maxwell <notifications@github.com> wrote:\n>@TheBlueMatt not so! as it could skip processing when there are no\n>peers requesting, and update ca",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269027470,269027470,
TheBlueMatt,2016-12-24T16:18:32Z,Squashed with no diff-tree.,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269090520,269090520,
TheBlueMatt,2016-12-29T22:18:19Z,Fixed one of @theuni's comments and rebased. Diff is https://0bin.net/paste/lZfeK4vg0ZdebkqX#AJKsFyZ3Ai1oiaRiUt-1S0tjFK9wrZ70aP74IepwbsY,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269702309,269702309,
gmaxwell,2016-12-30T02:48:59Z,"One behavior that should be mentioned is that caching means that if I am connected to a since node via multiple channels, it will identify itself as the same node by using the same salt across them.  The salt sharing is something the protocol was carefully designed to enable, and there are _many_ other ways that a node identifies itself as equal on different links: so I don't consider it a concern",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269725290,269725290,
morcos,2016-12-30T17:40:04Z,"re-ACK 8022035\n\nhuge improvement to cache the cmpctblock, reduces time to relay cmpctblock to each additional peer from 30ms to 1ms.\n\n\n",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269799728,269799728,
morcos,2016-12-31T00:29:26Z,"Mentioned on IRC, combining this with #9400 can lead to intermittent failures of `sendheaders.py`\n\n#9400 causes the node announcing the reorg in that test to be a HB peer, and block requests generated by FindNextBlocksToDownload in response to cmpctblocks relayed by NewPoWValidBlock are in a race condition against the tip being updated in the announcing peer.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269838990,269838990,
TheBlueMatt,2016-12-31T16:16:16Z,"As @morcos points out, this needs a bit more thought - currently you might announce a compact block in HB mode, the receiving peer might then, for various reasons, request a response in the form of a full block instead of as a getblocktxn (eg #8800). At this point, you unlock cs_main prior to ActivateBestChain in ProcessNewBlock, allowing the other peer's block request the be processed, but you wi",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269871618,269871618,
TheBlueMatt,2017-01-01T03:32:37Z,Pushed a new commit which appears to fix @morcos' test failures in #9447. See the BIP clarifications at https://github.com/bitcoin/bips/pull/486 for associated info.,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269891019,269891019,
sipa,2017-01-01T17:59:22Z,I wish that we had a way to announce that we accept blocks that are not\nfully validated (as long as they satisfy PoW and size limits). Then compact\nblocks could be orthogonal to the choice of relay before/after validation.\n,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269912703,269912703,
morcos,2017-01-02T03:30:35Z,"ACK 73817e2\n\nEDIT (ACK contingent on @sdaftuar's 3 proposed changes)",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269931960,269931960,
instagibbs,2017-01-03T16:45:38Z,utACK https://github.com/bitcoin/bitcoin/commit/73817e22946d0f00957b18443635656ec40914ad,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270160258,270160258,
sdaftuar,2017-01-03T18:54:00Z,"> Is there ever a case where we would accept a block ourselves but we wouldn't want to immediately announce it?\n\n@morcos @TheBlueMatt One area worth some thought is how to handle block relay while processing a reorg.  Before this PR, we wouldn't relay any block with less work than our tip unless we had completed a reorg to a new tip.  After this PR, I believe we would relay blocks with work le",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270192336,270192336,
sdaftuar,2017-01-03T21:03:09Z,"Actually I think there are some problems with relaying blocks that have work equal to our tip.  Conceptually, we shouldn't be helping our peers end up on a tip that is competing with ours, so even though we download blocks at the same work as our tip, I think it's important that we not relay such blocks.\n\nMore practically, in the CMPCTBLOCK handling code, we call `UpdateBlockAvailability()` af",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270223870,270223870,
TheBlueMatt,2017-01-04T01:59:18Z,"Pushed fixes for @sdaftuar's comments, note that travis should fail the second-to-last-one as I added a test for the bug identified.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270277250,270277250,
TheBlueMatt,2017-01-04T20:57:58Z,"Rebased to clean up merge conflict, squashing the fixup commits. No changes to code.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270484511,270484511,
TheBlueMatt,2017-01-05T15:35:16Z,"Added a check that we only ever fast-announce once per block height, see https://0bin.net/paste/f1-cJq66rGul-VBY#vUW-L7QZR4+e8u/vx1ZNk1x3+5qn50ysFOghGC1gyLy\nI dont think this is strictly required, but it simplifies review significantly and is likely a better behavior anyway, since you can never reconstruct two compact blocks at the same height reasonable right now anyway.\n\nAlso fixed a rebas",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270672747,270672747,
morcos,2017-01-06T18:19:20Z,"I'm the boy who cried ACK (4 times already) on this PR, so I'll refrain from repeating it again, but your last changes look good to me and I feel like all open concerns are addressed.\n\nI'm going to put it into action combined with #9441 on a few nodes.\n",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-270967777,270967777,
morcos,2017-01-07T03:26:58Z,"@TheBlueMatt What do you think about making the LogPrints say:\n`sending header-and-ids 0000myluckyhash to peer=8888`\ninstead of\n`sending header-and-ids 0000myluckyhash to peer 8888`\n\nYou only add one of those in this PR, the other LogPrint for header-and-ids does the same thing, but its a bit annoying that they are formatted differently than other net debug messages.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-271059566,271059566,
TheBlueMatt,2017-01-07T16:49:54Z,@morcos did it separately in #9486.,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-271094864,271094864,
TheBlueMatt,2017-01-10T16:31:23Z,"The <memory> include is only unnecessary because I'm sure boost/shared_ptr includes it. It is appropriate to add because we're now using shared_ptrs in one of the functions.\n\nOn January 10, 2017 4:47:55 AM PST, ""Wladimir J. van der Laan"" <notifications@github.com> wrote:\n>laanwj commented on this pull request.\n>\n>\n>\n>> @@ -8,6 +8,7 @@\n> \n> #include <boost/signals2/signal.hpp>\n> #include ",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-271624299,271624299,
laanwj,2017-01-11T12:55:00Z,"Ok, fair enough.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-271861291,271861291,
laanwj,2017-01-11T12:59:35Z,utACK c1ae4fc,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-271862206,271862206,
theuni,2017-01-11T21:17:48Z,"utACK all except https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95670603. (see IMO we need a more general-purpose solution for fencing here, otherwise we're asking for future bugs.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-271997310,271997310,
TheBlueMatt,2017-01-12T20:17:11Z,"Address all of @sipa's comments, and added a comment to (hopefully) appease @theuni.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-272271470,272271470,
morcos,2017-01-12T21:38:28Z,"OK, I'm going for number 5!\n\ntested ACK c1ae4fc\nutACK 73666ad\n\nTo reemphasize, the caching in this PR provides a huge performance win.",https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-272291945,272291945,
theuni,2017-01-13T03:08:11Z,@TheBlueMatt Thanks for adding the comment.  utACK 73666ad05932429c860efe74eb388d212c152fc4.,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-272349737,272349737,
sdaftuar,2017-01-13T15:58:01Z,utACK 73666ad,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-272477759,272477759,
sipa,2017-01-13T20:41:08Z,utACK 73666ad05932429c860efe74eb388d212c152fc4,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-272542551,272542551,
TheBlueMatt,2017-01-13T20:50:45Z,Pushed one (hopefully last) commit which only adds two const's to net_processing at @sipa's request.,https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-272544681,272544681,
rebroad,2016-12-21T17:26:27Z,this chunk of code is duplicated elsewhere?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93482270,93482270,src/net_processing.cpp
morcos,2016-12-21T19:10:57Z,"maybe add ` LogPrint(""net"", ""%s sending header-and-ids %s to peer %d..`",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93500386,93500386,src/net_processing.cpp
morcos,2016-12-21T19:35:35Z,"shouldn't this be pindex->pprev?  I don't suppose it matters much, but I think you'll be thinking segwit activated 1 block early",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93504865,93504865,src/net_processing.cpp
TheBlueMatt,2016-12-22T08:07:21Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93580220,93580220,src/net_processing.cpp
TheBlueMatt,2016-12-22T08:07:25Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93580228,93580228,src/net_processing.cpp
TheBlueMatt,2016-12-22T08:07:31Z,"OK, DRY'd.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93580239,93580239,src/net_processing.cpp
gmaxwell,2016-12-23T22:27:38Z,I believe this needs a fDisconnect check.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93805927,93805927,src/net_processing.cpp
TheBlueMatt,2016-12-24T02:05:31Z,Fixed,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93811196,93811196,src/net_processing.cpp
rebroad,2016-12-27T00:06:01Z,@morcos don't you mean one block late?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r93887479,93887479,src/net_processing.cpp
theuni,2016-12-29T20:15:24Z,"Hmm, this is non-obvious to a caller. And it's especially bad that one of them relies on the const not actually being const :(\n\nMaybe return an updated index, or null in the case of failure? Or return a pair?",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94175781,94175781,src/validation.cpp
theuni,2016-12-29T20:34:44Z,Maybe teach ReadBlockFromDisk to read to a shared_ptr reference to avoid the temptation?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94177486,94177486,src/validation.cpp
theuni,2016-12-29T20:37:18Z,Or just use a new precursiveblock here with limited scope,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94177684,94177684,src/validation.cpp
TheBlueMatt,2016-12-29T20:41:37Z,"Really? I dont see anything non-obvious here? The caller passes in a reference to a const CBlockIndex*, and the function sets that element to the new CBlockIndex*, ie it is returning a const CBlockIndex*, not editing a CBlockIndex which was passed in.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94178076,94178076,src/validation.cpp
theuni,2016-12-29T20:53:25Z,"How about generating a set of to-be-sent nodes here, with cs_main scope-locked. Then pass the set into ForEachNode and send only to the matches?\n\nThat saves cs_main (or whatever lock) from being held for the duration, and opens the door to deduped sending.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94179029,94179029,src/net_processing.cpp
theuni,2016-12-29T21:04:09Z,"Make this a member of PeerLogicValidation, then you can use a weak_ptr for the global, and I think no locks are needed",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94179883,94179883,src/net_processing.cpp
TheBlueMatt,2016-12-29T21:11:05Z,AFICT the only difference is that we can skip calling connman->PushMessage....is connman->PushMessage slow enough to care?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94180406,94180406,src/net_processing.cpp
theuni,2016-12-29T21:11:56Z,No need to stay locked for PushMessage,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94180477,94180477,src/net_processing.cpp
theuni,2016-12-29T21:18:12Z,"You can avoid calling it for each node by iterating mapNodeState for the set up front.\n\nOne PushMessage is no concern, but avoiding it for the entire ForEachNode would be nice.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94181018,94181018,src/net_processing.cpp
theuni,2016-12-29T21:25:18Z,"Actually, nevermind. We can improve CConnman's interface for this kind of thing later.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94181609,94181609,src/net_processing.cpp
TheBlueMatt,2016-12-29T21:27:14Z,"Yup, that was my (too heavily implied) point :).",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94181763,94181763,src/net_processing.cpp
TheBlueMatt,2016-12-29T21:57:41Z,I'm confused as to exactly what you're suggesting here. I don't particularly want a weak_ptr because I do want to hold the latest block for responses for a while after the block is connected/broadcast.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94184557,94184557,src/net_processing.cpp
TheBlueMatt,2016-12-29T21:59:42Z,Is it slow enough to matter? After #9414 (and some std::atomic usage) we need to remove the cs_main lock completely here to make getblocktxn for the current head cs_main-free.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94184711,94184711,src/net_processing.cpp
TheBlueMatt,2016-12-29T22:16:44Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94186100,94186100,src/validation.cpp
theuni,2016-12-30T01:17:25Z,"These are the types of changes that make me nervous about shared_ptrs, because it gets easy to start stashing things that have no obvious lifetime constraint.\n\nI was suggesting that you hold the shared_ptr in the PeerLogicValidation class. You then use a global weak_ptr which is overwritten by each new block. Then at any random time you can use std::shared_ptr\<const CBlock\> bestblock = share",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94196147,94196147,src/net_processing.cpp
TheBlueMatt,2017-01-01T03:37:36Z,"Hmm...does this make it that much more obvious? We still have a shared_ptr which is overwritten in NewPoWValidBlock and other sites which take references to it to extend its lifetime. I can add a comment noting that users MUST NOT extend the lifetime significantly, would that be sufficient to address your concern?",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94279801,94279801,src/net_processing.cpp
rebroad,2017-01-01T10:27:27Z,`__func__` can be used here?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94282320,94282320,src/net_processing.cpp
TheBlueMatt,2017-01-01T15:35:17Z,I'm not sure that it can due to the use of the inline function - do you care to test what `__FUNC__` means on different compilers in this case?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94285460,94285460,src/net_processing.cpp
morcos,2017-01-01T17:44:16Z,"I tried that in my first patch to print this.  it printed ""operator ()""\n",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94286900,94286900,src/net_processing.cpp
morcos,2017-01-01T17:53:03Z,Just a note that we'll be calling this for every GETBLOCKS request.  But I suppose ActivateBestChain isn't too expensive in the common case.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94287013,94287013,src/net_processing.cpp
TheBlueMatt,2017-01-01T23:54:57Z,"Yea, its lightweight-enough that we cant really consider it a DoS issue (please review, but I'm pretty sure here), and its not like we care much about the performance of GETBLOCKS anymore...",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94290555,94290555,src/net_processing.cpp
ryanofsky,2017-01-03T17:31:47Z,"To avoid the const cast, you could do something like:\n\n```\n            CBlockIndex* pindex = nullptr;\n            if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n                return false;\n            }\n            *ppindex = pindex;\n```",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94446613,94446613,src/validation.cpp
sdaftuar,2017-01-03T18:21:06Z,"The cached compact block was built using wtxid's rather than txid's, so we have to check to see if the peer wants compact witness ids before we can use the cached version, no?",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94454479,94454479,src/net_processing.cpp
sdaftuar,2017-01-03T21:06:49Z,"I should think this through a bit more, but I believe the requirement that the block be VALID_SCRIPTS is stronger than is needed -- in particular, if two blocks arrive simultaneously, we might relay both before picking which of the two is our tip, and then gating ProcessGetData() on VALID_SCRIPTS will cause us to stall a peer who picked the other.\n\nPerhaps we should change VALID_SCRIPTS to VAL",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94483881,94483881,src/net_processing.cpp
morcos,2017-01-03T21:48:53Z,"@gmaxwell see this comment.  I think this would cover the case of needing to cache more than one block..\n",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94490873,94490873,src/net_processing.cpp
TheBlueMatt,2017-01-04T01:54:34Z,This seems like a rather large change (that I dont particularly want to do in this PR). Is it sufficient to not do the pre-forward unless the new block builds on our tip?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94519686,94519686,src/net_processing.cpp
morcos,2017-01-04T03:02:23Z,"commented on IRC, but no i think we need a fix here.\n\nOtherwise we can be in a situation where we stall a peer who asks for a block we just announced to them.\n\ni.e. We try and connect A and A' near simultaneously as new tips.  We announce both, but whichever gets connected first, the other we will stall requests for.  This can happen even without multi-threaded ProcessMessages via a race w",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94524054,94524054,src/net_processing.cpp
sdaftuar,2017-01-04T17:15:15Z,"I think it is safe to drop the VALID_SCRIPTS check altogether (ie no need to replace with any other validity check such as VALID_TRANSACTIONS as I suggested above) when we are setting the `send` variable below, and we don't need to call `ActivateBestChain()` here at all.  We are still adequately protected against fingerprinting attacks with the `GetBlockProofEquivalentTime()` check.\n\nWhen we a",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94624247,94624247,src/net_processing.cpp
sdaftuar,2017-01-04T17:16:48Z,"ping @sipa, please see above...",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94624470,94624470,src/net_processing.cpp
ryanofsky,2017-01-05T17:50:30Z,Might be good to release cs_most_recent_block in the else case during ReadBlockFromDisk.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r94816083,94816083,src/net_processing.cpp
sdaftuar,2017-01-06T19:25:43Z,"Ok after further thought and offline discussion, I retract my objection to leaving the VALID_SCRIPTS check in.\n\nMy original concern was that there were some race conditions where we might announce a block pre-validation, and then never test the block's validity, resulting in stalling block download to a peer for a valid block.  After the change to only do pre-validation announcements for a sin",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95003832,95003832,src/net_processing.cpp
laanwj,2017-01-10T12:47:51Z,This include is unnecessary,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95356716,95356716,src/validationinterface.h
sipa,2017-01-11T18:25:21Z,I prefer @ryanofsky's code.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95639720,95639720,src/validation.cpp
sipa,2017-01-11T20:03:31Z,Should we unlock cs_main before this call?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95659683,95659683,src/net_processing.cpp
sipa,2017-01-11T20:04:37Z,"I don't think we should be relying on indirect includes, and this file does directly use shared_ptr.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95659903,95659903,src/validationinterface.h
sipa,2017-01-11T20:25:47Z,"All it does is a FindMostWorkChain, which should be very cheap if we're already synced (return the end from setBlockIndexCandidates, and comparing it to chainActive).",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95664298,95664298,src/net_processing.cpp
sipa,2017-01-11T20:27:29Z,ActivateBestChain is usually called without holding cs_main (as it tries to release the lock in between activations if there are multiple). Is it necessary to call it within cs_main here?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95664608,95664608,src/net_processing.cpp
theuni,2017-01-11T20:59:35Z,"Mentioned on IRC as well:\n\nAn example of an unintended side-effect of this:\n- miner mines a block, hands it to ProcessNewBlock()\n- ProcessMessages thread simultaneously receives a GETBLOCKS\n- ProcessMessages calls ActivateBestChain _just_ after miner finishes AcceptBlock() and releases cs_main.\n- ConnectTip ends up getting called with a null block, activating the chain with the miner's",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95670603,95670603,src/net_processing.cpp
TheBlueMatt,2017-01-11T22:49:44Z,"We take cs_main again inside SendBlockTransactions, so I dont think its worth unlocking here.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95690606,95690606,src/net_processing.cpp
sipa,2017-01-11T22:54:46Z,"It probably doesn't matter too much here, but it's easier to reason about function that are only called with certain locks held or not held, and not both depending on the circumstances.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95691455,95691455,src/net_processing.cpp
TheBlueMatt,2017-01-11T22:57:49Z,"OK, changed.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95691982,95691982,src/validation.cpp
TheBlueMatt,2017-01-11T22:59:45Z,I hope to remove the cs_main in the function (and then not call it with cs_main) after #9419 + a few more changes.,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95692294,95692294,src/net_processing.cpp
TheBlueMatt,2017-01-12T18:57:35Z,"@sipa Yes, moved this one out of the cs_main, but the other one is much harder to move out of cs_main (luckily the one that handles getdatas is much less likely to have long-runtime because its specifically gated already).\n\n@theuni Will follow up on IRC, though I fixed the particular issue you mentioned (not that its a response to your general concern).",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r95859670,95859670,src/net_processing.cpp
sipa,2017-01-13T18:48:42Z,Can this be a `std::make_shared<const CBlockHeaderAndShortTxIDS>` (slightly easier to reason about thread safety when shared_ptr objects are const).,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r96049683,96049683,src/net_processing.cpp
sipa,2017-01-13T20:34:21Z,Idea for follow-up PR: cache the `CSerializedNetMsg` instead of the `CBlockHeaderAndShortTxIDs` (smaller and faster to process)?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r96069027,96069027,src/net_processing.cpp
TheBlueMatt,2017-01-13T20:50:26Z,"Ok, done.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r96071482,96071482,src/net_processing.cpp
sipa,2017-01-13T21:14:41Z,Also add const to the make_shared parameter?,https://github.com/bitcoin/bitcoin/pull/9375#discussion_r96075171,96075171,src/net_processing.cpp
TheBlueMatt,2017-01-13T21:28:26Z,"Ok, did so and squashed it into the previous commit.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r96077427,96077427,src/net_processing.cpp
rebroad,2017-01-17T14:21:45Z,"I'm struggling to understand why this is really needed, unless it is here to cater for a re-org that goes back more than 30 days as the logic below allows blocks to be sent that are not in the main chain but are less than 30 days old.",https://github.com/bitcoin/bitcoin/pull/9375#discussion_r96420463,96420463,src/net_processing.cpp
