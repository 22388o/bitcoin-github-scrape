[
  {
    "sha": "69c3bde4480ebe28095f4399a29f9fc73567a1d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWMzYmRlNDQ4MGViZTI4MDk1ZjQzOTlhMjlmOWZjNzM1NjdhMWQz",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-08T16:18:41Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-08T16:18:41Z"
      },
      "message": "Add some const declarations where they are appropriate.\n\nDeclare some arguments of functions as \"const\" pointers where they are\nnot meant to be modified.",
      "tree": {
        "sha": "e2cbc7e58cde1735371ea00c28628e9e054e6ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2cbc7e58cde1735371ea00c28628e9e054e6ba3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f66ce44abdc44ddbff892720d5b85f6a95436d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "bfae0d7f8ca7e0a53c1a361c17c74242b0614ff2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -1035,7 +1035,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n // CBlock and CBlockIndex\n //\n \n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1520,7 +1520,7 @@ static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const CO\n     return fClean;\n }\n \n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -2077,7 +2077,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *pblock) {\n+bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2209,7 +2209,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n+static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2278,7 +2278,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     const CChainParams& chainParams = Params();\n@@ -2749,7 +2749,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     return true;\n }\n \n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n@@ -2826,7 +2826,7 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n     bool checked = CheckBlock(*pblock, state);"
      },
      {
        "sha": "a78a589e1626d45be058740536679aa9201b63f0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -142,7 +142,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -179,7 +179,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -335,7 +335,7 @@ class CScriptCheck\n \n \n /** Functions for disk access for blocks */\n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n@@ -346,7 +346,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n  *  will be true if no problems were found. Otherwise, the return value will be false in case\n  *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n@@ -363,7 +363,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n \n "
      },
      {
        "sha": "4172266067440e21771742cb540559627c83ca68",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -352,7 +352,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -409,7 +409,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n+static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));"
      },
      {
        "sha": "7e0e58d54013c91654d2e50677b0cf157de871f9",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -29,7 +29,7 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      }
    ]
  }
]