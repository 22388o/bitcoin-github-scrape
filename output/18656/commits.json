[
  {
    "sha": "0acaefa270499068121b16921a389792439d7231",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWNhZWZhMjcwNDk5MDY4MTIxYjE2OTIxYTM4OTc5MjQzOWQ3MjMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:28:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T18:26:55Z"
      },
      "message": "Add Make Unsigned Tx button instead of changing Send's behavior\n\nInstead of changing Send to make an unsigned tx for wallets with\nprivate keys disabled, have a separate button for that functionality\nand disable Send for such wallets.",
      "tree": {
        "sha": "57bf29eaac7a3bccee6eb36b8e8266961c4f590e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57bf29eaac7a3bccee6eb36b8e8266961c4f590e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0acaefa270499068121b16921a389792439d7231",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0acaefa270499068121b16921a389792439d7231",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0acaefa270499068121b16921a389792439d7231",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0acaefa270499068121b16921a389792439d7231/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64139803f1225dab26197a20314109d37fa87d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64139803f1225dab26197a20314109d37fa87d5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64139803f1225dab26197a20314109d37fa87d5f"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 124,
      "deletions": 75
    },
    "files": [
      {
        "sha": "c0006488d316c87a949b065f901da7b1bbd59c2d",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0acaefa270499068121b16921a389792439d7231/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0acaefa270499068121b16921a389792439d7231/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=0acaefa270499068121b16921a389792439d7231",
        "patch": "@@ -1131,6 +1131,32 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"makeUnsignedButton\">\n+       <property name=\"minimumSize\">\n+        <size>\n+         <width>150</width>\n+         <height>0</height>\n+        </size>\n+       </property>\n+       <property name=\"toolTip\">\n+        <string>Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline wallet, or a PSBT-compatible hardware wallet.</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>Cr&amp;eate Unsigned</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/send</normaloff>:/icons/send</iconset>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+       <property name=\"default\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"clearButton\">\n        <property name=\"sizePolicy\">"
      },
      {
        "sha": "4920fdbe57a50c9e48e4251ab9665093952034f2",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 71,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0acaefa270499068121b16921a389792439d7231/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0acaefa270499068121b16921a389792439d7231/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=0acaefa270499068121b16921a389792439d7231",
        "patch": "@@ -67,10 +67,12 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         ui->addButton->setIcon(QIcon());\n         ui->clearButton->setIcon(QIcon());\n         ui->sendButton->setIcon(QIcon());\n+        ui->makeUnsignedButton->setIcon(QIcon());\n     } else {\n         ui->addButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/add\"));\n         ui->clearButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/remove\"));\n         ui->sendButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/send\"));\n+        ui->makeUnsignedButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/send\"));\n     }\n \n     GUIUtil::setupAddressWidget(ui->lineEditCoinControlChange, this);\n@@ -188,8 +190,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         ui->optInRBF->setCheckState(Qt::Checked);\n \n         if (model->wallet().privateKeysDisabled()) {\n-            ui->sendButton->setText(tr(\"Cr&eate Unsigned\"));\n-            ui->sendButton->setToolTip(tr(\"Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n+            ui->sendButton->setDisabled(true);\n         }\n \n         // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n@@ -219,7 +220,7 @@ SendCoinsDialog::~SendCoinsDialog()\n     delete ui;\n }\n \n-bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text)\n+bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text, bool make_psbt)\n {\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n@@ -266,7 +267,7 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n \n     updateCoinControlState(ctrl);\n \n-    prepareStatus = model->prepareTransaction(*m_current_transaction, ctrl);\n+    prepareStatus = model->prepareTransaction(*m_current_transaction, ctrl, !make_psbt /* sign */);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -306,14 +307,14 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n         formatted.append(recipientElement);\n     }\n \n-    if (model->wallet().privateKeysDisabled()) {\n+    if (make_psbt) {\n         question_string.append(tr(\"Do you want to draft this transaction?\"));\n     } else {\n         question_string.append(tr(\"Are you sure you want to send?\"));\n     }\n \n     question_string.append(\"<br /><span style='font-size:10pt;'>\");\n-    if (model->wallet().privateKeysDisabled()) {\n+    if (make_psbt) {\n         question_string.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can save or copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n     } else {\n         question_string.append(tr(\"Please, review your transaction.\"));\n@@ -376,11 +377,11 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n \n     QString question_string, informative_text, detailed_text;\n-    if (!PrepareSendText(question_string, informative_text, detailed_text)) return;\n+    if (!PrepareSendText(question_string, informative_text, detailed_text, false /* make_psbt */)) return;\n     assert(m_current_transaction);\n \n-    const QString confirmation = model->wallet().privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n-    const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Create Unsigned\") : tr(\"Send\");\n+    const QString confirmation = tr(\"Confirm send coins\");\n+    const QString confirmButtonText = tr(\"Send\");\n     SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n@@ -391,68 +392,13 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    bool send_failure = false;\n-    if (model->wallet().privateKeysDisabled()) {\n-        CMutableTransaction mtx = CMutableTransaction{*(m_current_transaction->getWtx())};\n-        PartiallySignedTransaction psbtx(mtx);\n-        bool complete = false;\n-        const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n-        assert(!complete);\n-        assert(err == TransactionError::OK);\n-        // Serialize the PSBT\n-        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << psbtx;\n-        GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n-        QMessageBox msgBox;\n-        msgBox.setText(\"Unsigned Transaction\");\n-        msgBox.setInformativeText(\"The PSBT has been copied to the clipboard. You can also save it.\");\n-        msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard);\n-        msgBox.setDefaultButton(QMessageBox::Discard);\n-        switch (msgBox.exec()) {\n-        case QMessageBox::Save: {\n-            QString selectedFilter;\n-            QString fileNameSuggestion = \"\";\n-            bool first = true;\n-            for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients()) {\n-                if (!first) {\n-                    fileNameSuggestion.append(\" - \");\n-                }\n-                QString labelOrAddress = rcp.label.isEmpty() ? rcp.address : rcp.label;\n-                QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n-                fileNameSuggestion.append(labelOrAddress + \"-\" + amount);\n-                first = false;\n-            }\n-            fileNameSuggestion.append(\".psbt\");\n-            QString filename = GUIUtil::getSaveFileName(this,\n-                tr(\"Save Transaction Data\"), fileNameSuggestion,\n-                tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selectedFilter);\n-            if (filename.isEmpty()) {\n-                return;\n-            }\n-            std::ofstream out(filename.toLocal8Bit().data());\n-            out << ssTx.str();\n-            out.close();\n-            Q_EMIT message(tr(\"PSBT saved\"), \"PSBT saved to disk\", CClientUIInterface::MSG_INFORMATION);\n-            break;\n-        }\n-        case QMessageBox::Discard:\n-            break;\n-        default:\n-            assert(false);\n-        }\n-    } else {\n-        // now send the prepared transaction\n-        WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n-        // process sendStatus and on error generate message shown to user\n-        processSendCoinsReturn(sendStatus);\n+    // now send the prepared transaction\n+    WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n+    // process sendStatus and on error generate message shown to user\n+    processSendCoinsReturn(sendStatus);\n \n-        if (sendStatus.status == WalletModel::OK) {\n-            Q_EMIT coinsSent(m_current_transaction->getWtx()->GetHash());\n-        } else {\n-            send_failure = true;\n-        }\n-    }\n-    if (!send_failure) {\n+    if (sendStatus.status == WalletModel::OK) {\n+        Q_EMIT coinsSent(m_current_transaction->getWtx()->GetHash());\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n@@ -461,6 +407,81 @@ void SendCoinsDialog::on_sendButton_clicked()\n     m_current_transaction.reset();\n }\n \n+void SendCoinsDialog::on_makeUnsignedButton_clicked()\n+{\n+    if(!model || !model->getOptionsModel())\n+        return;\n+\n+    QString question_string, informative_text, detailed_text;\n+    if (!PrepareSendText(question_string, informative_text, detailed_text, true /* make psbt */)) return;\n+    assert(m_current_transaction);\n+\n+    const QString confirmation = tr(\"Confirm transaction proposal\");\n+    const QString confirmButtonText = tr(\"Create Unsigned\");\n+    SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n+    confirmationDialog.exec();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n+\n+    if(retval != QMessageBox::Yes)\n+    {\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    CMutableTransaction mtx = CMutableTransaction{*(m_current_transaction->getWtx())};\n+    PartiallySignedTransaction psbtx(mtx);\n+    bool complete = false;\n+    const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n+    assert(!complete);\n+    assert(err == TransactionError::OK);\n+    // Serialize the PSBT\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    QMessageBox msgBox;\n+    msgBox.setText(\"Unsigned Transaction\");\n+    msgBox.setInformativeText(\"The PSBT has been copied to the clipboard. You can also save it.\");\n+    msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard);\n+    msgBox.setDefaultButton(QMessageBox::Discard);\n+    switch (msgBox.exec()) {\n+    case QMessageBox::Save: {\n+        QString selectedFilter;\n+        QString fileNameSuggestion = \"\";\n+        bool first = true;\n+        for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients()) {\n+            if (!first) {\n+                fileNameSuggestion.append(\" - \");\n+            }\n+            QString labelOrAddress = rcp.label.isEmpty() ? rcp.address : rcp.label;\n+            QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n+            fileNameSuggestion.append(labelOrAddress + \"-\" + amount);\n+            first = false;\n+        }\n+        fileNameSuggestion.append(\".psbt\");\n+        QString filename = GUIUtil::getSaveFileName(this,\n+            tr(\"Save Transaction Data\"), fileNameSuggestion,\n+            tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selectedFilter);\n+        if (filename.isEmpty()) {\n+            return;\n+        }\n+        std::ofstream out(filename.toLocal8Bit().data());\n+        out << ssTx.str();\n+        out.close();\n+        Q_EMIT message(tr(\"PSBT saved\"), \"PSBT saved to disk\", CClientUIInterface::MSG_INFORMATION);\n+        break;\n+    }\n+    case QMessageBox::Discard:\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    accept();\n+    CoinControlDialog::coinControl()->UnSelectAll();\n+    coinControlUpdateLabels();\n+    fNewRecipientAllowed = true;\n+    m_current_transaction.reset();\n+}\n+\n void SendCoinsDialog::clear()\n {\n     m_current_transaction.reset();\n@@ -544,7 +565,8 @@ QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)\n         }\n     }\n     QWidget::setTabOrder(prev, ui->sendButton);\n-    QWidget::setTabOrder(ui->sendButton, ui->clearButton);\n+    QWidget::setTabOrder(ui->sendButton, ui->makeUnsignedButton);\n+    QWidget::setTabOrder(ui->makeUnsignedButton, ui->clearButton);\n     QWidget::setTabOrder(ui->clearButton, ui->addButton);\n     return ui->addButton;\n }"
      },
      {
        "sha": "70d252c62eafc4040efbc7ae8d33a55e13a2f22e",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0acaefa270499068121b16921a389792439d7231/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0acaefa270499068121b16921a389792439d7231/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=0acaefa270499068121b16921a389792439d7231",
        "patch": "@@ -71,13 +71,14 @@ public Q_SLOTS:\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     // Format confirmation message\n-    bool PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text);\n+    bool PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text, bool make_psbt);\n     void updateFeeMinimizedLabel();\n     // Update the passed in CCoinControl with state from the GUI\n     void updateCoinControlState(CCoinControl& ctrl);\n \n private Q_SLOTS:\n     void on_sendButton_clicked();\n+    void on_makeUnsignedButton_clicked();\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n     void removeEntry(SendCoinsEntry* entry);"
      },
      {
        "sha": "3ff4039e455888a79570fce1a517be223c1f5d55",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0acaefa270499068121b16921a389792439d7231/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0acaefa270499068121b16921a389792439d7231/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0acaefa270499068121b16921a389792439d7231",
        "patch": "@@ -131,7 +131,7 @@ bool WalletModel::validateAddress(const QString &address)\n     return IsValidDestinationString(address.toStdString());\n }\n \n-WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)\n+WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl, bool sign)\n {\n     CAmount total = 0;\n     bool fSubtractFeeFromAmount = false;\n@@ -188,7 +188,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         auto& newTx = transaction.getWtx();\n-        newTx = m_wallet->createTransaction(vecSend, coinControl, !wallet().privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n+        newTx = m_wallet->createTransaction(vecSend, coinControl, sign, nChangePosRet, nFeeRequired, strFailReason);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && newTx)\n             transaction.reassignAmounts(nChangePosRet);"
      },
      {
        "sha": "9e047809b5b22b74789ded895c5e2dbbb02dcc90",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0acaefa270499068121b16921a389792439d7231/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0acaefa270499068121b16921a389792439d7231/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=0acaefa270499068121b16921a389792439d7231",
        "patch": "@@ -99,7 +99,7 @@ class WalletModel : public QObject\n     };\n \n     // prepare transaction for getting txfee before sending coins\n-    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl);\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl, bool sign);\n \n     // Send coins to a list of recipients\n     SendCoinsReturn sendCoins(WalletModelTransaction &transaction);"
      }
    ]
  }
]