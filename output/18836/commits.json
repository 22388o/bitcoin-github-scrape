[
  {
    "sha": "842ae3842df489f1b8d68e67a234788966218184",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDJhZTM4NDJkZjQ4OWYxYjhkNjhlNjdhMjM0Nzg4OTY2MjE4MTg0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-29T18:48:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-19T04:14:38Z"
      },
      "message": "wallet: Add utility method for CanSupportFeature",
      "tree": {
        "sha": "a286b538fb449090f2b894e5c0b32110a554bb07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a286b538fb449090f2b894e5c0b32110a554bb07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/842ae3842df489f1b8d68e67a234788966218184",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842ae3842df489f1b8d68e67a234788966218184",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/842ae3842df489f1b8d68e67a234788966218184",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842ae3842df489f1b8d68e67a234788966218184/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1e0359618e3a66d0156d2b0a4702bc55f957a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1e0359618e3a66d0156d2b0a4702bc55f957a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1e0359618e3a66d0156d2b0a4702bc55f957a3f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fcff0c557bbc80bc7697c94ab20f608c01d82b7b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842ae3842df489f1b8d68e67a234788966218184/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842ae3842df489f1b8d68e67a234788966218184/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=842ae3842df489f1b8d68e67a234788966218184",
        "patch": "@@ -801,7 +801,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool IsTrusted(const CWalletTx& wtx, std::set<uint256>& trusted_parents) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return IsFeatureSupported(nWalletMaxVersion, wf); }\n \n     /**\n      * populate vCoins with vector of available COutputs."
      },
      {
        "sha": "9ac90a21ca6e40a8dfe3174cce7a0e0eb895af0e",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842ae3842df489f1b8d68e67a234788966218184/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842ae3842df489f1b8d68e67a234788966218184/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=842ae3842df489f1b8d68e67a234788966218184",
        "patch": "@@ -70,3 +70,8 @@ std::vector<fs::path> ListWalletDir()\n \n     return paths;\n }\n+\n+bool IsFeatureSupported(int wallet_version, int feature_version)\n+{\n+    return wallet_version >= feature_version;\n+}"
      },
      {
        "sha": "b0ab76fc3113205cd0690bd08e666223765f6e41",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842ae3842df489f1b8d68e67a234788966218184/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842ae3842df489f1b8d68e67a234788966218184/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=842ae3842df489f1b8d68e67a234788966218184",
        "patch": "@@ -29,7 +29,7 @@ enum WalletFeature\n     FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL\n };\n \n-\n+bool IsFeatureSupported(int wallet_version, int feature_version);\n \n enum WalletFlags : uint64_t {\n     // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown"
      }
    ]
  },
  {
    "sha": "5f720544f34dedf75b063b962845fa8eca604514",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjcyMDU0NGYzNGRlZGY3NWIwNjNiOTYyODQ1ZmE4ZWNhNjA0NTE0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-29T20:58:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-19T04:14:38Z"
      },
      "message": "wallet: Add GetClosestWalletFeature function\n\nGiven a version number, get the closest supported WalletFeature\nfor a version number.",
      "tree": {
        "sha": "a59e9dd8ae7ad9f4232f2670ae7c8bd5540a785b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a59e9dd8ae7ad9f4232f2670ae7c8bd5540a785b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f720544f34dedf75b063b962845fa8eca604514",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f720544f34dedf75b063b962845fa8eca604514",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f720544f34dedf75b063b962845fa8eca604514",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f720544f34dedf75b063b962845fa8eca604514/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "842ae3842df489f1b8d68e67a234788966218184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842ae3842df489f1b8d68e67a234788966218184",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/842ae3842df489f1b8d68e67a234788966218184"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0b7cf692bac2d1e955ea03770999fb6cc8b16aad",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f720544f34dedf75b063b962845fa8eca604514/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f720544f34dedf75b063b962845fa8eca604514/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=5f720544f34dedf75b063b962845fa8eca604514",
        "patch": "@@ -75,3 +75,16 @@ bool IsFeatureSupported(int wallet_version, int feature_version)\n {\n     return wallet_version >= feature_version;\n }\n+\n+WalletFeature GetClosestWalletFeature(int version)\n+{\n+    if (version >= FEATURE_LATEST) return FEATURE_LATEST;\n+    if (version >= FEATURE_PRE_SPLIT_KEYPOOL) return FEATURE_PRE_SPLIT_KEYPOOL;\n+    if (version >= FEATURE_NO_DEFAULT_KEY) return FEATURE_NO_DEFAULT_KEY;\n+    if (version >= FEATURE_HD_SPLIT) return FEATURE_HD_SPLIT;\n+    if (version >= FEATURE_HD) return FEATURE_HD;\n+    if (version >= FEATURE_COMPRPUBKEY) return FEATURE_COMPRPUBKEY;\n+    if (version >= FEATURE_WALLETCRYPT) return FEATURE_WALLETCRYPT;\n+    if (version >= FEATURE_BASE) return FEATURE_BASE;\n+    return static_cast<WalletFeature>(0);\n+}"
      },
      {
        "sha": "27521abd81ce4652ec4d9413d248727394f2be68",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f720544f34dedf75b063b962845fa8eca604514/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f720544f34dedf75b063b962845fa8eca604514/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=5f720544f34dedf75b063b962845fa8eca604514",
        "patch": "@@ -30,6 +30,7 @@ enum WalletFeature\n };\n \n bool IsFeatureSupported(int wallet_version, int feature_version);\n+WalletFeature GetClosestWalletFeature(int version);\n \n enum WalletFlags : uint64_t {\n     // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown"
      }
    ]
  },
  {
    "sha": "bd7398cc6258c258e9f4411c50630ec4a552341b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDczOThjYzYyNThjMjU4ZTlmNDQxMWM1MDYzMGVjNGE1NTIzNDFi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-29T21:00:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:10:23Z"
      },
      "message": "wallet: have ScriptPubKeyMan::Upgrade check against the new version\n\nInstead of using CanSupportFeature and relying on nWalletMaxVersion,\ntake the new version we are upgrading to and use IsSupportedFeature\nwith that and the previous wallet version.",
      "tree": {
        "sha": "210adf4d98bc95729d11c4bdd6ac367b37b14c95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/210adf4d98bc95729d11c4bdd6ac367b37b14c95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd7398cc6258c258e9f4411c50630ec4a552341b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7398cc6258c258e9f4411c50630ec4a552341b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd7398cc6258c258e9f4411c50630ec4a552341b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7398cc6258c258e9f4411c50630ec4a552341b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f720544f34dedf75b063b962845fa8eca604514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f720544f34dedf75b063b962845fa8eca604514",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f720544f34dedf75b063b962845fa8eca604514"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "149e8a4c9bcc12f9def68fb0b600c69f27802f72",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7398cc6258c258e9f4411c50630ec4a552341b/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7398cc6258c258e9f4411c50630ec4a552341b/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=bd7398cc6258c258e9f4411c50630ec4a552341b",
        "patch": "@@ -438,12 +438,12 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal) const\n     return keypool_has_keys;\n }\n \n-bool LegacyScriptPubKeyMan::Upgrade(int prev_version, bilingual_str& error)\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, bilingual_str& error)\n {\n     LOCK(cs_KeyStore);\n     bool hd_upgrade = false;\n     bool split_upgrade = false;\n-    if (m_storage.CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+    if (IsFeatureSupported(new_version, FEATURE_HD) && !IsHDEnabled()) {\n         WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n         m_storage.SetMinVersion(FEATURE_HD);\n \n@@ -453,7 +453,7 @@ bool LegacyScriptPubKeyMan::Upgrade(int prev_version, bilingual_str& error)\n         hd_upgrade = true;\n     }\n     // Upgrade to HD chain split if necessary\n-    if (m_storage.CanSupportFeature(FEATURE_HD_SPLIT)) {\n+    if (IsFeatureSupported(new_version, FEATURE_HD_SPLIT)) {\n         WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n         m_storage.SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n         split_upgrade = FEATURE_HD_SPLIT > prev_version;"
      },
      {
        "sha": "afbb1922c94763a5b8293a434aa27d9ec5f55827",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7398cc6258c258e9f4411c50630ec4a552341b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7398cc6258c258e9f4411c50630ec4a552341b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=bd7398cc6258c258e9f4411c50630ec4a552341b",
        "patch": "@@ -206,7 +206,7 @@ class ScriptPubKeyMan\n     virtual bool CanGetAddresses(bool internal = false) const { return false; }\n \n     /** Upgrades the wallet to the specified version */\n-    virtual bool Upgrade(int prev_version, bilingual_str& error) { return false; }\n+    virtual bool Upgrade(int prev_version, int new_version, bilingual_str& error) { return false; }\n \n     virtual bool HavePrivateKeys() const { return false; }\n \n@@ -371,7 +371,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool SetupGeneration(bool force = false) override;\n \n-    bool Upgrade(int prev_version, bilingual_str& error) override;\n+    bool Upgrade(int prev_version, int new_version, bilingual_str& error) override;\n \n     bool HavePrivateKeys() const override;\n "
      },
      {
        "sha": "dc1365b0bba20cee785b2a722f1f2ac4893399f8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7398cc6258c258e9f4411c50630ec4a552341b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7398cc6258c258e9f4411c50630ec4a552341b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bd7398cc6258c258e9f4411c50630ec4a552341b",
        "patch": "@@ -4120,7 +4120,7 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n bool CWallet::UpgradeWallet(int version, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     int prev_version = GetVersion();\n-    int nMaxVersion = version;\n+    int& nMaxVersion = version;\n     if (nMaxVersion == 0) // the -upgradewallet without argument case\n     {\n         WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n@@ -4146,7 +4146,7 @@ bool CWallet::UpgradeWallet(int version, bilingual_str& error, std::vector<bilin\n     }\n \n     for (auto spk_man : GetActiveScriptPubKeyMans()) {\n-        if (!spk_man->Upgrade(prev_version, error)) {\n+        if (!spk_man->Upgrade(prev_version, version, error)) {\n             return false;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "8e32e1c41c995e832e643f605d35a7aa112837e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTMyZTFjNDFjOTk1ZTgzMmU2NDNmNjA1ZDM1YTdhYTExMjgzN2U2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-29T21:07:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:15:12Z"
      },
      "message": "wallet: remove nWalletMaxVersion\n\nnWalletMaxVersion was used to allow an upgrade to a version only\nwhen the new feature was used. This makes sense for the old\n-upgradewallet startup option. But because upgradewallet is now a RPC,\nputting off the version bump like this does not make sense. Instead,\nimmediately upgrading to the given version number makes sense.",
      "tree": {
        "sha": "ee4bcf1f4ac7daeb09d1958c5301995c1660ae38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee4bcf1f4ac7daeb09d1958c5301995c1660ae38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e32e1c41c995e832e643f605d35a7aa112837e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e32e1c41c995e832e643f605d35a7aa112837e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e32e1c41c995e832e643f605d35a7aa112837e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e32e1c41c995e832e643f605d35a7aa112837e6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd7398cc6258c258e9f4411c50630ec4a552341b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7398cc6258c258e9f4411c50630ec4a552341b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd7398cc6258c258e9f4411c50630ec4a552341b"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 16,
      "deletions": 43
    },
    "files": [
      {
        "sha": "78bfeeabc5950c8385ef454286e3a93b0f420caa",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e32e1c41c995e832e643f605d35a7aa112837e6/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e32e1c41c995e832e643f605d35a7aa112837e6/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8e32e1c41c995e832e643f605d35a7aa112837e6",
        "patch": "@@ -37,7 +37,7 @@ class WalletStorage\n     virtual bool IsWalletFlagSet(uint64_t) const = 0;\n     virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n     virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n-    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr) = 0;\n     virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n     virtual bool HasEncryptionKeys() const = 0;\n     virtual bool IsLocked() const = 0;"
      },
      {
        "sha": "be7b30009c6f5c4fb42f216820c7ba834cc29bfc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 31,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e32e1c41c995e832e643f605d35a7aa112837e6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e32e1c41c995e832e643f605d35a7aa112837e6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8e32e1c41c995e832e643f605d35a7aa112837e6",
        "patch": "@@ -435,21 +435,13 @@ void CWallet::chainStateFlushed(const CBlockLocator& loc)\n     batch.WriteBestBlock(loc);\n }\n \n-void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)\n+void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in)\n {\n     LOCK(cs_wallet);\n     if (nWalletVersion >= nVersion)\n         return;\n-\n-    // when doing an explicit upgrade, if we pass the max version permitted, upgrade all the way\n-    if (fExplicit && nVersion > nWalletMaxVersion)\n-            nVersion = FEATURE_LATEST;\n-\n     nWalletVersion = nVersion;\n \n-    if (nVersion > nWalletMaxVersion)\n-        nWalletMaxVersion = nVersion;\n-\n     {\n         WalletBatch* batch = batch_in ? batch_in : new WalletBatch(*database);\n         if (nWalletVersion > 40000)\n@@ -459,18 +451,6 @@ void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in,\n     }\n }\n \n-bool CWallet::SetMaxVersion(int nVersion)\n-{\n-    LOCK(cs_wallet);\n-    // cannot downgrade below current version\n-    if (nWalletVersion > nVersion)\n-        return false;\n-\n-    nWalletMaxVersion = nVersion;\n-\n-    return true;\n-}\n-\n std::set<uint256> CWallet::GetConflicts(const uint256& txid) const\n {\n     std::set<uint256> result;\n@@ -655,7 +635,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         }\n \n         // Encryption was introduced in version 0.4.0\n-        SetMinVersion(FEATURE_WALLETCRYPT, encrypted_batch, true);\n+        SetMinVersion(FEATURE_WALLETCRYPT, encrypted_batch);\n \n         if (!encrypted_batch->TxnCommit()) {\n             delete encrypted_batch;\n@@ -4120,31 +4100,30 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n bool CWallet::UpgradeWallet(int version, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     int prev_version = GetVersion();\n-    int& nMaxVersion = version;\n-    if (nMaxVersion == 0) // the -upgradewallet without argument case\n+    if (version == 0) // the -upgradewallet without argument case\n     {\n         WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-        nMaxVersion = FEATURE_LATEST;\n-        SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        version = FEATURE_LATEST;\n     } else {\n-        WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", version);\n     }\n-    if (nMaxVersion < GetVersion())\n+    if (version < prev_version)\n     {\n         error = _(\"Cannot downgrade wallet\");\n         return false;\n     }\n-    SetMaxVersion(nMaxVersion);\n \n     LOCK(cs_wallet);\n \n     // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n-    int max_version = GetVersion();\n-    if (!CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+    if (!CanSupportFeature(FEATURE_HD_SPLIT) && version >= FEATURE_HD_SPLIT && version < FEATURE_PRE_SPLIT_KEYPOOL) {\n         error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use version 169900 or no version specified.\");\n         return false;\n     }\n \n+    // Permanently upgrade to the version\n+    SetMinVersion(GetClosestWalletFeature(version));\n+\n     for (auto spk_man : GetActiveScriptPubKeyMans()) {\n         if (!spk_man->Upgrade(prev_version, version, error)) {\n             return false;"
      },
      {
        "sha": "5b4597df4cc034a97f79342b942fd3d663ec3e8b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e32e1c41c995e832e643f605d35a7aa112837e6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e32e1c41c995e832e643f605d35a7aa112837e6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8e32e1c41c995e832e643f605d35a7aa112837e6",
        "patch": "@@ -636,9 +636,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion GUARDED_BY(cs_wallet){FEATURE_BASE};\n \n-    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;\n-\n     int64_t nNextResend = 0;\n     bool fBroadcastTransactions = false;\n     // Local time that the tip block was received. Used to schedule wallet rebroadcasts.\n@@ -800,8 +797,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     const CWalletTx* GetWalletTx(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool IsTrusted(const CWalletTx& wtx, std::set<uint256>& trusted_parents) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return IsFeatureSupported(nWalletMaxVersion, wf); }\n+    //! check whether we support the named feature\n+    bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return IsFeatureSupported(nWalletVersion, wf); }\n \n     /**\n      * populate vCoins with vector of available COutputs.\n@@ -853,7 +850,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; return true; }\n \n     /**\n      * Adds a destination data tuple to the store, and saves it to disk\n@@ -1076,11 +1073,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     unsigned int GetKeyPoolSize() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false) override;\n-\n-    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n-    bool SetMaxVersion(int nVersion);\n+    //! signify that a particular wallet feature is now used.\n+    void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr) override;\n \n     //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n     int GetVersion() const { LOCK(cs_wallet); return nWalletVersion; }"
      }
    ]
  },
  {
    "sha": "0bd995aa19be65b0dd23df1df571c71428c2bc32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmQ5OTVhYTE5YmU2NWIwZGQyM2RmMWRmNTcxYzcxNDI4YzJiYzMy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-29T21:11:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:15:14Z"
      },
      "message": "wallet: upgrade the CHDChain version number when upgrading to split hd",
      "tree": {
        "sha": "9cf3a515095daa478ee8c30a15a286f2acb20ce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cf3a515095daa478ee8c30a15a286f2acb20ce6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bd995aa19be65b0dd23df1df571c71428c2bc32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd995aa19be65b0dd23df1df571c71428c2bc32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bd995aa19be65b0dd23df1df571c71428c2bc32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd995aa19be65b0dd23df1df571c71428c2bc32/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e32e1c41c995e832e643f605d35a7aa112837e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e32e1c41c995e832e643f605d35a7aa112837e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e32e1c41c995e832e643f605d35a7aa112837e6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d2e1be6402dcd60d9e8b18b2bba09c8abedc3dff",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bd995aa19be65b0dd23df1df571c71428c2bc32/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bd995aa19be65b0dd23df1df571c71428c2bc32/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0bd995aa19be65b0dd23df1df571c71428c2bc32",
        "patch": "@@ -457,6 +457,13 @@ bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, bilingual\n         WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n         m_storage.SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n         split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+        // Upgrade the HDChain\n+        if (m_hd_chain.nVersion < CHDChain::VERSION_HD_CHAIN_SPLIT) {\n+            m_hd_chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+            if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(m_hd_chain)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+            }\n+        }\n     }\n     // Mark all keys currently in the keypool as pre-split\n     if (split_upgrade) {"
      }
    ]
  },
  {
    "sha": "092fc434854f881330771a93a1280ac67b1d3549",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTJmYzQzNDg1NGY4ODEzMzA3NzFhOTNhMTI4MGFjNjdiMWQzNTQ5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-30T05:05:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:15:25Z"
      },
      "message": "tests: Add a sha256sum_file function to util",
      "tree": {
        "sha": "d8db80b62bb60145680150da4b5b533dd140ca74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8db80b62bb60145680150da4b5b533dd140ca74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/092fc434854f881330771a93a1280ac67b1d3549",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092fc434854f881330771a93a1280ac67b1d3549",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/092fc434854f881330771a93a1280ac67b1d3549",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092fc434854f881330771a93a1280ac67b1d3549/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bd995aa19be65b0dd23df1df571c71428c2bc32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd995aa19be65b0dd23df1df571c71428c2bc32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bd995aa19be65b0dd23df1df571c71428c2bc32"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f4713d50e8e650e3815c83b8e7dde9724f4f700",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092fc434854f881330771a93a1280ac67b1d3549/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092fc434854f881330771a93a1280ac67b1d3549/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=092fc434854f881330771a93a1280ac67b1d3549",
        "patch": "@@ -8,6 +8,7 @@\n from binascii import unhexlify\n from decimal import Decimal, ROUND_DOWN\n from subprocess import CalledProcessError\n+import hashlib\n import inspect\n import json\n import logging\n@@ -260,6 +261,14 @@ def wait_until_helper(predicate, *, attempts=float('inf'), timeout=float('inf'),\n         raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\n     raise RuntimeError('Unreachable')\n \n+def sha256sum_file(filename):\n+    h = hashlib.sha256()\n+    with open(filename, 'rb') as f:\n+        d = f.read(4096)\n+        while len(d) > 0:\n+            h.update(d)\n+            d = f.read(4096)\n+    return h.digest()\n \n # RPC/P2P connection constants and functions\n ############################################"
      }
    ]
  },
  {
    "sha": "4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjQxOGE5ZGVjYzNlODU1ZWU0YjBiYmY5ZTYxMTIxYzhlOTkwNGU1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-30T05:06:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:15:29Z"
      },
      "message": "test: Add test_framework/bdb.py module for inspecting bdb files\n\nFor upgrade tests and possibly other tests, it is useful to inspect the\nbdb file for the wallet (i.e. the wallet.dat file).\ntest_framework/bdb.py is an implementation of bdb file deserialization\nspecific for Bitcoin Core's usage.",
      "tree": {
        "sha": "dc97f64b7f880983ca86379bed713f8d968e34c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc97f64b7f880983ca86379bed713f8d968e34c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "092fc434854f881330771a93a1280ac67b1d3549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092fc434854f881330771a93a1280ac67b1d3549",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/092fc434854f881330771a93a1280ac67b1d3549"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 152,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9de358aa0a647ed3f09c7c0864dfaf0e03e4567b",
        "filename": "test/functional/test_framework/bdb.py",
        "status": "added",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5/test/functional/test_framework/bdb.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5/test/functional/test_framework/bdb.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/bdb.py?ref=4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
        "patch": "@@ -0,0 +1,152 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Utilities for working directly with the wallet's BDB database file\n+\n+This is specific to the configuration of BDB used in this project:\n+    - pagesize: 4096 bytes\n+    - Outer database contains single subdatabase named 'main'\n+    - btree\n+    - btree leaf pages\n+\n+Each key-value pair is two entries in a btree leaf. The first is the key, the one that follows\n+is the value. And so on. Note that the entry data is itself not in the correct order. Instead\n+entry offsets are stored in the correct order and those offsets are needed to then retrieve\n+the data itself.\n+\n+Page format can be found in BDB source code dbinc/db_page.h\n+This only implements the deserialization of btree metadata pages and normal btree pages. Overflow\n+pages are not implemented but may be needed in the future if dealing with wallets with large\n+transactions.\n+\n+`db_dump -da wallet.dat` is useful to see the data in a wallet.dat BDB file\n+\"\"\"\n+\n+import binascii\n+import struct\n+\n+# Important constants\n+PAGESIZE = 4096\n+OUTER_META_PAGE = 0\n+INNER_META_PAGE = 2\n+\n+# Page type values\n+BTREE_INTERNAL = 3\n+BTREE_LEAF = 5\n+BTREE_META = 9\n+\n+# Some magic numbers for sanity checking\n+BTREE_MAGIC = 0x053162\n+DB_VERSION = 9\n+\n+# Deserializes a leaf page into a dict.\n+# Btree internal pages have the same header, for those, return None.\n+# For the btree leaf pages, deserialize them and put all the data into a dict\n+def dump_leaf_page(data):\n+    page_info = {}\n+    page_header = data[0:26]\n+    _, pgno, prev_pgno, next_pgno, entries, hf_offset, level, pg_type = struct.unpack('QIIIHHBB', page_header)\n+    page_info['pgno'] = pgno\n+    page_info['prev_pgno'] = prev_pgno\n+    page_info['next_pgno'] = next_pgno\n+    page_info['entries'] = entries\n+    page_info['hf_offset'] = hf_offset\n+    page_info['level'] = level\n+    page_info['pg_type'] = pg_type\n+    page_info['entry_offsets'] = struct.unpack('{}H'.format(entries), data[26:26 + entries * 2])\n+    page_info['entries'] = []\n+\n+    if pg_type == BTREE_INTERNAL:\n+        # Skip internal pages. These are the internal nodes of the btree and don't contain anything relevant to us\n+        return None\n+\n+    assert pg_type == BTREE_LEAF, 'A non-btree leaf page has been encountered while dumping leaves'\n+\n+    for i in range(0, entries):\n+        offset = page_info['entry_offsets'][i]\n+        entry = {'offset': offset}\n+        page_data_header = data[offset:offset + 3]\n+        e_len, pg_type = struct.unpack('HB', page_data_header)\n+        entry['len'] = e_len\n+        entry['pg_type'] = pg_type\n+        entry['data'] = data[offset + 3:offset + 3 + e_len]\n+        page_info['entries'].append(entry)\n+\n+    return page_info\n+\n+# Deserializes a btree metadata page into a dict.\n+# Does a simple sanity check on the magic value, type, and version\n+def dump_meta_page(page):\n+    # metadata page\n+    # general metadata\n+    metadata = {}\n+    meta_page = page[0:72]\n+    _, pgno, magic, version, pagesize, encrypt_alg, pg_type, metaflags, _, free, last_pgno, nparts, key_count, record_count, flags, uid = struct.unpack('QIIIIBBBBIIIIII20s', meta_page)\n+    metadata['pgno'] = pgno\n+    metadata['magic'] = magic\n+    metadata['version'] = version\n+    metadata['pagesize'] = pagesize\n+    metadata['encrypt_alg'] = encrypt_alg\n+    metadata['pg_type'] = pg_type\n+    metadata['metaflags'] = metaflags\n+    metadata['free'] = free\n+    metadata['last_pgno'] = last_pgno\n+    metadata['nparts'] = nparts\n+    metadata['key_count'] = key_count\n+    metadata['record_count'] = record_count\n+    metadata['flags'] = flags\n+    metadata['uid'] = binascii.hexlify(uid)\n+\n+    assert magic == BTREE_MAGIC, 'bdb magic does not match bdb btree magic'\n+    assert pg_type == BTREE_META, 'Metadata page is not a btree metadata page'\n+    assert version == DB_VERSION, 'Database too new'\n+\n+    # btree metadata\n+    btree_meta_page = page[72:512]\n+    _, minkey, re_len, re_pad, root, _, crypto_magic, _, iv, chksum = struct.unpack('IIIII368sI12s16s20s', btree_meta_page)\n+    metadata['minkey'] = minkey\n+    metadata['re_len'] = re_len\n+    metadata['re_pad'] = re_pad\n+    metadata['root'] = root\n+    metadata['crypto_magic'] = crypto_magic\n+    metadata['iv'] = binascii.hexlify(iv)\n+    metadata['chksum'] = binascii.hexlify(chksum)\n+    return metadata\n+\n+# Given the dict from dump_leaf_page, get the key-value pairs and put them into a dict\n+def extract_kv_pairs(page_data):\n+    out = {}\n+    last_key = None\n+    for i, entry in enumerate(page_data['entries']):\n+        # By virtue of these all being pairs, even number entries are keys, and odd are values\n+        if i % 2 == 0:\n+            out[entry['data']] = b''\n+            last_key = entry['data']\n+        else:\n+            out[last_key] = entry['data']\n+    return out\n+\n+# Extract the key-value pairs of the BDB file given in filename\n+def dump_bdb_kv(filename):\n+    # Read in the BDB file and start deserializing it\n+    pages = []\n+    with open(filename, 'rb') as f:\n+        data = f.read(PAGESIZE)\n+        while len(data) > 0:\n+            pages.append(data)\n+            data = f.read(PAGESIZE)\n+\n+    # Sanity check the meta pages\n+    dump_meta_page(pages[OUTER_META_PAGE])\n+    dump_meta_page(pages[INNER_META_PAGE])\n+\n+    # Fetch the kv pairs from the leaf pages\n+    kv = {}\n+    for i in range(3, len(pages)):\n+        info = dump_leaf_page(pages[i])\n+        if info is not None:\n+            info_kv = extract_kv_pairs(info)\n+            kv = {**kv, **info_kv}\n+    return kv"
      }
    ]
  },
  {
    "sha": "bf7635963c03203e7189ddaa56c6b086a0108cbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjc2MzU5NjNjMDMyMDNlNzE4OWRkYWE1NmM2YjA4NmEwMTA4Y2Jm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-30T20:52:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:16:54Z"
      },
      "message": "tests: Test specific upgradewallet scenarios and that upgrades work",
      "tree": {
        "sha": "9b3a60a657c49fe683d3552df38f991aaad6b01b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b3a60a657c49fe683d3552df38f991aaad6b01b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf7635963c03203e7189ddaa56c6b086a0108cbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7635963c03203e7189ddaa56c6b086a0108cbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7635963c03203e7189ddaa56c6b086a0108cbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7635963c03203e7189ddaa56c6b086a0108cbf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b418a9decc3e855ee4b0bbf9e61121c8e9904e5"
      }
    ],
    "stats": {
      "total": 257,
      "additions": 231,
      "deletions": 26
    },
    "files": [
      {
        "sha": "a8608051855eb2bf4c8539fefed5f509861c85c1",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 231,
        "deletions": 26,
        "changes": 257,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=bf7635963c03203e7189ddaa56c6b086a0108cbf",
        "patch": "@@ -13,23 +13,47 @@\n \n import os\n import shutil\n+import struct\n \n+from io import BytesIO\n+\n+from test_framework.bdb import dump_bdb_kv\n+from test_framework.messages import deser_compact_size, deser_string\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n     assert_is_hex_string,\n+    assert_raises_rpc_error,\n+    sha256sum_file,\n )\n \n \n+UPGRADED_KEYMETA_VERSION = 12\n+\n+def deser_keymeta(f):\n+    ver, create_time = struct.unpack('<Iq', f.read(12))\n+    kp_str = deser_string(f)\n+    seed_id = f.read(20)\n+    fpr = f.read(4)\n+    path_len = 0\n+    path = []\n+    has_key_orig = False\n+    if ver == UPGRADED_KEYMETA_VERSION:\n+        path_len = deser_compact_size(f)\n+        for i in range(0, path_len):\n+            path.append(struct.unpack('<I', f.read(4))[0])\n+        has_key_orig = bool(f.read(1))\n+    return ver, create_time, kp_str, seed_id, fpr, path_len, path, has_key_orig\n+\n class UpgradeWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [\n-            [\"-addresstype=bech32\"], # current wallet version\n-            [\"-usehd=1\"],            # v0.16.3 wallet\n-            [\"-usehd=0\"]             # v0.15.2 wallet\n+            [\"-addresstype=bech32\", \"-keypool=2\"], # current wallet version\n+            [\"-usehd=1\", \"-keypool=2\"],            # v0.16.3 wallet\n+            [\"-usehd=0\", \"-keypool=2\"]             # v0.15.2 wallet\n         ]\n         self.wallet_names = [self.default_wallet_name, None, None]\n \n@@ -87,22 +111,53 @@ def run_test(self):\n \n         self.log.info(\"Test upgradewallet RPC...\")\n         # Prepare for copying of the older wallet\n-        node_master_wallet_dir = os.path.join(node_master.datadir, \"regtest/wallets\")\n+        node_master_wallet_dir = os.path.join(node_master.datadir, \"regtest/wallets\", self.default_wallet_name)\n+        node_master_wallet = os.path.join(node_master_wallet_dir, self.default_wallet_name, self.wallet_data_filename)\n         v16_3_wallet       = os.path.join(v16_3_node.datadir, \"regtest/wallets/wallet.dat\")\n         v15_2_wallet       = os.path.join(v15_2_node.datadir, \"regtest/wallet.dat\")\n+        split_hd_wallet    = os.path.join(v15_2_node.datadir, \"regtest/splithd\")\n         self.stop_nodes()\n \n-        # Copy the 0.16.3 wallet to the last Bitcoin Core version and open it:\n-        shutil.rmtree(node_master_wallet_dir)\n-        os.mkdir(node_master_wallet_dir)\n-        shutil.copy(\n-            v16_3_wallet,\n-            node_master_wallet_dir\n-        )\n-        self.restart_node(0, ['-nowallet'])\n-        node_master.loadwallet('')\n+        # Make split hd wallet\n+        self.start_node(2, ['-usehd=1', '-keypool=2', '-wallet=splithd'])\n+        self.stop_node(2)\n+\n+        def copy_v16():\n+            node_master.get_wallet_rpc(self.default_wallet_name).unloadwallet()\n+            # Copy the 0.16.3 wallet to the last Bitcoin Core version and open it:\n+            shutil.rmtree(node_master_wallet_dir)\n+            os.mkdir(node_master_wallet_dir)\n+            shutil.copy(\n+                v16_3_wallet,\n+                node_master_wallet_dir\n+            )\n+            node_master.loadwallet(self.default_wallet_name)\n+\n+        def copy_non_hd():\n+            node_master.get_wallet_rpc(self.default_wallet_name).unloadwallet()\n+            # Copy the 0.15.2 non hd wallet to the last Bitcoin Core version and open it:\n+            shutil.rmtree(node_master_wallet_dir)\n+            os.mkdir(node_master_wallet_dir)\n+            shutil.copy(\n+                v15_2_wallet,\n+                node_master_wallet_dir\n+            )\n+            node_master.loadwallet(self.default_wallet_name)\n \n-        wallet = node_master.get_wallet_rpc('')\n+        def copy_split_hd():\n+            node_master.get_wallet_rpc(self.default_wallet_name).unloadwallet()\n+            # Copy the 0.15.2 split hd wallet to the last Bitcoin Core version and open it:\n+            shutil.rmtree(node_master_wallet_dir)\n+            os.mkdir(node_master_wallet_dir)\n+            shutil.copy(\n+                split_hd_wallet,\n+                os.path.join(node_master_wallet_dir, 'wallet.dat')\n+            )\n+            node_master.loadwallet(self.default_wallet_name)\n+\n+        self.restart_node(0)\n+        copy_v16()\n+        wallet = node_master.get_wallet_rpc(self.default_wallet_name)\n         old_version = wallet.getwalletinfo()[\"walletversion\"]\n \n         # calling upgradewallet without version arguments\n@@ -114,18 +169,8 @@ def run_test(self):\n         # wallet should still contain the same balance\n         assert_equal(wallet.getbalance(), v16_3_balance)\n \n-        self.stop_node(0)\n-        # Copy the 0.15.2 wallet to the last Bitcoin Core version and open it:\n-        shutil.rmtree(node_master_wallet_dir)\n-        os.mkdir(node_master_wallet_dir)\n-        shutil.copy(\n-            v15_2_wallet,\n-            node_master_wallet_dir\n-        )\n-        self.restart_node(0, ['-nowallet'])\n-        node_master.loadwallet('')\n-\n-        wallet = node_master.get_wallet_rpc('')\n+        copy_non_hd()\n+        wallet = node_master.get_wallet_rpc(self.default_wallet_name)\n         # should have no master key hash before conversion\n         assert_equal('hdseedid' in wallet.getwalletinfo(), False)\n         # calling upgradewallet with explicit version number\n@@ -137,5 +182,165 @@ def run_test(self):\n         # after conversion master key hash should be present\n         assert_is_hex_string(wallet.getwalletinfo()['hdseedid'])\n \n+        self.log.info('Intermediary versions don\\'t effect anything')\n+        copy_non_hd()\n+        # Wallet starts with 60000\n+        assert_equal(60000, wallet.getwalletinfo()['walletversion'])\n+        wallet.unloadwallet()\n+        before_checksum = sha256sum_file(node_master_wallet)\n+        node_master.loadwallet('')\n+        # Can \"upgrade\" to 129999 which should have no effect on the wallet\n+        wallet.upgradewallet(129999)\n+        assert_equal(60000, wallet.getwalletinfo()['walletversion'])\n+        wallet.unloadwallet()\n+        assert_equal(before_checksum, sha256sum_file(node_master_wallet))\n+        node_master.loadwallet('')\n+\n+        self.log.info('Wallets cannot be downgraded')\n+        copy_non_hd()\n+        assert_raises_rpc_error(-4, 'Cannot downgrade wallet', wallet.upgradewallet, 40000)\n+        wallet.unloadwallet()\n+        assert_equal(before_checksum, sha256sum_file(node_master_wallet))\n+        node_master.loadwallet('')\n+\n+        self.log.info('Can upgrade to HD')\n+        # Inspect the old wallet and make sure there is no hdchain\n+        orig_kvs = dump_bdb_kv(node_master_wallet)\n+        assert b'\\x07hdchain' not in orig_kvs\n+        # Upgrade to HD, no split\n+        wallet.upgradewallet(130000)\n+        assert_equal(130000, wallet.getwalletinfo()['walletversion'])\n+        # Check that there is now a hd chain and it is version 1, no internal chain counter\n+        new_kvs = dump_bdb_kv(node_master_wallet)\n+        assert b'\\x07hdchain' in new_kvs\n+        hd_chain = new_kvs[b'\\x07hdchain']\n+        assert_equal(28, len(hd_chain))\n+        hd_chain_version, external_counter, seed_id = struct.unpack('<iI20s', hd_chain)\n+        assert_equal(1, hd_chain_version)\n+        seed_id = bytearray(seed_id)\n+        seed_id.reverse()\n+        old_kvs = new_kvs\n+        # First 2 keys should still be non-HD\n+        for i in range(0, 2):\n+            info = wallet.getaddressinfo(wallet.getnewaddress())\n+            assert 'hdkeypath' not in info\n+            assert 'hdseedid' not in info\n+        # Next key should be HD\n+        info = wallet.getaddressinfo(wallet.getnewaddress())\n+        assert_equal(seed_id.hex(), info['hdseedid'])\n+        assert_equal('m/0\\'/0\\'/0\\'', info['hdkeypath'])\n+        prev_seed_id = info['hdseedid']\n+        # Change key should be the same keypool\n+        info = wallet.getaddressinfo(wallet.getrawchangeaddress())\n+        assert_equal(prev_seed_id, info['hdseedid'])\n+        assert_equal('m/0\\'/0\\'/1\\'', info['hdkeypath'])\n+\n+        self.log.info('Cannot upgrade to HD Split, needs Pre Split Keypool')\n+        assert_raises_rpc_error(-4, 'Cannot upgrade a non HD split wallet without upgrading to support pre split keypool', wallet.upgradewallet, 139900)\n+        assert_equal(130000, wallet.getwalletinfo()['walletversion'])\n+        assert_raises_rpc_error(-4, 'Cannot upgrade a non HD split wallet without upgrading to support pre split keypool', wallet.upgradewallet, 159900)\n+        assert_equal(130000, wallet.getwalletinfo()['walletversion'])\n+        assert_raises_rpc_error(-4, 'Cannot upgrade a non HD split wallet without upgrading to support pre split keypool', wallet.upgradewallet, 169899)\n+        assert_equal(130000, wallet.getwalletinfo()['walletversion'])\n+\n+        self.log.info('Upgrade HD to HD chain split')\n+        wallet.upgradewallet(169900)\n+        assert_equal(169900, wallet.getwalletinfo()['walletversion'])\n+        # Check that the hdchain updated correctly\n+        new_kvs = dump_bdb_kv(node_master_wallet)\n+        hd_chain = new_kvs[b'\\x07hdchain']\n+        assert_equal(32, len(hd_chain))\n+        hd_chain_version, external_counter, seed_id, internal_counter = struct.unpack('<iI20sI', hd_chain)\n+        assert_equal(2, hd_chain_version)\n+        assert_equal(0, internal_counter)\n+        seed_id = bytearray(seed_id)\n+        seed_id.reverse()\n+        assert_equal(seed_id.hex(), prev_seed_id)\n+        # Next change address is the same keypool\n+        info = wallet.getaddressinfo(wallet.getrawchangeaddress())\n+        assert_equal(prev_seed_id, info['hdseedid'])\n+        assert_equal('m/0\\'/0\\'/2\\'', info['hdkeypath'])\n+        # Next change address is the new keypool\n+        info = wallet.getaddressinfo(wallet.getrawchangeaddress())\n+        assert_equal(prev_seed_id, info['hdseedid'])\n+        assert_equal('m/0\\'/1\\'/0\\'', info['hdkeypath'])\n+        # External addresses use the same keypool\n+        info = wallet.getaddressinfo(wallet.getnewaddress())\n+        assert_equal(prev_seed_id, info['hdseedid'])\n+        assert_equal('m/0\\'/0\\'/3\\'', info['hdkeypath'])\n+\n+        self.log.info('Upgrade non-HD to HD chain split')\n+        copy_non_hd()\n+        wallet.upgradewallet(169900)\n+        assert_equal(169900, wallet.getwalletinfo()['walletversion'])\n+        # Check that the hdchain updated correctly\n+        new_kvs = dump_bdb_kv(node_master_wallet)\n+        hd_chain = new_kvs[b'\\x07hdchain']\n+        assert_equal(32, len(hd_chain))\n+        hd_chain_version, external_counter, seed_id, internal_counter = struct.unpack('<iI20sI', hd_chain)\n+        assert_equal(2, hd_chain_version)\n+        assert_equal(2, internal_counter)\n+        # Drain the keypool by fetching one external key and one change key. Should still be the same keypool\n+        info = wallet.getaddressinfo(wallet.getnewaddress())\n+        assert 'hdseedid' not in info\n+        assert 'hdkeypath' not in info\n+        info = wallet.getaddressinfo(wallet.getrawchangeaddress())\n+        assert 'hdseedid' not in info\n+        assert 'hdkeypath' not in info\n+        # The next addresses are HD and should be on different HD chains\n+        info = wallet.getaddressinfo(wallet.getnewaddress())\n+        ext_id = info['hdseedid']\n+        assert_equal('m/0\\'/0\\'/0\\'', info['hdkeypath'])\n+        info = wallet.getaddressinfo(wallet.getrawchangeaddress())\n+        assert_equal(ext_id, info['hdseedid'])\n+        assert_equal('m/0\\'/1\\'/0\\'', info['hdkeypath'])\n+\n+        self.log.info('KeyMetadata should upgrade when loading into master')\n+        copy_v16()\n+        old_kvs = dump_bdb_kv(v16_3_wallet)\n+        new_kvs = dump_bdb_kv(node_master_wallet)\n+        for k, old_v in old_kvs.items():\n+            if k.startswith(b'\\x07keymeta'):\n+                new_ver, new_create_time, new_kp_str, new_seed_id, new_fpr, new_path_len, new_path, new_has_key_orig = deser_keymeta(BytesIO(new_kvs[k]))\n+                old_ver, old_create_time, old_kp_str, old_seed_id, old_fpr, old_path_len, old_path, old_has_key_orig = deser_keymeta(BytesIO(old_v))\n+                assert_equal(10, old_ver)\n+                if old_kp_str == b\"\": # imported things that don't have keymeta (i.e. imported coinbase privkeys) won't be upgraded\n+                    assert_equal(new_kvs[k], old_v)\n+                    continue\n+                assert_equal(12, new_ver)\n+                assert_equal(new_create_time, old_create_time)\n+                assert_equal(new_kp_str, old_kp_str)\n+                assert_equal(new_seed_id, old_seed_id)\n+                assert_equal(0, old_path_len)\n+                assert_equal(new_path_len, len(new_path))\n+                assert_equal([], old_path)\n+                assert_equal(False, old_has_key_orig)\n+                assert_equal(True, new_has_key_orig)\n+\n+                # Check that the path is right\n+                built_path = []\n+                for s in new_kp_str.decode().split('/')[1:]:\n+                    h = 0\n+                    if s[-1] == '\\'':\n+                        s = s[:-1]\n+                        h = 0x80000000\n+                    p = int(s) | h\n+                    built_path.append(p)\n+                assert_equal(new_path, built_path)\n+\n+        self.log.info('Upgrading to NO_DEFAULT_KEY should not remove the defaultkey')\n+        copy_split_hd()\n+        # Check the wallet has a default key initially\n+        old_kvs = dump_bdb_kv(node_master_wallet)\n+        defaultkey = old_kvs[b'\\x0adefaultkey']\n+        # Upgrade the wallet. Should still have the same default key\n+        wallet.upgradewallet(159900)\n+        new_kvs = dump_bdb_kv(node_master_wallet)\n+        up_defaultkey = new_kvs[b'\\x0adefaultkey']\n+        assert_equal(defaultkey, up_defaultkey)\n+        # 0.16.3 doesn't have a default key\n+        v16_3_kvs = dump_bdb_kv(v16_3_wallet)\n+        assert b'\\x0adefaultkey' not in v16_3_kvs\n+\n if __name__ == '__main__':\n     UpgradeWalletTest().main()"
      }
    ]
  },
  {
    "sha": "a314271f08215feba53ead27096ac7fda34acb3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzE0MjcxZjA4MjE1ZmViYTUzZWFkMjcwOTZhYzdmZGEzNGFjYjNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-21T22:57:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:16:57Z"
      },
      "message": "test: Remove unused wallet.dat",
      "tree": {
        "sha": "966a1e1cd3995bd9523881118138dd0c6aeb5a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/966a1e1cd3995bd9523881118138dd0c6aeb5a97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a314271f08215feba53ead27096ac7fda34acb3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a314271f08215feba53ead27096ac7fda34acb3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a314271f08215feba53ead27096ac7fda34acb3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a314271f08215feba53ead27096ac7fda34acb3c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf7635963c03203e7189ddaa56c6b086a0108cbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7635963c03203e7189ddaa56c6b086a0108cbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7635963c03203e7189ddaa56c6b086a0108cbf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/wallets/high_minversion/.walletlock",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/.walletlock",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/.walletlock",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/.walletlock?ref=bf7635963c03203e7189ddaa56c6b086a0108cbf"
      },
      {
        "sha": "e55c4557cabbd1a6119f170bacde0068809057de",
        "filename": "test/functional/data/wallets/high_minversion/GENERATE.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/GENERATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/GENERATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/GENERATE.md?ref=bf7635963c03203e7189ddaa56c6b086a0108cbf",
        "patch": "@@ -1,8 +0,0 @@\n-The wallet has been created by starting Bitcoin Core with the options\n-`-regtest -datadir=/tmp -nowallet -walletdir=$(pwd)/test/functional/data/wallets/`.\n-\n-In the source code, `WalletFeature::FEATURE_LATEST` has been modified to be large, so that the minversion is too high\n-for a current build of the wallet.\n-\n-The wallet has then been created with the RPC `createwallet high_minversion true true`, so that a blank wallet with\n-private keys disabled is created."
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/wallets/high_minversion/db.log",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/db.log",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/db.log",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/db.log?ref=bf7635963c03203e7189ddaa56c6b086a0108cbf"
      },
      {
        "sha": "99ab8092631c4a7da2236f46e7250e6c265d3b49",
        "filename": "test/functional/data/wallets/high_minversion/wallet.dat",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/wallet.dat",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7635963c03203e7189ddaa56c6b086a0108cbf/test/functional/data/wallets/high_minversion/wallet.dat",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/wallet.dat?ref=bf7635963c03203e7189ddaa56c6b086a0108cbf"
      }
    ]
  },
  {
    "sha": "5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjljMGI2MzYwMjE1NjM2Y2ZhNjJhNzBkM2E3MGYxZmViMzk3N2Fi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-21T22:55:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-04T17:16:57Z"
      },
      "message": "wallet: Remove -upgradewallet from dummywallet",
      "tree": {
        "sha": "07ba8b0642de2f84c2f036bfe31d2f3ac5687216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07ba8b0642de2f84c2f036bfe31d2f3ac5687216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a314271f08215feba53ead27096ac7fda34acb3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a314271f08215feba53ead27096ac7fda34acb3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a314271f08215feba53ead27096ac7fda34acb3c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4543f098a1e694ee9b7494b27395ff760f3c2575",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
        "patch": "@@ -40,7 +40,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-salvagewallet\",\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\",\n-        \"-upgradewallet\",\n         \"-wallet=<path>\",\n         \"-walletbroadcast\",\n         \"-walletdir=<dir>\","
      },
      {
        "sha": "11ce0d0c052000d90a560d088289710a5d385c5e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
        "patch": "@@ -4100,8 +4100,7 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n bool CWallet::UpgradeWallet(int version, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     int prev_version = GetVersion();\n-    if (version == 0) // the -upgradewallet without argument case\n-    {\n+    if (version == 0) {\n         WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n         version = FEATURE_LATEST;\n     } else {"
      },
      {
        "sha": "ab3edbd04cadddc0aa02841265c8b7d3ef5b0127",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9c0b6360215636cfa62a70d3a70f1feb3977ab/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=5f9c0b6360215636cfa62a70d3a70f1feb3977ab",
        "patch": "@@ -139,6 +139,9 @@ def wallet_file(name):\n         open(not_a_dir, 'a', encoding=\"utf8\").close()\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n+        self.log.info(\"Do not allow -upgradewallet with multiwallet\")\n+        self.nodes[0].assert_start_raises_init_error(['-upgradewallet'], \"Error: Error parsing command line arguments: Invalid parameter -upgradewallet\")\n+\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      }
    ]
  }
]