[
  {
    "sha": "66e15e8f9759b827732865e5686c0203ce7dc1d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmUxNWU4Zjk3NTliODI3NzMyODY1ZTU2ODZjMDIwM2NlN2RjMWQ0",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-09-04T08:50:19Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-09-04T08:50:19Z"
      },
      "message": "Explain GetAncestor check for m_failed_blocks in AcceptBlockHeader",
      "tree": {
        "sha": "6edb1f1e7abeaa1c13a2217b200ba055e736c24e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6edb1f1e7abeaa1c13a2217b200ba055e736c24e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66e15e8f9759b827732865e5686c0203ce7dc1d4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAluOR00ACgkQV/+b28ww\nEAn7Gg/8C0hSYp5vmOgc4HApq7WibnhyIL6Q4CwwWTBt2XNa9p5S4vSZmiZ5d3R0\nH3RXJt7ZfgNRwI4j3yxZY0wLSOTVjCZt+QVTXIFzMb4SdmmfsslidnybFeI2C/dC\n1QZ4u4tbmYWDATS5oPS7q3ZNN9ICmn0L0+42uHClpT2/6BO4HmeV1W3p5fXHLzF4\n467UZQILDGiSaOvdomUqgK5K2ScNW9P4u4+XLms0jp96Hx4tX0WRIynnmukASg9D\noYcEn/bpewrDRHkwWT3lRtn3cutzRFnD+ajyk0+5i8ff6W9lkXOZuLN9uakulXEt\ne3RMgu6W2TCis0Xq4Cao0maR1L/YUETrc4BcErl+lvX+12KQ8qKdoB5LZuVZVSBq\nFExHSL/Y2FZi8IXxKgQqMKKGRfjTMiif7MTt1wSi+nn3TxTzBMs4KaU3nWvJKjJY\nlIq56SIpQDj0GYxou/gZONIJN/zLi/P0DvlS0UrwhgeVsWbYzed4zDOrG9nR3htZ\nS6yxN8mZZb5+vJWvofVVyiBER1BY0Lo3rgqZAyduf2XcBMB4lxaCGnmivQHO1Q10\nKdWHorverIJDDAv0cEtA5KcdoyWWt1rKZN1KmaDXEmLoYN6l7Ym/+igAvGywTdnd\nCdM+h9pPI6KG+DBacG4hmdNmUjgvlCy6SHK61V+v8IbQx1EPqK4=\n=q2DI\n-----END PGP SIGNATURE-----",
        "payload": "tree 6edb1f1e7abeaa1c13a2217b200ba055e736c24e\nparent f66e1c793eda7a6143fd03400c98512a9b6f00c7\nauthor Sjors Provoost <sjors@sprovoost.nl> 1536051019 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1536051019 +0200\n\nExplain GetAncestor check for m_failed_blocks in AcceptBlockHeader\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e15e8f9759b827732865e5686c0203ce7dc1d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66e15e8f9759b827732865e5686c0203ce7dc1d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e15e8f9759b827732865e5686c0203ce7dc1d4/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66e1c793eda7a6143fd03400c98512a9b6f00c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66e1c793eda7a6143fd03400c98512a9b6f00c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66e1c793eda7a6143fd03400c98512a9b6f00c7"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 23,
      "deletions": 3
    },
    "files": [
      {
        "sha": "af42f6d22b0674b2b96b0cf36e168674b196218c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66e15e8f9759b827732865e5686c0203ce7dc1d4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66e15e8f9759b827732865e5686c0203ce7dc1d4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=66e15e8f9759b827732865e5686c0203ce7dc1d4",
        "patch": "@@ -3383,10 +3383,30 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n-        // If the previous block index isn't valid, determine if it descends from any block which\n-        // has been found invalid (m_failed_blocks), then mark pindexPrev and any blocks\n-        // between them as failed.\n+        /* Determine if this block descends from any block which has been found\n+         * invalid (m_failed_blocks), then mark pindexPrev and any blocks between\n+         * them as failed. For example:\n+         *\n+         *                D3\n+         *              /\n+         *      B2 - C2\n+         *    /         \\\n+         *  A             D2 - E2 - F2\n+         *    \\\n+         *      B1 - C1 - D1 - E1\n+         *\n+         * In the case that we attempted to reorg from E1 to F2, only to find\n+         * C2 to be invalid, we would mark D2, E2, and F2 as BLOCK_FAILED_CHILD\n+         * but NOT D3 (it was not in any of our candidate sets at the time).\n+         *\n+         * In any case D3 will also be marked as BLOCK_FAILED_CHILD at restart\n+         * in LoadBlockIndex.\n+         */\n         if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            // The above does not mean \"invalid\": it checks if the previous block\n+            // hasn't been validated up to BLOCK_VALID_SCRIPTS. This is a performance\n+            // optimization, in the common case of adding a new block to the tip,\n+            // we don't need to iterate over the failed blocks list.\n             for (const CBlockIndex* failedit : m_failed_blocks) {\n                 if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n                     assert(failedit->nStatus & BLOCK_FAILED_VALID);"
      }
    ]
  }
]