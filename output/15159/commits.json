[
  {
    "sha": "04da9f4834e1651da65ceb6379950cef9450591c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGRhOWY0ODM0ZTE2NTFkYTY1Y2ViNjM3OTk1MGNlZjk0NTA1OTFj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-01-26T22:34:00Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-01-27T02:36:53Z"
      },
      "message": "[RPC] Update getrawtransaction interface",
      "tree": {
        "sha": "c09a61a7b7223b0aff17834f5cf3094aa46b1e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c09a61a7b7223b0aff17834f5cf3094aa46b1e75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04da9f4834e1651da65ceb6379950cef9450591c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04da9f4834e1651da65ceb6379950cef9450591c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04da9f4834e1651da65ceb6379950cef9450591c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04da9f4834e1651da65ceb6379950cef9450591c/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9b71a09a0bbbdebc4c0b10d287bf2d53f628cf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b71a09a0bbbdebc4c0b10d287bf2d53f628cf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b71a09a0bbbdebc4c0b10d287bf2d53f628cf4"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 35,
      "deletions": 28
    },
    "files": [
      {
        "sha": "5a5a566715e51d6e063a37c4974dac07c537f687",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -246,6 +246,12 @@ in the Low-level Changes section below.\n \n - See the [Mining](#mining) section for changes to `getblocktemplate`.\n \n+- The `getrawtransaction` RPC no longer checks the unspent UTXO set for\n+  a transaction. The remaining behaviors are as follows: 1. If a\n+  blockhash is provided, check the corresponding block. 2. If no\n+  blockhash is provided, check the mempool. 3. If no blockhash is\n+  provided but txindex is enabled, also check txindex.\n+\n Graphical User Interface (GUI)\n ------------------------------\n "
      },
      {
        "sha": "44f04ee2bc376fdc1295613abafc23946f055fb6",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -352,7 +352,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     CTransactionRef tx;\n     uint256 hashBlock = uint256();\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock))\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n     switch (rf) {"
      },
      {
        "sha": "94be223858fff200cdc5a35103dc147c2beef7fc",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -1918,7 +1918,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             for (const CTxIn& in : tx->vin) {\n                 CTransactionRef tx_in;\n                 uint256 hashBlock;\n-                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock)) {\n                     throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n                 }\n "
      },
      {
        "sha": "6ccead2fdd258649dba3c3d3b30335f02159941d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -67,12 +67,11 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n             RPCHelpMan{\"getrawtransaction\",\n-                \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n-                \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n-                \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n-                \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n-                \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n-            \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n+                \"\\nBy default this function only works for mempool transactions. When called with a blockhash\\n\"\n+                \"argument, getrawtransaction will return the transaction if the specified block is available and\\n\"\n+                \"the transaction is found in that block. When called without a blockhash argument, getrawtransaction\\n\"\n+                \"will return the transaction if it is in the mempool, or if -txindex is enabled and the transaction\\n\"\n+                \"is in a block in the blockchain.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n             \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n@@ -175,7 +174,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     CTransactionRef tx;\n     uint256 hash_block;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, blockindex)) {\n         std::string errmsg;\n         if (blockindex) {\n             if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n@@ -270,7 +269,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     if (pblockindex == nullptr)\n     {\n         CTransactionRef tx;\n-        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) || hashBlock.IsNull())\n+        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock) || hashBlock.IsNull())\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {"
      },
      {
        "sha": "71dda006218202c825b80a4a1f1ec7c66f67e9d1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -994,13 +994,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n  * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n  * If blockIndex is provided, the transaction is fetched from the corresponding block.\n  */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, const CBlockIndex* const block_index)\n {\n-    CBlockIndex* pindexSlow = blockIndex;\n-\n     LOCK(cs_main);\n \n-    if (!blockIndex) {\n+    if (!block_index) {\n         CTransactionRef ptx = mempool.get(hash);\n         if (ptx) {\n             txOut = ptx;\n@@ -1010,20 +1008,13 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n         if (g_txindex) {\n             return g_txindex->FindTx(hash, hashBlock, txOut);\n         }\n-\n-        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n-        }\n-    }\n-\n-    if (pindexSlow) {\n+    } else {\n         CBlock block;\n-        if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n+        if (ReadBlockFromDisk(block, block_index, consensusParams)) {\n             for (const auto& tx : block.vtx) {\n                 if (tx->GetHash() == hash) {\n                     txOut = tx;\n-                    hashBlock = pindexSlow->GetBlockHash();\n+                    hashBlock = block_index->GetBlockHash();\n                     return true;\n                 }\n             }"
      },
      {
        "sha": "1d00124ab78b94e975930e6f38e266f7f54c1861",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -269,7 +269,7 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, const CBlockIndex* const blockIndex = nullptr);\n /**\n  * Find the best known block, and make it the tip of the block chain\n  *"
      },
      {
        "sha": "1efc50e71faa432e5130a620e1f7d90bb2bc8299",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -43,22 +43,26 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n+        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [\n             [\n                 \"-rpcserialversion=0\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n+                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n+                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=536870915\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n+                \"-txindex\"\n             ],\n         ]\n "
      },
      {
        "sha": "72455a0788c148d145844e2e98ce65cc62fd5208",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -41,7 +41,8 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [[\"-rest\"], []]\n+        # TODO: remove -txindex. Currently required for getrawtransaction call.\n+        self.extra_args = [[\"-rest\", \"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1e10280e603e9541e5e9b92a6b9f78208f769021",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -19,6 +19,8 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n+       # TODO: remove -txindex. Currently required for getrawtransaction call.\n+        self.extra_args = [[], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a97d75362666cd810ca9476ec70453f5efef190a",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -42,7 +42,8 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n+        # TODO: remove -txindex. Currently required for getrawtransaction call.\n+        self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "2b684349cedd838f1716a334a847ce2c8b453e9c",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -18,7 +18,8 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n+        # TODO: remove -txindex. Currently required for getrawtransaction call.\n+        self.extra_args = [[\"-minrelaytxfee=0.00001\", \"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "daae2ed3c02e1c99e564772d0efae5b0370fc59b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04da9f4834e1651da65ceb6379950cef9450591c/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=04da9f4834e1651da65ceb6379950cef9450591c",
        "patch": "@@ -23,6 +23,8 @@ class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        # TODO: remove -txindex. Currently required for getrawtransaction call.\n+        self.extra_args = [[], [], [\"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  }
]