DrahtBot,2019-01-14T02:18:09Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14802](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14802.html) (rpc: faster getblockstats using BlockUndo d",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-453888281,453888281,
laanwj,2019-01-14T15:37:30Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-454048324,454048324,
MarcoFalke,2019-01-14T15:48:15Z,"Slightly tend to NACK. If I am not mistaken, this will force some user to enable `-txindex`, which seems unintended. Otherwise they might run into a race condition where they are first notified of a tx in the mempool, then try to `getrawtransaction` that tx, which might sometimes fail because it was added to a block in the meantime.",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-454052375,454052375,
jnewbery,2019-01-14T15:53:08Z,"> Otherwise they might run into a race condition where they are first notified of a tx in the mempool, then try to getrawtransaction that tx, which might sometimes fail because it was added to a block in the meantime.\n\nEven without this change, that race condition exists (if the tx's outputs are spent in the same block).\n\nI think the race is sufficiently rare that it's not realistically an",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-454054251,454054251,
amitiuttarwar,2019-01-18T07:39:06Z,thanks for the feedback @jnewbery. LMK if the PR looks okay now.  ,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-455454555,455454555,
amitiuttarwar,2019-01-21T06:00:40Z,ok updated so this PR focuses solely on changes to `getrawtransaction`. ,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-455957433,455957433,
laanwj,2019-01-21T17:43:15Z,I think this needs mention in the release notes due to changed `getrawtransaction` semantics?,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-456152421,456152421,
amitiuttarwar,2019-01-24T06:36:43Z,"AppVeyor build is failing on a test that passes locally. I'll look into it soon, but if anyone cruises through here and has any pointers (first time using AppVeyor), feel free to share :) ",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-457084144,457084144,
jnewbery,2019-01-24T14:53:51Z,AppVeyor has a lot of spurious failures. It can be ignored!,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-457225044,457225044,
jnewbery,2019-01-29T21:43:07Z,utACK 04da9f4834e1651da65ceb6379950cef9450591c,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458718652,458718652,
promag,2019-01-29T23:13:56Z,If `-txindex` is enabled then it should be used first? Is there another reason to enable it other than speed up transaction lookup (so it doesn't stress cs_main or mempool.cs under load)? Just asking it now since this PR changes its behavior.,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458745557,458745557,
amitiuttarwar,2019-01-30T01:14:40Z,"hey @promag, can you clarify your questions?\n- reason to enable `-txindex` for users running bitcoind? or in the tests? \n- what changed behavior are you referring to? the way `GetTransaction` behaves when `-txindex` has not changed much. ",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458772552,458772552,
promag,2019-01-30T15:24:25Z,@amitiuttarwar decided to create an issue with the question #15293.,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458984447,458984447,
jnewbery,2019-01-30T15:29:10Z,"I think the question about whether to try txindex before mempool can be disregarded in this PR, since it doesn't change that behaviour. #15293 can track that question, and the change described there could be merged before or after this PR if it's wanted.",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458986284,458986284,
promag,2019-01-30T15:44:13Z,"@jnewbery indeed a separate discussion, that's why I've created an issue. PR title and commit message could be more clear, like ""Remove lookup to UTXO set from GetTransaction"".\n\nutACK 04da9f4.",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458992283,458992283,
MarcoFalke,2019-01-30T15:55:40Z,utACK 04da9f4834e1651da65ceb6379950cef9450591c,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-458997013,458997013,
promag,2019-01-30T16:21:53Z,"Restarted appveyor, which failed with\n```\n2019-01-27T02:59:07.394000Z TestFramework (ERROR): Assertion failed \n Traceback (most recent call last):\n   File ""C:\projects\bitcoin\test\functional\test_framework\test_framework.py"", line 173, in main\n     self.run_test()\n   File ""C:\projects\bitcoin/test/functional/wallet_txn_doublespend.py"", line 114, in run_test\n     sync_blocks(self.nod",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-459007426,459007426,
Empact,2019-02-01T10:16:48Z,"@promag if I'm not mistaken, I think #15253 will help debug that failure",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-459674101,459674101,
nikitasius,2019-06-05T11:53:12Z,"well thats a most shittiest update you did.\n\n* i obliged to call `gettransaction` to get blockhash for tx i need\n* after this i need to call `getrawtransaction` with blockhash from previous call.\n\nBefore i did all in 1 call, not here are 2. What next?",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-499051813,499051813,
MarcoFalke,2019-06-09T08:48:04Z,@nikitasius What is in `getrawtransaction` that is not in `gettransaction`?,https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-500196426,500196426,
sipa,2019-06-09T10:42:52Z,"@MarcoFalke I think the only missing thing is that `gettransaction` only returns the hex raw tx, and has no ability to decode it directly. You can of course use `decoderawtransaction` on the hex output from `gettransaction` to accomplish the same as `getrawtransaction` (with txindex, and without knowing the block hash).",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-500202500,500202500,
nikitasius,2019-06-10T09:11:51Z,"@MarcoFalke  in my case: `vin`s\nhere is a tx:\n![image](https://user-images.githubusercontent.com/3670331/59184938-80337f00-8b6f-11e9-99dd-8dc8d85170a7.png)\n\n* `listunspent 3`\n```json\n[\n  {\n    ""txid"": ""b423b2b22d6d74376de2887c07f7c84ae890a93d541fcc6dbf3686f2923b2753"",\n    ""vout"": 0,\n    ""address"": ""2N4p68W5AfTJiEX6B5DUgp2eBWP1m2d9pSY"",\n    ""redeemScript"": ""0014c13a875f4565d9b",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-500348023,500348023,
jnewbery,2019-06-10T18:22:56Z,"Discussion should move to the issues linked from here rather than on this closed PR.\n\nI would like to make one observation about the last comment (https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-500348023). A lot of the complexity comes from the fact that you're trying to apply a 'from address'. Such a concept doesn't exist in bitcoin. A transaction can have multiple txins, each of ",https://github.com/bitcoin/bitcoin/pull/15159#issuecomment-500532670,500532670,
practicalswift,2019-01-14T13:42:47Z,"`pblockindex == nullptr` will always hold here, right?",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r247495265,247495265,src/rpc/rawtransaction.cpp
practicalswift,2019-01-14T13:43:06Z,"Missing whitespace after `,` :-)",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r247495398,247495398,test/functional/wallet_basic.py
jnewbery,2019-01-14T15:50:17Z,"I'd personally remove the `NOTE: ` here (adding ""Note:"" or ""Note that"" almost always adds zero information to a sentence :slightly_smiling_face: )",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r247544918,247544918,src/rpc/rawtransaction.cpp
fanquake,2019-01-18T08:13:55Z,"This doesn't currently compile, looks like you are missing a comma here.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r248956084,248956084,src/rpc/rawtransaction.cpp
amitiuttarwar,2019-01-18T15:48:51Z,oops. fixed.,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249089884,249089884,src/rpc/rawtransaction.cpp
jnewbery,2019-01-18T16:01:39Z,Should be part of the first commit.,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249095000,249095000,src/rpc/rawtransaction.cpp
jnewbery,2019-01-18T16:02:30Z,changes to this file should be part of the second commit,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249095319,249095319,test/functional/rpc_txoutproof.py
jnewbery,2019-01-18T16:03:50Z,I'm still not thrilled about adding `txindex` to a bunch of tests. See my comment here: https://github.com/bitcoin/bitcoin/pull/13931/files#r216084729,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249095786,249095786,test/functional/feature_segwit.py
amitiuttarwar,2019-01-21T06:01:22Z,"I added a todo / note on this particular file & am happy to work on updating tests in a future PR.\nTo clarify, this PR adds `txindex` to many tests. Are you commenting on the set as a whole, or specifically these `feature_segwit` tests?",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249332216,249332216,test/functional/feature_segwit.py
jnewbery,2019-01-22T22:22:03Z,This should be in the follow-up PR (for changing gettxoutproof),https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249984351,249984351,src/rpc/rawtransaction.cpp
jnewbery,2019-01-22T22:23:06Z,"I would add a short comment to each of the tests. Something like ""txindex required for getrawtransaction call""",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r249984643,249984643,test/functional/feature_segwit.py
amitiuttarwar,2019-01-24T05:31:11Z,Doesn't this functionality change with this PR because gettxoutproof uses GetTransaction which is no longer checking the unspent utxo set as per the changes here: https://github.com/bitcoin/bitcoin/pull/15159/files/94af589358f2e1ede359263494535cda67313c8d#diff-24efdb00bfbe56b140fb006b562cc70bL1014,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250470687,250470687,src/rpc/rawtransaction.cpp
amitiuttarwar,2019-01-24T05:37:13Z,"I added todos to the tests. Not my favorite to be littering the code, but IMO a comment without the todo makes it seem intentional instead of transient.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250471483,250471483,test/functional/feature_segwit.py
jnewbery,2019-01-24T16:29:15Z,"no. That's what I thought originally (which prompted my comment here: https://github.com/bitcoin/bitcoin/pull/13931#discussion_r216090167). In fact, in `gettxoutproof()`, `GetTransaction()` is currently called with `fAllowSlow` set to `false` and `blockIndex` set to `nullptr`. That means that the change to `GetTransaction()` makes no change to the behaviour of `gettxoutproof()`.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250680353,250680353,src/rpc/rawtransaction.cpp
jnewbery,2019-01-24T16:40:20Z,Remove `by default` here. The unspent UTXO set is never checked after this PR.,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250685039,250685039,doc/release-notes.md
jnewbery,2019-01-24T16:44:23Z,This sentence is a bit imprecise. I think it'd be better to give the exact logic (if called with blockhash: that block is checked; if called without blockhash and txindex disabled: mempool is checked; if called without blockhash and txindex enabled: mempool and txindex is checked),https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250686715,250686715,doc/release-notes.md
MarcoFalke,2019-01-24T23:17:46Z,"`getrawtransaction` is never called in this test, it seems",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250814757,250814757,test/functional/rpc_psbt.py
MarcoFalke,2019-01-24T23:53:15Z,"Also, I don't think those TODOs should be added at all. They get added and never fixed, then get stale.\n\nRegardless, fixing the TODO would require to implement some sort of (in-memory) database for transactions in some tests? Might as well just use the txindex feature of Bitcoin Core, with the benefit that it gets more test exposure.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250822398,250822398,test/functional/rpc_psbt.py
Empact,2019-01-25T00:51:22Z,nit: `block_index` could be `const CBlockIndex* const block_index`,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r250833077,250833077,src/validation.cpp
jnewbery,2019-01-25T15:32:55Z,"I disagree. `-txindex` is not how we recommend people run bitcoind. It's best that the functional tests reflect the way that we expect bitcoind to be run. Adding unusual options just to make the test run means that we could introduce a regression and it not get caught by the test suite (eg `getrawtransaction` stops working unless `-txindex` is set).\n\n@amitiuttarwar has already stated that she ",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r251026102,251026102,test/functional/rpc_psbt.py
amitiuttarwar,2019-01-27T00:56:30Z,ahhh. gotcha,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r251217888,251217888,src/rpc/rawtransaction.cpp
amitiuttarwar,2019-01-27T01:25:53Z,"> `getrawtransaction` is never called in this test, it seems\n\nNot directly, but invoked through `test_framework.util#find_output`.\nhttps://github.com/bitcoin/bitcoin/blob/02021ec65ba65cb36a5412793a8c538936131044/test/functional/rpc_psbt.py#L166\nhttps://github.com/bitcoin/bitcoin/blob/02021ec65ba65cb36a5412793a8c538936131044/test/functional/test_framework/util.py#L418",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r251218388,251218388,test/functional/rpc_psbt.py
amitiuttarwar,2019-01-27T02:38:01Z,👌 updated,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r251219475,251219475,src/validation.cpp
MarcoFalke,2019-01-29T22:58:58Z,"Ah thanks, I guess it is fine to leave as is.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r252053873,252053873,test/functional/rpc_psbt.py
MarcoFalke,2019-01-30T15:52:30Z,"nit: Could move this up to the first line, since this is the oneline-summary of what the function does. The paragraph above is the implementation detail and interface documentation.\nFeel free to ignore, since you dind't introduce the issue.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r252316408,252316408,src/rpc/rawtransaction.cpp
MarcoFalke,2019-01-30T16:15:59Z,"Similarly, you could mention the corresponding raw transaction getter rpcs for the mempool and wallet, but that is another perpendicular doc cleanup fix.",https://github.com/bitcoin/bitcoin/pull/15159#discussion_r252327563,252327563,src/rpc/rawtransaction.cpp
MarcoFalke,2019-01-30T16:18:21Z,doc-nit: Change applies to rpc *and rest*,https://github.com/bitcoin/bitcoin/pull/15159#discussion_r252328606,252328606,doc/release-notes.md
