DrahtBot,2020-04-22 19:34:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18531 (rpc: Assert that RPCArg names are equal to CRPCCommand ones by MarcoFalke)\n\nIf you consider this pull request im",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-617987356,617987356,
practicalswift,2020-04-22 19:54:03,"Oh, great find!\n\nHow did you find this one and in what commit was it introduced? :)",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-618000451,618000451,
MarcoFalke,2020-04-22 20:39:59,"\n<details><summary>Good question. This is the traceback:</summary>\n\n\n\n\n```\n118/145 - rpc_getblockstats.py failed, Duration: 3 s\n\nstdout:\n\n2020-04-15T15:10:09.960000Z TestFramework (INFO): Initializing test directory /home/travis/build/bitcoin/bitcoin/ci/scratch/test_runner/test_runner_‚Çø_üèÉ_20200415_145914/rpc_getblockstats_25\n\n2020-04-15T15:10:12.198000Z TestFramework (ERR",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-618027664,618027664,
MarcoFalke,2020-04-22 20:54:13,I might write a test tomorrow with steps to reproduce,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-618035042,618035042,
MarcoFalke,2020-04-23 18:24:01,"@practicalswift This is a race, so I couldn't find a test that is reproducible. Though, I have attached a unit test, that fails when run long enough in a loop.\n\nAll you need to do is `./configure  --with-sanitizers=address` and then run the tests with\n\n```\nexport ASAN_OPTIONS=detect_leaks=0\nmake\nwhile ./src/test/test_bitcoin -t validationinterface_tests/unregister_validation_interfac",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-618569936,618569936,
MarcoFalke,2020-04-23 20:47:51,"If someone has issues reproducing the crash in the unit test, the following diff might help:\n\n```diff\ndiff --git a/src/validationinterface.cpp b/src/validationinterface.cpp\nindex 11000774c0..6a311eeb44 100644\n--- a/src/validationinterface.cpp\n+++ b/src/validationinterface.cpp\n@@ -11,6 +11,7 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <schedu",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-618660696,618660696,
fanquake,2020-04-26 05:36:54,"Concept ACK. Running just fa9f3a51897d5457492f84f7c8a41fea783d687d (no additional patch), I generally see a crash between 5 - 20 iterations:\n```bash\n/bitcoin# while ./src/test/test_bitcoin -t validationinterface_tests/unregister_validation_interface_race --catch_system_errors=no  ; do true; done\nRunning 1 test case...\n\n*** No errors detected\nRunning 1 test case...\n\n*** No errors de",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-619485764,619485764,
MarcoFalke,2020-04-26 11:47:20,"cc @promag , @ryanofsky You seem qualified to review this?",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-619536472,619536472,
ryanofsky,2020-04-27 13:46:20,Could you revert or move formatting changes in validationinterface.h/cpp files to a separate commit? I'm starting at that looking for actual changes but is it all reformatting?,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-619996817,619996817,
ryanofsky,2020-04-27 13:51:44,"Concept ACK. This is a good find and all changes look ok, but there's so much going on it's a headache to reverse engineer everything that's happening. Suggest making one change per commit or perhaps dropping some of the changes",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-619999960,619999960,
ryanofsky,2020-04-27 13:55:47,"It is also interesting if the bug described https://github.com/bitcoin/bitcoin/pull/18742#issue-407482998 started happening recently. Unless I missed something, it seems like the bug has been present a very long time, and I wonder if #18524 made it more likely to happen.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-620002392,620002392,
MarcoFalke,2020-04-27 14:25:17,"Addressed feedback by @ryanofsky. No code changes, just more commits.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-620020964,620020964,
MarcoFalke,2020-04-27 15:06:17,"Force pushed again. Still no code changes, just more text in commit bodies.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-620044888,620044888,
MarcoFalke,2020-04-28 12:57:17,Open-Close to re-run ci. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-620589423,620589423,
MarcoFalke,2020-05-06 13:06:19,@promag @fanquake  Mind to re-ACK?,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-624637352,624637352,
jnewbery,2020-05-13 22:31:02,"> This commit is (intentionally) adding a broken test. The test is broken\n> because it registering a subscriber object that can go out of scope\n> while events are still being sent.\n> \n> If the test happens to fail (e.g. during a git bisect), failure is\n> expected and commit can be marked skip.\n\nWhy add a broken test to the git history? Can't you just add the test as the final commit?",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628279682,628279682,
promag,2020-05-13 22:35:59,"@jnewbery you have to rebase the test without the fix to see the test failing. What you suggest is simpler with functional tests - you can go back and forth on python tests while using the same binary.\n\nMaybe add `[skip ci]` to commit.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628281410,628281410,
promag,2020-05-13 22:48:09,"This still doesn't prevent new cases right? I think the following would fix current cases and prevent new ones:\n```diff\n@@ -129,12 +129,15 @@ void RegisterValidationInterface(CValidationInterface* callbacks)\n\n void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n {\n-    UnregisterValidationInterface(callbacks.get());\n+    if (g_signals.m_internals",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628285489,628285489,
jnewbery,2020-05-13 22:55:52,"> you have to rebase the test without the fix to see the test failing.\n\n@promag - yes, I understand that, but the guidance I've always heard is to add tests afterwards in order to not break git bisect. That seems like a good policy to me. I don't understand what's different about this PR than others.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628287865,628287865,
promag,2020-05-13 22:59:11,@jnewbery in this case it's the test that's fixed so what you suggest is to just add the ~~file~~ test and then explain how it could be broken. ,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628288900,628288900,
MarcoFalke,2020-05-13 23:50:42,"I can put the test in `/** ... */` in the first commit. This way:\n\n* People can still reproduce by removing the `/**` and `*/` and then running the test in a loop until it fails.\n* The diff in the last commit is applied to the test in the same way that it is applied to the miner, ""proving"" the fix is correct.\n* It doesn't break git bisect (well to some extent, as the bug will always exist ",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628304743,628304743,
MarcoFalke,2020-05-14 00:00:11,"Pushed an empty diff to defuse the test. Added instructions to the commit message on how to add the fuse back in.\n\n```\n$ git diff fa6d1a04ed 7777f2a4bb | wc\n      0       0       0\n",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628307538,628307538,
promag,2020-05-14 00:48:29,@MarcoFalke did you see https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628285489?,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628321002,628321002,
MarcoFalke,2020-05-14 10:57:25,"@promag Yes, but that causes a deadlock on shutdown. Also the shutdown sequence should be bug free right now because the message handler is stopped before any unregisters should happen. I still like your idea, but I think it should be prepared, reviewed and merged for 0.21, not as a backport.\n\nFor the backport we should aim at a fix that has little chance of breaking stuff. The fix here should",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628557221,628557221,
laanwj,2020-05-14 11:21:01,Code review ACK 7777f2a4bb1f9d843bc50a4e35085cfbb2808780,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628568075,628568075,
promag,2020-05-14 11:43:31,Code review ACK 7777f2a4bb1f9d843bc50a4e35085cfbb2808780.,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628578705,628578705,
MarcoFalke,2020-05-14 12:44:46,"For backport, only the first and last commit are needed.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628609299,628609299,
fanquake,2020-05-14 12:48:57,"> For backport, only the first and last commit are needed.\n\nThanks. Will have this up in #18973 shortly.",https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628611515,628611515,
fjahr,2020-05-14 13:02:24,post merge code review ACK 7777f2a4bb1f9d843bc50a4e35085cfbb2808780,https://github.com/bitcoin/bitcoin/pull/18742#issuecomment-628619284,628619284,
promag,2020-04-27 08:22:09,An alternative is to call `SyncWithValidationInterfaceQueue` here.,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415610307,415610307,src/rpc/mining.cpp
MarcoFalke,2020-04-27 11:36:38,Alternative to what? The notification we are listening to is never put in the queue.,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415737404,415737404,src/rpc/mining.cpp
promag,2020-04-27 11:52:08,I mean that after `UnregisterValidationInterface + SyncWithValidationInterfaceQueue` there is no pointer to `sc` in validation queue.,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415746758,415746758,src/rpc/mining.cpp
MarcoFalke,2020-04-27 11:54:05,How does `SyncWithValidationInterfaceQueue` prevent new notifications from being scheduled for `sc`?,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415748007,415748007,src/rpc/mining.cpp
promag,2020-04-27 12:02:50,"New notifications won't be scheduled because the `UnregisterValidationInterface` above. Only problem is a concurrent notification being called, so `SyncWithValidationInterfaceQueue` ensures that case doesn't happen.",https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415753443,415753443,src/rpc/mining.cpp
MarcoFalke,2020-04-27 12:19:05,"Now I understand. Yeah, correct.",https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415763255,415763255,src/rpc/mining.cpp
ryanofsky,2020-04-27 13:48:17,This is also unrelated cleanup?,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415827675,415827675,src/rpc/mining.cpp
ryanofsky,2020-04-27 13:49:00,This is part of the bugfix or an optimization? Or a different bugfix?,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415828236,415828236,src/test/validation_block_tests.cpp
MarcoFalke,2020-04-27 14:23:41,"I don't know, the compiler told me to do it IIRC",https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415856554,415856554,src/rpc/mining.cpp
MarcoFalke,2020-04-27 14:24:16,"Thanks, split the optimization into a separate commit",https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415857001,415857001,src/test/validation_block_tests.cpp
ryanofsky,2020-04-27 14:53:21,"In commit ""test: Add unregister_validation_interface_race test"" (fa9f3a51897d5457492f84f7c8a41fea783d687d)\n\nNote: This commit is (intentionally) adding a broken test. The test is broken because it registering a subscriber object that can go out of scope while events are still being sent.\n\nMight be worth saying in the commit message that if the test happens to fail during a git bisect, fail",https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415882262,415882262,src/test/validationinterface_tests.cpp
MarcoFalke,2020-04-27 15:05:49,Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/18742#discussion_r415893114,415893114,src/test/validationinterface_tests.cpp
