[
  {
    "sha": "b8fce8f4818e9ad27310e5e550df148f253b5c69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGZjZThmNDgxOGU5YWQyNzMxMGU1ZTU1MGRmMTQ4ZjI1M2I1YzY5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2020-04-12T12:11:39Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2020-04-12T12:14:51Z"
      },
      "message": "Display command line usage to console without requiring X Windows\n\nFixes #18602",
      "tree": {
        "sha": "08c47e9174885552b59f43ae4f25d50d37c8e7f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08c47e9174885552b59f43ae4f25d50d37c8e7f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8fce8f4818e9ad27310e5e550df148f253b5c69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8fce8f4818e9ad27310e5e550df148f253b5c69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8fce8f4818e9ad27310e5e550df148f253b5c69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8fce8f4818e9ad27310e5e550df148f253b5c69/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5623ba89f050182ce9b1f570f3736b272b544b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623ba89f050182ce9b1f570f3736b272b544b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623ba89f050182ce9b1f570f3736b272b544b2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d983ade1ecff717f32279f698f43417e7768c687",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8fce8f4818e9ad27310e5e550df148f253b5c69/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8fce8f4818e9ad27310e5e550df148f253b5c69/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b8fce8f4818e9ad27310e5e550df148f253b5c69",
        "patch": "@@ -30,8 +30,10 @@\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <noui.h>\n+#include <init.h>\n #include <ui_interface.h>\n #include <uint256.h>\n+#include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n \n@@ -431,6 +433,32 @@ int GuiMain(int argc, char* argv[])\n     QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n #endif\n \n+#if defined(WIN32)\n+#else\n+    node->setupServerArgs();\n+    SetupUIArgs();\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error))\n+        return InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+\n+    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n+        std::string strUsage = PACKAGE_NAME \" version \" + FormatFullVersion() + \"\\n\";\n+\n+        if (gArgs.IsArgSet(\"-version\"))\n+        {\n+            strUsage += FormatParagraph(LicenseInfo()) + \"\\n\";\n+        }\n+        else\n+        {\n+            strUsage += \"\\nUsage:  bitcoin-qt [options]                     Start \" PACKAGE_NAME \"\\n\";\n+            strUsage += \"\\n\" + gArgs.GetHelpMessage();\n+        }\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+        return EXIT_SUCCESS;\n+    }\n+#endif\n+\n     BitcoinApplication app(*node);\n \n     // Register meta types used for QMetaObject::invokeMethod and Qt::QueuedConnection\n@@ -446,6 +474,7 @@ int GuiMain(int argc, char* argv[])\n     qRegisterMetaType<std::function<void()>>(\"std::function<void()>\");\n     qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n \n+#if defined(WIN32)\n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n     node->setupServerArgs();\n@@ -459,6 +488,7 @@ int GuiMain(int argc, char* argv[])\n             QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n     }\n+#endif\n \n     // Now that the QApplication is setup and we have parsed our parameters, we can set the platform style\n     app.setupPlatformStyle();"
      }
    ]
  }
]