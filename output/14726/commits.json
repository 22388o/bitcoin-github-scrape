[
  {
    "sha": "fa520e72f7b5964cea1ade666e71212914556cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUyMGU3MmY3YjU5NjRjZWExYWRlNjY2ZTcxMjEyOTE0NTU2Y2Yz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-13T23:22:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-14T17:11:06Z"
      },
      "message": "lint: Must use RPCHelpMan to generate the RPC docs",
      "tree": {
        "sha": "882c4e881b8397568e5c41139c128446d8994aab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/882c4e881b8397568e5c41139c128446d8994aab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa520e72f7b5964cea1ade666e71212914556cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb7FcqAAoJEM4rdWl+aaVIUkYL/39emSTfFd+CmTg1VbTfI8wD\nanx2W3FyQgwSLOKoZ+ONpeDzrIjrri5ENQOGnqLJWNFvj4B5TmNW6K+xmXtTe/sj\nJi/cGGMZFG6+HbIfaas0X2s8QWkxbXxypoulEVg166z5RbR/eoDoenxEGN0jclqf\nNG0BjhEHq1s2/vhcQTQKylteqVn8SDBx8rX1BqP5WCb31mM7ZMneCprHDBBik/b2\n9KbpZPPNJyIGdGCiLYekmCHzGGTx5B5QtCigYTkgiERR2mjaGqCiDrCW/9q2pDwf\nazMaXLW9KBYAXFnpBS5F0yd9ZWzk6j1ecmCpq2f+gXwMUkk1D3cPOWGPWDNv6+6z\nPW+oVsdCcZVWuxza3qcHzecnwO0kJi7ivNZ1LOwJjHEBVpW5IwOsEzxSlVxmiX8b\n22MUUSKLOefyFNifRKQ6Uioyu/OAWUEfTrXHAnJZy9pMEC99rmxARsMA7X8mbXrM\nJV1aUzvopNLayNBo5P2l1PxXRxmkbg+q24XiFkiHMw==\n=cyFh\n-----END PGP SIGNATURE-----",
        "payload": "tree 882c4e881b8397568e5c41139c128446d8994aab\nparent e74649e95122c9c61aadf607461cf701c3953f88\nauthor MarcoFalke <falke.marco@gmail.com> 1542151347 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1542215466 -0500\n\nlint: Must use RPCHelpMan to generate the RPC docs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa520e72f7b5964cea1ade666e71212914556cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa520e72f7b5964cea1ade666e71212914556cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa520e72f7b5964cea1ade666e71212914556cf3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e74649e95122c9c61aadf607461cf701c3953f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e74649e95122c9c61aadf607461cf701c3953f88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e74649e95122c9c61aadf607461cf701c3953f88"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "602396745f219c0312143b478ce868d40043453a",
        "filename": "test/lint/lint-rpc-help.sh",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa520e72f7b5964cea1ade666e71212914556cf3/test/lint/lint-rpc-help.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa520e72f7b5964cea1ade666e71212914556cf3/test/lint/lint-rpc-help.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-rpc-help.sh?ref=fa520e72f7b5964cea1ade666e71212914556cf3",
        "patch": "@@ -0,0 +1,17 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+EXIT_CODE=0\n+non_autogenerated_help=$(grep --perl-regexp --null-data --only-matching 'runtime_error\\(\\n\\s*\".*\\\\n\"\\n' $(git ls-files -- \"*.cpp\"))\n+if [[ ${non_autogenerated_help} != \"\" ]]; then\n+    echo \"Must use RPCHelpMan to generate the help for the following RPC methods:\"\n+    echo \"${non_autogenerated_help}\"\n+    echo\n+    EXIT_CODE=1\n+fi\n+exit ${EXIT_CODE}"
      }
    ]
  },
  {
    "sha": "fa91e8eda541acdb78ca481b74605639f319c108",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkxZThlZGE1NDFhY2RiNzhjYTQ4MWI3NDYwNTYzOWYzMTljMTA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-20T12:19:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-14T20:33:15Z"
      },
      "message": "Use RPCHelpMan for all RPCs",
      "tree": {
        "sha": "c6f299e2daa4c2428ca2039a538b4686a1c1d5f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6f299e2daa4c2428ca2039a538b4686a1c1d5f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa91e8eda541acdb78ca481b74605639f319c108",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb7IaLAAoJEM4rdWl+aaVI7CUMAMvKdW8jiWTnFLzgTgcVzR79\nbM89iLUn2imdGuaFJPr3QdPqFvwq4qx9NdL4O9Um7MPXienDD1v6g3VDulSt5Tt0\nsVf0qLd25/WU9wbtcTOJeQOf3zqi9M69l+Lozh7cgETmMoKHtVSC+IeJVWCqYnvu\n8nLwcarddi/seTkm5Fq27f28a3IbJ1TZEIRqhTsKoVxhLf9qCvfd+Zcu/FDgW0ND\n0GBtKN8pPcG5boWDViUuLe6Xz5XhcoI4rHEzfFPv0S9l/QhLQJ5uPk8SYqYF9A7+\niIt6OplEnCsDW0rcepbIN7kjTlyg41YdrZYB/TOIUw5qA9Cojr9+Otm8b9m5pMZP\npgrE+x3QEjIzHnTb5bw5PlbbCRIgDfwg7pwW0AjS2Jr6dhZGWLlLVaYyWTrW+udE\nQr2UEOJ8xtibY5ll5bT6Y3mmmOpO3MsxccVcI8dekxZA4H7JQjc0iXSJO56MAv1p\nnYNvr8vLaGDXQHx9HUuUXfYMqvsSINMhOs4Lmw06nA==\n=Mvyf\n-----END PGP SIGNATURE-----",
        "payload": "tree c6f299e2daa4c2428ca2039a538b4686a1c1d5f6\nparent fa520e72f7b5964cea1ade666e71212914556cf3\nauthor MarcoFalke <falke.marco@gmail.com> 1540037984 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1542227595 -0500\n\nUse RPCHelpMan for all RPCs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa91e8eda541acdb78ca481b74605639f319c108",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa91e8eda541acdb78ca481b74605639f319c108",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa91e8eda541acdb78ca481b74605639f319c108/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa520e72f7b5964cea1ade666e71212914556cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa520e72f7b5964cea1ade666e71212914556cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa520e72f7b5964cea1ade666e71212914556cf3"
      }
    ],
    "stats": {
      "total": 1434,
      "additions": 1008,
      "deletions": 426
    },
    "files": [
      {
        "sha": "3db4fe0e802b7d96f2f40c4a56873f592d4379ea",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 194,
        "deletions": 81,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -163,8 +163,9 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getblockcount\\n\"\n-            \"\\nReturns the number of blocks in the longest blockchain.\\n\"\n+            RPCHelpMan{\"getblockcount\",\n+                \"\\nReturns the number of blocks in the longest blockchain.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"n    (numeric) The current block count\\n\"\n             \"\\nExamples:\\n\"\n@@ -180,8 +181,9 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getbestblockhash\\n\"\n-            \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n+            RPCHelpMan{\"getbestblockhash\",\n+                \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"\\\"hex\\\"      (string) the block hash, hex-encoded\\n\"\n             \"\\nExamples:\\n\"\n@@ -207,9 +209,13 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"waitfornewblock (timeout)\\n\"\n-            \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n-            \"\\nReturns the current block on timeout or exit.\\n\"\n+            RPCHelpMan{\"waitfornewblock\",\n+                \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n+                \"\\nReturns the current block on timeout or exit.\\n\",\n+                {\n+                    {\"timeout\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n@@ -245,9 +251,14 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"waitforblock <blockhash> (timeout)\\n\"\n-            \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n-            \"\\nReturns the current block on timeout or exit.\\n\"\n+            RPCHelpMan{\"waitforblock\",\n+                \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n+                \"\\nReturns the current block on timeout or exit.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR, false},\n+                    {\"timeout\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\" (required, string) Block hash to wait for.\\n\"\n             \"2. timeout       (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n@@ -287,10 +298,15 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"waitforblockheight height ( timeout )\\n\"\n-            \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n-            \"of the current tip.\\n\"\n-            \"\\nReturns the current block on timeout or exit.\\n\"\n+            RPCHelpMan{\"waitforblockheight\",\n+                \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n+                \"of the current tip.\\n\"\n+                \"\\nReturns the current block on timeout or exit.\\n\",\n+                {\n+                    {\"height\", RPCArg::Type::NUM, false},\n+                    {\"timeout\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. height  (int, required) Block height to wait for.\\n\"\n             \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n@@ -329,8 +345,9 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0) {\n         throw std::runtime_error(\n-            \"syncwithvalidationinterfacequeue\\n\"\n-            \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\"\n+            RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n+                \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\", {}}\n+                .ToString() +\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n@@ -344,8 +361,9 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getdifficulty\\n\"\n-            \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n+            RPCHelpMan{\"getdifficulty\",\n+                \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n             \"\\nExamples:\\n\"\n@@ -478,8 +496,12 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getrawmempool ( verbose )\\n\"\n-            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            RPCHelpMan{\"getrawmempool\",\n+                \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\",\n+                {\n+                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n@@ -510,8 +532,13 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"getmempoolancestors txid ( verbose )\\n\"\n-            \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n+            RPCHelpMan{\"getmempoolancestors\",\n+                \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n             \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n@@ -574,8 +601,13 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"getmempooldescendants txid ( verbose )\\n\"\n-            \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n+            RPCHelpMan{\"getmempooldescendants\",\n+                \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n             \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n@@ -638,8 +670,12 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"getmempoolentry txid\\n\"\n-            \"\\nReturns mempool data for given transaction\\n\"\n+            RPCHelpMan{\"getmempoolentry\",\n+                \"\\nReturns mempool data for given transaction\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                   (string, required) The transaction id (must be in mempool)\\n\"\n             \"\\nResult:\\n\"\n@@ -671,8 +707,12 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"getblockhash height\\n\"\n-            \"\\nReturns hash of block in best-block-chain at height provided.\\n\"\n+            RPCHelpMan{\"getblockhash\",\n+                \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n+                {\n+                    {\"height\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. height         (numeric, required) The height index\\n\"\n             \"\\nResult:\\n\"\n@@ -696,9 +736,14 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getblockheader \\\"blockhash\\\" ( verbose )\\n\"\n-            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n-            \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n+            RPCHelpMan{\"getblockheader\",\n+                \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n+                \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"     (string, required) The block hash\\n\"\n             \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex-encoded data\\n\"\n@@ -774,10 +819,15 @@ static UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getblock \\\"blockhash\\\" ( verbosity ) \\n\"\n-            \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-            \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\"\n+            RPCHelpMan{\"getblock\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                    {\"verbosity\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n             \"2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\\n\"\n@@ -926,7 +976,11 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"pruneblockchain height\\n\"\n+            RPCHelpMan{\"pruneblockchain\", \"\",\n+                {\n+                    {\"height\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n@@ -975,9 +1029,11 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"gettxoutsetinfo\\n\"\n-            \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-            \"Note this call may take some time.\\n\"\n+            RPCHelpMan{\"gettxoutsetinfo\",\n+                \"\\nReturns statistics about the unspent transaction output set.\\n\"\n+                \"Note this call may take some time.\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n@@ -1017,8 +1073,14 @@ UniValue gettxout(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n-            \"\\nReturns details about an unspent transaction output.\\n\"\n+            RPCHelpMan{\"gettxout\",\n+                \"\\nReturns details about an unspent transaction output.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR, false},\n+                    {\"n\", RPCArg::Type::NUM, false},\n+                    {\"include_mempool\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n             \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n@@ -1097,8 +1159,13 @@ static UniValue verifychain(const JSONRPCRequest& request)\n     int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"verifychain ( checklevel nblocks )\\n\"\n-            \"\\nVerifies blockchain database.\\n\"\n+            RPCHelpMan{\"verifychain\",\n+                \"\\nVerifies blockchain database.\\n\",\n+                {\n+                    {\"checklevel\", RPCArg::Type::NUM, true},\n+                    {\"nblocks\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n             \"2. nblocks      (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n@@ -1194,8 +1261,9 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getblockchaininfo\\n\"\n-            \"Returns an object containing various state info regarding blockchain processing.\\n\"\n+            RPCHelpMan{\"getblockchaininfo\",\n+                \"Returns an object containing various state info regarding blockchain processing.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",              (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n@@ -1311,9 +1379,11 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getchaintips\\n\"\n-            \"Return information about all known tips in the block tree,\"\n-            \" including the main chain as well as orphaned branches.\\n\"\n+            RPCHelpMan{\"getchaintips\",\n+                \"Return information about all known tips in the block tree,\"\n+                \" including the main chain as well as orphaned branches.\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1428,8 +1498,9 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getmempoolinfo\\n\"\n-            \"\\nReturns details on the active state of the TX memory pool.\\n\"\n+            RPCHelpMan{\"getmempoolinfo\",\n+                \"\\nReturns details on the active state of the TX memory pool.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n@@ -1451,10 +1522,14 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"preciousblock \\\"blockhash\\\"\\n\"\n-            \"\\nTreats a block as if it were received before others with the same work.\\n\"\n-            \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n-            \"\\nThe effects of preciousblock are not retained across restarts.\\n\"\n+            RPCHelpMan{\"preciousblock\",\n+                \"\\nTreats a block as if it were received before others with the same work.\\n\"\n+                \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n+                \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as precious\\n\"\n             \"\\nResult:\\n\"\n@@ -1488,8 +1563,12 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"invalidateblock \\\"blockhash\\\"\\n\"\n-            \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n+            RPCHelpMan{\"invalidateblock\",\n+                \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as invalid\\n\"\n             \"\\nResult:\\n\"\n@@ -1526,9 +1605,13 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"reconsiderblock \\\"blockhash\\\"\\n\"\n-            \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n-            \"This can be used to undo the effects of invalidateblock.\\n\"\n+            RPCHelpMan{\"reconsiderblock\",\n+                \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n+                \"This can be used to undo the effects of invalidateblock.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"   (string, required) the hash of the block to reconsider\\n\"\n             \"\\nResult:\\n\"\n@@ -1563,8 +1646,13 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getchaintxstats ( nblocks \\\"blockhash\\\" )\\n\"\n-            \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\"\n+            RPCHelpMan{\"getchaintxstats\",\n+                \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n+                {\n+                    {\"nblocks\", RPCArg::Type::NUM, true},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).\\n\"\n             \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n@@ -1693,10 +1781,20 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4) {\n         throw std::runtime_error(\n-            \"getblockstats hash_or_height ( stats )\\n\"\n-            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n-            \"It won't work for some heights with pruning.\\n\"\n-            \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n+            RPCHelpMan{\"getblockstats\",\n+                \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+                \"It won't work for some heights with pruning.\\n\"\n+                \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n+                {\n+                    {\"hash_or_height\", RPCArg::Type::NUM, false},\n+                    {\"stats\", RPCArg::Type::ARR,\n+                        {\n+                            {\"height\", RPCArg::Type::STR, true},\n+                            {\"time\", RPCArg::Type::STR, true},\n+                        },\n+                        true, \"stats\"},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block\\n\"\n             \"2. \\\"stats\\\"              (array,  optional) Values to plot, by default all values (see result below)\\n\"\n@@ -1957,8 +2055,9 @@ static UniValue savemempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n-            \"savemempool\\n\"\n-            \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\"\n+            RPCHelpMan{\"savemempool\",\n+                \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\", {}}\n+                .ToString() +\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"savemempool\", \"\")\n             + HelpExampleRpc(\"savemempool\", \"\")\n@@ -2040,20 +2139,34 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"scantxoutset \\\"action\\\" [scanobjects,...]\\n\"\n-            \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n-            \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n-            \"Examples of output descriptors are:\\n\"\n-            \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n-            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n-            \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n-            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n-            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n-            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n-            \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n-            \"unhardened or hardened child keys.\\n\"\n-            \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            RPCHelpMan{\"scantxoutset\",\n+                \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n+                \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n+                \"Examples of output descriptors are:\\n\"\n+                \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n+                \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+                \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n+                \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+                \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+                \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+                \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n+                \"unhardened or hardened child keys.\\n\"\n+                \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n+                \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, false},\n+                    {\"scanobjects\", RPCArg::Type::ARR,\n+                        {\n+                            {\"descriptor\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, false},\n+                                    {\"range\", RPCArg::Type::NUM, true},\n+                                },\n+                                false, \"scanobjects\"},\n+                        },\n+                        false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\""
      },
      {
        "sha": "c0287ec17f0f5c4c13cb97a1ff4bac4952362508",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 39,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -87,10 +87,15 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getnetworkhashps ( nblocks height )\\n\"\n-            \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n-            \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n-            \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\"\n+            RPCHelpMan{\"getnetworkhashps\",\n+                \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n+                \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n+                \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n+                {\n+                    {\"nblocks\", RPCArg::Type::NUM, true},\n+                    {\"height\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n             \"2. height      (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n@@ -157,8 +162,14 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"generatetoaddress nblocks address (maxtries)\\n\"\n-            \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n+            RPCHelpMan{\"generatetoaddress\",\n+                \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n+                {\n+                    {\"nblocks\", RPCArg::Type::NUM, false},\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"maxtries\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. address      (string, required) The address to send the newly generated bitcoin to.\\n\"\n@@ -193,8 +204,9 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getmininginfo\\n\"\n-            \"\\nReturns a json object containing mining-related information.\"\n+            RPCHelpMan{\"getmininginfo\",\n+                \"\\nReturns a json object containing mining-related information.\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n@@ -232,8 +244,14 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n         throw std::runtime_error(\n-            \"prioritisetransaction \\\"txid\\\" dummy fee_delta\\n\"\n-            \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n+            RPCHelpMan{\"prioritisetransaction\",\n+                \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR, false},\n+                    {\"dummy\", RPCArg::Type::NUM, false},\n+                    {\"fee_delta\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n             \"2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.\\n\"\n@@ -295,15 +313,32 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getblocktemplate ( \\\"template_request\\\" )\\n\"\n-            \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n-            \"It returns data needed to construct a block to work on.\\n\"\n-            \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n-\n+            RPCHelpMan{\"getblocktemplate\",\n+                \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n+                \"It returns data needed to construct a block to work on.\\n\"\n+                \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+                \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+                \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n+                \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+                \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+                {\n+                    {\"template_request\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"mode\", RPCArg::Type::STR, true},\n+                            {\"capabilities\", RPCArg::Type::ARR,\n+                                {\n+                                    {\"support\", RPCArg::Type::STR, true},\n+                                },\n+                                true},\n+                            {\"rules\", RPCArg::Type::ARR,\n+                                {\n+                                    {\"support\", RPCArg::Type::STR, true},\n+                                },\n+                                true},\n+                        },\n+                        true, \"\\\"template_request\\\"\"},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. template_request         (json object, optional) A json object in the following spec\\n\"\n             \"     {\\n\"\n@@ -703,10 +738,14 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"submitblock \\\"hexdata\\\"  ( \\\"dummy\\\" )\\n\"\n-            \"\\nAttempts to submit new block to network.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n-\n+            RPCHelpMan{\"submitblock\",\n+                \"\\nAttempts to submit new block to network.\\n\"\n+                \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n+                {\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, false},\n+                    {\"dummy\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments\\n\"\n             \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n             \"2. \\\"dummy\\\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.\\n\"\n@@ -767,9 +806,13 @@ static UniValue submitheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"submitheader \\\"hexdata\\\"\\n\"\n-            \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n-            \"\\nThrows when the header is invalid.\\n\"\n+            RPCHelpMan{\"submitheader\",\n+                \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n+                \"\\nThrows when the header is invalid.\\n\",\n+                {\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments\\n\"\n             \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block header data\\n\"\n             \"\\nResult:\\n\"\n@@ -803,11 +846,16 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n-            \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n-            \"in BIP 141 (witness data is discounted).\\n\"\n+            RPCHelpMan{\"estimatesmartfee\",\n+                \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+                \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n+                \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n+                \"in BIP 141 (witness data is discounted).\\n\",\n+                {\n+                    {\"conf_target\", RPCArg::Type::NUM, false},\n+                    {\"estimate_mode\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n@@ -864,14 +912,19 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee conf_target (threshold)\\n\"\n-            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n-            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n-            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n-            \"         and the results it returns will change if the internal implementation changes.\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n-            \"defined in BIP 141 (witness data is discounted).\\n\"\n+            RPCHelpMan{\"estimaterawfee\",\n+                \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+                \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+                \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+                \"         and the results it returns will change if the internal implementation changes.\\n\"\n+                \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+                \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n+                \"defined in BIP 141 (witness data is discounted).\\n\",\n+                {\n+                    {\"conf_target\", RPCArg::Type::NUM, false},\n+                    {\"threshold\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\""
      },
      {
        "sha": "a6c90bd6d73ba37454892261c295e3ede622c616",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 20,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -32,12 +32,16 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"validateaddress \\\"address\\\"\\n\"\n-            \"\\nReturn information about the given bitcoin address.\\n\"\n-            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n-            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n-            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n-            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n+            RPCHelpMan{\"validateaddress\",\n+                \"\\nReturn information about the given bitcoin address.\\n\"\n+                \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+                \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+                \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+                \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n@@ -142,8 +146,14 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n         throw std::runtime_error(\n-            \"verifymessage \\\"address\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n-            \"\\nVerify a signed message\\n\"\n+            RPCHelpMan{\"verifymessage\",\n+                \"\\nVerify a signed message\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"signature\", RPCArg::Type::STR, false},\n+                    {\"message\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the signature.\\n\"\n             \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n@@ -198,8 +208,13 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n-            \"signmessagewithprivkey \\\"privkey\\\" \\\"message\\\"\\n\"\n-            \"\\nSign a message with the private key of an address\\n\"\n+            RPCHelpMan{\"signmessagewithprivkey\",\n+                \"\\nSign a message with the private key of an address\\n\",\n+                {\n+                    {\"privkey\", RPCArg::Type::STR, false},\n+                    {\"message\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"privkey\\\"         (string, required) The private key to sign the message with.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n@@ -237,8 +252,12 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"setmocktime timestamp\\n\"\n-            \"\\nSet the local time to given timestamp (-regtest only)\\n\"\n+            RPCHelpMan{\"setmocktime\",\n+                \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n+                {\n+                    {\"timestamp\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. timestamp  (integer, required) Unix seconds-since-epoch timestamp\\n\"\n             \"   Pass 0 to go back to using the system time.\"\n@@ -299,8 +318,12 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n      */\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getmemoryinfo (\\\"mode\\\")\\n\"\n-            \"Returns an object containing information about memory usage.\\n\"\n+            RPCHelpMan{\"getmemoryinfo\",\n+                \"Returns an object containing information about memory usage.\\n\",\n+                {\n+                    {\"mode\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"Arguments:\\n\"\n             \"1. \\\"mode\\\" determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n@@ -361,7 +384,7 @@ UniValue logging(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"logging ( <include> <exclude> )\\n\"\n+            RPCHelpMan{\"logging\",\n             \"Gets and sets the logging configuration.\\n\"\n             \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n             \"When called with arguments, adds or removes categories from debug logging and return the lists above.\\n\"\n@@ -371,6 +394,12 @@ UniValue logging(const JSONRPCRequest& request)\n             \"In addition, the following are available as category names with special meanings:\\n\"\n             \"  - \\\"all\\\",  \\\"1\\\" : represent all logging categories.\\n\"\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n+            ,\n+                {\n+                    {\"include\", RPCArg::Type::STR, true},\n+                    {\"exclude\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"include\\\"        (array of strings, optional) A json array of categories to add debug logging\\n\"\n             \"     [\\n\"\n@@ -430,11 +459,13 @@ static UniValue echo(const JSONRPCRequest& request)\n {\n     if (request.fHelp)\n         throw std::runtime_error(\n-            \"echo|echojson \\\"message\\\" ...\\n\"\n-            \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n-            \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in\"\n-            \"bitcoin-cli and the GUI. There is no server-side difference.\"\n-        );\n+            RPCHelpMan{\"echo|echojson ...\",\n+                \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n+                \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in\"\n+                \"bitcoin-cli and the GUI. There is no server-side difference.\",\n+                {}}\n+                .ToString() +\n+            \"\");\n \n     return request.params;\n }"
      },
      {
        "sha": "795b9b089b1d08e9b2732ff8c257286915747033",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 35,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -28,8 +28,9 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getconnectioncount\\n\"\n-            \"\\nReturns the number of connections to other nodes.\\n\"\n+            RPCHelpMan{\"getconnectioncount\",\n+                \"\\nReturns the number of connections to other nodes.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"n          (numeric) The connection count\\n\"\n             \"\\nExamples:\\n\"\n@@ -47,10 +48,12 @@ static UniValue ping(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"ping\\n\"\n-            \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n-            \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n-            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\"\n+            RPCHelpMan{\"ping\",\n+                \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n+                \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n+                \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")\n@@ -70,8 +73,9 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getpeerinfo\\n\"\n-            \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n+            RPCHelpMan{\"getpeerinfo\",\n+                \"\\nReturns data about each connected network node as a json array of objects.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -201,11 +205,16 @@ static UniValue addnode(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n-            \"addnode \\\"node\\\" \\\"command\\\"\\n\"\n-            \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n-            \"Or try a connection to a node once.\\n\"\n-            \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n-            \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\"\n+            RPCHelpMan{\"addnode\",\n+                \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n+                \"Or try a connection to a node once.\\n\"\n+                \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n+                \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n+                {\n+                    {\"node\", RPCArg::Type::STR, false},\n+                    {\"command\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n             \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n@@ -244,10 +253,15 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n         throw std::runtime_error(\n-            \"disconnectnode ( \\\"address\\\" nodeid )\\n\"\n-            \"\\nImmediately disconnects from the specified peer node.\\n\"\n-            \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n-            \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\"\n+            RPCHelpMan{\"disconnectnode\",\n+                \"\\nImmediately disconnects from the specified peer node.\\n\"\n+                \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n+                \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, true},\n+                    {\"nodeid\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, optional) The IP address/port of the node\\n\"\n             \"2. nodeid        (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n@@ -287,9 +301,13 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n-            \"\\nReturns information about the given added node, or all added nodes\\n\"\n-            \"(note that onetry addnodes are not listed here)\\n\"\n+            RPCHelpMan{\"getaddednodeinfo\",\n+                \"\\nReturns information about the given added node, or all added nodes\\n\"\n+                \"(note that onetry addnodes are not listed here)\\n\",\n+                {\n+                    {\"node\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\\n\"\n             \"\\nResult:\\n\"\n@@ -354,9 +372,11 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n-            \"getnettotals\\n\"\n-            \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n-            \"and current time.\\n\"\n+            RPCHelpMan{\"getnettotals\",\n+                \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n+                \"and current time.\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n@@ -420,8 +440,9 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getnetworkinfo\\n\"\n-            \"Returns an object containing various state info regarding P2P networking.\\n\"\n+            RPCHelpMan{\"getnetworkinfo\",\n+                \"Returns an object containing various state info regarding P2P networking.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"version\\\": xxxxx,                      (numeric) the server version\\n\"\n@@ -500,8 +521,15 @@ static UniValue setban(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n-                            \"setban \\\"subnet\\\" \\\"command\\\" ( bantime absolute )\\n\"\n-                            \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n+            RPCHelpMan{\"setban\",\n+                \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n+                {\n+                    {\"subnet\", RPCArg::Type::STR, false},\n+                    {\"command\", RPCArg::Type::STR, false},\n+                    {\"bantime\", RPCArg::Type::NUM, true},\n+                    {\"absolute\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n                             \"2. \\\"command\\\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\\n\"\n@@ -560,8 +588,9 @@ static UniValue listbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-                            \"listbanned\\n\"\n-                            \"\\nList all banned IPs/Subnets.\\n\"\n+            RPCHelpMan{\"listbanned\",\n+                \"\\nList all banned IPs/Subnets.\\n\", {}}\n+                .ToString() +\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n@@ -593,8 +622,9 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-                            \"clearbanned\\n\"\n-                            \"\\nClear all banned IPs.\\n\"\n+            RPCHelpMan{\"clearbanned\",\n+                \"\\nClear all banned IPs.\\n\", {}}\n+                .ToString() +\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n@@ -611,8 +641,12 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"setnetworkactive state\\n\"\n-            \"\\nDisable/enable all p2p network activity.\\n\"\n+            RPCHelpMan{\"setnetworkactive\",\n+                \"\\nDisable/enable all p2p network activity.\\n\",\n+                {\n+                    {\"state\", RPCArg::Type::BOOL, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"state\\\"        (boolean, required) true to enable networking, false to disable\\n\"\n         );\n@@ -631,8 +665,12 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1) {\n         throw std::runtime_error(\n-            \"getnodeaddresses ( count )\\n\"\n-            \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\"\n+            RPCHelpMan{\"getnodeaddresses\",\n+                \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n+                {\n+                    {\"count\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"count\\\"    (numeric, optional) How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) +\n                 \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses. (default = 1)\\n\""
      },
      {
        "sha": "a3ed4e86d91463a498fe825fa9fb0cde37ab7c6b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 48,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -66,13 +66,18 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"getrawtransaction \\\"txid\\\" ( verbose \\\"blockhash\\\" )\\n\"\n-\n-            \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n-            \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n-            \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n-            \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n-            \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n+            RPCHelpMan{\"getrawtransaction\",\n+                \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n+                \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n+                \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n+                \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n+                \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, true},\n+                }}\n+                .ToString() +\n             \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n@@ -207,6 +212,11 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n         throw std::runtime_error(\n             RPCHelpMan{\"gettxoutproof\",\n+                \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n+                \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n+                \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n+                \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n+                \"specify the block in which the transaction is included manually (by blockhash).\\n\",\n                 {\n                     {\"txids\", RPCArg::Type::ARR,\n                         {\n@@ -216,11 +226,6 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                     {\"blockhash\", RPCArg::Type::STR_HEX, true},\n                 }}\n                 .ToString() +\n-            \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n-            \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n-            \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n-            \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n-            \"specify the block in which the transaction is included manually (by blockhash).\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n             \"    [\\n\"\n@@ -307,9 +312,13 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"verifytxoutproof \\\"proof\\\"\\n\"\n-            \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n-            \"and throwing an RPC error if the block is not in our best chain\\n\"\n+            RPCHelpMan{\"verifytxoutproof\",\n+                \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n+                \"and throwing an RPC error if the block is not in our best chain\\n\",\n+                {\n+                    {\"proof\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"proof\\\"    (string, required) The hex-encoded proof generated by gettxoutproof\\n\"\n             \"\\nResult:\\n\"\n@@ -514,9 +523,13 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"decoderawtransaction \\\"hexstring\\\" ( iswitness )\\n\"\n-            \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n-\n+            RPCHelpMan{\"decoderawtransaction\",\n+                \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                    {\"iswitness\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"      (string, required) The transaction hex string\\n\"\n             \"2. iswitness          (boolean, optional) Whether the transaction hex is a serialized witness transaction\\n\"\n@@ -589,8 +602,12 @@ static UniValue decodescript(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"decodescript \\\"hexstring\\\"\\n\"\n-            \"\\nDecode a hex-encoded script.\\n\"\n+            RPCHelpMan{\"decodescript\",\n+                \"\\nDecode a hex-encoded script.\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string) the hex-encoded script\\n\"\n             \"\\nResult:\\n\"\n@@ -685,6 +702,9 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"combinerawtransaction\",\n+                \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n+                \"The combined transaction may be another partially signed transaction or a \\n\"\n+                \"fully signed transaction.\",\n                 {\n                     {\"txs\", RPCArg::Type::ARR,\n                         {\n@@ -693,10 +713,6 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                         false},\n                 }}\n                 .ToString() +\n-            \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n-            \"The combined transaction may be another partially signed transaction or a \\n\"\n-            \"fully signed transaction.\"\n-\n             \"\\nArguments:\\n\"\n             \"1. \\\"txs\\\"         (string) A json array of hex strings of partially signed transactions\\n\"\n             \"    [\\n\"\n@@ -916,6 +932,11 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n             RPCHelpMan{\"signrawtransactionwithkey\",\n+                \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+                \"The second argument is an array of base58-encoded private\\n\"\n+                \"keys that will be the only keys used to sign the transaction.\\n\"\n+                \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+                \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR, false},\n                     {\"privkyes\", RPCArg::Type::ARR,\n@@ -939,12 +960,6 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                     {\"sighashtype\", RPCArg::Type::STR, true},\n                 }}\n                 .ToString() +\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second argument is an array of base58-encoded private\\n\"\n-            \"keys that will be the only keys used to sign the transaction.\\n\"\n-            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n             \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n@@ -1025,9 +1040,14 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n-            \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n-            \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\"\n+            RPCHelpMan{\"sendrawtransaction\",\n+                \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n+                \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n             \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n@@ -1218,9 +1238,12 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"decodepsbt \\\"psbt\\\"\\n\"\n-            \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\"\n-\n+            RPCHelpMan{\"decodepsbt\",\n+                \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n+                {\n+                    {\"psbt\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"psbt\\\"            (string, required) The PSBT base64 string\\n\"\n \n@@ -1494,6 +1517,8 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"combinepsbt\",\n+                \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n+                \"Implements the Combiner role.\\n\",\n                 {\n                     {\"txs\", RPCArg::Type::ARR,\n                         {\n@@ -1502,8 +1527,6 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                         false},\n                 }}\n                 .ToString() +\n-            \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n-            \"Implements the Combiner role.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n             \"    [\\n\"\n@@ -1554,11 +1577,16 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"finalizepsbt \\\"psbt\\\" ( extract )\\n\"\n-            \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n-            \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n-            \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n-            \"Implements the Finalizer and Extractor roles.\\n\"\n+            RPCHelpMan{\"finalizepsbt\",\n+                \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n+                \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n+                \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n+                \"Implements the Finalizer and Extractor roles.\\n\",\n+                {\n+                    {\"psbt\", RPCArg::Type::STR, false},\n+                    {\"extract\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n             \"2. \\\"extract\\\"              (boolean, optional, default=true) If true and the transaction is complete, \\n\"\n@@ -1619,6 +1647,8 @@ UniValue createpsbt(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n             RPCHelpMan{\"createpsbt\",\n+                \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n+                \"Implements the Creator role.\\n\",\n                 {\n                     {\"inputs\", RPCArg::Type::ARR,\n                         {\n@@ -1649,8 +1679,6 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                     {\"replaceable\", RPCArg::Type::BOOL, true},\n                 }}\n                 .ToString() +\n-                            \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n-                            \"Implements the Creator role.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n                             \"     [\\n\"\n@@ -1713,9 +1741,15 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-                            \"converttopsbt \\\"hexstring\\\" ( permitsigdata iswitness )\\n\"\n-                            \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n-                            \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\"\n+            RPCHelpMan{\"converttopsbt\",\n+                \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n+                \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, true},\n+                    {\"iswitness\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"hexstring\\\"              (string, required) The hex string of a raw transaction\\n\"\n                             \"2. permitsigdata           (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.\\n\""
      },
      {
        "sha": "c565094a10c873dcf29981a8398e4f59bd164656",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -204,8 +204,12 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw std::runtime_error(\n-            \"help ( \\\"command\\\" )\\n\"\n-            \"\\nList all commands, or get help for a specified command.\\n\"\n+            RPCHelpMan{\"help\",\n+                \"\\nList all commands, or get help for a specified command.\\n\",\n+                {\n+                    {\"command\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"command\\\"     (string, optional) The command to get help on\\n\"\n             \"\\nResult:\\n\"\n@@ -225,8 +229,9 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     // Accept the deprecated and ignored 'detach' boolean argument\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw std::runtime_error(\n-            \"stop\\n\"\n-            \"\\nStop Bitcoin server.\");\n+            RPCHelpMan{\"stop\",\n+                \"\\nStop Bitcoin server.\", {}}\n+                .ToString());\n     // Event loop will exit after current HTTP requests have been handled, so\n     // this reply will get back to the client.\n     StartShutdown();\n@@ -237,8 +242,9 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 0)\n         throw std::runtime_error(\n-                \"uptime\\n\"\n-                        \"\\nReturns the total uptime of the server.\\n\"\n+            RPCHelpMan{\"uptime\",\n+                \"\\nReturns the total uptime of the server.\\n\", {}}\n+                .ToString() +\n                         \"\\nResult:\\n\"\n                         \"ttt        (numeric) The number of seconds that the server has been running\\n\"\n                         \"\\nExamples:\\n\""
      },
      {
        "sha": "0b6bbcb1dc63f74a1fb467d60369762657b34cc2",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -150,6 +150,8 @@ std::string RPCHelpMan::ToString() const\n     if (is_optional) ret += \" )\";\n     ret += \"\\n\";\n \n+    ret += m_description;\n+\n     return ret;\n }\n \n@@ -185,6 +187,8 @@ std::string RPCArg::ToStringObj() const\n \n std::string RPCArg::ToString() const\n {\n+    if (!m_oneline_description.empty()) return m_oneline_description;\n+\n     switch (m_type) {\n     case Type::STR_HEX:\n     case Type::STR: {"
      },
      {
        "sha": "b07922c05a4f7742bdb3f2e26c42581a56368f83",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -45,15 +45,16 @@ struct RPCArg {\n     const Type m_type;\n     const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts\n     const bool m_optional;\n+    const std::string m_oneline_description; //!< Should be empty unless it is supposed to override the auto-generated summary line\n \n-    RPCArg(const std::string& name, const Type& type, const bool optional)\n-        : m_name{name}, m_type{type}, m_optional{optional}\n+    RPCArg(const std::string& name, const Type& type, const bool optional, const std::string& oneline_description = \"\")\n+        : m_name{name}, m_type{type}, m_optional{optional}, m_oneline_description{oneline_description}\n     {\n         assert(type != Type::ARR && type != Type::OBJ);\n     }\n \n-    RPCArg(const std::string& name, const Type& type, const std::vector<RPCArg>& inner, const bool optional)\n-        : m_name{name}, m_type{type}, m_inner{inner}, m_optional{optional}\n+    RPCArg(const std::string& name, const Type& type, const std::vector<RPCArg>& inner, const bool optional, const std::string& oneline_description = \"\")\n+        : m_name{name}, m_type{type}, m_inner{inner}, m_optional{optional}, m_oneline_description{oneline_description}\n     {\n         assert(type == Type::ARR || type == Type::OBJ);\n     }\n@@ -67,15 +68,16 @@ struct RPCArg {\n class RPCHelpMan\n {\n public:\n-    RPCHelpMan(const std::string& name, const std::vector<RPCArg>& args)\n-        : m_name{name}, m_args{args}\n+    RPCHelpMan(const std::string& name, const std::string& description, const std::vector<RPCArg>& args)\n+        : m_name{name}, m_description{description}, m_args{args}\n     {\n     }\n \n     std::string ToString() const;\n \n private:\n     const std::string m_name;\n+    const std::string m_description;\n     const std::vector<RPCArg> m_args;\n };\n "
      },
      {
        "sha": "fa1e209bf253881794e732af04aa7a57a7caa9dd",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 26,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -109,8 +109,14 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n-            \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n+            RPCHelpMan{\"importprivkey\",\n+                \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\",\n+                {\n+                    {\"privkey\", RPCArg::Type::STR, false},\n+                    {\"label\", RPCArg::Type::STR, true},\n+                    {\"rescan\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"Hint: use importmulti to import more than one private key.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n@@ -206,8 +212,9 @@ UniValue abortrescan(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n-            \"abortrescan\\n\"\n-            \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n+            RPCHelpMan{\"abortrescan\",\n+                \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\", {}}\n+                .ToString() +\n             \"\\nExamples:\\n\"\n             \"\\nImport a private key\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n@@ -268,8 +275,15 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n-            \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n+            RPCHelpMan{\"importaddress\",\n+                \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"label\", RPCArg::Type::STR, true},\n+                    {\"rescan\", RPCArg::Type::BOOL, true},\n+                    {\"p2sh\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"          (string, required) The Bitcoin address (or hex-encoded script)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n@@ -348,8 +362,13 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n-            \"importprunedfunds \\\"rawtransaction\\\" \\\"txoutproof\\\"\\n\"\n-            \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n+            RPCHelpMan{\"importprunedfunds\",\n+                \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n+                {\n+                    {\"rawtransaction\", RPCArg::Type::STR_HEX, false},\n+                    {\"txoutproof\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n             \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n@@ -412,8 +431,12 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"removeprunedfunds \\\"txid\\\"\\n\"\n-            \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\"\n+            RPCHelpMan{\"removeprunedfunds\",\n+                \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"           (string, required) The hex-encoded id of the transaction you are deleting\\n\"\n             \"\\nExamples:\\n\"\n@@ -451,8 +474,14 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n-            \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n+            RPCHelpMan{\"importpubkey\",\n+                \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\",\n+                {\n+                    {\"pubkey\", RPCArg::Type::STR, false},\n+                    {\"label\", RPCArg::Type::STR, true},\n+                    {\"rescan\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n@@ -523,8 +552,12 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"importwallet \\\"filename\\\"\\n\"\n-            \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n+            RPCHelpMan{\"importwallet\",\n+                \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n+                {\n+                    {\"filename\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The wallet file\\n\"\n             \"\\nExamples:\\n\"\n@@ -653,9 +686,13 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"dumpprivkey \\\"address\\\"\\n\"\n-            \"\\nReveals the private key corresponding to 'address'.\\n\"\n-            \"Then the importprivkey can be used with this output\\n\"\n+            RPCHelpMan{\"dumpprivkey\",\n+                \"\\nReveals the private key corresponding to 'address'.\\n\"\n+                \"Then the importprivkey can be used with this output\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"   (string, required) The bitcoin address for the private key\\n\"\n             \"\\nResult:\\n\"\n@@ -698,11 +735,15 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n-            \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n-            \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n-            \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\"\n+            RPCHelpMan{\"dumpwallet\",\n+                \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n+                \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n+                \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n+                \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\",\n+                {\n+                    {\"filename\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n             \"\\nResult:\\n\"\n@@ -1083,11 +1124,35 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         return NullUniValue;\n     }\n \n-    // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n         throw std::runtime_error(\n-            \"importmulti \\\"requests\\\" ( \\\"options\\\" )\\n\"\n-            \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\"\n+            RPCHelpMan{\"importmulti\",\n+                \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\n+                                        {\"scriptPubKey\", RPCArg::Type::STR, false},\n+                                        {\"timestamp\", RPCArg::Type::NUM, false},\n+                                        {\"redeemscript\", RPCArg::Type::STR, true},\n+                                        {\"witnessscript\", RPCArg::Type::STR, true},\n+                                        {\"internal\", RPCArg::Type::BOOL, true},\n+                                        {\"watchonly\", RPCArg::Type::BOOL, true},\n+                                        {\"label\", RPCArg::Type::STR, true},\n+                                    },\n+                                },\n+                                false},\n+                        },\n+                        false, \"\\\"requests\\\"\"},\n+                    {\"options\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"rescan\", RPCArg::Type::BOOL, true},\n+                        },\n+                        true, \"\\\"options\\\"\"},\n+                }}\n+                .ToString() +\n             \"Arguments:\\n\"\n             \"1. requests     (array, required) Data to be imported\\n\"\n             \"  [     (array of json objects)\\n\"\n@@ -1123,7 +1188,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n             \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n \n-    // clang-format on\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n "
      },
      {
        "sha": "ecc8fa264370c4fbe878653188e6648e58479400",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 399,
        "deletions": 163,
        "changes": 562,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -149,10 +149,15 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getnewaddress ( \\\"label\\\" \\\"address_type\\\" )\\n\"\n-            \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n-            \"If 'label' is specified, it is added to the address book \\n\"\n-            \"so payments received with the address will be associated with 'label'.\\n\"\n+            RPCHelpMan{\"getnewaddress\",\n+                \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n+                \"If 'label' is specified, it is added to the address book \\n\"\n+                \"so payments received with the address will be associated with 'label'.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, true},\n+                    {\"address_type\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"label\\\"          (string, optional) The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\\n\"\n             \"2. \\\"address_type\\\"   (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\\n\"\n@@ -209,9 +214,13 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getrawchangeaddress ( \\\"address_type\\\" )\\n\"\n-            \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n-            \"This is for use with raw transactions, NOT normal use.\\n\"\n+            RPCHelpMan{\"getrawchangeaddress\",\n+                \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n+                \"This is for use with raw transactions, NOT normal use.\\n\",\n+                {\n+                    {\"address_type\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address_type\\\"           (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\\n\"\n             \"\\nResult:\\n\"\n@@ -263,8 +272,13 @@ static UniValue setlabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n-            \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n-            \"\\nSets the label associated with the given address.\\n\"\n+            RPCHelpMan{\"setlabel\",\n+                \"\\nSets the label associated with the given address.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"label\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n             \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n@@ -343,9 +357,20 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n-            \"\\nSend an amount to a given address.\\n\"\n-            + HelpRequiringPassphrase(pwallet) +\n+            RPCHelpMan{\"sendtoaddress\",\n+                \"\\nSend an amount to a given address.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"amount\", RPCArg::Type::AMOUNT, false},\n+                    {\"comment\", RPCArg::Type::STR, true},\n+                    {\"comment_to\", RPCArg::Type::STR, true},\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, true},\n+                    {\"replaceable\", RPCArg::Type::BOOL, true},\n+                    {\"conf_target\", RPCArg::Type::NUM, true},\n+                    {\"estimate_mode\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n+            HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"            (string, required) The bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"             (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n@@ -433,10 +458,12 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"listaddressgroupings\\n\"\n-            \"\\nLists groups of addresses which have had their common ownership\\n\"\n-            \"made public by common use as inputs or as the resulting change\\n\"\n-            \"in past transactions\\n\"\n+            RPCHelpMan{\"listaddressgroupings\",\n+                \"\\nLists groups of addresses which have had their common ownership\\n\"\n+                \"made public by common use as inputs or as the resulting change\\n\"\n+                \"in past transactions\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  [\\n\"\n@@ -493,9 +520,14 @@ static UniValue signmessage(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n-            \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n-            \"\\nSign a message with the private key of an address\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            RPCHelpMan{\"signmessage\",\n+                \"\\nSign a message with the private key of an address\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"message\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n+            HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n@@ -557,8 +589,13 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getreceivedbyaddress \\\"address\\\" ( minconf )\\n\"\n-            \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\"\n+            RPCHelpMan{\"getreceivedbyaddress\",\n+                \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n@@ -626,8 +663,13 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getreceivedbylabel \\\"label\\\" ( minconf )\\n\"\n-            \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\"\n+            RPCHelpMan{\"getreceivedbylabel\",\n+                \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, false},\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"label\\\"        (string, required) The selected label, may be the default label using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n@@ -693,10 +735,16 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n     if (request.fHelp || (request.params.size() > 3 ))\n         throw std::runtime_error(\n-            \"getbalance ( \\\"dummy\\\" minconf include_watchonly )\\n\"\n-            \"\\nReturns the total available balance.\\n\"\n-            \"The available balance is what the wallet considers currently spendable, and is\\n\"\n-            \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n+            RPCHelpMan{\"getbalance\",\n+                \"\\nReturns the total available balance.\\n\"\n+                \"The available balance is what the wallet considers currently spendable, and is\\n\"\n+                \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n+                {\n+                    {\"dummy\", RPCArg::Type::STR, true},\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"include_watchonly\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\\n\"\n             \"2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.\\n\"\n@@ -748,8 +796,9 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n-                \"getunconfirmedbalance\\n\"\n-                \"Returns the server's total unconfirmed balance\\n\");\n+            RPCHelpMan{\"getunconfirmedbalance\",\n+                \"Returns the server's total unconfirmed balance\\n\", {}}\n+                .ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -773,9 +822,28 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendmany \\\"\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n-            \"\\nSend multiple times. Amounts are double-precision floating point numbers.\\n\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            RPCHelpMan{\"sendmany\",\n+                \"\\nSend multiple times. Amounts are double-precision floating point numbers.\\n\",\n+                {\n+                    {\"dummy\", RPCArg::Type::STR, false, \"\\\"\\\"\"},\n+                    {\"amounts\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, false},\n+                        },\n+                        false},\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"comment\", RPCArg::Type::STR, true},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR,\n+                        {\n+                            {\"address\", RPCArg::Type::STR, true},\n+                        },\n+                        true},\n+                    {\"replaceable\", RPCArg::Type::BOOL, true},\n+                    {\"conf_target\", RPCArg::Type::NUM, true},\n+                    {\"estimate_mode\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n+            HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"dummy\\\"               (string, required) Must be set to \\\"\\\" for backwards compatibility.\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n@@ -1166,8 +1234,15 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )\\n\"\n-            \"\\nList balances by receiving address.\\n\"\n+            RPCHelpMan{\"listreceivedbyaddress\",\n+                \"\\nList balances by receiving address.\\n\",\n+                {\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"include_empty\", RPCArg::Type::BOOL, true},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                    {\"address_filter\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n@@ -1217,8 +1292,14 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"listreceivedbylabel ( minconf include_empty include_watchonly)\\n\"\n-            \"\\nList received transactions by label.\\n\"\n+            RPCHelpMan{\"listreceivedbylabel\",\n+                \"\\nList received transactions by label.\\n\",\n+                {\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"include_empty\", RPCArg::Type::BOOL, true},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include labels that haven't received any payments.\\n\"\n@@ -1356,9 +1437,16 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listtransactions ( \\\"label\\\" count skip include_watchonly )\\n\"\n-            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n-            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\"\n+            RPCHelpMan{\"listtransactions\",\n+                \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+                \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, true},\n+                    {\"count\", RPCArg::Type::NUM, true},\n+                    {\"skip\", RPCArg::Type::NUM, true},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n             \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n@@ -1483,10 +1571,17 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_removed )\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n-            \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n-            \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\"\n+            RPCHelpMan{\"listsinceblock\",\n+                \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+                \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n+                \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR, true},\n+                    {\"target_confirmations\", RPCArg::Type::NUM, true},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                    {\"include_removed\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n             \"2. target_confirmations:    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\\n\"\n@@ -1623,8 +1718,13 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"gettransaction \\\"txid\\\" ( include_watchonly )\\n\"\n-            \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n+            RPCHelpMan{\"gettransaction\",\n+                \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR, false},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                  (string, required) The transaction id\\n\"\n             \"2. \\\"include_watchonly\\\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]\\n\"\n@@ -1718,12 +1818,16 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"abandontransaction \\\"txid\\\"\\n\"\n-            \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n-            \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n-            \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n-            \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n-            \"It has no effect on transactions which are already abandoned.\\n\"\n+            RPCHelpMan{\"abandontransaction\",\n+                \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n+                \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n+                \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n+                \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n+                \"It has no effect on transactions which are already abandoned.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n             \"\\nResult:\\n\"\n@@ -1764,8 +1868,12 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"backupwallet \\\"destination\\\"\\n\"\n-            \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n+            RPCHelpMan{\"backupwallet\",\n+                \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n+                {\n+                    {\"destination\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"destination\\\"   (string) The destination directory or file\\n\"\n             \"\\nExamples:\\n\"\n@@ -1800,9 +1908,13 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"keypoolrefill ( newsize )\\n\"\n-            \"\\nFills the keypool.\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            RPCHelpMan{\"keypoolrefill\",\n+                \"\\nFills the keypool.\",\n+                {\n+                    {\"newsize\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n+            HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments\\n\"\n             \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n             \"\\nExamples:\\n\"\n@@ -1847,9 +1959,14 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2) {\n         throw std::runtime_error(\n-            \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n-            \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n-            \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n+            RPCHelpMan{\"walletpassphrase\",\n+                \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n+                \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\",\n+                {\n+                    {\"passphrase\", RPCArg::Type::STR, false},\n+                    {\"timeout\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n             \"2. timeout            (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\\n\"\n@@ -1900,8 +2017,13 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     }\n     else\n         throw std::runtime_error(\n-            \"walletpassphrase <passphrase> <timeout>\\n\"\n-            \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n+            RPCHelpMan{\"walletpassphrase\",\n+                \"Stores the wallet decryption key in memory for <timeout> seconds.\",\n+                {\n+                    {\"passphrase\", RPCArg::Type::STR, false},\n+                    {\"timeout\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString());\n \n     pwallet->TopUpKeyPool();\n \n@@ -1934,8 +2056,13 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2) {\n         throw std::runtime_error(\n-            \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n-            \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n+            RPCHelpMan{\"walletpassphrasechange\",\n+                \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n+                {\n+                    {\"oldpassphrase\", RPCArg::Type::STR, false},\n+                    {\"newpassphrase\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"oldpassphrase\\\"      (string) The current passphrase\\n\"\n             \"2. \\\"newpassphrase\\\"      (string) The new passphrase\\n\"\n@@ -1964,8 +2091,13 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n         throw std::runtime_error(\n-            \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n-            \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n+            RPCHelpMan{\"walletpassphrasechange\",\n+                \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\",\n+                {\n+                    {\"oldpassphrase\", RPCArg::Type::STR, false},\n+                    {\"newpassphrase\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString());\n \n     if (!pwallet->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass)) {\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n@@ -1986,10 +2118,12 @@ static UniValue walletlock(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n-            \"walletlock\\n\"\n-            \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n-            \"After calling this method, you will need to call walletpassphrase again\\n\"\n-            \"before being able to call any methods which require the wallet to be unlocked.\\n\"\n+            RPCHelpMan{\"walletlock\",\n+                \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n+                \"After calling this method, you will need to call walletpassphrase again\\n\"\n+                \"before being able to call any methods which require the wallet to be unlocked.\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nExamples:\\n\"\n             \"\\nSet the passphrase for 2 minutes to perform a transaction\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 120\") +\n@@ -2027,12 +2161,16 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"encryptwallet \\\"passphrase\\\"\\n\"\n-            \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n-            \"After this, any calls that interact with private keys such as sending or signing \\n\"\n-            \"will require the passphrase to be set prior the making these calls.\\n\"\n-            \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n-            \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\"\n+            RPCHelpMan{\"encryptwallet\",\n+                \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n+                \"After this, any calls that interact with private keys such as sending or signing \\n\"\n+                \"will require the passphrase to be set prior the making these calls.\\n\"\n+                \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n+                \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\",\n+                {\n+                    {\"passphrase\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\\n\"\n             \"\\nExamples:\\n\"\n@@ -2064,8 +2202,12 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n \n     if (strWalletPass.length() < 1)\n         throw std::runtime_error(\n-            \"encryptwallet <passphrase>\\n\"\n-            \"Encrypts the wallet with <passphrase>.\");\n+            RPCHelpMan{\"encryptwallet\",\n+                \"Encrypts the wallet with <passphrase>.\",\n+                {\n+                    {\"passphrase\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString());\n \n     if (!pwallet->EncryptWallet(strWalletPass)) {\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n@@ -2086,6 +2228,13 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             RPCHelpMan{\"lockunspent\",\n+                \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n+                \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n+                \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n+                \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n+                \"Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\\n\"\n+                \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n+                \"Also see the listunspent call\\n\",\n                 {\n                     {\"unlock\", RPCArg::Type::BOOL, false},\n                     {\"transactions\", RPCArg::Type::ARR,\n@@ -2100,13 +2249,6 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                         true},\n                 }}\n                 .ToString() +\n-            \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n-            \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n-            \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n-            \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n-            \"Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\\n\"\n-            \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n-            \"Also see the listunspent call\\n\"\n             \"\\nArguments:\\n\"\n             \"1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\\n\"\n             \"2. \\\"transactions\\\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)\\n\"\n@@ -2225,9 +2367,11 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n-            \"listlockunspent\\n\"\n-            \"\\nReturns list of temporarily unspendable outputs.\\n\"\n-            \"See the lockunspent call to lock and unlock transactions for spending.\\n\"\n+            RPCHelpMan{\"listlockunspent\",\n+                \"\\nReturns list of temporarily unspendable outputs.\\n\"\n+                \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -2279,8 +2423,12 @@ static UniValue settxfee(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1) {\n         throw std::runtime_error(\n-            \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n+            RPCHelpMan{\"settxfee\",\n+                \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n+                {\n+                    {\"amount\", RPCArg::Type::NUM, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"\\nResult\\n\"\n@@ -2319,8 +2467,9 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"getwalletinfo\\n\"\n-            \"Returns an object containing various wallet state info.\\n\"\n+            RPCHelpMan{\"getwalletinfo\",\n+                \"Returns an object containing various wallet state info.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"walletname\\\": xxxxx,               (string) the wallet name\\n\"\n@@ -2381,8 +2530,9 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n-            \"listwalletdir\\n\"\n-            \"Returns a list of wallets in the wallet directory.\\n\"\n+            RPCHelpMan{\"listwalletdir\",\n+                \"Returns a list of wallets in the wallet directory.\\n\", {}}\n+                .ToString() +\n             \"{\\n\"\n             \"  \\\"wallets\\\" : [                (json array of objects)\\n\"\n             \"    {\\n\"\n@@ -2413,9 +2563,11 @@ static UniValue listwallets(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"listwallets\\n\"\n-            \"Returns a list of currently loaded wallets.\\n\"\n-            \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\"\n+            RPCHelpMan{\"listwallets\",\n+                \"Returns a list of currently loaded wallets.\\n\"\n+                \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\",\n+                {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[                         (json array of strings)\\n\"\n             \"  \\\"walletname\\\"            (string) the wallet name\\n\"\n@@ -2445,10 +2597,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"loadwallet \\\"filename\\\"\\n\"\n-            \"\\nLoads a wallet from a wallet file or directory.\"\n-            \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-            \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\"\n+            RPCHelpMan{\"loadwallet\",\n+                \"\\nLoads a wallet from a wallet file or directory.\"\n+                \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n+                \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n+                {\n+                    {\"filename\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The wallet directory or .dat file.\\n\"\n             \"\\nResult:\\n\"\n@@ -2498,8 +2654,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"createwallet \\\"wallet_name\\\" ( disable_private_keys )\\n\"\n-            \"\\nCreates and loads a new wallet.\\n\"\n+            RPCHelpMan{\"createwallet\",\n+                \"\\nCreates and loads a new wallet.\\n\",\n+                {\n+                    {\"wallet_name\", RPCArg::Type::STR, false},\n+                    {\"disable_private_keys\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"wallet_name\\\"          (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.\\n\"\n             \"2. disable_private_keys   (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).\\n\"\n@@ -2550,9 +2711,13 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1) {\n         throw std::runtime_error(\n-            \"unloadwallet ( \\\"wallet_name\\\" )\\n\"\n-            \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n-            \"Specifying the wallet name on a wallet endpoint is invalid.\"\n+            RPCHelpMan{\"unloadwallet\",\n+                \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n+                \"Specifying the wallet name on a wallet endpoint is invalid.\",\n+                {\n+                    {\"wallet_name\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"wallet_name\\\"    (string, optional) The name of the wallet to unload.\\n\"\n             \"\\nExamples:\\n\"\n@@ -2606,9 +2771,11 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n-            \"resendwallettransactions\\n\"\n-            \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n-            \"Intended only for testing; the wallet code periodically re-broadcasts\\n\"\n+            RPCHelpMan{\"resendwallettransactions\",\n+                \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n+                \"Intended only for testing; the wallet code periodically re-broadcasts\\n\",\n+                {}}\n+                .ToString() +\n             \"automatically.\\n\"\n             \"Returns an RPC error if -walletbroadcast is set to false.\\n\"\n             \"Returns array of transaction ids that were re-broadcast.\\n\"\n@@ -2645,12 +2812,15 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 5)\n         throw std::runtime_error(\n             RPCHelpMan{\"listunspent\",\n+                \"\\nReturns array of unspent transaction outputs\\n\"\n+                \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n+                \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, true},\n                     {\"maxconf\", RPCArg::Type::NUM, true},\n                     {\"addresses\", RPCArg::Type::ARR,\n                         {\n-                            {\"address\", RPCArg::Type::STR_HEX, true},\n+                            {\"address\", RPCArg::Type::STR, true},\n                         },\n                         true},\n                     {\"include_unsafe\", RPCArg::Type::BOOL, true},\n@@ -2661,12 +2831,9 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                             {\"maximumCount\", RPCArg::Type::NUM, true},\n                             {\"minimumSumAmount\", RPCArg::Type::AMOUNT, true},\n                         },\n-                        true},\n+                        true, \"query_options\"},\n                 }}\n                 .ToString() +\n-            \"\\nReturns array of unspent transaction outputs\\n\"\n-            \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n-            \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n             \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n@@ -2949,17 +3116,40 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\" ( options iswitness )\\n\"\n-                            \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n-                            \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n-                            \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n-                            \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n-                            \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n-                            \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n-                            \"Note that all inputs selected must be of standard form and P2SH scripts must be\\n\"\n-                            \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n-                            \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n-                            \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n+            RPCHelpMan{\"fundrawtransaction\",\n+                \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n+                \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n+                \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n+                \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n+                \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n+                \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n+                \"Note that all inputs selected must be of standard form and P2SH scripts must be\\n\"\n+                \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n+                \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n+                \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                    {\"options\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"changeAddress\", RPCArg::Type::STR, true},\n+                            {\"changePosition\", RPCArg::Type::NUM, true},\n+                            {\"change_type\", RPCArg::Type::STR, true},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, true},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, true},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, true},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR,\n+                                {\n+                                    {\"vout_index\", RPCArg::Type::NUM, true},\n+                                },\n+                                true},\n+                            {\"replaceable\", RPCArg::Type::BOOL, true},\n+                            {\"conf_target\", RPCArg::Type::NUM, true},\n+                            {\"estimate_mode\", RPCArg::Type::STR, true},\n+                        },\n+                        true, \"options\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"hexstring\\\"           (string, required) The hex string of the raw transaction\\n\"\n                             \"2. options                 (object, optional)\\n\"\n@@ -3039,6 +3229,9 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n             RPCHelpMan{\"signrawtransactionwithwallet\",\n+                \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+                \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+                \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR, false},\n                     {\"prevtxs\", RPCArg::Type::ARR,\n@@ -3057,10 +3250,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                     {\"sighashtype\", RPCArg::Type::STR, true},\n                 }}\n                 .ToString() +\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            HelpRequiringPassphrase(pwallet) + \"\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n@@ -3130,18 +3320,30 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n-            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n-            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n-            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n-            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n-            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-            \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n-            \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-            \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n-            \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n-            \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n+            RPCHelpMan{\"bumpfee\",\n+                \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+                \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+                \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+                \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n+                \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n+                \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+                \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"options\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"confTarget\", RPCArg::Type::NUM, true},\n+                            {\"totalFee\", RPCArg::Type::AMOUNT, true},\n+                            {\"replaceable\", RPCArg::Type::BOOL, true},\n+                            {\"estimate_mode\", RPCArg::Type::STR, true},\n+                        },\n+                        true, \"options\"},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. txid                  (string, required) The txid to be bumped\\n\"\n             \"2. options               (object, optional)\\n\"\n@@ -3282,8 +3484,13 @@ UniValue generate(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"generate nblocks ( maxtries )\\n\"\n-            \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n+            RPCHelpMan{\"generate\",\n+                \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n+                {\n+                    {\"nblocks\", RPCArg::Type::NUM, false},\n+                    {\"maxtries\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n@@ -3334,8 +3541,13 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"rescanblockchain (\\\"start_height\\\") (\\\"stop_height\\\")\\n\"\n-            \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n+            RPCHelpMan{\"rescanblockchain\",\n+                \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n+                {\n+                    {\"start_height\", RPCArg::Type::NUM, true},\n+                    {\"stop_height\", RPCArg::Type::NUM, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"start_height\\\"    (numeric, optional) block height where the rescan should start\\n\"\n             \"2. \\\"stop_height\\\"     (numeric, optional) the last block height that should be scanned\\n\"\n@@ -3540,9 +3752,13 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"getaddressinfo \\\"address\\\"\\n\"\n-            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n-            \"to be in the wallet.\\n\"\n+            RPCHelpMan{\"getaddressinfo\",\n+                \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+                \"to be in the wallet.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n             \"\\nResult:\\n\"\n@@ -3660,8 +3876,12 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"getaddressesbylabel \\\"label\\\"\\n\"\n-            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            RPCHelpMan{\"getaddressesbylabel\",\n+                \"\\nReturns the list of addresses assigned the specified label.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, false},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"label\\\"  (string, required) The label.\\n\"\n             \"\\nResult:\\n\"\n@@ -3705,8 +3925,12 @@ static UniValue listlabels(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"listlabels ( \\\"purpose\\\" )\\n\"\n-            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            RPCHelpMan{\"listlabels\",\n+                \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n+                {\n+                    {\"purpose\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"purpose\\\"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n             \"\\nResult:\\n\"\n@@ -3759,10 +3983,15 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n-            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n-            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n-            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            RPCHelpMan{\"sethdseed\",\n+                \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n+                \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n+                \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\",\n+                {\n+                    {\"newkeypool\", RPCArg::Type::BOOL, true},\n+                    {\"seed\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString()\n             + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n             \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n@@ -3898,10 +4127,17 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"walletprocesspsbt \\\"psbt\\\" ( sign \\\"sighashtype\\\" bip32derivs )\\n\"\n-            \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n-            \"that we can sign for.\\n\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            RPCHelpMan{\"walletprocesspsbt\",\n+                \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n+                \"that we can sign for.\\n\",\n+                {\n+                    {\"psbt\", RPCArg::Type::STR, false},\n+                    {\"sign\", RPCArg::Type::BOOL, true},\n+                    {\"sighashtype\", RPCArg::Type::STR, true},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n+            HelpRequiringPassphrase(pwallet) + \"\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"psbt\\\"                      (string, required) The transaction base64 string\\n\"\n@@ -3964,6 +4200,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw std::runtime_error(\n             RPCHelpMan{\"walletcreatefundedpsbt\",\n+                \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n+                \"Implements the Creator and Updater roles.\\n\",\n                 {\n                     {\"inputs\", RPCArg::Type::ARR,\n                         {\n@@ -3998,7 +4236,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             {\"change_type\", RPCArg::Type::STR, true},\n                             {\"includeWatching\", RPCArg::Type::BOOL, true},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, true},\n-                            {\"feeRate\", RPCArg::Type::NUM, true},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, true},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR,\n                                 {\n                                     {\"int\", RPCArg::Type::NUM, true},\n@@ -4008,12 +4246,10 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             {\"conf_target\", RPCArg::Type::NUM, true},\n                             {\"estimate_mode\", RPCArg::Type::STR, true},\n                         },\n-                        true},\n+                        true, \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, true},\n                 }}\n                 .ToString() +\n-                            \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n-                            \"Implements the Creator and Updater roles.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n                             \"     [\\n\""
      },
      {
        "sha": "d3eab46e5f55928e8f053c8a66f0d5e8c9ac1d24",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91e8eda541acdb78ca481b74605639f319c108/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91e8eda541acdb78ca481b74605639f319c108/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fa91e8eda541acdb78ca481b74605639f319c108",
        "patch": "@@ -17,8 +17,9 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n-            \"getzmqnotifications\\n\"\n-            \"\\nReturns information about the active ZeroMQ notifications.\\n\"\n+            RPCHelpMan{\"getzmqnotifications\",\n+                \"\\nReturns information about the active ZeroMQ notifications.\\n\", {}}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {                        (json object)\\n\""
      }
    ]
  },
  {
    "sha": "fa5e0452e875a7ca6bf6fe61fdd652d341eece40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVlMDQ1MmU4NzVhN2NhNmJmNmZlNjFmZGQ2NTJkMzQxZWVjZTQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-15T17:19:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-15T17:19:11Z"
      },
      "message": "rpc: Documentation fixups",
      "tree": {
        "sha": "deb8e007d0e5d1bdf6ffb4f9bf81275504ec8905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deb8e007d0e5d1bdf6ffb4f9bf81275504ec8905"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5e0452e875a7ca6bf6fe61fdd652d341eece40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb7aqPAAoJEM4rdWl+aaVICP4L/0sUWY8p5X7tYyszz7aIpZ00\nFRq8CQan7y1UAdnQUlyT0IfpS0OvTQY8Yi2dyIMfegBErvKzbgStgQAXGZXJrLQe\nQ1hI9VI1NQIvZvWuo9Nb8anELDkEo8vt91vtmVEvA6JDygnKDPLr0WmCpml4hKt6\ndqSgIKO2JvDF9UF+LeDPe01w9Qzffzkx7fzpu20HuWWBtmKC3cm6KeNgtJY/8qkS\nJgKKTFtDJuiW35psBiZ7oeq+BC/gslVaXb6elH7ymgb6tvdEboAqsChShrDZ9AP6\n+WPvILWhr1l946AlNYrG3VQGtg3vvd7ieQbfDUS665457z6IHfTs6i3FUi5NeEWp\nuyTVlfNRP8O7x4ZSr38J8QFHgUNTOxRSv3IMQ3g8wZVjtPg66Vf0gOtz4/I5FNW3\n1ToExAkoahsqkZJ7U8lxLQSasZBDZ0yc4SYtlEmABQBZK1DFk26PlJWmmEQRYEFj\nqKmITqyWl7suTdZM7l3dL4y/IYo2x7bV/korrUW53Q==\n=QseE\n-----END PGP SIGNATURE-----",
        "payload": "tree deb8e007d0e5d1bdf6ffb4f9bf81275504ec8905\nparent fa91e8eda541acdb78ca481b74605639f319c108\nauthor MarcoFalke <falke.marco@gmail.com> 1542302381 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1542302351 -0500\n\nrpc: Documentation fixups\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5e0452e875a7ca6bf6fe61fdd652d341eece40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5e0452e875a7ca6bf6fe61fdd652d341eece40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5e0452e875a7ca6bf6fe61fdd652d341eece40/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa91e8eda541acdb78ca481b74605639f319c108",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa91e8eda541acdb78ca481b74605639f319c108",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa91e8eda541acdb78ca481b74605639f319c108"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5543035885b587843f22eb16edc7af7b295e4888",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5e0452e875a7ca6bf6fe61fdd652d341eece40/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5e0452e875a7ca6bf6fe61fdd652d341eece40/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa5e0452e875a7ca6bf6fe61fdd652d341eece40",
        "patch": "@@ -461,7 +461,7 @@ static UniValue echo(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"echo|echojson ...\",\n                 \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n-                \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in\"\n+                \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in \"\n                 \"bitcoin-cli and the GUI. There is no server-side difference.\",\n                 {}}\n                 .ToString() +"
      },
      {
        "sha": "faac5d43e2efed4b98496cf14edfdf56bc22d047",
        "filename": "test/lint/lint-rpc-help.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5e0452e875a7ca6bf6fe61fdd652d341eece40/test/lint/lint-rpc-help.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5e0452e875a7ca6bf6fe61fdd652d341eece40/test/lint/lint-rpc-help.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-rpc-help.sh?ref=fa5e0452e875a7ca6bf6fe61fdd652d341eece40",
        "patch": "@@ -3,10 +3,17 @@\n # Copyright (c) 2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check that all RPC help texts are generated by RPCHelpMan.\n \n export LC_ALL=C\n \n EXIT_CODE=0\n+\n+# Assume that all multiline strings passed into a runtime_error are help texts.\n+# This is potentially fragile, but the linter is only temporary and can safely\n+# be removed early 2019.\n+\n non_autogenerated_help=$(grep --perl-regexp --null-data --only-matching 'runtime_error\\(\\n\\s*\".*\\\\n\"\\n' $(git ls-files -- \"*.cpp\"))\n if [[ ${non_autogenerated_help} != \"\" ]]; then\n     echo \"Must use RPCHelpMan to generate the help for the following RPC methods:\""
      }
    ]
  }
]