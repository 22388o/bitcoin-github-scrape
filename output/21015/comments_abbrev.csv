DrahtBot,2021-01-27 01:24:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21261 (p2p, test: add inbound eviction protection for I2P peers by jonatack)\n* #21236 (Net processing: Extract `addr` se",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-767943601,767943601,
dhruv,2021-01-27 06:02:47,"I am still working on figuring out why `test/functional/wallet_groups.py` is failing with an off-by-one error only on some platforms. In the meantime, ready for initial review.",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-768054110,768054110,
MarcoFalke,2021-01-27 06:38:40,"Concept ACK. This refactoring should only be changing the types at compile-time, not any values at run time.",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-768069372,768069372,
dhruv,2021-01-27 19:08:13,"Thanks for the review, @MarcoFalke. Comments addressed. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-768507748,768507748,
dhruv,2021-01-27 21:54:10,Pushed to fix [doxygen comment](https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565533857).,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-768602039,768602039,
martinus,2021-01-28 09:48:28,"Review ACK c0822a71b5fabb39e6bbf7355b69f9f1b9264fde, I have not tested the code, looked through it and found only nits",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-768932817,768932817,
dhruv,2021-01-30 00:23:01,"Thank you for the thorough review, @vasild @martinus and @MarcoFalke!\n\nComments addressed. Ready for review.",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-770117804,770117804,
martinus,2021-01-30 09:38:29,"ACK e5fb29086d3c0502ec63c1890b6b56be5cb7b1d8 looked through all changes and looks good, did not run the code though.",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-770184787,770184787,
MarcoFalke,2021-02-01 10:50:32,"re-ACK e5fb29086d3c0502ec63c1890b6b56be5cb7b1d8 changes since last review: ü¶ê\n\n* Restore doxygen comment\n* Use chrono literals where possible\n* Add ""named initializer comments"" in fuzz tests\n* Adding missing negation of log1p result\n* Using std::chrono::round instead of own round implementation\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n----",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-770764084,770764084,
dhruv,2021-02-04 18:50:36,"Thanks, @MarcoFalke @ajtowns @vasild.\n\nRebased. Comments addressed. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-773528387,773528387,
dhruv,2021-02-05 01:54:46,Fixed a test and pushed - ready for further review. Test failure for `test/fuzz/system.cpp` seems to be unrelated and happening on other recent PRs as well.,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-773726393,773726393,
MarcoFalke,2021-02-11 17:34:59,"re-ACK 054c6c29366a7f503554d9c85e6fd231008f2f20 changes since last review: üë∫\n\n* Use X macro where possible\n* Use std::chrono::seconds::period where possible\n* Replace 1000us with 1ms and cast to us where needed\n* Use seconds as type for poisson average interval\n* Split up inbound/outbound avg interval\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n``",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-777665019,777665019,
dhruv,2021-02-12 00:48:17,Rebased. Comment addressed. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-777894191,777894191,
martinus,2021-02-12 06:39:03,Codereview ACK 7b57704,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-778009321,778009321,
MarcoFalke,2021-02-12 11:44:15,"re-ACK 7b577049fe87a20f6d12fb7ce4e7d9941d971de1 only change is removing redundant inline üé•\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 7b577049fe87a20f6d12fb7ce4e7d9941d971de1 only change is removing redundant inline üé•\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1a",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-778147114,778147114,
dhruv,2021-02-14 15:43:39,Rebased. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-778795575,778795575,
dhruv,2021-02-15 05:45:37,Fuzz tests on CI are timing out. I tried re-running but that did not help and I do not believe the failure to be related to this PR.,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-778960066,778960066,
MarcoFalke,2021-02-15 12:36:03,"ci timeout is unrelated and can be ignored\n\nre-ACK 7b6775ba7e2303128743db55e769e3339b3fc28f only changes are rename to CountSecondsDouble, adding a comment, rebase üëõ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 7b6775ba7e2303128743db55e769e3339b3fc28f only changes are rename to CountSecond",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-779195504,779195504,
dhruv,2021-02-16 17:47:14,Rebased. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-780007354,780007354,
MarcoFalke,2021-02-26 08:56:55,"@ajtowns if there are specifics that you want to see addressed, it might help to post a patch which compiles and that can be taken in the next rebase. Otherwise I think this is ready for merge (mod the nits, which can be fixed in the next rebase as well).",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-786506585,786506585,
dhruv,2021-03-03 17:57:57,"Rebased. `master` changed while I was rebasing, so we see 2 force pushes. Reviewers can use `git range-diff cabe637 f4450e1 0eaea66` for convenience.\n\nComments addressed:\n- https://github.com/bitcoin/bitcoin/pull/21015#discussion_r583474249\n- https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578179328\n- https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586316752\n\nRead",https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-789937555,789937555,
jnewbery,2021-03-03 19:36:04,utACK 0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-790001460,790001460,
vasild,2021-03-04 11:02:24,ACK 0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f,https://github.com/bitcoin/bitcoin/pull/21015#issuecomment-790530414,790530414,
MarcoFalke,2021-01-27 06:21:29,in commit bbc01cf8b2965f716e899f413d36e2beb48c1f06: what is this?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565054974,565054974,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2021-01-27 06:36:07,you dropped the `-`,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565060262,565060262,src/net.cpp
dhruv,2021-01-27 06:59:21,"This was originally in d7fad1690c27bf270774da6eebc4ef8b550caf09. However, i just ran the test without the line and it seems to not be needed. Removed.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565069299,565069299,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2021-01-27 07:04:18,No need to keep an empty commit  d5a0f24807d5423469824efe8253c8e809b2044b,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565071275,565071275,test/functional/wallet_resendwallettransactions.py
dhruv,2021-01-27 07:11:49,Thanks for the catch!,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565074405,565074405,src/net.cpp
dhruv,2021-01-27 07:12:51,Removed.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565074784,565074784,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2021-01-27 09:04:15,"4089bc6489255ab26a350bbadc06d1cc5cff6d35: Can use `0us`, like above, which is shorter",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565135678,565135678,src/net.h
MarcoFalke,2021-01-27 09:06:12,"Same commit: Can use `ping_time == 0us`, which is shorter",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565137023,565137023,src/qt/guiutil.cpp
MarcoFalke,2021-01-27 09:08:17,4089bc6489255ab26a350bbadc06d1cc5cff6d35: Why is this changed?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565138476,565138476,src/qt/guiutil.h
MarcoFalke,2021-01-27 09:09:24,"4089bc6489255ab26a350bbadc06d1cc5cff6d35: Can use `time > 0us`, which is shorter",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565139181,565139181,src/rpc/net.cpp
MarcoFalke,2021-01-27 09:10:16,same,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565139786,565139786,src/rpc/net.cpp
MarcoFalke,2021-01-27 09:11:10,"unrelated style-nit: Could use named args, like in `src/test/net_tests.cpp`?",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565140500,565140500,src/test/fuzz/node_eviction.cpp
MarcoFalke,2021-01-27 09:13:45,"if you are changing whitespace, it would be good to do it right. One space too much here",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565142431,565142431,src/test/net_tests.cpp
MarcoFalke,2021-01-27 09:14:09,two spaces before `=`,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565142762,565142762,src/net.cpp
MarcoFalke,2021-01-27 09:15:53,"in commit aa30fdfcc4e8801c3abd74468f849f6124815e10: Can use `15min`, which is shorter",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565143996,565143996,src/net_processing.cpp
MarcoFalke,2021-01-27 09:17:19,aa30fdfcc4e8801c3abd74468f849f6124815e10: `2s`,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565145011,565145011,src/net_processing.cpp
MarcoFalke,2021-01-27 09:33:38,aa30fdfcc4e8801c3abd74468f849f6124815e10: `0us` on all three,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565156674,565156674,src/net_processing.cpp
MarcoFalke,2021-01-27 09:34:49,same,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565157442,565157442,src/net_processing.cpp
MarcoFalke,2021-01-27 09:37:35,why `((foo))` instead of `(foo)`?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565159349,565159349,src/net_processing.cpp
MarcoFalke,2021-01-27 09:40:47,0us,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565161588,565161588,src/net_processing.cpp
MarcoFalke,2021-01-27 09:41:04,`== 0us`,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565161799,565161799,src/net_processing.cpp
MarcoFalke,2021-01-27 09:44:38,64f3fb1a966cfee47e6cfccdd5e9c9540bfebecc: `> 1min`,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565164331,565164331,src/net.cpp
MarcoFalke,2021-01-27 09:49:20,"64f3fb1a966cfee47e6cfccdd5e9c9540bfebecc: Style nit: I'd say the minus goes conceptually before log1p: `-log1p(...)`. Putting it in the round-to-integer step seems confusing, because the negation is unrelated to rounding.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565167722,565167722,src/net.cpp
MarcoFalke,2021-01-27 09:49:43,2min,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565167975,565167975,src/net.h
MarcoFalke,2021-01-27 09:49:51,5min,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565168106,565168106,src/net.h
MarcoFalke,2021-01-27 09:50:14,0us,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565168337,565168337,src/net.h
MarcoFalke,2021-01-27 09:51:06,24h,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565169020,565169020,src/net_processing.cpp
MarcoFalke,2021-01-27 09:51:13,30s,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565169112,565169112,src/net_processing.cpp
MarcoFalke,2021-01-27 09:51:20,5s,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565169184,565169184,src/net_processing.cpp
MarcoFalke,2021-01-27 09:51:43,same for those two,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565169416,565169416,src/net_processing.cpp
MarcoFalke,2021-01-27 09:57:54,Note to other reviewers: Division does not have any truncation warnings at compile time,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565173767,565173767,src/net_processing.cpp
MarcoFalke,2021-01-27 10:11:53,"I think you can simply assign this to `0`, as the goal is to send immediately",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565183947,565183947,src/net_processing.cpp
MarcoFalke,2021-01-27 10:15:59,in commit c9a8cbc64eddd98d2183380148a3d9c79c1bd7d2: 15min,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565186801,565186801,src/net_processing.cpp
dhruv,2021-01-27 18:12:04,"This function is invoked with `CNodeStats:m_.*ping.*` variables in (for example) `rpcconsole.cpp:1105`. Those member variables are now chrono, so we updated this function.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565527034,565527034,src/qt/guiutil.h
MarcoFalke,2021-01-27 18:22:12,"I mean, why are you removing the doxygen comment?",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565533857,565533857,src/qt/guiutil.h
dhruv,2021-01-27 19:04:23,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561266,565561266,src/net.h
dhruv,2021-01-27 19:04:33,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561363,565561363,src/qt/guiutil.cpp
dhruv,2021-01-27 19:04:41,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561439,565561439,src/rpc/net.cpp
dhruv,2021-01-27 19:04:47,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561501,565561501,src/rpc/net.cpp
dhruv,2021-01-27 19:04:54,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561581,565561581,src/test/fuzz/node_eviction.cpp
dhruv,2021-01-27 19:05:11,Oops. Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561767,565561767,src/test/net_tests.cpp
dhruv,2021-01-27 19:05:15,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561835,565561835,src/net.cpp
dhruv,2021-01-27 19:05:19,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561859,565561859,src/net_processing.cpp
dhruv,2021-01-27 19:05:23,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561889,565561889,src/net_processing.cpp
dhruv,2021-01-27 19:05:29,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565561971,565561971,src/net_processing.cpp
dhruv,2021-01-27 19:05:35,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562031,565562031,src/net_processing.cpp
dhruv,2021-01-27 19:05:43,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562141,565562141,src/net_processing.cpp
dhruv,2021-01-27 19:05:47,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562199,565562199,src/net_processing.cpp
dhruv,2021-01-27 19:05:52,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562264,565562264,src/net_processing.cpp
dhruv,2021-01-27 19:05:55,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562300,565562300,src/net.cpp
dhruv,2021-01-27 19:06:08,That makes more sense. Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562435,565562435,src/net.cpp
dhruv,2021-01-27 19:06:13,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562490,565562490,src/net.h
dhruv,2021-01-27 19:06:16,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562524,565562524,src/net.h
dhruv,2021-01-27 19:06:20,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562560,565562560,src/net.h
dhruv,2021-01-27 19:06:24,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562608,565562608,src/net_processing.cpp
dhruv,2021-01-27 19:06:28,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562665,565562665,src/net_processing.cpp
dhruv,2021-01-27 19:06:32,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562709,565562709,src/net_processing.cpp
dhruv,2021-01-27 19:06:36,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562740,565562740,src/net_processing.cpp
dhruv,2021-01-27 19:06:51,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562862,565562862,src/net_processing.cpp
dhruv,2021-01-27 19:06:56,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565562911,565562911,src/net_processing.cpp
dhruv,2021-01-27 21:50:34,That was unintentional. Fixed.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565659034,565659034,src/qt/guiutil.h
vasild,2021-01-28 04:21:50,"nit:\n\n```suggestion\n            .id = fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n            .nTimeConnected = fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n            .m_min_ping_time = std::chrono::microseconds{fuzzed_data_provider.ConsumeIntegral<int64_t>()},\n            .nLastBlockTime = fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n            .nLastTXTime = fuzzed_d",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565810794,565810794,src/test/fuzz/node_eviction.cpp
vasild,2021-01-28 04:29:18,"nit, it is shorter than `static_cast` and consistent with the code afterwards (`std::chrono::microseconds{candidate.id}`):\n\n```suggestion\n            .m_min_ping_time = std::chrono::microseconds{random_context.randrange(100)},\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565812808,565812808,src/test/net_tests.cpp
vasild,2021-01-28 05:18:27,"This looks wrong, but it is not! `HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER` is `std::chrono::milliseconds` while `GetAdjustedTime()` is `int64_t` seconds and we seem to be doing arithmetic with them. Maybe some comment would make it clearer?\n\n```suggestion\n                state.m_headers_sync_timeout =\n                    current_time + HEADERS_DOWNLOAD_TIMEOUT_BASE +\n                    HEAD",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565826688,565826688,src/net_processing.cpp
vasild,2021-01-28 05:20:19,"```suggestion\n/** Headers download timeout.\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565827205,565827205,src/net_processing.cpp
vasild,2021-01-28 05:20:56,"```suggestion\nstatic constexpr auto HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1ms;\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565827412,565827412,src/net_processing.cpp
vasild,2021-01-28 05:59:27,"nit: this uses `*` and `times` to denote multiplication:\n\n```suggestion\n        // In case there is a block that has been in flight from this peer for (the block interval) * (1 + 0.5 * N)\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565838950,565838950,src/net_processing.cpp
vasild,2021-01-28 06:10:41,"`-x * -y` should be the same as `x * y`:\n\n```suggestion\n    double unscaled = log1p(GetRand(1ULL << 48) * 0.0000000000000035527136788 /* -1/2^48 */);\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565842448,565842448,src/net.cpp
vasild,2021-01-28 06:15:55,"```suggestion\n/** Average delay between trickled inventory transmissions.\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565844097,565844097,src/net_processing.cpp
vasild,2021-01-28 06:28:06,"The meaning of the second argument was ""seconds"" before, to keep the behavior:\n\n```suggestion\n                (void)connman.PoissonNextSendInbound(\n                        std::chrono::microseconds{fuzzed_data_provider.ConsumeIntegral<int32_t>()},\n                        std::chrono::seconds{fuzzed_data_provider.ConsumeIntegral<int>()});\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565848250,565848250,src/test/fuzz/connman.cpp
vasild,2021-01-28 06:30:37,"```suggestion\nstatic constexpr auto UNCONDITIONAL_RELAY_DELAY = 2min;\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565849170,565849170,src/net_processing.cpp
vasild,2021-01-28 06:37:36,Not done yet in c0822a71b.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565851377,565851377,src/net.h
martinus,2021-01-28 07:24:28,"Actually I think this changes the rounding calculation: `HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER` used to be 1000, in us. Now its 1 in milliseconds. The calculation `HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * x / y` used to be in us precision, but now it is only in ms precision. So there is now a bit more of a rounding error than there was before",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565869387,565869387,src/net_processing.cpp
MarcoFalke,2021-01-28 08:07:34,"pls no. This is a bug in the upstream compilers, we shouldn't rely on that.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565889928,565889928,src/test/fuzz/node_eviction.cpp
MarcoFalke,2021-01-28 08:10:18,no. log1p(-a) is not equal to -log1p(a),https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565891469,565891469,src/net.cpp
MarcoFalke,2021-01-28 08:15:07,"How so? GetAdjustedTime is divided by the time it takes for a header, so the result it the number of headers (no unit).\n\nMultiplying a (no unit) with 1000us will give exactly (a)ms, just like multplying a (no unit) with 1ms will give exactly (a)ms.\n\nThis is correct",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565894100,565894100,src/net_processing.cpp
MarcoFalke,2021-01-28 08:16:31,"Could add `(` and `)` to clarify this:\n\n```suggestion\n                state.m_headers_sync_timeout = current_time + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * ((GetAdjustedTime() - pindexBestHeader->GetBlockTime())/consensusParams.nPowTargetSpacing);\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565894967,565894967,src/net_processing.cpp
MarcoFalke,2021-01-28 08:20:05,"I think it is fine to change the meaning with the benefit that the fuzz test will be also grinding at a smaller resolution, which is more likely to be used. I don't think we have a poisson delay of int::max() seconds anywhere. And I don't think it makes sense in practice.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565897029,565897029,src/test/fuzz/connman.cpp
MarcoFalke,2021-01-28 08:21:21,"Seems fine to remove the cast, but please don't use the C++20 feature",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565897753,565897753,src/test/net_tests.cpp
martinus,2021-01-28 08:30:30,"The original calculation order was `(HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * ((GetAdjustedTime() - pindexBestHeader->GetBlockTime())) / consensusParams.nPowTargetSpacing`, so `(1000 * x) / y`. The PR has basically changed this into `(1 * x) / y`. I don't think this is a problem, but the result might be off by up to 999us: https://godbolt.org/z/TEYood",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565903198,565903198,src/net_processing.cpp
MarcoFalke,2021-01-28 08:42:53,not if you assume that x/y is in ‚Ñï,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565910777,565910777,src/net_processing.cpp
MarcoFalke,2021-01-28 08:43:22,"oh wait, it isn't. Missed that (edit: :sweat_smile: )",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565911113,565911113,src/net_processing.cpp
martinus,2021-01-28 09:08:22,"Maybe use this to get rid of the hardcoded constant:\n```suggestion\n            obj.pushKV(""pingtime"", std::chrono::duration<double>{stats.m_ping_time}.count());\n```",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565927236,565927236,src/rpc/net.cpp
martinus,2021-01-28 09:17:59,"This could directly use chrono features for this:\n```suggestion\n    return now + std::chrono::round<std::chrono::microseconds>(unscaled * average_interval);\n```\n",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565933768,565933768,src/net.cpp
MarcoFalke,2021-01-28 09:32:02,"That'd be a breaking RPC change if someone changed the type of `m_ping_time` to nanoseconds. Unlikely here, but plausible for other durations, so I'd rather not encourage such code.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565943304,565943304,src/rpc/net.cpp
vasild,2021-01-28 10:58:33,"Doh, I misread this as `-log1p(a) * -b`.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566002067,566002067,src/net.cpp
vasild,2021-01-28 11:06:02,"```cpp\n    auto us = 500000us;\n    auto ns = 500000000ns;\n\n    std::cout << us.count() * 0.000001 << std::endl;\n    std::cout << std::chrono::duration<double>{us}.count() << std::endl;\n    std::cout << std::chrono::duration<double>{ns}.count() << std::endl;\n```\nall 3 print `0.5`.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566006850,566006850,src/rpc/net.cpp
MarcoFalke,2021-01-28 11:14:15,"Hmm, then it must be broken in another way. There is no way the compiler can figure out what time unit `double` should represent in the Univalue object.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566011941,566011941,src/rpc/net.cpp
MarcoFalke,2021-01-28 11:18:39,"Oh, it will always represent the result in seconds? Seems fair enough, but it would be good to wrap that into a helper method, so that the C++ docs don't have to be looked up every time this is used. (This relies on the default ration being `1`)",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566014703,566014703,src/rpc/net.cpp
martinus,2021-01-28 11:37:34,"> all 3 print `0.5`.\n\nyes, the only difference I see should be that `count_microseconds` won't accept a nanoseconds argument and you'd get a compile error in that case. But the `std::chrono::duration<double>(...)` should always work. Also the `round()` should be more correct than `+ 0.5` for negative durations, but that shouldn't matter here\n\n> Oh, it will always represent the result in se",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566025525,566025525,src/rpc/net.cpp
martinus,2021-01-28 12:00:23,"I think `GetTime` should actually return a `std::chrono::time_point` instead of a duration. But that's probably out of scope for this PR. Then we'd have a few more compile time checks concerning the allowed operations (e.g. you can't add two timepoints, you can't accidentally compare a timepoints with a duration and you can't accidentally mix timepoints from different clocks)",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566038761,566038761,src/net.cpp
vasild,2021-01-28 12:16:58,"no millis, no nanos, no kilos, no megas, just seconds :)",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566048527,566048527,src/rpc/net.cpp
MarcoFalke,2021-01-28 12:50:31,"What about adding `SecondsFloat`, similar to the ` std::chrono::seconds` helper type?\n\n```cpp\nusing SecondsFloat = std::chrono::duration<double>;\ninline auto count_seconds_f(SecondsFloat t) { return t.count(); }\n",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566069323,566069323,src/rpc/net.cpp
vasild,2021-01-28 13:44:08,"I like the idea. Shouldn't it be `CountSeconds()` to follow the naming convention? I think `Float` in the name could be confusing because it is using `double`, not `float`.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566102943,566102943,src/rpc/net.cpp
martinus,2021-01-28 18:58:55,"I'd personally prefer just `std::chrono::duration<double>`, but most likely because I've recently done a lot of chrono related refactoring at work so I'm already used to what this means :smile: \n",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r566334979,566334979,src/rpc/net.cpp
dhruv,2021-01-29 23:18:49,"Awesome catch, @martinus ! I've changed `HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER` to be `1000us` instead of `1ms` to keep things consistent. The change may not be a problem, but I don't see a reason to risk it for moving to chrono types.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567145727,567145727,src/net_processing.cpp
dhruv,2021-01-29 23:18:59,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567145808,567145808,src/net_processing.cpp
dhruv,2021-01-29 23:19:08,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567145856,567145856,src/net_processing.cpp
dhruv,2021-01-29 23:19:16,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567145904,567145904,src/net_processing.cpp
dhruv,2021-01-29 23:19:32,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567145982,567145982,src/net_processing.cpp
dhruv,2021-01-29 23:19:49,Left it as-is.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567146092,567146092,src/test/fuzz/connman.cpp
dhruv,2021-01-29 23:20:00,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567146147,567146147,src/net_processing.cpp
dhruv,2021-01-29 23:22:54,"Thanks for teaching me through code review! I essentially used @MarcoFalke's approach, but made the ratio and the return type explicit for the reader.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567146963,567146963,src/rpc/net.cpp
dhruv,2021-01-29 23:23:13,Thanks! Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567147038,567147038,src/net.cpp
dhruv,2021-01-29 23:24:21,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567147379,567147379,src/test/net_tests.cpp
martinus,2021-01-30 08:54:13,Was the logic changed on purpose?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567219816,567219816,src/net_processing.cpp
MarcoFalke,2021-01-30 09:25:30,Behaviour shouldn't change: https://github.com/bitcoin/bitcoin/pull/21015#discussion_r565183947,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567222658,567222658,src/net_processing.cpp
ajtowns,2021-01-31 16:55:39,`X(m_ping_time); X(m_min_ping_time);` ?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567453479,567453479,src/net.cpp
ajtowns,2021-01-31 17:02:33,Why is this `CountSeconds` not `count_seconds_double` to match the existing `count_microseconds` and `count_seconds`?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567454300,567454300,src/util/time.h
ajtowns,2021-01-31 17:07:00,"Why isn't this `1ms` ?\n\nI see it's mentioned in review comments for code below, but if the precision is actually needed, it should be `std::chrono::microseconds` not `auto` and the reason should probably be commented here too.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567454798,567454798,src/net_processing.cpp
ajtowns,2021-01-31 17:28:34,"I think making it:\n\n```c++\n\nstate.m_headers_sync_timeout = current_time + HEADERS_DOWNLOAD_TIMEOUT_BASE +\n     (\n         std::chrono::microseconds(HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER) *\n         (GetAdjustedTime() - pindexBestHeader->GetBlockTime())\n     ) / consensusParams.nPowTargetSpacing;\n     // GetAdjustedTime/GetBlockTime/nPowTargetSpacing return time in seconds as an int",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567457582,567457582,src/net_processing.cpp
MarcoFalke,2021-02-01 10:52:58,"it would be nicer to cast to the desired and wanted resolution where needed in the source code. Otherwise the move to chrono doesn't feel like an improvement. Image this being changed to 200ms, you'd have to type `200*1000` here again.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567730351,567730351,src/net_processing.cpp
MarcoFalke,2021-02-01 11:00:28,"nit: Would be nice to inherit the period from ""upstream""\n\n\n```diff\ndiff --git a/src/util/time.h b/src/util/time.h\nindex deb9ceefe2..f1b2beb0f3 100644\n--- a/src/util/time.h\n+++ b/src/util/time.h\n@@ -30,7 +30,7 @@ constexpr inline int64_t count_microseconds(std::chrono::microseconds t) { retur\n /**\n  * Helper to count the seconds in any std::chrono::duration type\n  */\n-using ",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567735384,567735384,src/util/time.h
vasild,2021-02-01 14:38:09,"Yeah, in the way it is used it will behave the same as long as `m_next_send_feefilter` is in the past.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567872655,567872655,src/net_processing.cpp
vasild,2021-02-01 15:11:44,"nit: in the doxygen-generated documentation the comment will be assigned to `SecondsDouble` and `CountSeconds` will be left undocumented.\n\n```cpp\n/** These are the coordinates of the buzz point in the hyper plane. */\nint x;\nint y;\n```\nthis looks ok in the source code but will produce unexpected result in the doxygen docs, leaving `y` undocumented.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567898898,567898898,src/util/time.h
ajtowns,2021-02-01 15:37:32,"I think this is changing: `micros > micros + seconds * (millions + millions * count)` to `micros > micros + (seconds * (double + double * count))*scale` which doesn't really seem right to me.\n\nLeaving `BLOCK_DOWNLOAD_TIMEOUT_{BASE,PER_PEER}` as they are, documenting that they're measured in microseconds-per-second (and thus are int's not chrono::durations), and wrapping the entire `nPowTargetS",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567919426,567919426,src/net_processing.cpp
ajtowns,2021-02-01 16:04:32,"I've had a look at this a while ago: https://github.com/ajtowns/bitcoin/commits/201908-systime It's particularly nice that your types can then encode what sort of time you've got -- if it's a high precision clock, if it's a stable clock, or, for us, if it's a mockable clock. One drawback is that time_point's aren't compatible with atomic, so you have to hack around that. I think we'd want to think",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567941530,567941530,src/net.cpp
ajtowns,2021-02-01 16:33:05,"I'm not sure it makes much sense to have the average interval measured in microseconds rather than seconds -- poisson timings are for things that don't happen too frequently. With the different types, you get compile time errors if you swap the arguments or if you try setting the poisson interval far too low.\n\nLooking at godbolt, using `chrono::round` seems to produce much more complicated ass",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567964258,567964258,src/net.cpp
ajtowns,2021-02-01 17:08:25,Might be clearer to have separate constants for inbound/outbound inventory broadcast intervals so it's clear one's 5s and one is 2s?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567992327,567992327,src/net_processing.cpp
MarcoFalke,2021-02-02 10:08:41,See also https://github.com/bitcoin/bitcoin/pull/21015#discussion_r567730351,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r568477146,568477146,src/net_processing.cpp
vasild,2021-02-02 15:21:11,"To my understanding, new code should follow the naming convention:\n\n> Class names, function names, and method names are UpperCamelCase\n\ninstead of trying to mimic existent code.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r568687558,568687558,src/util/time.h
MarcoFalke,2021-02-04 14:06:21,"> which doesn't really seem right to me.\n\nDo you mean mathematically or conceptually on a meta level?\n\nMathematically, it seems correct. Since all variables are constants, we have:\n\n* Before `600 * ( 1000000 + 500000 * nOtherPeersWithValidatedDownloads)` (unit is `us`, implicitly)\n* After `600 * (1. + .5 * nOtherPeersWithValidatedDownloads)`, (unit is `s`, explicitly. Converted by th",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570249043,570249043,src/net_processing.cpp
dhruv,2021-02-04 16:56:58,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570386265,570386265,src/net_processing.cpp
dhruv,2021-02-04 16:57:21,Done,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570386566,570386566,src/util/time.h
dhruv,2021-02-04 16:57:47,Thanks! Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570386951,570386951,src/util/time.h
dhruv,2021-02-04 16:58:06,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570387233,570387233,src/net.cpp
dhruv,2021-02-04 16:58:19,That was my reasoning as well.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570387416,570387416,src/util/time.h
dhruv,2021-02-04 16:58:38,Thanks! Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570387662,570387662,src/net_processing.cpp
dhruv,2021-02-04 17:00:42,"As @MarcoFalke mentioned, the units do make sense to me. Also BLOCK_DOWNLOAD_TIMEOUT_BASE in multiples of block intervals seems easier to understand?",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570389331,570389331,src/net_processing.cpp
dhruv,2021-02-04 17:04:28,"I've converted to microseconds, but left the parenthesis the same as before because it felt more intuitive to be multiplying HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER with something that was a measure of number of headers. C++ operator precedence for `*` and `/` is left -to-right so the math shouldn't change afaict.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570392029,570392029,src/net_processing.cpp
dhruv,2021-02-04 17:07:15,"It does seem better to have the average interval in seconds. Updated.\n\nI felt that the code reads cleaner with `chrono::round` and have left it in for now. If other reviewers also think more optimal assembly is necessary here, I'll be happy to change it.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570394154,570394154,src/net.cpp
dhruv,2021-02-04 17:07:47,"Yes, that's indeed clearer. Updated.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r570394532,570394532,src/net_processing.cpp
MarcoFalke,2021-02-11 17:26:01,"```suggestion\nconstexpr int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n```\n\nnit: constexpr implies inline, so no need to specify twice",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r574687932,574687932,src/util/time.h
dhruv,2021-02-11 23:57:58,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r574909973,574909973,src/util/time.h
ajtowns,2021-02-12 04:43:46,"Hmm, I'd still suggest adding a comment explaining the conversion to `std::chrono::microseconds` -- the usual point of chrono types is that it does the right conversions behind the scenes, so the fact it's getting done manually is weird and could use an explanation I think.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r574986644,574986644,src/net_processing.cpp
ajtowns,2021-02-12 05:33:41,"""doesn't really seem right"" -- yeah, more along the lines of ""morally right"" vs ""mathematically correct"" :)\n\nIn general using doubles where they're not needed just seems like a bad idea to me -- there's way more possible special cases and pitfalls with them, and the code already works fine without them, so why change it? Changing behaviour in potentially subtle ways in refactors bothers me in ",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r574998489,574998489,src/net_processing.cpp
ajtowns,2021-02-12 06:04:56,"Optimal assembly doesn't matter so much (we're calculating log1p at the same time which presumably isn't that quick), it's more that it's not particularly obvious to me that using `chrono::round` doesn't introduce a bug, and I don't see any need for the change. Obviously if it does introduce a bug, that would be the compiler's fault rather than yours per se, but that happens too.\n\nI think an a",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r575006627,575006627,src/net.cpp
ajtowns,2021-02-12 08:30:04,Personally I think this is an example of where the naming convention is buggy rather than the code; but especially if `int64_t count_seconds(seconds)` should be `int64_t CountSeconds(seconds)` we shouldn't be introducing `double CountSeconds(SecondsDouble)` with a name clash like that -- would `CountSeconds(micros)` return an int or double?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r575057402,575057402,src/util/time.h
martinus,2021-02-12 11:42:13,I'd personally just prefer `std::chrono::duration<double>(t).count()` instead of a helper.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r575165654,575165654,src/util/time.h
dhruv,2021-02-14 15:22:38,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r575823488,575823488,src/net_processing.cpp
dhruv,2021-02-14 15:22:42,Renamed to `CountSecondsDouble`,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r575823493,575823493,src/util/time.h
dhruv,2021-02-14 15:41:48,"There's definitely a tradeoff between the probability of introducing a bug and modernizing our codebase. When we choose to embrace a new stdlib or language feature, I'd propose we should do it _relatively_ consistently (lower level code will be more resistant). It seems we're adopting `std::chrono`, so `std::chrono::round` is not that different.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r575825925,575825925,src/net.cpp
MarcoFalke,2021-02-15 12:30:32,"I think if we can't trust the compiler to produce correct code, and can't trust our test to catch the issue either, there is nothing we can do preemptively other than write more tests. Choosing one version of the code over another in the absence of any known compiler miscompilation bugs doesn't seem too helpful to me, because we don't know if any of our dependencies use that piece of code in eithe",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r576159108,576159108,src/net.cpp
ajtowns,2021-02-16 02:09:52,"> It seems we're adopting `std::chrono`, so `std::chrono::round` is not that different.\n\nI just explained why std::chrono::round is different -- it does different, substantially more complicated logic than the current code [0]. Converting to `std::chrono::duration` doesn't do different logic to just having an `int64_t`, it just adds type safety to help avoid mixing different scales. We don't n",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r576507483,576507483,src/net.cpp
martinus,2021-02-16 07:16:28,"I have now actually benchmarked the `PoissonNextSend` in 3 different variants: original, round, duration_cast. Here are the results:\n\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|----------",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r576594274,576594274,src/net.cpp
dhruv,2021-02-16 17:47:00,"With no material performance difference, my preference aside, I do not see a reason to hold up this PR. Updated the code to use `duration_cast`.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r577016316,577016316,src/net.cpp
MarcoFalke,2021-02-18 06:36:25,in the first commit: why is this renamed?,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578164955,578164955,src/net.h
sipa,2021-02-18 06:39:57,"I did that to make it more consistent (and as the type changes, all call sites have to be touched anyway).",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578166464,578166464,src/net.h
MarcoFalke,2021-02-18 06:45:19,"I mean rename from `m_last_ping_time` to `m_ping_time` (removing the ""last""), which happened in the latest rebase.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578168275,578168275,src/net.h
MarcoFalke,2021-02-18 07:11:24,"> In the absence of a good reason to make a change, don't make a change. If there's two approaches that achieve the same result, choose the simpler one.\n\nObviously I agree with that statement, but it doesn't seem applicable here. First, it doesn't look like the duration cast produces the same binary for me: https://godbolt.org/z/nejf46. And second, the `round` variant is simpler and shorter co",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578179011,578179011,src/net.cpp
MarcoFalke,2021-02-18 07:12:13,Still not addressed,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578179328,578179328,src/net.h
vasild,2021-02-18 08:58:36,"Notice - it was renamed _to_ `m_ping_time` in previous incarnations of this PR:\n\n`df8892dc9..7b6775ba7`: `nPingUsecTime` -> `m_ping_time`\n`9bbf08bf9..f4450e105`: `m_last_ping_time` -> `m_ping_time`\n\nSo, it is all consistent from this PR's point of view. Just `master` changed from `nPingUsecTime` to `m_last_ping_time`. I think either one of `m_last_ping_time` or `m_ping_time` is fine.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578239662,578239662,src/net.h
MarcoFalke,2021-02-18 09:00:59,"Yes, I know :)\n\nMy opinion is just that it doesn't make sense to rename this after the rebase",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578241303,578241303,src/net.h
ajtowns,2021-02-18 09:39:24,"I believe the differences are that `average_interval` goes from `int` to `int64_t` precision, and `0.5us` is a long double while `0.5` is a double. I think replacing `chrono::round<chrono::microseconds>` with:\n\n```c++\ntemplate<typename Dur, typename Dur2>\nconstexpr Dur chrono_round_half_up(Dur2 dur)\n{\n    return std::chrono::duration_cast<Dur>(Dur{1}*0.5 + dur);\n}\n```\n\nwill gen",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578268032,578268032,src/net.cpp
ajtowns,2021-02-18 15:49:17,"What I'd prefer is something more like:\n\n```c++\nconstexpr Fraction BLOCK_DOWNLOAD_TIMEOUT_BASE{1};\nconstexpr Fraction BLOCK_DOWNLOAD_TIMEOUT_PER_PEER{1,2};\n```\n\nso that you can define the constants meaningfully, but still have all the calculations done with integer math. You can make that actually work relatively easily:\n\n```c++\nclass Fraction {\npublic:\n    constexpr Fracti",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r578529918,578529918,src/net_processing.cpp
jnewbery,2021-02-26 08:46:16,"I renamed this from `nPingUsecTime` to `m_last_ping_time` in #20721. I think `m_last_ping_time` is slightly better than `m_ping_time` because it makes it clear that this is the time from the most recent ping/pong round trip. The next field is `m_min_ping_time`, which is the minimum time of all the ping/pong round trips.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r583474249,583474249,src/net.h
jnewbery,2021-03-03 10:55:45,"Since you're changing these lines already, it might be a nice opportunity to remove them from the ctor and use default initialization:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 3c8ef345e1..caac75b72e 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -537,12 +537,12 @@ struct CNodeState {\n     //! Whether we've started headers sync",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586316752,586316752,src/net_processing.cpp
dhruv,2021-03-03 17:44:56,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586639056,586639056,src/net_processing.cpp
dhruv,2021-03-03 17:45:16,Done.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586639269,586639269,src/net.h
dhruv,2021-03-03 17:45:45,Done. Using m_last_ping_time now.,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586639685,586639685,src/net.h
jnewbery,2021-03-03 19:31:20,Thanks!,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586719272,586719272,src/net_processing.cpp
jnewbery,2021-03-03 19:31:33,Thanks!,https://github.com/bitcoin/bitcoin/pull/21015#discussion_r586719386,586719386,src/net.h
ajtowns,2021-03-04 10:53:46,"Having this be `ping_time == ping_time.max()` would ensure you don't accidently get the wrong type (eg if ping_time was changed to milliseconds, and set to max it would no longer compare equal to microseconds max). There's a few places where the code might be improved by that change.",https://github.com/bitcoin/bitcoin/pull/21015#discussion_r587364422,587364422,src/qt/guiutil.cpp
