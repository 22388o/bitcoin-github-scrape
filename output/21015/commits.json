[
  {
    "sha": "4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDk4YjQwMWZiZDgyMTcwMGY3YTc5MmIwYTRjYjUyYzliNzFiYzlm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T02:11:53Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-03-03T17:48:07Z"
      },
      "message": "Change all ping times to std::chrono types",
      "tree": {
        "sha": "b343ca6c143006fa595d72d56b14d74c008aae7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b343ca6c143006fa595d72d56b14d74c008aae7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cabe63759ce890a7d39d72f7b8046195b0edb421",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cabe63759ce890a7d39d72f7b8046195b0edb421",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cabe63759ce890a7d39d72f7b8046195b0edb421"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 56,
      "deletions": 43
    },
    "files": [
      {
        "sha": "6bde7534d98f42697654d87b1b757cfba35476ea",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -603,8 +603,8 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n         stats.minFeeFilter = 0;\n     }\n \n-    stats.m_ping_usec = m_last_ping_time;\n-    stats.m_min_ping_usec = m_min_ping_time;\n+    X(m_last_ping_time);\n+    X(m_min_ping_time);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n     CService addrLocalUnlocked = GetAddrLocal();"
      },
      {
        "sha": "d8fcaf2a8082fa1334a198ba5251b776807cd4e4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -261,8 +261,8 @@ class CNodeStats\n     uint64_t nRecvBytes;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd;\n     NetPermissionFlags m_permissionFlags;\n-    int64_t m_ping_usec;\n-    int64_t m_min_ping_usec;\n+    std::chrono::microseconds m_last_ping_time;\n+    std::chrono::microseconds m_min_ping_time;\n     CAmount minFeeFilter;\n     // Our address, as reported by the peer\n     std::string addrLocal;\n@@ -593,11 +593,11 @@ class CNode\n     std::atomic<int64_t> nLastTXTime{0};\n \n     /** Last measured round-trip time. Used only for RPC/GUI stats/debugging.*/\n-    std::atomic<int64_t> m_last_ping_time{0};\n+    std::atomic<std::chrono::microseconds> m_last_ping_time{0us};\n \n     /** Lowest measured round-trip time. Used as an inbound peer eviction\n      * criterium in CConnman::AttemptToEvictConnection. */\n-    std::atomic<int64_t> m_min_ping_time{std::numeric_limits<int64_t>::max()};\n+    std::atomic<std::chrono::microseconds> m_min_ping_time{std::chrono::microseconds::max()};\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion);\n     ~CNode();\n@@ -719,8 +719,8 @@ class CNode\n \n     /** A ping-pong round trip has completed successfully. Update latest and minimum ping times. */\n     void PongReceived(std::chrono::microseconds ping_time) {\n-        m_last_ping_time = count_microseconds(ping_time);\n-        m_min_ping_time = std::min(m_min_ping_time.load(), count_microseconds(ping_time));\n+        m_last_ping_time = ping_time;\n+        m_min_ping_time = std::min(m_min_ping_time.load(), ping_time);\n     }\n \n private:\n@@ -1284,7 +1284,7 @@ struct NodeEvictionCandidate\n {\n     NodeId id;\n     int64_t nTimeConnected;\n-    int64_t m_min_ping_time;\n+    std::chrono::microseconds m_min_ping_time;\n     int64_t nLastBlockTime;\n     int64_t nLastTXTime;\n     bool fRelevantServices;"
      },
      {
        "sha": "5a8da35ff502bc01652bff16a7a5c6540e4601c4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -1112,7 +1112,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats)\n         ping_wait = GetTime<std::chrono::microseconds>() - peer->m_ping_start.load();\n     }\n \n-    stats.m_ping_wait_usec = count_microseconds(ping_wait);\n+    stats.m_ping_wait = ping_wait;\n \n     return true;\n }"
      },
      {
        "sha": "3a5f0bf9836c42b591268d0122ad35c013e1a427",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -30,7 +30,7 @@ struct CNodeStateStats {\n     int nSyncHeight = -1;\n     int nCommonHeight = -1;\n     int m_starting_height = -1;\n-    int64_t m_ping_wait_usec;\n+    std::chrono::microseconds m_ping_wait;\n     std::vector<int> vHeightInFlight;\n };\n "
      },
      {
        "sha": "89d6deb70d101fa2c58fbd3daa1c219f8f053310",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -59,6 +59,8 @@\n #include <QUrlQuery>\n #include <QtGlobal>\n \n+#include <chrono>\n+\n #if defined(Q_OS_MAC)\n \n #include <QProcess>\n@@ -706,9 +708,11 @@ QString formatServicesStr(quint64 mask)\n         return QObject::tr(\"None\");\n }\n \n-QString formatPingTime(int64_t ping_usec)\n+QString formatPingTime(std::chrono::microseconds ping_time)\n {\n-    return (ping_usec == std::numeric_limits<int64_t>::max() || ping_usec == 0) ? QObject::tr(\"N/A\") : QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(ping_usec / 1000), 10));\n+    return (ping_time == std::chrono::microseconds::max() || ping_time == 0us) ?\n+        QObject::tr(\"N/A\") :\n+        QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(count_microseconds(ping_time) / 1000), 10));\n }\n \n QString formatTimeOffset(int64_t nTimeOffset)"
      },
      {
        "sha": "6395ec6abdd292bce7a3e956dc6d6f62a6383c1e",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -20,6 +20,8 @@\n #include <QString>\n #include <QTableView>\n \n+#include <chrono>\n+\n class QValidatedLineEdit;\n class SendCoinsRecipient;\n \n@@ -202,8 +204,8 @@ namespace GUIUtil\n     /** Format CNodeStats.nServices bitmask into a user-readable string */\n     QString formatServicesStr(quint64 mask);\n \n-    /** Format a CNodeStats.m_ping_usec into a user-readable string or display N/A, if 0 */\n-    QString formatPingTime(int64_t ping_usec);\n+    /** Format a CNodeStats.m_last_ping_time into a user-readable string or display N/A, if 0 */\n+    QString formatPingTime(std::chrono::microseconds ping_time);\n \n     /** Format a CNodeCombinedStats.nTimeOffset into a user-readable string */\n     QString formatTimeOffset(int64_t nTimeOffset);"
      },
      {
        "sha": "448024d657f9c4e205a93e1bd07a3d1f57948114",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -34,7 +34,7 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n     case PeerTableModel::Network:\n         return pLeft->m_network < pRight->m_network;\n     case PeerTableModel::Ping:\n-        return pLeft->m_min_ping_usec < pRight->m_min_ping_usec;\n+        return pLeft->m_min_ping_time < pRight->m_min_ping_time;\n     case PeerTableModel::Sent:\n         return pLeft->nSendBytes < pRight->nSendBytes;\n     case PeerTableModel::Received:\n@@ -170,7 +170,7 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n         case Network:\n             return GUIUtil::NetworkToQString(rec->nodeStats.m_network);\n         case Ping:\n-            return GUIUtil::formatPingTime(rec->nodeStats.m_min_ping_usec);\n+            return GUIUtil::formatPingTime(rec->nodeStats.m_min_ping_time);\n         case Sent:\n             return GUIUtil::formatBytes(rec->nodeStats.nSendBytes);\n         case Received:"
      },
      {
        "sha": "68adad4ebd5a3661e796a1b00f04deb83ad3e76a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -1128,8 +1128,8 @@ void RPCConsole::updateDetailWidget()\n     ui->peerLastRecv->setText(TimeDurationField(time_now, stats->nodeStats.nLastRecv));\n     ui->peerBytesSent->setText(GUIUtil::formatBytes(stats->nodeStats.nSendBytes));\n     ui->peerBytesRecv->setText(GUIUtil::formatBytes(stats->nodeStats.nRecvBytes));\n-    ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.m_ping_usec));\n-    ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.m_min_ping_usec));\n+    ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.m_last_ping_time));\n+    ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.m_min_ping_time));\n     ui->timeoffset->setText(GUIUtil::formatTimeOffset(stats->nodeStats.nTimeOffset));\n     ui->peerVersion->setText(QString::number(stats->nodeStats.nVersion));\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));\n@@ -1162,7 +1162,7 @@ void RPCConsole::updateDetailWidget()\n             ui->peerCommonHeight->setText(tr(\"Unknown\"));\n \n         ui->peerHeight->setText(QString::number(stats->nodeStateStats.m_starting_height));\n-        ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStateStats.m_ping_wait_usec));\n+        ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStateStats.m_ping_wait));\n     }\n \n     ui->peersTabRightPanel->show();"
      },
      {
        "sha": "6d33654c6f802f46e58c4c6799df78ff6d5ad65c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -202,14 +202,14 @@ static RPCHelpMan getpeerinfo()\n         obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n         obj.pushKV(\"conntime\", stats.nTimeConnected);\n         obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n-        if (stats.m_ping_usec > 0) {\n-            obj.pushKV(\"pingtime\", ((double)stats.m_ping_usec) / 1e6);\n+        if (stats.m_last_ping_time > 0us) {\n+            obj.pushKV(\"pingtime\", CountSecondsDouble(stats.m_last_ping_time));\n         }\n-        if (stats.m_min_ping_usec < std::numeric_limits<int64_t>::max()) {\n-            obj.pushKV(\"minping\", ((double)stats.m_min_ping_usec) / 1e6);\n+        if (stats.m_min_ping_time < std::chrono::microseconds::max()) {\n+            obj.pushKV(\"minping\", CountSecondsDouble(stats.m_min_ping_time));\n         }\n-        if (fStateStats && statestats.m_ping_wait_usec > 0) {\n-            obj.pushKV(\"pingwait\", ((double)statestats.m_ping_wait_usec) / 1e6);\n+        if (fStateStats && statestats.m_ping_wait > 0s) {\n+            obj.pushKV(\"pingwait\", CountSecondsDouble(statestats.m_ping_wait));\n         }\n         obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from"
      },
      {
        "sha": "606ebfc1510b7c58e03818ef4d1b2dbe229dbe6b",
        "filename": "src/test/fuzz/node_eviction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/test/fuzz/node_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/test/fuzz/node_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/node_eviction.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -21,17 +21,17 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         eviction_candidates.push_back({\n-            fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n+            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n+            /* m_min_ping_time */ std::chrono::microseconds{fuzzed_data_provider.ConsumeIntegral<int64_t>()},\n+            /* nLastBlockTime */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n+            /* nLastTXTime */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n+            /* fRelevantServices */ fuzzed_data_provider.ConsumeBool(),\n+            /* fRelayTxes */ fuzzed_data_provider.ConsumeBool(),\n+            /* fBloomFilter */ fuzzed_data_provider.ConsumeBool(),\n+            /* nKeyedNetGroup */ fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+            /* prefer_evict */ fuzzed_data_provider.ConsumeBool(),\n+            /* m_is_local */ fuzzed_data_provider.ConsumeBool(),\n         });\n     }\n     // Make a copy since eviction_candidates may be in some valid but otherwise"
      },
      {
        "sha": "5b2b7c6701b911823ce17a9af79a6377fe81c727",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -825,7 +825,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n         candidates.push_back({\n             /* id */ id,\n             /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* m_min_ping_time */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n             /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n             /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n             /* fRelevantServices */ random_context.randbool(),\n@@ -885,7 +885,7 @@ BOOST_AUTO_TEST_CASE(node_eviction_test)\n             // from eviction.\n             BOOST_CHECK(!IsEvicted(\n                 number_of_nodes, [](NodeEvictionCandidate& candidate) {\n-                    candidate.m_min_ping_time = candidate.id;\n+                    candidate.m_min_ping_time = std::chrono::microseconds{candidate.id};\n                 },\n                 {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n \n@@ -931,10 +931,10 @@ BOOST_AUTO_TEST_CASE(node_eviction_test)\n             // Combination of all tests above.\n             BOOST_CHECK(!IsEvicted(\n                 number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id; // 4 protected\n-                    candidate.m_min_ping_time = candidate.id;                 // 8 protected\n-                    candidate.nLastTXTime = number_of_nodes - candidate.id;    // 4 protected\n-                    candidate.nLastBlockTime = number_of_nodes - candidate.id; // 4 protected\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;           // 4 protected\n+                    candidate.m_min_ping_time = std::chrono::microseconds{candidate.id}; // 8 protected\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;              // 4 protected\n+                    candidate.nLastBlockTime = number_of_nodes - candidate.id;           // 4 protected\n                 },\n                 {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, random_context));\n "
      },
      {
        "sha": "9b418637c37e479f1936da0550cbe71cee8378a5",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "patch": "@@ -30,6 +30,13 @@ inline int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n inline int64_t count_milliseconds(std::chrono::milliseconds t) { return t.count(); }\n inline int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n \n+using SecondsDouble = std::chrono::duration<double, std::chrono::seconds::period>;\n+\n+/**\n+ * Helper to count the seconds in any std::chrono::duration type\n+ */\n+inline double CountSecondsDouble(SecondsDouble t) { return t.count(); }\n+\n /**\n  * DEPRECATED\n  * Use either GetSystemTimeInSeconds (not mockable) or GetTime<T> (mockable)"
      }
    ]
  },
  {
    "sha": "c733ac4d8a597b1001555b142f488ed9fbecc405",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzMzYWM0ZDhhNTk3YjEwMDE1NTViMTQyZjQ4OGVkOWZiZWNjNDA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T02:43:54Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-03-03T17:48:07Z"
      },
      "message": "Convert block/header sync timeouts to std::chrono types",
      "tree": {
        "sha": "2f70e30961fe9377c45fff118f57f57cc7f8eb71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f70e30961fe9377c45fff118f57f57cc7f8eb71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c733ac4d8a597b1001555b142f488ed9fbecc405",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c733ac4d8a597b1001555b142f488ed9fbecc405",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c733ac4d8a597b1001555b142f488ed9fbecc405",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c733ac4d8a597b1001555b142f488ed9fbecc405/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d98b401fbd821700f7a792b0a4cb52c9b71bc9f"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 30,
      "deletions": 27
    },
    "files": [
      {
        "sha": "2189ddf722f7cfacbb8eb76a04d8521b9ecb2c84",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 27,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c733ac4d8a597b1001555b142f488ed9fbecc405/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c733ac4d8a597b1001555b142f488ed9fbecc405/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c733ac4d8a597b1001555b142f488ed9fbecc405",
        "patch": "@@ -43,10 +43,10 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME = std::chrono::minutes{15};\n /** How long a transaction has to be in the mempool before it can unconditionally be relayed (even when not in mapRelay). */\n static constexpr std::chrono::seconds UNCONDITIONAL_RELAY_DELAY = std::chrono::minutes{2};\n-/** Headers download timeout expressed in microseconds\n+/** Headers download timeout.\n  *  Timeout = base + per_header * (expected number of headers) */\n-static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n-static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+static constexpr auto HEADERS_DOWNLOAD_TIMEOUT_BASE = 15min;\n+static constexpr auto HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1ms;\n /** Protect at least this many outbound peers from disconnection due to slow/\n  * behind headers chain.\n  */\n@@ -93,8 +93,8 @@ static constexpr std::chrono::microseconds GETDATA_TX_INTERVAL{std::chrono::seco\n static const unsigned int MAX_GETDATA_SZ = 1000;\n /** Number of blocks that can be requested at any given time from a single peer. */\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n-static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n+/** Time during which a peer must stall block download progress before being disconnected. */\n+static constexpr auto BLOCK_STALLING_TIMEOUT = 2s;\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n  *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n static const unsigned int MAX_HEADERS_RESULTS = 2000;\n@@ -108,10 +108,10 @@ static const int MAX_BLOCKTXN_DEPTH = 10;\n  *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n  *  want to make this a per-peer adaptive value at some point. */\n static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n-/** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n+/** Block download timeout base, expressed in multiples of the block interval (i.e. 10 min) */\n+static constexpr double BLOCK_DOWNLOAD_TIMEOUT_BASE = 1;\n /** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n+static constexpr double BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 0.5;\n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n /** Maximum number of unconnecting headers announcements before DoS score */\n@@ -533,12 +533,12 @@ struct CNodeState {\n     //! Whether we've started headers synchronization with this peer.\n     bool fSyncStarted;\n     //! When to potentially disconnect peer for stalling headers download\n-    int64_t nHeadersSyncTimeout;\n+    std::chrono::microseconds m_headers_sync_timeout{0us};\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n-    int64_t nStallingSince;\n+    std::chrono::microseconds m_stalling_since{0us};\n     std::list<QueuedBlock> vBlocksInFlight;\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n-    int64_t nDownloadingSince;\n+    std::chrono::microseconds m_downloading_since{0us};\n     int nBlocksInFlight;\n     int nBlocksInFlightValidHeaders;\n     //! Whether we consider this a preferred download peer.\n@@ -621,9 +621,6 @@ struct CNodeState {\n         pindexBestHeaderSent = nullptr;\n         nUnconnectingHeaders = 0;\n         fSyncStarted = false;\n-        nHeadersSyncTimeout = 0;\n-        nStallingSince = 0;\n-        nDownloadingSince = 0;\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n@@ -672,11 +669,11 @@ bool PeerManagerImpl::MarkBlockAsReceived(const uint256& hash)\n         }\n         if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n             // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, count_microseconds(GetTime<std::chrono::microseconds>()));\n+            state->m_downloading_since = std::max(state->m_downloading_since, GetTime<std::chrono::microseconds>());\n         }\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n-        state->nStallingSince = 0;\n+        state->m_stalling_since = 0us;\n         mapBlocksInFlight.erase(itInFlight);\n         return true;\n     }\n@@ -706,7 +703,7 @@ bool PeerManagerImpl::MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, co\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n         // We're starting a block download (batch) from this peer.\n-        state->nDownloadingSince = GetTime<std::chrono::microseconds>().count();\n+        state->m_downloading_since = GetTime<std::chrono::microseconds>();\n     }\n     if (state->nBlocksInFlightValidHeaders == 1 && pindex != nullptr) {\n         nPeersWithValidatedDownloads++;\n@@ -4485,7 +4482,13 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n-                state.nHeadersSyncTimeout = count_microseconds(current_time) + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n+                state.m_headers_sync_timeout = current_time + HEADERS_DOWNLOAD_TIMEOUT_BASE +\n+                    (\n+                        // Convert HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER to microseconds before scaling\n+                        // to maintain precision\n+                        std::chrono::microseconds{HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER} *\n+                        (GetAdjustedTime() - pindexBestHeader->GetBlockTime()) / consensusParams.nPowTargetSpacing\n+                    );\n                 nSyncStarted++;\n                 const CBlockIndex *pindexStart = pindexBestHeader;\n                 /* If possible, start at the block preceding the currently\n@@ -4795,33 +4798,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n         // Detect whether we're stalling\n         current_time = GetTime<std::chrono::microseconds>();\n-        if (state.nStallingSince && state.nStallingSince < count_microseconds(current_time) - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n             return true;\n         }\n-        // In case there is a block that has been in flight from this peer for 2 + 0.5 * N times the block interval\n+        // In case there is a block that has been in flight from this peer for block_interval * (1 + 0.5 * N)\n         // (with N the number of peers from which we're downloading validated blocks), disconnect due to timeout.\n         // We compensate for other peers to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\n         // to unreasonably increase our timeout.\n         if (state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n-            if (count_microseconds(current_time) > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n+            if (current_time > state.m_downloading_since + std::chrono::seconds{consensusParams.nPowTargetSpacing} * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n                 LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->GetId());\n                 pto->fDisconnect = true;\n                 return true;\n             }\n         }\n         // Check for headers sync timeouts\n-        if (state.fSyncStarted && state.nHeadersSyncTimeout < std::numeric_limits<int64_t>::max()) {\n+        if (state.fSyncStarted && state.m_headers_sync_timeout < std::chrono::microseconds::max()) {\n             // Detect whether this is a stalling initial-headers-sync peer\n             if (pindexBestHeader->GetBlockTime() <= GetAdjustedTime() - 24 * 60 * 60) {\n-                if (count_microseconds(current_time) > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n+                if (current_time > state.m_headers_sync_timeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n                     // Disconnect a peer (without the noban permission) if it is our only sync peer,\n                     // and we have others we could be using instead.\n                     // Note: If all our peers are inbound, then we won't\n@@ -4840,13 +4843,13 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         // this peer (eventually).\n                         state.fSyncStarted = false;\n                         nSyncStarted--;\n-                        state.nHeadersSyncTimeout = 0;\n+                        state.m_headers_sync_timeout = 0us;\n                     }\n                 }\n             } else {\n                 // After we've caught up once, reset the timeout so we can't trigger\n                 // disconnect later.\n-                state.nHeadersSyncTimeout = std::numeric_limits<int64_t>::max();\n+                state.m_headers_sync_timeout = std::chrono::microseconds::max();\n             }\n         }\n \n@@ -4870,8 +4873,8 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     pindex->nHeight, pto->GetId());\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n-                if (State(staller)->nStallingSince == 0) {\n-                    State(staller)->nStallingSince = count_microseconds(current_time);\n+                if (State(staller)->m_stalling_since == 0us) {\n+                    State(staller)->m_stalling_since = current_time;\n                     LogPrint(BCLog::NET, \"Stall started peer=%d\\n\", staller);\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "55e82881a1503bff146970856c1474a6ea659c94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWU4Mjg4MWExNTAzYmZmMTQ2OTcwODU2YzE0NzRhNmVhNjU5Yzk0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T03:19:57Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-03-03T17:48:07Z"
      },
      "message": "Make all Poisson delays use std::chrono types",
      "tree": {
        "sha": "0509594a0e86852e8601d14ab44cd5a102f6bc40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0509594a0e86852e8601d14ab44cd5a102f6bc40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55e82881a1503bff146970856c1474a6ea659c94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e82881a1503bff146970856c1474a6ea659c94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55e82881a1503bff146970856c1474a6ea659c94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e82881a1503bff146970856c1474a6ea659c94/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c733ac4d8a597b1001555b142f488ed9fbecc405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c733ac4d8a597b1001555b142f488ed9fbecc405",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c733ac4d8a597b1001555b142f488ed9fbecc405"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 47,
      "deletions": 63
    },
    "files": [
      {
        "sha": "513328897bd62981d7424c11e6ca12c3383bf22f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e82881a1503bff146970856c1474a6ea659c94/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e82881a1503bff146970856c1474a6ea659c94/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=55e82881a1503bff146970856c1474a6ea659c94",
        "patch": "@@ -1761,12 +1761,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     }\n \n     // Initiate network connections\n-    auto start = GetTime<std::chrono::seconds>();\n+    auto start = GetTime<std::chrono::microseconds>();\n \n     // Minimum time before next feeler connection (in microseconds).\n-\n-    int64_t nNextFeeler = PoissonNextSend(count_microseconds(start), FEELER_INTERVAL);\n-    int64_t nNextExtraBlockRelay = PoissonNextSend(count_microseconds(start), EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n+    auto next_feeler = PoissonNextSend(start, FEELER_INTERVAL);\n+    auto next_extra_block_relay = PoissonNextSend(start, EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n     const bool dnsseed = gArgs.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED);\n     bool add_fixed_seeds = gArgs.GetBoolArg(\"-fixedseeds\", DEFAULT_FIXEDSEEDS);\n \n@@ -1849,7 +1848,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         }\n \n         ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n-        int64_t nTime = GetTimeMicros();\n+        auto now = GetTime<std::chrono::microseconds>();\n         bool anchor = false;\n         bool fFeeler = false;\n \n@@ -1861,7 +1860,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // GetTryNewOutboundPeer() gets set when a stale tip is detected, so we\n         // try opening an additional OUTBOUND_FULL_RELAY connection. If none of\n         // these conditions are met, check to see if it's time to try an extra\n-        // block-relay-only peer (to confirm our tip is current, see below) or the nNextFeeler\n+        // block-relay-only peer (to confirm our tip is current, see below) or the next_feeler\n         // timer to decide if we should open a FEELER.\n \n         if (!m_anchors.empty() && (nOutboundBlockRelay < m_max_outbound_block_relay)) {\n@@ -1873,7 +1872,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             conn_type = ConnectionType::BLOCK_RELAY;\n         } else if (GetTryNewOutboundPeer()) {\n             // OUTBOUND_FULL_RELAY\n-        } else if (nTime > nNextExtraBlockRelay && m_start_extra_block_relay_peers) {\n+        } else if (now > next_extra_block_relay && m_start_extra_block_relay_peers) {\n             // Periodically connect to a peer (using regular outbound selection\n             // methodology from addrman) and stay connected long enough to sync\n             // headers, but not much else.\n@@ -1895,10 +1894,10 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             // Because we can promote these connections to block-relay-only\n             // connections, they do not get their own ConnectionType enum\n             // (similar to how we deal with extra outbound peers).\n-            nNextExtraBlockRelay = PoissonNextSend(nTime, EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n+            next_extra_block_relay = PoissonNextSend(now, EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n             conn_type = ConnectionType::BLOCK_RELAY;\n-        } else if (nTime > nNextFeeler) {\n-            nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+        } else if (now > next_feeler) {\n+            next_feeler = PoissonNextSend(now, FEELER_INTERVAL);\n             conn_type = ConnectionType::FEELER;\n             fFeeler = true;\n         } else {\n@@ -2983,20 +2982,21 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n     return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n-int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_seconds)\n+std::chrono::microseconds CConnman::PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::seconds average_interval)\n {\n-    if (m_next_send_inv_to_incoming < now) {\n+    if (m_next_send_inv_to_incoming.load() < now) {\n         // If this function were called from multiple threads simultaneously\n         // it would possible that both update the next send variable, and return a different result to their caller.\n         // This is not possible in practice as only the net processing thread invokes this function.\n-        m_next_send_inv_to_incoming = PoissonNextSend(now, average_interval_seconds);\n+        m_next_send_inv_to_incoming = PoissonNextSend(now, average_interval);\n     }\n     return m_next_send_inv_to_incoming;\n }\n \n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n+std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n {\n-    return now + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+    double unscaled = -log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */);\n+    return now + std::chrono::duration_cast<std::chrono::microseconds>(unscaled * average_interval + 0.5us);\n }\n \n CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const"
      },
      {
        "sha": "f1d22ffed0e93d73aa881c01f56d08e8083dd32c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e82881a1503bff146970856c1474a6ea659c94/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e82881a1503bff146970856c1474a6ea659c94/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=55e82881a1503bff146970856c1474a6ea659c94",
        "patch": "@@ -49,10 +49,10 @@ static const bool DEFAULT_WHITELISTFORCERELAY = false;\n \n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n-/** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n-static const int FEELER_INTERVAL = 120;\n+/** Run the feeler connection loop once every 2 minutes. **/\n+static constexpr auto FEELER_INTERVAL = 2min;\n /** Run the extra block-relay-only connection loop once every 5 minutes. **/\n-static const int EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL = 300;\n+static constexpr auto EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL = 5min;\n /** The maximum number of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n@@ -573,7 +573,7 @@ class CNode\n         /** Minimum fee rate with which to filter inv's to this node */\n         std::atomic<CAmount> minFeeFilter{0};\n         CAmount lastSentFeeFilter{0};\n-        int64_t nextSendTimeFeeFilter{0};\n+        std::chrono::microseconds m_next_send_feefilter{0};\n     };\n \n     // m_tx_relay == nullptr if we're not relaying transactions with this peer\n@@ -1021,7 +1021,7 @@ class CConnman\n         Works assuming that a single interval is used.\n         Variable intervals will result in privacy decrease.\n     */\n-    int64_t PoissonNextSendInbound(int64_t now, int average_interval_seconds);\n+    std::chrono::microseconds PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::seconds average_interval);\n \n     void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n \n@@ -1256,7 +1256,7 @@ class CConnman\n      */\n     std::atomic_bool m_start_extra_block_relay_peers{false};\n \n-    std::atomic<int64_t> m_next_send_inv_to_incoming{0};\n+    std::atomic<std::chrono::microseconds> m_next_send_inv_to_incoming{0us};\n \n     /**\n      * A vector of -bind=<address>:<port>=onion arguments each of which is\n@@ -1269,13 +1269,7 @@ class CConnman\n };\n \n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n-\n-/** Wrapper to return mockable type */\n-inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n-{\n-    return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n-}\n+std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval);\n \n /** Dump binary message to file, with timestamp */\n void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming);"
      },
      {
        "sha": "d464b0686981bd5172411c0380f3fd97e45bf28c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e82881a1503bff146970856c1474a6ea659c94/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e82881a1503bff146970856c1474a6ea659c94/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=55e82881a1503bff146970856c1474a6ea659c94",
        "patch": "@@ -119,17 +119,21 @@ static const int MAX_UNCONNECTING_HEADERS = 10;\n /** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n /** Average delay between local address broadcasts */\n-static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n+static constexpr auto AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24h;\n /** Average delay between peer address broadcasts */\n-static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n-/** Average delay between trickled inventory transmissions in seconds.\n- *  Blocks and peers with noban permission bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+static constexpr auto AVG_ADDRESS_BROADCAST_INTERVAL = 30s;\n+/** Average delay between trickled inventory transmissions for inbound peers.\n+ *  Blocks and peers with noban permission bypass this. */\n+static constexpr auto INBOUND_INVENTORY_BROADCAST_INTERVAL = 5s;\n+/** Average delay between trickled inventory transmissions for outbound peers.\n+ *  Use a smaller delay as there is less privacy concern for them.\n+ *  Blocks and peers with noban permission bypass this. */\n+static constexpr auto OUTBOUND_INVENTORY_BROADCAST_INTERVAL = 2s;\n /** Maximum rate of inventory items to send per second.\n  *  Limits the impact of low-fee transaction floods. */\n static constexpr unsigned int INVENTORY_BROADCAST_PER_SECOND = 7;\n /** Maximum number of inventory items to send per transmission. */\n-static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * INVENTORY_BROADCAST_INTERVAL;\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * count_seconds(INBOUND_INVENTORY_BROADCAST_INTERVAL);\n /** The number of most recently announced transactions a peer can request. */\n static constexpr unsigned int INVENTORY_MAX_RECENT_RELAY = 3500;\n /** Verify that INVENTORY_MAX_RECENT_RELAY is enough to cache everything typically\n@@ -138,9 +142,9 @@ static constexpr unsigned int INVENTORY_MAX_RECENT_RELAY = 3500;\n  *  peers, and random variations in the broadcast mechanism. */\n static_assert(INVENTORY_MAX_RECENT_RELAY >= INVENTORY_BROADCAST_PER_SECOND * UNCONDITIONAL_RELAY_DELAY / std::chrono::seconds{1}, \"INVENTORY_RELAY_MAX too low\");\n /** Average delay between feefilter broadcasts in seconds. */\n-static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n+static constexpr auto AVG_FEEFILTER_BROADCAST_INTERVAL = 10min;\n /** Maximum feefilter broadcast delay after significant change. */\n-static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+static constexpr auto MAX_FEEFILTER_CHANGE_DELAY = 5min;\n /** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n /** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n@@ -4669,10 +4673,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n+                        pto->m_tx_relay->nNextInvSend = m_connman.PoissonNextSendInbound(current_time, INBOUND_INVENTORY_BROADCAST_INTERVAL);\n                     } else {\n-                        // Use half the delay for outbound peers, as there is less privacy concern for them.\n-                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n+                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, OUTBOUND_INVENTORY_BROADCAST_INTERVAL);\n                     }\n                 }\n \n@@ -4927,24 +4930,24 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->lastSentFeeFilter == MAX_FILTER) {\n                     // Send the current filter if we sent MAX_FILTER previously\n                     // and made it out of IBD.\n-                    pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) - 1;\n+                    pto->m_tx_relay->m_next_send_feefilter = 0us;\n                 }\n             }\n-            if (count_microseconds(current_time) > pto->m_tx_relay->nextSendTimeFeeFilter) {\n+            if (current_time > pto->m_tx_relay->m_next_send_feefilter) {\n                 CAmount filterToSend = g_filter_rounder.round(currentFilter);\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->m_tx_relay->lastSentFeeFilter) {\n                     m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n                 }\n-                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(count_microseconds(current_time), AVG_FEEFILTER_BROADCAST_INTERVAL);\n+                pto->m_tx_relay->m_next_send_feefilter = PoissonNextSend(current_time, AVG_FEEFILTER_BROADCAST_INTERVAL);\n             }\n             // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n-            else if (count_microseconds(current_time) + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n+            else if (current_time + MAX_FEEFILTER_CHANGE_DELAY < pto->m_tx_relay->m_next_send_feefilter &&\n                      (currentFilter < 3 * pto->m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto->m_tx_relay->lastSentFeeFilter / 3)) {\n-                pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->m_tx_relay->m_next_send_feefilter = current_time + GetRandomDuration<std::chrono::microseconds>(MAX_FEEFILTER_CHANGE_DELAY);\n             }\n         }\n     } // release cs_main"
      },
      {
        "sha": "d927755e43ebdb2d30f426a0938f3cc24714bf7f",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e82881a1503bff146970856c1474a6ea659c94/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e82881a1503bff146970856c1474a6ea659c94/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=55e82881a1503bff146970856c1474a6ea659c94",
        "patch": "@@ -104,7 +104,9 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             },\n             [&] {\n                 // Limit now to int32_t to avoid signed integer overflow\n-                (void)connman.PoissonNextSendInbound(fuzzed_data_provider.ConsumeIntegral<int32_t>(), fuzzed_data_provider.ConsumeIntegral<int>());\n+                (void)connman.PoissonNextSendInbound(\n+                        std::chrono::microseconds{fuzzed_data_provider.ConsumeIntegral<int32_t>()},\n+                        std::chrono::seconds{fuzzed_data_provider.ConsumeIntegral<int>()});\n             },\n             [&] {\n                 CSerializedNetMsg serialized_net_msg;"
      },
      {
        "sha": "a29c6a266564a31d9425301cc258f4e342b91c93",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e82881a1503bff146970856c1474a6ea659c94/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e82881a1503bff146970856c1474a6ea659c94/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=55e82881a1503bff146970856c1474a6ea659c94",
        "patch": "@@ -803,21 +803,6 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK_EQUAL(IsLocal(addr), false);\n }\n \n-BOOST_AUTO_TEST_CASE(PoissonNextSend)\n-{\n-    g_mock_deterministic_tests = true;\n-\n-    int64_t now = 5000;\n-    int average_interval_seconds = 600;\n-\n-    auto poisson = ::PoissonNextSend(now, average_interval_seconds);\n-    std::chrono::microseconds poisson_chrono = ::PoissonNextSend(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n-\n-    BOOST_CHECK_EQUAL(poisson, poisson_chrono.count());\n-\n-    g_mock_deterministic_tests = false;\n-}\n-\n std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n {\n     std::vector<NodeEvictionCandidate> candidates;"
      },
      {
        "sha": "7ebcaaa33965980d7e8e5a29f2fc6ff792c3060d",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e82881a1503bff146970856c1474a6ea659c94/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e82881a1503bff146970856c1474a6ea659c94/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=55e82881a1503bff146970856c1474a6ea659c94",
        "patch": "@@ -26,9 +26,9 @@ void UninterruptibleSleep(const std::chrono::microseconds& n);\n  * This helper is used to convert durations before passing them over an\n  * interface that doesn't support std::chrono (e.g. RPC, debug log, or the GUI)\n  */\n-inline int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n-inline int64_t count_milliseconds(std::chrono::milliseconds t) { return t.count(); }\n-inline int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n+constexpr int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n+constexpr int64_t count_milliseconds(std::chrono::milliseconds t) { return t.count(); }\n+constexpr int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n \n using SecondsDouble = std::chrono::duration<double, std::chrono::seconds::period>;\n "
      }
    ]
  },
  {
    "sha": "0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWFlYTY2ZThiZmRmYjIzZmY4NmMwZjA5MjRjMmQ3NWY1YWNhNzVm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T03:30:07Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-03-03T17:48:07Z"
      },
      "message": "Make tx relay data structure use std::chrono types",
      "tree": {
        "sha": "fd7ccddc308455972fbe4eccb3e153d1cc063897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd7ccddc308455972fbe4eccb3e153d1cc063897"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55e82881a1503bff146970856c1474a6ea659c94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e82881a1503bff146970856c1474a6ea659c94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55e82881a1503bff146970856c1474a6ea659c94"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "738545090333854921d5728d7e2be93fc3d4aa22",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0eaea66e8bfdfb23ff86c0f0924c2d75f5aca75f",
        "patch": "@@ -40,9 +40,9 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** How long to cache transactions in mapRelay for normal relay */\n-static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME = std::chrono::minutes{15};\n+static constexpr auto RELAY_TX_CACHE_TIME = 15min;\n /** How long a transaction has to be in the mempool before it can unconditionally be relayed (even when not in mapRelay). */\n-static constexpr std::chrono::seconds UNCONDITIONAL_RELAY_DELAY = std::chrono::minutes{2};\n+static constexpr auto UNCONDITIONAL_RELAY_DELAY = 2min;\n /** Headers download timeout.\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr auto HEADERS_DOWNLOAD_TIMEOUT_BASE = 15min;\n@@ -467,7 +467,7 @@ class PeerManagerImpl final : public PeerManager\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay GUARDED_BY(cs_main);\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n-    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n+    std::deque<std::pair<std::chrono::microseconds, MapRelay::iterator>> g_relay_expiration GUARDED_BY(cs_main);\n \n     /**\n      * When a peer sends us a valid block, instruct it to announce blocks to us\n@@ -4763,20 +4763,20 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         nRelayedTransactions++;\n                         {\n                             // Expire old relay messages\n-                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < count_microseconds(current_time))\n+                            while (!g_relay_expiration.empty() && g_relay_expiration.front().first < current_time)\n                             {\n-                                mapRelay.erase(vRelayExpiration.front().second);\n-                                vRelayExpiration.pop_front();\n+                                mapRelay.erase(g_relay_expiration.front().second);\n+                                g_relay_expiration.pop_front();\n                             }\n \n                             auto ret = mapRelay.emplace(txid, std::move(txinfo.tx));\n                             if (ret.second) {\n-                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret.first);\n+                                g_relay_expiration.emplace_back(current_time + RELAY_TX_CACHE_TIME, ret.first);\n                             }\n                             // Add wtxid-based lookup into mapRelay as well, so that peers can request by wtxid\n                             auto ret2 = mapRelay.emplace(wtxid, ret.first->second);\n                             if (ret2.second) {\n-                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret2.first);\n+                                g_relay_expiration.emplace_back(current_time + RELAY_TX_CACHE_TIME, ret2.first);\n                             }\n                         }\n                         if (vInv.size() == MAX_INV_SZ) {"
      }
    ]
  }
]