[
  {
    "sha": "9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWM2M2Q2ZDMwNTY2MDBjMWI3ODRkYTBlNmI5OGY2NzlmYTk4YjZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-26T17:42:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-29T12:24:02Z"
      },
      "message": "Keep track of explicit wallet conflicts instead of using mempool",
      "tree": {
        "sha": "8f0dc33e56a2e7214cf3f3ccd84ebcba45c89103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f0dc33e56a2e7214cf3f3ccd84ebcba45c89103"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d5ef3a4cf8e32cdf584811eb5415278f4ba9628"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 124,
      "deletions": 26
    },
    "files": [
      {
        "sha": "96c830d177eef79358e093935ebed61e48223d98",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -215,6 +215,24 @@ of just announcing the hash. In a reorganization, all new headers are sent,\n instead of just the new tip. This can often prevent an extra roundtrip before\n the actual block is downloaded.\n \n+Negative confirmations and conflict detection\n+---------------------------------------------\n+\n+The wallet will now report a negative number for confirmations that indicates\n+how deep in the block chain the conflict is found. For example, if a transaction\n+A has 5 confirmations and spends the same input as a wallet transaction B, B\n+will be reported as having -5 confirmations. If another wallet transaction C\n+spends an output from B, it will also be reported as having -5 confirmations.\n+To detect conflicts with historical transactions in the chain a one-time\n+`-rescan` may be needed.\n+\n+Unlike earlier versions, unconfirmed but non-conflicting transactions will never\n+get a negative confirmation count. They are not treated as spendable unless\n+they're coming from ourself (change) and accepted into our local mempool,\n+however. The new \"trusted\" field in the `listtransactions` RPC output\n+indicates whether outputs of an unconfirmed transaction are considered\n+spendable.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "b1f603a1924452836fd4ff30ba25c438d894a729",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -136,7 +136,7 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n         \n         # Verify expected confirmations\n-        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx1[\"confirmations\"], -2)\n         assert_equal(tx1_clone[\"confirmations\"], 2)\n         assert_equal(tx2[\"confirmations\"], 1)\n "
      },
      {
        "sha": "d4665b3d4217cff5ec138c72a46f4920e0324ba8",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -99,22 +99,23 @@ def run_test(self):\n         # Now give doublespend and its parents to miner:\n         self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n-        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        doublespend_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n         connect_nodes(self.nodes[1], 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n         sync_blocks(self.nodes)\n+        assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)\n \n         # Re-fetch transaction info:\n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n-        \n+\n         # Both transactions should be conflicted\n-        assert_equal(tx1[\"confirmations\"], -1)\n-        assert_equal(tx2[\"confirmations\"], -1)\n+        assert_equal(tx1[\"confirmations\"], -2)\n+        assert_equal(tx2[\"confirmations\"], -2)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n         # two more matured blocks, minus 1240 for the double-spend, plus fees (which are"
      },
      {
        "sha": "a4ab2248a518c22cb0b113dfaa1950c191487e40",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -65,6 +65,8 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+    } else {\n+        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n@@ -1421,7 +1423,9 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n-            \"                                         'receive' category of transactions.\\n\"\n+            \"                                         'receive' category of transactions. Negative confirmations indicate the\\n\"\n+            \"                                         transation conflicts with the block chain\\n\"\n+            \"    \\\"trusted\\\": xxx            (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\""
      },
      {
        "sha": "57a41ec6656cd8468a44a195526520e9343c7173",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 14,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -608,6 +608,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         wtx.BindWallet(this);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n         AddToSpends(hash);\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+            if (mapWallet.count(txin.prevout.hash)) {\n+                CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+                if (prevtx.nIndex == -1 && !prevtx.hashBlock.IsNull()) {\n+                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+                }\n+            }\n+        }\n     }\n     else\n     {\n@@ -727,6 +735,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n {\n     {\n         AssertLockHeld(cs_wallet);\n+\n+        if (pblock) {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+                while (range.first != range.second) {\n+                    if (range.first->second != tx.GetHash()) {\n+                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        MarkConflicted(pblock->GetHash(), range.first->second);\n+                    }\n+                    range.first++;\n+                }\n+            }\n+        }\n+\n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n@@ -747,9 +769,57 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n+{\n+    LOCK2(cs_main, cs_wallet);\n+\n+    CBlockIndex* pindex;\n+    assert(mapBlockIndex.count(hashBlock));\n+    pindex = mapBlockIndex[hashBlock];\n+    int conflictconfirms = 0;\n+    if (chainActive.Contains(pindex)) {\n+        conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n+    }\n+    assert(conflictconfirms < 0);\n+\n+    // Do not flush the wallet here for performance reasons\n+    CWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+    std::deque<uint256> todo;\n+    std::set<uint256> done;\n+\n+    todo.push_back(hashTx);\n+\n+    while (!todo.empty()) {\n+        uint256 now = todo.front();\n+        todo.pop_front();\n+        done.insert(now);\n+        assert(mapWallet.count(now));\n+        CWalletTx& wtx = mapWallet[now];\n+        int currentconfirm = wtx.GetDepthInMainChain();\n+        if (conflictconfirms < currentconfirm) {\n+            // Block is 'more conflicted' than current confirm; update.\n+            // Mark transaction as conflicted with this block.\n+            wtx.nIndex = -1;\n+            wtx.hashBlock = hashBlock;\n+            wtx.MarkDirty();\n+            wtx.WriteToDisk(&walletdb);\n+            // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too\n+            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n+            while (iter != mapTxSpends.end() && iter->first.hash == now) {\n+                 if (!done.count(iter->second)) {\n+                     todo.push_back(iter->second);\n+                 }\n+                 iter++;\n+            }\n+        }\n+    }\n+}\n+\n void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);\n+\n     if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n         return; // Not one of ours\n \n@@ -1089,7 +1159,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth < 0) {\n+        if (!wtx.IsCoinBase() && nDepth == 0) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         }\n     }\n@@ -1303,6 +1373,14 @@ bool CWalletTx::IsTrusted() const\n     if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n+    // Don't trust unconfirmed transactions from us unless they are in the mempool.\n+    {\n+        LOCK(mempool.cs);\n+        if (!mempool.exists(GetHash())) {\n+            return false;\n+        }\n+    }\n+\n     // Trusted if all inputs are from us and are in the mempool:\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n@@ -1879,6 +1957,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     //a chance at a free transaction.\n                     //But mempool inputs might still be in the mempool, so their age stays 0\n                     int age = pcoin.first->GetDepthInMainChain();\n+                    assert(age >= 0);\n                     if (age != 0)\n                         age += 1;\n                     dPriority += (double)nCredit * age;\n@@ -2814,9 +2893,9 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     return chainActive.Height() - pindex->nHeight + 1;\n }\n \n-int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n+int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n {\n-    if (hashBlock.IsNull() || nIndex == -1)\n+    if (hashBlock.IsNull())\n         return 0;\n     AssertLockHeld(cs_main);\n \n@@ -2829,17 +2908,7 @@ int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n         return 0;\n \n     pindexRet = pindex;\n-    return chainActive.Height() - pindex->nHeight + 1;\n-}\n-\n-int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n-{\n-    AssertLockHeld(cs_main);\n-    int nResult = GetDepthInMainChainINTERNAL(pindexRet);\n-    if (nResult == 0 && !mempool.exists(GetHash()))\n-        return -1; // Not in chain, not in mempool\n-\n-    return nResult;\n+    return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1);\n }\n \n int CMerkleTx::GetBlocksToMaturity() const"
      },
      {
        "sha": "bc6e40ab98760e8b66b8dd63670dd644a2da3cb3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ac63d6d3056600c1b784da0e6b98f679fa98b6e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9ac63d6d3056600c1b784da0e6b98f679fa98b6e",
        "patch": "@@ -156,11 +156,14 @@ struct COutputEntry\n /** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction\n {\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n public:\n     uint256 hashBlock;\n+\n+    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n+     * block in the chain we know this or any in-wallet dependency conflicts\n+     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n+     * compatibility.\n+     */\n     int nIndex;\n \n     CMerkleTx()\n@@ -193,16 +196,15 @@ class CMerkleTx : public CTransaction\n \n     int SetMerkleBranch(const CBlock& block);\n \n-\n     /**\n      * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     * <0  : conflicts with a transaction this deep in the blockchain\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n     int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n@@ -481,6 +483,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n     void AddToSpends(const uint256& wtxid);\n \n+    /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n+    void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n+\n+\n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n public:"
      }
    ]
  }
]