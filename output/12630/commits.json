[
  {
    "sha": "8674e74b47c1f6e86a367cfbc738fcc9812b616b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Njc0ZTc0YjQ3YzFmNmU4NmEzNjdjZmJjNzM4ZmNjOTgxMmI2MTZi",
    "commit": {
      "author": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-03-07T11:08:55Z"
      },
      "committer": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-03-15T02:07:30Z"
      },
      "message": "Provide relevant error message if datadir is not writable.",
      "tree": {
        "sha": "acf9d52938e2021e4dcb9ad1c89e02ae8362d82a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf9d52938e2021e4dcb9ad1c89e02ae8362d82a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8674e74b47c1f6e86a367cfbc738fcc9812b616b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8674e74b47c1f6e86a367cfbc738fcc9812b616b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8674e74b47c1f6e86a367cfbc738fcc9812b616b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8674e74b47c1f6e86a367cfbc738fcc9812b616b/comments",
    "author": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b225010a808d475cbb53aeed484295f8dc8751c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b225010a808d475cbb53aeed484295f8dc8751c4"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6493ae72bd222000050eb0f89cfb6e14e7ba82c2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8674e74b47c1f6e86a367cfbc738fcc9812b616b",
        "patch": "@@ -1165,6 +1165,9 @@ static bool LockDataDirectory(bool probeOnly)\n {\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n+    if (!DirIsWritable(datadir)) {\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+    }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n         return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), _(PACKAGE_NAME)));\n     }"
      },
      {
        "sha": "e750969b656f79839354c8ee4fffd7120a794735",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=8674e74b47c1f6e86a367cfbc738fcc9812b616b",
        "patch": "@@ -800,4 +800,20 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n     fs::remove_all(dirname);\n }\n \n+BOOST_AUTO_TEST_CASE(test_DirIsWritable)\n+{\n+    // Should be able to write to the system tmp dir.\n+    fs::path tmpdirname = fs::temp_directory_path();\n+    BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), true);\n+\n+    // Should not be able to write to a non-existent dir.\n+    tmpdirname = fs::temp_directory_path() / fs::unique_path();\n+    BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), false);\n+\n+    fs::create_directory(tmpdirname);\n+    // Should be able to write to it now.\n+    BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), true);\n+    fs::remove(tmpdirname);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "7ea7972564d2c73209867aea60eac04381ab27e5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8674e74b47c1f6e86a367cfbc738fcc9812b616b",
        "patch": "@@ -418,6 +418,19 @@ void ReleaseDirectoryLocks()\n     dir_locks.clear();\n }\n \n+bool DirIsWritable(const fs::path& directory)\n+{\n+    fs::path tmpFile = directory / fs::unique_path();\n+\n+    FILE* file = fsbridge::fopen(tmpFile, \"a\");\n+    if (!file) return false;\n+\n+    fclose(file);\n+    remove(tmpFile);\n+\n+    return true;\n+}\n+\n /** Interpret string as boolean, for argument parsing */\n static bool InterpretBool(const std::string& strValue)\n {"
      },
      {
        "sha": "3e193754982b3b2b5af06d737ea4eb3e6f18119e",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8674e74b47c1f6e86a367cfbc738fcc9812b616b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8674e74b47c1f6e86a367cfbc738fcc9812b616b",
        "patch": "@@ -174,6 +174,7 @@ int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+bool DirIsWritable(const fs::path& directory);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks."
      }
    ]
  }
]