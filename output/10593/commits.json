[
  {
    "sha": "cd961a4baba16fbf4a7175e79051b4ef22b25709",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDk2MWE0YmFiYTE2ZmJmNGE3MTc1ZTc5MDUxYjRlZjIyYjI1NzA5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-03-12T05:58:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-02T07:03:55Z"
      },
      "message": "RPC: Support addnode onetry without making the connection priviliged",
      "tree": {
        "sha": "646ef7a3b20d346807ede3cb4d6c858933aaaa3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/646ef7a3b20d346807ede3cb4d6c858933aaaa3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd961a4baba16fbf4a7175e79051b4ef22b25709",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd961a4baba16fbf4a7175e79051b4ef22b25709",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd961a4baba16fbf4a7175e79051b4ef22b25709",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd961a4baba16fbf4a7175e79051b4ef22b25709/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37f236acc6de08745118ac6cb4268bb5206e67c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f236acc6de08745118ac6cb4268bb5206e67c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37f236acc6de08745118ac6cb4268bb5206e67c6"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "497897d06aec85b6777022e8c3b74a486f5c89eb",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd961a4baba16fbf4a7175e79051b4ef22b25709/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd961a4baba16fbf4a7175e79051b4ef22b25709/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=cd961a4baba16fbf4a7175e79051b4ef22b25709",
        "patch": "@@ -146,6 +146,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"bumpfee\", 1, \"options\" },\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n+    { \"addnode\", 2, \"privileged\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },"
      },
      {
        "sha": "c19fc0b1df65615288028ef3081a7ddbb0bff078",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd961a4baba16fbf4a7175e79051b4ef22b25709/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd961a4baba16fbf4a7175e79051b4ef22b25709/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=cd961a4baba16fbf4a7175e79051b4ef22b25709",
        "patch": "@@ -212,17 +212,16 @@ static UniValue addnode(const JSONRPCRequest& request)\n     std::string strCommand;\n     if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n-    if (request.fHelp || request.params.size() != 2 ||\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n             RPCHelpMan{\"addnode\",\n                 \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n-                \"Or try a connection to a node once.\\n\"\n-                \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n-                \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n+                \"Or try a connection to a node once.\\n\",\n                 {\n                     {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n+                    {\"privileged\", RPCArg::Type::BOOL, /* default */ \"true\", \"If true, nodes added will be protected from DoS disconnection and not required to be full nodes or support segwit as other outbound peers are (though such peers will not be synced from). Only supported for command \\\"onetry\\\" for now.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -235,14 +234,19 @@ static UniValue addnode(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::string strNode = request.params[0].get_str();\n+    const bool privileged = request.params[2].isNull() ? true : request.params[2].get_bool();\n \n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n+        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, privileged);\n         return NullUniValue;\n     }\n \n+    if (!privileged) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unprivileged connections are only supported for the \\\"onetry\\\" command for now\");\n+    }\n+\n     if (strCommand == \"add\")\n     {\n         if(!g_connman->AddNode(strNode))\n@@ -745,7 +749,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"getconnectioncount\",     &getconnectioncount,     {} },\n     { \"network\",            \"ping\",                   &ping,                   {} },\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            {} },\n-    { \"network\",            \"addnode\",                &addnode,                {\"node\",\"command\"} },\n+    { \"network\",            \"addnode\",                &addnode,                {\"node\",\"command\",\"privileged\"} },\n     { \"network\",            \"disconnectnode\",         &disconnectnode,         {\"address\", \"nodeid\"} },\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       {\"node\"} },\n     { \"network\",            \"getnettotals\",           &getnettotals,           {} },"
      }
    ]
  },
  {
    "sha": "2aa06bbda1a74f91718e153f43238f1cf4700b4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWEwNmJiZGExYTc0ZjkxNzE4ZTE1M2Y0MzIzOGYxY2Y0NzAwYjRl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-08T13:11:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-02T07:17:17Z"
      },
      "message": "QA/Mininode: Support node-to-test connections",
      "tree": {
        "sha": "8241d7e8122e6eccfcf4792c835f09fae7cd946c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8241d7e8122e6eccfcf4792c835f09fae7cd946c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa06bbda1a74f91718e153f43238f1cf4700b4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa06bbda1a74f91718e153f43238f1cf4700b4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa06bbda1a74f91718e153f43238f1cf4700b4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa06bbda1a74f91718e153f43238f1cf4700b4e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd961a4baba16fbf4a7175e79051b4ef22b25709",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd961a4baba16fbf4a7175e79051b4ef22b25709",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd961a4baba16fbf4a7175e79051b4ef22b25709"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 25,
      "deletions": 3
    },
    "files": [
      {
        "sha": "48ae8ea0b9c7599ab828440e98729e72018cdeee",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa06bbda1a74f91718e153f43238f1cf4700b4e/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa06bbda1a74f91718e153f43238f1cf4700b4e/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2aa06bbda1a74f91718e153f43238f1cf4700b4e",
        "patch": "@@ -17,6 +17,7 @@\n from collections import defaultdict\n from io import BytesIO\n import logging\n+import socket\n import struct\n import sys\n import threading\n@@ -111,18 +112,38 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n+    def peer_connect(self, dstaddr, dstport, net=\"regtest\", node_outgoing=False):\n         assert not self.is_connected\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         # The initial message to send after the connection was made:\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        self.node_outgoing = node_outgoing\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+\n+        if self.node_outgoing:\n+            logger.debug('Connecting from Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+            listen_sock = socket.socket()\n+            listen_sock.bind(('127.0.0.1', 0))\n+            listen_sock.listen(1)\n+            listen_port = listen_sock.getsockname()[1]\n+            self.rpc.addnode('127.0.0.1:%u' % (listen_port,), 'onetry', False)\n+            (sock, addr) = listen_sock.accept()\n+            assert sock\n+            listen_sock.close()\n+\n+            sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n+            sock.setblocking(False)\n+            conn_gen_unsafe = loop.create_connection(lambda: self, sock=sock)\n+        else:\n+            logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+            conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+\n         conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n         return conn_gen\n "
      },
      {
        "sha": "94fe3e517fcdd1af0fa6b53eaf91ca8911c25170",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa06bbda1a74f91718e153f43238f1cf4700b4e/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa06bbda1a74f91718e153f43238f1cf4700b4e/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2aa06bbda1a74f91718e153f43238f1cf4700b4e",
        "patch": "@@ -471,6 +471,7 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n \n+        p2p_conn.rpc = self\n         p2p_conn.peer_connect(**kwargs)()\n         self.p2ps.append(p2p_conn)\n         if wait_for_verack:"
      }
    ]
  },
  {
    "sha": "b27caacd3baaa7f793793bc04dd35260f1922fef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjdjYWFjZDNiYWFhN2Y3OTM3OTNiYzA0ZGQzNTI2MGYxOTIyZmVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-08T13:11:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-02T07:17:17Z"
      },
      "message": "QA: p2p_unrequested_blocks: Use node-to-test / outgoing connection to check invalid header disconnection",
      "tree": {
        "sha": "d3fa4777f3b567b44dc0dafca26754df3ad8c2f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3fa4777f3b567b44dc0dafca26754df3ad8c2f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b27caacd3baaa7f793793bc04dd35260f1922fef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b27caacd3baaa7f793793bc04dd35260f1922fef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b27caacd3baaa7f793793bc04dd35260f1922fef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b27caacd3baaa7f793793bc04dd35260f1922fef/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aa06bbda1a74f91718e153f43238f1cf4700b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa06bbda1a74f91718e153f43238f1cf4700b4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa06bbda1a74f91718e153f43238f1cf4700b4e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "071bd21efe2bc79d62d7f10e509725952d5aae0b",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b27caacd3baaa7f793793bc04dd35260f1922fef/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b27caacd3baaa7f793793bc04dd35260f1922fef/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=b27caacd3baaa7f793793bc04dd35260f1922fef",
        "patch": "@@ -77,7 +77,7 @@ def setup_network(self):\n     def run_test(self):\n         # Setup the p2p connections\n         # test_node connects to node0 (not whitelisted)\n-        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface(), node_outgoing=True)\n         # min_work_node connects to node1 (whitelisted)\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n@@ -201,7 +201,7 @@ def run_test(self):\n         self.nodes[0].disconnect_p2ps()\n         self.nodes[1].disconnect_p2ps()\n \n-        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface(), node_outgoing=True)\n \n         test_node.send_message(msg_block(block_h1f))\n \n@@ -285,7 +285,7 @@ def run_test(self):\n             test_node.wait_for_disconnect()\n \n             self.nodes[0].disconnect_p2ps()\n-            test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+            test_node = self.nodes[0].add_p2p_connection(P2PInterface(), node_outgoing=True)\n \n         # We should have failed reorg and switched back to 290 (but have block 291)\n         assert_equal(self.nodes[0].getblockcount(), 290)"
      }
    ]
  },
  {
    "sha": "271e2b24ef41dff1d81e71738c7dd1e84333e70b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzFlMmIyNGVmNDFkZmYxZDgxZTcxNzM4YzdkZDFlODQzMzNlNzBi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T16:47:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-02T07:17:17Z"
      },
      "message": "Bugfix: Don't ban peers just because they have header chains we consider invalid",
      "tree": {
        "sha": "284e2e510018917b27f2827f3f714e4418450493",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/284e2e510018917b27f2827f3f714e4418450493"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/271e2b24ef41dff1d81e71738c7dd1e84333e70b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271e2b24ef41dff1d81e71738c7dd1e84333e70b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/271e2b24ef41dff1d81e71738c7dd1e84333e70b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271e2b24ef41dff1d81e71738c7dd1e84333e70b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b27caacd3baaa7f793793bc04dd35260f1922fef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b27caacd3baaa7f793793bc04dd35260f1922fef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b27caacd3baaa7f793793bc04dd35260f1922fef"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 14,
      "deletions": 17
    },
    "files": [
      {
        "sha": "b1c04849319b177dbfeabc8272e555186b503d08",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e2b24ef41dff1d81e71738c7dd1e84333e70b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e2b24ef41dff1d81e71738c7dd1e84333e70b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=271e2b24ef41dff1d81e71738c7dd1e84333e70b",
        "patch": "@@ -18,6 +18,7 @@\n #include <netbase.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n+#include <pow.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <random.h>\n@@ -1508,12 +1509,23 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         LOCK(cs_main);\n         CNodeState *nodestate = State(pfrom->GetId());\n \n+        uint256 hashLastBlock;\n+        for (const CBlockHeader& header : headers) {\n+            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+                Misbehaving(pfrom->GetId(), 20, \"non-continuous headers sequence\");\n+                return false;\n+            }\n+            hashLastBlock = header.GetHash();\n+            if (!CheckProofOfWork(header.GetHash(), header.nBits, chainparams.GetConsensus())) {\n+                Misbehaving(pfrom->GetId(), 50, \"proof of work failed\");\n+                return false;\n+            }\n+        }\n+\n         // If this looks like it could be a block announcement (nCount <\n         // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n         // don't connect:\n         // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n         // - Once a headers message is received that is valid and does connect,\n         //   nUnconnectingHeaders gets reset back to 0.\n         if (!LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n@@ -1529,21 +1541,9 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             // we can use this peer to download.\n             UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n \n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom->GetId(), 20);\n-            }\n             return true;\n         }\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20, \"non-continuous headers sequence\");\n-                return false;\n-            }\n-            hashLastBlock = header.GetHash();\n-        }\n-\n         // If we don't have the last header, then they'll have given us\n         // something new (if these headers are valid).\n         if (!LookupBlockIndex(hashLastBlock)) {"
      },
      {
        "sha": "4b58a1b272a2c619e826c4a370a4e3640587a2a8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271e2b24ef41dff1d81e71738c7dd1e84333e70b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271e2b24ef41dff1d81e71738c7dd1e84333e70b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=271e2b24ef41dff1d81e71738c7dd1e84333e70b",
        "patch": "@@ -129,9 +129,6 @@ static const bool DEFAULT_FEEFILTER = true;\n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n \n-/** Maximum number of unconnecting headers announcements before DoS score */\n-static const int MAX_UNCONNECTING_HEADERS = 10;\n-\n static const bool DEFAULT_PEERBLOOMFILTERS = true;\n \n /** Default for -stopatheight */"
      }
    ]
  },
  {
    "sha": "0715007a80b4d04356cb0ab81200043d62ca7593",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzE1MDA3YTgwYjRkMDQzNTZjYjBhYjgxMjAwMDQzZDYyY2E3NTkz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-13T08:27:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-02T07:17:17Z"
      },
      "message": "Instead of DoS banning for invalid blocks, merely disconnect nodes if we're relying on them as a primary node",
      "tree": {
        "sha": "bd85bd0f16ba21b2bfba9ed68d81478d6b47ce03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd85bd0f16ba21b2bfba9ed68d81478d6b47ce03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0715007a80b4d04356cb0ab81200043d62ca7593",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0715007a80b4d04356cb0ab81200043d62ca7593",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0715007a80b4d04356cb0ab81200043d62ca7593",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0715007a80b4d04356cb0ab81200043d62ca7593/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "271e2b24ef41dff1d81e71738c7dd1e84333e70b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271e2b24ef41dff1d81e71738c7dd1e84333e70b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/271e2b24ef41dff1d81e71738c7dd1e84333e70b"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 45,
      "deletions": 8
    },
    "files": [
      {
        "sha": "2d728404560126a613df4d4c3a1b3297207b6ce7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0715007a80b4d04356cb0ab81200043d62ca7593/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0715007a80b4d04356cb0ab81200043d62ca7593/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0715007a80b4d04356cb0ab81200043d62ca7593",
        "patch": "@@ -864,6 +864,11 @@ class CNode\n         return nLocalServices;\n     }\n \n+    bool PunishInvalidBlocks() const\n+    {\n+        return !(fInbound || fFeeler || fWhitelisted || m_manual_connection);\n+    }\n+\n     std::string GetAddrName() const;\n     //! Sets the addrName only if it was not previously set\n     void MaybeSetAddrName(const std::string& addrNameIn);"
      },
      {
        "sha": "6ea9a66eb2d5a20b1ea1fb2070c2c93fd1ac5082",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 8,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0715007a80b4d04356cb0ab81200043d62ca7593/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0715007a80b4d04356cb0ab81200043d62ca7593/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0715007a80b4d04356cb0ab81200043d62ca7593",
        "patch": "@@ -1126,6 +1126,30 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     nTimeBestReceived = GetTime();\n }\n \n+namespace {\n+\n+void HandleBlockDoS(std::string node_name, CNode * const pfrom, const int nDoS, const bool is_header) {\n+    // We never actually DoS ban for invalid blocks, merely disconnect nodes if we're relying on them as a primary node\n+    NodeId node_id = pfrom->GetId();\n+    if (node_name.empty()) {\n+        node_name = \"(unknown)\";\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(node_id);\n+        if (nodestate) {\n+            node_name = nodestate->name;\n+        }\n+    }\n+    const std::string msg = strprintf(\"%s peer=%d got DoS score %d on invalid block%s\", node_name, node_id, nDoS, is_header ? \" header\" : \"\");\n+    if (pfrom->PunishInvalidBlocks()) {\n+        LogPrint(BCLog::NET, \"%s; simply disconnecting\\n\", msg);\n+        pfrom->fDisconnect = true;\n+    } else {\n+        LogPrint(BCLog::NET, \"%s; tolerating\\n\", msg);\n+    }\n+}\n+\n+}\n+\n /**\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n@@ -1140,10 +1164,16 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n     if (state.IsInvalid(nDoS)) {\n         // Don't send reject message with code 0 or an internal reject code.\n         if (it != mapBlockSource.end() && State(it->second.first) && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) {\n+            const NodeId node_id = it->second.first;\n+            CNodeState * const nodestate = State(node_id);\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n             State(it->second.first)->rejects.push_back(reject);\n-            if (nDoS > 0 && it->second.second)\n-                Misbehaving(it->second.first, nDoS);\n+            if (nDoS > 0 && it->second.second) {\n+                connman->ForNode(node_id, [nodestate, nDoS](CNode* pfrom){\n+                    HandleBlockDoS(nodestate->name, pfrom, nDoS, false);\n+                    return true;\n+                });\n+            }\n         }\n     }\n     // Check that:\n@@ -1541,6 +1571,9 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             // we can use this peer to download.\n             UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n \n+            if (pfrom->PunishInvalidBlocks()) {\n+                pfrom->fDisconnect = true;\n+            }\n             return true;\n         }\n \n@@ -1556,12 +1589,11 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n-            LOCK(cs_main);\n+            LogPrint(BCLog::NET, \"peer=%d: invalid header received\\n\", pfrom->GetId());\n             if (nDoS > 0) {\n-                Misbehaving(pfrom->GetId(), nDoS, \"invalid header received\");\n-            } else {\n-                LogPrint(BCLog::NET, \"peer=%d: invalid header received\\n\", pfrom->GetId());\n+                HandleBlockDoS(\"\", pfrom, nDoS, true);\n             }\n+            LOCK(cs_main);\n             if (punish_duplicate_invalid && LookupBlockIndex(first_invalid_header.GetHash())) {\n                 // Goal: don't allow outbound peers to use up our outbound\n                 // connection slots if they are on incompatible chains.\n@@ -2568,8 +2600,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0) {\n-                    LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS, strprintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId()));\n+                    LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n+                    HandleBlockDoS(\"\", pfrom, nDoS, true);\n                 } else {\n                     LogPrint(BCLog::NET, \"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 }"
      }
    ]
  },
  {
    "sha": "e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDY5OWMwY2I2ZmJhZjBlNDUwY2E2MGMyODczY2Q1OGEwOWJkZGEw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-15T21:22:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-02T07:17:17Z"
      },
      "message": "test/functional/p2p_sendheaders: Don't test for undesirable behaviour",
      "tree": {
        "sha": "b584c0b16613a1698065231dac441a95aae8f0f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b584c0b16613a1698065231dac441a95aae8f0f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0715007a80b4d04356cb0ab81200043d62ca7593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0715007a80b4d04356cb0ab81200043d62ca7593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0715007a80b4d04356cb0ab81200043d62ca7593"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 0,
      "deletions": 15
    },
    "files": [
      {
        "sha": "31f27b2f1d98e2bdbcef52e7cca1eb63f8abcbf0",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
        "patch": "@@ -582,21 +582,6 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # Remove the first two entries (blocks[1] would connect):\n         blocks = blocks[2:]\n \n-        # Now try to see how many unconnecting headers we can send\n-        # before we get disconnected.  Should be 5*MAX_UNCONNECTING_HEADERS\n-        for i in range(5 * MAX_UNCONNECTING_HEADERS - 1):\n-            # Send a header that doesn't connect, check that we get a getheaders.\n-            with mininode_lock:\n-                test_node.last_message.pop(\"getheaders\", None)\n-            test_node.send_header_for_blocks([blocks[i % len(blocks)]])\n-            test_node.wait_for_getheaders()\n-\n-        # Eventually this stops working.\n-        test_node.send_header_for_blocks([blocks[-1]])\n-\n-        # Should get disconnected\n-        test_node.wait_for_disconnect()\n-\n         self.log.info(\"Part 5: success!\")\n \n         # Finally, check that the inv node never received a getdata request,"
      }
    ]
  },
  {
    "sha": "2fff121ac1f3fd368da6057b63d5701a7e793299",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmZmMTIxYWMxZjNmZDM2OGRhNjA1N2I2M2Q1NzAxYTdlNzkzMjk5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-23T19:48:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-25T21:03:34Z"
      },
      "message": "QA/feature_block: Adapt disconnection tests for relaxed behaviour",
      "tree": {
        "sha": "da17991a29970fde21dd74ee90ad11284836c8fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da17991a29970fde21dd74ee90ad11284836c8fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fff121ac1f3fd368da6057b63d5701a7e793299",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fff121ac1f3fd368da6057b63d5701a7e793299",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fff121ac1f3fd368da6057b63d5701a7e793299",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fff121ac1f3fd368da6057b63d5701a7e793299/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0699c0cb6fbaf0e450ca60c2873cd58a09bdda0"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9b3509200b1895c4253f66b5610f06575662cd1a",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fff121ac1f3fd368da6057b63d5701a7e793299/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fff121ac1f3fd368da6057b63d5701a7e793299/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=2fff121ac1f3fd368da6057b63d5701a7e793299",
        "patch": "@@ -630,7 +630,7 @@ def run_test(self):\n         while b47.sha256 < target:\n             b47.nNonce += 1\n             b47.rehash()\n-        self.sync_blocks([b47], False, force_send=True, reject_reason='high-hash')\n+        self.sync_blocks([b47], False, force_send=True, reject_reason='high-hash', reconnect=True)\n \n         self.log.info(\"Reject a block with a timestamp >2 hours in the future\")\n         self.move_tip(44)\n@@ -827,7 +827,7 @@ def run_test(self):\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], success=False, reject_reason='bad-txns-nonfinal')\n+        self.sync_blocks([b62], success=False, reject_reason='bad-txns-nonfinal', reconnect=True)\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -841,7 +841,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], success=False, reject_reason='bad-txns-nonfinal')\n+        self.sync_blocks([b63], success=False, reject_reason='bad-txns-nonfinal', reconnect=True)\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -1355,7 +1355,7 @@ def bootstrap_p2p(self, timeout=10):\n         \"\"\"Add a P2P connection to the node.\n \n         Helper to connect and wait for version handshake.\"\"\"\n-        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        self.nodes[0].add_p2p_connection(P2PDataStore(), node_outgoing=True)\n         # We need to wait for the initial getheaders from the peer before we\n         # start populating our blockstore. If we don't, then we may run ahead\n         # to the next subtest before we receive the getheaders. We'd then send"
      }
    ]
  }
]