[
  {
    "sha": "96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmNiNTk3MzI1ZjY0Y2FkYjNjZjQzZTJjZGIzZDdjMWUyZTQ5ODkx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-01T17:38:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-09T20:05:35Z"
      },
      "message": "gui: Avoid redundant tx status updates\n\nIn TransactionTablePriv::index, avoid calling\ninterfaces::Wallet::tryGetTxStatus if the status is up to date as of the most\nrecent NotifyBlockTip notification.  Store height from the most recent\nnotification in a new ClientModel::cachedNumBlocks variable in order to check\nthis.\n\nThis avoids floods of IPC traffic from tryGetTxStatus with #10102 when there\nare a lot of transactions. It might also make the GUI a little more efficient\neven when there is no IPC.",
      "tree": {
        "sha": "8541d0f8d1c98dfaf761382f1c1379533a108040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8541d0f8d1c98dfaf761382f1c1379533a108040"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7f84503571c171a7e6728cd2d77dd4103bd7a6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f84503571c171a7e6728cd2d77dd4103bd7a6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f84503571c171a7e6728cd2d77dd4103bd7a6f"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 46,
      "deletions": 16
    },
    "files": [
      {
        "sha": "54cadee36982749df1340e73449fc0f20765f694",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -336,7 +336,7 @@ void BitcoinApplication::initializeResult(bool success)\n         window->setClientModel(clientModel);\n #ifdef ENABLE_WALLET\n         if (WalletModel::isWalletEnabled()) {\n-            m_wallet_controller = new WalletController(m_node, platformStyle, optionsModel, this);\n+            m_wallet_controller = new WalletController(*clientModel, platformStyle, this);\n             window->setWalletController(m_wallet_controller);\n             if (paymentServer) {\n                 paymentServer->setOptionsModel(optionsModel);"
      },
      {
        "sha": "f0046c9d7ce1ba9f696af5f21d4d8c532e2452d2",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -105,6 +105,14 @@ int64_t ClientModel::getHeaderTipTime() const\n     return cachedBestHeaderTime;\n }\n \n+int ClientModel::getNumBlocks() const\n+{\n+    if (m_cached_num_blocks == -1) {\n+        m_cached_num_blocks = m_node.getNumBlocks();\n+    }\n+    return m_cached_num_blocks;\n+}\n+\n void ClientModel::updateNumConnections(int numConnections)\n {\n     Q_EMIT numConnectionsChanged(numConnections);\n@@ -241,6 +249,8 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int heig\n         // cache best headers time and height to reduce future cs_main locks\n         clientmodel->cachedBestHeaderHeight = height;\n         clientmodel->cachedBestHeaderTime = blockTime;\n+    } else {\n+        clientmodel->m_cached_num_blocks = height;\n     }\n     // if we are in-sync or if we notify a header update, update the UI regardless of last update time\n     if (fHeader || !initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {"
      },
      {
        "sha": "7ac4120a8fde8f0a63373b820c6e0dd1230a475e",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -56,6 +56,7 @@ class ClientModel : public QObject\n \n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n+    int getNumBlocks() const;\n     int getHeaderTipHeight() const;\n     int64_t getHeaderTipTime() const;\n \n@@ -73,9 +74,10 @@ class ClientModel : public QObject\n \n     bool getProxyInfo(std::string& ip_port) const;\n \n-    // caches for the best header\n+    // caches for the best header, number of blocks\n     mutable std::atomic<int> cachedBestHeaderHeight;\n     mutable std::atomic<int64_t> cachedBestHeaderTime;\n+    mutable std::atomic<int> m_cached_num_blocks{-1};\n \n private:\n     interfaces::Node& m_node;"
      },
      {
        "sha": "928c084f342d6c89fddac8ee77ca095e711792c6",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <interfaces/chain.h>\n #include <interfaces/node.h>\n+#include <qt/clientmodel.h>\n #include <qt/editaddressdialog.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n@@ -101,8 +102,9 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     // Initialize relevant QT models.\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     OptionsModel optionsModel(node);\n+    ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n-    WalletModel walletModel(interfaces::MakeWallet(wallet), node, platformStyle.get(), &optionsModel);\n+    WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n     RemoveWallet(wallet);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());"
      },
      {
        "sha": "ed4ff4562fe8d2e1c2a83744a453ad114f9583ee",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -4,6 +4,7 @@\n #include <interfaces/chain.h>\n #include <interfaces/node.h>\n #include <qt/bitcoinamountfield.h>\n+#include <qt/clientmodel.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/qvalidatedlineedit.h>\n@@ -165,8 +166,9 @@ void TestGUI(interfaces::Node& node)\n     SendCoinsDialog sendCoinsDialog(platformStyle.get());\n     TransactionView transactionView(platformStyle.get());\n     OptionsModel optionsModel(node);\n+    ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n-    WalletModel walletModel(interfaces::MakeWallet(wallet), node, platformStyle.get(), &optionsModel);\n+    WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n     RemoveWallet(wallet);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);"
      },
      {
        "sha": "18554aef1fe1d425c74cf02b3a658cd394baff81",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -5,6 +5,7 @@\n #include <qt/transactiontablemodel.h>\n \n #include <qt/addresstablemodel.h>\n+#include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n@@ -175,7 +176,7 @@ class TransactionTablePriv\n         return cachedWallet.size();\n     }\n \n-    TransactionRecord *index(interfaces::Wallet& wallet, int idx)\n+    TransactionRecord *index(interfaces::Wallet& wallet, const int cur_num_blocks, const int idx)\n     {\n         if(idx >= 0 && idx < cachedWallet.size())\n         {\n@@ -191,7 +192,7 @@ class TransactionTablePriv\n             interfaces::WalletTxStatus wtx;\n             int numBlocks;\n             int64_t block_time;\n-            if (wallet.tryGetTxStatus(rec->hash, wtx, numBlocks, block_time) && rec->statusUpdateNeeded(numBlocks)) {\n+            if (rec->statusUpdateNeeded(cur_num_blocks) && wallet.tryGetTxStatus(rec->hash, wtx, numBlocks, block_time)) {\n                 rec->updateStatus(wtx, numBlocks, block_time);\n             }\n             return rec;\n@@ -663,10 +664,10 @@ QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientat\n QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);\n-    TransactionRecord *data = priv->index(walletModel->wallet(), row);\n+    TransactionRecord *data = priv->index(walletModel->wallet(), walletModel->clientModel().getNumBlocks(), row);\n     if(data)\n     {\n-        return createIndex(row, column, priv->index(walletModel->wallet(), row));\n+        return createIndex(row, column, data);\n     }\n     return QModelIndex();\n }"
      },
      {
        "sha": "f1dd149a0f111a74d35158dd942ca5b687b0f309",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -5,6 +5,7 @@\n #include <qt/walletcontroller.h>\n \n #include <qt/askpassphrasedialog.h>\n+#include <qt/clientmodel.h>\n #include <qt/createwalletdialog.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n@@ -24,13 +25,14 @@\n #include <QTimer>\n #include <QWindow>\n \n-WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)\n+WalletController::WalletController(ClientModel& client_model, const PlatformStyle* platform_style, QObject* parent)\n     : QObject(parent)\n     , m_activity_thread(new QThread(this))\n     , m_activity_worker(new QObject)\n-    , m_node(node)\n+    , m_client_model(client_model)\n+    , m_node(client_model.node())\n     , m_platform_style(platform_style)\n-    , m_options_model(options_model)\n+    , m_options_model(client_model.getOptionsModel())\n {\n     m_handler_load_wallet = m_node.handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\n         getOrCreateWallet(std::move(wallet));\n@@ -104,7 +106,7 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n     }\n \n     // Instantiate model and register it.\n-    WalletModel* wallet_model = new WalletModel(std::move(wallet), m_node, m_platform_style, m_options_model, nullptr);\n+    WalletModel* wallet_model = new WalletModel(std::move(wallet), m_client_model, m_platform_style, nullptr);\n     // Handler callback runs in a different thread so fix wallet model thread affinity.\n     wallet_model->moveToThread(thread());\n     wallet_model->setParent(this);"
      },
      {
        "sha": "f3d994949fac14b597b33f480add92db6f6839e4",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -21,6 +21,7 @@\n #include <QTimer>\n #include <QString>\n \n+class ClientModel;\n class OptionsModel;\n class PlatformStyle;\n class WalletModel;\n@@ -47,7 +48,7 @@ class WalletController : public QObject\n     void removeAndDeleteWallet(WalletModel* wallet_model);\n \n public:\n-    WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent);\n+    WalletController(ClientModel& client_model, const PlatformStyle* platform_style, QObject* parent);\n     ~WalletController();\n \n     //! Returns wallet models currently open.\n@@ -70,6 +71,7 @@ class WalletController : public QObject\n private:\n     QThread* const m_activity_thread;\n     QObject* const m_activity_worker;\n+    ClientModel& m_client_model;\n     interfaces::Node& m_node;\n     const PlatformStyle* const m_platform_style;\n     OptionsModel* const m_options_model;"
      },
      {
        "sha": "17c79d43ef5b7b3bb2eb3ec76e38e10a8af75640",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -9,6 +9,7 @@\n #include <qt/walletmodel.h>\n \n #include <qt/addresstablemodel.h>\n+#include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/optionsmodel.h>\n #include <qt/paymentserver.h>\n@@ -32,8 +33,13 @@\n #include <QTimer>\n \n \n-WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, interfaces::Node& node, const PlatformStyle *platformStyle, OptionsModel *_optionsModel, QObject *parent) :\n-    QObject(parent), m_wallet(std::move(wallet)), m_node(node), optionsModel(_optionsModel), addressTableModel(nullptr),\n+WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, ClientModel& client_model, const PlatformStyle *platformStyle, QObject *parent) :\n+    QObject(parent),\n+    m_wallet(std::move(wallet)),\n+    m_client_model(client_model),\n+    m_node(client_model.node()),\n+    optionsModel(client_model.getOptionsModel()),\n+    addressTableModel(nullptr),\n     transactionTableModel(nullptr),\n     recentRequestsTableModel(nullptr),\n     cachedEncryptionStatus(Unencrypted),"
      },
      {
        "sha": "d9f51c14ac422110d572d9fd990be0357e9dfb57",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96cb597325f64cadb3cf43e2cdb3d7c1e2e49891/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=96cb597325f64cadb3cf43e2cdb3d7c1e2e49891",
        "patch": "@@ -24,6 +24,7 @@\n enum class OutputType;\n \n class AddressTableModel;\n+class ClientModel;\n class OptionsModel;\n class PlatformStyle;\n class RecentRequestsTableModel;\n@@ -52,7 +53,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit WalletModel(std::unique_ptr<interfaces::Wallet> wallet, interfaces::Node& node, const PlatformStyle *platformStyle, OptionsModel *optionsModel, QObject *parent = nullptr);\n+    explicit WalletModel(std::unique_ptr<interfaces::Wallet> wallet, ClientModel& client_model, const PlatformStyle *platformStyle, QObject *parent = nullptr);\n     ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins\n@@ -145,6 +146,7 @@ class WalletModel : public QObject\n \n     interfaces::Node& node() const { return m_node; }\n     interfaces::Wallet& wallet() const { return *m_wallet; }\n+    ClientModel& clientModel() const { return m_client_model; }\n \n     QString getWalletName() const;\n     QString getDisplayName() const;\n@@ -161,6 +163,7 @@ class WalletModel : public QObject\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;\n     std::unique_ptr<interfaces::Handler> m_handler_watch_only_changed;\n     std::unique_ptr<interfaces::Handler> m_handler_can_get_addrs_changed;\n+    ClientModel& m_client_model;\n     interfaces::Node& m_node;\n \n     bool fHaveWatchOnly;"
      }
    ]
  }
]