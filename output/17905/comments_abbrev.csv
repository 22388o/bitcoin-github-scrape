DrahtBot,2020-01-10 22:46:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17877 (qt, refactor: Make enums in BitcoinUnits class scoped by hebasto)\n\nIf you consider this pull request important, ",https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-573235526,573235526,
laanwj,2020-01-22 18:35:24,"Concept ACK\n\nOne remark: Is block height enough as an identifier of the current state? Might this miss a 1-block reorg that ends up in the same height? If so, wouldn't ""tip blockhash"" be better for this?",https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-577324304,577324304,
ryanofsky,2020-01-22 19:21:19,"> One remark: Is block height enough as an identifier of the current state? Might this miss a 1-block reorg that ends up in the same height? If so, wouldn't ""tip blockhash"" be better for this?\n\nThis is true, and if you'd like I could add a followup commit or open a new PR to address this. But the current PR isn't changing anything there because `updateStatus` is already never called when `stat",https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-577343585,577343585,
promag,2020-02-04 17:02:52,"> `ClientModel` gives access to `interfaces::Node&` and `OptionsModel*` so maybe take advantage of this and simplify the constructors.\n\n@ryanofsky unless this makes breaking circular dependencies harder. ",https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-582011659,582011659,
promag,2020-03-02 17:30:07,Code review ACK 96cb597325f64cadb3cf43e2cdb3d7c1e2e49891.,https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-593519998,593519998,
hebasto,2020-03-23 18:54:54,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-602791928,602791928,
ryanofsky,2020-04-10 18:17:19,"This PR might be mergeable: has 2 acks, is a pretty limited gui change",https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-612153910,612153910,
ryanofsky,2020-05-18 15:53:05,"re: @laanwj https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-577324304\n\n> One remark: Is block height enough as an identifier of the current state? Might this miss a 1-block reorg that ends up in the same height? If so, wouldn't ""tip blockhash"" be better for this?\n\nThis issue is finally fixed in #17993 by @furszy, which cleanly replaces `cur_num_blocks` comparisons here and other",https://github.com/bitcoin/bitcoin/pull/17905#issuecomment-630273784,630273784,
promag,2020-01-12 18:07:32,Well this change alone already improves!,https://github.com/bitcoin/bitcoin/pull/17905#discussion_r365600567,365600567,src/qt/transactiontablemodel.cpp
promag,2020-01-12 18:12:46,"nit, use `numBlocks` and drop L193? Or make this `const`.",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r365600789,365600789,src/qt/transactiontablemodel.cpp
emilengler,2020-01-13 14:59:11,"nit: Move this one line up, alphabetical order",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r365849472,365849472,src/qt/test/addressbooktests.cpp
ryanofsky,2020-01-13 21:41:02,"re: https://github.com/bitcoin/bitcoin/pull/17905#discussion_r365849472\n\n> nit: Move this one line up, alphabetical order\n\nDone",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r366043222,366043222,src/qt/test/addressbooktests.cpp
ryanofsky,2020-01-13 21:46:01,"re: https://github.com/bitcoin/bitcoin/pull/17905#discussion_r365600789\n\n> nit, use `numBlocks` and drop L193? Or make this `const`.\n\nDeclared const",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r366045379,366045379,src/qt/transactiontablemodel.cpp
promag,2020-01-26 19:03:42,"nit, `ClientModel* const m_client_model;`",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r371022060,371022060,src/qt/transactiontablemodel.h
ryanofsky,2020-02-07 21:27:36,"> nit, `ClientModel* const m_client_model;`\n\nUpdated and switched to reference",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r376615520,376615520,src/qt/transactiontablemodel.h
promag,2020-02-26 21:34:55,"nit\n```suggestion\n    mutable std::atomic<int> m_cached_num_blocks{-1};\n```",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384780231,384780231,src/qt/clientmodel.h
promag,2020-02-26 21:44:55,Maybe just initialize `m_cached_num_blocks` after `subscribeToCoreSignals()` and drop the `-1` case?,https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384785271,384785271,src/qt/clientmodel.cpp
ryanofsky,2020-02-26 22:03:09,"re: https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384785271\n\n> Maybe just initialize `m_cached_num_blocks` after `subscribeToCoreSignals()` and drop the `-1` case?\n\nIt seems a little more fragile to rely on another code path being executed if this is going to be initialized to -1. Also it's more consistent with existing getHeaderTipHeight and getHeaderTipTime to be checking thi",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384794669,384794669,src/qt/clientmodel.cpp
ryanofsky,2020-02-26 22:03:19,"re: https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384780231\n\n> nit\n\nAdded",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384794733,384794733,src/qt/clientmodel.h
promag,2020-02-26 22:18:45,"I mean this:\n```diff\n     m_thread->start();\n\n     subscribeToCoreSignals();\n+    m_cached_num_blocks = m_node.getNumBlocks();\n }\n\n ClientModel::~ClientModel()\n```\nIt's the constructor so it's always executed?",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384801997,384801997,src/qt/clientmodel.cpp
ryanofsky,2020-02-27 15:54:37,"re: https://github.com/bitcoin/bitcoin/pull/17905#discussion_r384801997\n\nThanks again for the review!\n\n> I mean this:\n\nYes, I did understand the suggestion. I like having getNumBlocks implemented the same way as getHeaderTipHeight and getHeaderTipTime, and I like `m_cached_num_blocks` being touched as few places as possible (initialized to -1 and updated only as needed) and not needing",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r385198948,385198948,src/qt/clientmodel.cpp
promag,2020-02-27 16:03:05,"Sorry for not explaining my POV. I'm suggesting to just make `ClientModel::getNumBlocks` lock free - not sure what would be the first call stack hitting the lock and if it would hurt the event loop, but with my suggestion that wouldn't be a concern. But like you say, it's not very significant so feel free to ignore it, FWIW I did ACK.",https://github.com/bitcoin/bitcoin/pull/17905#discussion_r385204850,385204850,src/qt/clientmodel.cpp
