[
  {
    "sha": "a534ee15f0544ba51be3ac0438a9e49c4d72d442",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTM0ZWUxNWYwNTQ0YmE1MWJlM2FjMDQzOGE5ZTQ5YzRkNzJkNDQy",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-12T22:20:51Z"
      },
      "committer": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-13T20:38:49Z"
      },
      "message": "rpc: implement 'encodescript' RPC method",
      "tree": {
        "sha": "148cb831348a7d62d25fb76045baa401c561b7ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/148cb831348a7d62d25fb76045baa401c561b7ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a534ee15f0544ba51be3ac0438a9e49c4d72d442",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a534ee15f0544ba51be3ac0438a9e49c4d72d442",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a534ee15f0544ba51be3ac0438a9e49c4d72d442",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a534ee15f0544ba51be3ac0438a9e49c4d72d442/comments",
    "author": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f504a1402afd0760e9d348ecc8bad0094aa7d705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f504a1402afd0760e9d348ecc8bad0094aa7d705",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f504a1402afd0760e9d348ecc8bad0094aa7d705"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "51937f9a9efa31ec70da97f98ca768c9754cc3aa",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a534ee15f0544ba51be3ac0438a9e49c4d72d442/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a534ee15f0544ba51be3ac0438a9e49c4d72d442/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=a534ee15f0544ba51be3ac0438a9e49c4d72d442",
        "patch": "@@ -80,6 +80,12 @@ CScript ParseScript(const std::string& s)\n             // opcode, e.g. OP_ADD or ADD:\n             result << mapOpNames[*w];\n         }\n+        else if (w->size() > 2 && IsHex(std::string(w->begin(), w->end())))\n+        {\n+            // Hex data that IS pushed onto stack:\n+            std::vector<unsigned char> hex = ParseHex(std::string(w->begin(), w->end()));\n+            result << hex;\n+        }\n         else\n         {\n             throw std::runtime_error(\"script parse error\");"
      },
      {
        "sha": "2ab8e4d02843d4b613a479d3e3493296800ee166",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a534ee15f0544ba51be3ac0438a9e49c4d72d442/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a534ee15f0544ba51be3ac0438a9e49c4d72d442/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a534ee15f0544ba51be3ac0438a9e49c4d72d442",
        "patch": "@@ -574,6 +574,40 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue encodescript(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"encodescript \\\"asm\\\"\\n\"\n+            \"\\nEncode a script given in an opcode sequence form to hex-string.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"asm\\\"     (string) the opcode sequence\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"asm\\\":\\\"asm\\\",   (string) original opcode sequence\\n\"\n+            \"  \\\"hex\\\":\\\"hex\\\",   (string) hex encoded script\\n\"\n+            \"  \\\"type\\\":\\\"type\\\", (string) script type\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"encodescript\", \"\\\"asm\\\"\")\n+            + HelpExampleRpc(\"encodescript\", \"\\\"asm\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    UniValue r(UniValue::VOBJ);\n+\n+    CScript script;\n+    if (request.params[0].get_str().size() > 0) {\n+        script = ParseScript(request.params[0].get_str());\n+    } else {\n+        // Empty scripts are valid\n+    }\n+    ScriptPubKeyToUniv(script, r, true);\n+\n+    return r;\n+}\n+\n static UniValue decodescript(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n@@ -1700,6 +1734,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n     { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"encodescript\",                 &encodescript,              {\"asm\"} },\n     { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },"
      }
    ]
  },
  {
    "sha": "67404434fa43b82aba825b30467f32161ab0d1c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzQwNDQzNGZhNDNiODJhYmE4MjViMzA0NjdmMzIxNjFhYjBkMWMy",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-13T21:52:14Z"
      },
      "committer": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-13T21:52:14Z"
      },
      "message": "util: handle spaces/tabs/newlines inside quoted strings in ParseScript",
      "tree": {
        "sha": "7626fa26f529157794ad33c24c6156672defee77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7626fa26f529157794ad33c24c6156672defee77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67404434fa43b82aba825b30467f32161ab0d1c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67404434fa43b82aba825b30467f32161ab0d1c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67404434fa43b82aba825b30467f32161ab0d1c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67404434fa43b82aba825b30467f32161ab0d1c2/comments",
    "author": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a534ee15f0544ba51be3ac0438a9e49c4d72d442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a534ee15f0544ba51be3ac0438a9e49c4d72d442",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a534ee15f0544ba51be3ac0438a9e49c4d72d442"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5a81efc7a6e22e2d51c053a9e84473f26d3e5ee9",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67404434fa43b82aba825b30467f32161ab0d1c2/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67404434fa43b82aba825b30467f32161ab0d1c2/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=67404434fa43b82aba825b30467f32161ab0d1c2",
        "patch": "@@ -46,8 +46,24 @@ CScript ParseScript(const std::string& s)\n         }\n     }\n \n+    std::vector<std::string> blocks;\n     std::vector<std::string> words;\n-    boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n+\n+    bool quoted = false;\n+    boost::algorithm::split(blocks, s, boost::algorithm::is_any_of(\"'\"));\n+    for (std::vector<std::string>::const_iterator b = blocks.begin(); b != blocks.end(); ++b, quoted = !quoted)\n+    {\n+        if (quoted)\n+        {\n+            words.push_back(\"'\" + *b + \"'\");\n+        }\n+        else\n+        {\n+            std::vector<std::string> block_words;\n+            boost::algorithm::split(block_words, *b, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n+            words.insert(words.end(), block_words.begin(), block_words.end());\n+        }\n+    }\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n     {\n@@ -70,8 +86,7 @@ CScript ParseScript(const std::string& s)\n         }\n         else if (w->size() >= 2 && w->front() == '\\'' && w->back() == '\\'')\n         {\n-            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n-            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            // Single-quoted string, pushed as data:\n             std::vector<unsigned char> value(w->begin()+1, w->end()-1);\n             result << value;\n         }"
      }
    ]
  },
  {
    "sha": "86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjMxNWFhNDg1Y2YyYzJhZGMxYmVlYzIxZWQ5NWE4Y2Y4ZjY5YzU0",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-14T17:06:59Z"
      },
      "committer": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-14T17:06:59Z"
      },
      "message": "util: replace boost::split with std::regex tokenizer",
      "tree": {
        "sha": "f8ff275ba83fdec2e06b3ef5ec73f18333891aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8ff275ba83fdec2e06b3ef5ec73f18333891aa6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86315aa485cf2c2adc1beec21ed95a8cf8f69c54/comments",
    "author": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67404434fa43b82aba825b30467f32161ab0d1c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67404434fa43b82aba825b30467f32161ab0d1c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67404434fa43b82aba825b30467f32161ab0d1c2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 4,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f825a62e50c58478f04989a1e02fb1c58187f5d8",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 18,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86315aa485cf2c2adc1beec21ed95a8cf8f69c54/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86315aa485cf2c2adc1beec21ed95a8cf8f69c54/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
        "patch": "@@ -17,9 +17,9 @@\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/algorithm/string/split.hpp>\n \n #include <algorithm>\n+#include <regex>\n \n CScript ParseScript(const std::string& s)\n {\n@@ -46,30 +46,16 @@ CScript ParseScript(const std::string& s)\n         }\n     }\n \n-    std::vector<std::string> blocks;\n     std::vector<std::string> words;\n \n-    bool quoted = false;\n-    boost::algorithm::split(blocks, s, boost::algorithm::is_any_of(\"'\"));\n-    for (std::vector<std::string>::const_iterator b = blocks.begin(); b != blocks.end(); ++b, quoted = !quoted)\n-    {\n-        if (quoted)\n-        {\n-            words.push_back(\"'\" + *b + \"'\");\n-        }\n-        else\n-        {\n-            std::vector<std::string> block_words;\n-            boost::algorithm::split(block_words, *b, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n-            words.insert(words.end(), block_words.begin(), block_words.end());\n-        }\n-    }\n+    std::regex t(\"('[^']*')|([^\\\\s]+)\");\n+    std::copy(std::sregex_token_iterator(s.begin(), s.end(), t), std::sregex_token_iterator(), std::back_inserter(words));\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n     {\n         if (w->empty())\n         {\n-            // Empty string, ignore. (boost::split given '' will return one word)\n+            // Empty string, ignore.\n         }\n         else if (std::all_of(w->begin(), w->end(), ::IsDigit) ||\n             (w->front() == '-' && w->size() > 1 && std::all_of(w->begin()+1, w->end(), ::IsDigit)))"
      }
    ]
  },
  {
    "sha": "2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzVmOWQ1YzJmNzcwMmY1ZDMwZmYyNDQ5MTU3ZTA2ZmQzNThlYTll",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-15T12:04:59Z"
      },
      "committer": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-15T12:33:07Z"
      },
      "message": "test: add functional test for 'encodescript' RPC",
      "tree": {
        "sha": "9a0ebd19beb217b05374148d1d3073b3e93ab61c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a0ebd19beb217b05374148d1d3073b3e93ab61c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e/comments",
    "author": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86315aa485cf2c2adc1beec21ed95a8cf8f69c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86315aa485cf2c2adc1beec21ed95a8cf8f69c54"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 164,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d38c0c72f87b99e09919229dd62664758e6a7f32",
        "filename": "test/functional/rpc_encodescript.py",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e/test/functional/rpc_encodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e/test/functional/rpc_encodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_encodescript.py?ref=2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e",
        "patch": "@@ -0,0 +1,163 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test encoding scripts via encodescript RPC command.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, bytes_to_hex_str\n+\n+\n+class EncodeScriptTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def encodescript_script_sig(self):\n+        signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        push_signature = '48' + signature\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+\n+        # 1) P2PK scriptSig\n+        # <signature>\n+        script_asm = signature\n+        script_hex = push_signature\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 2) P2PKH scriptSig\n+        # <sig> <pubkey>\n+        script_asm = signature + ' ' + public_key\n+        script_hex = push_signature + push_public_key\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 3) multisig scriptSig\n+        # OP_0 <A signature> <B signature>\n+        script_asm = '0 ' + signature + ' ' + signature\n+        script_hex = '00' + push_signature + push_signature\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 4) P2SH scriptSig\n+        rpc_result = self.nodes[0].encodescript('1 0')\n+        assert_equal('5100', rpc_result['hex'])\n+\n+        # 5) empty scriptSig\n+        rpc_result = self.nodes[0].encodescript('')\n+        assert_equal('', rpc_result['hex'])\n+\n+    def encodescript_script_pub_key(self):\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+        public_key_hash = '5dd1d3a048119c27b28293056724d9522f26d945'\n+        push_public_key_hash = '14' + public_key_hash\n+        uncompressed_public_key = '04b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb25e01fc8fde47c96c98a4f3a8123e33a38a50cf9025cc8c4494a518f991792bb7'\n+        push_uncompressed_public_key = '41' + uncompressed_public_key\n+\n+        # 1) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        script_asm = public_key + ' OP_CHECKSIG'\n+        script_hex = push_public_key + 'ac'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 2) P2PKH scriptPubKey\n+        # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n+        script_asm = 'OP_DUP OP_HASH160 ' + \\\n+            public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG'\n+        script_hex = '76a9' + push_public_key_hash + '88ac'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 3) multisig scriptPubKey\n+        # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n+        script_asm = '2 ' + public_key + ' ' + public_key + ' ' + \\\n+            public_key + ' 3 OP_CHECKMULTISIG'\n+        script_hex = '52' + push_public_key + \\\n+            push_public_key + push_public_key + '53ae'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 4) P2SH scriptPubKey\n+        # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n+        script_asm = 'OP_HASH160 ' + public_key_hash + ' OP_EQUAL'\n+        script_hex = 'a9' + push_public_key_hash + '87'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 5) null data scriptPubKey\n+        # use a signature look-alike here to make sure that we do not decode random data as a signature.\n+        # this matters if/when signature sighash decoding comes along.\n+        # would want to make sure that no such decoding takes place in this case.\n+        signature_imposter = \\\n+            '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        # OP_RETURN <data>\n+        script_asm = 'OP_RETURN ' + signature_imposter[2:]\n+        script_hex = '6a' + signature_imposter\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 6) a CLTV redeem script\n+        # OP_IF\n+        #   <receiver-pubkey> OP_CHECKSIGVERIFY\n+        # OP_ELSE\n+        #   <lock-until> OP_CHECKLOCKTIMEVERIFY OP_DROP\n+        # OP_ENDIF\n+        # <sender-pubkey> OP_CHECKSIG\n+        script_asm = 'OP_IF ' + public_key + \\\n+            ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + \\\n+            public_key + ' OP_CHECKSIG'\n+        script_hex = '63' + push_public_key + \\\n+            'ad670320a107b17568' + push_public_key + 'ac'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 7) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        script_asm = uncompressed_public_key + ' OP_CHECKSIG'\n+        script_hex = push_uncompressed_public_key + 'ac'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 8) multisig scriptPubKey with an uncompressed pubkey\n+        # <m> <A pubkey> <B pubkey> <n> OP_CHECKMULTISIG\n+        script_asm = '2 ' + public_key + ' ' + \\\n+            uncompressed_public_key + ' 2 OP_CHECKMULTISIG'\n+        script_hex = '52' + push_public_key + push_uncompressed_public_key + '52ae'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 9) P2WPKH scriptpubkey\n+        # 0 <PubKeyHash>\n+        script_asm = '0 ' + public_key_hash\n+        script_hex = '00' + push_public_key_hash\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+    def encodescript_data(self):\n+        \"\"\"Test different conventions in script parsing\"\"\"\n+        rawhex = '2c2e6a2c2e'\n+        text = 'Random ASCII string'\n+\n+        # 1) Splice raw hex script\n+        script_asm = '0 ' + '0x' + rawhex\n+        script_hex = '002c2e6a2c2e'\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+        # 2) Insert quoted string\n+        script_asm = 'OP_RETURN ' + '\\'' + text + '\\''\n+        script_hex = '6a' + '13' + bytes_to_hex_str(bytes(text, 'ascii'))\n+        rpc_result = self.nodes[0].encodescript(script_asm)\n+        assert_equal(script_hex, rpc_result['hex'])\n+\n+    def run_test(self):\n+        self.encodescript_script_sig()\n+        self.encodescript_script_pub_key()\n+        self.encodescript_data()\n+\n+\n+if __name__ == '__main__':\n+    EncodeScriptTest().main()"
      },
      {
        "sha": "2cbe14fc80d53e6adc5c847188201f64b9637e11",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2c5f9d5c2f7702f5d30ff2449157e06fd358ea9e",
        "patch": "@@ -130,6 +130,7 @@\n     'wallet_groups.py',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',\n+    'rpc_encodescript.py',\n     'rpc_blockchain.py',\n     'rpc_deprecated.py',\n     'wallet_disable.py',"
      }
    ]
  }
]