[
  {
    "sha": "ca55641481001ffd60c143c15511550b24f4e11f",
    "node_id": "C_kwDOABII59oAKGNhNTU2NDE0ODEwMDFmZmQ2MGMxNDNjMTU1MTE1NTBiMjRmNGUxMWY",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-28T19:57:50Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2021-10-14T13:13:03Z"
      },
      "message": "refactor: Extract RIPEMD160\n\nTo directly return a CRIPEMD160 hash from data.\n\nIncidentally, decoding this accronym:\n* RIPEMD -> RIPE Message Digest\n* RIPE -> RACE Integrity Primitives Evaluation\n* RACE -> Research and Development in Advanced Communications Technologies in Europe",
      "tree": {
        "sha": "c707eeb4a9bbd3c2596c5ed061193394878993e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c707eeb4a9bbd3c2596c5ed061193394878993e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca55641481001ffd60c143c15511550b24f4e11f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAmFoLOAACgkQTYykuhgE\nCQYPYQ//dS25sNgLG86wyofqIVjoQ2cNEMQRmHq/iVt9c5Ud/27bZuHOv97CBW+f\nql1I/ddeNe78V9mQAvsBkXZel2DKQUFxD8gUFs06HkCxSebkmQf79LMo0zIMiqJb\nCb50bop5uBL0gdFgR4CpAlej0cBuT3I+nsNuTb3lkKVyt78YhnMng+6VA32ckLq/\neJYHMn1f+ZbjH5Ky6IQbJYN4TrjF6HEQq4BEVWPf5UgMK7l85T5aTIquokbJB9Kh\n4HJE/WDaI741gzB/BlKdQjSo/1c35uPOftHn9AMggJEW1ztd1exXJcpTpIpgZ7nk\nF7b0S/7M0XzOU3MQcTdc+Dfpj6bt4OazgzJLYYl82fTqJ3WqCAVtmCWVBr2bY5hK\nHq1FYqjY0ceBFb5AJKwN3QSzkIyyNmRgWYxk6QZSaa31QiFygfsbMAdJw1wD5Tmj\n1Y4KjIwis8/ZXvIgtmTl8+iygkyVYiuu+tPqStxrjPxS0U9sSnA2aCp+Fi6muyTI\nmkmSX9kMZ5lEka6SbVNI/a4i3ij07CiIOtj8iueQirzp5xZdsdGkG5JsovYEFcbl\ncQeLvwqN5teFHdDhbiBNCqB3Xbqz3qowIxlS8a6AmCUYuXcTNBFAU857RUkRzo05\npjrg9McZBYjT0o/GJJyeDQb2bfrlJ4vkc4AU/zSiqmR1l67SUHw=\n=D/gt\n-----END PGP SIGNATURE-----",
        "payload": "tree c707eeb4a9bbd3c2596c5ed061193394878993e3\nparent 71a85fbd09b5a450edc53a8ba4131f32e7136ca7\nauthor Ben Woosley <ben.woosley@gmail.com> 1548705470 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1634217183 +0200\n\nrefactor: Extract RIPEMD160\n\nTo directly return a CRIPEMD160 hash from data.\n\nIncidentally, decoding this accronym:\n* RIPEMD -> RIPE Message Digest\n* RIPE -> RACE Integrity Primitives Evaluation\n* RACE -> Research and Development in Advanced Communications Technologies in Europe\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca55641481001ffd60c143c15511550b24f4e11f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca55641481001ffd60c143c15511550b24f4e11f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca55641481001ffd60c143c15511550b24f4e11f/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71a85fbd09b5a450edc53a8ba4131f32e7136ca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a85fbd09b5a450edc53a8ba4131f32e7136ca7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71a85fbd09b5a450edc53a8ba4131f32e7136ca7"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 30,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b6b7daffa92005bfa4665ba8050ff93c11e71fd7",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -18,7 +18,7 @@\n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;\n \n-static void RIPEMD160(benchmark::Bench& bench)\n+static void BenchRIPEMD160(benchmark::Bench& bench)\n {\n     uint8_t hash[CRIPEMD160::OUTPUT_SIZE];\n     std::vector<uint8_t> in(BUFFER_SIZE,0);\n@@ -150,7 +150,7 @@ static void MuHashPrecompute(benchmark::Bench& bench)\n     });\n }\n \n-BENCHMARK(RIPEMD160);\n+BENCHMARK(BenchRIPEMD160);\n BENCHMARK(SHA1);\n BENCHMARK(SHA256);\n BENCHMARK(SHA512);"
      },
      {
        "sha": "52d2f2c295040875aefa9dad5dd1b4198150e2a2",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -12,6 +12,7 @@\n #include <crypto/sha256.h>\n #include <prevector.h>\n #include <serialize.h>\n+#include <span.h>\n #include <uint256.h>\n #include <version.h>\n \n@@ -211,4 +212,12 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n  */\n CHashWriter TaggedHash(const std::string& tag);\n \n+/** Compute the 160-bit RIPEMD-160 hash of an array. */\n+inline uint160 RIPEMD160(Span<const unsigned char> data)\n+{\n+    uint160 result;\n+    CRIPEMD160().Write(data.data(), data.size()).Finalize(result.begin());\n+    return result;\n+}\n+\n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "c840b99b37284eb96bf6975a1751243eaacfdb8d",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -4,10 +4,12 @@\n \n #include <script/descriptor.h>\n \n+#include <hash.h>\n #include <key_io.h>\n #include <pubkey.h>\n #include <script/script.h>\n #include <script/standard.h>\n+#include <uint256.h>\n \n #include <span.h>\n #include <util/bip32.h>\n@@ -1298,8 +1300,7 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n         }\n     }\n     if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n-        CScriptID scriptid;\n-        CRIPEMD160().Write(data[0].data(), data[0].size()).Finalize(scriptid.begin());\n+        CScriptID scriptid{RIPEMD160(data[0])};\n         CScript subscript;\n         if (provider.GetCScript(scriptid, subscript)) {\n             auto sub = InferScript(subscript, ParseScriptContext::P2WSH, provider);"
      },
      {
        "sha": "e91049ac249d00d0b5142c206f2fdb680522c2c9",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -232,7 +232,6 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n                      std::vector<valtype>& ret, TxoutType& whichTypeRet, SigVersion sigversion, SignatureData& sigdata)\n {\n     CScript scriptRet;\n-    uint160 h160;\n     ret.clear();\n     std::vector<unsigned char> sig;\n \n@@ -261,16 +260,16 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n-    case TxoutType::SCRIPTHASH:\n-        h160 = uint160(vSolutions[0]);\n+    case TxoutType::SCRIPTHASH: {\n+        uint160 h160{vSolutions[0]};\n         if (GetCScript(provider, sigdata, CScriptID{h160}, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n         // Could not find redeemScript, add to missing\n         sigdata.missing_redeem_script = h160;\n         return false;\n-\n+    }\n     case TxoutType::MULTISIG: {\n         size_t required = vSolutions.front()[0];\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n@@ -296,8 +295,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         return true;\n \n     case TxoutType::WITNESS_V0_SCRIPTHASH:\n-        CRIPEMD160().Write(vSolutions[0].data(), vSolutions[0].size()).Finalize(h160.begin());\n-        if (GetCScript(provider, sigdata, CScriptID{h160}, scriptRet)) {\n+        if (GetCScript(provider, sigdata, CScriptID{RIPEMD160(vSolutions[0])}, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }"
      },
      {
        "sha": "0a6c41bcfa16a009ecda626dd68cc0bc88554de0",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -14,6 +14,7 @@\n #include <script/standard.h>\n #include <span.h>\n #include <streams.h>\n+#include <uint256.h>\n \n class CKey;\n class CKeyID;"
      },
      {
        "sha": "4c09139b50fbc8e83cf8dcf5e12d4511887870d7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <clientversion.h>\n #include <core_io.h>\n+#include <hash.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n #include <merkleblock.h>\n@@ -13,6 +14,7 @@\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n@@ -909,9 +911,7 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     }\n     case TxoutType::WITNESS_V0_SCRIPTHASH: {\n         if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WSH inside another P2WSH\");\n-        uint256 fullid(solverdata[0]);\n-        CScriptID id;\n-        CRIPEMD160().Write(fullid.begin(), fullid.size()).Finalize(id.begin());\n+        CScriptID id{RIPEMD160(solverdata[0])};\n         auto subscript = std::move(import_data.witnessscript); // Remove redeemscript from import_data to check for superfluous script later.\n         if (!subscript) return \"missing witnessscript\";\n         if (CScriptID(*subscript) != id) return \"witnessScript does not match the scriptPubKey or redeemScript\";"
      },
      {
        "sha": "4b1727cf3b360423aed3519f105737f9e108db2d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -6,6 +6,7 @@\n #include <consensus/amount.h>\n #include <core_io.h>\n #include <interfaces/chain.h>\n+#include <hash.h>\n #include <key_io.h>\n #include <node/context.h>\n #include <outputtype.h>\n@@ -18,6 +19,7 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/sign.h>\n+#include <uint256.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n #include <util/message.h> // For MessageSign()\n@@ -3125,8 +3127,7 @@ static RPCHelpMan listunspent()\n                             CHECK_NONFATAL(extracted);\n                             // Also return the witness script\n                             const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(witness_destination);\n-                            CScriptID id;\n-                            CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                            CScriptID id{RIPEMD160(whash)};\n                             CScript witnessScript;\n                             if (provider->GetCScript(id, witnessScript)) {\n                                 entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n@@ -3135,8 +3136,7 @@ static RPCHelpMan listunspent()\n                     }\n                 } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n                     const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(address);\n-                    CScriptID id;\n-                    CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                    CScriptID id{RIPEMD160(whash)};\n                     CScript witnessScript;\n                     if (provider->GetCScript(id, witnessScript)) {\n                         entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n@@ -3939,10 +3939,8 @@ class DescribeWalletAddressVisitor\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (provider && provider->GetCScript(CScriptID(hash), subscript)) {\n+        CScriptID script_id{RIPEMD160(id)};\n+        if (provider && provider->GetCScript(script_id, subscript)) {\n             ProcessSubScript(subscript, obj);\n         }\n         return obj;"
      },
      {
        "sha": "4d4aaa733a2642f70ce04d9ab6a6c01e0752dc80",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca55641481001ffd60c143c15511550b24f4e11f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca55641481001ffd60c143c15511550b24f4e11f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ca55641481001ffd60c143c15511550b24f4e11f",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <hash.h>\n #include <key_io.h>\n #include <logging.h>\n #include <outputtype.h>\n@@ -166,9 +167,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n             break;\n         }\n-        uint160 hash;\n-        CRIPEMD160().Write(vSolutions[0].data(), vSolutions[0].size()).Finalize(hash.begin());\n-        CScriptID scriptID = CScriptID(hash);\n+        CScriptID scriptID{RIPEMD160(vSolutions[0])};\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             ret = std::max(ret, recurse_scripthash ? IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0) : IsMineResult::SPENDABLE);"
      }
    ]
  }
]