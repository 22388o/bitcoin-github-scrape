Sjors,2019-02-01T18:11:52Z,"Concept ACK. I noticed you're not touching the `CRIPEMD160` code in `script/interpreter.cpp`. I assume that's intentional?\n\nThis should have wallet tag I think, since it touches IsMine and signing code.\n\nWhy `hash.h`  rather than `ripemd160.h`? I'm a bit confused by the division of labor between hash.h and the various specific hash function files anyway. ",https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-459815244,459815244,
Empact,2019-02-04T08:02:43Z,"@Sjors addressed your comments - now in `ripemd160.h`. Didn't touch `script/interpreter.cpp` both because the call pattern didn't fit, and to avoid touching consensus code.",https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-460159609,460159609,
DrahtBot,2019-02-04T10:56:55Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21590](https://github.com/bitcoin/bitcoin/pull/21590) (Safegcd-based modular inverses in MuHash3072 by sipa)\n* [#17034]",https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-460205926,460205926,
Empact,2019-04-14T02:09:42Z,Rebased for #15638,https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-482912283,482912283,
Empact,2019-06-22T05:51:10Z,Rebased,https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-504633457,504633457,
Sjors,2020-02-14T08:48:13Z,re-ACK cc91980afd05796230e8ce95c622729accee1785,https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-586158912,586158912,
theStack,2020-02-16T17:40:05Z,"re-ACK https://github.com/bitcoin/bitcoin/commit/cc91980afd05796230e8ce95c622729accee1785\n(checked that only the const rvalue constructor has been removed since my previous ACK)",https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-586732511,586732511,
Empact,2021-04-13T16:32:21Z,Rebased,https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-818875401,818875401,
jonatack,2021-09-13T13:54:34Z,Perhaps `s/moveonly/refactoring/` in the PR title.,https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-918215525,918215525,
sipa,2021-10-13T13:41:35Z,"I have a slight preference for not having the `crypto/` code depend on Bitcoin Core specific code like `uint256.h` (for purely aesthetic reasons), and actually going the other direction (also removing it from siphash). I think with the suggestion [here](https://github.com/bitcoin/bitcoin/pull/15294/files#r705283491) that may actually not even be needed (Span seems much ""cleaner"" to depend on, as i",https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-942320786,942320786,
Empact,2021-10-13T14:31:48Z,@sipa makes sense - I've moved the new code to hash.h,https://github.com/bitcoin/bitcoin/pull/15294#issuecomment-942367699,942367699,
jimpo,2019-02-01T03:46:21Z,"Could make this a template function over things with `.data()` and `.size()` so that it works for `Span`s too. In which case you could also remove the other signature for `RipeMd160(ptr, size)` and just call `RipeMd160(Span<unsigned char>(ptr, size))`.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r252925964,252925964,src/hash.h
Empact,2019-02-02T06:26:52Z,"note: `crypto/` is pretty conservative wrt inclusion, but seems this is okay because `crypto/siphash.h` includes `uint256.h`.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r253256131,253256131,src/crypto/ripemd160.h
Empact,2019-02-04T07:57:23Z,I have a follow-up here: https://github.com/Empact/bitcoin/tree/base-blob-data that makes `RipeMd160` just a template and makes `base_blob` and descendants compatible by adding `base_blob::data()`. I figure it's best to put that up separately as it's mostly to do with `base_blob`.,https://github.com/bitcoin/bitcoin/pull/15294#discussion_r253370269,253370269,src/hash.h
Sjors,2020-02-13T12:48:08Z,"Afaik this is the only const rvalue constructor in the codebase. They seem a bit controversial: \nhttps://stackoverflow.com/questions/10770181/should-a-move-constructor-take-a-const-or-non-const-rvalue-reference\nhttps://codesynthesis.com/~boris/blog/2012/07/24/const-rvalue-references/\n\nIt gets called 215 times during the unit test suite, e.g. for descriptor parsing: `CScriptID scriptid{Ripe",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r378838831,378838831,src/script/standard.h
sipa,2020-02-13T16:10:34Z,"It doesn't do anything here, as it's equivalent to the const lvalue copy constructor.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r378960976,378960976,src/script/standard.h
Empact,2020-02-13T21:39:20Z,"Thanks, removed this ineffective attempt at optimization.\n\n```diff\n$ git diff b29e95c cc91980\ndiff --git a/src/script/standard.h b/src/script/standard.h\nindex 717892f1d..49a45f3eb 100644\n--- a/src/script/standard.h\n+++ b/src/script/standard.h\n@@ -24,7 +24,6 @@ public:\n     CScriptID() : uint160() {}\n     explicit CScriptID(const CScript& in);\n     CScriptID(const uint160& in)",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r379133329,379133329,src/script/standard.h
kiminuo,2021-05-02T13:39:29Z,"Nit: I think it would be nicer to have `RipeMd160` -> `RIPEMD160` given that \n\n* `RIPEMD` represents `RIPE Message Digest` and \n* `RIPE` represents `RACE Integrity Primitives Evaluation`.\n\n",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r624696870,624696870,src/crypto/ripemd160.h
Empact,2021-05-03T16:58:15Z,"TIL: RIPEMD -> Research and Development in Advanced Communications Technologies in Europe Integrity Primitives Evaluation Message Digest\n\nI could go either way on this one - while all-caps is semantically correct for initialisms, capitalization has distinct meaning in code.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r625225287,625225287,src/crypto/ripemd160.h
laanwj,2021-09-09T12:32:09Z,"Maybe make this take a `Span<>` instead. I thint that might even make the second variant below unnecessary, as many containers automatically coerce to a span.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r705283491,705283491,src/crypto/ripemd160.h
MarcoFalke,2021-09-12T11:29:05Z,"Instead of adding code and removing it in the next commit, it might be better to squash the commits. This will reduce review burden for reviewers starting from scratch as well as reduce the git history, blame depth and clone size.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r706822654,706822654,src/crypto/ripemd160.h
jonatack,2021-09-13T13:42:41Z,"suggestion `s/fullid/full_id/`, or better yet remove it\n```diff\n-        uint256 fullid(solverdata[0]);\n-        CScriptID id{RipeMd160(fullid)};\n+        CScriptID id{RipeMd160(solverdata[0])};\n```\n",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r707346974,707346974,src/wallet/rpcdump.cpp
jonatack,2021-09-13T13:45:17Z,"suggestion `s/scriptid/script_id/`\n```diff\n@@ -3814,9 +3814,9 @@ public:\n     UniValue operator()(const WitnessV0ScriptHash& id) const\n     {\n         UniValue obj(UniValue::VOBJ);\n+        CScriptID script_id{RipeMd160(id)};\n         CScript subscript;\n-        CScriptID scriptid{RipeMd160(id)};\n-        if (provider && provider->GetCScript(scriptid, subscript)) {\n+        if ",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r707349371,707349371,src/wallet/rpcwallet.cpp
jonatack,2021-09-13T13:45:57Z,"suggestion, sort\n```diff\n+#include <span.h>\n #include <uint256.h> // For uint160\n-#include <span.h> // For Span\n```\n",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r707350013,707350013,src/crypto/ripemd160.h
sipa,2021-10-13T14:40:21Z,"Nit (also mentioned earlier): this should be RIPEMD160 I think, as it's an acronym.",https://github.com/bitcoin/bitcoin/pull/15294#discussion_r728136773,728136773,src/hash.h
fanquake,2021-10-14T02:16:19Z,Please don't add these `For ...` comments,https://github.com/bitcoin/bitcoin/pull/15294#discussion_r728578666,728578666,src/script/descriptor.cpp
