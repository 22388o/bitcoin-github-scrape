sipa,2021-10-28 14:46:49,"Duplicate of #23354, though this variant also uses V3 when possible.",https://github.com/bitcoin/bitcoin/pull/23382#issuecomment-953919276,953919276,
vasild,2021-10-28 14:55:27,"> Duplicate of #23354, though this variant also uses V3 when possible.\n\nDoh, closing in favor of that one. I wasn't aware of it. Sorry for the noise.\n\nFeel free to pick the use-V3-if-no-duplicates tweak into #23354.",https://github.com/bitcoin/bitcoin/pull/23382#issuecomment-953927010,953927010,
vasild,2021-10-28 14:44:40,"Checking 70k addresses takes 0.032 sec. If changed to `unordered_map` then it takes 0.017 sec. While that is ~2x speedup, I think it is insignificant during `Serialize()` and not worth introducing and maintaining `CNetAddr` hasher.\n\n<details>\n<summary>CNetAddrHash</summary>\n\n```cpp\nclass CNetAddrHash\n{\npublic:\n    size_t operator()(const CNetAddr& a) const noexcept\n    {\n    ",https://github.com/bitcoin/bitcoin/pull/23382#discussion_r738468114,738468114,src/addrman.cpp
sipa,2021-10-28 14:50:08,`std::sort` + `std::adjacent_find` may be faster than both.,https://github.com/bitcoin/bitcoin/pull/23382#discussion_r738473682,738473682,src/addrman.cpp
vasild,2021-10-28 15:42:59,"Inserting the elements in `std::set<CNetAddr>` is essentially sorting them (by address only). Inserting `N` elements would be `O(N*log(N))`. Same as `std::sort`, except that the `std::set` variant could quit early if a duplicate is found.\n\nThe `std::unordered_set` variant is `O(N)` (time and memory).",https://github.com/bitcoin/bitcoin/pull/23382#discussion_r738523444,738523444,src/addrman.cpp
sipa,2021-10-28 15:53:51,"@vasild Yes, but both set/unordered_set will require an allocation per element. I would expect that to outweigh the complexity difference for the sizes we're talking about.",https://github.com/bitcoin/bitcoin/pull/23382#discussion_r738532904,738532904,src/addrman.cpp
vasild,2021-10-29 09:17:19,"I played with this out of curiosity. Speed is not so important in this case. But anyway:\n\nThe ""sort + adjacent_find"":\n\n```cpp\n    std::vector<CNetAddr> dup_guard;\n    dup_guard.reserve(mapAddr.size());\n    for (const auto& [addr, id] : mapAddr) {\n        dup_guard.push_back(addr);\n    }\n    std::sort(dup_guard.begin(), dup_guard.end());\n    const bool duplicates_by_addr =\n ",https://github.com/bitcoin/bitcoin/pull/23382#discussion_r739071982,739071982,src/addrman.cpp
