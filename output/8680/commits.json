[
  {
    "sha": "d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmE1ZGM0YTJlYWEwZDczNDg4MDQyNTRjYTA5ZTc1ZmMzYTg1OGFi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T01:55:21Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-07T16:46:01Z"
      },
      "message": "add waitfornewblock/waitforblock/waitforblockheight rpcs and use them for tests\n\nwaitfornewblock waits until a new block is received, or the timeout expires, then\nreturns the current block height/hash.\n\nwaitforblock waits for a specific blockhash, or until the timeout expires, then\nreturns the current block height/hash. If the target blockhash is the current\ntip, it will return immediately.\n\nwaitforblockheight waits until the tip has reached a certain height or higher,\nthen returns the current height and hash.\n\nwaitforblockheight is used to avoid polling in the rpc tests.",
      "tree": {
        "sha": "dd60ab61035edb6e519f9f69b4d80d48de079ff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd60ab61035edb6e519f9f69b4d80d48de079ff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b2ea29cf4fd298346437bb16a54407f8c1f9dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2ea29cf4fd298346437bb16a54407f8c1f9dca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2ea29cf4fd298346437bb16a54407f8c1f9dca"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 168,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eee77f1a104cc47e2e661417729d2fafd0e2b90b",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
        "patch": "@@ -125,12 +125,16 @@ def sync_blocks(rpc_connections, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same tip\n     \"\"\"\n+    maxheight = 0\n     while timeout > 0:\n-        tips = [ x.getbestblockhash() for x in rpc_connections ]\n+        tips = [ x.waitforblockheight(maxheight, int(wait * 1000)) for x in rpc_connections ]\n+        heights = [ x[\"height\"] for x in tips ]\n         if tips == [ tips[0] ]*len(tips):\n             return True\n-        time.sleep(wait)\n+        if heights == [ heights[0] ]*len(heights): #heights are the same but hashes are not\n+            raise AssertionError(\"Block sync failed\")\n         timeout -= wait\n+        maxheight = max(heights)\n     raise AssertionError(\"Block sync failed\")\n \n def sync_mempools(rpc_connections, wait=1, timeout=60):"
      },
      {
        "sha": "64e161b9b29079440b43235114eabdee3e4efe1a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
        "patch": "@@ -280,9 +280,15 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     }\n     return true;\n }\n+void OnRPCStarted()\n+{\n+    uiInterface.NotifyBlockTip.connect(&RPCNotifyBlockChange);\n+}\n \n void OnRPCStopped()\n {\n+    uiInterface.NotifyBlockTip.disconnect(&RPCNotifyBlockChange);\n+    RPCNotifyBlockChange(false, nullptr);\n     cvBlockChange.notify_all();\n     LogPrint(\"rpc\", \"RPC stopped.\\n\");\n }\n@@ -666,6 +672,7 @@ bool InitSanityCheck(void)\n \n bool AppInitServers(boost::thread_group& threadGroup)\n {\n+    RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n     RPCServer::OnPreCommand(&OnRPCPreCommand);\n     if (!InitHTTPServer())\n@@ -1357,6 +1364,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 {\n                     LOCK(cs_main);\n                     CBlockIndex* tip = chainActive.Tip();\n+                    RPCNotifyBlockChange(true, tip);\n                     if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                         strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n                                 \"This may be due to your computer's date and time being set incorrectly. \""
      },
      {
        "sha": "dc7e4721bbc46cb2a43a6a2e6fda8acb1ade89db",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
        "patch": "@@ -26,8 +26,20 @@\n \n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n \n+#include <mutex>\n+#include <condition_variable>\n using namespace std;\n \n+struct CUpdatedBlock\n+{\n+    uint256 hash;\n+    int height;\n+};\n+\n+static std::mutex cs_blockchange;\n+static std::condition_variable cond_blockchange;\n+static CUpdatedBlock latestblock;\n+\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n \n@@ -168,6 +180,138 @@ UniValue getbestblockhash(const UniValue& params, bool fHelp)\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n+void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n+{\n+    if(pindex) {\n+        std::lock_guard<std::mutex> lock(cs_blockchange);\n+        latestblock.hash = pindex->GetBlockHash();\n+        latestblock.height = pindex->nHeight;\n+    }\n+\tcond_blockchange.notify_all();\n+}\n+\n+UniValue waitfornewblock(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"waitfornewblock\\n\"\n+            \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n+            \"\\nReturns the current block on timeout or exit.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. timeout (milliseconds) (int, optional, default=false)\\n\"\n+            \"\\nResult::\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n+            \"  \\\"height\\\" : {     (int) Block height\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"waitfornewblock\", \"1000\")\n+            + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n+        );\n+    int timeout = 0;\n+    if (params.size() > 0)\n+        timeout = params[0].get_int();\n+\n+    CUpdatedBlock block;\n+    {\n+        std::unique_lock<std::mutex> lock(cs_blockchange);\n+        block = latestblock;\n+        if(timeout)\n+            cond_blockchange.wait_for(lock, std::chrono::milliseconds(timeout), [&block]{return latestblock.height != block.height || latestblock.hash != block.hash || !IsRPCRunning(); });\n+        else\n+            cond_blockchange.wait(lock, [&block]{return latestblock.height != block.height || latestblock.hash != block.hash || !IsRPCRunning(); });\n+        block = latestblock;\n+    }\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n+    ret.push_back(Pair(\"height\", block.height));\n+    return ret;\n+}\n+\n+UniValue waitforblock(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"waitforblock\\n\"\n+            \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n+            \"\\nReturns the current block on timeout or exit.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. blockhash to wait for (string)\\n\"\n+            \"2. timeout (milliseconds) (int, optional, default=false)\\n\"\n+            \"\\nResult::\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n+            \"  \\\"height\\\" : {     (int) Block height\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n+            + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n+        );\n+    int timeout = 0;\n+\n+    uint256 hash = uint256S(params[0].get_str());\n+\n+    if (params.size() > 1)\n+        timeout = params[1].get_int();\n+\n+    CUpdatedBlock block;\n+    {\n+        std::unique_lock<std::mutex> lock(cs_blockchange);\n+        if(timeout)\n+            cond_blockchange.wait_for(lock, std::chrono::milliseconds(timeout), [&hash]{return latestblock.hash == hash || !IsRPCRunning();});\n+        else\n+            cond_blockchange.wait(lock, [&hash]{return latestblock.hash == hash || !IsRPCRunning(); });\n+        block = latestblock;\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n+    ret.push_back(Pair(\"height\", block.height));\n+    return ret;\n+}\n+\n+UniValue waitforblockheight(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"waitforblock\\n\"\n+            \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n+            \"\\nof the current tip.\\n\"\n+            \"\\nReturns the current block on timeout or exit.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. block height to wait for (int)\\n\"\n+            \"2. timeout (milliseconds) (int, optional, default=false)\\n\"\n+            \"\\nResult::\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n+            \"  \\\"height\\\" : {     (int) Block height\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n+            + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n+        );\n+    int timeout = 0;\n+\n+    int height = params[0].get_int();\n+\n+    if (params.size() > 1)\n+        timeout = params[1].get_int();\n+\n+    CUpdatedBlock block;\n+    {\n+        std::unique_lock<std::mutex> lock(cs_blockchange);\n+        if(timeout)\n+            cond_blockchange.wait_for(lock, std::chrono::milliseconds(timeout), [&height]{return latestblock.height >= height || !IsRPCRunning();});\n+        else\n+            cond_blockchange.wait(lock, [&height]{return latestblock.height >= height || !IsRPCRunning(); });\n+        block = latestblock;\n+    }\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n+    ret.push_back(Pair(\"height\", block.height));\n+    return ret;\n+}\n+\n UniValue getdifficulty(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -1203,6 +1347,9 @@ static const CRPCCommand commands[] =\n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },\n+    { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        true  },\n+    { \"hidden\",             \"waitforblock\",           &waitforblock,           true  },\n+    { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     true  },\n };\n \n void RegisterBlockchainRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "c14d9d67474feddabb8f2cf48012ee94886ca421",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
        "patch": "@@ -46,6 +46,12 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getbalance\", 1 },\n     { \"getbalance\", 2 },\n     { \"getblockhash\", 0 },\n+    { \"waitforblockheight\", 0 },\n+    { \"waitforblockheight\", 1 },\n+    { \"waitforblock\", 1 },\n+    { \"waitforblock\", 2 },\n+    { \"waitfornewblock\", 0 },\n+    { \"waitfornewblock\", 1 },\n     { \"move\", 2 },\n     { \"move\", 3 },\n     { \"sendfrom\", 2 },"
      },
      {
        "sha": "4e0aa2c6d6f6f7fdbc3850e08a63d48d24391818",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=d6a5dc4a2eaa0d7348804254ca09e75fc3a858ab",
        "patch": "@@ -194,5 +194,6 @@ bool StartRPC();\n void InterruptRPC();\n void StopRPC();\n std::string JSONRPCExecBatch(const UniValue& vReq);\n+void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n \n #endif // BITCOIN_RPCSERVER_H"
      }
    ]
  }
]