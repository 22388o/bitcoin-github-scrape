ryanofsky,2019-01-28T18:10:51Z,"To help explain this PR: I didn't immediately realize this change is mainly using GUIX as a container environment, not using GUIX as a package manger.\n\nThe `depends` command first downloads binaries because networking is not available in the container:\n\n```sh\nmake -C depends -j""$(nproc)"" download\n```\n\nThen a normal build is basically done, but inside a container with GUIX autotools",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-458240093,458240093,
DrahtBot,2019-01-28T18:42:39Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-458251654,458251654,
practicalswift,2019-01-29T09:32:41Z,"Concept ACK\n\n@dongcarl The scope of PR would include making builds reproducible, right? If so, what type of reproducibility would be required? What are the reproducibility requirements of Guix?",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-458470346,458470346,
fanquake,2019-01-29T12:34:18Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-458523696,458523696,
dongcarl,2019-01-29T17:13:09Z,"@practicalswift Yes it would, we would want bit-for-bit reproducibility so that we can sign hashes just like in gitian. My plan is to use Guix simply as a container environment builder right now, which has worked quite well.\n\nI've already [upstreamed patches](http://lists.gnu.org/archive/html/guix-patches/2019-01/msg00377.html) that would make the bitcoin-core Guix package deterministic. I thi",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-458625256,458625256,
laanwj,2019-01-30T15:09:26Z,"> This PR enables building bitcoin in Guix containers. Guix is a transactional package manager much like Nix, but unlike Nix, it has more of a focus on bootstrappability and reproducibility which are attractive for security-sensitive projects like bitcoin.\n\nNice. I've been playing around with NixOS a bit lately, didn't know about guix. Concept ACK. Thanks for working on this!\n\n@theuni what",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-458978599,458978599,
laanwj,2019-01-31T18:30:12Z,"Travis fail:\n```\nMissing expected shebang ""#!/usr/bin/env bash"" or ""#!/bin/sh"" in contrib/guix/build.sh\n```",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-459453601,459453601,
dongcarl,2019-02-12T20:23:18Z,"Just an update. I've worked through most of the problems, right now at the end of the build, when `make -C src --jobs=1 check-symbols` is executed, we get the following:\n```\n==> out <==\nmake: Entering directory '/home/dongcarl/src/bitcoin/v0.17.1-guix/src'\nChecking glibc back compat...\nqt/bitcoin-qt: NEEDED library libexpat.so.1 is not allowed\n\n==> err <==\nmake: *** [Makefile:11768",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-462919661,462919661,
wtogami,2019-02-14T22:54:00Z,"> ```\n> ==> out <==\n> make: Entering directory '/home/dongcarl/src/bitcoin/v0.17.1-guix/src'\n> Checking glibc back compat...\n> qt/bitcoin-qt: NEEDED library libexpat.so.1 is not allowed\n> \n> ==> err <==\n> make: *** [Makefile:11768: check-symbols] Error 1\n> ```\n> What's curious about this is that in our releases, libexpat shows up when I do `ldd bitcoin-qt`:\n> \n> ```\n>      ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-463835688,463835688,
dongcarl,2019-02-15T00:51:39Z,"@wtogami Good find!\nHere it is for my Guix container build of `bitcoin-qt`:\n```\n  NEEDED               libpthread.so.0\n  NEEDED               libdl.so.2\n  NEEDED               libm.so.6\n  NEEDED               libfontconfig.so.1\n  NEEDED               libexpat.so.1\n  NEEDED               libfreetype.so.6\n  NEEDED               libX11-xcb.so.1\n  NEEDED               libX11.so.6\",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-463863885,463863885,
laanwj,2019-02-21T09:03:11Z,"Adding, optimistically, the 0.19 milestone.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-465917993,465917993,
dongcarl,2019-02-21T19:01:57Z,"Another observation I made today: the guix build output had\n```\n  NEEDED               libdl.so.2\n```\nfor `bitcoind`, `bitcoin-cli`, `bitcoin-tx`, and `test_bitcoin`, while the release versions didn't. However, `bitcoin-qt` had that `NEED` in both the guix build and the release build.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-466124078,466124078,
MarcoFalke,2019-02-28T20:09:33Z,"How much RAM is needed to build this? It seems that when compiling tar (or something) and running its unit tests, it OOMs\n\nCurrently I run gitian builds on a 1CPU 4GB bionic and the below failed on a machine with 8GB\n\n```\n$ guix environment --manifest=contrib/guix/manifest.scm --container --pure --no-grafts --no-substitutes\n....\n\n\n\n146: bad next volume                          ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-468419454,468419454,
wtogami,2019-03-01T09:22:22Z,"> https://www.gnu.org/software/guix/manual/en/guix.html#The-GCC-toolchain\n> ""Guix offers individual compiler packages such as gcc but if you are in need of a complete toolchain for compiling and linking source code what you really want is the gcc-toolchain package. This package provides a complete GCC toolchain for C/C++ development, including GCC itself, the GNU C Library (headers and binaries,",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-468599825,468599825,
theuni,2019-03-01T19:22:06Z,"(@wtogami asked me to weigh in on his comment above, I haven't read the history here)\n\nIf the guix environment uses some wonky path to the runtime loader, an alternative one can be set\n when linking using ```-Wl,--dynamic-linker=Foo```, where Foo is the more generic path for that arch. That of course means that the binaries won't run in guix by default anymore. Fun trick, though, I believe y",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-468780956,468780956,
wtogami,2019-03-03T23:33:59Z,"> For example, this should work in a non-guix environment. It used to, anyway:\n> `/lib64/ld-linux-x86-64.so.2 ./my_guix_binary`\n> There shouldn't be any need to modify a binary after the fact. Imo doing so is brittle and indicative that something is wrong/missing. If the toolchain can't do what's needed, let's make sure that any temporary hacks are paired with upstream bug reports and/or patch",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-469077186,469077186,
dongcarl,2019-03-11T18:13:43Z,"Before you execute any scripts, please get on the same version of Guix as me:\n```\nguix pull --commit=12327d74475d4079065a0f8f5d2491e4679fb53e\n```\n\n-----\n\nThe push @ https://github.com/bitcoin/bitcoin/pull/15277/commits/21bc51a27bc41a1a849e719dba5e317f2aa699ac includes some fixes and a convenience script for Guix builds located at `contrib/guix/guix-build.sh`. It is recommended that y",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-471658439,471658439,
fanquake,2019-03-16T15:03:49Z,"@dongcarl Looks good. I started playing around with this, and made up a Docker file that sets up a build environment. The Dockerfile, as well as some notes on usage are available [here](https://github.com/fanquake/core-review/tree/master/guix).\n\nIt's basically:\n- Building the image sets up Alpine with Guix.\n- Run the image (which starts the guix deamon), mounting your `bitcoin` directory f",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-473539212,473539212,
fanquake,2019-03-17T03:44:06Z,"Looks like it's related to the fact that inside `depends/x86_64-pc-linux-gnu/lib` `libexpat.so` & `libfreetype.so` are symlinks?\n\n```bash\ncd depends/x86_64-pc-linux-gnu/lib\nls -l\ntotal 980\n-rwxr-xr-x    1 root     root           982 Mar 16 14:29 libexpat.la\nlrwxrwxrwx    1 root     root            17 Mar 17 03:37 libexpat.so -> libexpat.so.1.6.8\nlrwxrwxrwx    1 root     root       ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-473613411,473613411,
dongcarl,2019-03-18T16:14:06Z,"@fanquake re: https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-473539212\n\nI've tried to recreate your situation but I think I've encountered a different problem than yours. I think they might be related.\n\n<details>\n  <summary>Error log</summary>\n  \n  ```sh\n+ guix environment --manifest=contrib/guix/manifest.scm --container --pure --no-grafts -- sh contrib/guix/build.sh\n",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-473983430,473983430,
fanquake,2019-03-19T02:24:56Z,"@dongcarl Thanks, I've changed how I'm building the Docker image (`COPY`ing the bitcoin source in during the image build, rather than mounting a volume at runtime) and now the `depends` build and Core compilation all complete. A better approach in future might just be to put `git` into the Alpine container, and clone a specific tag.\n\nThe entire build output (45k lines) is available [here](http",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-474173007,474173007,
dongcarl,2019-03-20T14:58:20Z,"@fanquake I'm glad to see that you've got it working!\n\nLet's continue the conversation about capabilities here: https://github.com/fanquake/core-review/issues/5 ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-474869198,474869198,
fanquake,2019-04-03T10:32:15Z,"@dongcarl Could you rebase this on master, as the intermediate commits https://github.com/bitcoin/bitcoin/pull/15277/commits/ad3166641fc1f0b89bfde475bad6d003357471b3 & https://github.com/bitcoin/bitcoin/pull/15277/commits/2c4957e6d0f41fd63a8d4696ecb3cc315d24e4b9 have been merged.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-479433218,479433218,
dongcarl,2019-04-15T16:12:48Z,"Quite a big update this week.\n\n1. I was able to get rid of a hack that required `sudo` on the machine running Guix and which also violated Guix's functional model. Now, the only semi-hacks present are the `patchelf` commands.\n2. I was able to get rid of the annoying (but innocuous) warning messages from setting locale to `C.UTF-8` which is not a thing in Guix containers.\n\nNext steps:\n1",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-483318210,483318210,
fanquake,2019-04-16T04:55:03Z,"@dongcarl Nice work. I've just completed a build with the new changes. Full output is [here](https://gist.github.com/fanquake/7ca29f59520044434b3eaad37da54038). Note I had to `guix pull` beforehand to get the `gcc@8.3.0` packages.\n\n> I was able to get rid of the annoying (but innocuous) warning messages from setting locale to C.UTF-8 which is not a thing in Guix containers.\n\n👍 \n",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-483510698,483510698,
dongcarl,2019-04-16T10:19:04Z,"@fanquake Ah! You're absolutely right. People can be at the same version of Guix I'm at by executing:\n```\nguix pull --commit=12327d74475d4079065a0f8f5d2491e4679fb53e\n```\nWill add to instructions!",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-483600668,483600668,
dongcarl,2019-05-20T03:26:35Z,"Will need more time to describe this new push better, but here's how one can experiment with it:\n\nWith `Guix` installed, pull my fork which has a few patches yet to be upstreamed (isn't it nice that this is so simple?):\n```sh\nguix pull --url=https://github.com/dongcarl/guix.git  \\n          --commit=2a520532d355f07ba3988fd40b2687b0d6c025b8 \\n          --max-jobs=$(nproc)\n```\n\nWhi",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-493827011,493827011,
dongcarl,2019-05-20T15:17:48Z,"Used `-Wl,--dynamic-linker=Foo` trick by @theuni to eliminate all instances of`patchelf`!",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-494031729,494031729,
dongcarl,2019-05-20T15:20:21Z,Also despite what @DrahtBot says I'm not going to rebase until we fix our GLIBC compat issues...,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-494032808,494032808,
fanquake,2019-05-21T05:06:02Z,"@dongcarl I've tried building your latest updates, but am running into the following:\n```bash\ndownloading from https://ci.guix.gnu.org/nar/gzip/6w65nzbc3ah30y5kr4zx9rcgknpjr1f5-nss-certs-3.43...\n nss-certs-3.43  150KiB                                                                                                         50KiB/s 00:01 [###               ]  21.4%Backtrace:\n\ngzip: stdout: ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-494240985,494240985,
dongcarl,2019-05-21T10:51:51Z,@fanquake Looks like a network error downloading from the substitutes server (which serves binaries)... Try the `--fallback` or `--no-substitutes` options.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-494341538,494341538,
fanquake,2019-05-21T11:29:03Z,"@dongcarl No worries. I ended up dropping `nss-certs` from the manifest to get a build running. \n\nThe results & inputs are below:\n```bash\n+ gzip\n+ mkdir -p /dongcarl/output/src\n+ mv -n /dongcarl/output/src/bitcoin-0.18.99.tar.gz /dongcarl/output/src\nbash-4.4# find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n299712eedebb43175ca73e2968a8ea8bda053e403b5ec7274eb3167ea15c53d",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-494351992,494351992,
dongcarl,2019-05-21T11:49:05Z,@fanquake Huh... Mind uploading your `output/` so I can diffoscope?,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-494357613,494357613,
fanquake,2019-05-26T14:46:10Z,"```bash\nguix --version\nguix (GNU Guix) 2a520532d355f07ba3988fd40b2687b0d6c025b8\n```\n\n```bash\ngit log\ncommit 36c85a9d842133b1a7ea33e02f9239673da49caa (HEAD -> 2019-01-guix, origin/2019-01-guix)\n```\n\n```bash\nfind output/ -type f -print0 | sort -z | xargs -r0 sha256sum\naa0d78ada1e6fb8de25960549332a84c74d991bf41f3a058b751c2f54670d728  output/bitcoin-0.18.99-aarch64-linux-gnu-de",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-496006163,496006163,
dongcarl,2019-05-28T14:41:26Z,Work has been picked back up on a Guix package for debian. There's some overlap between Guix and debian developers. See here for more details: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850644,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-496546380,496546380,
dongcarl,2019-05-29T19:14:29Z,"Quick update:\n1. Upstreamed initial riscv64 support to Guix, will be adding support here soon.\n2. Tested the `arm-linux-gnueabihf` binaries that this build process produces on actual hardware (BeagleBone Black). Works well, even `bitcoin-qt` over X forwarding worked. `aarch64` hardware is in the mail (Pine64).",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-497072523,497072523,
dongcarl,2019-05-30T11:50:32Z,"RISCV64 support has landed! Updated instructions are below.\n\n-----\n\nWith `Guix` installed, pull my fork which has a few patches yet to be upstreamed:\n\n```shell\nguix pull --url=https://github.com/dongcarl/guix.git  \\n          --commit=5242e0a5e046e2aaa4da7b0d3756caa78ed6ca1f \\n          --max-jobs=$(nproc)\n```\n\nWhile on this branch @ [985e42d](https://github.com/bitcoin/bit",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-497303718,497303718,
fanquake,2019-05-30T21:42:53Z,"```bash\nguix --version\nguix (GNU Guix) 5242e0a5e046e2aaa4da7b0d3756caa78ed6ca1f\n```\n\n```bash\ngit log\ncommit 985e42d5fa351fb638f871341cb60d845e2f1b9b (HEAD -> 2019-01-guix, origin/2019-01-guix)\n```\n\n```bash\nfind output/ -type f -print0 | sort -z | xargs -r0 sha256sum\nd580457f04a049de6aa853027748b6dedc6b6029718a387f741c32559a790796  output/bitcoin-0.18.99-aarch64-linux-gnu-de",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-497496679,497496679,
dongcarl,2019-05-31T18:24:46Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-497813281,497813281,
laanwj,2019-06-09T14:53:32Z,"> Another observation I made today: the guix build output had\n> \n> ```\n>   NEEDED               libdl.so.2\n> ```\n> \n> for `bitcoind`, `bitcoin-cli`, `bitcoin-tx`, and `test_bitcoin`, while the release versions didn't. However, `bitcoin-qt` had that `NEED` in both the guix build and the release build.\n\nThis is strange. `libdl` shouldn't be needed for any of our executables. It is us",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-500218185,500218185,
dongcarl,2019-06-10T16:47:24Z,"> > Another observation I made today: the guix build output had\n> > ```\n> >   NEEDED               libdl.so.2\n> > ```\n> > \n> > \n> > for `bitcoind`, `bitcoin-cli`, `bitcoin-tx`, and `test_bitcoin`, while the release versions didn't. However, `bitcoin-qt` had that `NEED` in both the guix build and the release build.\n> \n> This is strange. `libdl` shouldn't be needed for any of our exe",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-500490208,500490208,
laanwj,2019-06-12T11:38:15Z,">   @laanwj It seems that my intermediary changes have fixed thi\n\nRight—looks like only `bitcoin-qt` has a dependency on `libdl` now, and the dependency indeed comes through the `QLibrary` loading mechanism:\n```\n$ objdump -d bitcoin-qt |grep dlopen\n00000000001468d0 <dlopen@plt>:\n  1468d0:       ff 25 92 89 11 02       jmpq   *0x2118992(%rip)        # 225f268 <dlopen@GLIBC_2.2.5>\n\n ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-501235235,501235235,
laanwj,2019-06-13T08:04:04Z,"Mildly tested ACK\n\n- installed and built `guix` environment on a debian stretch VM using GNU's `guix-install.sh`\n- built a full set of executables using `contrib/guix/guix-build.sh`. I had some minor issues but was able to resolve them with help in `#bitcoin-builds`\n- (manually) checked build sanity using `readelf` and `nm` for a few platforms, as well as that of the debug symbols\n- test",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-501595987,501595987,
fanquake,2019-06-15T02:56:38Z,"```bash\nguix --version\nguix (GNU Guix) 5242e0a5e046e2aaa4da7b0d3756caa78ed6ca1f\n```\n\n```bash\ngit log\ncommit 87362339977761cbd3b449b22e443ff7f38b0b17 (HEAD -> 2019-01-guix, origin/2019-01-guix)\n```\n\n```bash\nfind output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n96a735f146aed74dd01327408123b38043809d411e3e7c63e796dfb4939ca891  output/bitcoin-0.18.99-aarch64-linux-gnu-de",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-502328918,502328918,
fanquake,2019-06-22T15:59:18Z,"```\nguix --version\nguix (GNU Guix) aedb0cf16e82caea01f82f795e473756067a1165\n```\n\n```\ngit log\ncommit 0be753b04070cc06965dff13118beabe46a1097a (HEAD -> 2019-01-guix, origin/2019-01-guix)\n```\n\n```\nfind output/ -type f -print0 | sort -z | xargs -r0 sha256sum\nf70ac4e25b66dc30cadaaf9989c62051bc23ab9198b2564ad70d3b768dd6d613  output/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz\",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504677354,504677354,
dongcarl,2019-06-22T21:20:12Z,"For both\n\n```\n$ uname -rvmo\n4.9.0-9-amd64 #1 SMP Debian 4.9.168-1+deb9u3 (2019-06-16) x86_64 GNU/Linux\n```\nand \n```\n$ uname -rvmo\n5.1.9-arch1-1-ARCH #1 SMP PREEMPT Tue Jun 11 16:18:09 UTC 2019 x86_64 GNU/Linux\n```\n\nI'm getting:\n\n```sh\n$ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\ned24d2574d9b27cf9434cb272f8f06170e96b10fad4d4fa46b4ef5de0a18f57a  outp",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504699056,504699056,
practicalswift,2019-06-22T21:37:15Z,"@dongcarl Thanks for your excellent work here!\n\nWhat is the status of the upstreaming of the guix changes in your `dongcarl/guix`? What changes are required and have they been submitted? :-)",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504700096,504700096,
dongcarl,2019-06-22T21:48:56Z,"@practicalswift \n\n> Thanks for your excellent work here!\n\n:blush:\n\n> What is the status of the upstreaming of the guix changes in your `dongcarl/guix`?  What changes are required and have they been submitted? :-)\n\nThere are only 2 commits that aren't upstream yet: https://github.com/dongcarl/guix/commit/878e7a4dc8483b6f1796e847e26e82ced41c7cf7 and https://github.com/dongcarl/guix/c",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504700744,504700744,
practicalswift,2019-06-23T07:02:24Z,"FWIW: I'm getting the same checksum for the `i686-linux` binaries as @dongcarl, but `guix-build.sh` fails before the other platforms have been built.\n\n```\n$ guix pull --url=https://github.com/dongcarl/guix.git --commit=aedb0cf16e82caea01f82f795e473756067a1165 --max-jobs=$(nproc)\n$ guix --version | grep ^guix\nguix (GNU Guix) aedb0cf16e82caea01f82f795e473756067a1165\n$ git clone https://g",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504725955,504725955,
fanquake,2019-06-23T08:09:25Z,"@dongcarl You can disregard my previous post, I must have miss-built or tainted my build environment somehow..\n\nI've setup a new environment from scratch, using a slightly newer version of my [alpine-guix dockerfile](https://github.com/fanquake/core-review/tree/master/guix), rebuilt everything, and all my hashes match with yours 🚀 .\n\nAs you mentioned, after a little cleaning up, upstreamin",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504729878,504729878,
practicalswift,2019-06-23T17:41:40Z,"I did another run and obtained the following results:\n\nPlease note that I'm getting the same hashes as @dongcarl and @fanquake for the non-debug files.\n\n**But not for the debug files.**\n\n```\n$ guix pull --url=https://github.com/dongcarl/guix.git --commit=aedb0cf16e82caea01f82f795e473756067a1165 --max-jobs=$(nproc)\n$ guix --version | grep ^guix\nguix (GNU Guix) aedb0cf16e82caea01f8",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504772400,504772400,
practicalswift,2019-06-23T18:07:01Z,@dongcarl Could you fix the `shellcheck` issues that Travis complains about? Since these shell scripts will be very important for the project I suggest addressing all `shellcheck` warnings emitted by the latest version of `shellcheck`: not only the checks enforced in Travis.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504774207,504774207,
practicalswift,2019-06-23T20:53:21Z,"Did another `guix-build.sh` and received hashes matching @dongcarl and @fanquake also for the debug builds:\n\n```\n$ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\ned24d2574d9b27cf9434cb272f8f06170e96b10fad4d4fa46b4ef5de0a18f57a  output/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz\ncfb6889f0588492d112cc0bc2a41ef1ccdfbeea71d8405b935af708f5a643b6b  output/bitcoin-0.18.99-aarch",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504786100,504786100,
fanquake,2019-06-23T21:31:02Z,"@TheCharlatan mentioned in the #bitcoin-builds channel that they are also seeing hashes that match mine and Carl’s.\n\n@practicalswift Thanks for following up. Where are you seeing the build output from Marco that you keep comparing against?",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504788918,504788918,
practicalswift,2019-06-23T21:36:24Z,"@practicalswift Sorry, I meant your hashes. Now corrected.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-504789276,504789276,
practicalswift,2019-06-25T04:23:31Z,"FWIW:\n\nAfter running thirteen additional Guix builds using the following:\n\n```\n$ guix pull --url=https://github.com/dongcarl/guix.git --commit=aedb0cf16e82caea01f82f795e473756067a1165 --max-jobs=$(nproc)\n$ guix --version | grep ^guix\nguix (GNU Guix) aedb0cf16e82caea01f82f795e473756067a1165\n$ git clone https://github.com/bitcoin/bitcoin bitcoin-guix\n$ cd bitcoin-guix\n$ git fetch",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-505276568,505276568,
jamesob,2019-06-26T14:27:43Z,Will test this when rebased.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-505900119,505900119,
dongcarl,2019-06-26T16:09:46Z,"Making a few improvements today, will push along with rebase.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-505942251,505942251,
practicalswift,2019-06-27T22:58:57Z,"The results are stable between runs (as expected) -- now at 31 identical builds:\n\n```\n     31 1273da1f073b8beb0169e5c12557c85944784a39e35b3252c754ea3679f41ee4  output/bitcoin-0.18.99-i686-linux-gnu.tar.gz\n     31 2e60551ef3e4cac1d2f671984da2d2c230a3e7183983e08de052cac76c983032  output/bitcoin-0.18.99-arm-linux-gnueabihf-debug.tar.gz\n     31 6212a7c3456bd4fda1c590202018b1ce232928509a4f139",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-506540600,506540600,
hebasto,2019-06-30T15:50:58Z,"Approach ACK e8dd4da0b287e0fe252c99bb4a7cb26c2e947b71\n\nTrying to test:\n```\n$ guix --version | grep guix\nguix (GNU Guix) bf473f0ca0b218e9a93b00234a8f25ba015b8bd3\n$ git rev-parse HEAD\nf7c57d2795ddeccaf16acf069f0bc2db43fa5ba1\n$ ./contrib/guix/guix-build.sh > /dev/null \n++ nproc\n+ make -C depends -j4 download\n+ for host in ${HOSTS=i686-linux-gnu x86_64-linux-gnu arm-linux-gnueabi",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507046880,507046880,
dongcarl,2019-06-30T22:54:05Z,"Hey all! Lots of updates...\n\nOverview\n--------\n\n0. Rebased (and continually fixing Gitian failures along the way).\n1. Reproducibility across distros and kernels (tested on Alpine, Fedora, Arch, Debian, and Ubuntu).\n2. Fixed a corner case for those who were building with bitcoin cloned in a directory _strictly_ under `/bitcoin` (this corner case doesn't trigger for those who cloned bi",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507074002,507074002,
fanquake,2019-07-01T06:32:20Z,"Nice work. Looks like everything is matching.\n\n> so that we have reproducibility not only across distros, kernels, and filesystems, but also across time.\n\n🕔🚀🕤\n\n>  so those using fanquake's Docker images are fine).\n\nThe images and other Guix stuff is here: https://github.com/fanquake/core-review/tree/master/guix.\n\n```bash\nbash-5.0# guix describe\nGeneration 1	Jul 01 2019 01:0",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507133979,507133979,
practicalswift,2019-07-01T09:25:25Z,"Excellent! Thanks for yet another great update @dongcarl: very happy to see the work you're doing 💖\n\nAs expected I'm getting matching results also when using the updated version:\n\n```\n[Mon Jul  1 06:18:50 UTC 2019] $ guix --version | grep ^guix\nguix (GNU Guix) 24e707111f34ddf3342517932830264177df40b4\n[Mon Jul  1 06:19:36 UTC 2019] $ git rev-parse HEAD\ne8dd4da0b287e0fe252c99bb4a7cb2",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507188466,507188466,
dongcarl,2019-07-01T15:29:06Z,@practicalswift Huh... That's got me thinking... Maybe we can use the venerable [reprotest](https://salsa.debian.org/reproducible-builds/reprotest) to find cases of variability...,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507313271,507313271,
hebasto,2019-07-02T08:39:39Z,"My results are:\n```\n$ guix --version | grep guix\nguix (GNU Guix) 24e707111f34ddf3342517932830264177df40b4\n$ git rev-parse HEAD\ne8dd4da0b287e0fe252c99bb4a7cb26c2e947b71\n$ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n22353b4a9532425c249632936896fb43972bb098e427857dae1df3b5206ddcac  output/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz\nd762ed4228d7ccecb1b361c0f9f9f2458",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507579909,507579909,
practicalswift,2019-07-02T09:03:19Z,"@hebasto Very interesting and thanks for reporting!\n\nDo you have the generated files (`bitcoin-0.18.99.tar.gz`, `output/bitcoin-0.18.99-i686-linux-gnu-debug.tar.gz` and `bitcoin-0.18.99-i686-linux-gnu.tar.gz `) around? If so please make a backup copy of them :-)\n\nIt would be very interested to see the `diffoscope` output between the files listed above with the ""unexpected"" hashes and the c",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507588421,507588421,
hebasto,2019-07-02T12:28:24Z,"Another try:\n```\n$ git rev-parse HEAD\ne8dd4da0b287e0fe252c99bb4a7cb26c2e947b71\n$ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n22353b4a9532425c249632936896fb43972bb098e427857dae1df3b5206ddcac  output/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz\nd762ed4228d7ccecb1b361c0f9f9f2458d93f0f1fdc8ef402cf9c5d5f8f28055  output/bitcoin-0.18.99-aarch64-linux-gnu.tar.gz\n3af24d40cd",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507655011,507655011,
dongcarl,2019-07-02T12:36:18Z,"@hebasto Huh, it seems from your diffoscope that we're picking up `__pycache__` directories... I've seen this before with other builds people have submitted over #bitcoin-builds IRC. Will investigate!",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507657693,507657693,
practicalswift,2019-07-02T13:27:25Z,@hebasto Very good finding with the `__pycache__` directories! Thanks a lot for sharing. Does `diffoscope` on the `i686`-`tar.gz`:s reveal the source of non-determinism also for those?,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507676510,507676510,
hebasto,2019-07-02T13:42:51Z,"@practicalswift \n> Does `diffoscope` on the `i686`-`tar.gz`:s reveal the source of non-determinism also for those?\n\nIt eats all resources (RAM and free space on SSD) of my home machine ((",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507682770,507682770,
hebasto,2019-07-02T14:54:56Z,"For my failed build following **nothingmuch** on #bitcoin-builds IRC:\n```\n$ tar -tf bitcoin-0.18.99-i686-linux-gnu-debug.tar.gz | grep .dbg.dbg\nbitcoin-0.18.99/bin/bitcoin-cli.dbg.dbg\nbitcoin-0.18.99/bin/bitcoin-qt.dbg.dbg\nbitcoin-0.18.99/bin/bitcoin-tx.dbg.dbg\nbitcoin-0.18.99/bin/bitcoin-wallet.dbg.dbg\nbitcoin-0.18.99/bin/bitcoind.dbg.dbg\nbitcoin-0.18.99/bin/test_bitcoin.dbg.dbg\",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507713638,507713638,
nothingmuch,2019-07-02T15:09:39Z,"I've seen both `.dbg.dbg` binaries and `.pyc` files in the source tarball files before, I'm pretty confident (but not 100% certain) that in my case it was due to forgetting to `git clean` before retrying after a failed build, which sounds consistent @hebasto's disk space error.\n\nFWIW, the `.dbg.dbg` files are created from `.dbg` files when those already exist, in the following commands:\nhttp",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507719783,507719783,
practicalswift,2019-07-02T15:45:03Z,Is there a reason to why we just don't start with clean build output directories when commencing a new Guix build? (think `rm` + `mkdir` instead of `mkdir -p` at the start of build: removing all leftovers from previous Guix builds),https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507734098,507734098,
nothingmuch,2019-07-02T16:33:49Z,"That sounds appropriate to me. Since the source tree is built from the tarball (as opposed to the working directory itself) it might also make sense to pass `--expose` (which is read only) to `guix environment` instead of `--share`, and only use `--share` for the depends workdir and the outputs.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507752968,507752968,
fanquake,2019-07-05T01:26:29Z,Carl mentioned that he has some WIP Guix documention available here: https://gist.github.com/dongcarl/a9f86bb11d7b55e07b592db807430a64.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-508600928,508600928,
practicalswift,2019-07-05T15:15:49Z,"FWIW, now at 28 identical builds -- results seem stable (as expected):\n\n```\n     28 0dff397103b52471c4c483207b88102ddea79fdcb75c7ff01c2d10a1bff71aa9  output/bitcoin-0.18.99-i686-linux-gnu.tar.gz\n     28 11b9db3e77f71a4d99c5f33a6a2e985ca817d16712a692c612ba5006f0ddf1a7  output/bitcoin-0.18.99-x86_64-linux-gnu-debug.tar.gz\n     28 22353b4a9532425c249632936896fb43972bb098e427857dae1df3b5206d",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-508790714,508790714,
practicalswift,2019-07-06T06:48:47Z,"When interrupting the Guix build and then resuming I get unexpected and previously unseen hashes for some of the builds:\n\n```\n      5 0dff397103b52471c4c483207b88102ddea79fdcb75c7ff01c2d10a1bff71aa9  output/bitcoin-0.18.99-i686-linux-gnu.tar.gz\n      4 11b9db3e77f71a4d99c5f33a6a2e985ca817d16712a692c612ba5006f0ddf1a7  output/bitcoin-0.18.99-x86_64-linux-gnu-debug.tar.gz\n      4 22353b4a95",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-508902415,508902415,
dongcarl,2019-07-06T16:02:53Z,"@practicalswift That makes sense. I'm the middle of improving my script right now, and will include that as part of the changes!",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-508936675,508936675,
practicalswift,2019-07-08T09:19:47Z,"@dongcarl \n\nAnother suggestion: what about making the writing to the final output files atomic so that the files `${OUTDIR}/${DISTNAME}-${HOST}.tar.gz` are only written to if we are certain that everything went well?\n\nThat is instead of the current:\n\n```\n        find ""${DISTNAME}"" -not -name ""*.dbg"" -print0 \\n            | sort --zero-terminated \\n            | tar --create --no-",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-509148470,509148470,
dongcarl,2019-07-08T15:00:00Z,"@practicalswift I'll try testing, but for the no space left on device case, wouldn't `pipefail` make sure that the exit code is non-zero?\n\nMy current solution is just to fail early and fail hard: Non-empty `$OUTDIR`? Exit!",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-509262018,509262018,
laanwj,2019-07-08T15:37:13Z,">  @practicalswift I'll try testing, but for the no space left on device case, wouldn't pipefail make sure that the exit code is non-zero?\n\nIn the case of gitian this condition was accidentally ignored because the exit code didn't 'bubble up' to the top level script (leading to #15549). If something similar could happen here, it makes sense to take precautions, given how tiring it is to dive i",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-509277061,509277061,
dongcarl,2019-07-09T15:53:59Z,Working on a few improvements to readability and usability... Next push will be either the ultimate one or the penultimate one. :crossed_fingers: ,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-509700813,509700813,
dongcarl,2019-07-12T03:53:08Z,"There are many more improvements that can be made, but I believe as a subdirectory of `contrib`, this PR is ready.\n\nHighlights of this recent push:\n- Added a README\n- Fully commented all shell scripts\n- Shell scripts pass shellcheck\n- Simplified and eliminated 3 files\n- `package`-based Guix manifest instead of specification based\n- More robust shell scripts that traps Ctrl-C's to g",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-510734747,510734747,
fanquake,2019-07-12T07:33:37Z,"Nice. New build (`Docker`) hashes below. Will review the docs, but post nits & any fix-ups there, this should be pretty much be merge ready.\n\n```bash\nbash-5.0# env PATH=""/root/.config/guix/current/bin${PATH:+:}$PATH"" guix describe\nGeneration 2	Jul 12 2019 05:09:23	(current)\n  guix 82c77e5\n    repository URL: https://github.com/dongcarl/guix.git\n    branch: 2019-05-bitcoin-staging\n ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-510781951,510781951,
dongcarl,2019-07-12T16:32:32Z,"@MarcoFalke\n\n> ACK, code looks clean and readable.\n\nThanks for taking a look Marco! I'm glad it was readable!\n\n> If depends has already been built outside of guix, it will fail to produce deterministic builds?\n\nThis isn't supported at the moment, but can be added to the list of possible improvements!\n\n> If depends has already been built inside of guix, will it be cached/kept fo",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-510950852,510950852,
MarcoFalke,2019-07-12T17:07:48Z,Thanks for the replies. ACK 751549b52a9a4cd27389d807ae67f02bbb39cd7f,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-510961846,510961846,
laanwj,2019-07-12T17:24:25Z,ACK 751549b52a9a4cd27389d807ae67f02bbb39cd7f,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-510967034,510967034,
BrannonKing,2019-07-12T20:42:45Z,"For compilation of LBRY (a bitcoin derivative), I've been using the ""depends"" stuff to handle the cross-compilation (linux, windows, darwin). I've got a Docker image that has the necessary build dependencies, which single image runs all three cross-platform builds. It has been working quite well (after a few tweaks to the depends stuff). In particular, I changed it to use the system Clang instead ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-511026840,511026840,
dongcarl,2019-07-12T21:00:47Z,"@BrannonKing\n\n> For compilation of LBRY (a bitcoin derivative), I've been using the ""depends"" stuff to handle the cross-compilation (linux, windows, darwin). I've got a Docker image that has the necessary build dependencies, which single image runs all three cross-platform builds. It has been working quite well (after a few tweaks to the depends stuff).\n\nGood to know ""depends"" works for ot",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-511031889,511031889,
hebasto,2019-07-12T21:08:32Z,"```\n$ git rev-parse HEAD\n751549b52a9a4cd27389d807ae67f02bbb39cd7f\n$ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n66dfb1fbf949128793dac184c68dee407ae56d3cc4d4f0f92b1df2146267446e  output/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz\ne5f46d3548f5cb456496ad9d1c560443143b879bd92f946a286985eace99add1  output/bitcoin-0.18.99-aarch64-linux-gnu.tar.gz\n96d5f690350c5eeb27fa4f7ed",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-511034012,511034012,
fanquake,2019-07-13T04:21:38Z,"Ran a final build. Seeing hashes that match @hebasto.\n\n```bash\nbash-5.0# env PATH=""/root/.config/guix/current/bin${PATH:+:}$PATH"" guix describe\nGeneration 2	Jul 12 2019 05:09:23	(current)\n  guix 82c77e5\n    repository URL: https://github.com/dongcarl/guix.git\n    branch: 2019-05-bitcoin-staging\n    commit: 82c77e52b8b46e0a3aad2cb12307c2e30547deec\n```\n\n```bash\nbash-5.0# git ",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-511086952,511086952,
practicalswift,2019-07-22T10:38:11Z,"Strangely I'm not getting the same hashes as @fanquake and @hebasto when running:\n\n```\n$ guix pull --url=https://github.com/dongcarl/guix.git --commit=82c77e52b8b46e0a3aad2cb12307c2e30547deec --max-jobs=12\nguile: warning: failed to install locale\nUpdating channel 'guix' from Git repository at 'https://github.com/dongcarl/guix.git'...\nBuilding from this channel:\n  guix      https://gi",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-513738542,513738542,
practicalswift,2019-07-22T12:24:24Z,"Sorry, I missed passing `--branch=2019-05-bitcoin-staging` to `guix pull`.\n\nI'll re-try building.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-513769216,513769216,
practicalswift,2019-07-22T23:46:11Z,"FWIW, specifying `--branch=2019-05-bitcoin-staging` did not solve the issue.\n\nI'm still not getting the hashes observed by @fanquake and @hebasto:\n\n```\n$ guix pull --url=https://github.com/dongcarl/guix.git \\n    --commit=82c77e52b8b46e0a3aad2cb12307c2e30547deec \\n    --branch=2019-05-bitcoin-staging --max-jobs=12\n…\n$ guix describe\nGeneration 8    Jul 22 2019 12:22:36    (curre",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-513996130,513996130,
dongcarl,2019-07-23T19:24:17Z,"@practicalswift ~~Oh! That's interesting... The files are a little big, but could you at least send me `output/src/bitcoin-0.18.99.tar.gz` and maybe one of the other tarballs?~~\n\nA local build shows that I'm matching you... So perhaps either @fanquake or @hebasto can upload their tarballs?",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-514348625,514348625,
practicalswift,2019-07-31T07:53:29Z,"Did we arrive at any conclusion regarding the expected hashes?\n\nFWIW I'm consistently getting:\n\n```\n6e26f21c48ea0acd564c5779be8ba7325f96616eaafa573c79669fc81033867b  output/bitcoin-0.18.99-aarch64-linux-gnu-debug.tar.gz\nb3b7700eaca5eb032187e9fab6e057c9afb27a0f69ac22568fbf4c3c9885ad01  output/bitcoin-0.18.99-aarch64-linux-gnu.tar.gz\nbaa4f0461ed505e4993f832452659828a65a2da4247e40f3992e",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-516739691,516739691,
hebasto,2019-08-03T13:30:38Z,"@dongcarl @practicalswift \n> A local build shows that I'm matching you... So perhaps either @fanquake or @hebasto can upload their tarballs?\n\n[bitcoin-0.18.99.tar.gz](https://github.com/bitcoin/bitcoin/files/3463871/bitcoin-0.18.99.tar.gz)\n\nWhich way to upload up to 300 MB files is convenient?\n\n\n\n\n\n\n\n\n\n",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-517924892,517924892,
hebasto,2019-08-03T15:02:08Z,"Strange things happened. Just made another build:\n```\n$ guix --version\nguix (GNU Guix) 82c77e52b8b46e0a3aad2cb12307c2e30547deec\nCopyright (C) 2019 the Guix authors\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n$ guix describe\nGen",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-517931003,517931003,
practicalswift,2019-08-03T18:37:45Z,"@hebasto Thanks! Let me know if you see any non-matching hashes.\n\n@fanquake What hashes are you getting?",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-517945827,517945827,
fanquake,2019-08-04T06:19:31Z,"Have just done another build from scratch. Seeing hashes that seem to match everyone else.\n\n```bash\nenv PATH=""/root/.config/guix/current/bin${PATH:+:}$PATH"" guix describe\nGeneration 1	Aug 04 2019 01:17:09	(current)\n  guix 82c77e5\n    repository URL: https://github.com/dongcarl/guix.git\n    branch: 2019-05-bitcoin-staging\n    commit: 82c77e52b8b46e0a3aad2cb12307c2e30547deec\n```\n",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-517977400,517977400,
practicalswift,2019-08-04T13:32:26Z,"@fanquake Thanks!\n\nGood to hear that we're all getting the same hashes. I wonder what the root cause of the previously seen discrepancy was.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-518004129,518004129,
hebasto,2019-08-04T13:40:12Z,"@practicalswift \n> I wonder what the root cause of the previously seen discrepancy was.\n\nIt seems that despite `git rev-parse HEAD` returned `\n751549b52a9a4cd27389d807ae67f02bbb39cd7f` the actual build was on top of another commit. See my previous tarball https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-517924892.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-518004656,518004656,
dongcarl,2019-08-05T17:13:05Z,"Very odd, I'm thinking it might just be a discrepancy arising from the Dockerfile COPY? Not too big a deal though, if we see this crop up again we'll be able to better document what happened exactly and how to avoid.",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-518319859,518319859,
practicalswift,2019-08-06T08:04:44Z,"@dongcarl FWIW I've always built outside of Docker. @hebasto and @fanquake, did you build inside Docker when you got the unexpected hashes?",https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-518558077,518558077,
hebasto,2019-08-06T15:58:24Z,@dongcarl @practicalswift  I do not use Docker.,https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-518732934,518732934,
MarcoFalke,2019-01-28T18:23:24Z,nit: Don't we use `$(PYTHON)` for those?,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r251535210,251535210,src/Makefile.am
dongcarl,2019-01-28T18:36:38Z,Good catch!,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r251540207,251540207,src/Makefile.am
dongcarl,2019-01-30T15:21:43Z,"```suggestion\n[ -e /usr/bin/file ] || ln -s ""$(command -v file)"" /usr/bin/file\n```",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r252301790,252301790,contrib/guix/build.sh
practicalswift,2019-01-31T09:16:46Z,Should specify which shell is to be used with shebang line?,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r252586152,252586152,contrib/guix/build.sh
wtogami,2019-02-07T19:41:46Z,"Not necessarily. You can limit your shell syntax to the least common denominator of posix syntax supported by the most minimal shells (busybox, dash, etc.) Specify a specific other shell if you want convenience of syntax features of that particular shell?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r254839834,254839834,contrib/guix/build.sh
dongcarl,2019-02-07T19:46:20Z,"@practicalswift Didn't see this... But yes @wtogami is right, I try to conform to the common denominator of POSIX sh for portability's sake.",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r254841526,254841526,contrib/guix/build.sh
wtogami,2019-02-07T19:50:03Z,curl shouldn't be necessary in the container if depends is pre-populated. May require editing the depends system?,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r254842872,254842872,contrib/guix/manifest.scm
wtogami,2019-02-07T23:06:19Z,"```\n	libstdc++.so.6 => /gnu/store/4sqps8dczv3g7rwbdibfz6rf5jlk7w90-gcc-5.5.0-lib/lib/libstdc++.so.6 (0x00007fb7ed87c000)\n```\n\nYour ldd output indicates that it isn't static linking libstdc++.",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r254902970,254902970,contrib/guix/build.sh
fanquake,2019-02-15T02:36:16Z,Can you add `export LC_ALL=C` to make [Travis happy](https://travis-ci.org/bitcoin/bitcoin/jobs/488536092#L257).,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r257087753,257087753,contrib/guix/build.sh
fanquake,2019-02-15T02:45:07Z,Looks like the additions of [`--no-same-owner`](https://linux.die.net/man/1/tar) to `tar` commands inside depends is extensive.,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r257089187,257089187,depends/funcs.mk
dongcarl,2019-02-18T21:47:18Z,"@fanquake Yup, should I make it a separate PR?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r257834447,257834447,depends/funcs.mk
MarcoFalke,2019-02-27T21:12:40Z,"Hmm, why would we need this?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r260945997,260945997,contrib/guix/manifest.scm
fanquake,2019-03-13T02:26:16Z,Resolving as this has been split in to #15581.,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r264954489,264954489,depends/funcs.mk
MarcoFalke,2019-03-18T15:40:38Z,@dongcarl ^ ?,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r266504643,266504643,contrib/guix/build.sh
MarcoFalke,2019-03-18T15:49:16Z,"```\nMissing expected shebang ""#!/usr/bin/env bash"" or ""#!/bin/sh"" in contrib/guix/guix-build.sh",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r266509245,266509245,contrib/guix/guix-build.sh
laanwj,2019-06-09T09:51:56Z,"Do we want this to be ""in general"" or a hard rule? Are there exceptions thinkable?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r291832301,291832301,depends/packages.md
laanwj,2019-06-09T14:49:34Z,"In #16141, `TAR_OPTIONS` has been removed from the gitian descriptor. Do we want to do the same here?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r291839202,291839202,contrib/guix/build.sh
laanwj,2019-06-09T14:50:25Z,"as guix is basically a system for deterministic builds, I'm surprised our own faketime hack is still needed !",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r291839226,291839226,contrib/guix/build.sh
fanquake,2019-06-09T19:44:59Z,I think @theuni mentioned that some of these hacks may be able to be dropped.,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r291847918,291847918,contrib/guix/build.sh
dongcarl,2019-06-10T16:55:04Z,"Hmmm, I should rebase as this is already merged. But I can't think of any exceptions off the top of my head right now. I thought of the phrasing ""in general"" as in: don't include libtool archives unless it is absolutely necessary. Perhaps next time I touch the file I'll rephrase it that way.",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r292095981,292095981,depends/packages.md
dongcarl,2019-06-10T17:07:22Z,"It seems that change breaks a few things... I've made a few cleanups to how we archive in this script that can be cleanly backported to Gitian, so I'll go take a look and fix things up.",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r292100637,292100637,contrib/guix/build.sh
dongcarl,2019-06-10T17:10:41Z,"Ah... So Guix's normal package build system would set `SOURCE_DATE_EPOCH` and expect packages to follow that and submit patches upstream if they don't (because faketime hacking is a little ugly in the end). However, we are only using Guix's `environment` functionality, which doesn't assume you want to do this. Perhaps it'd be worth setting `SOURCE_DATE_EPOCH` at the start of the script and see wha",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r292101820,292101820,contrib/guix/build.sh
laanwj,2019-06-11T14:58:56Z,"OK, agree that this is something that could be done in a future PR, I was just curious",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r292502942,292502942,contrib/guix/build.sh
laanwj,2019-06-12T05:36:59Z,`     --max-jobs=$(nproc) \` ?,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r292752507,292752507,contrib/guix/guix-build.sh
MarcoFalke,2019-06-25T21:01:21Z,"Would be nice to do a rebase, so that changes already merged stop showing up here, no?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r297391866,297391866,depends/packages/xtrans.mk
fanquake,2019-06-26T04:02:33Z,"That's the plan, Carl has just been afk for the past few days afaik. See discussion in [#bitcoin-builds](http://gnusha.org/bitcoin-builds/2019-06-23.log).\n> 00:49 < dongcarl> I'm gunna clean up, upstream, document, then we can do last round of hashes!",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r297476458,297476458,depends/packages/xtrans.mk
hebasto,2019-06-30T16:02:54Z,See my https://github.com/bitcoin/bitcoin/pull/15277#issuecomment-507046880 ,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r298840273,298840273,contrib/guix/guix-build.sh
dongcarl,2019-07-01T04:53:11Z,"Hey @hebasto! I think you need a:\n```\nguix pull --url=https://github.com/dongcarl/guix.git \\n          --branch=2019-05-bitcoin-staging\n```",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r298880610,298880610,contrib/guix/guix-build.sh
MarcoFalke,2019-07-12T11:34:41Z,"```suggestion\n    # Run the build script 'contrib/guix/libexec/build.sh' in the build container\n```",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302943573,302943573,contrib/guix/guix-build.sh
MarcoFalke,2019-07-12T11:35:09Z,"```suggestion\n- 24GB of free disk space on the partition that the Bitcoin Core git repository resides in\n```",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302943702,302943702,contrib/guix/README.md
MarcoFalke,2019-07-12T11:53:12Z,"Could this be called `bitcoin-core` for clarity?\n\n```suggestion\n(define-module (bitcoin-core)\n```",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302948612,302948612,contrib/guix/manifest.scm
MarcoFalke,2019-07-12T11:58:46Z,"This seems to default to the ""current python 3.x"" version (https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/python.scm?id=v1.0.1-828-gf434664cc0#n365)\n\nWe had issues in the past where dictionary keys were sorted differently in different versions of python, so I'd prefer if the versions were somehow pinned. (Same goes for the other packages in this scm)",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302950159,302950159,contrib/guix/manifest.scm
MarcoFalke,2019-07-12T12:02:15Z,nit: Is this used somewhere?,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302951180,302951180,contrib/guix/manifest.scm
MarcoFalke,2019-07-12T12:04:36Z,"Would be nice to explain why three different versions of gcc are used. Why is it not possible to use just one? Maybe the most popular version of gcc, which might be the one in the latest Ubuntu LTS release (we also use that version for gitian builds)",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302951870,302951870,contrib/guix/manifest.scm
MarcoFalke,2019-07-12T12:06:03Z,"Is this depends change supposed to be in the ""guix"" commit?",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r302952265,302952265,depends/packages/qt.mk
dongcarl,2019-07-12T15:47:49Z,Fixed in cd3e947f50db7cfe05c05b368c25742193729a62,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303042514,303042514,contrib/guix/guix-build.sh
dongcarl,2019-07-12T15:47:54Z,Fixed in cd3e947f50db7cfe05c05b368c25742193729a62,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303042566,303042566,contrib/guix/README.md
dongcarl,2019-07-12T15:48:17Z,Fixed in cd3e947f50db7cfe05c05b368c25742193729a62,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303042753,303042753,contrib/guix/manifest.scm
dongcarl,2019-07-12T15:48:30Z,Fixed in cd3e947f50db7cfe05c05b368c25742193729a62,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303042840,303042840,contrib/guix/manifest.scm
dongcarl,2019-07-12T15:48:39Z,Clarified in cd3e947f50db7cfe05c05b368c25742193729a62,https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303042905,303042905,contrib/guix/manifest.scm
dongcarl,2019-07-12T15:49:39Z,"Fixed in cd3e947f50db7cfe05c05b368c25742193729a62\n\nAlso, because we now do `guix pull` with a commit hash instead of a branch, that python version will never change.",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303043362,303043362,contrib/guix/manifest.scm
dongcarl,2019-07-12T15:50:39Z,"The `CROSS_LIBRARY_PATH` environment variable is Guix-specific, I'm patching it in a way that doesn't break for non-Guix (notice the `?`).",https://github.com/bitcoin/bitcoin/pull/15277#discussion_r303043798,303043798,depends/packages/qt.mk
