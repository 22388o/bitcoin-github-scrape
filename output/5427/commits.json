[
  {
    "sha": "4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWI5ZWFiZTRhYTJjN2ZlZTJlZjZmZDZjYTI2NDUwNDIwODIzM2I1",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-12-04T21:09:58Z"
      },
      "committer": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-12-04T21:09:58Z"
      },
      "message": "Port of walletbackup.sh to Python.",
      "tree": {
        "sha": "fe3944764dc7e12e2c7585bb5fafee74331e4a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe3944764dc7e12e2c7585bb5fafee74331e4a11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7026cbd6db0432e27dd3505fa0d0a167fd319db2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7026cbd6db0432e27dd3505fa0d0a167fd319db2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7026cbd6db0432e27dd3505fa0d0a167fd319db2"
      }
    ],
    "stats": {
      "total": 495,
      "additions": 198,
      "deletions": 297
    },
    "files": [
      {
        "sha": "85745c75cae651a3cff05a67933b29b8258a6fe4",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "added",
        "additions": 198,
        "deletions": 0,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
        "patch": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Exercise the wallet backup code.  Ported from walletbackup.sh.  \n+#\n+#\n+# Test case is:\n+# 4 nodes. 1 2 and 3 send transactions between each other,\n+# fourth node is a miner.\n+# 1 2 3 each mine a block to start, then\n+# Miner creates 100 blocks so 1 2 3 each have 50 mature\n+# coins to spend.\n+# Then 5 iterations of 1/2/3 sending coins amongst\n+# themselves to get transactions in the wallets,\n+# and the miner mining one block.\n+#\n+# Wallets are backed up using dumpwallet/backupwallet.\n+# Then 5 more iterations of transactions and mining a block.\n+#\n+# Miner then generates 101 more blocks, so any\n+# transaction fees paid mature.\n+#\n+# Sanity check:\n+#   Sum(1,2,3,4 balances) == 114*50\n+#\n+# 1/2/3 are shutdown, and their wallets erased.\n+# Then restore using wallet.dat backup. And\n+# confirm 1/2/3/4 balances are same as before.\n+#\n+# Shutdown again, restore using importwallet,\n+# and confirm again balances are correct.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+from random import randint\n+\n+class WalletBackupTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    # This mirrors how the network was setup in the bash test\n+    def setup_network(self, split=False):\n+        # nodes 1, 2,3 are spenders, let's give them a keypool=100\n+        extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n+        self.nodes = start_nodes(4, self.options.tmpdir, extra_args)\n+        connect_nodes(self.nodes[0], 3)\n+        connect_nodes(self.nodes[1], 3)\n+        connect_nodes(self.nodes[2], 3)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def one_send(self, from_node, to_address): \n+        if (randint(1,2) == 1): \n+            amount = Decimal(randint(1,10)) / Decimal(10)\n+            self.nodes[from_node].sendtoaddress(to_address, amount)\n+\n+    def do_one_round(self):\n+        a0 = self.nodes[0].getnewaddress()\n+        a1 = self.nodes[1].getnewaddress()\n+        a2 = self.nodes[2].getnewaddress()\n+\n+        self.one_send(0, a1)\n+        self.one_send(0, a2)\n+        self.one_send(1, a0)\n+        self.one_send(1, a2)\n+        self.one_send(2, a0)\n+        self.one_send(2, a1)\n+\n+        # Have the miner (node3) mine a block.\n+        # Must sync mempools before mining.\n+        sync_mempools(self.nodes)\n+        self.nodes[3].setgenerate(True, 1)\n+\n+    # As above, this mirrors the original bash test.\n+    def start_three(self): \n+        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[1] = start_node(1, self.options.tmpdir)\n+        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        connect_nodes(self.nodes[0], 3)\n+        connect_nodes(self.nodes[1], 3)\n+        connect_nodes(self.nodes[2], 3)\n+        connect_nodes(self.nodes[2], 0)\n+\n+    def stop_three(self): \n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 1)\n+        stop_node(self.nodes[2], 2)\n+\n+    def erase_three(self): \n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+\n+    def run_test (self):\n+        print \"Generating initial blockchain\"\n+        self.nodes[0].setgenerate(True, 1)\n+        sync_blocks(self.nodes)\n+        self.nodes[1].setgenerate(True, 1)\n+        sync_blocks(self.nodes)\n+        self.nodes[2].setgenerate(True, 1)\n+        sync_blocks(self.nodes)\n+        self.nodes[3].setgenerate(True, 100)\n+        sync_blocks(self.nodes)\n+\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        assert_equal(self.nodes[1].getbalance(), 50)\n+        assert_equal(self.nodes[2].getbalance(), 50)\n+        assert_equal(self.nodes[3].getbalance(), 0)\n+\n+        print \"Creating transactions\"\n+        # Five rounds of sending each other transactions.\n+        for i in range(5):\n+            self.do_one_round()\n+\n+        print \"Backing up\"\n+        tmpdir = self.options.tmpdir\n+        self.nodes[0].backupwallet(tmpdir + \"/node0/wallet.bak\")\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.dump\")\n+        self.nodes[1].backupwallet(tmpdir + \"/node1/wallet.bak\")\n+        self.nodes[1].dumpwallet(tmpdir + \"/node1/wallet.dump\")\n+        self.nodes[2].backupwallet(tmpdir + \"/node2/wallet.bak\")\n+        self.nodes[2].dumpwallet(tmpdir + \"/node2/wallet.dump\")\n+\n+        print \"More transactions\"\n+        for i in range(5):\n+            self.do_one_round()\n+\n+        # Generate 101 more blocks, so any fees paid mature\n+        self.nodes[3].setgenerate(True, 101)\n+        self.sync_all()\n+\n+        balance0 = self.nodes[0].getbalance()\n+        balance1 = self.nodes[1].getbalance()\n+        balance2 = self.nodes[2].getbalance()\n+        balance3 = self.nodes[3].getbalance()\n+        total = balance0 + balance1 + balance2 + balance3\n+\n+        # At this point, there are 214 blocks (103 for setup, then 10 rounds, then 101.)\n+        # 114 are mature, so the sum of all wallets should be 114 * 50 = 5700.\n+        assert_equal(total, 5700)\n+\n+        ##\n+        # Test restoring spender wallets from backups\n+        ##\n+        print \"Restoring using wallet.dat\"\n+        self.stop_three()\n+        self.erase_three()\n+\n+        # Start node2 with no chain\n+        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+\n+        # Restore wallets from backup\n+        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n+\n+        print \"Re-starting nodes\"\n+        self.start_three()\n+        sync_blocks(self.nodes)\n+\n+        assert_equal(self.nodes[0].getbalance(), balance0)\n+        assert_equal(self.nodes[1].getbalance(), balance1)\n+        assert_equal(self.nodes[2].getbalance(), balance2)\n+\n+        print \"Restoring using dumped wallet\"\n+        self.stop_three()\n+        self.erase_three()\n+\n+        #start node2 with no chain\n+        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+\n+        self.start_three()\n+\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[1].getbalance(), 0)\n+        assert_equal(self.nodes[2].getbalance(), 0)\n+\n+        self.nodes[0].importwallet(tmpdir + \"/node0/wallet.dump\")\n+        self.nodes[1].importwallet(tmpdir + \"/node1/wallet.dump\")\n+        self.nodes[2].importwallet(tmpdir + \"/node2/wallet.dump\")\n+\n+        sync_blocks(self.nodes)\n+\n+        assert_equal(self.nodes[0].getbalance(), balance0)\n+        assert_equal(self.nodes[1].getbalance(), balance1)\n+        assert_equal(self.nodes[2].getbalance(), balance2)\n+\n+\n+if __name__ == '__main__':\n+    WalletBackupTest().main()"
      },
      {
        "sha": "4af3d97f351d346f4625868a21776a46fa324273",
        "filename": "qa/rpc-tests/walletbackup.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 297,
        "changes": 297,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7026cbd6db0432e27dd3505fa0d0a167fd319db2/qa/rpc-tests/walletbackup.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7026cbd6db0432e27dd3505fa0d0a167fd319db2/qa/rpc-tests/walletbackup.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.sh?ref=7026cbd6db0432e27dd3505fa0d0a167fd319db2",
        "patch": "@@ -1,297 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test wallet backup / dump / restore functionality\n-\n-# Test case is:\n-# 4 nodes. 1 2 3 and send transactions between each other,\n-# fourth node is a miner.\n-# 1 2 3 and each mine a block to start, then\n-# miner creates 100 blocks so 1 2 3 each have 50 mature\n-# coins to spend.\n-# Then 5 iterations of 1/2/3 sending coins amongst\n-# themselves to get transactions in the wallets,\n-# and the miner mining one block.\n-#\n-# Wallets are backed up using dumpwallet/backupwallet.\n-# Then 5 more iterations of transactions, then block.\n-#\n-# Miner then generates 101 more blocks, so any\n-# transaction fees paid mature.\n-#\n-# Sanity checks done:\n-#   Miner balance >= 150*50\n-#   Sum(1,2,3,4 balances) == 153*150\n-#\n-# 1/2/3 are shutdown, and their wallets erased.\n-# Then restore using wallet.dat backup. And\n-# confirm 1/2/3/4 balances are same as before.\n-#\n-# Shutdown again, restore using importwallet,\n-# and confirm again balances are correct.\n-#\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-echo \"Starting nodes...\"\n-\n-# \"Miner\":\n-D4=${D}/node4\n-CreateDataDir $D4 port=11030 rpcport=11031\n-B4ARGS=\"-datadir=$D4\"\n-$BITCOIND $BITCOINDARGS $B4ARGS &\n-B4PID=$!\n-\n-# Want default keypool for 1/2/3, and\n-# don't need send-and-wait functionality,\n-# so don't use CreateDataDir:\n-function CreateConfDir {\n-  DIR=$1\n-  mkdir -p $DIR\n-  CONF=$DIR/bitcoin.conf\n-  echo \"regtest=1\" >> $CONF\n-  echo \"rpcuser=rt\" >> $CONF\n-  echo \"rpcpassword=rt\" >> $CONF\n-  echo \"rpcwait=1\" >> $CONF\n-  shift\n-  while (( \"$#\" )); do\n-      echo $1 >> $CONF\n-      shift\n-  done\n-}\n-\n-# \"Spenders\" 1/2/3\n-D1=${D}/node1\n-CreateConfDir $D1 port=11000 rpcport=11001 addnode=127.0.0.1:11030\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-D2=${D}/node2\n-CreateConfDir $D2 port=11010 rpcport=11011 addnode=127.0.0.1:11030\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-D3=${D}/node3\n-CreateConfDir $D3 port=11020 rpcport=11021 addnode=127.0.0.1:11030 addnode=127.0.0.1:11000\n-B3ARGS=\"-datadir=$D3\"\n-$BITCOIND $BITCOINDARGS $B3ARGS &\n-B3PID=$!\n-\n-# Wait until all nodes are at the same block number\n-function WaitBlocks {\n-    while :\n-    do\n-        sleep 1\n-        BLOCKS1=$( GetBlocks \"$B1ARGS\" )\n-        BLOCKS2=$( GetBlocks \"$B2ARGS\" )\n-        BLOCKS3=$( GetBlocks \"$B3ARGS\" )\n-        BLOCKS4=$( GetBlocks \"$B4ARGS\" )\n-        if (( BLOCKS1 == BLOCKS4 && BLOCKS2 == BLOCKS4 && BLOCKS3 == BLOCKS4 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-# Wait until all nodes have the same txns in\n-# their memory pools\n-function WaitMemPools {\n-    while :\n-    do\n-        sleep 1\n-        MEMPOOL1=$( $CLI \"$B1ARGS\" getrawmempool | sort | shasum )\n-        MEMPOOL2=$( $CLI \"$B2ARGS\" getrawmempool | sort | shasum )\n-        MEMPOOL3=$( $CLI \"$B3ARGS\" getrawmempool | sort | shasum )\n-        MEMPOOL4=$( $CLI \"$B4ARGS\" getrawmempool | sort | shasum )\n-        if [[ $MEMPOOL1 = $MEMPOOL4 && $MEMPOOL2 = $MEMPOOL4 && $MEMPOOL3 = $MEMPOOL4 ]]\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-echo \"Generating initial blockchain...\"\n-\n-# 1 block, 50 XBT each == 50 BTC\n-$CLI $B1ARGS setgenerate true 1\n-WaitBlocks\n-$CLI $B2ARGS setgenerate true 1\n-WaitBlocks\n-$CLI $B3ARGS setgenerate true 1\n-WaitBlocks\n-\n-# 100 blocks, 0 mature\n-$CLI $B4ARGS setgenerate true 100\n-WaitBlocks\n-\n-CheckBalance \"$B1ARGS\" 50\n-CheckBalance \"$B2ARGS\" 50\n-CheckBalance \"$B3ARGS\" 50\n-CheckBalance \"$B4ARGS\" 0\n-\n-echo \"Creating transactions...\"\n-\n-function S {\n-  TXID=$( $CLI -datadir=${D}/node${1} sendtoaddress ${2} \"${3}\" 0 )\n-  if [ x$TXID = x ] ; then\n-      echoerr \"node${1}: error sending ${3} btc\"\n-      echo -n \"node${1} balance: \"\n-      $CLI -datadir=${D}/node${1} getbalance \"*\" 0\n-      exit 1\n-  fi\n-}\n-\n-function OneRound {\n-  A1=$( $CLI $B1ARGS getnewaddress )\n-  A2=$( $CLI $B2ARGS getnewaddress )\n-  A3=$( $CLI $B3ARGS getnewaddress )\n-  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n-      N=$(( $RANDOM % 9 + 1 ))\n-      S 1 $A2 \"0.$N\"\n-  fi\n-  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n-      N=$(( $RANDOM % 9 + 1 ))\n-      S 1 $A3 \"0.0$N\"\n-  fi\n-  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n-      N=$(( $RANDOM % 9 + 1 ))\n-      S 2 $A1 \"0.$N\"\n-  fi\n-  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n-      N=$(( $RANDOM % 9 + 1 ))\n-      S 2 $A3 \"0.$N\"\n-  fi\n-  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n-      N=$(( $RANDOM % 9 + 1 ))\n-      S 3 $A1 \"0.$N\"\n-  fi\n-  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n-      N=$(( $RANDOM % 9 + 1 ))\n-      S 3 $A2 \"0.0$N\"\n-  fi\n-  $CLI \"$B4ARGS\" setgenerate true 1\n-}\n-\n-for i in {1..5}; do OneRound ; done\n-\n-echo \"Backing up...\"\n-\n-$CLI \"$B1ARGS\" backupwallet \"$D1/wallet.bak\"\n-$CLI \"$B1ARGS\" dumpwallet \"$D1/wallet.dump\"\n-$CLI \"$B2ARGS\" backupwallet \"$D2/wallet.bak\"\n-$CLI \"$B2ARGS\" dumpwallet \"$D2/wallet.dump\"\n-$CLI \"$B3ARGS\" backupwallet \"$D3/wallet.bak\"\n-$CLI \"$B3ARGS\" dumpwallet \"$D3/wallet.dump\"\n-\n-echo \"More transactions...\"\n-for i in {1..5}; do OneRound ; done\n-\n-WaitMemPools\n-\n-# Generate 101 more blocks, so any fees paid\n-# mature\n-$CLI \"$B4ARGS\" setgenerate true 101\n-\n-BALANCE1=$( $CLI \"$B1ARGS\" getbalance )\n-BALANCE2=$( $CLI \"$B2ARGS\" getbalance )\n-BALANCE3=$( $CLI \"$B3ARGS\" getbalance )\n-BALANCE4=$( $CLI \"$B4ARGS\" getbalance )\n-\n-TOTAL=$( dc -e \"$BALANCE1 $BALANCE2 $BALANCE3 $BALANCE4 + + + p\" )\n-\n-AssertEqual $TOTAL 5700.00000000\n-\n-function StopThree {\n-  $CLI $B1ARGS stop > /dev/null 2>&1\n-  $CLI $B2ARGS stop > /dev/null 2>&1\n-  $CLI $B3ARGS stop > /dev/null 2>&1\n-  wait $B1PID\n-  wait $B2PID\n-  wait $B3PID\n-}\n-function EraseThree {\n-  rm $D1/regtest/wallet.dat\n-  rm $D2/regtest/wallet.dat\n-  rm $D3/regtest/wallet.dat\n-}\n-function StartThree {\n-  $BITCOIND $BITCOINDARGS $B1ARGS &\n-  B1PID=$!\n-  $BITCOIND $BITCOINDARGS $B2ARGS &\n-  B2PID=$!\n-  $BITCOIND $BITCOINDARGS $B3ARGS &\n-  B3PID=$!\n-}\n-\n-echo \"Restoring using wallet.dat\"\n-\n-StopThree\n-EraseThree\n-\n-# Start node3 with no chain\n-rm -rf $D3/regtest/blocks\n-rm -rf $D3/regtest/chainstate\n-rm -rf $D3/regtest/database\n-\n-cp $D1/wallet.bak $D1/regtest/wallet.dat\n-cp $D2/wallet.bak $D2/regtest/wallet.dat\n-cp $D3/wallet.bak $D3/regtest/wallet.dat\n-\n-StartThree\n-WaitBlocks\n-\n-AssertEqual $BALANCE1 $( $CLI \"$B1ARGS\" getbalance )\n-AssertEqual $BALANCE2 $( $CLI \"$B2ARGS\" getbalance )\n-AssertEqual $BALANCE3 $( $CLI \"$B3ARGS\" getbalance )\n-\n-echo \"Restoring using dumped wallet\"\n-\n-StopThree\n-EraseThree\n-\n-# Start node3 with no chain\n-rm -rf $D3/regtest/blocks\n-rm -rf $D3/regtest/chainstate\n-rm -rf $D3/regtest/database\n-\n-StartThree\n-\n-AssertEqual 0 $( $CLI \"$B1ARGS\" getbalance )\n-AssertEqual 0 $( $CLI \"$B2ARGS\" getbalance )\n-AssertEqual 0 $( $CLI \"$B3ARGS\" getbalance )\n-\n-$CLI \"$B1ARGS\" importwallet $D1/wallet.dump\n-$CLI \"$B2ARGS\" importwallet $D2/wallet.dump\n-$CLI \"$B3ARGS\" importwallet $D3/wallet.dump\n-\n-WaitBlocks\n-\n-AssertEqual $BALANCE1 $( $CLI \"$B1ARGS\" getbalance )\n-AssertEqual $BALANCE2 $( $CLI \"$B2ARGS\" getbalance )\n-AssertEqual $BALANCE3 $( $CLI \"$B3ARGS\" getbalance )\n-\n-StopThree\n-$CLI $B4ARGS stop > /dev/null 2>&1\n-wait $B4PID\n-\n-echo \"Tests successful, cleaning up\"\n-trap \"\" EXIT\n-rm -rf $D\n-exit 0"
      }
    ]
  },
  {
    "sha": "1a337105a72aa1f566177610e21f1507f2b1cb88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTMzNzEwNWE3MmFhMWY1NjYxNzc2MTBlMjFmMTUwN2YyYjFjYjg4",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-12-08T19:52:44Z"
      },
      "committer": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-12-08T19:52:44Z"
      },
      "message": "Minor edits.\nChanged python to python2.\nIntro comment is now docstring.\nReplaced print with logging.info.\nWhitespace edits.",
      "tree": {
        "sha": "c83e49389f174be99c2829bc1eea193ac1488ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c83e49389f174be99c2829bc1eea193ac1488ec8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a337105a72aa1f566177610e21f1507f2b1cb88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a337105a72aa1f566177610e21f1507f2b1cb88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a337105a72aa1f566177610e21f1507f2b1cb88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a337105a72aa1f566177610e21f1507f2b1cb88/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb9eabe4aa2c7fee2ef6fd6ca264504208233b5"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 43,
      "deletions": 41
    },
    "files": [
      {
        "sha": "fcadf112d042ff5bb8c150ec5bed31ce9fdd9c2c",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 43,
        "deletions": 41,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a337105a72aa1f566177610e21f1507f2b1cb88/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a337105a72aa1f566177610e21f1507f2b1cb88/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=1a337105a72aa1f566177610e21f1507f2b1cb88",
        "patch": "@@ -1,46 +1,48 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python2\n # Copyright (c) 2014 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-# Exercise the wallet backup code.  Ported from walletbackup.sh.  \n-#\n-#\n-# Test case is:\n-# 4 nodes. 1 2 and 3 send transactions between each other,\n-# fourth node is a miner.\n-# 1 2 3 each mine a block to start, then\n-# Miner creates 100 blocks so 1 2 3 each have 50 mature\n-# coins to spend.\n-# Then 5 iterations of 1/2/3 sending coins amongst\n-# themselves to get transactions in the wallets,\n-# and the miner mining one block.\n-#\n-# Wallets are backed up using dumpwallet/backupwallet.\n-# Then 5 more iterations of transactions and mining a block.\n-#\n-# Miner then generates 101 more blocks, so any\n-# transaction fees paid mature.\n-#\n-# Sanity check:\n-#   Sum(1,2,3,4 balances) == 114*50\n-#\n-# 1/2/3 are shutdown, and their wallets erased.\n-# Then restore using wallet.dat backup. And\n-# confirm 1/2/3/4 balances are same as before.\n-#\n-# Shutdown again, restore using importwallet,\n-# and confirm again balances are correct.\n-#\n+\n+\"\"\"\n+Exercise the wallet backup code.  Ported from walletbackup.sh.  \n+\n+Test case is:\n+4 nodes. 1 2 and 3 send transactions between each other,\n+fourth node is a miner.\n+1 2 3 each mine a block to start, then\n+Miner creates 100 blocks so 1 2 3 each have 50 mature\n+coins to spend.\n+Then 5 iterations of 1/2/3 sending coins amongst\n+themselves to get transactions in the wallets,\n+and the miner mining one block.\n+\n+Wallets are backed up using dumpwallet/backupwallet.\n+Then 5 more iterations of transactions and mining a block.\n+\n+Miner then generates 101 more blocks, so any\n+transaction fees paid mature.\n+\n+Sanity check:\n+  Sum(1,2,3,4 balances) == 114*50\n+\n+1/2/3 are shutdown, and their wallets erased.\n+Then restore using wallet.dat backup. And\n+confirm 1/2/3/4 balances are same as before.\n+\n+Shutdown again, restore using importwallet,\n+and confirm again balances are correct.\n+\"\"\"\n \n from test_framework import BitcoinTestFramework\n from util import *\n from random import randint\n+import logging\n+logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.INFO)\n \n-class WalletBackupTest (BitcoinTestFramework):\n+class WalletBackupTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n+        logging.info(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n \n     # This mirrors how the network was setup in the bash test\n@@ -97,8 +99,8 @@ def erase_three(self):\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n \n-    def run_test (self):\n-        print \"Generating initial blockchain\"\n+    def run_test(self):\n+        logging.info(\"Generating initial blockchain\")\n         self.nodes[0].setgenerate(True, 1)\n         sync_blocks(self.nodes)\n         self.nodes[1].setgenerate(True, 1)\n@@ -113,12 +115,12 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 50)\n         assert_equal(self.nodes[3].getbalance(), 0)\n \n-        print \"Creating transactions\"\n+        logging.info(\"Creating transactions\")\n         # Five rounds of sending each other transactions.\n         for i in range(5):\n             self.do_one_round()\n \n-        print \"Backing up\"\n+        logging.info(\"Backing up\")\n         tmpdir = self.options.tmpdir\n         self.nodes[0].backupwallet(tmpdir + \"/node0/wallet.bak\")\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.dump\")\n@@ -127,7 +129,7 @@ def run_test (self):\n         self.nodes[2].backupwallet(tmpdir + \"/node2/wallet.bak\")\n         self.nodes[2].dumpwallet(tmpdir + \"/node2/wallet.dump\")\n \n-        print \"More transactions\"\n+        logging.info(\"More transactions\")\n         for i in range(5):\n             self.do_one_round()\n \n@@ -148,7 +150,7 @@ def run_test (self):\n         ##\n         # Test restoring spender wallets from backups\n         ##\n-        print \"Restoring using wallet.dat\"\n+        logging.info(\"Restoring using wallet.dat\")\n         self.stop_three()\n         self.erase_three()\n \n@@ -161,15 +163,15 @@ def run_test (self):\n         shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n \n-        print \"Re-starting nodes\"\n+        logging.info(\"Re-starting nodes\")\n         self.start_three()\n         sync_blocks(self.nodes)\n \n         assert_equal(self.nodes[0].getbalance(), balance0)\n         assert_equal(self.nodes[1].getbalance(), balance1)\n         assert_equal(self.nodes[2].getbalance(), balance2)\n \n-        print \"Restoring using dumped wallet\"\n+        logging.info(\"Restoring using dumped wallet\")\n         self.stop_three()\n         self.erase_three()\n "
      }
    ]
  }
]