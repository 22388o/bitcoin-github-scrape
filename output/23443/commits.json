[
  {
    "sha": "8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
    "node_id": "C_kwDOABII59oAKDhjNGNiNjQyZTU4YzM0MjBkZTliNTQxMGE1YWIyNjYzN2Q0OGMzYjk",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-03-19T11:03:25Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-24T08:23:05Z"
      },
      "message": "p2p: Announce reconciliation support\n\nIf we're connecting to the peer which might support\ntransaction reconciliation, we announce we want to reconcile\nwith them.\n\nWe store the reconciliation salt so that when the peer\nresponds with their salt, we are able to compute the\nfull reconciliation salt.",
      "tree": {
        "sha": "6598a3043a3aebc9ac93aedaca886f047ebea716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6598a3043a3aebc9ac93aedaca886f047ebea716"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d94dc69ee454144f4db12d163b15717cc6cad383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94dc69ee454144f4db12d163b15717cc6cad383",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d94dc69ee454144f4db12d163b15717cc6cad383"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9fe49fd3dc0dc3b4097952656258f0f649849b19",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "patch": "@@ -230,6 +230,7 @@ BITCOIN_CORE_H = \\\n   txdb.h \\\n   txmempool.h \\\n   txorphanage.h \\\n+  txreconciliation.h \\\n   txrequest.h \\\n   undo.h \\\n   util/asmap.h \\\n@@ -367,6 +368,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   txorphanage.cpp \\\n+  txreconciliation.cpp \\\n   txrequest.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\"
      },
      {
        "sha": "7713b87d20a5bb60ce1b315d386f99ca4b4dbfdb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "patch": "@@ -31,6 +31,7 @@\n #include <tinyformat.h>\n #include <txmempool.h>\n #include <txorphanage.h>\n+#include <txreconciliation.h>\n #include <txrequest.h>\n #include <util/check.h> // For NDEBUG compile time check\n #include <util/strencodings.h>\n@@ -416,6 +417,7 @@ class PeerManagerImpl final : public PeerManager\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n+    TxReconciliationTracker m_reconciliation;\n \n     /** The height of the best chain */\n     std::atomic<int> m_best_height{-1};\n@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only\n+            // those connections which (at least might) support transaction relay.\n+            if (pfrom.m_tx_relay) {\n+                const auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] =\n+                    m_reconciliation.PreRegisterPeer(pfrom.GetId(), pfrom.IsInboundConn());\n+                m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::SENDRECON,\n+                    we_initiate_recon, we_respond_recon, recon_version, recon_salt));\n+            }\n         }\n \n         // Signal ADDRv2 support (BIP155)."
      },
      {
        "sha": "969205b6a79338764ad77f965f486f639160591f",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "patch": "@@ -44,6 +44,7 @@ const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n const char *WTXIDRELAY=\"wtxidrelay\";\n+const char *SENDRECON=\"sendrecon\";\n } // namespace NetMsgType\n \n /** All known message types. Keep this in the same order as the list of\n@@ -84,6 +85,7 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::GETCFCHECKPT,\n     NetMsgType::CFCHECKPT,\n     NetMsgType::WTXIDRELAY,\n+    NetMsgType::SENDRECON,\n };\n const static std::vector<std::string> allNetMessageTypesVec(std::begin(allNetMessageTypes), std::end(allNetMessageTypes));\n "
      },
      {
        "sha": "7f29ac3917b522312430a55269acb15f361bebee",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "patch": "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * The boolean indicates that a node is willing to participate in transaction\n+ * reconciliation, either as a sender or a receiver.\n+ * The salt is used to compute short txids needed for efficient reconciliation.\n+ */\n+extern const char *SENDRECON;\n }; // namespace NetMsgType\n \n /* Get a vector of all valid message types (see above) */"
      },
      {
        "sha": "34a73d4ffd9261848dc90b463dfe90af93c3b746",
        "filename": "src/txreconciliation.cpp",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/txreconciliation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/txreconciliation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.cpp?ref=8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "patch": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+};\n+\n+TxReconciliationTracker::TxReconciliationTracker() :\n+    m_impl{std::make_unique<TxReconciliationTracker::Impl>()} {}\n+\n+TxReconciliationTracker::~TxReconciliationTracker() = default;\n+\n+std::tuple<bool, bool, uint32_t, uint64_t>TxReconciliationTracker::PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+{\n+    return m_impl->PreRegisterPeer(peer_id, peer_inbound);\n+}"
      },
      {
        "sha": "38ceaf0ca4771666cf529b11626048276a06e5d6",
        "filename": "src/txreconciliation.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/txreconciliation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cb642e58c3420de9b5410a5ab26637d48c3b9/src/txreconciliation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.h?ref=8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXRECONCILIATION_H\n+#define BITCOIN_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+};\n+\n+#endif // BITCOIN_TXRECONCILIATION_H"
      }
    ]
  },
  {
    "sha": "7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
    "node_id": "C_kwDOABII59oAKDdlOGM0NTRlYzJiZjc3NzM3OTVmNmMzNDE4YzExNzJkN2RiYTk4ZDg",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-03-20T10:50:02Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-24T08:23:06Z"
      },
      "message": "p2p: Forget peer's reconciliation state on disconnect",
      "tree": {
        "sha": "7df6916410ea2ee5654b841f1ad47034e2a293f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7df6916410ea2ee5654b841f1ad47034e2a293f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cb642e58c3420de9b5410a5ab26637d48c3b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4cb642e58c3420de9b5410a5ab26637d48c3b9"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "feacbff18785e6d17c7c59a31dceef2eea4572d2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
        "patch": "@@ -1220,6 +1220,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n     }\n     WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n+    m_reconciliation.ForgetPeer(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n     m_peers_downloading_from -= (state->nBlocksInFlight != 0);\n     assert(m_peers_downloading_from >= 0);"
      },
      {
        "sha": "9d71bc6ea083dd827ac468ed7ca83f623439489e",
        "filename": "src/txreconciliation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/src/txreconciliation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/src/txreconciliation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.cpp?ref=7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
        "patch": "@@ -52,6 +52,15 @@ class TxReconciliationTracker::Impl {\n         LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n+\n+    void ForgetPeer(NodeId peer_id)\n+    {\n+        LOCK(m_mutex);\n+        if (m_local_salts.erase(peer_id)) {\n+            LogPrint(BCLog::NET, \"Forget reconciliation state of peer=%d.\\n\", peer_id);\n+        }\n+    }\n+\n };\n \n TxReconciliationTracker::TxReconciliationTracker() :\n@@ -63,3 +72,8 @@ std::tuple<bool, bool, uint32_t, uint64_t>TxReconciliationTracker::PreRegisterPe\n {\n     return m_impl->PreRegisterPeer(peer_id, peer_inbound);\n }\n+\n+void TxReconciliationTracker::ForgetPeer(NodeId peer_id)\n+{\n+    m_impl->ForgetPeer(peer_id);\n+}"
      },
      {
        "sha": "3bce10bd19c0fa2f1a3b85431503d0610042818d",
        "filename": "src/txreconciliation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/src/txreconciliation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8c454ec2bf7773795f6c3418c1172d7dba98d8/src/txreconciliation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.h?ref=7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
        "patch": "@@ -57,6 +57,14 @@ class TxReconciliationTracker {\n      * This function must be called only once per peer.\n      */\n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    // Helpers\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.\n+     */\n+    void ForgetPeer(NodeId peer_id);\n };\n \n #endif // BITCOIN_TXRECONCILIATION_H"
      }
    ]
  },
  {
    "sha": "b78b462c67c2468e37a1edb75544f8eddc806459",
    "node_id": "C_kwDOABII59oAKGI3OGI0NjJjNjdjMjQ2OGUzN2ExZWRiNzU1NDRmOGVkZGM4MDY0NTk",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-03-19T11:07:15Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-24T08:23:06Z"
      },
      "message": "Add helper to compute reconciliation salt\n\nTransaction reconciliation assumes exchanging sketches\nrepresenting transactions a peer wants to announce.\nTransactions are included in sketches based on their short ID,\ncomputed by hashing with the use of the salt.\n\nThe salt is computed from contributions by both peers.",
      "tree": {
        "sha": "36efa1e73a23805b5b7499986d4ca1d25ae69d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36efa1e73a23805b5b7499986d4ca1d25ae69d6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b78b462c67c2468e37a1edb75544f8eddc806459",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b78b462c67c2468e37a1edb75544f8eddc806459",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b78b462c67c2468e37a1edb75544f8eddc806459",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b78b462c67c2468e37a1edb75544f8eddc806459/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8c454ec2bf7773795f6c3418c1172d7dba98d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8c454ec2bf7773795f6c3418c1172d7dba98d8"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "506064d12bc50ec77f1fe94c055a2537d143ac5b",
        "filename": "src/txreconciliation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b78b462c67c2468e37a1edb75544f8eddc806459/src/txreconciliation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b78b462c67c2468e37a1edb75544f8eddc806459/src/txreconciliation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.cpp?ref=b78b462c67c2468e37a1edb75544f8eddc806459",
        "patch": "@@ -10,6 +10,23 @@ namespace {\n \n /** Current protocol version */\n constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n \n } // namespace\n "
      }
    ]
  },
  {
    "sha": "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
    "node_id": "C_kwDOABII59oAKDA0ZWY2ZjdjY2RiYjM4OWZhZmZiYzY3NmExN2NhOTU3YzE1ZWZmNzg",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-03-19T12:00:27Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-29T07:48:00Z"
      },
      "message": "p2p: Finish negotiating reconciliation support\n\nOnce we received a reconciliation announcement support\nmessage from a peer and it doesn't violate our protocol,\nwe store the negotiated parameters which will be used\nfor future reconciliations.",
      "tree": {
        "sha": "596d6d55362da3b818ba150444fdf2ec1a86e774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/596d6d55362da3b818ba150444fdf2ec1a86e774"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04ef6f7ccdbb389faffbc676a17ca957c15eff78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04ef6f7ccdbb389faffbc676a17ca957c15eff78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04ef6f7ccdbb389faffbc676a17ca957c15eff78/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b78b462c67c2468e37a1edb75544f8eddc806459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b78b462c67c2468e37a1edb75544f8eddc806459",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b78b462c67c2468e37a1edb75544f8eddc806459"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 138,
      "deletions": 1
    },
    "files": [
      {
        "sha": "87dd33e7d8ba4a1ebd80f9fad9eff113fbb97ec8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04ef6f7ccdbb389faffbc676a17ca957c15eff78/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04ef6f7ccdbb389faffbc676a17ca957c15eff78/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=04ef6f7ccdbb389faffbc676a17ca957c15eff78",
        "patch": "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;\n+        uint32_t recon_version;\n+        uint64_t remote_salt;\n+        vRecv >> they_initiator >> they_responder >> recon_version >> remote_salt;\n+\n+        if (!m_reconciliation.RegisterPeer(pfrom.GetId(), pfrom.IsInboundConn(),\n+            they_initiator, they_responder, recon_version, remote_salt)) {\n+                LogPrint(BCLog::NET, \"reconciliation protocol violation from peer=%d; disconnecting\\n\", pfrom.GetId());\n+                pfrom.fDisconnect = true;\n+                return;\n+            }\n+        return;\n+    }\n+\n     if (!pfrom.fSuccessfullyConnected) {\n         LogPrint(BCLog::NET, \"Unsupported message \\\"%s\\\" prior to verack from peer=%d\\n\", SanitizeString(msg_type), pfrom.GetId());\n         return;"
      },
      {
        "sha": "5797f45cda50401f0304b33eaec6279a8724785d",
        "filename": "src/txreconciliation.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 1,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04ef6f7ccdbb389faffbc676a17ca957c15eff78/src/txreconciliation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04ef6f7ccdbb389faffbc676a17ca957c15eff78/src/txreconciliation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.cpp?ref=04ef6f7ccdbb389faffbc676a17ca957c15eff78",
        "patch": "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n } // namespace\n \n /** Actual implementation for TxReconciliationTracker's data structure. */\n@@ -44,6 +72,11 @@ class TxReconciliationTracker::Impl {\n      */\n     std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n \n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n     public:\n \n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n@@ -70,10 +103,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {\n             LogPrint(BCLog::NET, \"Forget reconciliation state of peer=%d.\\n\", peer_id);\n         }\n     }\n@@ -90,6 +169,13 @@ std::tuple<bool, bool, uint32_t, uint64_t>TxReconciliationTracker::PreRegisterPe\n     return m_impl->PreRegisterPeer(peer_id, peer_inbound);\n }\n \n+bool TxReconciliationTracker::RegisterPeer(NodeId peer_id, bool peer_inbound,\n+    bool recon_requestor, bool recon_responder, uint32_t recon_version, uint64_t remote_salt)\n+{\n+    return m_impl->RegisterPeer(peer_id, peer_inbound, recon_requestor, recon_responder,\n+        recon_version, remote_salt);\n+}\n+\n void TxReconciliationTracker::ForgetPeer(NodeId peer_id)\n {\n     m_impl->ForgetPeer(peer_id);"
      },
      {
        "sha": "1c66f39831c795df483a6d467595d08a10988a80",
        "filename": "src/txreconciliation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04ef6f7ccdbb389faffbc676a17ca957c15eff78/src/txreconciliation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04ef6f7ccdbb389faffbc676a17ca957c15eff78/src/txreconciliation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.h?ref=04ef6f7ccdbb389faffbc676a17ca957c15eff78",
        "patch": "@@ -58,6 +58,14 @@ class TxReconciliationTracker {\n      */\n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n \n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.\n+     */\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool recon_requestor, bool recon_responder, uint32_t recon_version, uint64_t remote_salt);\n+\n     // Helpers\n \n     /**"
      }
    ]
  },
  {
    "sha": "6ba070c703763f7fb02f3b9b74718712176e627c",
    "node_id": "C_kwDOABII59oAKDZiYTA3MGM3MDM3NjNmN2ZiMDJmM2I5Yjc0NzE4NzEyMTc2ZTYyN2M",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-03-20T10:26:41Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-29T07:48:01Z"
      },
      "message": "Add helper to see if a peer is registered for reconciliations",
      "tree": {
        "sha": "14195d70343cc16e5b6738ad2b90c827731db12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14195d70343cc16e5b6738ad2b90c827731db12d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba070c703763f7fb02f3b9b74718712176e627c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba070c703763f7fb02f3b9b74718712176e627c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba070c703763f7fb02f3b9b74718712176e627c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba070c703763f7fb02f3b9b74718712176e627c/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04ef6f7ccdbb389faffbc676a17ca957c15eff78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04ef6f7ccdbb389faffbc676a17ca957c15eff78"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c7bc3d734318c6a608b0f29c7d00c789e59452b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba070c703763f7fb02f3b9b74718712176e627c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba070c703763f7fb02f3b9b74718712176e627c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6ba070c703763f7fb02f3b9b74718712176e627c",
        "patch": "@@ -1220,6 +1220,9 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n     }\n     WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n+    // Do not check whether peer is registered for reconciliation here, but rather delegate checks\n+    // to the module. Otherwise it's easy to skip deleting an intermediate state (e.g., we store\n+    // salt for peers before we register them for reconciliation).\n     m_reconciliation.ForgetPeer(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n     m_peers_downloading_from -= (state->nBlocksInFlight != 0);"
      },
      {
        "sha": "620e117f6e7682b0af2546806154edc2d6c1b550",
        "filename": "src/txreconciliation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba070c703763f7fb02f3b9b74718712176e627c/src/txreconciliation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba070c703763f7fb02f3b9b74718712176e627c/src/txreconciliation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.cpp?ref=6ba070c703763f7fb02f3b9b74718712176e627c",
        "patch": "@@ -157,6 +157,11 @@ class TxReconciliationTracker::Impl {\n         }\n     }\n \n+    bool IsPeerRegistered(NodeId peer_id) const\n+    {\n+        LOCK(m_mutex);\n+        return m_states.find(peer_id) != m_states.end();\n+    }\n };\n \n TxReconciliationTracker::TxReconciliationTracker() :\n@@ -180,3 +185,8 @@ void TxReconciliationTracker::ForgetPeer(NodeId peer_id)\n {\n     m_impl->ForgetPeer(peer_id);\n }\n+\n+bool TxReconciliationTracker::IsPeerRegistered(NodeId peer_id) const\n+{\n+    return m_impl->IsPeerRegistered(peer_id);\n+}"
      },
      {
        "sha": "1171148132cfff71b3a819ca28ce134bb7265218",
        "filename": "src/txreconciliation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba070c703763f7fb02f3b9b74718712176e627c/src/txreconciliation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba070c703763f7fb02f3b9b74718712176e627c/src/txreconciliation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txreconciliation.h?ref=6ba070c703763f7fb02f3b9b74718712176e627c",
        "patch": "@@ -73,6 +73,11 @@ class TxReconciliationTracker {\n      * After this, we won't be able to reconcile with the peer.\n      */\n     void ForgetPeer(NodeId peer_id);\n+\n+    /**\n+     * Check if a peer is registered to reconcile with us.\n+     */\n+    bool IsPeerRegistered(NodeId peer_id) const;\n };\n \n #endif // BITCOIN_TXRECONCILIATION_H"
      }
    ]
  },
  {
    "sha": "fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
    "node_id": "C_kwDOABII59oAKGZlMGE0YWNlZDVkYzdlN2M0MGNjNmJjMWViYjIzMjM5NjYxNTQ1MTE",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-05T08:40:55Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-29T07:48:01Z"
      },
      "message": "test: Add unit tests for reconciliation negotiation",
      "tree": {
        "sha": "d0eda65e75eb90429988351d396e5edd0b3746dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0eda65e75eb90429988351d396e5edd0b3746dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba070c703763f7fb02f3b9b74718712176e627c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba070c703763f7fb02f3b9b74718712176e627c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba070c703763f7fb02f3b9b74718712176e627c"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 96,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6251cb5f33ffc52b48b9cb265b45676962487b95",
        "filename": "src/test/txreconciliation_tests.cpp",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511/src/test/txreconciliation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511/src/test/txreconciliation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txreconciliation_tests.cpp?ref=fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);\n+}\n+\n+BOOST_AUTO_TEST_CASE(RegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+    const uint64_t salt = 0;\n+\n+    // Prepare a peer for reconciliation.\n+    tracker.PreRegisterPeer(0, true);\n+\n+    // Both roles are false, don't register.\n+    assert(!tracker.RegisterPeer(0, true, false, false, 1, salt));\n+\n+    // Invalid roles for the given connection direction.\n+    assert(!tracker.RegisterPeer(0, true, false, true, 1, salt));\n+    assert(!tracker.RegisterPeer(0, false, true, false, 1, salt));\n+\n+    // Invalid version.\n+    assert(!tracker.RegisterPeer(0, true, true, false, 0, salt));\n+\n+    // Valid registration.\n+    assert(!tracker.IsPeerRegistered(0));\n+    assert(tracker.RegisterPeer(0, true, true, false, 1, salt));\n+    assert(tracker.IsPeerRegistered(0));\n+\n+    // Reconciliation version is higher than ours, should be able to register.\n+    assert(!tracker.IsPeerRegistered(1));\n+    tracker.PreRegisterPeer(1, true);\n+    assert(tracker.RegisterPeer(1, true, true, false, 2, salt));\n+    assert(tracker.IsPeerRegistered(1));\n+\n+    // Do not register if there were no pre-registration for the peer.\n+    assert(!tracker.RegisterPeer(100, true, true, false, 1, salt));\n+    assert(!tracker.IsPeerRegistered(100));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ForgetPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+    NodeId peer_id0 = 0;\n+\n+    // Removing peer after pre-registring works and does not let to register the peer.\n+    tracker.PreRegisterPeer(peer_id0, true);\n+    tracker.ForgetPeer(peer_id0);\n+    assert(!tracker.RegisterPeer(peer_id0, true, true, false, 1, 1));\n+\n+    // Removing peer after it is registered works.\n+    tracker.PreRegisterPeer(peer_id0, true);\n+    assert(!tracker.IsPeerRegistered(peer_id0));\n+    tracker.RegisterPeer(peer_id0, true, true, false, 1, 1);\n+    assert(tracker.IsPeerRegistered(peer_id0));\n+    tracker.ForgetPeer(peer_id0);\n+    assert(!tracker.IsPeerRegistered(peer_id0));\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n+{\n+    TxReconciliationTracker tracker;\n+    NodeId peer_id0 = 0;\n+\n+    assert(!tracker.IsPeerRegistered(peer_id0));\n+    tracker.PreRegisterPeer(peer_id0, true);\n+    assert(!tracker.IsPeerRegistered(peer_id0));\n+\n+    assert(tracker.RegisterPeer(peer_id0, true, true, false, 1, 1));\n+    assert(tracker.IsPeerRegistered(peer_id0));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    assert(!tracker.IsPeerRegistered(peer_id0));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
    "node_id": "C_kwDOABII59oAKDZhNzlhYWUwOTU4ZmMzODcxNmI2YjcyMmZmNWQ5YjA2MDczYzlkODY",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-11T06:14:09Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-11-29T07:48:01Z"
      },
      "message": "Add functional test support for sendrecon message\n\nThis is needed to pass existing functional tests.",
      "tree": {
        "sha": "33d962db7ea3dbdd5acbee0057aa5515bfae5918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33d962db7ea3dbdd5acbee0057aa5515bfae5918"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a79aae0958fc38716b6b722ff5d9b06073c9d86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a79aae0958fc38716b6b722ff5d9b06073c9d86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a79aae0958fc38716b6b722ff5d9b06073c9d86/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe0a4aced5dc7e7c40cc6bc1ebb2323966154511"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85de7fa9f699bbcb8387fed2d88b33e8a0e4f819",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a79aae0958fc38716b6b722ff5d9b06073c9d86/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a79aae0958fc38716b6b722ff5d9b06073c9d86/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=6a79aae0958fc38716b6b722ff5d9b06073c9d86",
        "patch": "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:\n+    __slots__ = (\"initiator\", \"responder\", \"version\", \"salt\")\n+    msgtype = b\"sendrecon\"\n+\n+    def __init__(self):\n+        self.initiator = False\n+        self.responder = False\n+        self.version = 0\n+        self.salt = 0\n+\n+    def deserialize(self, f):\n+        self.initiator = struct.unpack(\"<?\", f.read(1))[0]\n+        self.responder = struct.unpack(\"<?\", f.read(1))[0]\n+        self.version = struct.unpack(\"<I\", f.read(4))[0]\n+        self.salt = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<?\", self.initiator)\n+        r += struct.pack(\"<?\", self.responder)\n+        r += struct.pack(\"<I\", self.version)\n+        r += struct.pack(\"<Q\", self.salt)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_sendrecon(initiator=%i, responder=%i, version=%lu, salt=%lu)\" %\\\n+            (self.initiator, self.responder, self.version, self.salt)"
      },
      {
        "sha": "922b74e15b8f4902c2f92f382fa70faef276ec4f",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a79aae0958fc38716b6b722ff5d9b06073c9d86/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a79aae0958fc38716b6b722ff5d9b06073c9d86/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=6a79aae0958fc38716b6b722ff5d9b06073c9d86",
        "patch": "@@ -59,6 +59,7 @@\n     msg_sendaddrv2,\n     msg_sendcmpct,\n     msg_sendheaders,\n+    msg_sendrecon,\n     msg_tx,\n     MSG_TX,\n     MSG_TYPE_MASK,\n@@ -118,6 +119,7 @@\n     b\"sendaddrv2\": msg_sendaddrv2,\n     b\"sendcmpct\": msg_sendcmpct,\n     b\"sendheaders\": msg_sendheaders,\n+    b\"sendrecon\": msg_sendrecon,\n     b\"tx\": msg_tx,\n     b\"verack\": msg_verack,\n     b\"version\": msg_version,\n@@ -413,6 +415,7 @@ def on_pong(self, message): pass\n     def on_sendaddrv2(self, message): pass\n     def on_sendcmpct(self, message): pass\n     def on_sendheaders(self, message): pass\n+    def on_sendrecon(self, message): pass\n     def on_tx(self, message): pass\n     def on_wtxidrelay(self, message): pass\n "
      }
    ]
  }
]