DrahtBot,2021-11-05 20:10:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23233](https://github.com/bitcoin/bitcoin/pull/23233) (BIP324: Add encrypted p2p transport {de}serializer by dhruv)\n* [",https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-962189199,962189199,
rebroad,2021-11-25 20:12:28,"```\ntxreconciliation.cpp:43:20: warning: private field 'm_k0' is not used [-Wunused-private-field]\n    const uint64_t m_k0, m_k1;\n                   ^\ntxreconciliation.cpp:43:26: warning: private field 'm_k1' is not used [-Wunused-private-field]\n    const uint64_t m_k0, m_k1;\n```",https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-979450976,979450976,
MarcoFalke,2021-11-29 15:24:53,"`Run process_message with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/process_message']fuzz: test/fuzz/process_message.cpp:57: auto initialize_process_message()::(anonymous class)::operator()() const: Assertion `""GetNumMsgTypes() == getAllNetMessageTypes().size()"" && check' fail",https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-981740021,981740021,
ariard,2021-11-23 01:53:29,"Note, I think BIP330 should make the dependency on BIP339 explicit.\n\nOur implementation makes a requirement to speak a protocol version superior to `WTXID_RELAY_VERSION`. Further, it also relies on `MSG_WTX` for the fallback inv announcement. Those 2 elements are defined in BIP339. I think a client implementing straightly the BIP won't be able to tx-announce with Erlay-supported Core nodes.\n",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754756591,754756591,src/net_processing.cpp
ariard,2021-11-23 01:55:05,"nit: ""The boolean indicates""",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754757014,754757014,src/protocol.h
ariard,2021-11-23 02:24:14,"If the reconciliation roles are updated, do you need to bump the `RECON_VERSION` ?\n\nI would say so as a old-reconciliation outbound peer could assume a new-reconciliation inbound peer is the initiator when the new-reconciliation inbound peer would estimate the reverse, thus halting reconciliation ?",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754764995,754764995,src/txreconciliation.cpp
ariard,2021-11-23 02:32:09,nit: s/Accoring/According/g,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754767290,754767290,src/txreconciliation.cpp
ariard,2021-11-23 02:38:05,nit: s/annoyncement/announcement/g,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754768868,754768868,src/net_processing.cpp
ariard,2021-11-23 02:43:51,nit: s/chose/choose/g,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754770460,754770460,src/net_processing.cpp
ariard,2021-11-23 03:04:11,"This check means that duplicated `SENDRECON` are processed as protocol violation, correct ?\n\nI wonder if we have Bitcoin nodes widely deployed over non-TCP stack, where the packet dedup is not guaranteed. I guess that should be so rare a case, though if we learn some and the duplication rate is high enough to trigger this reconciliation failure we can still relax this check. ",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754775773,754775773,src/txreconciliation.cpp
ariard,2021-11-23 03:05:20,"Note, the BIP330 says version != 1 should be ignored, making the 0 case a protocol violation should be reflected in the BIP, I think.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754776078,754776078,src/txreconciliation.cpp
ariard,2021-11-23 03:16:12,"Shouldn't be a `&&`, otherwise we might have staling state for the peer ?",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754778838,754778838,src/txreconciliation.cpp
naumenkogs,2021-11-23 10:37:58,"Yeah I think you are probably right.\nWhat should i do with your comment though?",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754992721,754992721,src/txreconciliation.cpp
naumenkogs,2021-11-23 10:45:40,"Yeah good point, keeping it open for now so that maybe others comment if they want to relax the check.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755000332,755000332,src/txreconciliation.cpp
naumenkogs,2021-11-23 10:51:26,Done in 38e66d31f7eb47cd2566003e8d0d8808b129eabb,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755005764,755005764,src/txreconciliation.cpp
naumenkogs,2021-11-23 10:51:49,https://github.com/naumenkogs/bips/commit/38e66d31f7eb47cd2566003e8d0d8808b129eabb,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755006158,755006158,src/txreconciliation.cpp
naumenkogs,2021-11-23 10:53:42,"This line only defines whether we print logs or not, so I don't understand how does it affect the actual behavior.\nThe ideas is that it logs deleting the state for both pre-registered and registered peers. \n\nThe previous 2 lines taking care of deletion are indeed `&&`.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755007682,755007682,src/txreconciliation.cpp
naumenkogs,2021-11-23 10:54:49,"In BIP already: `Since sketches are based on the WTXIDs, the negotiation and support of Erlay should be enabled only if both peers signal BIP-339 support. `",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755008629,755008629,src/net_processing.cpp
ariard,2021-11-23 23:52:53,"I don't remember if the boost framework has an equivalent of the rust's `should_panic`, if so maybe test duplicated registration ? Should hit the assert.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755594349,755594349,src/test/txreconciliation_tests.cpp
ariard,2021-11-24 00:09:55,I've grepped the phrase in https://github.com/bitcoin/bips/blob/master/bip-0330.mediawiki and I can't find it ? Are we sure we're looking on the same version of the BIP?,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755600979,755600979,src/net_processing.cpp
ariard,2021-11-24 00:14:53,"I would say add a ""If the reconciliation roles are updated, `RECON_VERSION` should be bumped"" comment ?\n\nI think it's nice to ease future reconciliation development or extension by laying out clearly what should be updated or taken care of by the ones doing the work. A good chunk of today p2p mechanisms aren't that much documented in that regard. ",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755602732,755602732,src/txreconciliation.cpp
ariard,2021-11-24 00:18:02,"> The ideas is that it logs deleting the state for both pre-registered and registered peers.\n\nI understand. Maybe maybe the log comment could have a ternary and print ""salt_erased"" or ""state_erased"" to be more meaningful. Though that's really low-level information likely only relevant for debug/hacking.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755603737,755603737,src/txreconciliation.cpp
naumenkogs,2021-11-24 08:15:55,"An up-to-date BIP version is linked in the first post of this PR. This link: https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki\n\nAt some point we want to merge it to the bip repo, but probably later.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755791452,755791452,src/net_processing.cpp
naumenkogs,2021-11-24 08:19:46,ack,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755794046,755794046,src/txreconciliation.cpp
naumenkogs,2021-11-24 08:24:56,"Yeah that was my problem as well, not sure how to test assertions failed.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755797839,755797839,src/test/txreconciliation_tests.cpp
sipa,2021-11-25 14:49:13,"Bitcoin P2P connections are stateful, so you can't generally run them over say a UDP stack anyway.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r756954122,756954122,src/txreconciliation.cpp
ariard,2021-11-26 03:24:41,Thanks for the pointer. Well the update warning could be in bold :p,https://github.com/bitcoin/bitcoin/pull/23443#discussion_r757207389,757207389,src/net_processing.cpp
MarcoFalke,2021-11-29 07:58:42,"would be nice to put this into the `node` directory. There is really no way to do anything tx-relay related without a full node.\n\nAlso, as you are putting this into libserver, for clarity the file should also be in the right directory.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110257,758110257,src/Makefile.am
MarcoFalke,2021-11-29 07:59:43,"nit: \n```suggestion\nextern const char* SENDRECON;\n```",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110848,758110848,src/protocol.h
MarcoFalke,2021-11-29 08:02:09,"Assertions can't be tested in unit tests. If this was an exception, it could be tested.",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758112133,758112133,src/test/txreconciliation_tests.cpp
mzumsande,2021-11-30 00:52:51,"Isn't this a problem in the case of a block-relay-only connection?\nIf I initiate an outbound block-relay-only connection, I set `m_tx_relay=nullptr` for this peer, don't send  SENDRECON and set `fRelay=0` in my version msg.\nMy peer gets an inbound connection, will set `pfrom.m_tx_relay->fRelayTxes` to false, but will still send out SENDRECON because `m_tx_relay!=nullptr`.\nSo wouldn't  I then",https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726,758847726,src/net_processing.cpp
