[
  {
    "sha": "2227fc4e6203064b14e99bcf453601bd263a0196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjI3ZmM0ZTYyMDMwNjRiMTRlOTliY2Y0NTM2MDFiZDI2M2EwMTk2",
    "commit": {
      "author": {
        "name": "windsok",
        "email": "windsok@protonmail.com",
        "date": "2021-05-07T01:21:06Z"
      },
      "committer": {
        "name": "windsok",
        "email": "windsok@protonmail.com",
        "date": "2021-05-07T01:21:06Z"
      },
      "message": "test: minor fixes & improvements for files linter test\n\nUpdates the lint-files.py lint test:\n* Use a context manager when opening files, so that files are closed.\n* Use the -z flag when shelling out to git ls-files so that we can catch newlines\n  and other weird control characters in filenames",
      "tree": {
        "sha": "4229febdb031e606d1f4044a12283ddd7b9a8264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4229febdb031e606d1f4044a12283ddd7b9a8264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2227fc4e6203064b14e99bcf453601bd263a0196",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2227fc4e6203064b14e99bcf453601bd263a0196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2227fc4e6203064b14e99bcf453601bd263a0196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2227fc4e6203064b14e99bcf453601bd263a0196/comments",
    "author": {
      "login": "windsok",
      "id": 8359865,
      "node_id": "MDQ6VXNlcjgzNTk4NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8359865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/windsok",
      "html_url": "https://github.com/windsok",
      "followers_url": "https://api.github.com/users/windsok/followers",
      "following_url": "https://api.github.com/users/windsok/following{/other_user}",
      "gists_url": "https://api.github.com/users/windsok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/windsok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/windsok/subscriptions",
      "organizations_url": "https://api.github.com/users/windsok/orgs",
      "repos_url": "https://api.github.com/users/windsok/repos",
      "events_url": "https://api.github.com/users/windsok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/windsok/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "windsok",
      "id": 8359865,
      "node_id": "MDQ6VXNlcjgzNTk4NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8359865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/windsok",
      "html_url": "https://github.com/windsok",
      "followers_url": "https://api.github.com/users/windsok/followers",
      "following_url": "https://api.github.com/users/windsok/following{/other_user}",
      "gists_url": "https://api.github.com/users/windsok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/windsok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/windsok/subscriptions",
      "organizations_url": "https://api.github.com/users/windsok/orgs",
      "repos_url": "https://api.github.com/users/windsok/repos",
      "events_url": "https://api.github.com/users/windsok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/windsok/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fcf66af682651fd5dca3fa6164fc7c3ecb2c704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fcf66af682651fd5dca3fa6164fc7c3ecb2c704",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fcf66af682651fd5dca3fa6164fc7c3ecb2c704"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 12,
      "deletions": 16
    },
    "files": [
      {
        "sha": "400921e5f3961cfb64e66f81ffd323e160949c0d",
        "filename": "test/lint/lint-files.py",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227fc4e6203064b14e99bcf453601bd263a0196/test/lint/lint-files.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227fc4e6203064b14e99bcf453601bd263a0196/test/lint/lint-files.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-files.py?ref=2227fc4e6203064b14e99bcf453601bd263a0196",
        "patch": "@@ -13,8 +13,8 @@\n from subprocess import check_output\n from typing import Optional, NoReturn\n \n-CMD_ALL_FILES = \"git ls-files --full-name\"\n-CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_ALL_FILES = \"git ls-files -z --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files -z --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n CMD_SHEBANG_FILES = \"git grep --full-name --line-number -I '^#!'\"\n ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n@@ -72,16 +72,13 @@ def check_all_filenames() -> int:\n     Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n     alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n     \"\"\"\n-    # We avoid using rstrip() to ensure we catch filenames which accidentally include trailing whitespace\n-    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").split(\"\\n\")\n-    filenames = [filename for filename in filenames if filename != \"\"]  # removes the trailing empty list element\n-\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").rstrip(\"\\0\").split(\"\\0\")\n     filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n     failed_tests = 0\n     for filename in filenames:\n         if not filename_regex.match(filename):\n             print(\n-                f\"\"\"File \"{filename}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+                f\"\"\"File {repr(filename)} does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n             )\n             failed_tests += 1\n     return failed_tests\n@@ -94,17 +91,14 @@ def check_source_filenames() -> int:\n \n     Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n     \"\"\"\n-    # We avoid using rstrip() to ensure we catch filenames which accidentally include trailing whitespace\n-    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").split(\"\\n\")\n-    filenames = [filename for filename in filenames if filename != \"\"]  # removes the trailing empty list element\n-\n+    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").rstrip(\"\\0\").split(\"\\0\")\n     filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n     filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n     failed_tests = 0\n     for filename in filenames:\n         if not filename_regex.match(filename) and not filename_exception_regex.match(filename):\n             print(\n-                f\"\"\"File \"{filename}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+                f\"\"\"File {repr(filename)} does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n             )\n             failed_tests += 1\n     return failed_tests\n@@ -116,15 +110,16 @@ def check_all_file_permissions() -> int:\n \n     Additionally checks that for executable files, the file contains a shebang line\n     \"\"\"\n-    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").rstrip(\"\\0\").split(\"\\0\")\n     failed_tests = 0\n     for filename in filenames:\n         file_meta = FileMeta(filename)\n         if file_meta.permissions == ALLOWED_PERMISSION_EXECUTABLES:\n-            shebang = open(filename, \"rb\").readline().rstrip(b\"\\n\")\n+            with open(filename, \"rb\") as f:\n+                shebang = f.readline().rstrip(b\"\\n\")\n \n             # For any file with executable permissions the first line must contain a shebang\n-            if shebang[:2] != b\"#!\":\n+            if not shebang.startswith(b\"#!\"):\n                 print(\n                     f\"\"\"File \"{filename}\" has permission {ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {filename}\" to make it non-executable.\"\"\"\n                 )\n@@ -176,7 +171,8 @@ def check_shebang_file_permissions() -> int:\n \n             # *.py files which don't contain an `if __name__ == '__main__'` are not expected to be executed directly\n             if file_meta.extension == \"py\":\n-                file_data = open(filename, \"r\", encoding=\"utf8\").read()\n+                with open(filename, \"r\", encoding=\"utf8\") as f:\n+                    file_data = f.read()\n                 if not re.search(\"\"\"if __name__ == ['\"]__main__['\"]:\"\"\", file_data):\n                     continue\n "
      }
    ]
  }
]