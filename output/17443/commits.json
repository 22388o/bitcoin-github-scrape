[
  {
    "sha": "b0294d38f54096133293e2776c59784a7d9e63e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDI5NGQzOGY1NDA5NjEzMzI5M2UyNzc2YzU5Nzg0YTdkOWU2M2U3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-12-18T18:19:35Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-06-04T01:06:28Z"
      },
      "message": "[consensus] Move IsFinalTx from tx_verify.h to tx_check.h\n\nContext-independent IsFinalTx doesn't rely on chain or mempool state\nso moving it to tx_check let it being used by wallet code without\nlinking server code in following commits.",
      "tree": {
        "sha": "0d1e2077dc47b6bf279e6c39a41922667a482870",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d1e2077dc47b6bf279e6c39a41922667a482870"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0294d38f54096133293e2776c59784a7d9e63e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0294d38f54096133293e2776c59784a7d9e63e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0294d38f54096133293e2776c59784a7d9e63e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0294d38f54096133293e2776c59784a7d9e63e7/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a1c0e5fce13911252a135bdce4ffc09c24d23791",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c0e5fce13911252a135bdce4ffc09c24d23791",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c0e5fce13911252a135bdce4ffc09c24d23791"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 23,
      "deletions": 19
    },
    "files": [
      {
        "sha": "b398c8ae791f9f6ecd878627ece1b5aba77f3740",
        "filename": "src/consensus/tx_check.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_check.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_check.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.cpp?ref=b0294d38f54096133293e2776c59784a7d9e63e7",
        "patch": "@@ -56,3 +56,16 @@ bool CheckTransaction(const CTransaction& tx, TxValidationState& state)\n \n     return true;\n }\n+\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if (tx.nLockTime == 0)\n+        return true;\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    for (const auto& txin : tx.vin) {\n+        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n+            return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "7699cf1269b8de838cd5bf993bb08e9bef8b390c",
        "filename": "src/consensus/tx_check.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.h?ref=b0294d38f54096133293e2776c59784a7d9e63e7",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_CONSENSUS_TX_CHECK_H\n #define BITCOIN_CONSENSUS_TX_CHECK_H\n \n+#include <stdint.h>\n+\n /**\n  * Context-independent transaction checking code that can be called outside the\n  * bitcoin server and doesn't depend on chain or mempool state. Transaction\n@@ -17,4 +19,10 @@ class TxValidationState;\n \n bool CheckTransaction(const CTransaction& tx, TxValidationState& state);\n \n+/**\n+ * Check if transaction is final and can be included in a block with the\n+ * specified height and time. Consensus critical.\n+ */\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n+\n #endif // BITCOIN_CONSENSUS_TX_CHECK_H"
      },
      {
        "sha": "fd6843a0be77455f1e01ededf11071eeb5297701",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=b0294d38f54096133293e2776c59784a7d9e63e7",
        "patch": "@@ -14,19 +14,6 @@\n #include <coins.h>\n #include <util/moneystr.h>\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if (tx.nLockTime == 0)\n-        return true;\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    for (const auto& txin : tx.vin) {\n-        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n-            return false;\n-    }\n-    return true;\n-}\n-\n std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n {\n     assert(prevHeights->size() == tx.vin.size());"
      },
      {
        "sha": "35dfad2c5afe333fb5393d021e4305016cf03025",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0294d38f54096133293e2776c59784a7d9e63e7/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=b0294d38f54096133293e2776c59784a7d9e63e7",
        "patch": "@@ -54,12 +54,6 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n  */\n int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n \n-/**\n- * Check if transaction is final and can be included in a block with the\n- * specified height and time. Consensus critical.\n- */\n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n-\n /**\n  * Calculates the block height and previous block's median time past at\n  * which the transaction will be considered final in the context of BIP 68."
      },
      {
        "sha": "67c9b5306cfc3c7f6eedc57e48c613217f4ccb9e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0294d38f54096133293e2776c59784a7d9e63e7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0294d38f54096133293e2776c59784a7d9e63e7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b0294d38f54096133293e2776c59784a7d9e63e7",
        "patch": "@@ -11,6 +11,7 @@\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n+#include <consensus/tx_check.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <policy/feerate.h>"
      },
      {
        "sha": "5de45c8a5c04d5cfab9b60ca0938d9db7855aa3c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0294d38f54096133293e2776c59784a7d9e63e7/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0294d38f54096133293e2776c59784a7d9e63e7/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b0294d38f54096133293e2776c59784a7d9e63e7",
        "patch": "@@ -6,6 +6,7 @@\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n+#include <consensus/tx_check.h>\n #include <consensus/tx_verify.h>\n #include <miner.h>\n #include <policy/policy.h>"
      }
    ]
  },
  {
    "sha": "1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDIzNDViMzFmNjM4Y2ZkMWY1ODFhNGNmNjdkM2E1NjI0ZTRkMDM2",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-12-17T21:11:01Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-06-04T01:09:08Z"
      },
      "message": "[wallet] Add m_last_block_mediam_time_past in CWallet\n\nExtend Notifications::BlockConnected/BlockDisconnected with\nmedian_time_past parameter.\n\nUsed in next commit.",
      "tree": {
        "sha": "f57d6381076d2be90897ba0b87bc3ec2274db9a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f57d6381076d2be90897ba0b87bc3ec2274db9a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b0294d38f54096133293e2776c59784a7d9e63e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0294d38f54096133293e2776c59784a7d9e63e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0294d38f54096133293e2776c59784a7d9e63e7"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e7c210fecd40e7944afc02893f43784ef3de7a5b",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
        "patch": "@@ -69,11 +69,11 @@ class NotificationsProxy : public CValidationInterface\n     }\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->blockConnected(*block, index->nHeight);\n+        m_notifications->blockConnected(*block, index->nHeight, index->GetMedianTimePast());\n     }\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->blockDisconnected(*block, index->nHeight);\n+        m_notifications->blockDisconnected(*block, index->nHeight, index->pprev->GetMedianTimePast());\n     }\n     void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {"
      },
      {
        "sha": "39dbfad2ef286cc4dc9f4c36ca06414fa9d07a55",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
        "patch": "@@ -241,8 +241,8 @@ class Chain\n         virtual ~Notifications() {}\n         virtual void transactionAddedToMempool(const CTransactionRef& tx) {}\n         virtual void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) {}\n-        virtual void blockConnected(const CBlock& block, int height) {}\n-        virtual void blockDisconnected(const CBlock& block, int height) {}\n+        virtual void blockConnected(const CBlock& block, int height, int64_t median_time_past) {}\n+        virtual void blockDisconnected(const CBlock& block, int height, int64_t prev_median_time_past) {}\n         virtual void updatedBlockTip() {}\n         virtual void chainStateFlushed(const CBlockLocator& locator) {}\n     };"
      },
      {
        "sha": "2b769736d21053f8e34c5b292d06b94363eb831d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
        "patch": "@@ -1149,20 +1149,21 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n     }\n }\n \n-void CWallet::blockConnected(const CBlock& block, int height)\n+void CWallet::blockConnected(const CBlock& block, int height, int64_t median_time_past)\n {\n     const uint256& block_hash = block.GetHash();\n     LOCK(cs_wallet);\n \n     m_last_block_processed_height = height;\n     m_last_block_processed = block_hash;\n+    m_last_block_median_time_past = median_time_past;\n     for (size_t index = 0; index < block.vtx.size(); index++) {\n         SyncTransaction(block.vtx[index], {CWalletTx::Status::CONFIRMED, height, block_hash, (int)index});\n         transactionRemovedFromMempool(block.vtx[index], MemPoolRemovalReason::BLOCK);\n     }\n }\n \n-void CWallet::blockDisconnected(const CBlock& block, int height)\n+void CWallet::blockDisconnected(const CBlock& block, int height, int64_t prev_median_time_past)\n {\n     LOCK(cs_wallet);\n \n@@ -1172,6 +1173,7 @@ void CWallet::blockDisconnected(const CBlock& block, int height)\n     // future with a stickier abandoned state or even removing abandontransaction call.\n     m_last_block_processed_height = height - 1;\n     m_last_block_processed = block.hashPrevBlock;\n+    m_last_block_median_time_past = prev_median_time_past;\n     for (const CTransactionRef& ptx : block.vtx) {\n         SyncTransaction(ptx, {CWalletTx::Status::UNCONFIRMED, /* block height */ 0, /* block hash */ {}, /* index */ 0});\n     }\n@@ -3941,9 +3943,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (tip_height) {\n         walletInstance->m_last_block_processed = chain.getBlockHash(*tip_height);\n         walletInstance->m_last_block_processed_height = *tip_height;\n+        chain.findBlock(walletInstance->m_last_block_processed, FoundBlock().mtpTime(walletInstance->m_last_block_median_time_past));\n     } else {\n         walletInstance->m_last_block_processed.SetNull();\n         walletInstance->m_last_block_processed_height = -1;\n+        walletInstance->m_last_block_median_time_past = 0;\n     }\n \n     if (tip_height && *tip_height != rescan_height)"
      },
      {
        "sha": "95ae2e015e2305055b8e072a2dddd56175cedf01",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2345b31f638cfd1f581a4cf67d3a5624e4d036/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
        "patch": "@@ -716,6 +716,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     int m_last_block_processed_height GUARDED_BY(cs_wallet) = -1;\n \n+    /* Median time-past of last block processed is used by wallet to know finality of transactions. */\n+    int64_t m_last_block_median_time_past GUARDED_BY(cs_wallet) = 0;\n+\n     std::map<OutputType, ScriptPubKeyMan*> m_external_spk_managers;\n     std::map<OutputType, ScriptPubKeyMan*> m_internal_spk_managers;\n \n@@ -900,8 +903,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true);\n     bool LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void transactionAddedToMempool(const CTransactionRef& tx) override;\n-    void blockConnected(const CBlock& block, int height) override;\n-    void blockDisconnected(const CBlock& block, int height) override;\n+    void blockConnected(const CBlock& block, int height, int64_t median_time_past) override;\n+    void blockDisconnected(const CBlock& block, int height, int64_t prev_median_time_past) override;\n     void updatedBlockTip() override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n "
      }
    ]
  },
  {
    "sha": "06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmE3MDNhNzkzOGRlOWFiN2Q3ZjJiNTVjZjg3MWVkYTRhZjVjYzg4",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-12-17T21:11:50Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-06-04T01:20:17Z"
      },
      "message": "[wallet] Replace Chain::checkFinal by CWallet::CheckFinalWalletTx\n\nBy caching tip median time-past, wallet can do transactions\nfinality calculation without accessing chain state.\n\nFix misuage of CheckFinalTx, which was called with default flags\nargument by implementation of Chain::checkFinal, triggering\nfinality evaluation based on GetAdjustedTime instead of consensus\nand standard rules of BIP 113.",
      "tree": {
        "sha": "fc435cc7e7bc8b71dbbd4d6d6e1d3a09be3130b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc435cc7e7bc8b71dbbd4d6d6e1d3a09be3130b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2345b31f638cfd1f581a4cf67d3a5624e4d036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2345b31f638cfd1f581a4cf67d3a5624e4d036"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 28,
      "deletions": 5
    },
    "files": [
      {
        "sha": "50aae6eeed2649ab6cb46649d5b31ae75e33d0e2",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
        "patch": "@@ -60,15 +60,15 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(CWallet& wallet, const CWalletTx& wtx)\n+WalletTxStatus MakeWalletTxStatus(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     WalletTxStatus result;\n     result.block_height = wtx.m_confirm.block_height > 0 ? wtx.m_confirm.block_height : std::numeric_limits<int>::max();\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n-    result.is_final = wallet.chain().checkFinalTx(*wtx.tx);\n+    result.is_final = wallet.CheckFinalWalletTx(*wtx.tx);\n     result.is_trusted = wtx.IsTrusted();\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();"
      },
      {
        "sha": "dcccd944814d7bdd2d673c3a0a8792fbc343f950",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
        "patch": "@@ -1041,7 +1041,7 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !pwallet->chain().checkFinalTx(*wtx.tx)) {\n+        if (wtx.IsCoinBase() || !pwallet->CheckFinalWalletTx(*wtx.tx)) {\n             continue;\n         }\n "
      },
      {
        "sha": "5fdc96855b1627a0099d2ab5ee5c533e7aaead36",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chain.h>\n #include <consensus/consensus.h>\n+#include <consensus/tx_check.h>\n #include <consensus/validation.h>\n #include <fs.h>\n #include <interfaces/chain.h>\n@@ -1944,14 +1945,16 @@ bool CWalletTx::InMempool() const\n \n bool CWalletTx::IsTrusted() const\n {\n+    AssertLockHeld(pwallet->cs_wallet);\n     std::set<uint256> s;\n     return IsTrusted(s);\n }\n \n bool CWalletTx::IsTrusted(std::set<uint256>& trusted_parents) const\n {\n+    AssertLockHeld(pwallet->cs_wallet);\n     // Quick answer in most cases\n-    if (!pwallet->chain().checkFinalTx(*tx)) return false;\n+    if (!pwallet->CheckFinalWalletTx(*tx)) return false;\n     int nDepth = GetDepthInMainChain();\n     if (nDepth >= 1) return true;\n     if (nDepth < 0) return false;\n@@ -2111,7 +2114,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n         const uint256& wtxid = entry.first;\n         const CWalletTx& wtx = entry.second;\n \n-        if (!chain().checkFinalTx(*wtx.tx)) {\n+        if (!CheckFinalWalletTx(*wtx.tx)) {\n             continue;\n         }\n \n@@ -4142,6 +4145,23 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n+bool CWallet::CheckFinalWalletTx(const CTransaction& tx) const\n+{\n+    AssertLockHeld(cs_wallet);\n+    // The wallet is not doing historical validation work, it's only\n+    // interested in the nLocktime evaluation as enforced on\n+    // the current chain tip (BIP 113). If there are forks changing\n+    // this in the future, the wallet should be updated.\n+\n+    // CheckFinalWalletTx() uses m_last_block_processed_height +1\n+    // to evaluate nLockTime because when IsFinalTx() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // IsFinalTx() with one more than m_last_block_processed_height.\n+    return IsFinalTx(tx, m_last_block_processed_height + 1, m_last_block_median_time_past);\n+}\n+\n std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors) const {\n     std::vector<OutputGroup> groups;\n     std::map<CTxDestination, OutputGroup> gmap;"
      },
      {
        "sha": "a7a91c0b929edbcf70ac15d2c9e5d6e673b21dc9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06a703a7938de9ab7d7f2b55cf871eda4af5cc88/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
        "patch": "@@ -1269,6 +1269,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label);\n+\n+    /** Check wallet tx finality according to current consensus-rules */\n+    bool CheckFinalWalletTx(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "d55ba31ddd0f755db763db600413b2ce31a5466c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTViYTMxZGRkMGY3NTVkYjc2M2RiNjAwNDEzYjJjZTMxYTU0NjZj",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-11T01:06:07Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-06-04T01:20:26Z"
      },
      "message": "[validation] Fix CheckFinalTx comment ambiguity around softforks.\n\nnBlockTime semantic is selected using a bit-flags corresponding\nto current soft-fork rules. Comment around this bit-flags was\npreviously ambiguous meaning that not soft-fork rules affecting\nnBlockTime was currently active, which is false since BIP113\ndeployement.",
      "tree": {
        "sha": "6db7e28e343e144cdbe711773a41b8e1fdff5b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6db7e28e343e144cdbe711773a41b8e1fdff5b58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d55ba31ddd0f755db763db600413b2ce31a5466c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d55ba31ddd0f755db763db600413b2ce31a5466c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d55ba31ddd0f755db763db600413b2ce31a5466c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d55ba31ddd0f755db763db600413b2ce31a5466c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a703a7938de9ab7d7f2b55cf871eda4af5cc88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06a703a7938de9ab7d7f2b55cf871eda4af5cc88"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "edd41ce4d78a90e106b26fb568a67580454e37d7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d55ba31ddd0f755db763db600413b2ce31a5466c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d55ba31ddd0f755db763db600413b2ce31a5466c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d55ba31ddd0f755db763db600413b2ce31a5466c",
        "patch": "@@ -207,12 +207,9 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n \n-    // By convention a negative value for flags indicates that the\n-    // current network-enforced consensus rules should be used. In\n-    // a future soft-fork scenario that would mean checking which\n-    // rules would be enforced for the next block and setting the\n-    // appropriate flags. At the present time no soft-forks are\n-    // scheduled, so no flags are set.\n+    // By convention a negative value for flags indicates that no\n+    // soft-forked consensus rules should be used. Setting appropriate\n+    // flags selects which rules will be enforced for the next block.\n     flags = std::max(flags, 0);\n \n     // CheckFinalTx() uses ::ChainActive().Height()+1 to evaluate"
      }
    ]
  }
]