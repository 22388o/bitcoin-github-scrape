[
  {
    "sha": "fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQzNjI2NjExZjRhNzZjYmMzNjFlYTg5ZTQ5ODlmODBkMmZhN2Q3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-01T14:52:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-01T22:03:26Z"
      },
      "message": "test_runner: Remove travis specific code",
      "tree": {
        "sha": "229f90bd1f42041c592c3757f79cd7ec4251d91e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/229f90bd1f42041c592c3757f79cd7ec4251d91e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb23guAAoJEM4rdWl+aaVIwBAL/jg7JHoUv+gyTk5RG/EhbgNP\nQ3/Y9sg6Ag9XFjSFryMErI9KCDf5ubSoof2yn7kQMOfYChMF0lIj/qx3jLy7oxcW\nts+/y1K6DbJOH+d/prHH9UTk2Sz5xlqDgZ0f83SivrJQfw2maVVQjAF3G5koHgkK\n6NElAjT9227TKot0es+GG7KJAtEQLZgSKMv+TBcuxLyW+y5HtmmHkxg8kAPW0Zdr\n58SYAbvHgsyNtV7SiuZsBmcwtx+Q4b8yqIjE9WJ/OhG6puT3WQ67La/oKv8R0ZCx\nPbDognGzFTF1sixwN//tdCcckQ5CQmuX6DVK58D0j+KgbyCmmhvrb/yR0bh9Rkb7\npErnRd3vKXlSEbpxWS/jHACY/KMVxpxgRXgsJDUu0RsNvKecYkGPNrMfoxOZPr+i\nPrg+KSJIra0+HYHO4vM+sIKarknzXz3cAvYncaIHNK11oVWtMaLPQYTfIfbDgu0M\nYT65EiYsh6fFLTBe8X5OqH5KC1e51qxOVx7p31omVA==\n=4g72\n-----END PGP SIGNATURE-----",
        "payload": "tree 229f90bd1f42041c592c3757f79cd7ec4251d91e\nparent 6a095bc5f239e9345a245c3c877b650a1d054354\nauthor MarcoFalke <falke.marco@gmail.com> 1541083937 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1541109806 -0400\n\ntest_runner: Remove travis specific code\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a095bc5f239e9345a245c3c877b650a1d054354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a095bc5f239e9345a245c3c877b650a1d054354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a095bc5f239e9345a245c3c877b650a1d054354"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 26,
      "deletions": 18
    },
    "files": [
      {
        "sha": "66958b75e70d7da6cb66e9c5840eee69470f5bd0",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
        "patch": "@@ -61,5 +61,5 @@ test_script:\n - ps:  src\\bench_bitcoin.exe -evals=1 -scaling=0\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n-- cmd: python test\\functional\\test_runner.py --force --quiet --combinedlogslen=4000\n+- cmd: python test\\functional\\test_runner.py --ci --force --quiet --combinedlogslen=4000\n deploy: off"
      },
      {
        "sha": "528d106aaff9741637b24f16766dddd5d35d6168",
        "filename": ".travis/test_06_script.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/.travis/test_06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/.travis/test_06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script.sh?ref=fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
        "patch": "@@ -62,6 +62,6 @@ fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD functional-tests\n-  DOCKER_EXEC test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet --failfast ${extended}\n+  DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 --coverage --quiet --failfast ${extended}\n   END_FOLD\n fi"
      },
      {
        "sha": "8cbc9655c6114cf2d2bfb46fd6f0306930c475a3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa43626611f4a76cbc361ea89e4989f80d2fa7d7/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fa43626611f4a76cbc361ea89e4989f80d2fa7d7",
        "patch": "@@ -68,9 +68,6 @@\n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n-# 20 minutes represented in seconds\n-TRAVIS_TIMEOUT_DURATION = 20 * 60\n-\n BASE_SCRIPTS = [\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n@@ -216,6 +213,7 @@ def main():\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--combinedlogslen', '-c', type=int, default=0, help='print a combined log (of length n lines) from all test nodes and test framework to the console on failure.')\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--ci', action='store_true', help='Run checks and code that are usually only enabled in a continuous integration environment')\n     parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n     parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n@@ -306,25 +304,26 @@ def main():\n         subprocess.check_call([sys.executable, os.path.join(config[\"environment\"][\"SRCDIR\"], 'test', 'functional', test_list[0].split()[0]), '-h'])\n         sys.exit(0)\n \n-    check_script_list(config[\"environment\"][\"SRCDIR\"])\n+    check_script_list(src_dir=config[\"environment\"][\"SRCDIR\"], fail_on_warn=args.ci)\n     check_script_prefixes()\n \n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n \n     run_tests(\n-        test_list,\n-        config[\"environment\"][\"SRCDIR\"],\n-        config[\"environment\"][\"BUILDDIR\"],\n-        tmpdir,\n+        test_list=test_list,\n+        src_dir=config[\"environment\"][\"SRCDIR\"],\n+        build_dir=config[\"environment\"][\"BUILDDIR\"],\n+        tmpdir=tmpdir,\n         jobs=args.jobs,\n         enable_coverage=args.coverage,\n         args=passon_args,\n         combined_logs_len=args.combinedlogslen,\n-        failfast=args.failfast\n+        failfast=args.failfast,\n+        runs_ci=args.ci,\n     )\n \n-def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False):\n+def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False, runs_ci):\n     args = args or []\n \n     # Warn if bitcoind is already running (unix only)\n@@ -359,7 +358,14 @@ def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=Fal\n             raise\n \n     #Run Tests\n-    job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)\n+    job_queue = TestHandler(\n+        num_tests_parallel=jobs,\n+        tests_dir=tests_dir,\n+        tmpdir=tmpdir,\n+        test_list=test_list,\n+        flags=flags,\n+        timeout_duration=20 * 60 if runs_ci else float('inf'),  # in seconds\n+    )\n     start_time = time.time()\n     test_results = []\n \n@@ -440,11 +446,12 @@ class TestHandler:\n     Trigger the test scripts passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, tests_dir, tmpdir, test_list=None, flags=None):\n-        assert(num_tests_parallel >= 1)\n+    def __init__(self, *, num_tests_parallel, tests_dir, tmpdir, test_list, flags, timeout_duration):\n+        assert num_tests_parallel >= 1\n         self.num_jobs = num_tests_parallel\n         self.tests_dir = tests_dir\n         self.tmpdir = tmpdir\n+        self.timeout_duration = timeout_duration\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -479,7 +486,7 @@ def get_next(self):\n             time.sleep(.5)\n             for job in self.jobs:\n                 (name, start_time, proc, testdir, log_out, log_err) = job\n-                if os.getenv('TRAVIS') == 'true' and int(time.time() - start_time) > TRAVIS_TIMEOUT_DURATION:\n+                if int(time.time() - start_time) > self.timeout_duration:\n                     # In travis, timeout individual tests (to stop tests hanging and not providing useful output).\n                     proc.send_signal(signal.SIGINT)\n                 if proc.poll() is not None:\n@@ -557,7 +564,7 @@ def check_script_prefixes():\n         raise AssertionError(\"Some tests are not following naming convention!\")\n \n \n-def check_script_list(src_dir):\n+def check_script_list(*, src_dir, fail_on_warn):\n     \"\"\"Check scripts directory.\n \n     Check that there are no scripts in the functional tests directory which are\n@@ -567,10 +574,11 @@ def check_script_list(src_dir):\n     missed_tests = list(python_files - set(map(lambda x: x.split()[0], ALL_SCRIPTS + NON_SCRIPTS)))\n     if len(missed_tests) != 0:\n         print(\"%sWARNING!%s The following scripts are not being run: %s. Check the test lists in test_runner.py.\" % (BOLD[1], BOLD[0], str(missed_tests)))\n-        if os.getenv('TRAVIS') == 'true':\n+        if fail_on_warn:\n             # On travis this warning is an error to prevent merging incomplete commits into master\n             sys.exit(1)\n \n+\n class RPCCoverage():\n     \"\"\"\n     Coverage reporting utilities for test_runner."
      }
    ]
  }
]