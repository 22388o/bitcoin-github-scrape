jmcorgan,2014-07-27T21:23:58Z,"Pull tester unhappy, but merge, default configure, compile, and make check all pass ok here.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50286256,50286256,
laanwj,2014-07-28T07:16:42Z,"> The ZeroMQ feature in Bitcoin Core uses only a very small part of the\n> ZeroMQ C API, and is thus compatible with any version of ZeroMQ\n> from 2.1 onward\n\nThanks for that. For obelisk I had to find so many wrappers, high level wrappers, c++ wrappers for high-level wrappers (only some of them with an ubuntu package, which ofc was too old) that at some point I gave up.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50306810,50306810,
laanwj,2014-07-28T07:30:45Z,Looks good to me apart from the nits -- async notification is superior to polling. Only minimal impact on the current code and is a no-op if `--enable-zmq` isn't passed to configure.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50307707,50307707,
jmcorgan,2014-07-28T15:06:47Z,"Per feedback, updated and rebased commit:\n- Removed unintended whitespace changes\n- Moved contrib/zmq/README.md to doc/zmq.md\n- New logging category 'zmq' created\n- Cleaned up logging\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50350824,50350824,
jgarzik,2014-07-28T15:20:31Z,"Concept ACK.  Supporting ZeroMQ in this fashion (publish public data) is a useful feature.\n\nOne of the problems the Linux kernel ran into early on was a profusion of #ifdef'd features.  Bitcoin Core does not have this problem, but it is creeping in that direction.\n\nAs mentioned in another github issue days ago, conditionally compiled code is evil.  Such code is only compiled by a few, rather t",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50352710,50352710,
jmcorgan,2014-07-28T15:28:27Z,"I intentionally made this such that you have to explicitly --enable-zmq in order to compile it in, for testing purposes.  If this gets merged, at some point we'll decide to enable it for everyone.  At that point, I'll rework things so that there are no ifdef's--instead, if libzmq-dev is not detected at configure time, the function calls become NOPs internally.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50353882,50353882,
jgarzik,2014-07-28T15:30:24Z,"There should be no need to disable zmq by default at compile time.  Disabled at runtime is sufficient.\n\nTypical pattern is for configure to find a library and enable the building of that feature automatically, without --enable-foo support.  You don't want to make the user work harder, just to get new features.\n\nAlso, I'm in general strongly against doesn't-compile-by-default code.  It's a reci",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50354195,50354195,
jmcorgan,2014-07-28T15:31:56Z,I'll go ahead then and rework this to eliminate the --enable-zmq and disable the feature at runtime if libzmq-dev is not detected.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50354413,50354413,
jmcorgan,2014-07-28T15:43:22Z,Looks like I missed a logging simplification; I'll get this when I make the above changes.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50356033,50356033,
laanwj,2014-07-28T15:43:32Z,I strongly disagree with @jgarzik here. I don't want a fixed dependency on zeromq. \n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50356065,50356065,
jmcorgan,2014-07-28T15:45:15Z,"To be clear--my plan is to make it such that if ZeroMQ is missing, the feature is disabled, so there won't be a dependency.  Did I misunderstand?\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50356288,50356288,
laanwj,2014-07-28T15:46:41Z,"That's fine with me. Defaulting to having it enabled when the library is installed sounds sane. And it should still be possible to override the autodetection with `--with[out]-zeromq`, IMO.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50356485,50356485,
sipa,2014-07-28T15:48:26Z,"@jgarzik dislikes conditionally compiled code, and wants to have the ZeroMQ code always compiled (thus always having the dependency).\n\n@laanwj dislikes dependencies, and thus prefers the conditional compilation you're doing now.\n\nI agree with @laanwj here. I really want to minimize dependencies. Another way of doing it is exposing the signals interface for such notifications, and register them",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50356713,50356713,
jmcorgan,2014-07-28T22:13:43Z,"Ok, this has been reworked as follows:\n- ZMQ features are automatically implemented if libzmq-dev is found, and a warning issued if not found\n- One can disable the ZMQ features with --disable-zmq\n- All conditional code is isolated to zmqports.cpp; code becomes NOP if zmq is disabled.\n- A new RPC call, 'getzmqurl', is provided to return the configuration option -zmqpub text.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50409819,50409819,
jmcorgan,2014-07-31T05:22:05Z,Minor rebase to accommodate 'rawtx' merge.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50713743,50713743,
jtimon,2014-07-31T13:00:20Z,I didn't test it but I like what it does.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50755015,50755015,
jmcorgan,2014-08-12T08:55:18Z,Minor rebase to accommodate RPC help categorization.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-51889220,51889220,
randy-waterhouse,2014-08-17T23:12:51Z,"Suggest minor change to add check for libzmq version >=2.1 requirement.\n\nPKG_CHECK_MODULES([ZMQ],[libzmq >= 2.1],\n    [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n    [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n    AC_MSG_WARN([libzmq >=2.1 not found, disabling])\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-52438793,52438793,
jmcorgan,2014-08-18T13:50:43Z,Rebase and add zmq version check as requested.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-52494218,52494218,
BitcoinPullTester,2014-08-18T18:48:32Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4594_3c9d0c12ac2476fc8fb5de9293edbf27081b1d4e/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-52537031,52537031,
jgarzik,2014-08-30T00:18:23Z,"PR #4599 (commit c7b6117debf4ebabc464a55b840bdd7bdeb94fa3) which was just merged illustrates a useful plugin approach.  Stick one or more signals in the needed locations, and then ZMQ or other features add their own hooks.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-53942721,53942721,
jgarzik,2014-09-15T02:22:13Z,"To make the last comment more explicit, I do not like seeing ""zmq"" in main.cpp or net.cpp.\n\nThis pull request has my ACK iff the ZMQPublish*() calls are turned into ui_interface.h signals, as illustrated in c7b6117debf4ebabc464a55b840bdd7bdeb94fa3.  No objections other than that.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-55547982,55547982,
jmcorgan,2014-09-18T13:07:26Z,"Thanks for the clarification.  It will be a week or two until I can turn my attention back to this, but I'll look over the signaling mechanism and see how I can refit this patch to use that. \n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-56035118,56035118,
btcdrak,2014-11-07T16:42:32Z,needs rebased\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-62172753,62172753,
jgarzik,2014-11-07T17:12:20Z,"I'm tempted to take this patch, add signals, and re-PR.  ZMQ is conceptually acceptable AFAIK.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-62177345,62177345,
btcdrak,2014-11-07T17:17:24Z,@jgarzik do it!\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-62178083,62178083,
theuni,2014-11-07T17:54:11Z,"@jgarzik If you do, please take https://github.com/theuni/bitcoin/commit/dd8d00b63c4ced2c681e9cbfaaebb8cc9318d613 and https://github.com/theuni/bitcoin/commit/25844d3c6fcac8900aa68487f2dae0b3141f3ab6 (feel free to squash) so that travis can build. Those are quite old though, let me know if there are merge problems and I'll rebase.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-62185122,62185122,
jmcorgan,2014-11-07T18:23:08Z,"@jgarzik Go for it.  I haven't had much time to spend on bitcoin development these last few months, but I'd still like to see this get integrated.\n",https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-62189132,62189132,
laanwj,2014-11-19T11:32:56Z,Closing in favor of #5303.\n,https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-63627053,63627053,
laanwj,2014-07-28T07:13:19Z,"No whitespace changes please, they're going to be solved in one go at some point with clang-format (see #4498).\n",https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15448902,15448902,src/main.cpp
laanwj,2014-07-28T07:14:12Z,Same here - this file doesn't even need to be touched.\n,https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15448928,15448928,src/main.h
laanwj,2014-07-28T07:15:30Z,it makes sense to make this `doc/zmq.md` so that it's easier to find.\n,https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15448966,15448966,contrib/zmq/README.md
laanwj,2014-07-28T07:24:32Z,"Shouldn't this be its own category, zmq?\n",https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15449187,15449187,src/zmqports.cpp
laanwj,2014-07-28T07:25:09Z,"Errors should be logged without category, to make sure that they appear also if no debug category is passed.\n",https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15449200,15449200,src/zmqports.cpp
laanwj,2014-07-28T07:30:17Z,"Try to avoid using c_str(), we just got rid of all those - just change the function to pass a string.\n\nIn general: why do you have the one-line `zmqLog`/`zmqError` wrapper functions at all? I first assumed they would be callbacks passed to zeromq, but that doesn't seem to be the case. \n\nNo need to use ostringstream here either. Just\n\n```\nLogPrint(""zmq"",  ""PUB socket listening at %s\n"", endp",https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15449326,15449326,src/zmqports.cpp
jmcorgan,2014-07-28T08:02:46Z,"Ok.  My emacs is configured to automatically remove trailing whitespace, so this was unintended.  I'll figure out a way to make a clean diff.\n",https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15450269,15450269,src/main.cpp
jmcorgan,2014-07-28T08:03:05Z,I'll change this.\n,https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15450283,15450283,src/zmqports.cpp
laanwj,2014-07-28T10:00:01Z,Another advantage of using ogging directly is that LogPrint is 'early-out'. No formatting overhead happens at all if the log category is filtered.\n,https://github.com/bitcoin/bitcoin/pull/4594#discussion_r15454589,15454589,src/zmqports.cpp
