[
  {
    "sha": "ddf58c75739efc7509d529002975ea447a269b3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGY1OGM3NTczOWVmYzc1MDlkNTI5MDAyOTc1ZWE0NDdhMjY5YjNh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-12-20T22:20:31Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-27T16:23:50Z"
      },
      "message": "wallet: Remove sendfree\n\nThis removes the option from the wallet to not pay a fee on \"small\"\ntransactions which spend \"old\" inputs.\n\nThis code is no longer worth keeping around, as almost all miners\nprefer not to include transactions which pay no fee at all.",
      "tree": {
        "sha": "eadecbe6bb1e5f82270fcbf83b78e30cc6606007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eadecbe6bb1e5f82270fcbf83b78e30cc6606007"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddf58c75739efc7509d529002975ea447a269b3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddf58c75739efc7509d529002975ea447a269b3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddf58c75739efc7509d529002975ea447a269b3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddf58c75739efc7509d529002975ea447a269b3a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 3,
      "deletions": 60
    },
    "files": [
      {
        "sha": "0c6eaa0a37700378cae931938416400b763607a0",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf58c75739efc7509d529002975ea447a269b3a/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf58c75739efc7509d529002975ea447a269b3a/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=ddf58c75739efc7509d529002975ea447a269b3a",
        "patch": "@@ -118,9 +118,6 @@\n \n # Transaction Fee Changes in 0.10.0\n \n-# Send transactions as zero-fee transactions if possible (default: 0)\n-#sendfreetransactions=0\n-\n # Create transactions that have enough fees (or priority) so they are likely to begin confirmation within n blocks (default: 1).\n # This setting is over-ridden by the -paytxfee option.\n #txconfirmtarget=n"
      },
      {
        "sha": "445175ec2bbaff0758f74f55f5c3f4d36919b04c",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf58c75739efc7509d529002975ea447a269b3a/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf58c75739efc7509d529002975ea447a269b3a/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=ddf58c75739efc7509d529002975ea447a269b3a",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-sendfreetransactions'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "1d19c65753d3d8b7aac6595da025d6a579865f7e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf58c75739efc7509d529002975ea447a269b3a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf58c75739efc7509d529002975ea447a269b3a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ddf58c75739efc7509d529002975ea447a269b3a",
        "patch": "@@ -444,11 +444,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nChange             = 0;\n     unsigned int nBytes         = 0;\n     unsigned int nBytesInputs   = 0;\n-    double dPriority            = 0;\n-    double dPriorityInputs      = 0;\n     unsigned int nQuantity      = 0;\n-    int nQuantityUncompressed   = 0;\n-    bool fAllowFree             = false;\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n@@ -473,9 +469,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         // Amount\n         nAmount += out.tx->tx->vout[out.i].nValue;\n \n-        // Priority\n-        dPriorityInputs += (double)out.tx->tx->vout[out.i].nValue * (out.nDepth+1);\n-\n         // Bytes\n         CTxDestination address;\n         int witnessversion = 0;\n@@ -492,8 +485,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (keyid && model->getPubKey(*keyid, pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n-                if (!pubkey.IsCompressed())\n-                    nQuantityUncompressed++;\n             }\n             else\n                 nBytesInputs += 148; // in all error cases, simply assume 148 here\n@@ -525,17 +516,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         if (nPayFee > 0 && coinControl->nMinimumTotalFee > nPayFee)\n             nPayFee = coinControl->nMinimumTotalFee;\n \n-\n-        // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n-        double mempoolEstimatePriority = mempool.estimateSmartPriority(nTxConfirmTarget);\n-        dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n-        double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());\n-        fAllowFree = (dPriority >= dPriorityNeeded);\n-\n-        if (fSendFreeTransactions)\n-            if (fAllowFree && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n-                nPayFee = 0;\n-\n         if (nPayAmount > 0)\n         {\n             nChange = nAmount - nPayAmount;"
      },
      {
        "sha": "cf3c6ee1217027324e7afb81011527ff3b9ea91c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 31,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf58c75739efc7509d529002975ea447a269b3a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf58c75739efc7509d529002975ea447a269b3a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ddf58c75739efc7509d529002975ea447a269b3a",
        "patch": "@@ -39,7 +39,6 @@ CWallet* pwalletMain = NULL;\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n-bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n@@ -2449,7 +2448,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n                     nValueToSelect += nFeeRet;\n-                double dPriority = 0;\n                 // vouts to the payees\n                 for (const auto& recipient : vecSend)\n                 {\n@@ -2490,19 +2488,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n-                for (const auto& pcoin : setCoins)\n-                {\n-                    CAmount nCredit = pcoin.first->tx->vout[pcoin.second].nValue;\n-                    //The coin age after the next block (depth+1) is used instead of the current,\n-                    //reflecting an assumption the user would accept a bit more delay for\n-                    //a chance at a free transaction.\n-                    //But mempool inputs might still be in the mempool, so their age stays 0\n-                    int age = pcoin.first->GetDepthInMainChain();\n-                    assert(age >= 0);\n-                    if (age != 0)\n-                        age += 1;\n-                    dPriority += (double)nCredit * age;\n-                }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n@@ -2614,7 +2599,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 unsigned int nBytes = GetVirtualTransactionSize(txNew);\n \n                 CTransaction txNewConst(txNew);\n-                dPriority = txNewConst.ComputePriority(dPriority, nBytes);\n \n                 // Remove scriptSigs to eliminate the fee calculation dummy signatures\n                 for (auto& vin : txNew.vin) {\n@@ -2627,16 +2611,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                // Can we complete this as a free transaction?\n-                if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n-                {\n-                    // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimateSmartPriority(currentConfirmationTarget);\n-                    // Require at least hard-coded AllowFree.\n-                    if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n-                        break;\n-                }\n-\n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, mempool);\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n@@ -3548,8 +3522,6 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n@@ -3868,11 +3840,10 @@ bool CWallet::ParameterInteraction()\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n     fWalletRbf = GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n-    if (fSendFreeTransactions && GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n-        return InitError(\"Creation of free transactions with their relay disabled is not supported.\");\n+    if (GetBoolArg(\"-sendfreetransactions\", false))\n+        InitWarning(\"The argument -sendfreetransactions is no longer supported.\");\n \n     return true;\n }"
      },
      {
        "sha": "29af32375eb364b4987085fa5e557ac21da682d0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf58c75739efc7509d529002975ea447a269b3a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf58c75739efc7509d529002975ea447a269b3a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ddf58c75739efc7509d529002975ea447a269b3a",
        "patch": "@@ -39,7 +39,6 @@ extern CWallet* pwalletMain;\n extern CFeeRate payTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n-extern bool fSendFreeTransactions;\n extern bool fWalletRbf;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n@@ -57,16 +56,12 @@ static const CAmount MIN_CHANGE = CENT;\n static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE/2;\n //! Default for -spendzeroconfchange\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n-//! Default for -sendfreetransactions\n-static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! Default for -walletrejectlongchains\n static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default\n static const bool DEFAULT_WALLET_RBF = false;\n-//! Largest (in bytes) free transaction we're willing to create\n-static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n //! if set, all keys will be derived by using BIP32"
      }
    ]
  },
  {
    "sha": "12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjgzOWNkZDU2YWI1ZWJiMDZjNTliYmY5YTA2NGY0YmQyM2I3Mzk4",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T18:20:08Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-27T16:23:50Z"
      },
      "message": "[rpc] Remove estimatepriority and estimatesmartpriority.\n\nThe RPC calls were already deprecated.",
      "tree": {
        "sha": "ad242dba8469f89508a9bb17ce980f311428b756",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad242dba8469f89508a9bb17ce980f311428b756"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddf58c75739efc7509d529002975ea447a269b3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddf58c75739efc7509d529002975ea447a269b3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddf58c75739efc7509d529002975ea447a269b3a"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 0,
      "deletions": 67
    },
    "files": [
      {
        "sha": "2d16868d4da1fbbc1fa8f6d66ce618aa8018f1e7",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
        "patch": "@@ -107,9 +107,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n-    { \"estimatepriority\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"estimatesmartpriority\", 0, \"nblocks\" },\n     { \"prioritisetransaction\", 1, \"priority_delta\" },\n     { \"prioritisetransaction\", 2, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },"
      },
      {
        "sha": "d0d9e05994a8b63b7f8faf86f5b3f8a9c60bcdbc",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
        "patch": "@@ -811,33 +811,6 @@ UniValue estimatefee(const JSONRPCRequest& request)\n     return ValueFromAmount(feeRate.GetFeePerK());\n }\n \n-UniValue estimatepriority(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() != 1)\n-        throw runtime_error(\n-            \"estimatepriority nblocks\\n\"\n-            \"\\nDEPRECATED. Estimates the approximate priority a zero-fee transaction needs to begin\\n\"\n-            \"confirmation within nblocks blocks.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, required)\\n\"\n-            \"\\nResult:\\n\"\n-            \"n              (numeric) estimated priority\\n\"\n-            \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatepriority\", \"6\")\n-            );\n-\n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n-\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1)\n-        nBlocks = 1;\n-\n-    return mempool.estimatePriority(nBlocks);\n-}\n-\n UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n@@ -875,42 +848,6 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue estimatesmartpriority(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() != 1)\n-        throw runtime_error(\n-            \"estimatesmartpriority nblocks\\n\"\n-            \"\\nDEPRECATED. WARNING: This interface is unstable and may disappear or change!\\n\"\n-            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n-            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n-            \"for which the estimate is valid.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, required)\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"priority\\\" : x.x,    (numeric) estimated priority\\n\"\n-            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n-            );\n-\n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n-\n-    int nBlocks = request.params[0].get_int();\n-\n-    UniValue result(UniValue::VOBJ);\n-    int answerFound;\n-    double priority = mempool.estimateSmartPriority(nBlocks, &answerFound);\n-    result.push_back(Pair(\"priority\", priority));\n-    result.push_back(Pair(\"blocks\", answerFound));\n-    return result;\n-}\n-\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -924,9 +861,7 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,  {\"nblocks\"} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true,  {\"nblocks\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "272b25a6a99057fdcd5db5bce70b49625e973080",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzJiMjVhNmE5OTA1N2ZkY2Q1ZGI1YmNlNzBiNDk2MjVlOTczMDgw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T18:58:42Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-27T16:23:50Z"
      },
      "message": "[mining] Remove -blockprioritysize.\n\nRemove ability of mining code to fill part of a block with transactions sorted by coin age.",
      "tree": {
        "sha": "e196f5d34afcd9745b9f87bef339e32f52247a65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e196f5d34afcd9745b9f87bef339e32f52247a65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/272b25a6a99057fdcd5db5bce70b49625e973080",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/272b25a6a99057fdcd5db5bce70b49625e973080",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/272b25a6a99057fdcd5db5bce70b49625e973080",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/272b25a6a99057fdcd5db5bce70b49625e973080/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12839cdd56ab5ebb06c59bbf9a064f4bd23b7398"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 6,
      "deletions": 184
    },
    "files": [
      {
        "sha": "f3a025afa552b042eaa285a63fbd2f9f49e3efa5",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -24,8 +24,8 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\", \"-acceptnonstdtxn=0\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-acceptnonstdtxn=0\"]))\n         self.is_network_split = False\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "5a2b90767d8573f4b7844400c3874dbc56c23d3d",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -193,13 +193,13 @@ def setup_network(self):\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n-                                     [\"-blockprioritysize=1500\", \"-blockmaxsize=17000\",\n+                                     [\"-blockmaxsize=17000\",\n                                       \"-maxorphantx=1000\", \"-debug=estimatefee\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n-        node2args = [\"-blockprioritysize=0\", \"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n+        node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n         self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)"
      },
      {
        "sha": "e664721868fe2ffc05255f2b04094559c8fe08cc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -476,7 +476,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n-    strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");"
      },
      {
        "sha": "1198dbb097ee2603cae874be297a71fc64ee5817",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 151,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -39,8 +39,8 @@\n //\n // Unconfirmed transactions in the memory pool often depend on other\n // transactions in the memory pool. When we select transactions from the\n-// pool, we select by highest priority or fee rate, so we might consider\n-// transactions that depend on transactions that aren't yet in the block.\n+// pool, we select by highest fee rate of a transaction combined with all\n+// its ancestors.\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n@@ -122,9 +122,6 @@ void BlockAssembler::resetBlock()\n     // These counters do not include coinbase tx\n     nBlockTx = 0;\n     nFees = 0;\n-\n-    lastFewTxs = 0;\n-    blockFinished = false;\n }\n \n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -167,7 +164,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // transaction (which in most cases can be a no-op).\n     fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n \n-    addPriorityTxs();\n     addPackageTxs();\n \n     nLastBlockTx = nBlockTx;\n@@ -204,17 +200,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     return std::move(pblocktemplate);\n }\n \n-bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n-{\n-    BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n-    {\n-        if (!inBlock.count(parent)) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n {\n     for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n@@ -262,58 +247,6 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n     return true;\n }\n \n-bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n-{\n-    if (nBlockWeight + iter->GetTxWeight() >= nBlockMaxWeight) {\n-        // If the block is so close to full that no more txs will fit\n-        // or if we've tried more than 50 times to fill remaining space\n-        // then flag that the block is finished\n-        if (nBlockWeight >  nBlockMaxWeight - 400 || lastFewTxs > 50) {\n-             blockFinished = true;\n-             return false;\n-        }\n-        // Once we're within 4000 weight of a full block, only look at 50 more txs\n-        // to try to fill the remaining space.\n-        if (nBlockWeight > nBlockMaxWeight - 4000) {\n-            lastFewTxs++;\n-        }\n-        return false;\n-    }\n-\n-    if (fNeedSizeAccounting) {\n-        if (nBlockSize + ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) >= nBlockMaxSize) {\n-            if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n-                 blockFinished = true;\n-                 return false;\n-            }\n-            if (nBlockSize > nBlockMaxSize - 1000) {\n-                lastFewTxs++;\n-            }\n-            return false;\n-        }\n-    }\n-\n-    if (nBlockSigOpsCost + iter->GetSigOpCost() >= MAX_BLOCK_SIGOPS_COST) {\n-        // If the block has room for no more sig ops then\n-        // flag that the block is finished\n-        if (nBlockSigOpsCost > MAX_BLOCK_SIGOPS_COST - 8) {\n-            blockFinished = true;\n-            return false;\n-        }\n-        // Otherwise attempt to find another tx with fewer sigops\n-        // to put in the block.\n-        return false;\n-    }\n-\n-    // Must check that lock times are still valid\n-    // This can be removed once MTP is always enforced\n-    // as long as reorgs keep the mempool consistent.\n-    if (!IsFinalTx(iter->GetTx(), nHeight, nLockTimeCutoff))\n-        return false;\n-\n-    return true;\n-}\n-\n void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n {\n     pblock->vtx.emplace_back(iter->GetSharedTx());\n@@ -512,88 +445,6 @@ void BlockAssembler::addPackageTxs()\n     }\n }\n \n-void BlockAssembler::addPriorityTxs()\n-{\n-    // How much of the block should be dedicated to high-priority transactions,\n-    // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n-    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n-\n-    if (nBlockPrioritySize == 0) {\n-        return;\n-    }\n-\n-    bool fSizeAccounting = fNeedSizeAccounting;\n-    fNeedSizeAccounting = true;\n-\n-    // This vector will be sorted into a priority queue:\n-    std::vector<TxCoinAgePriority> vecPriority;\n-    TxCoinAgePriorityCompare pricomparer;\n-    std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n-    typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;\n-    double actualPriority = -1;\n-\n-    vecPriority.reserve(mempool.mapTx.size());\n-    for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n-         mi != mempool.mapTx.end(); ++mi)\n-    {\n-        double dPriority = mi->GetPriority(nHeight);\n-        CAmount dummy;\n-        mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n-        vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n-    }\n-    std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-\n-    CTxMemPool::txiter iter;\n-    while (!vecPriority.empty() && !blockFinished) { // add a tx from priority queue to fill the blockprioritysize\n-        iter = vecPriority.front().second;\n-        actualPriority = vecPriority.front().first;\n-        std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-        vecPriority.pop_back();\n-\n-        // If tx already in block, skip\n-        if (inBlock.count(iter)) {\n-            assert(false); // shouldn't happen for priority txs\n-            continue;\n-        }\n-\n-        // cannot accept witness transactions into a non-witness block\n-        if (!fIncludeWitness && iter->GetTx().HasWitness())\n-            continue;\n-\n-        // If tx is dependent on other mempool txs which haven't yet been included\n-        // then put it in the waitSet\n-        if (isStillDependent(iter)) {\n-            waitPriMap.insert(std::make_pair(iter, actualPriority));\n-            continue;\n-        }\n-\n-        // If this tx fits in the block add it, otherwise keep looping\n-        if (TestForBlock(iter)) {\n-            AddToBlock(iter);\n-\n-            // If now that this txs is added we've surpassed our desired priority size\n-            // or have dropped below the AllowFreeThreshold, then we're done adding priority txs\n-            if (nBlockSize >= nBlockPrioritySize || !AllowFree(actualPriority)) {\n-                break;\n-            }\n-\n-            // This tx was successfully added, so\n-            // add transactions that depend on this one to the priority queue to try again\n-            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n-            {\n-                waitPriIter wpiter = waitPriMap.find(child);\n-                if (wpiter != waitPriMap.end()) {\n-                    vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n-                    std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n-                    waitPriMap.erase(wpiter);\n-                }\n-            }\n-        }\n-    }\n-    fNeedSizeAccounting = fSizeAccounting;\n-}\n-\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce"
      },
      {
        "sha": "625ffe97f7cee24d7407001b0e3681d8fedb1e80",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -158,10 +158,6 @@ class BlockAssembler\n     int64_t nLockTimeCutoff;\n     const CChainParams& chainparams;\n \n-    // Variables used for addPriorityTxs\n-    int lastFewTxs;\n-    bool blockFinished;\n-\n public:\n     BlockAssembler(const CChainParams& chainparams);\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n@@ -175,17 +171,9 @@ class BlockAssembler\n     void AddToBlock(CTxMemPool::txiter iter);\n \n     // Methods for how to add transactions to a block.\n-    /** Add transactions based on tx \"priority\" */\n-    void addPriorityTxs();\n     /** Add transactions based on feerate including unconfirmed ancestors */\n     void addPackageTxs();\n \n-    // helper function for addPriorityTxs\n-    /** Test if tx will still \"fit\" in the block */\n-    bool TestForBlock(CTxMemPool::txiter iter);\n-    /** Test if tx still has unconfirmed parents not yet in block */\n-    bool isStillDependent(CTxMemPool::txiter iter);\n-\n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n     void onlyUnconfirmed(CTxMemPool::setEntries& testSet);"
      },
      {
        "sha": "6df541bc0f4d46cabd9d905d056fde41570d637f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -16,8 +16,6 @@ class CCoinsViewCache;\n \n /** Default for -blockmaxsize, which controls the maximum size of block the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/"
      },
      {
        "sha": "1d49848df96084f1bf2ccdf982084f80eab6e21a",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -79,7 +79,6 @@ bool TestSequenceLocks(const CTransaction &tx, int flags)\n // Test suite for ancestor feerate transaction selection.\n // Implemented as an additional function, rather than a separate test case,\n // to allow reusing the blockchain created in CreateNewBlock_validity.\n-// Note that this test assumes blockprioritysize is 0.\n void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)\n {\n     // Test the ancestor feerate transaction selection."
      },
      {
        "sha": "4cba024307af563f48eb660daa094d76a6bb1b81",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/272b25a6a99057fdcd5db5bce70b49625e973080/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/272b25a6a99057fdcd5db5bce70b49625e973080/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=272b25a6a99057fdcd5db5bce70b49625e973080",
        "patch": "@@ -720,17 +720,4 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid) const;\n };\n \n-// We want to sort transactions by coin age priority\n-typedef std::pair<double, CTxMemPool::txiter> TxCoinAgePriority;\n-\n-struct TxCoinAgePriorityCompare\n-{\n-    bool operator()(const TxCoinAgePriority& a, const TxCoinAgePriority& b)\n-    {\n-        if (a.first == b.first)\n-            return CompareTxMemPoolEntryByScore()(*(b.second), *(a.second)); //Reverse order to make sort less than\n-        return a.first < b.first;\n-    }\n-};\n-\n #endif // BITCOIN_TXMEMPOOL_H"
      }
    ]
  },
  {
    "sha": "400b15147cf1c4757927935222611e8d3481e739",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDBiMTUxNDdjZjFjNDc1NzkyNzkzNTIyMjYxMWU4ZDM0ODFlNzM5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T19:59:28Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-27T16:23:50Z"
      },
      "message": "[debug] Change -printpriority option\n\n-printpriority output is now changed to only show the fee rate and hash of transactions included in a block by the mining code.",
      "tree": {
        "sha": "60b8bf57b3c698f333640daa3cc10fe4f791d445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60b8bf57b3c698f333640daa3cc10fe4f791d445"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/400b15147cf1c4757927935222611e8d3481e739",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/400b15147cf1c4757927935222611e8d3481e739",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/400b15147cf1c4757927935222611e8d3481e739",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/400b15147cf1c4757927935222611e8d3481e739/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "272b25a6a99057fdcd5db5bce70b49625e973080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/272b25a6a99057fdcd5db5bce70b49625e973080",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/272b25a6a99057fdcd5db5bce70b49625e973080"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c6026646d0c7bd379ed1fd858e55cd9139a277fd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/400b15147cf1c4757927935222611e8d3481e739/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/400b15147cf1c4757927935222611e8d3481e739/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=400b15147cf1c4757927935222611e8d3481e739",
        "patch": "@@ -456,7 +456,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n "
      },
      {
        "sha": "75c9d82a2f43a6765fc444b0321284691c3fd34c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/400b15147cf1c4757927935222611e8d3481e739/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/400b15147cf1c4757927935222611e8d3481e739/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=400b15147cf1c4757927935222611e8d3481e739",
        "patch": "@@ -263,11 +263,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n \n     bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n-        double dPriority = iter->GetPriority(nHeight);\n-        CAmount dummy;\n-        mempool.ApplyDeltas(iter->GetTx().GetHash(), dPriority, dummy);\n-        LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n-                  dPriority,\n+        LogPrintf(\"fee %s txid %s\\n\",\n                   CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n                   iter->GetTx().GetHash().ToString());\n     }"
      }
    ]
  },
  {
    "sha": "fe282acd7604b5265762b24e531bdf1ebb1f009b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTI4MmFjZDc2MDRiNTI2NTc2MmIyNGU1MzFiZGYxZWJiMWYwMDli",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T20:17:33Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-27T16:23:51Z"
      },
      "message": "[cleanup] Remove estimatePriority and estimateSmartPriority\n\nUnused everywhere now except one test.",
      "tree": {
        "sha": "4f10b6a0221b8b706d58458f31855673c13fb36b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f10b6a0221b8b706d58458f31855673c13fb36b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe282acd7604b5265762b24e531bdf1ebb1f009b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe282acd7604b5265762b24e531bdf1ebb1f009b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe282acd7604b5265762b24e531bdf1ebb1f009b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe282acd7604b5265762b24e531bdf1ebb1f009b/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "400b15147cf1c4757927935222611e8d3481e739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/400b15147cf1c4757927935222611e8d3481e739",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/400b15147cf1c4757927935222611e8d3481e739"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 0,
      "deletions": 54
    },
    "files": [
      {
        "sha": "89220f26b60e01d0441e35aaa49200bfaba60e66",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "patch": "@@ -452,24 +452,6 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     return CFeeRate(median);\n }\n \n-double CBlockPolicyEstimator::estimatePriority(int confTarget)\n-{\n-    return -1;\n-}\n-\n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n-{\n-    if (answerFoundAtTarget)\n-        *answerFoundAtTarget = confTarget;\n-\n-    // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-    if (minPoolFee > 0)\n-        return INF_PRIORITY;\n-\n-    return -1;\n-}\n-\n void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n {\n     fileout << nBestSeenHeight;"
      },
      {
        "sha": "f2f430861c113728080dff7a889884549666acd9",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "patch": "@@ -182,7 +182,6 @@ static const double SUFFICIENT_FEETXS = 1;\n static constexpr double MIN_FEERATE = 10;\n static const double MAX_FEERATE = 1e7;\n static const double INF_FEERATE = MAX_MONEY;\n-static const double INF_PRIORITY = 1e9 * MAX_MONEY;\n \n // We have to lump transactions into buckets based on feerate, but we want to be able\n // to give accurate estimates over a large range of potential feerates\n@@ -223,20 +222,6 @@ class CBlockPolicyEstimator\n      */\n     CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n \n-    /** Return a priority estimate.\n-     *  DEPRECATED\n-     *  Returns -1\n-     */\n-    double estimatePriority(int confTarget);\n-\n-    /** Estimate priority needed to get be included in a block within\n-     *  confTarget blocks.\n-     *  DEPRECATED\n-     *  Returns -1 unless mempool is currently limited then returns INF_PRIORITY\n-     *  answerFoundAtTarget is set to confTarget\n-     */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n-\n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);\n "
      },
      {
        "sha": "a4f85c59880f0eae2c2ddc9a67fbc42f128110f1",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "patch": "@@ -185,15 +185,13 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n \n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n-    // and that estimateSmartPriority returns essentially an infinite value\n     mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Priority(0).Height(blocknum).FromTx(tx, &mpool));\n     // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[5]\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n         BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n-        BOOST_CHECK(mpool.estimateSmartPriority(i) == INF_PRIORITY);\n     }\n }\n "
      },
      {
        "sha": "ef4d4f3c6242f33128200da94d2c0c0451129d34",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "patch": "@@ -875,16 +875,6 @@ CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) con\n     LOCK(cs);\n     return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n }\n-double CTxMemPool::estimatePriority(int nBlocks) const\n-{\n-    LOCK(cs);\n-    return minerPolicyEstimator->estimatePriority(nBlocks);\n-}\n-double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n-{\n-    LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n-}\n \n bool\n CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const"
      },
      {
        "sha": "4af85195c8a1c415ad96bba73198ad232ba86241",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe282acd7604b5265762b24e531bdf1ebb1f009b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "patch": "@@ -648,15 +648,6 @@ class CTxMemPool\n     /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;\n \n-    /** Estimate priority needed to get into the next nBlocks\n-     *  If no answer can be given at nBlocks, return an estimate\n-     *  at the lowest number of blocks where one can be given\n-     */\n-    double estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n-\n-    /** Estimate priority needed to get into the next nBlocks */\n-    double estimatePriority(int nBlocks) const;\n-    \n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);"
      }
    ]
  },
  {
    "sha": "ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDcyN2Y0ZWFmMWNiM2VkN2EwZTM0MGY2OTBiZDgwNDI5OWU2OThj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T13:39:25Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-27T16:23:51Z"
      },
      "message": "[rpc] sendrawtransaction no longer bypasses minRelayTxFee\n\nThe prioritisetransaction API can always be used if a transaction needs to be submitted that bypasses minRelayTxFee.",
      "tree": {
        "sha": "8e05bca4afee897062a53465590ad9a40d235e04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e05bca4afee897062a53465590ad9a40d235e04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad727f4eaf1cb3ed7a0e340f690bd804299e698c/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe282acd7604b5265762b24e531bdf1ebb1f009b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe282acd7604b5265762b24e531bdf1ebb1f009b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b44a98bfd5cfbe79804a834d71e0dd3c0ac21a42",
        "filename": "qa/rpc-tests/nulldummy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad727f4eaf1cb3ed7a0e340f690bd804299e698c/qa/rpc-tests/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad727f4eaf1cb3ed7a0e340f690bd804299e698c/qa/rpc-tests/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nulldummy.py?ref=ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
        "patch": "@@ -74,15 +74,15 @@ def run_test(self):\n         self.block_submit(self.nodes[0], test1txs, False, True)\n \n         print (\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n-        test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 48)\n+        test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n         txid4 = self.tx_submit(self.nodes[0], test2tx, NULLDUMMY_ERROR)\n \n         print (\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n \n         print (\"Test 4: Non-NULLDUMMY base multisig transaction is invalid after activation\")\n-        test4tx = self.create_transaction(self.nodes[0], txid4, self.address, 47)\n+        test4tx = self.create_transaction(self.nodes[0], txid4, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n         self.tx_submit(self.nodes[0], test4tx, NULLDUMMY_ERROR)"
      },
      {
        "sha": "796db1de58281077d6001ec2a0d1e0fbb37c3614",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad727f4eaf1cb3ed7a0e340f690bd804299e698c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad727f4eaf1cb3ed7a0e340f690bd804299e698c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
        "patch": "@@ -891,7 +891,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n     const uint256& hashTx = tx->GetHash();\n \n-    bool fLimitFree = false;\n+    bool fLimitFree = true;\n     CAmount nMaxRawTxFee = maxTxFee;\n     if (request.params.size() > 1 && request.params[1].get_bool())\n         nMaxRawTxFee = 0;"
      }
    ]
  },
  {
    "sha": "f8380054442d8aca4999277fe7617067edf231b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODM4MDA1NDQ0MmQ4YWNhNDk5OTI3N2ZlNzYxNzA2N2VkZjIzMWI5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T03:07:56Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:19Z"
      },
      "message": "No longer allow \"free\" transactions\n\nRemove -limitfreerelay and always enforce minRelayTxFee in the mempool (except from disconnected blocks)\n\nRemove -relaypriority, the option was only used for the ability to allow free transactions to be relayed regardless of their priority.  Both notions no longer apply.",
      "tree": {
        "sha": "4902b33ac7885e0445adace815b214d1f18e9ccc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4902b33ac7885e0445adace815b214d1f18e9ccc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8380054442d8aca4999277fe7617067edf231b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8380054442d8aca4999277fe7617067edf231b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8380054442d8aca4999277fe7617067edf231b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8380054442d8aca4999277fe7617067edf231b9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad727f4eaf1cb3ed7a0e340f690bd804299e698c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad727f4eaf1cb3ed7a0e340f690bd804299e698c"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 10,
      "deletions": 53
    },
    "files": [
      {
        "sha": "5a860e4392e34a219244c3e34d3c69e6d7935c92",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -80,7 +80,6 @@ def run_test(self):\n \n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n-        # Note had to make sure tx did not have AllowFree priority\n         stop_node(self.nodes[0],0)\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n "
      },
      {
        "sha": "4289c7b0b63611650026cfac183d92d70e43d19d",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -188,8 +188,7 @@ def setup_network(self):\n \n         # Now we can connect the other nodes, didn't want to connect them earlier\n         # so the estimates would not be affected by the splitting transactions\n-        # Node1 mines small blocks but that are bigger than the expected transaction rate,\n-        # and allows free transactions.\n+        # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,"
      },
      {
        "sha": "3276ec9f13e29a786b81d0fc18df0598de02f7e4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -444,8 +444,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n         strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", DEFAULT_LIMITFREERELAY));\n-        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", DEFAULT_RELAYPRIORITY));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n         strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n     }\n@@ -975,7 +973,7 @@ bool AppInitParameterInteraction()\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n-    // Fee-per-kilobyte amount considered the same as \"free\"\n+    // Fee-per-kilobyte amount required for mempool acceptance and relay\n     // If you are mining, be careful setting this:\n     // if you set it to zero then\n     // a transaction spammer can cheaply fill blocks using"
      },
      {
        "sha": "71a0a1de22d0916389daae3dd2195a05b6725e55",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -1853,7 +1853,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                             LogPrint(\"mempool\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                         }\n                         // Has inputs but not accepted to mempool\n-                        // Probably non-standard or insufficient fee/priority\n+                        // Probably non-standard or insufficient fee\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n                         if (!orphanTx.HasWitness() && !stateDummy.CorruptionPossible()) {\n@@ -3249,9 +3249,8 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);\n                 static FeeFilterRounder filterRounder(default_feerate);\n                 CAmount filterToSend = filterRounder.round(currentFilter);\n-                // If we don't allow free transactions, then we always have a fee filter of at least minRelayTxFee\n-                if (GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n-                    filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n+                // We always have a fee filter of at least minRelayTxFee\n+                filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->lastSentFeeFilter) {\n                     connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->lastSentFeeFilter = filterToSend;"
      },
      {
        "sha": "3045fa2b53d3ccaed093b7e9f3fd8468f25f8e66",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -61,7 +61,7 @@ UniValue getinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "a7169749c329751b124ac3d60534addfce526d1f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -417,7 +417,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\""
      },
      {
        "sha": "9af65bd0773d1ff40d3d050a94369f4fb755a7fb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -30,18 +30,6 @@\n class CAutoFile;\n class CBlockIndex;\n \n-inline double AllowFreeThreshold()\n-{\n-    return COIN * 144 / 250;\n-}\n-\n-inline bool AllowFree(double dPriority)\n-{\n-    // Large (in bytes) low-priority (new, small-coin) transactions\n-    // need a fee.\n-    return dPriority > AllowFreeThreshold();\n-}\n-\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n "
      },
      {
        "sha": "a21dc25a550fd4a476559e619880e3b9b499dca2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 24,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -753,32 +753,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n-            // Require that free transactions have sufficient priority to be mined in the next block.\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n-        // Continuously rate-limit free (really, very-low-fee) transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n+        // No transactions are allowed below minRelayTxFee except from disconnected blocks\n+        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n         }\n \n         if (nAbsurdFee && nFees > nAbsurdFee)"
      },
      {
        "sha": "43f0dbae34ed9b647bba6f50773b79ac4d9249fa",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -122,8 +122,6 @@ static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n /** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n \n-static const unsigned int DEFAULT_LIMITFREERELAY = 0;\n-static const bool DEFAULT_RELAYPRIORITY = true;\n static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n /** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;"
      },
      {
        "sha": "ba16cdf267870c7e5b53670ad5c040687fa1370b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8380054442d8aca4999277fe7617067edf231b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8380054442d8aca4999277fe7617067edf231b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f8380054442d8aca4999277fe7617067edf231b9",
        "patch": "@@ -3842,9 +3842,6 @@ bool CWallet::ParameterInteraction()\n     bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     fWalletRbf = GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n-    if (GetBoolArg(\"-sendfreetransactions\", false))\n-        InitWarning(\"The argument -sendfreetransactions is no longer supported.\");\n-\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "0315888d0db2f39c784afac19ff5db5086f30820",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzE1ODg4ZDBkYjJmMzljNzg0YWZhYzE5ZmY1ZGI1MDg2ZjMwODIw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T03:46:50Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:19Z"
      },
      "message": "[test] Remove priority from tests\n\nRemove all coin age priority functionality from unit tests and RPC tests.",
      "tree": {
        "sha": "ab5a4feaae705fd449cd2783e88bcd78a73acba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab5a4feaae705fd449cd2783e88bcd78a73acba3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0315888d0db2f39c784afac19ff5db5086f30820",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0315888d0db2f39c784afac19ff5db5086f30820",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0315888d0db2f39c784afac19ff5db5086f30820",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0315888d0db2f39c784afac19ff5db5086f30820/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8380054442d8aca4999277fe7617067edf231b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8380054442d8aca4999277fe7617067edf231b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8380054442d8aca4999277fe7617067edf231b9"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 47,
      "deletions": 108
    },
    "files": [
      {
        "sha": "91d5d6be7df9b3615ed60c42d89af8eda9088a76",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 21,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -50,10 +50,8 @@ def run_test(self):\n             assert(sizes[i] > MAX_BLOCK_BASE_SIZE) # Fail => raise utxo_count\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n-        # also check that a different entry in the cheapest bucket is NOT mined (lower\n-        # the priority to ensure its not mined due to priority)\n+        # also check that a different entry in the cheapest bucket is NOT mined\n         self.nodes[0].prioritisetransaction(txids[0][0], 0, int(3*base_fee*COIN))\n-        self.nodes[0].prioritisetransaction(txids[0][1], -1e15, 0)\n \n         self.nodes[0].generate(1)\n \n@@ -96,45 +94,35 @@ def run_test(self):\n             if (x != high_fee_tx):\n                 assert(x not in mempool)\n \n-        # Create a free, low priority transaction.  Should be rejected.\n+        # Create a free transaction.  Should be rejected.\n         utxo_list = self.nodes[0].listunspent()\n         assert(len(utxo_list) > 0)\n         utxo = utxo_list[0]\n \n         inputs = []\n         outputs = {}\n         inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n-        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"] - self.relayfee\n+        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"]\n         raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n-        txid = self.nodes[0].sendrawtransaction(tx_hex)\n-\n-        # A tx that spends an in-mempool tx has 0 priority, so we can use it to\n-        # test the effect of using prioritise transaction for mempool acceptance\n-        inputs = []\n-        inputs.append({\"txid\": txid, \"vout\": 0})\n-        outputs = {}\n-        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"] - self.relayfee\n-        raw_tx2 = self.nodes[0].createrawtransaction(inputs, outputs)\n-        tx2_hex = self.nodes[0].signrawtransaction(raw_tx2)[\"hex\"]\n-        tx2_id = self.nodes[0].decoderawtransaction(tx2_hex)[\"txid\"]\n+        tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         try:\n-            self.nodes[0].sendrawtransaction(tx2_hex)\n+            self.nodes[0].sendrawtransaction(tx_hex)\n         except JSONRPCException as exp:\n             assert_equal(exp.error['code'], -26) # insufficient fee\n-            assert(tx2_id not in self.nodes[0].getrawmempool())\n+            assert(tx_id not in self.nodes[0].getrawmempool())\n         else:\n             assert(False)\n \n         # This is a less than 1000-byte transaction, so just set the fee\n         # to be the minimum for a 1000 byte transaction and check that it is\n         # accepted.\n-        self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(tx_id, 0, int(self.relayfee*COIN))\n \n         print(\"Assert that prioritised free transaction is accepted to mempool\")\n-        assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n-        assert(tx2_id in self.nodes[0].getrawmempool())\n+        assert_equal(self.nodes[0].sendrawtransaction(tx_hex), tx_id)\n+        assert(tx_id in self.nodes[0].getrawmempool())\n \n if __name__ == '__main__':\n     PrioritiseTransactionTest().main()"
      },
      {
        "sha": "9ce5b8e865af65164ff3202353a526290aeae201",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -69,10 +69,11 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n \n def split_inputs(from_node, txins, txouts, initial_split = False):\n     \"\"\"\n-    We need to generate a lot of very small inputs so we can generate a ton of transactions\n-    and they will have low priority.\n+    We need to generate a lot of inputs so we can generate a ton of transactions.\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n+    Previously this was designed to be small inputs so they wouldn't have\n+    a high coin age when the notion of priority still existed.\n     \"\"\"\n     prevtxout = txins.pop()\n     inputs = []\n@@ -150,7 +151,7 @@ def __init__(self):\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n-        But first we need to use one node to create a lot of small low priority outputs\n+        But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n         self.nodes = []\n@@ -159,7 +160,7 @@ def setup_network(self):\n                                                               \"-whitelist=127.0.0.1\"]))\n \n         print(\"This test is time consuming, please be patient\")\n-        print(\"Splitting inputs to small size so we can generate low priority tx's\")\n+        print(\"Splitting inputs so we can generate tx's\")\n         self.txouts = []\n         self.txouts2 = []\n         # Split a coinbase into two transaction puzzle outputs"
      },
      {
        "sha": "408c266aa4aa68bed1aa5f3c2eeac3c71e8788ed",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -442,47 +442,6 @@ def make_change(from_node, amount_in, amount_out, fee):\n         outputs[from_node.getnewaddress()] = change\n     return outputs\n \n-def send_zeropri_transaction(from_node, to_node, amount, fee):\n-    \"\"\"\n-    Create&broadcast a zero-priority transaction.\n-    Returns (txid, hex-encoded-txdata)\n-    Ensures transaction is zero-priority by first creating a send-to-self,\n-    then using its output\n-    \"\"\"\n-\n-    # Create a send-to-self with confirmed inputs:\n-    self_address = from_node.getnewaddress()\n-    (total_in, inputs) = gather_inputs(from_node, amount+fee*2)\n-    outputs = make_change(from_node, total_in, amount+fee, fee)\n-    outputs[self_address] = float(amount+fee)\n-\n-    self_rawtx = from_node.createrawtransaction(inputs, outputs)\n-    self_signresult = from_node.signrawtransaction(self_rawtx)\n-    self_txid = from_node.sendrawtransaction(self_signresult[\"hex\"], True)\n-\n-    vout = find_output(from_node, self_txid, amount+fee)\n-    # Now immediately spend the output to create a 1-input, 1-output\n-    # zero-priority transaction:\n-    inputs = [ { \"txid\" : self_txid, \"vout\" : vout } ]\n-    outputs = { to_node.getnewaddress() : float(amount) }\n-\n-    rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransaction(rawtx)\n-    txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n-\n-    return (txid, signresult[\"hex\"])\n-\n-def random_zeropri_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n-    \"\"\"\n-    Create a random zero-priority transaction.\n-    Returns (txid, hex-encoded-transaction-data, fee)\n-    \"\"\"\n-    from_node = random.choice(nodes)\n-    to_node = random.choice(nodes)\n-    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n-    (txid, txhex) = send_zeropri_transaction(from_node, to_node, amount, fee)\n-    return (txid, txhex, fee)\n-\n def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     \"\"\"\n     Create a random transaction."
      },
      {
        "sha": "cdef1f5aa99b86ff1208c53f4642954319c8bf36",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -126,36 +126,35 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).Priority(10.0).FromTx(tx1));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).Priority(9.0).FromTx(tx2));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).FromTx(tx2));\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).Priority(100.0).FromTx(tx3));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).FromTx(tx3));\n \n     /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).Priority(1.0).FromTx(tx4));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n     entry.nTime = 1;\n-    entry.dPriority = 10.0;\n     pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5);\n \n@@ -328,29 +327,29 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).Priority(10.0).FromTx(tx1));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).Priority(9.0).FromTx(tx2));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).FromTx(tx2));\n     uint64_t tx2Size = GetVirtualTransactionSize(tx2);\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).Priority(100.0).FromTx(tx3));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).FromTx(tx3));\n \n     /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).Priority(1.0).FromTx(tx4));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n@@ -434,23 +433,22 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool(CFeeRate(1000));\n     TestMemPoolEntryHelper entry;\n-    entry.dPriority = 10.0;\n \n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vin.resize(1);\n     tx1.vin[0].scriptSig = CScript() << OP_1;\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1, &pool));\n+    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1));\n \n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vin.resize(1);\n     tx2.vin[0].scriptSig = CScript() << OP_2;\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n     tx2.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), entry.Fee(5000LL).FromTx(tx2, &pool));\n+    pool.addUnchecked(tx2.GetHash(), entry.Fee(5000LL).FromTx(tx2));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n@@ -460,15 +458,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n \n-    pool.addUnchecked(tx2.GetHash(), entry.FromTx(tx2, &pool));\n+    pool.addUnchecked(tx2.GetHash(), entry.FromTx(tx2));\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vin.resize(1);\n     tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n     tx3.vin[0].scriptSig = CScript() << OP_2;\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n     tx3.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), entry.Fee(20000LL).FromTx(tx3, &pool));\n+    pool.addUnchecked(tx3.GetHash(), entry.Fee(20000LL).FromTx(tx3));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n@@ -531,10 +529,10 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[1].nValue = 10 * COIN;\n \n-    pool.addUnchecked(tx4.GetHash(), entry.Fee(7000LL).FromTx(tx4, &pool));\n-    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n-    pool.addUnchecked(tx6.GetHash(), entry.Fee(1100LL).FromTx(tx6, &pool));\n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n+    pool.addUnchecked(tx4.GetHash(), entry.Fee(7000LL).FromTx(tx4));\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5));\n+    pool.addUnchecked(tx6.GetHash(), entry.Fee(1100LL).FromTx(tx6));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n \n     // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n@@ -543,17 +541,17 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n     if (!pool.exists(tx5.GetHash()))\n-        pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n+        pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(!pool.exists(tx5.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n-    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5, &pool));\n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n+    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5));\n+    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n \n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);"
      },
      {
        "sha": "195d1dd75e1bbadef2801a477a12c838500bcff7",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -193,7 +193,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     uint256 hash;\n     TestMemPoolEntryHelper entry;\n     entry.nFee = 11;\n-    entry.dPriority = 111.0;\n     entry.nHeight = 11;\n \n     LOCK(cs_main);\n@@ -298,7 +297,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // child with higher priority than parent\n+    // child with higher feerate than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;"
      },
      {
        "sha": "d01ef7c6ee731f7373357b433762149f8075f8f4",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -56,7 +56,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k; // make transaction unique\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Priority(0).Height(blocknum).FromTx(tx, &mpool));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -132,7 +132,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Priority(0).Height(blocknum).FromTx(tx, &mpool));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -169,7 +169,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Priority(0).Height(blocknum).FromTx(tx, &mpool));\n+                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n                 CTransactionRef ptx = mpool.get(hash);\n                 if (ptx)\n                     block.push_back(ptx);\n@@ -185,7 +185,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n \n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n-    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Priority(0).Height(blocknum).FromTx(tx, &mpool));\n+    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Height(blocknum).FromTx(tx));\n     // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[5]\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);"
      },
      {
        "sha": "e6d34de1af8ac9fd91be4212865c71b328340487",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -141,17 +141,14 @@ TestChain100Setup::~TestChain100Setup()\n }\n \n \n-CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx, CTxMemPool *pool) {\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx) {\n     CTransaction txn(tx);\n-    return FromTx(txn, pool);\n+    return FromTx(txn);\n }\n \n-CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPool *pool) {\n-    // Hack to assume either it's completely dependent on other mempool txs or not at all\n-    CAmount inChainValue = pool && pool->HasNoInputsOf(txn) ? txn.GetValueOut() : 0;\n-\n-    return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, dPriority, nHeight,\n-                           inChainValue, spendsCoinbase, sigOpCost, lp);\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn) {\n+    return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, 0.0, nHeight,\n+                           0, spendsCoinbase, sigOpCost, lp);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "a593f136eb68c97a89cbbcbeda1b28f43936aeae",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0315888d0db2f39c784afac19ff5db5086f30820/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0315888d0db2f39c784afac19ff5db5086f30820/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=0315888d0db2f39c784afac19ff5db5086f30820",
        "patch": "@@ -61,30 +61,27 @@ struct TestChain100Setup : public TestingSetup {\n };\n \n class CTxMemPoolEntry;\n-class CTxMemPool;\n \n struct TestMemPoolEntryHelper\n {\n     // Default values\n     CAmount nFee;\n     int64_t nTime;\n-    double dPriority;\n     unsigned int nHeight;\n     bool spendsCoinbase;\n     unsigned int sigOpCost;\n     LockPoints lp;\n \n     TestMemPoolEntryHelper() :\n-        nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n+        nFee(0), nTime(0), nHeight(1),\n         spendsCoinbase(false), sigOpCost(4) { }\n     \n-    CTxMemPoolEntry FromTx(const CMutableTransaction &tx, CTxMemPool *pool = NULL);\n-    CTxMemPoolEntry FromTx(const CTransaction &tx, CTxMemPool *pool = NULL);\n+    CTxMemPoolEntry FromTx(const CMutableTransaction &tx);\n+    CTxMemPoolEntry FromTx(const CTransaction &tx);\n \n     // Change the default value\n     TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }\n     TestMemPoolEntryHelper &Time(int64_t _time) { nTime = _time; return *this; }\n-    TestMemPoolEntryHelper &Priority(double _priority) { dPriority = _priority; return *this; }\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n     TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }"
      }
    ]
  },
  {
    "sha": "49be7e1bef23afec617ed211a804f375f1620a22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWJlN2UxYmVmMjNhZmVjNjE3ZWQyMTFhODA0ZjM3NWYxNjIwYTIy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T20:24:29Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:19Z"
      },
      "message": "[rpc] Remove priority information from mempool RPC calls\n\n\"startingpriority\" and \"currentpriority\" are no longer returned in the JSON information about a mempool entry.  This affects getmempoolancestors, getmempooldescendants, getmempooolentry, and getrawmempool.",
      "tree": {
        "sha": "caee7127de65a5ed88f660f5a68881015a1a8fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caee7127de65a5ed88f660f5a68881015a1a8fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49be7e1bef23afec617ed211a804f375f1620a22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49be7e1bef23afec617ed211a804f375f1620a22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49be7e1bef23afec617ed211a804f375f1620a22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49be7e1bef23afec617ed211a804f375f1620a22/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0315888d0db2f39c784afac19ff5db5086f30820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0315888d0db2f39c784afac19ff5db5086f30820",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0315888d0db2f39c784afac19ff5db5086f30820"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1919ca39277f37362a0a9e735a2b87b7f0aef4a3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49be7e1bef23afec617ed211a804f375f1620a22/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49be7e1bef23afec617ed211a804f375f1620a22/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=49be7e1bef23afec617ed211a804f375f1620a22",
        "patch": "@@ -341,8 +341,6 @@ std::string EntryDescriptionString()\n            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-           \"    \\\"startingpriority\\\" : n, (numeric) DEPRECATED. Priority when transaction entered pool\\n\"\n-           \"    \\\"currentpriority\\\" : n,  (numeric) DEPRECATED. Transaction priority now\\n\"\n            \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n            \"    \\\"descendantsize\\\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\\n\"\n            \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)\\n\"\n@@ -363,8 +361,6 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n     info.push_back(Pair(\"time\", e.GetTime()));\n     info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n-    info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n     info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n     info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n     info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));"
      }
    ]
  },
  {
    "sha": "f9b9371c6027905f73a2558d6bcaca8a355c28a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWI5MzcxYzYwMjc5MDVmNzNhMjU1OGQ2YmNhY2E4YTM1NWMyOGE2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T04:37:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:19Z"
      },
      "message": "[rpc] Remove priorityDelta from prioritisetransaction\n\nThis a breaking API change to the prioritisetransaction RPC call which previously required exactly three arguments and now requires exactly two (hash and feeDelta).  The function prioritiseTransaction is also updated.",
      "tree": {
        "sha": "b4570c3ec262217988e310f42035a011c0f23b1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4570c3ec262217988e310f42035a011c0f23b1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b9371c6027905f73a2558d6bcaca8a355c28a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b9371c6027905f73a2558d6bcaca8a355c28a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b9371c6027905f73a2558d6bcaca8a355c28a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b9371c6027905f73a2558d6bcaca8a355c28a6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49be7e1bef23afec617ed211a804f375f1620a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49be7e1bef23afec617ed211a804f375f1620a22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49be7e1bef23afec617ed211a804f375f1620a22"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 38,
      "deletions": 46
    },
    "files": [
      {
        "sha": "fbf31b25f6f7eeba3a11e6bcb8d6a01a02de5c9e",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -256,7 +256,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n         # Use prioritisetransaction to lower the effective feerate to 0\n-        self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(tx2.hash, int(-self.relayfee*COIN))\n         cur_time = int(time.time())\n         for i in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n@@ -269,7 +269,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Mine tx2, and then try again\n-        self.nodes[0].prioritisetransaction(tx2.hash, 1e15, int(self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(tx2.hash, int(self.relayfee*COIN))\n \n         # Advance the time on the node so that we can test timelocks\n         self.nodes[0].setmocktime(cur_time+600)"
      },
      {
        "sha": "3437c89ec79655d69a4a864d70652c03d10977bb",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n \n         # Check that descendant modified fees includes fee deltas from\n         # prioritisetransaction\n-        self.nodes[0].prioritisetransaction(chain[-1], 0, 1000)\n+        self.nodes[0].prioritisetransaction(chain[-1], 1000)\n         mempool = self.nodes[0].getrawmempool(True)\n \n         descendant_fees = 0\n@@ -124,7 +124,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         # Prioritise a transaction that has been mined, then add it back to the\n         # mempool by using invalidateblock.\n-        self.nodes[0].prioritisetransaction(chain[-1], 0, 2000)\n+        self.nodes[0].prioritisetransaction(chain[-1], 2000)\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         # Keep node1's tip synced with node0\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())"
      },
      {
        "sha": "13be6eeead979035bef91caede827f4249f18265",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined\n-        self.nodes[0].prioritisetransaction(txids[0][0], 0, int(3*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(txids[0][0], int(3*base_fee*COIN))\n \n         self.nodes[0].generate(1)\n \n@@ -70,7 +70,7 @@ def run_test(self):\n \n         # Add a prioritisation before a tx is in the mempool (de-prioritising a\n         # high-fee transaction so that it's now low fee).\n-        self.nodes[0].prioritisetransaction(high_fee_tx, -1e15, -int(2*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(high_fee_tx, -int(2*base_fee*COIN))\n \n         # Add everything back to mempool\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n@@ -118,7 +118,7 @@ def run_test(self):\n         # This is a less than 1000-byte transaction, so just set the fee\n         # to be the minimum for a 1000 byte transaction and check that it is\n         # accepted.\n-        self.nodes[0].prioritisetransaction(tx_id, 0, int(self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(tx_id, int(self.relayfee*COIN))\n \n         print(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx_hex), tx_id)"
      },
      {
        "sha": "51cbb4dc4c2ec66ea3f50ee7df2bd3f4d35ac76e",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -543,7 +543,7 @@ def test_prioritised_transactions(self):\n             assert(False)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n-        self.nodes[0].prioritisetransaction(tx1a_txid, 0, int(-0.1*COIN))\n+        self.nodes[0].prioritisetransaction(tx1a_txid, int(-0.1*COIN))\n \n         # Now tx1b should be able to replace tx1a\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n@@ -575,7 +575,7 @@ def test_prioritised_transactions(self):\n             assert(False)\n \n         # Now prioritise tx2b to have a higher modified fee\n-        self.nodes[0].prioritisetransaction(tx2b.hash, 0, int(0.1*COIN))\n+        self.nodes[0].prioritisetransaction(tx2b.hash, int(0.1*COIN))\n \n         # tx2b should now be accepted\n         tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)"
      },
      {
        "sha": "a8c5c21ef1714316459f5a9d9b878ef9727c8b6f",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -108,8 +108,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"prioritisetransaction\", 1, \"priority_delta\" },\n-    { \"prioritisetransaction\", 2, \"fee_delta\" },\n+    { \"prioritisetransaction\", 1, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },\n     { \"setban\", 3, \"absolute\" },\n     { \"setnetworkactive\", 0, \"state\" },"
      },
      {
        "sha": "4ff8f39edcf8e67184f33ce55d262b19d81a85fc",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -258,31 +258,28 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 3)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n-            \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n+            \"prioritisetransaction <txid> <fee delta>\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n-            \"2. priority_delta (numeric, required) The priority to add or subtract.\\n\"\n-            \"                  The transaction selection algorithm considers the tx as it would have a higher priority.\\n\"\n-            \"                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) \\n\"\n-            \"3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+            \"2. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\\n\"\n             \"\\nResult:\\n\"\n             \"true              (boolean) Returns true\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n-            + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n+            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 10000\")\n+            + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 10000\")\n         );\n \n     LOCK(cs_main);\n \n     uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n-    CAmount nAmount = request.params[2].get_int64();\n+    CAmount nAmount = request.params[1].get_int64();\n \n-    mempool.PrioritiseTransaction(hash, request.params[1].get_real(), nAmount);\n+    mempool.PrioritiseTransaction(hash, nAmount);\n     return true;\n }\n \n@@ -853,7 +850,7 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,  {\"nblocks\",\"height\"} },\n     { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,  {} },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,  {\"txid\",\"priority_delta\",\"fee_delta\"} },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,  {\"txid\",\"fee_delta\"} },\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"parameters\"} },\n "
      },
      {
        "sha": "58a71ad95e9b22a7956e18a409e30ebcbdbf2230",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -404,11 +404,11 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // Update transaction for any feeDelta created by PrioritiseTransaction\n     // TODO: refactor so that the fee delta is calculated before inserting\n     // into mapTx.\n-    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(hash);\n     if (pos != mapDeltas.end()) {\n-        const std::pair<double, CAmount> &deltas = pos->second;\n-        if (deltas.second) {\n-            mapTx.modify(newit, update_fee_delta(deltas.second));\n+        const CAmount &delta = pos->second;\n+        if (delta) {\n+            mapTx.modify(newit, update_fee_delta(delta));\n         }\n     }\n \n@@ -910,16 +910,15 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256& hash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n-        std::pair<double, CAmount> &deltas = mapDeltas[hash];\n-        deltas.first += dPriorityDelta;\n-        deltas.second += nFeeDelta;\n+        CAmount &delta = mapDeltas[hash];\n+        delta += nFeeDelta;\n         txiter it = mapTx.find(hash);\n         if (it != mapTx.end()) {\n-            mapTx.modify(it, update_fee_delta(deltas.second));\n+            mapTx.modify(it, update_fee_delta(delta));\n             // Now update all ancestors' modified fees with descendants\n             setEntries setAncestors;\n             uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n@@ -930,18 +929,17 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, double dPriorityDelt\n             }\n         }\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", hash.ToString(), dPriorityDelta, FormatMoney(nFeeDelta));\n+    LogPrintf(\"PrioritiseTransaction: %s feerate += %s\\n\", hash.ToString(), FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const\n+void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n-    const std::pair<double, CAmount> &deltas = pos->second;\n-    dPriorityDelta += deltas.first;\n-    nFeeDelta += deltas.second;\n+    const CAmount &delta = pos->second;\n+    nFeeDelta += delta;\n }\n \n void CTxMemPool::ClearPrioritisation(const uint256 hash)"
      },
      {
        "sha": "6b2e6803053f20add79702f415cf32e01925a77e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -501,7 +501,7 @@ class CTxMemPool\n \n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx;\n-    std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n+    std::map<uint256, CAmount> mapDeltas;\n \n     /** Create a new CTxMemPool.\n      */\n@@ -543,8 +543,8 @@ class CTxMemPool\n     bool HasNoInputsOf(const CTransaction& tx) const;\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256& hash, double dPriorityDelta, const CAmount& nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n+    void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta);\n+    void ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n \n public:"
      },
      {
        "sha": "1f57468bc6ff0004f1450bc06266ec2043d1d1e9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b9371c6027905f73a2558d6bcaca8a355c28a6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "patch": "@@ -720,8 +720,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         CAmount nFees = nValueIn-nValueOut;\n         // nModifiedFees includes any fee deltas from PrioritiseTransaction\n         CAmount nModifiedFees = nFees;\n-        double nPriorityDummy = 0;\n-        pool.ApplyDeltas(hash, nPriorityDummy, nModifiedFees);\n+        pool.ApplyDelta(hash, nModifiedFees);\n \n         CAmount inChainInputValue;\n         double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n@@ -4184,7 +4183,6 @@ bool LoadMempool(void)\n         }\n         uint64_t num;\n         file >> num;\n-        double prioritydummy = 0;\n         while (num--) {\n             CTransactionRef tx;\n             int64_t nTime;\n@@ -4195,7 +4193,7 @@ bool LoadMempool(void)\n \n             CAmount amountdelta = nFeeDelta;\n             if (amountdelta) {\n-                mempool.PrioritiseTransaction(tx->GetHash(), prioritydummy, amountdelta);\n+                mempool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n@@ -4216,7 +4214,7 @@ bool LoadMempool(void)\n         file >> mapDeltas;\n \n         for (const auto& i : mapDeltas) {\n-            mempool.PrioritiseTransaction(i.first, prioritydummy, i.second);\n+            mempool.PrioritiseTransaction(i.first, i.second);\n         }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n@@ -4237,7 +4235,7 @@ void DumpMempool(void)\n     {\n         LOCK(mempool.cs);\n         for (const auto &i : mempool.mapDeltas) {\n-            mapDeltas[i.first] = i.second.second;\n+            mapDeltas[i.first] = i.second;\n         }\n         vinfo = mempool.infoAll();\n     }"
      }
    ]
  },
  {
    "sha": "359e8a03d1667dca3e8375695131b8b5e6c54f0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTllOGEwM2QxNjY3ZGNhM2U4Mzc1Njk1MTMxYjhiNWU2YzU0ZjBh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T14:24:35Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:20Z"
      },
      "message": "[cleanup] Remove coin age priority completely.\n\nRemove GetPriority and ComputePriority.  Remove internal machinery for tracking priority in CTxMemPoolEntry.",
      "tree": {
        "sha": "b92b29328bfce5456650488ad40ed87350697b1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b92b29328bfce5456650488ad40ed87350697b1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/359e8a03d1667dca3e8375695131b8b5e6c54f0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/359e8a03d1667dca3e8375695131b8b5e6c54f0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/359e8a03d1667dca3e8375695131b8b5e6c54f0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/359e8a03d1667dca3e8375695131b8b5e6c54f0a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b9371c6027905f73a2558d6bcaca8a355c28a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b9371c6027905f73a2558d6bcaca8a355c28a6"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 11,
      "deletions": 97
    },
    "files": [
      {
        "sha": "31a392ae7c8947b7f190405f27153a770f252332",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -12,14 +12,13 @@\n static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n {\n     int64_t nTime = 0;\n-    double dPriority = 10.0;\n     unsigned int nHeight = 1;\n     bool spendsCoinbase = false;\n     unsigned int sigOpCost = 4;\n     LockPoints lp;\n     pool.addUnchecked(tx.GetHash(), CTxMemPoolEntry(\n-                                        MakeTransactionRef(tx), nFee, nTime, dPriority, nHeight,\n-                                        tx.GetValueOut(), spendsCoinbase, sigOpCost, lp));\n+                                        MakeTransactionRef(tx), nFee, nTime, nHeight,\n+                                        spendsCoinbase, sigOpCost, lp));\n }\n \n // Right now this is only testing eviction performance in an extremely small"
      },
      {
        "sha": "b2e33abf33ba5f71efe95068e6bbbce63562dac9",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -295,25 +295,6 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const\n-{\n-    inChainInputValue = 0;\n-    if (tx.IsCoinBase())\n-        return 0.0;\n-    double dResult = 0.0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        const CCoins* coins = AccessCoins(txin.prevout.hash);\n-        assert(coins);\n-        if (!coins->IsAvailable(txin.prevout.n)) continue;\n-        if (coins->nHeight <= nHeight) {\n-            dResult += (double)(coins->vout[txin.prevout.n].nValue) * (nHeight-coins->nHeight);\n-            inChainInputValue += coins->vout[txin.prevout.n].nValue;\n-        }\n-    }\n-    return tx.ComputePriority(dResult);\n-}\n-\n CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {\n     assert(!cache.hasModifier);\n     cache.hasModifier = true;"
      },
      {
        "sha": "d921f5c2a5c79b75342b01b34ec83afa7da69b1d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -460,13 +460,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    /**\n-     * Return priority of tx at height nHeight. Also calculate the sum of the values of the inputs\n-     * that are already in the chain.  These are the inputs that will age and increase priority as\n-     * new blocks are added to the chain.\n-     */\n-    double GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const;\n-\n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n \n     friend class CCoinsModifier;"
      },
      {
        "sha": "364a70adcd4d1c84f76cf0e95202e818065a0b0c",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -89,32 +89,6 @@ CAmount CTransaction::GetValueOut() const\n     return nValueOut;\n }\n \n-double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSize) const\n-{\n-    nTxSize = CalculateModifiedSize(nTxSize);\n-    if (nTxSize == 0) return 0.0;\n-\n-    return dPriorityInputs / nTxSize;\n-}\n-\n-unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n-{\n-    // In order to avoid disincentivizing cleaning up the UTXO set we don't count\n-    // the constant overhead for each txin and up to 110 bytes of scriptSig (which\n-    // is enough to cover a compressed pubkey p2sh redemption) for priority.\n-    // Providing any more cleanup incentive than making additional inputs free would\n-    // risk encouraging people to create junk outputs to redeem later.\n-    if (nTxSize == 0)\n-        nTxSize = (GetTransactionWeight(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n-    for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n-    {\n-        unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n-        if (nTxSize > offset)\n-            nTxSize -= offset;\n-    }\n-    return nTxSize;\n-}\n-\n unsigned int CTransaction::GetTotalSize() const\n {\n     return ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "d413e8b087529f5163df88fabd541592065d310d",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -361,12 +361,6 @@ class CTransaction\n     // GetValueIn() is a method on CCoinsViewCache, because\n     // inputs must be known to compute value in.\n \n-    // Compute priority, given priority of inputs and (optionally) tx size\n-    double ComputePriority(double dPriorityInputs, unsigned int nTxSize=0) const;\n-\n-    // Compute modified tx size for priority calculation (optionally given tx size)\n-    unsigned int CalculateModifiedSize(unsigned int nTxSize=0) const;\n-\n     /**\n      * Get the total transaction size in bytes, including witness data.\n      * \"Total Size\" defined in BIP141 and BIP144."
      },
      {
        "sha": "a3f706d9af14e33f9eaf05fca9f1676391d93dd7",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -407,7 +407,6 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     /* set the fee to just below tx2's feerate when including ancestor */\n     CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n \n-    //CTxMemPoolEntry entry7(tx7, fee, 2, 10.0, 1, true);\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(fee).FromTx(tx7));\n     BOOST_CHECK_EQUAL(pool.size(), 7);\n     sortedOrder.insert(sortedOrder.begin()+1, tx7.GetHash().ToString());"
      },
      {
        "sha": "fc37474362169dfee9b0bad034f28d129165f0cb",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -147,8 +147,8 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx) {\n }\n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn) {\n-    return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, 0.0, nHeight,\n-                           0, spendsCoinbase, sigOpCost, lp);\n+    return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, nHeight,\n+                           spendsCoinbase, sigOpCost, lp);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "79dd0fb5f9249da636d034371dbcf7c1f52e6e69",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -19,22 +19,17 @@\n #include \"version.h\"\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                                 CAmount _inChainInputValue,\n+                                 int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n-    inChainInputValue(_inChainInputValue),\n+    tx(_tx), nFee(_nFee), nTime(_nTime), entryHeight(_entryHeight),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n     nTxWeight = GetTransactionWeight(*tx);\n-    nModSize = tx->CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n \n     nCountWithDescendants = 1;\n     nSizeWithDescendants = GetTxSize();\n     nModFeesWithDescendants = nFee;\n-    CAmount nValueIn = tx->GetValueOut()+nFee;\n-    assert(inChainInputValue <= nValueIn);\n \n     feeDelta = 0;\n \n@@ -49,16 +44,6 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n     *this = other;\n }\n \n-double\n-CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n-{\n-    double deltaPriority = ((double)(currentHeight-entryHeight)*inChainInputValue)/nModSize;\n-    double dResult = entryPriority + deltaPriority;\n-    if (dResult < 0) // This should only happen if it was called with a height below entry height\n-        dResult = 0;\n-    return dResult;\n-}\n-\n void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n {\n     nModFeesWithDescendants += newFeeDelta - feeDelta;"
      },
      {
        "sha": "5d82e3016c1b0ff6c103e03f41cdcbe67d71ec40",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -73,12 +73,9 @@ class CTxMemPoolEntry\n     CTransactionRef tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n     size_t nTxWeight;          //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n-    size_t nModSize;           //!< ... and modified size for priority\n     size_t nUsageSize;         //!< ... and total memory usage\n     int64_t nTime;             //!< Local time when entering the mempool\n-    double entryPriority;      //!< Priority when entering the mempool\n     unsigned int entryHeight;  //!< Chain height when entering the mempool\n-    CAmount inChainInputValue; //!< Sum of all txin values that are already in blockchain\n     bool spendsCoinbase;       //!< keep track of transactions that spend a coinbase\n     int64_t sigOpCost;         //!< Total sigop cost\n     int64_t feeDelta;          //!< Used for determining the priority of the transaction for mining in a block\n@@ -101,19 +98,14 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    CAmount _inChainInputValue, bool spendsCoinbase,\n+                    int64_t _nTime, unsigned int _entryHeight,\n+                    bool spendsCoinbase,\n                     int64_t nSigOpsCost, LockPoints lp);\n \n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return *this->tx; }\n     CTransactionRef GetSharedTx() const { return this->tx; }\n-    /**\n-     * Fast calculation of lower bound of current priority as update\n-     * from entry priority. Only inputs that were originally in-chain will age.\n-     */\n-    double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const;\n     size_t GetTxWeight() const { return nTxWeight; }"
      },
      {
        "sha": "4a67dead324e6dd57363d8458911989563511340",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -722,9 +722,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         CAmount nModifiedFees = nFees;\n         pool.ApplyDelta(hash, nModifiedFees);\n \n-        CAmount inChainInputValue;\n-        double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n-\n         // Keep track of transactions that spend a coinbase, which we re-scan\n         // during reorgs to ensure COINBASE_MATURITY is still met.\n         bool fSpendsCoinbase = false;\n@@ -736,8 +733,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, dPriority, chainActive.Height(),\n-                              inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n+        CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, chainActive.Height(),\n+                              fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Check that the transaction doesn't have an excessive number of"
      },
      {
        "sha": "12117abd176e1e652b9cf173f8dd2a2febd46dff",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359e8a03d1667dca3e8375695131b8b5e6c54f0a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "patch": "@@ -2699,7 +2699,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n     if (GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         LockPoints lp;\n-        CTxMemPoolEntry entry(wtxNew.tx, 0, 0, 0, 0, 0, false, 0, lp);\n+        CTxMemPoolEntry entry(wtxNew.tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries setAncestors;\n         size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n         size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;"
      }
    ]
  },
  {
    "sha": "7d4e9509ade0c258728011d8f6544ec3e75d63dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDRlOTUwOWFkZTBjMjU4NzI4MDExZDhmNjU0NGVjM2U3NWQ2M2Rj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T02:48:10Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:20Z"
      },
      "message": "Allow setting minrelaytxfee to 0\n\nSetting minrelaytxfee to 0 will allow all transactions regardless of fee to enter your mempool until it reaches its size limit.  However now that mempool limiting is governed by a separate incrementalrelay fee, it is an unnecessary restriction to prevent a minrelaytxfee of 0.",
      "tree": {
        "sha": "8d5d25eb3c9f6c94ab2124d53f7643763b9f6a6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d5d25eb3c9f6c94ab2124d53f7643763b9f6a6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d4e9509ade0c258728011d8f6544ec3e75d63dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4e9509ade0c258728011d8f6544ec3e75d63dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d4e9509ade0c258728011d8f6544ec3e75d63dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4e9509ade0c258728011d8f6544ec3e75d63dc/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/359e8a03d1667dca3e8375695131b8b5e6c54f0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/359e8a03d1667dca3e8375695131b8b5e6c54f0a"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "47d18dad6b2efd232a71bf0ab395e0d76357bc6e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d4e9509ade0c258728011d8f6544ec3e75d63dc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d4e9509ade0c258728011d8f6544ec3e75d63dc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d4e9509ade0c258728011d8f6544ec3e75d63dc",
        "patch": "@@ -977,13 +977,14 @@ bool AppInitParameterInteraction()\n     // If you are mining, be careful setting this:\n     // if you set it to zero then\n     // a transaction spammer can cheaply fill blocks using\n-    // 1-satoshi-fee transactions. It should be set above the real\n+    // 0-fee transactions. It should be set above the real\n     // cost to you of processing a transaction.\n     if (IsArgSet(\"-minrelaytxfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-minrelaytxfee\", \"\"), n) || 0 == n)\n+        if (!ParseMoney(GetArg(\"-minrelaytxfee\", \"\"), n)) {\n             return InitError(AmountErrMsg(\"minrelaytxfee\", GetArg(\"-minrelaytxfee\", \"\")));\n+        }\n         // High fee check is done afterward in CWallet::ParameterInteraction()\n         ::minRelayTxFee = CFeeRate(n);\n     } else if (incrementalRelayFee > ::minRelayTxFee) {"
      }
    ]
  },
  {
    "sha": "b421e6ddcf00f220732f43742393452bb8bf4cdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDIxZTZkZGNmMDBmMjIwNzMyZjQzNzQyMzkzNDUyYmI4YmY0Y2Rk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T15:40:42Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-03T21:50:20Z"
      },
      "message": "Update example bitcoin.conf",
      "tree": {
        "sha": "252c2ac12211fa86fc9d8c99393c8b227c63b033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/252c2ac12211fa86fc9d8c99393c8b227c63b033"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b421e6ddcf00f220732f43742393452bb8bf4cdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b421e6ddcf00f220732f43742393452bb8bf4cdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b421e6ddcf00f220732f43742393452bb8bf4cdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b421e6ddcf00f220732f43742393452bb8bf4cdd/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d4e9509ade0c258728011d8f6544ec3e75d63dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4e9509ade0c258728011d8f6544ec3e75d63dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d4e9509ade0c258728011d8f6544ec3e75d63dc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "923ab75314c04336e45adc6ba6e3baa0afa29d42",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b421e6ddcf00f220732f43742393452bb8bf4cdd/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b421e6ddcf00f220732f43742393452bb8bf4cdd/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=b421e6ddcf00f220732f43742393452bb8bf4cdd",
        "patch": "@@ -116,9 +116,7 @@\n # running on another host using this option:\n #rpcconnect=127.0.0.1\n \n-# Transaction Fee Changes in 0.10.0\n-\n-# Create transactions that have enough fees (or priority) so they are likely to begin confirmation within n blocks (default: 1).\n+# Create transactions that have enough fees so they are likely to begin confirmation within n blocks (default: 6).\n # This setting is over-ridden by the -paytxfee option.\n #txconfirmtarget=n\n "
      }
    ]
  }
]