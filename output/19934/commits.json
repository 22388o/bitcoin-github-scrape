[
  {
    "sha": "fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzdmODRhOWNhOThlZTBkOWMyZDFmMDkyYmU2YjVkYmEzZjJhNTgy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-09-10T05:42:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-09-10T14:54:30Z"
      },
      "message": "tests: Add fuzzing harness for Keccak and SHA3_256",
      "tree": {
        "sha": "7b1b459c526c10ebd5607d2db0964f0ee8505670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b1b459c526c10ebd5607d2db0964f0ee8505670"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a47e5964861dfb98d61719c9852e12fd6da84c31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47e5964861dfb98d61719c9852e12fd6da84c31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a47e5964861dfb98d61719c9852e12fd6da84c31"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "664e65accc2b475dbe8ed4149a9a383c8a5049c6",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=fc7f84a9ca98ee0d9c2d1f092be6b5dba3f2a582",
        "patch": "@@ -7,6 +7,7 @@\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n+#include <crypto/sha3.h>\n #include <crypto/sha512.h>\n #include <hash.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -32,6 +33,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA1 sha1;\n     CSHA256 sha256;\n     CSHA512 sha512;\n+    SHA3_256 sha3;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n \n     while (fuzzed_data_provider.ConsumeBool()) {\n@@ -51,6 +53,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)ripemd160.Write(data.data(), data.size());\n             (void)sha1.Write(data.data(), data.size());\n             (void)sha256.Write(data.data(), data.size());\n+            (void)sha3.Write(data);\n             (void)sha512.Write(data.data(), data.size());\n             (void)sip_hasher.Write(data.data(), data.size());\n \n@@ -65,11 +68,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)ripemd160.Reset();\n             (void)sha1.Reset();\n             (void)sha256.Reset();\n+            (void)sha3.Reset();\n             (void)sha512.Reset();\n             break;\n         }\n         case 2: {\n-            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 8)) {\n+            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n             case 0: {\n                 data.resize(CHash160::OUTPUT_SIZE);\n                 hash160.Finalize(data);\n@@ -115,9 +119,21 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                 data[0] = sip_hasher.Finalize() % 256;\n                 break;\n             }\n+            case 9: {\n+                data.resize(SHA3_256::OUTPUT_SIZE);\n+                sha3.Finalize(data);\n+                break;\n+            }\n             }\n             break;\n         }\n         }\n     }\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        uint64_t state[25];\n+        for (size_t i = 0; i < 25; ++i) {\n+            state[i] = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+        }\n+        KeccakF(state);\n+    }\n }"
      }
    ]
  }
]