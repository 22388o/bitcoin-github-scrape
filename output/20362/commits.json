[
  {
    "sha": "fa891ebded03cbdd2cd02b1399fc9611012201ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg5MWViZGVkMDNjYmRkMmNkMDJiMTM5OWZjOTYxMTAxMjIwMWJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-10T12:35:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T15:58:03Z"
      },
      "message": "test: Pass default_sync_fun to TestNode constructor",
      "tree": {
        "sha": "df3c4e7181b3060f5b19200243328dbf04659bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df3c4e7181b3060f5b19200243328dbf04659bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa891ebded03cbdd2cd02b1399fc9611012201ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh98wv7BUZSQNzbpTX+sLHDyo3STBJdhqRgdSBYT6bNbcURM3E91uklWvmNCCo7\n7KDU9+4U71sYxvynv92D//85uz0OCOWKWHubckqjr/utjpMKsCvtIKbCWsSLioe7\npleVinzrbiGNPmwdPx+5URfwqS6GyTNJr5LwCL0G74G3EwzcBjWO0S2LvyoTZcg4\no0+4kCRjHnx2v7vjtm5MGmp0PJU/NnxGmUtPcLcZ10VDGuA0bngqxEl2DlC+OGKY\nqrN/KZ0qHHOTHjzD/iWCHo6anm/ExCIWCTzYJ/pfVgv6yuyei8CxdUBaSxRb8Egr\nnCrqWT84j5NtAXei6+vYsm2O3zgjdpDrlqDDqDeBD0i4T/d2YJ8bGg3N6B1uF+pB\nP20puoxXE3jLEbn324kcEF/U1lSEtT1Pn0TMgzPDR5l1g8WQjsUUOpR35d164pD1\nwf27NKgq25YIW34/9ccqX/siePVdNM3kplwEgJ/v982+RTxYJgIV3CuhsP+0saGj\n+leLn951\n=t2LI\n-----END PGP SIGNATURE-----",
        "payload": "tree df3c4e7181b3060f5b19200243328dbf04659bc5\nparent 67b9416540566794c39425b38bc83ad138371ddf\nauthor MarcoFalke <falke.marco@gmail.com> 1605011748 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1627487883 +0200\n\ntest: Pass default_sync_fun to TestNode constructor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa891ebded03cbdd2cd02b1399fc9611012201ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa891ebded03cbdd2cd02b1399fc9611012201ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa891ebded03cbdd2cd02b1399fc9611012201ba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67b9416540566794c39425b38bc83ad138371ddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67b9416540566794c39425b38bc83ad138371ddf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67b9416540566794c39425b38bc83ad138371ddf"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b572d2c0b600de17c7f0a182bac16d4870686d1b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa891ebded03cbdd2cd02b1399fc9611012201ba/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa891ebded03cbdd2cd02b1399fc9611012201ba/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa891ebded03cbdd2cd02b1399fc9611012201ba",
        "patch": "@@ -476,6 +476,7 @@ def get_bin_from_version(version, bin_name, bin_default):\n         assert_equal(len(binary_cli), num_nodes)\n         for i in range(num_nodes):\n             test_node_i = TestNode(\n+                self.sync_all,\n                 i,\n                 get_datadir_path(self.options.tmpdir, i),\n                 chain=self.chain,\n@@ -714,6 +715,7 @@ def _initialize_chain(self):\n             initialize_datadir(self.options.cachedir, CACHE_NODE_ID, self.chain)\n             self.nodes.append(\n                 TestNode(\n+                    self.sync_all,\n                     CACHE_NODE_ID,\n                     cache_node_dir,\n                     chain=self.chain,"
      },
      {
        "sha": "5a69273fc40480161e78080cb7f577182268e40f",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa891ebded03cbdd2cd02b1399fc9611012201ba/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa891ebded03cbdd2cd02b1399fc9611012201ba/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa891ebded03cbdd2cd02b1399fc9611012201ba",
        "patch": "@@ -63,14 +63,14 @@ class TestNode():\n \n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n-\n-    def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n+    def __init__(self, default_sync_fun, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n                 the node starts.\n         \"\"\"\n \n+        self.default_sync_fun = default_sync_fun\n         self.index = i\n         self.p2p_conn_index = 1\n         self.datadir = datadir"
      }
    ]
  },
  {
    "sha": "fac2235c5b826c0a79cd709199978b29a5b2773b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMyMjM1YzViODI2YzBhNzljZDcwOTE5OTk3OGIyOWE1YjI3NzNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-10T11:42:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T15:58:24Z"
      },
      "message": "test: Create TestNode._rpc_dispatch method",
      "tree": {
        "sha": "2fdbe2a4a108c442a71c32ae675726733aa929d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fdbe2a4a108c442a71c32ae675726733aa929d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac2235c5b826c0a79cd709199978b29a5b2773b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUggDAwAocjhO5TpWSlQ2mfq179BkxjteXbj8mNAK0z3wB9i/Njhp0b99O1uinY0\nLo3VsRY3s33G8w2TnEvgC4Ugfi+gPbpcAgfBKjjBcSGqLlEezvhOdzReJjnc6qOP\n4YWL4gsPnOXh7/OVTS8LyQ3sG27OFylvau35+6fpZ1DJM49jHdOC9Z1GmtlWGPwu\nUw6ASrSj3dGXkK+XCKm0MMzoOrB4C2rbMoWcZ9tPgUxrD9qIQXdZuSjGQ/J+rI/L\nYWzMHOmA6JP71sagmmoQWoudRWB9gtUJmY9ZwOwKwKAf2ulxWCv6FqwfONH39ilv\n8yVeubY60alys9ueo6MlzTJdNGKWZYAlgQidSh/ufehWtVzI5XFrCjZJqUNJIV4a\nHRsfPits/HGx4kW+P9KZcRu4VYnIMVostClmbRnvZry73byWMUQgVmkT/Wvc+QsQ\n1TwcONri23dmP4ZUyiAmJBihL9WLRWoJ9uoQeETReypnEnZZk8IWMyZyeSgFUhoJ\nYbeKEX3C\n=ribd\n-----END PGP SIGNATURE-----",
        "payload": "tree 2fdbe2a4a108c442a71c32ae675726733aa929d8\nparent fa891ebded03cbdd2cd02b1399fc9611012201ba\nauthor MarcoFalke <falke.marco@gmail.com> 1605008550 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1627487904 +0200\n\ntest: Create TestNode._rpc_dispatch method\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac2235c5b826c0a79cd709199978b29a5b2773b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac2235c5b826c0a79cd709199978b29a5b2773b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac2235c5b826c0a79cd709199978b29a5b2773b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa891ebded03cbdd2cd02b1399fc9611012201ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa891ebded03cbdd2cd02b1399fc9611012201ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa891ebded03cbdd2cd02b1399fc9611012201ba"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6491be89813de396802205819f6391602662481f",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac2235c5b826c0a79cd709199978b29a5b2773b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac2235c5b826c0a79cd709199978b29a5b2773b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fac2235c5b826c0a79cd709199978b29a5b2773b",
        "patch": "@@ -177,6 +177,9 @@ def __del__(self):\n \n     def __getattr__(self, name):\n         \"\"\"Dispatches any unrecognised messages to the RPC connection or a CLI instance.\"\"\"\n+        return self._rpc_dispatch(name)\n+\n+    def _rpc_dispatch(self, name):\n         if self.use_cli:\n             return getattr(RPCOverloadWrapper(self.cli, True, self.descriptors), name)\n         else:"
      }
    ]
  },
  {
    "sha": "faa93599e1ce467590b773f00e64897c67a3d271",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE5MzU5OWUxY2U0Njc1OTBiNzczZjAwZTY0ODk3YzY3YTNkMjcx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-10T15:56:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T15:58:25Z"
      },
      "message": "test: Implicitly sync after generate*, unless opted out",
      "tree": {
        "sha": "f84cc880a90e25e5d993f06963fab05c6407c5f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f84cc880a90e25e5d993f06963fab05c6407c5f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa93599e1ce467590b773f00e64897c67a3d271",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhUDQv/a/ECU8iWQrZXBM+mq0pS8bV7KNBY5XOusbC6V+QhavY72xpv7Wgnm1FT\nlLB8n9ZUSt95pEpkWy2SLwLWPlB8BJ3Wtj+1WQ/WMzfBT4GXUrHgfw1sQ1yyH4Jf\nbQG8i9iV+JK5xMhCutow0lZrZMznU49W6N7KD85GttvhzTFZ4eEf1NkDINiBLUyX\nrJYXiG9bNpYRovAmLiNjnaxzyjvqkxFXua7kZ1ZyxzHR/2PnlKSlJyl79/oz9UsU\n/srVw1xxNCAyeOVfLnDQRos2aC8RiGPZUqzRPoqjXF9Wyzdni9rAwNL2pk1SHHyj\ns+TOGzmNre95mqRlAfIY4joUmxNPYhvc4AiB9N32Phc0dS9tu4t+sz4Bxs03EAsQ\nGfG3lHFu/LErO99/nOsrayNzMjQNq+BSciSFdKWkEOMKzGEZPG64/FpgqMoPtbHq\n+ouOJ3gQJBXjbMZlIVDg576UgHgDx2T7lPRzkte59HZ5Lf7uHd5wCSzyqzSx8FGK\n71XEUPYJ\n=fsjn\n-----END PGP SIGNATURE-----",
        "payload": "tree f84cc880a90e25e5d993f06963fab05c6407c5f6\nparent fac2235c5b826c0a79cd709199978b29a5b2773b\nauthor MarcoFalke <falke.marco@gmail.com> 1605023779 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1627487905 +0200\n\ntest: Implicitly sync after generate*, unless opted out\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa93599e1ce467590b773f00e64897c67a3d271",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa93599e1ce467590b773f00e64897c67a3d271",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa93599e1ce467590b773f00e64897c67a3d271/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac2235c5b826c0a79cd709199978b29a5b2773b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac2235c5b826c0a79cd709199978b29a5b2773b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac2235c5b826c0a79cd709199978b29a5b2773b"
      }
    ],
    "stats": {
      "total": 323,
      "additions": 153,
      "deletions": 170
    },
    "files": [
      {
        "sha": "81bc4c296fa1b5199de9d516fb53366dfa9f0fa8",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -141,8 +141,7 @@ def run_test(self):\n         peer_messaging = self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all(self.nodes[0:2])\n+        blocks = [int(self.nodes[0].generate(sync_fun=self.sync_all(self.nodes[0:2]), nblocks=1)[0], 16)]\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      },
      {
        "sha": "a5273209e1ac947bea5724519bed570aacd2b7f0",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -26,18 +26,18 @@ def setup_network(self):\n         # We'll connect the nodes later\n \n     def run_test(self):\n-        self.nodes[0].generate(3)\n+        self.nodes[0].generate(3, sync_fun=None)\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         # Deleting the undo file will result in reorg failure\n         os.unlink(os.path.join(datadir, self.chain, 'blocks', 'rev00000.dat'))\n \n         # Connecting to a node with a more work chain will trigger a reorg\n         # attempt.\n-        self.nodes[1].generate(3)\n+        self.nodes[1].generate(3, sync_fun=None)\n         with self.nodes[0].assert_debug_log([\"Failed to disconnect block\"]):\n             self.connect_nodes(0, 1)\n-            self.nodes[1].generate(1)\n+            self.nodes[1].generate(1, sync_fun=None)\n \n             # Check that node0 aborted\n             self.log.info(\"Waiting for crash\")"
      },
      {
        "sha": "7cfca5fc3e1fdb2d351ed3c936ca3251b4ad772b",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -273,7 +273,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generate(1, sync_fun=None)\n             cur_time += 600\n \n         assert tx2.hash in self.nodes[0].getrawmempool()\n@@ -349,7 +349,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Reset the chain and get rid of the mocktimed-blocks\n         self.nodes[0].setmocktime(0)\n         self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generate(10, sync_fun=None)\n \n     # Make sure that BIP68 isn't being used to validate blocks prior to\n     # activation height.  If more blocks are mined prior to this test\n@@ -403,9 +403,9 @@ def activateCSV(self):\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)\n-        self.nodes[0].generate(min_activation_height - height - 2)\n+        self.nodes[0].generate(min_activation_height - height - 2, sync_fun=None)\n         assert not softfork_active(self.nodes[0], 'csv')\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n         assert softfork_active(self.nodes[0], 'csv')\n         self.sync_blocks()\n "
      },
      {
        "sha": "37f7012cd6fa7e271e51218308f819e74babfe2e",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -228,7 +228,7 @@ def _test_coin_stats_index(self):\n         res9 = index_node.gettxoutsetinfo('muhash')\n         assert_equal(res8, res9)\n \n-        index_node.generate(1)\n+        index_node.generate(1, sync_fun=None)\n         res10 = index_node.gettxoutsetinfo('muhash')\n         assert(res8['txouts'] < res10['txouts'])\n \n@@ -254,7 +254,7 @@ def _test_reorg_index(self):\n         assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n \n         # Add two new blocks\n-        block = index_node.generate(2)[1]\n+        block = index_node.generate(2, sync_fun=None)[1]\n         res = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=None, use_index=False)\n \n         # Test that the result of the reorged block is not returned for its old block height"
      },
      {
        "sha": "21c4fb04b6cd4742d3209633c6401a4d4fb3c279",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -218,7 +218,7 @@ def run_test(self):\n \n         # Start by creating a lot of utxos on node3\n         initial_height = self.nodes[3].getblockcount()\n-        utxo_list = create_confirmed_utxos(self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n+        utxo_list = create_confirmed_utxos(self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000, sync_fun=None)\n         self.log.info(\"Prepped %d utxo entries\", len(utxo_list))\n \n         # Sync these blocks with the other nodes\n@@ -258,6 +258,7 @@ def run_test(self):\n                     nblocks=min(10, current_height + 1 - self.nodes[3].getblockcount()),\n                     # new address to avoid mining a block that has just been invalidated\n                     address=self.nodes[3].getnewaddress(),\n+                    sync_fun=None,\n                 ))\n             self.log.debug(\"Syncing %d new blocks...\", len(block_hashes))\n             self.sync_node3blocks(block_hashes)"
      },
      {
        "sha": "b234dbd783174a9a06b26f19613102536190f663",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -224,7 +224,7 @@ def run_test(self):\n \n         # Mine\n         while len(self.nodes[0].getrawmempool()) > 0:\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generate(1, sync_fun=None)\n \n         # Repeatedly split those 2 outputs, doubling twice for each rep\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n@@ -234,12 +234,12 @@ def run_test(self):\n             while len(self.txouts) > 0:\n                 split_inputs(self.nodes[0], self.txouts, self.txouts2)\n             while len(self.nodes[0].getrawmempool()) > 0:\n-                self.nodes[0].generate(1)\n+                self.nodes[0].generate(1, sync_fun=None)\n             # Double txouts2 to txouts\n             while len(self.txouts2) > 0:\n                 split_inputs(self.nodes[0], self.txouts2, self.txouts)\n             while len(self.nodes[0].getrawmempool()) > 0:\n-                self.nodes[0].generate(1)\n+                self.nodes[0].generate(1, sync_fun=None)\n             reps += 1\n         self.log.info(\"Finished splitting\")\n "
      },
      {
        "sha": "b6ea05cda35d1ffe2f39a45888d58e39450682bd",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -29,7 +29,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.nodes[1].setnetworkactive(state=False)\n-        self.nodes[0].generate(COINBASE_MATURITY)\n+        self.nodes[0].generate(COINBASE_MATURITY, sync_fun=None)\n \n         # Parsing the url of our node to get settings for config file\n         data_dir = self.nodes[0].datadir"
      },
      {
        "sha": "ff90629b41ad2bad99f859cc48c2dc7f0ac01869",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -51,8 +51,7 @@ def run_test(self):\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n         self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n-        hashes = self.nodes[0].generatetoaddress(num_blocks_to_generate,\n-                                                 self.nodes[0].get_deterministic_priv_key().address)\n+        hashes = self.nodes[0].generate(num_blocks_to_generate, sync_fun=None)\n \n         self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n \n@@ -73,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n \n         self.log.info(\"Generating one more block\")\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n \n         self.log.info(\"Verifying nodes are all synced\")\n "
      },
      {
        "sha": "cec33456b482719efb4b25d49e43243a049f8224",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -148,7 +148,7 @@ def run_test(self):\n             # about newly confirmed bump2 and newly conflicted tx2.\n             self.disconnect_nodes(0, 1)\n             bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n-            blockhash2 = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+            blockhash2 = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=None)[0]\n             blockheight2 = self.nodes[0].getblockcount()\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)"
      },
      {
        "sha": "2564a4548415cd0be5e56f5a7aa2f1114e8a02c1",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -118,9 +118,8 @@ def setup_nodes(self):\n \n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n-        self.nodes[1].generate(200)\n-        self.sync_blocks(self.nodes[0:2])\n-        self.nodes[0].generate(150)\n+        self.nodes[1].generate(200, sync_fun=lambda: self.sync_blocks(self.nodes[0:2]))\n+        self.nodes[0].generate(150, sync_fun=None)\n \n         # Then mine enough full blocks to create more than 550MiB of data\n         mine_large_blocks(self.nodes[0], 645)\n@@ -193,7 +192,7 @@ def reorg_test(self):\n         self.disconnect_nodes(1, 2)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n-        self.nodes[1].generate(300)\n+        self.nodes[1].generate(300, sync_fun=None)\n \n         self.log.info(\"Reconnect nodes\")\n         self.connect_nodes(0, 1)\n@@ -245,7 +244,7 @@ def reorg_back(self):\n             self.nodes[0].invalidateblock(curchainhash)\n             assert_equal(self.nodes[0].getblockcount(), self.mainchainheight)\n             assert_equal(self.nodes[0].getbestblockhash(), self.mainchainhash2)\n-            goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n+            goalbesthash = self.nodes[0].generate(blocks_to_mine, sync_fun=None)[-1]\n             goalbestheight = first_reorg_height + 1\n \n         self.log.info(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n@@ -288,7 +287,7 @@ def has_block(index):\n         assert_equal(block1_details[\"nTx\"], len(block1_details[\"tx\"]))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n-        node.generate(6)\n+        node.generate(6, sync_fun=None)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # Pruned block should still know the number of transactions\n@@ -319,7 +318,7 @@ def has_block(index):\n         assert has_block(2), \"blk00002.dat is still there, should be pruned by now\"\n \n         # advance the tip so blk00002.dat and blk00003.dat can be pruned (the last 288 blocks should now be in blk00004.dat)\n-        node.generate(288)\n+        node.generate(288, sync_fun=None)\n         prune(1000)\n         assert not has_block(2), \"blk00002.dat is still there, should be pruned by now\"\n         assert not has_block(3), \"blk00003.dat is still there, should be pruned by now\""
      },
      {
        "sha": "d98040d0c3611599025ab3f382681f9cbf67efc6",
        "filename": "test/functional/feature_signet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_signet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/feature_signet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_signet.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n         assert_equal(mining_info['networkhashps'], Decimal('0'))\n         assert_equal(mining_info['pooledtx'], 0)\n \n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n \n         self.log.info(\"pregenerated signet blocks check\")\n "
      },
      {
        "sha": "40c925cb62850a1f77b4def2ffec11f0c116e524",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -83,7 +83,7 @@ class ZMQTestSetupBlock:\n     \"\"\"\n \n     def __init__(self, node):\n-        self.block_hash = node.generate(1)[0]\n+        self.block_hash = node.generate(1, sync_fun=None)[0]\n         coinbase = node.getblock(self.block_hash, 2)['tx'][0]\n         self.tx_hash = coinbase['txid']\n         self.raw_tx = coinbase['hex']\n@@ -257,14 +257,14 @@ def test_reorg(self):\n \n         # Generate 1 block in nodes[0] with 1 mempool tx and receive all notifications\n         payment_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n-        disconnect_block = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+        disconnect_block = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=None)[0]\n         disconnect_cb = self.nodes[0].getblock(disconnect_block)[\"tx\"][0]\n         assert_equal(self.nodes[0].getbestblockhash(), hashblock.receive().hex())\n         assert_equal(hashtx.receive().hex(), payment_txid)\n         assert_equal(hashtx.receive().hex(), disconnect_cb)\n \n         # Generate 2 blocks in nodes[1] to a different address to ensure split\n-        connect_blocks = self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+        connect_blocks = self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=None)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n         self.connect_nodes(0, 1)\n@@ -308,13 +308,13 @@ def test_sequence(self):\n         seq_num = 1\n \n         # Generate 1 block in nodes[0] and receive all notifications\n-        dc_block = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+        dc_block = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=None)[0]\n \n         # Note: We are not notified of any block transactions, coinbase or mined\n         assert_equal((self.nodes[0].getbestblockhash(), \"C\", None), seq.receive_sequence())\n \n         # Generate 2 blocks in nodes[1] to a different address to ensure a chain split\n-        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=None)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n         self.connect_nodes(0, 1)\n@@ -562,7 +562,7 @@ def test_multiple_interfaces(self):\n         ], sync_blocks=False)\n \n         # Generate 1 block in nodes[0] and receive all notifications\n-        self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+        self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE, sync_fun=None)\n \n         # Should receive the same block hash on both subscribers\n         assert_equal(self.nodes[0].getbestblockhash(), subscribers[0].receive().hex())"
      },
      {
        "sha": "172f5f8346ffea588125794738c120d2295e8c4b",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -38,8 +38,8 @@ def run_test(self):\n \n         old_node, new_node = self.nodes\n         new_wallet = MiniWallet(new_node)\n-        new_wallet.generate(1)\n-        new_node.generate(COINBASE_MATURITY)\n+        new_wallet.generate(1, sync_fun=None)\n+        new_node.generate(COINBASE_MATURITY, sync_fun=None)\n         # Sync the nodes to ensure old_node has the block that contains the coinbase that new_wallet will spend.\n         # Otherwise, because coinbases are only valid in a block and not as loose txns, if the nodes aren't synced\n         # unbroadcasted_tx won't pass old_node's `MemPoolAccept::PreChecks`."
      },
      {
        "sha": "8561d84cae8eec4703835efccca13d555525cced",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -160,7 +160,7 @@ def test_persist_unbroadcast(self):\n         self.start_node(0)\n \n         # clear out mempool\n-        node0.generate(1)\n+        node0.generate(1, sync_fun=None)\n \n         # ensure node0 doesn't have any connections\n         # make a transaction that will remain in the unbroadcast set"
      },
      {
        "sha": "3241b87f582e6799aa0d6b0048ce127635004e3c",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -79,9 +79,8 @@ def run_test(self):\n         spend_3_1_id = self.nodes[0].sendrawtransaction(spend_3_1['hex'])\n         self.log.info(\"Generate a block\")\n         last_block = self.nodes[0].generate(1)\n-        # Sync blocks, so that peer 1 gets the block before timelock_tx\n+        # generate() implicitly syncs blocks, so that peer 1 gets the block before timelock_tx\n         # Otherwise, peer 1 would put the timelock_tx in m_recent_rejects\n-        self.sync_all()\n \n         self.log.info(\"The time-locked transaction can now be spent\")\n         timelock_tx_id = self.nodes[0].sendrawtransaction(timelock_tx)"
      },
      {
        "sha": "1e665c8bfd6e3b75dde0e9a08d9ccb1c7cf35839",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -111,7 +111,8 @@ def test_txn_removal(self):\n         # a block\n         removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)\n         with node.assert_debug_log([removal_reason]):\n-            node.generate(1)\n+            node.generate(1, sync_fun=None)\n+\n \n if __name__ == \"__main__\":\n     MempoolUnbroadcastTest().main()"
      },
      {
        "sha": "c5dddfa16b025f46d4c7aaeca259b70af1c563ba",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -58,7 +58,7 @@ def mine_chain(self):\n         self.log.info('Create some old blocks')\n         for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n             self.nodes[0].setmocktime(t)\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generate(1, sync_fun=None)\n         mining_info = self.nodes[0].getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['currentblocktx'], 0)"
      },
      {
        "sha": "26c9819e7c06f1c2cc722fb5bc871ba77a1ad3e0",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -105,7 +105,7 @@ def run_test(self):\n         # the other high fee transactions. Keep mining until our mempool has\n         # decreased by all the high fee size that we calculated above.\n         while (self.nodes[0].getmempoolinfo()['bytes'] > sizes[0] + sizes[1]):\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generate(1, sync_fun=None)\n \n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been."
      },
      {
        "sha": "c645794b2bc24b45c70a34148e7d1413b96d05e1",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -62,11 +62,11 @@ def run_test(self):\n         # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        stale_block_hash = self.nodes[0].generate(1)[0]\n+        stale_block_hash = self.nodes[0].generate(1, sync_fun=None)[0]\n         self.nodes[0].syncwithvalidationinterfacequeue()\n         assert_equal(self.nodes[0].getblockcount(), 1000)\n \n-        self.nodes[1].generate(1001)\n+        self.nodes[1].generate(1001, sync_fun=None)\n         assert_equal(self.nodes[1].getblockcount(), 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly."
      },
      {
        "sha": "e4686da285d209123fe76b37d7c05123e72b3fa7",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -59,7 +59,7 @@ def run_test(self):\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         self.connect_nodes(0, 1)\n-        blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n+        blocks = self.nodes[1].generate(292, sync_fun=None)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n@@ -101,7 +101,7 @@ def run_test(self):\n         self.disconnect_all()\n \n         # mine 10 blocks on node 0 (pruned node)\n-        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(10, sync_fun=None)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n         self.connect_nodes(0, 1)"
      },
      {
        "sha": "165a864f8f261e3d2977c5d08ca8e27af5d02b41",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -77,7 +77,7 @@ def run_test(self):\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         # 1. Have nodes mine a block (leave IBD)\n-        [n.generatetoaddress(1, n.get_deterministic_priv_key().address) for n in self.nodes]\n+        [n.generate(1, sync_fun=None) for n in self.nodes]\n         tips = [int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes]\n \n         # 2. Send one block that builds on each tip."
      },
      {
        "sha": "b6fa76f57f9a42fe5af65c19c9776439aa64e8b3",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -342,7 +342,7 @@ def _test_stopatheight(self):\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n-            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=None)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')"
      },
      {
        "sha": "7ef0cb6065b5e37ad4fb1e73918bc848059d38da",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -21,8 +21,8 @@ def run_test(self):\n         # Create two chains by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        self.nodes[0].generate(3)\n-        self.nodes[1].generate(4)\n+        self.nodes[0].generate(3, sync_fun=None)\n+        self.nodes[1].generate(4, sync_fun=None)\n \n         assert_equal(self.nodes[0].getblockcount(), 3)\n         chain0_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]"
      },
      {
        "sha": "da13314b6ff0cfb6b7fe116a90804415c0f20940",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -26,10 +26,8 @@ def run_test(self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network()\n-        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n-        self.nodes[2].generatetoaddress(20, self.nodes[2].get_deterministic_priv_key().address)\n-        self.sync_all(self.nodes[:2])\n-        self.sync_all(self.nodes[2:])\n+        self.nodes[0].generate(10, sync_fun=lambda: self.sync_all(self.nodes[:2]))\n+        self.nodes[2].generate(20, sync_fun=lambda: self.sync_all(self.nodes[2:]))\n \n         tips = self.nodes[1].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "a229a670fecece94376476c1bbc64aab7ecc9f8a",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -22,12 +22,12 @@ def setup_network(self):\n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n-        self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(4, sync_fun=None)\n         assert_equal(self.nodes[0].getblockcount(), 4)\n         besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n-        self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n+        self.nodes[1].generate(6, sync_fun=None)\n         assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n@@ -53,14 +53,14 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n-        self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n+        self.nodes[2].generate(1, sync_fun=None)\n         self.log.info(\"Verify all nodes are at the right height\")\n         self.wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n         self.wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n         self.wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n \n         self.log.info(\"Verify that we reconsider all ancestors as well\")\n-        blocks = self.nodes[1].generatetodescriptor(10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR)\n+        blocks = self.nodes[1].generatetodescriptor(10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, sync_fun=None)\n         assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n         # Invalidate the two blocks at the tip\n         self.nodes[1].invalidateblock(blocks[-1])\n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n \n         self.log.info(\"Verify that we reconsider all descendants\")\n-        blocks = self.nodes[1].generatetodescriptor(10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR)\n+        blocks = self.nodes[1].generatetodescriptor(10, ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, sync_fun=None)\n         assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n         # Invalidate the two blocks at the tip\n         self.nodes[1].invalidateblock(blocks[-2])"
      },
      {
        "sha": "e8684e7ff1a6d99526d7e923730b9594937165c9",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -43,18 +43,18 @@ def setup_network(self):\n     def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")\n         gen_address = lambda i: self.nodes[i].get_deterministic_priv_key().address  # A non-wallet address to mine to\n-        self.nodes[0].generatetoaddress(1, gen_address(0))\n+        self.nodes[0].generatetoaddress(1, gen_address(0), sync_fun=None)\n         assert_equal(self.nodes[0].getblockcount(), 1)\n-        hashZ = self.nodes[1].generatetoaddress(2, gen_address(1))[-1]\n+        hashZ = self.nodes[1].generatetoaddress(2, gen_address(1), sync_fun=None)[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n-        hashC = self.nodes[0].generatetoaddress(3, gen_address(0))[-1]\n+        hashC = self.nodes[0].generatetoaddress(3, gen_address(0), sync_fun=None)[-1]\n         assert_equal(self.nodes[0].getblockcount(), 5)\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n-        hashG = self.nodes[1].generatetoaddress(3, gen_address(1))[-1]\n+        hashG = self.nodes[1].generatetoaddress(3, gen_address(1), sync_fun=None)[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n         assert hashC != hashG\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n@@ -83,7 +83,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n-        self.nodes[0].generatetoaddress(1, gen_address(0))\n+        self.nodes[0].generatetoaddress(1, gen_address(0), sync_fun=None)\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         self.sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n@@ -92,7 +92,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         self.log.info(\"Mine competing blocks I-J-K-L on Node 2\")\n-        self.nodes[2].generatetoaddress(4, gen_address(2))\n+        self.nodes[2].generatetoaddress(4, gen_address(2), sync_fun=None)\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")"
      },
      {
        "sha": "3ed68779e8fc64dd16643d03e6a25fdaf2f001a7",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -43,7 +43,6 @@ def run_test(self):\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n-        self.sync_all()\n \n         txlist = []\n         blocktxn = self.nodes[0].getblock(blockhash, True)[\"tx\"]"
      },
      {
        "sha": "649fa1ab5e3e41784be028c4f040628e45aaefbd",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -407,7 +407,7 @@ def setup_nodes(self):\n             # To ensure that all nodes are out of IBD, the most recent block\n             # must have a timestamp not too old (see IsInitialBlockDownload()).\n             self.log.debug('Generate a block with current time')\n-            block_hash = self.nodes[0].generate(1)[0]\n+            block_hash = self.nodes[0].generate(1, sync_fun=None)[0]\n             block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n             for n in self.nodes:\n                 n.submitblock(block)"
      },
      {
        "sha": "bb4295c4d41a56b1f5e4189b7d5fe81a901f01b8",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -300,9 +300,27 @@ def wait_for_cookie_credentials(self):\n             time.sleep(1.0 / poll_per_s)\n         self._raise_assertion_error(\"Unable to retrieve cookie credentials after {}s\".format(self.rpc_timeout))\n \n-    def generate(self, nblocks, maxtries=1000000):\n+    def generateblock(self, *args, sync_fun=True, **kwargs):\n+        ret = self._rpc_dispatch('generateblock')(*args, **kwargs)\n+        if sync_fun:\n+            self.default_sync_fun() if sync_fun == True else sync_fun()\n+        return ret\n+\n+    def generatetodescriptor(self, *args, sync_fun=True, **kwargs):\n+        ret = self._rpc_dispatch('generatetodescriptor')(*args, **kwargs)\n+        if sync_fun:\n+            self.default_sync_fun() if sync_fun == True else sync_fun()\n+        return ret\n+\n+    def generatetoaddress(self, *args, sync_fun=True, **kwargs):\n+        ret = self._rpc_dispatch('generatetoaddress')(*args, **kwargs)\n+        if sync_fun:\n+            self.default_sync_fun() if sync_fun == True else sync_fun()\n+        return ret\n+\n+    def generate(self, nblocks, **kwargs):\n         self.log.debug(\"TestNode.generate() dispatches `generate` call to `generatetoaddress`\")\n-        return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries)\n+        return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, **kwargs)\n \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:"
      },
      {
        "sha": "4d7dbb335f885267b18d070ae3789f2f229e2ea9",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -449,10 +449,10 @@ def find_output(node, txid, amount, *, blockhash=None):\n \n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n-def create_confirmed_utxos(fee, node, count):\n+def create_confirmed_utxos(fee, node, count, **kwargs):\n     to_generate = int(0.5 * count) + 101\n     while to_generate > 0:\n-        node.generate(min(25, to_generate))\n+        node.generate(min(25, to_generate), **kwargs)\n         to_generate -= 25\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n@@ -473,7 +473,7 @@ def create_confirmed_utxos(fee, node, count):\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n-        node.generate(1)\n+        node.generate(1, **kwargs)\n \n     utxos = node.listunspent()\n     assert len(utxos) >= count"
      },
      {
        "sha": "98caf35788095d3e08cfcb57a714c236525c7f3e",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -103,9 +103,9 @@ def sign_tx(self, tx, fixed_length=True):\n                 break\n         tx.vin[0].scriptSig = CScript([der_sig + bytes(bytearray([SIGHASH_ALL]))])\n \n-    def generate(self, num_blocks):\n+    def generate(self, num_blocks, **kwargs):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n-        blocks = self._test_node.generatetodescriptor(num_blocks, f'raw({self._scriptPubKey.hex()})')\n+        blocks = self._test_node.generatetodescriptor(num_blocks, f'raw({self._scriptPubKey.hex()})', **kwargs)\n         for b in blocks:\n             cb_tx = self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0]\n             self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})"
      },
      {
        "sha": "c38a69628eae1b71bea4f3729c34bf195365380e",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -158,7 +158,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n \n         self.connect_nodes(0, 1)\n         self.sync_blocks()"
      },
      {
        "sha": "2e64ffa6ca2e8f7802aebb64eafbf0051f60a716",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -265,7 +265,7 @@ def test_balances(*, fee_node_1=0):\n         self.nodes[0].invalidateblock(block_reorg)\n         self.nodes[1].invalidateblock(block_reorg)\n         assert_equal(self.nodes[0].getbalance(minconf=0), 0)  # wallet txs not in the mempool are untrusted\n-        self.nodes[0].generatetoaddress(1, ADDRESS_WATCHONLY)\n+        self.nodes[0].generatetoaddress(1, ADDRESS_WATCHONLY, sync_fun=None)\n         assert_equal(self.nodes[0].getbalance(minconf=0), 0)  # wallet txs not in the mempool are untrusted\n \n         # Now confirm tx_orig"
      },
      {
        "sha": "8a18ca4b4fd7f4c3d67741713117bcb3aa8c7d17",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 22,
        "deletions": 40,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -59,15 +59,14 @@ def run_test(self):\n \n         self.log.info(\"Mining blocks...\")\n \n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n \n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n         self.sync_all(self.nodes[0:3])\n-        self.nodes[1].generate(COINBASE_MATURITY + 1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[1].generate(COINBASE_MATURITY + 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -115,8 +114,7 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 0)\n \n         # Have node0 mine a block, thus it will collect its own fee.\n-        self.nodes[0].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[0].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -159,8 +157,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listlockunspent()), 0)\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n-        self.nodes[1].generate(COINBASE_MATURITY)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[1].generate(COINBASE_MATURITY, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -188,8 +185,7 @@ def run_test(self):\n         self.nodes[1].sendrawtransaction(hexstring=txns_to_send[1][\"hex\"], maxfeerate=0)\n \n         # Have node1 mine a block to confirm transactions:\n-        self.nodes[1].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[1].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -203,15 +199,13 @@ def run_test(self):\n         fee_per_byte = Decimal('0.001') / 1000\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[2].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[2].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n@@ -220,16 +214,14 @@ def run_test(self):\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [])\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[2].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [address])\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[2].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n@@ -241,8 +233,7 @@ def run_test(self):\n \n         # Test passing fee_rate as a string\n         txid = self.nodes[2].sendmany(amounts={address: 10}, fee_rate=str(fee_rate_sat_vb))\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[2].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         balance = self.nodes[2].getbalance()\n         node_2_bal = self.check_fee_amount(balance, node_2_bal - Decimal('10'), explicit_fee_rate_btc_kvb, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(balance, node_2_bal)\n@@ -252,8 +243,7 @@ def run_test(self):\n         # Test passing fee_rate as an integer\n         amount = Decimal(\"0.0001\")\n         txid = self.nodes[2].sendmany(amounts={address: amount}, fee_rate=fee_rate_sat_vb)\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[2].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         balance = self.nodes[2].getbalance()\n         node_2_bal = self.check_fee_amount(balance, node_2_bal - amount, explicit_fee_rate_btc_kvb, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(balance, node_2_bal)\n@@ -337,14 +327,12 @@ def run_test(self):\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         tx_obj_not_broadcast = self.nodes[0].gettransaction(txid_not_broadcast)\n-        self.nodes[1].generate(1)  # mine a block, tx should not be in there\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[1].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))  # mine a block, tx should not be in there\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)  # should not be changed because tx was not broadcasted\n \n         # now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(tx_obj_not_broadcast['hex'])\n-        self.nodes[1].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+        self.nodes[1].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         node_2_bal += 2\n         tx_obj_not_broadcast = self.nodes[0].gettransaction(txid_not_broadcast)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -362,8 +350,7 @@ def run_test(self):\n         self.connect_nodes(0, 2)\n         self.sync_blocks(self.nodes[0:3])\n \n-        self.nodes[0].generate(1)\n-        self.sync_blocks(self.nodes[0:3])\n+        self.nodes[0].generate(1, sync_fun=lambda: self.sync_blocks(self.nodes[0:3]))\n         node_2_bal += 2\n \n         # tx should be added to balance because after restarting the nodes tx should be broadcast\n@@ -427,8 +414,7 @@ def run_test(self):\n             # 1. Send some coins to generate new UTXO\n             address_to_import = self.nodes[2].getnewaddress()\n             txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n+            self.nodes[0].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n \n             self.log.info(\"Test sendtoaddress with fee_rate param (explicit fee rate in sat/vB)\")\n             prebalance = self.nodes[2].getbalance()\n@@ -440,8 +426,7 @@ def run_test(self):\n             # Test passing fee_rate as an integer\n             txid = self.nodes[2].sendtoaddress(address=address, amount=amount, fee_rate=fee_rate_sat_vb)\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n+            self.nodes[0].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n             postbalance = self.nodes[2].getbalance()\n             fee = prebalance - postbalance - Decimal(amount)\n             assert_fee_amount(fee, tx_size, Decimal(fee_rate_btc_kvb))\n@@ -453,8 +438,7 @@ def run_test(self):\n             # Test passing fee_rate as a string\n             txid = self.nodes[2].sendtoaddress(address=address, amount=amount, fee_rate=str(fee_rate_sat_vb))\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n+            self.nodes[0].generate(1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n             postbalance = self.nodes[2].getbalance()\n             fee = prebalance - postbalance - amount\n             assert_fee_amount(fee, tx_size, Decimal(fee_rate_btc_kvb))\n@@ -515,17 +499,15 @@ def run_test(self):\n \n         # Mine a block from node0 to an address from node1\n         coinbase_addr = self.nodes[1].getnewaddress()\n-        block_hash = self.nodes[0].generatetoaddress(1, coinbase_addr)[0]\n+        block_hash = self.nodes[0].generatetoaddress(1, coinbase_addr, sync_fun=lambda: self.sync_all(self.nodes[0:3]))[0]\n         coinbase_txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        self.sync_all(self.nodes[0:3])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(coinbase_txid)\n \n         # check if wallet or blockchain maintenance changes the balance\n         self.sync_all(self.nodes[0:3])\n-        blocks = self.nodes[0].generate(2)\n-        self.sync_all(self.nodes[0:3])\n+        blocks = self.nodes[0].generate(2, sync_fun=lambda: self.sync_all(self.nodes[0:3]))\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n@@ -572,13 +554,13 @@ def run_test(self):\n         # Get all non-zero utxos together\n         chain_addrs = [self.nodes[0].getnewaddress(), self.nodes[0].getnewaddress()]\n         singletxid = self.nodes[0].sendtoaddress(chain_addrs[0], self.nodes[0].getbalance(), \"\", \"\", True)\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\": singletxid, \"vout\": 0}], {chain_addrs[0]: node0_balance / 2 - Decimal('0.01'), chain_addrs[1]: node0_balance / 2 - Decimal('0.01')})\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(hexstring=signedtx[\"hex\"], maxfeerate=0)\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n \n         # Make a long chain of unconfirmed payments without hitting mempool limit\n         # Each tx we make leaves only one output of change on a chain 1 longer\n@@ -629,7 +611,7 @@ def run_test(self):\n         assert not address_info[\"ischange\"]\n \n         # Test getaddressinfo 'ischange' field on change address.\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n         destination = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(destination, 0.123)\n         tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])"
      },
      {
        "sha": "54ae4a7aeb6589e63e5725be0a15cab1a1f83daf",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -519,7 +519,7 @@ def test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address):\n     assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == rbfid], [])\n \n     # check that the main output from the rbf tx is spendable after confirmed\n-    rbf_node.generate(1)\n+    rbf_node.generate(1, sync_fun=None)\n     assert_equal(\n         sum(1 for t in rbf_node.listunspent(minconf=0, include_unsafe=False)\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)"
      },
      {
        "sha": "7e8762e183b23b43e78e185ce00adec792392d12",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -178,10 +178,9 @@ def run_test(self):\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = get_rand_amount()\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n-            self.nodes[0].generate(1)  # Generate one block for each send\n+            self.nodes[0].generate(1)  # Generate and sync one block for each send\n             variant.confirmation_height = self.nodes[0].getblockcount()\n             variant.timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n-        self.sync_all() # Conclude sync before calling setmocktime to avoid timeouts\n \n         # Generate a block further in the future (past the rescan window).\n         assert_equal(self.nodes[0].getrawmempool(), [])"
      },
      {
        "sha": "2d46445f838ef86e906ee85a93ed142b5b3f09f1",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -62,8 +62,8 @@ def test_importmulti(self, req, success, error_code=None, error_message=None, wa\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n-        self.nodes[0].generate(1)\n-        self.nodes[1].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n+        self.nodes[1].generate(1, sync_fun=None)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()  # Sync the timestamp to the wallet, so that importmulti works\n \n@@ -256,9 +256,9 @@ def run_test(self):\n \n         # P2SH address\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(COINBASE_MATURITY)\n+        self.nodes[1].generate(COINBASE_MATURITY, sync_fun=None)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n \n@@ -277,9 +277,9 @@ def run_test(self):\n \n         # P2SH + Redeem script\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(COINBASE_MATURITY)\n+        self.nodes[1].generate(COINBASE_MATURITY, sync_fun=None)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n \n@@ -298,9 +298,9 @@ def run_test(self):\n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(COINBASE_MATURITY)\n+        self.nodes[1].generate(COINBASE_MATURITY, sync_fun=None)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n \n@@ -324,9 +324,9 @@ def run_test(self):\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(COINBASE_MATURITY)\n+        self.nodes[1].generate(COINBASE_MATURITY, sync_fun=None)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         self.nodes[1].syncwithvalidationinterfacequeue()\n "
      },
      {
        "sha": "1a2c55f4cb7cff403a1824c259455766e1b006b0",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -46,7 +46,6 @@ def test_no_blockhash(self):\n         txid = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         blockhash, = self.nodes[2].generate(1)\n         blockheight = self.nodes[2].getblockheader(blockhash)['height']\n-        self.sync_all()\n \n         txs = self.nodes[0].listtransactions()\n         assert_array_result(txs, {\"txid\": txid}, {\n@@ -88,7 +87,6 @@ def test_targetconfirmations(self):\n         self.log.info(\"Test target_confirmations\")\n         blockhash, = self.nodes[2].generate(1)\n         blockheight = self.nodes[2].getblockheader(blockhash)['height']\n-        self.sync_all()\n \n         assert_equal(\n             self.nodes[0].getblockhash(0),\n@@ -136,14 +134,11 @@ def test_reorg(self):\n         senttx = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n \n         # generate on both sides\n-        nodes1_last_blockhash = self.nodes[1].generate(6)[-1]\n-        nodes2_first_blockhash = self.nodes[2].generate(7)[0]\n+        nodes1_last_blockhash = self.nodes[1].generate(6, sync_fun=lambda: self.sync_all(self.nodes[:2]))[-1]\n+        nodes2_first_blockhash = self.nodes[2].generate(7, sync_fun=lambda: self.sync_all(self.nodes[2:]))[0]\n         self.log.debug(\"nodes[1] last blockhash = {}\".format(nodes1_last_blockhash))\n         self.log.debug(\"nodes[2] first blockhash = {}\".format(nodes2_first_blockhash))\n \n-        self.sync_all(self.nodes[:2])\n-        self.sync_all(self.nodes[2:])\n-\n         self.join_network()\n \n         # listsinceblock(nodes1_last_blockhash) should now include tx as seen from nodes[0]\n@@ -225,8 +220,8 @@ def test_double_spend(self):\n                 self.nodes[2].createrawtransaction(utxo_dicts, recipient_dict2))['hex'])\n \n         # generate on both sides\n-        lastblockhash = self.nodes[1].generate(3)[2]\n-        self.nodes[2].generate(4)\n+        lastblockhash = self.nodes[1].generate(3, sync_fun=None)[2]\n+        self.nodes[2].generate(4, sync_fun=None)\n \n         self.join_network()\n \n@@ -297,16 +292,16 @@ def test_double_send(self):\n         txid1 = self.nodes[1].sendrawtransaction(signedtx)\n \n         # generate bb1-bb2 on right side\n-        self.nodes[2].generate(2)\n+        self.nodes[2].generate(2, sync_fun=None)\n \n         # send from nodes[2]; this will end up in bb3\n         txid2 = self.nodes[2].sendrawtransaction(signedtx)\n \n         assert_equal(txid1, txid2)\n \n         # generate on both sides\n-        lastblockhash = self.nodes[1].generate(3)[2]\n-        self.nodes[2].generate(2)\n+        lastblockhash = self.nodes[1].generate(3, sync_fun=None)[2]\n+        self.nodes[2].generate(2, sync_fun=None)\n \n         self.join_network()\n "
      },
      {
        "sha": "6b9ada24bb50e16061ed9998f187ef52e8fdffe1",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -38,7 +38,6 @@ def run_test(self):\n         self.log.info(\"Test confirmations change after mining a block\")\n         blockhash = self.nodes[0].generate(1)[0]\n         blockheight = self.nodes[0].getblockheader(blockhash)['height']\n-        self.sync_all()\n         assert_array_result(self.nodes[0].listtransactions(),\n                             {\"txid\": txid},\n                             {\"category\": \"send\", \"amount\": Decimal(\"-0.1\"), \"confirmations\": 1, \"blockhash\": blockhash, \"blockheight\": blockheight})"
      },
      {
        "sha": "182dbc09f2c9a33d3dc689a2b4dac3120d46da16",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -185,7 +185,7 @@ def wallet_file(name):\n         self.nodes[0].createwallet(\"w5\")\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n-        node.generatetoaddress(nblocks=1, address=w5.getnewaddress())\n+        node.generatetoaddress(nblocks=1, address=w5.getnewaddress(), sync_fun=None)\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n         os.rename(wallet_dir2, wallet_dir())\n@@ -217,7 +217,7 @@ def wallet_file(name):\n         wallet_bad = wallet(\"bad\")\n \n         # check wallet names and balances\n-        node.generatetoaddress(nblocks=1, address=wallets[0].getnewaddress())\n+        node.generatetoaddress(nblocks=1, address=wallets[0].getnewaddress(), sync_fun=None)\n         for wallet_name, wallet in zip(wallet_names, wallets):\n             info = wallet.getwalletinfo()\n             assert_equal(info['immature_balance'], 50 if wallet is wallets[0] else 0)\n@@ -230,7 +230,7 @@ def wallet_file(name):\n         assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n         w1, w2, w3, w4, *_ = wallets\n-        node.generatetoaddress(nblocks=COINBASE_MATURITY + 1, address=w1.getnewaddress())\n+        node.generatetoaddress(nblocks=COINBASE_MATURITY + 1, address=w1.getnewaddress(), sync_fun=None)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)\n         assert_equal(w3.getbalance(), 0)\n@@ -239,7 +239,7 @@ def wallet_file(name):\n         w1.sendtoaddress(w2.getnewaddress(), 1)\n         w1.sendtoaddress(w3.getnewaddress(), 2)\n         w1.sendtoaddress(w4.getnewaddress(), 3)\n-        node.generatetoaddress(nblocks=1, address=w1.getnewaddress())\n+        node.generatetoaddress(nblocks=1, address=w1.getnewaddress(), sync_fun=None)\n         assert_equal(w2.getbalance(), 1)\n         assert_equal(w3.getbalance(), 2)\n         assert_equal(w4.getbalance(), 3)"
      },
      {
        "sha": "639b3ed54b4cef94da89d1b6e6aefe7714963e9a",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         # Send a tx to be unconfirmed later\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         tx = self.nodes[0].gettransaction(txid)\n-        self.nodes[0].generate(4)\n+        self.nodes[0].generate(4, sync_fun=None)\n         tx_before_reorg = self.nodes[0].gettransaction(txid)\n         assert_equal(tx_before_reorg[\"confirmations\"], 4)\n \n@@ -62,9 +62,9 @@ def run_test(self):\n         conflicting = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs_2))\n \n         conflicted_txid = self.nodes[0].sendrawtransaction(conflicted[\"hex\"])\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, sync_fun=None)\n         conflicting_txid = self.nodes[2].sendrawtransaction(conflicting[\"hex\"])\n-        self.nodes[2].generate(9)\n+        self.nodes[2].generate(9, sync_fun=None)\n \n         # Reconnect node0 and node2 and check that conflicted_txid is effectively conflicted\n         self.connect_nodes(0, 2)\n@@ -78,11 +78,11 @@ def run_test(self):\n         self.restart_node(0)\n \n         # The block chain re-orgs and the tx is included in a different block\n-        self.nodes[1].generate(9)\n+        self.nodes[1].generate(9, sync_fun=None)\n         self.nodes[1].sendrawtransaction(tx[\"hex\"])\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n         self.nodes[1].sendrawtransaction(conflicted[\"hex\"])\n-        self.nodes[1].generate(1)\n+        self.nodes[1].generate(1, sync_fun=None)\n \n         # Node0 wallet file is loaded on longest sync'ed node1\n         self.stop_node(1)"
      },
      {
        "sha": "329e98420c7c8628653b1106c7c7d517275b7cb2",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -444,7 +444,6 @@ def run_test(self):\n         res = self.nodes[0].sendrawtransaction(hex)\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 1)\n-        self.sync_all()\n \n         self.log.info(\"Lock unspents...\")\n         utxo1 = w0.listunspent()[0]"
      },
      {
        "sha": "23bc7c901b4b6a00266aa7ab8ac0a4986dd0c46c",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -272,11 +272,11 @@ def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, key\n             boring_balance = int(self.boring.getbalance() * 100000000)\n             to_amnt = random.randrange(1000000, boring_balance)\n             self.boring.sendtoaddress(address=addr_g, amount=Decimal(to_amnt) / 100000000, subtractfeefromamount=True)\n-            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress(), sync_fun=None)\n             test_balance = int(self.rpc_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n             res = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=Decimal(ret_amnt) / 100000000, subtractfeefromamount=True)\n-            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress(), sync_fun=None)\n             assert(self.rpc_online.gettransaction(res)[\"confirmations\"] > 0)\n \n     def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change):\n@@ -303,15 +303,15 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n             boring_balance = int(self.boring.getbalance() * 100000000)\n             to_amnt = random.randrange(1000000, boring_balance)\n             self.boring.sendtoaddress(address=addr_g, amount=Decimal(to_amnt) / 100000000, subtractfeefromamount=True)\n-            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress(), sync_fun=None)\n             test_balance = int(self.psbt_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n             psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): Decimal(ret_amnt) / 100000000}], None, {\"subtractFeeFromOutputs\":[0]})['psbt']\n             res = self.psbt_offline.walletprocesspsbt(psbt)\n             assert(res['complete'])\n             rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n             txid = self.nodes[0].sendrawtransaction(rawtx)\n-            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress(), sync_fun=None)\n             assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n \n     def do_test(self, comment, pattern, privmap, treefn, nkeys):\n@@ -343,7 +343,7 @@ def run_test(self):\n \n         self.log.info(\"Mining blocks...\")\n         gen_addr = self.boring.getnewaddress()\n-        self.nodes[0].generatetoaddress(101, gen_addr)\n+        self.nodes[0].generatetoaddress(101, gen_addr, sync_fun=None)\n \n         self.do_test(\n             \"tr(XPRV)\",\n@@ -412,15 +412,15 @@ def run_test(self):\n         self.log.info(\"Sending everything back...\")\n \n         txid = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=self.rpc_online.getbalance(), subtractfeefromamount=True)\n-        self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+        self.nodes[0].generatetoaddress(1, self.boring.getnewaddress(), sync_fun=None)\n         assert(self.rpc_online.gettransaction(txid)[\"confirmations\"] > 0)\n \n         psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): self.psbt_online.getbalance()}], None, {\"subtractFeeFromOutputs\": [0]})['psbt']\n         res = self.psbt_offline.walletprocesspsbt(psbt)\n         assert(res['complete'])\n         rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n         txid = self.nodes[0].sendrawtransaction(rawtx)\n-        self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+        self.nodes[0].generatetoaddress(1, self.boring.getnewaddress(), sync_fun=None)\n         assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "3e7d27d7cfe920534ac8896fb77559dadc43d0c1",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -84,8 +84,7 @@ def run_test(self):\n \n         # Have node0 mine a block, if requested:\n         if (self.options.mine_block):\n-            self.nodes[0].generate(1)\n-            self.sync_blocks(self.nodes[0:2])\n+            self.nodes[0].generate(1, sync_fun=lambda: self.sync_blocks(self.nodes[0:2]))\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n@@ -114,7 +113,7 @@ def run_test(self):\n             return\n \n         # ... mine a block...\n-        self.nodes[2].generate(1)\n+        self.nodes[2].generate(1, sync_fun=None)\n \n         # Reconnect the split network, and sync chain:\n         self.connect_nodes(1, 2)"
      },
      {
        "sha": "dd77cfdbbded62f1518a8ba41cbf28134cda9ea3",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -82,8 +82,7 @@ def run_test(self):\n \n         # Have node0 mine a block:\n         if (self.options.mine_block):\n-            self.nodes[0].generate(1)\n-            self.sync_blocks(self.nodes[0:2])\n+            self.nodes[0].generate(1, sync_fun=lambda: self.sync_blocks(self.nodes[0:2]))\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n@@ -111,7 +110,7 @@ def run_test(self):\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n         doublespend_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n-        self.nodes[2].generate(1)\n+        self.nodes[2].generate(1, sync_fun=None)\n \n         # Reconnect the split network, and sync chain:\n         self.connect_nodes(1, 2)"
      },
      {
        "sha": "ba9c549ddf6102537fd94d893b0d8996147982fa",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa93599e1ce467590b773f00e64897c67a3d271/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=faa93599e1ce467590b773f00e64897c67a3d271",
        "patch": "@@ -119,8 +119,7 @@ def test_upgradewallet_error(self, wallet, previous_version, requested_version,\n         assert_equal(wallet.getwalletinfo()[\"walletversion\"], previous_version)\n \n     def run_test(self):\n-        self.nodes[0].generatetoaddress(COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n-        self.dumb_sync_blocks()\n+        self.nodes[0].generatetoaddress(COINBASE_MATURITY + 1, self.nodes[0].getnewaddress(), sync_fun=lambda: self.dumb_sync_blocks())\n         # # Sanity check the test framework:\n         res = self.nodes[0].getblockchaininfo()\n         assert_equal(res['blocks'], COINBASE_MATURITY + 1)\n@@ -131,8 +130,7 @@ def run_test(self):\n         # Send coins to old wallets for later conversion checks.\n         v16_3_wallet  = v16_3_node.get_wallet_rpc('wallet.dat')\n         v16_3_address = v16_3_wallet.getnewaddress()\n-        node_master.generatetoaddress(COINBASE_MATURITY + 1, v16_3_address)\n-        self.dumb_sync_blocks()\n+        node_master.generatetoaddress(COINBASE_MATURITY + 1, v16_3_address, sync_fun=lambda: self.dumb_sync_blocks())\n         v16_3_balance = v16_3_wallet.getbalance()\n \n         self.log.info(\"Test upgradewallet RPC...\")"
      }
    ]
  },
  {
    "sha": "fa77478d56a59c08e8e22427ca4e59c49545c90c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc3NDc4ZDU2YTU5YzA4ZThlMjI0MjdjYTRlNTljNDk1NDVjOTBj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-10T16:42:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-28T16:00:02Z"
      },
      "message": "scripted-diff: Remove redundant sync_all\n\n-BEGIN VERIFY SCRIPT-\nperl -0777 -pi -e 's/(generate[^\\n]*\\)[^\\n]*)(\\n|\\s)+self.sync_.*\\(\\)\\n/\\1\\n/g' $(git grep -l generate ./test)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "4174f0c181863ebb3297cb86f72fdfef2d010eda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4174f0c181863ebb3297cb86f72fdfef2d010eda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa77478d56a59c08e8e22427ca4e59c49545c90c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiUcQwAuoij+H2LLSTend14U7ffIXgskoQaGCU0Te+tM/rCHXWRLzEjXeK/+Jt2\n3ouWwhbG1eB/vTcsr5GZBrHjygj4M2qmFe8pkvSCC5VtgQCjwh38U+kyMDC3E9Os\nvwBqt/DSKD4NMxKz/MDp3+/NUpxdM6aA0ibUhPUzWjlk4Z1IzUGXriaxLWzrsHTW\nPzHa4GA2OMrr2cEYKKgMYEwcNhDf9sFmU7yrHXv1FkCAMUUVPCmelWnr9l8q3W/4\nEKJFsEgXfgcHktBsexM5YDycGxpSD0EVZFfoA4acoaNdPMonnVhU7WmQ5ZG2dz7D\nvs+GSHN9ac0qsxVRYpUwhHe6FjzXOJMjIDPSEbHfnOUQvpCoKUiq8u2IiYJO50Vl\nyZAEPveeSefa439HetlwwercHJMt569q2M3YfV5FWis1gKma9yiT2VE2E2FQ8N8b\nG5JYzSVtAg2GaiBeDqu87TrcHRdt0Kf/Bh43yXQupQY+/TlngoXL61yS1/6x075C\nGUjkrvuR\n=IcMd\n-----END PGP SIGNATURE-----",
        "payload": "tree 4174f0c181863ebb3297cb86f72fdfef2d010eda\nparent faa93599e1ce467590b773f00e64897c67a3d271\nauthor MarcoFalke <falke.marco@gmail.com> 1605026523 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1627488002 +0200\n\nscripted-diff: Remove redundant sync_all\n\n-BEGIN VERIFY SCRIPT-\nperl -0777 -pi -e 's/(generate[^\\n]*\\)[^\\n]*)(\\n|\\s)+self.sync_.*\\(\\)\\n/\\1\\n/g' $(git grep -l generate ./test)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa77478d56a59c08e8e22427ca4e59c49545c90c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa77478d56a59c08e8e22427ca4e59c49545c90c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa77478d56a59c08e8e22427ca4e59c49545c90c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa93599e1ce467590b773f00e64897c67a3d271",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa93599e1ce467590b773f00e64897c67a3d271",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa93599e1ce467590b773f00e64897c67a3d271"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 0,
      "deletions": 141
    },
    "files": [
      {
        "sha": "39dafa861deaa3dfbbedecfeb1f4304cdf32ab39",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -66,8 +66,6 @@ def setup_nodes(self):\n     def run_test(self):\n         self.nodes[0].generatetoaddress(COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n \n-        self.sync_blocks()\n-\n         # Sanity check the test framework:\n         res = self.nodes[self.num_nodes - 1].getblockchaininfo()\n         assert_equal(res['blocks'], COINBASE_MATURITY + 1)\n@@ -93,15 +91,13 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(address, 10)\n         self.sync_mempools()\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         # Create a conflicting transaction using RBF\n         return_address = self.nodes[0].getnewaddress()\n         tx1_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx2_id = self.nodes[1].bumpfee(tx1_id)[\"txid\"]\n         # Confirm the transaction\n         self.sync_mempools()\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         # Create another conflicting transaction using RBF\n         tx3_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx4_id = self.nodes[1].bumpfee(tx3_id)[\"txid\"]"
      },
      {
        "sha": "54e776a38a02250583ea403d4ca351d90b55605d",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -26,9 +26,7 @@ def run_test(self):\n         assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n         self.nodes[0].generate(250)\n-        self.sync_all()\n         self.nodes[0].generate(250)\n-        self.sync_all()\n         self.sync_index(height=700)\n \n         self.log.info(\"prune some blocks\")"
      },
      {
        "sha": "10db53f43539c16bd8e22ee7217ec2df82bcdd7e",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -170,7 +170,6 @@ def _test_coin_stats_index(self):\n \n         # Include both txs in a block\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         for hash_option in index_hash_options:\n             # Check all amounts were registered correctly\n@@ -271,7 +270,6 @@ def _test_reorg_index(self):\n         # Add another block, so we don't depend on reconsiderblock remembering which\n         # blocks were touched by invalidateblock\n         index_node.generate(1)\n-        self.sync_all()\n \n         # Ensure that removing and re-adding blocks yields consistent results\n         block = index_node.getblockhash(99)"
      },
      {
        "sha": "60b55ed971ceb1c68e19a35fbd55b3f1a0da860f",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -111,7 +111,6 @@ def run_test(self):\n             self.log.info(\"test -walletnotify with conflicting transactions\")\n             self.nodes[0].rescanblockchain()\n             self.nodes[0].generatetoaddress(100, ADDRESS_BCRT1_UNSPENDABLE)\n-            self.sync_blocks()\n \n             # Generate transaction on node 0, sync mempools, and check for\n             # notification on node 1."
      },
      {
        "sha": "d264dbb553edae44d02972e030b9232d55a44ec7",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -158,15 +158,13 @@ def run_test(self):\n                     p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n \n         self.nodes[0].generate(1)  # block 163\n-        self.sync_blocks()\n \n         # Make sure all nodes recognize the transactions as theirs\n         assert_equal(self.nodes[0].getbalance(), balance_presetup - 60 * 50 + 20 * Decimal(\"49.999\") + 50)\n         assert_equal(self.nodes[1].getbalance(), 20 * Decimal(\"49.999\"))\n         assert_equal(self.nodes[2].getbalance(), 20 * Decimal(\"49.999\"))\n \n         self.nodes[0].generate(260)  # block 423\n-        self.sync_blocks()\n \n         self.log.info(\"Verify witness txs are skipped for mining before the fork\")\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][P2WPKH][0], True)  # block 424\n@@ -183,7 +181,6 @@ def run_test(self):\n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n         blockhash = self.nodes[2].generate(1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n-        self.sync_blocks()\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n         segwit_tx_list = self.nodes[2].getblock(blockhash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n@@ -594,7 +591,6 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         txid = self.nodes[0].sendrawtransaction(hexstring=signresults, maxfeerate=0)\n         txs_mined[txid] = self.nodes[0].generate(1)[0]\n-        self.sync_blocks()\n         watchcount = 0\n         spendcount = 0\n         for i in self.nodes[0].listunspent():\n@@ -644,7 +640,6 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         self.nodes[0].sendrawtransaction(hexstring=signresults, maxfeerate=0)\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "72af5116a0c3b928d69a6f4f9ac00d73c3fbf15e",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -83,9 +83,7 @@ def run_test(self):\n         not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n         self.nodes[1].generatetoaddress(100, not_related_address)\n-        self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n@@ -110,7 +108,6 @@ def run_test(self):\n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n         self.nodes[1].generatetoaddress(1, not_related_address)\n-        self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n@@ -185,7 +182,6 @@ def run_test(self):\n         assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n         assert_equal(len(json_obj['utxos']), 1)\n@@ -206,7 +202,6 @@ def run_test(self):\n         self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n \n         self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n-        self.sync_all()\n \n         self.log.info(\"Test the /block, /blockhashbyheight and /headers URIs\")\n         bb_hash = self.nodes[0].getbestblockhash()\n@@ -277,7 +272,6 @@ def run_test(self):\n \n         # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n-        self.sync_all()\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n@@ -305,7 +299,6 @@ def run_test(self):\n \n         # Now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n-        self.sync_all()\n \n         # Check if the 3 tx show up in the new block\n         json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))"
      },
      {
        "sha": "6a8c52fe1ba3612a59d9658a805b2c7eeebd7376",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -187,8 +187,6 @@ def test_basic(self):\n         self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n         genhashes = self.nodes[0].generatetoaddress(num_blocks, ADDRESS_BCRT1_UNSPENDABLE)\n \n-        self.sync_all()\n-\n         for x in range(num_blocks):\n             # Should receive the coinbase txid.\n             txid = hashtx.receive()\n@@ -350,7 +348,6 @@ def test_sequence(self):\n             # removed from the mempool by the block mining it.\n             mempool_size = len(self.nodes[0].getrawmempool())\n             c_block = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n-            self.sync_all()\n             # Make sure the number of mined transactions matches the number of txs out of mempool\n             mempool_size_delta = mempool_size - len(self.nodes[0].getrawmempool())\n             assert_equal(len(self.nodes[0].getblock(c_block)[\"tx\"])-1, mempool_size_delta)\n@@ -390,7 +387,6 @@ def test_sequence(self):\n             # Other things may happen but aren't wallet-deterministic so we don't test for them currently\n             self.nodes[0].reconsiderblock(best_hash)\n             self.nodes[1].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n-            self.sync_all()\n \n             self.log.info(\"Evict mempool transaction by block conflict\")\n             orig_txid = self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=1.0, replaceable=True)"
      },
      {
        "sha": "1ff23ff49c2d1ee8442133c15054ba959c326ae4",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -180,7 +180,6 @@ def run_test(self):\n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         # Prioritise a transaction that has been mined, then add it back to the\n         # mempool by using invalidateblock.\n@@ -272,7 +271,6 @@ def run_test(self):\n         # Test reorg handling\n         # First, the basics:\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         self.nodes[1].invalidateblock(self.nodes[0].getbestblockhash())\n         self.nodes[1].reconsiderblock(self.nodes[0].getbestblockhash())\n \n@@ -319,7 +317,6 @@ def run_test(self):\n \n         # Mine these in a block\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # Now generate tx8, with a big fee\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]"
      },
      {
        "sha": "d34faf15336d0569adf099fbe9ca80a7098b6c56",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -64,7 +64,6 @@ def run_test(self):\n \n         # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n         self.nodes[0].generate(COINBASE_MATURITY)\n-        self.sync_blocks()\n \n         self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])"
      },
      {
        "sha": "7f6f33dcdcfb328ed224cbb8ae6f5bfad7f830d3",
        "filename": "test/functional/p2p_compactblocks_hb.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_compactblocks_hb.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_compactblocks_hb.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks_hb.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -31,7 +31,6 @@ def relay_block_through(self, peer):\n         \"\"\"Relay a new block through peer peer, and return HB status between 1 and [2,3,4,5].\"\"\"\n         self.connect_nodes(peer, 0)\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         self.disconnect_nodes(peer, 0)\n         status_to = [self.peer_info(1, i)['bip152_hb_to'] for i in range(2, 6)]\n         status_from = [self.peer_info(i, 1)['bip152_hb_from'] for i in range(2, 6)]\n@@ -45,7 +44,6 @@ def run_test(self):\n         for i in range(1, 6):\n             self.connect_nodes(i, 0)\n         self.nodes[0].generate(2)\n-        self.sync_blocks()\n         for i in range(1, 6):\n             self.disconnect_nodes(i, 0)\n "
      },
      {
        "sha": "77e26f627073516ec2297814b4c226ca5d0a580b",
        "filename": "test/functional/p2p_ibd_txrelay.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_ibd_txrelay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_ibd_txrelay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_ibd_txrelay.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -30,7 +30,6 @@ def run_test(self):\n \n         # Come out of IBD by generating a block\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         self.log.info(\"Check that nodes reset minfilter after coming out of IBD\")\n         for node in self.nodes:"
      },
      {
        "sha": "6b924db0817b2bf3ce299292a00834e896c3823f",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -94,7 +94,6 @@ def run_test(self):\n \n     def check_tx_relay(self):\n         block_op_true = self.nodes[0].getblock(self.nodes[0].generatetoaddress(100, ADDRESS_BCRT1_P2WSH_OP_TRUE)[0])\n-        self.sync_all()\n \n         self.log.debug(\"Create a connection from a forcerelay peer that rebroadcasts raw txs\")\n         # A test framework p2p connection is needed to send the raw transaction directly. If a full node was used, it could only"
      },
      {
        "sha": "438fd67e5f62900795600d080d8df15a4443c6ce",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -594,7 +594,6 @@ def test_standardness_v0(self):\n         # Mine it on test_node to create the confirmed output.\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         # Now test standardness of v0 P2WSH outputs.\n         # Start by creating a transaction with two outputs.\n@@ -667,7 +666,6 @@ def test_standardness_v0(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n@@ -1365,7 +1363,6 @@ def test_segwit_versions(self):\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n         self.nodes[0].generate(1)  # Mine all the transactions\n-        self.sync_blocks()\n         assert len(self.nodes[0].getrawmempool()) == 0\n \n         # Finally, verify that version 0 -> version 2 transactions\n@@ -1436,7 +1433,6 @@ def test_premature_coinbase_witness_spend(self):\n \n         # Now test a premature spend.\n         self.nodes[0].generate(98)\n-        self.sync_blocks()\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n@@ -1750,7 +1746,6 @@ def test_non_standard_witness_blinding(self):\n         tx.rehash()\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         # We'll add an unnecessary witness to this transaction that would cause\n         # it to be non-standard, to test that violating policy with a witness\n@@ -1779,7 +1774,6 @@ def test_non_standard_witness_blinding(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         # Update our utxo list; we spent the first entry.\n         self.utxo.pop(0)\n@@ -1814,7 +1808,6 @@ def test_non_standard_witness(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         # Creating transactions for tests\n         p2wsh_txs = []"
      },
      {
        "sha": "2c226fee2cc5655df9f36623558324233b591ce3",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -47,7 +47,6 @@ def run_test(self):\n \n         self.log.info('Generating blocks ...')\n         node0.generate(149)\n-        self.sync_all()\n \n         self.moved = 0\n         for self.nkeys in [3, 5]:\n@@ -118,7 +117,6 @@ def check_addmultisigaddress_errors(self):\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         node0.generate(COINBASE_MATURITY)\n-        self.sync_all()\n \n         bal0 = node0.getbalance()\n         bal1 = node1.getbalance()"
      },
      {
        "sha": "b251f672e5e9ca871e1ce7e1bad6c266c1eb7a27",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -64,9 +64,7 @@ def run_test(self):\n         self.fee_tolerance = 2 * self.min_relay_tx_fee / 1000\n \n         self.nodes[2].generate(1)\n-        self.sync_all()\n         self.nodes[0].generate(121)\n-        self.sync_all()\n \n         self.test_change_position()\n         self.test_simple()\n@@ -126,7 +124,6 @@ def test_change_position(self):\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         wwatch.unloadwallet()\n \n@@ -500,7 +497,6 @@ def test_spend_2of2(self):\n         # Send 1.2 BTC to msig addr.\n         self.nodes[0].sendtoaddress(mSigObj, 1.2)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         oldBalance = self.nodes[1].getbalance()\n         inputs = []\n@@ -511,7 +507,6 @@ def test_spend_2of2(self):\n         final_psbt = w2.finalizepsbt(signed_psbt['psbt'])\n         self.nodes[2].sendrawtransaction(final_psbt['hex'])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n \n         # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n@@ -572,7 +567,6 @@ def test_locked_wallet(self):\n         signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all()\n \n         # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n@@ -584,12 +578,10 @@ def test_many_inputs_fee(self):\n         # Empty node1, send some small coins from node0 to node1.\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.nodes[1].generate(1)\n-        self.sync_all()\n \n         for _ in range(20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # Fund a tx with ~20 small inputs.\n         inputs = []\n@@ -612,12 +604,10 @@ def test_many_inputs_send(self):\n         # Again, empty node1, send some small coins from node0 to node1.\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.nodes[1].generate(1)\n-        self.sync_all()\n \n         for _ in range(20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # Fund a tx with ~20 small inputs.\n         oldBalance = self.nodes[0].getbalance()\n@@ -629,7 +619,6 @@ def test_many_inputs_send(self):\n         fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n     def test_op_return(self):\n@@ -707,7 +696,6 @@ def test_all_watched_funds(self):\n         assert signedtx[\"complete\"]\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         wwatch.unloadwallet()\n "
      },
      {
        "sha": "69db74f0fe1a9f0c23486421c82b9656ba3bd6c7",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -48,7 +48,6 @@ def generate_test_data(self, filename):\n         address = self.nodes[0].get_deterministic_priv_key().address\n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=False)"
      },
      {
        "sha": "b6b13f78aaa4f1e05e8ae9cd25d8ec931a2954af",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -82,7 +82,6 @@ def test_getpeerinfo(self):\n         # Create a few getpeerinfo last_block/last_transaction values.\n         self.wallet.send_self_transfer(from_node=self.nodes[0]) # Make a transaction so we can see it in the getpeerinfo results\n         self.nodes[1].generate(1)\n-        self.sync_all()\n         time_now = int(time.time())\n         peer_info = [x.getpeerinfo() for x in self.nodes]\n         # Verify last_block and last_transaction keys/values."
      },
      {
        "sha": "903c5bceaa3a820eb10d950533f973428dd8412f",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -149,7 +149,6 @@ def run_test(self):\n         signed_tx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])['hex']\n         txid = self.nodes[0].sendrawtransaction(signed_tx)\n         self.nodes[0].generate(6)\n-        self.sync_all()\n \n         # Find the output pos\n         p2sh_pos = -1\n@@ -308,7 +307,6 @@ def run_test(self):\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n         txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n         blockhash = self.nodes[0].generate(6)[0]\n-        self.sync_all()\n         vout1 = find_output(self.nodes[1], txid1, 13, blockhash=blockhash)\n         vout2 = find_output(self.nodes[2], txid2, 13, blockhash=blockhash)\n \n@@ -336,7 +334,6 @@ def run_test(self):\n         finalized = self.nodes[0].finalizepsbt(combined)['hex']\n         self.nodes[0].sendrawtransaction(finalized)\n         self.nodes[0].generate(6)\n-        self.sync_all()\n \n         # Test additional args in walletcreatepsbt\n         # Make sure both pre-included and funded inputs\n@@ -531,7 +528,6 @@ def test_psbt_input_keys(psbt_input, keys):\n         txid4 = self.nodes[0].sendtoaddress(addr4, 5)\n         vout4 = find_output(self.nodes[0], txid4, 5)\n         self.nodes[0].generate(6)\n-        self.sync_all()\n         psbt2 = self.nodes[1].createpsbt([{\"txid\":txid4, \"vout\":vout4}], {self.nodes[0].getnewaddress():Decimal('4.999')})\n         psbt2 = self.nodes[1].walletprocesspsbt(psbt2)['psbt']\n         psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n@@ -555,7 +551,6 @@ def test_psbt_input_keys(psbt_input, keys):\n         txid = self.nodes[0].sendtoaddress(addr, 7)\n         addrinfo = self.nodes[1].getaddressinfo(addr)\n         blockhash = self.nodes[0].generate(6)[0]\n-        self.sync_all()\n         vout = find_output(self.nodes[0], txid, 7, blockhash=blockhash)\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n         analyzed = self.nodes[0].analyzepsbt(psbt)"
      },
      {
        "sha": "bce5eec2cffe4881d52405fd213130f298abcd42",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -72,15 +72,12 @@ def setup_network(self):\n     def run_test(self):\n         self.log.info('prepare some coins for multiple *rawtransaction commands')\n         self.nodes[2].generate(1)\n-        self.sync_all()\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n         self.sync_all()\n         self.nodes[0].generate(5)\n-        self.sync_all()\n \n         self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n         block = self.nodes[0].getblock(self.nodes[0].getblockhash(0))\n@@ -225,7 +222,6 @@ def run_test(self):\n         # make a tx by sending then generate 2 blocks; block1 has the tx in it\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n         # We should be able to get the raw transaction by providing the correct block\n         gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n         assert_equal(gottx['txid'], tx)\n@@ -276,7 +272,6 @@ def run_test(self):\n             txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n             self.sync_all()\n             self.nodes[0].generate(1)\n-            self.sync_all()\n             assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n \n \n@@ -297,7 +292,6 @@ def run_test(self):\n             rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n             self.sync_all()\n             self.nodes[0].generate(1)\n-            self.sync_all()\n \n             #THIS IS AN INCOMPLETE FEATURE\n             #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n@@ -320,7 +314,6 @@ def run_test(self):\n             rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n             self.sync_all()\n             self.nodes[0].generate(1)\n-            self.sync_all()\n             assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n             # 2of2 test for combining transactions\n@@ -340,7 +333,6 @@ def run_test(self):\n             rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n             self.sync_all()\n             self.nodes[0].generate(1)\n-            self.sync_all()\n \n             assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n \n@@ -365,7 +357,6 @@ def run_test(self):\n             rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n             self.sync_all()\n             self.nodes[0].generate(1)\n-            self.sync_all()\n             assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n         # decoderawtransaction tests\n@@ -390,13 +381,11 @@ def run_test(self):\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 10)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         vout = find_vout_for_address(self.nodes[1], txid, addr)\n         rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n         rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n         txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # getrawtransaction tests\n         # 1. valid parameters - only supply txid\n@@ -517,7 +506,6 @@ def run_test(self):\n \n         self.log.info('sendrawtransaction/testmempoolaccept with tx that is already in the chain')\n         self.nodes[2].generate(1)\n-        self.sync_blocks()\n         for node in self.nodes:\n             testres = node.testmempoolaccept([rawTxSigned['hex']])[0]\n             assert_equal(testres['allowed'], False)"
      },
      {
        "sha": "b317431bbbd7616d6172ca5aa6e27c53f8d5867f",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -207,7 +207,6 @@ def witness_script_test(self):\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         # Get the UTXO info from scantxoutset\n         unspent_output = self.nodes[1].scantxoutset('start', [p2sh_p2wsh_address['descriptor']])['unspents'][0]\n         spk = script_to_p2sh_p2wsh_script(p2sh_p2wsh_address['redeemScript']).hex()"
      },
      {
        "sha": "7c6cf96adcfee91eaaaf2aadd7a7d0975e9db87d",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -31,7 +31,6 @@ def run_test(self):\n         # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n         miniwallet.generate(5)\n         self.nodes[0].generate(COINBASE_MATURITY)\n-        self.sync_all()\n \n         chain_height = self.nodes[1].getblockcount()\n         assert_equal(chain_height, 105)\n@@ -57,7 +56,6 @@ def run_test(self):\n         tx3 = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=txin_spent)\n         txid3 = tx3['txid']\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         txid_spent = txin_spent[\"txid\"]\n         txid_unspent = txid1  # Input was change from txid2, so txid1 should be unspent"
      },
      {
        "sha": "45082afe64344ffcc182a4139be8828a442d068d",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -30,7 +30,6 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         self.nodes[1].generate(COINBASE_MATURITY)\n-        self.sync_blocks()\n         balance = self.nodes[0].getbalance()\n         txA = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         txB = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))"
      },
      {
        "sha": "c200c0d6fe83e3e8843db699b1c5680724250e7c",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -222,7 +222,6 @@ def run_test(self):\n         # Mine 101 blocks on node5 to bring nodes out of IBD and make sure that\n         # no coinbases are maturing for the nodes-under-test during the test\n         self.nodes[5].generate(COINBASE_MATURITY + 1)\n-        self.sync_blocks()\n \n         uncompressed_1 = \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\"\n         uncompressed_2 = \"047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77\"\n@@ -307,7 +306,6 @@ def run_test(self):\n \n             # node5 collects fee and block subsidy to keep accounting simple\n             self.nodes[5].generate(1)\n-            self.sync_blocks()\n \n             # Verify that the receiving wallet contains a UTXO with the expected address, and expected descriptor\n             for n, to_node in enumerate(range(from_node, from_node + 4)):\n@@ -337,7 +335,6 @@ def run_test(self):\n         # Fund node 4:\n         self.nodes[5].sendtoaddress(self.nodes[4].getnewaddress(), Decimal(\"1\"))\n         self.nodes[5].generate(1)\n-        self.sync_blocks()\n         assert_equal(self.nodes[4].getbalance(), 1)\n \n         self.log.info(\"Nodes with addresstype=legacy never use a P2WPKH change output (unless changetype is set otherwise):\")"
      },
      {
        "sha": "66c1da86a9d13af63130be598f42feb4135298c2",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -80,7 +80,6 @@ def run_test(self):\n         self.test_immutable()\n \n         self.nodes[0].generate(110)\n-        self.sync_all()\n         self.test_change_remains_change(self.nodes[1])\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_sending_from_reused_address_without_avoid_reuse()\n@@ -175,7 +174,6 @@ def test_sending_from_reused_address_without_avoid_reuse(self):\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 10 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n@@ -186,7 +184,6 @@ def test_sending_from_reused_address_without_avoid_reuse(self):\n \n         self.nodes[1].sendtoaddress(retaddr, 5)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 5 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n@@ -195,7 +192,6 @@ def test_sending_from_reused_address_without_avoid_reuse(self):\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n         assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n@@ -229,7 +225,6 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 10 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n@@ -238,7 +233,6 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n \n         self.nodes[1].sendtoaddress(retaddr, 5)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # listunspent should show 1 single, unused 5 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n@@ -260,7 +254,6 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n \n             self.nodes[0].sendtoaddress(new_fundaddr, 10)\n             self.nodes[0].generate(1)\n-            self.sync_all()\n \n             # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n             assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n@@ -303,7 +296,6 @@ def test_getbalances_used(self):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # send transaction that should not use all the available outputs\n         # per the current coin selection algorithm\n@@ -335,7 +327,6 @@ def test_full_destination_group_is_preferred(self):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # Sending a transaction that is smaller than each one of the\n         # available outputs\n@@ -364,7 +355,6 @@ def test_all_destination_groups_are_used(self):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # Sending a transaction that needs to use the full groups\n         # of 100 inputs but also the incomplete group of 2 inputs."
      },
      {
        "sha": "1a2fe3b511550a90adf4ab23644a379857bf8491",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -89,7 +89,6 @@ def do_one_round(self):\n         # Must sync mempools before mining.\n         self.sync_mempools()\n         self.nodes[3].generate(1)\n-        self.sync_blocks()\n \n     # As above, this mirrors the original bash test.\n     def start_three(self, args=()):\n@@ -119,13 +118,9 @@ def init_three(self):\n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n         self.nodes[1].generate(1)\n-        self.sync_blocks()\n         self.nodes[2].generate(1)\n-        self.sync_blocks()\n         self.nodes[3].generate(COINBASE_MATURITY)\n-        self.sync_blocks()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -154,7 +149,6 @@ def run_test(self):\n \n         # Generate 101 more blocks, so any fees paid mature\n         self.nodes[3].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n \n         balance0 = self.nodes[0].getbalance()\n         balance1 = self.nodes[1].getbalance()"
      },
      {
        "sha": "1aae5a0b0ef008e76712d675689860e253251797",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -71,10 +71,8 @@ def run_test(self):\n \n         self.log.info(\"Mining blocks ...\")\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         self.nodes[1].generate(1)\n         self.nodes[1].generatetoaddress(COINBASE_MATURITY + 1, ADDRESS_WATCHONLY)\n-        self.sync_all()\n \n         if not self.options.descriptors:\n             # Tests legacy watchonly behavior which is not present (and does not need to be tested) in descriptor wallets\n@@ -197,7 +195,6 @@ def test_balances(*, fee_node_1=0):\n         test_balances(fee_node_1=Decimal('0.02'))\n \n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)\n-        self.sync_all()\n \n         # balances are correct after the transactions are confirmed\n         balance_node0 = Decimal('69.99')  # node 1's send plus change from node 0's send\n@@ -211,7 +208,6 @@ def test_balances(*, fee_node_1=0):\n         txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), Decimal('29.97'), [Decimal('0.01')])\n         self.nodes[1].sendrawtransaction(txs[0]['hex'])\n         self.nodes[1].generatetoaddress(2, ADDRESS_WATCHONLY)\n-        self.sync_all()\n \n         # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n         # TODO: fix getbalance tracking of coin spentness depth\n@@ -258,7 +254,6 @@ def test_balances(*, fee_node_1=0):\n \n         # Now confirm tx_replace\n         block_reorg = self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)[0]\n-        self.sync_all()\n         assert_equal(self.nodes[0].getbalance(minconf=0), total_amount)\n \n         self.log.info('Put txs back into mempool of node 1 (not node 0)')\n@@ -274,7 +269,6 @@ def test_balances(*, fee_node_1=0):\n         self.sync_blocks()\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)\n-        self.sync_all()\n         assert_equal(self.nodes[0].getbalance(minconf=0), total_amount + 1)  # The reorg recovered our fee of 1 coin\n \n "
      },
      {
        "sha": "3d94fea413a32aa27595ebf7338cade053606618",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -305,7 +305,6 @@ def run_test(self):\n \n         self.sync_all()\n         self.nodes[1].generate(1)  # mine a block\n-        self.sync_all()\n \n         unspent_txs = self.nodes[0].listunspent()  # zero value tx must be in listunspents output\n         found = False"
      },
      {
        "sha": "35a5f34fad78ef87f64ab3325eee1cd050185e7b",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -60,7 +60,6 @@ def skip_test_if_missing_module(self):\n     def clear_mempool(self):\n         # Clear mempool between subtests. The subtests may only depend on chainstate (utxos)\n         self.nodes[1].generate(1)\n-        self.sync_all()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n@@ -73,12 +72,10 @@ def run_test(self):\n         # fund rbf node with 10 coins of 0.001 btc (100,000 satoshis)\n         self.log.info(\"Mining blocks...\")\n         peer_node.generate(110)\n-        self.sync_all()\n         for _ in range(25):\n             peer_node.sendtoaddress(rbf_node_address, 0.001)\n         self.sync_all()\n         peer_node.generate(1)\n-        self.sync_all()\n         assert_equal(rbf_node.getbalance(), Decimal(\"0.025\"))\n \n         self.log.info(\"Running tests\")\n@@ -434,7 +431,6 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     funding_address2 = watcher.getnewaddress(address_type='bech32')\n     peer_node.sendmany(\"\", {funding_address1: 0.001, funding_address2: 0.001})\n     peer_node.generate(1)\n-    self.sync_all()\n \n     # Create single-input PSBT for transaction to be bumped\n     psbt = watcher.walletcreatefundedpsbt([], {dest_address: 0.0005}, 0, {\"fee_rate\": 1}, True)['psbt']"
      },
      {
        "sha": "01e023cef314dea1df35a81748bae0f95b34d958",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -46,7 +46,6 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr, 0.5) for addr in addrs]\n \n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # For each node, send 0.2 coins back to 0;\n         # - node[1] should pick one 0.5 UTXO and leave the rest\n@@ -114,7 +113,6 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped']):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n@@ -126,7 +124,6 @@ def run_test(self):\n         addr_aps2 = self.nodes[3].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped']):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n@@ -140,7 +137,6 @@ def run_test(self):\n         addr_aps3 = self.nodes[4].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped']):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n@@ -163,7 +159,6 @@ def run_test(self):\n             signed_tx = self.nodes[0].signrawtransactionwithwallet(funded_tx['hex'])\n             self.nodes[0].sendrawtransaction(signed_tx['hex'])\n             self.nodes[0].generate(1)\n-            self.sync_all()\n \n         # Check that we can create a transaction that only requires ~100 of our\n         # utxos, without pulling in all outputs and creating a transaction that"
      },
      {
        "sha": "ff77577644a29431bb12126b73bd762f0ca94fa9",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -229,7 +229,6 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(addr, 1)\n             origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n             self.nodes[0].generate(1)\n-            self.sync_blocks()\n             origin_rpc.gettransaction(txid)\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n             out_of_kp_txid = txid\n@@ -240,7 +239,6 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(last_addr, 1)\n             origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n             self.nodes[0].generate(1)\n-            self.sync_blocks()\n             origin_rpc.gettransaction(txid)\n             restore_rpc.gettransaction(txid)\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)"
      },
      {
        "sha": "3fa7293f2511f907c2c00b7bed4444b8782d6966",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -189,7 +189,6 @@ def run_test(self):\n             self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"] + TIMESTAMP_WINDOW + 1,\n         )\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # For each variation of wallet key import, invoke the import RPC and\n         # check the results from getbalance and listtransactions."
      },
      {
        "sha": "02652337151cc4e78de042d3e680d596b3c3c711",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -406,7 +406,6 @@ def run_test(self):\n                      ismine=True)\n         txid = w0.sendtoaddress(address, 49.99995540)\n         w0.generatetoaddress(6, w0.getnewaddress())\n-        self.sync_blocks()\n         tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n         signed_tx = wpriv.signrawtransactionwithwallet(tx)\n         w1.sendrawtransaction(signed_tx['hex'])\n@@ -452,12 +451,10 @@ def run_test(self):\n         assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 1000)\n         txid = w0.sendtoaddress(addr, 10)\n         self.nodes[0].generate(6)\n-        self.sync_all()\n         send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n         decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n         assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n         self.nodes[0].generate(6)\n-        self.sync_all()\n \n         self.nodes[1].createwallet(wallet_name=\"wmulti_pub\", disable_private_keys=True, blank=True, descriptors=True)\n         wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n@@ -495,7 +492,6 @@ def run_test(self):\n         vout2 = find_vout_for_address(self.nodes[0], txid2, addr2)\n \n         self.nodes[0].generate(6)\n-        self.sync_all()\n         assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n \n         # Make sure that descriptor wallets containing multiple xpubs in a single descriptor load correctly\n@@ -583,7 +579,6 @@ def run_test(self):\n         addr = wmulti_priv_big.getnewaddress()\n         w0.sendtoaddress(addr, 10)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         # It is standard and would relay.\n         txid = wmulti_priv_big.sendtoaddress(w0.getnewaddress(), 9.999)\n         decoded = wmulti_priv_big.decoderawtransaction(wmulti_priv_big.gettransaction(txid)['hex'])\n@@ -618,7 +613,6 @@ def run_test(self):\n         addr = multi_priv_big.getnewaddress(\"\", \"legacy\")\n         w0.sendtoaddress(addr, 10)\n         self.nodes[0].generate(6)\n-        self.sync_all()\n         # It is standard and would relay.\n         txid = multi_priv_big.sendtoaddress(w0.getnewaddress(), 10, \"\", \"\",\n                                             True)"
      },
      {
        "sha": "5ad3386f2c3f4c5af81b8cb4c8820913c764d828",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -27,8 +27,6 @@ def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n-        self.sync_all()\n-\n         # address\n         address1 = self.nodes[0].getnewaddress()\n         # pubkey"
      },
      {
        "sha": "90c8f12f2a6cfc722bc45a32324325528e3c47c4",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -66,7 +66,6 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.nodes[0].sendtoaddress(addr_extpool, 5)\n             self.nodes[0].generate(1)\n-            self.sync_blocks()\n \n             self.log.info(\"Restart node with wallet backup\")\n             self.stop_node(idx)"
      },
      {
        "sha": "7c62a18043eac0909e6e142a9d6d3b9cbcd1bb99",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -25,7 +25,6 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         # save the number of coinbase reward addresses so far\n         num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n@@ -44,7 +43,6 @@ def run_test(self):\n                             True)\n         # Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n-        self.sync_all()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                             {\"address\": addr},\n                             {\"address\": addr, \"label\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n@@ -79,7 +77,6 @@ def run_test(self):\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n         # Same test as above should still pass\n         expected = {\"address\": addr, \"label\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 11, \"txids\": [txid, ]}\n         res = self.nodes[1].listreceivedbyaddress(0, True, True, addr)\n@@ -116,7 +113,6 @@ def run_test(self):\n \n         # Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n         self.nodes[1].generate(10)\n-        self.sync_all()\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n         assert_equal(balance, Decimal(\"0.1\"))\n \n@@ -145,7 +141,6 @@ def run_test(self):\n         assert_equal(balance, balance_by_label)\n \n         self.nodes[1].generate(10)\n-        self.sync_all()\n         # listreceivedbylabel should return updated received list\n         assert_array_result(self.nodes[1].listreceivedbylabel(),\n                             {\"label\": label},"
      },
      {
        "sha": "c9ceead7ae9ad410c15437b4207fe05d19db11ef",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -31,7 +31,6 @@ def run_test(self):\n         # only one connection. (See fPreferredDownload in net_processing)\n         self.connect_nodes(1, 2)\n         self.nodes[2].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n \n         self.test_no_blockhash()\n         self.test_invalid_blockhash()\n@@ -187,7 +186,6 @@ def test_double_spend(self):\n         address = key_to_p2wpkh(eckey.get_pubkey().get_bytes())\n         self.nodes[2].sendtoaddress(address, 10)\n         self.nodes[2].generate(6)\n-        self.sync_all()\n         self.nodes[2].importprivkey(privkey)\n         utxos = self.nodes[2].listunspent()\n         utxo = [u for u in utxos if u[\"address\"] == address][0]"
      },
      {
        "sha": "727d478d5f276a421941d7fedfb0338cf555ff09",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -94,7 +94,6 @@ def run_test(self):\n             self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n             txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n             self.nodes[1].generate(1)\n-            self.sync_all()\n             assert_equal(len(self.nodes[0].listtransactions(label=\"watchonly\", include_watchonly=True)), 1)\n             assert_equal(len(self.nodes[0].listtransactions(dummy=\"watchonly\", include_watchonly=True)), 1)\n             assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=False)) == 0"
      },
      {
        "sha": "d0f244acc6b9228d59bd015e2e188d0a22db2576",
        "filename": "test/functional/wallet_orphanedreward.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_orphanedreward.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_orphanedreward.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_orphanedreward.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -26,20 +26,17 @@ def run_test(self):\n         # it later.\n         self.sync_blocks()\n         blk = self.nodes[1].generate(1)[0]\n-        self.sync_blocks()\n \n         # Let the block reward mature and send coins including both\n         # the existing balance and the block reward.\n         self.nodes[0].generate(150)\n-        self.sync_blocks()\n         assert_equal(self.nodes[1].getbalance(), 10 + 25)\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 30)\n \n         # Orphan the block reward and make sure that the original coins\n         # from the wallet can still be spent.\n         self.nodes[0].invalidateblock(blk)\n         self.nodes[0].generate(152)\n-        self.sync_blocks()\n         # Without the following abandontransaction call, the coins are\n         # not considered available yet.\n         assert_equal(self.nodes[1].getbalances()[\"mine\"], {"
      },
      {
        "sha": "02dd9dcbf79ccb1c09d41efd39a7197a773c11c7",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -33,7 +33,6 @@ def run_test(self):\n         # Send a tx from which to conflict outputs later\n         txid_conflict_from = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         # Disconnect node1 from others to reorg its chain later\n         self.disconnect_nodes(0, 1)"
      },
      {
        "sha": "fc4321be1b118f2665d0a89b019ef0d5b75a5a6b",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -242,7 +242,6 @@ def run_test(self):\n \n         w0.sendtoaddress(a2_receive, 10) # fund w3\n         self.nodes[0].generate(1)\n-        self.sync_blocks()\n \n         if not self.options.descriptors:\n             # w4 has private keys enabled, but only contains watch-only keys (from w2)\n@@ -261,7 +260,6 @@ def run_test(self):\n \n             w0.sendtoaddress(a2_receive, 10) # fund w4\n             self.nodes[0].generate(1)\n-            self.sync_blocks()\n \n         self.log.info(\"Send to address...\")\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1)"
      },
      {
        "sha": "8099c6395f03cf6ff16dde70f96360bb58156340",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -109,7 +109,6 @@ def run_test(self):\n         self.log.info('Prepare mock PSBT')\n         self.nodes[0].sendtoaddress(address1, 1)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         # Load private key into wallet to generate a signed PSBT for the mock\n         self.nodes[1].createwallet(wallet_name=\"mock\", disable_private_keys=False, blank=True, descriptors=True)"
      },
      {
        "sha": "67eaf26df5f28665ffe95553775cdafb851e7d0d",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -120,7 +120,6 @@ def run_test(self):\n         self.nodes[2].sendrawtransaction(node0_tx2[\"hex\"])\n         self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n-        self.sync_blocks()\n \n         # Re-fetch transaction info:\n         tx1 = self.nodes[0].gettransaction(txid1)"
      },
      {
        "sha": "31bcb6b188bfd532942ae350cac120946316ae7d",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77478d56a59c08e8e22427ca4e59c49545c90c/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fa77478d56a59c08e8e22427ca4e59c49545c90c",
        "patch": "@@ -115,7 +115,6 @@ def run_test(self):\n         # Reconnect the split network, and sync chain:\n         self.connect_nodes(1, 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n-        self.sync_blocks()\n         assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)\n \n         # Re-fetch transaction info:"
      }
    ]
  }
]