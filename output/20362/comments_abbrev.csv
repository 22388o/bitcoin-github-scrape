DrahtBot,2020-11-10 15:43:22,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22567](https://github.com/bitcoin/bitcoin/pull/22567) (test: Implicitly sync after generate* to preempt races and interm",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-724785475,724785475,
practicalswift,2020-11-10 15:53:03,"Concept ACK: thanks for doing this - intermittent test failures are the worst!\n\nBike shed nit: `fn` or `func` might be more unambiguous (but less fun) abbreviations than `fun` :)",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-724791634,724791634,
amitiuttarwar,2020-11-15 18:34:04,"Concept ACK! \n\nvery nice, thank you ",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-727615271,727615271,
laanwj,2020-11-20 03:55:07,"Concept ACK, rooting out a cause of intermittent issues (due to test flakiness) is great.",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-730828853,730828853,
jonasschnelli,2020-12-07 08:31:21,"Nice!\nutACK faeef7a61307b99654a445dffe05b4aed561639d",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-739761547,739761547,
MarcoFalke,2020-12-10 09:31:05,Rebased. Should be trivial to re-ACK,https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-742399212,742399212,
jonatack,2021-03-12 16:58:43,"Code review ACK, needs rebase.",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-797621983,797621983,
MarcoFalke,2021-06-23 07:30:49,"Rebased. Should be trivial to re-ACK, as most conflicts were in the scripted diff.",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-866601417,866601417,
jnewbery,2021-07-23 14:00:39,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-885659763,885659763,
jnewbery,2021-07-26 12:40:28,What do you think about adding a `generate()` method to `TestFramework` that takes the index of the node that you want to generate on? It seems strange to pass a TestFramework function to the constructor of the TestNode.,https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-886667110,886667110,
MarcoFalke,2021-07-26 13:01:06,That would require changing *all* calls to `generate*` and also disable `TestNode::generate*` to avoid races creeping in by accident. Happy to do that refactor if reviewers think it is worth it. I am mostly interested in the functional changes here.,https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-886681568,886681568,
jnewbery,2021-07-26 15:39:15,"> Happy to do that refactor if reviewers think it is worth it.\n\nI think it's worth it, to avoid adding an implicit dependency from TestNode onto TestFramework.",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-886811948,886811948,
MarcoFalke,2021-07-28 09:32:51,"Done in #22567. (Different pr, because the discussion here wasn't substantial, mostly GitHubs own spam, and I wanted to keep this version in case someone decides against #22567).",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-888161953,888161953,
DrahtBot,2021-08-18 21:00:44,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20362#issuecomment-901427247,901427247,
promag,2020-11-14 10:44:53,"faf4ef6b4bd8955ff5a9b714bc17b179a80a8b75\n\nAn alternative to ""overload"" these generate* is to add a generic `_rpc_dispatch_and_sync` (`__getattr__` -> `_rpc_dispatch_and_sync` -> `_rpc_dispatch`).\n\nIt would be cool to keep the last generate* `extract_stack` that when a related error occurs we could print it.",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r523405651,523405651,test/functional/test_framework/test_node.py
promag,2020-11-14 10:49:59,"fa014d2ce4b37f04cdecf8f318cb0cf98f30c050\n\nAn alternative to avoid this circular dependency is to refactor as `self.generate(nodes[1], 1)` or `self.generate(1, 1)` , similarly to `self.start_node(0)`.",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r523406095,523406095,test/functional/test_framework/test_framework.py
MarcoFalke,2020-11-15 07:34:52,"I didn't do that because `self.generate(1, 1)` looks unreadable. Enforcing named args makes everything verbose.",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r523720647,523720647,test/functional/test_framework/test_framework.py
MarcoFalke,2020-11-15 07:35:32,"That would make calling code tremendously verbose, no?",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r523720739,523720739,test/functional/test_framework/test_node.py
promag,2020-12-04 12:45:45,"Agree, you can resolve this.",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r536074151,536074151,test/functional/test_framework/test_framework.py
promag,2020-12-04 22:26:18,See 8f8df56949e5e6558ff7b38bea51fee7acbcc129 where self.sync_all is passed to TestNode instead of self.,https://github.com/bitcoin/bitcoin/pull/20362#discussion_r536420203,536420203,test/functional/test_framework/test_framework.py
sipa,2020-12-18 21:37:59,"It seems a bit ugly to have this bidirectional reference between the framework and the test nodes.\nWould it be sufficient to instead pass and store a lambda ""sync function""?",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r546103044,546103044,test/functional/test_framework/test_node.py
MarcoFalke,2020-12-19 09:44:01,"Thanks, done",https://github.com/bitcoin/bitcoin/pull/20362#discussion_r546217737,546217737,test/functional/test_framework/test_node.py
MarcoFalke,2021-06-23 06:36:00,Maybe I am misunderstanding. Do you have a working diff that I can steal?,https://github.com/bitcoin/bitcoin/pull/20362#discussion_r656799858,656799858,test/functional/test_framework/test_node.py
