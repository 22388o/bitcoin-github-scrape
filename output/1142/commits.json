[
  {
    "sha": "b29a4a3d02c330e15c86daf5b8ae9611dedf255c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjlhNGEzZDAyYzMzMGUxNWM4NmRhZjViOGFlOTYxMWRlZGYyNTVj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-04-24T04:48:44Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-24T04:48:44Z"
      },
      "message": "Canonicalize nFile usage, using zero for 'null' value, rather than -1\n\nIt is defined as a 'unsigned int' and our first valid value is 1.",
      "tree": {
        "sha": "f53dc5ae6e69f8780307127779b65f2966556393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f53dc5ae6e69f8780307127779b65f2966556393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b29a4a3d02c330e15c86daf5b8ae9611dedf255c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29a4a3d02c330e15c86daf5b8ae9611dedf255c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b29a4a3d02c330e15c86daf5b8ae9611dedf255c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29a4a3d02c330e15c86daf5b8ae9611dedf255c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c2e8c8acd8ae0c94c70b59f55169841ad195bb99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e8c8acd8ae0c94c70b59f55169841ad195bb99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e8c8acd8ae0c94c70b59f55169841ad195bb99"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b6269596dc34ba4134086cf3fbd1876c1d994ac3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29a4a3d02c330e15c86daf5b8ae9611dedf255c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29a4a3d02c330e15c86daf5b8ae9611dedf255c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b29a4a3d02c330e15c86daf5b8ae9611dedf255c",
        "patch": "@@ -1701,7 +1701,7 @@ bool CBlock::AcceptBlock()\n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n-    unsigned int nFile = -1;\n+    unsigned int nFile = 0;\n     unsigned int nBlockPos = 0;\n     if (!WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n@@ -1826,7 +1826,7 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n \n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode)\n {\n-    if (nFile == -1)\n+    if (nFile < 1)\n         return NULL;\n     FILE* file = fopen((GetDataDir() / strprintf(\"blk%04d.dat\", nFile)).string().c_str(), pszMode);\n     if (!file)"
      },
      {
        "sha": "4d96e650c344eb57a63ac6bdb6f37b7b0d9a177b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29a4a3d02c330e15c86daf5b8ae9611dedf255c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29a4a3d02c330e15c86daf5b8ae9611dedf255c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b29a4a3d02c330e15c86daf5b8ae9611dedf255c",
        "patch": "@@ -136,8 +136,8 @@ class CDiskTxPos\n     }\n \n     IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n-    void SetNull() { nFile = -1; nBlockPos = 0; nTxPos = 0; }\n-    bool IsNull() const { return (nFile == -1); }\n+    void SetNull() { nFile = 0; nBlockPos = 0; nTxPos = 0; }\n+    bool IsNull() const { return (nFile == 0); }\n \n     friend bool operator==(const CDiskTxPos& a, const CDiskTxPos& b)\n     {\n@@ -156,7 +156,7 @@ class CDiskTxPos\n         if (IsNull())\n             return \"null\";\n         else\n-            return strprintf(\"(nFile=%d, nBlockPos=%d, nTxPos=%d)\", nFile, nBlockPos, nTxPos);\n+            return strprintf(\"(nFile=%u, nBlockPos=%d, nTxPos=%d)\", nFile, nBlockPos, nTxPos);\n     }\n \n     void print() const\n@@ -176,8 +176,8 @@ class CInPoint\n \n     CInPoint() { SetNull(); }\n     CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n-    void SetNull() { ptx = NULL; n = -1; }\n-    bool IsNull() const { return (ptx == NULL && n == -1); }\n+    void SetNull() { ptx = NULL; n = 0; }\n+    bool IsNull() const { return (ptx == NULL && n == 0); }\n };\n \n \n@@ -192,8 +192,8 @@ class COutPoint\n     COutPoint() { SetNull(); }\n     COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }\n     IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n-    void SetNull() { hash = 0; n = -1; }\n-    bool IsNull() const { return (hash == 0 && n == -1); }\n+    void SetNull() { hash = 0; n = 0; }\n+    bool IsNull() const { return (hash == 0 && n == 0); }\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {\n@@ -212,7 +212,7 @@ class COutPoint\n \n     std::string ToString() const\n     {\n-        return strprintf(\"COutPoint(%s, %d)\", hash.ToString().substr(0,10).c_str(), n);\n+        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n     }\n \n     void print() const"
      }
    ]
  }
]