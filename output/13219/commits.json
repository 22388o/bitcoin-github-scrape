[
  {
    "sha": "fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBmYzFiYzdlZGM3ZjFkZDQxOWRiNjc3NmRjZjg5NzQ5Y2MxYTAw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-18T20:29:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-05-13T16:45:55Z"
      },
      "message": "bench: Add block assemble benchmark",
      "tree": {
        "sha": "ace7b13306f52ea5ab6f77360bf5f46408ed1ead",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ace7b13306f52ea5ab6f77360bf5f46408ed1ead"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJa+GvDAAoJEM4rdWl+aaVILd4L/i+49walTTyCblk5BS2xidNZ\n7Ohq6P979s0eWQNcvCpN7fLgM8/nbBXeZBLweyT+CyxYU4/HPnhQdZjADR7Dk1U0\njj8NRyQ4tl5FFdJHG/3xr9UqizcggdSq8Ovxrpzzh3GItnbcMufLPufqVoRc6OeC\nnKxDnTWY6gxvbWGsEzfZZ00tTGj1x6mfSJlZhcTNwstuishQWwbPhVdB12N0o46q\nFTelowCZCmzcl2+p45zBAyFvC1U3Hr8wiy0ERlcELj2Sj+V3ZPM7NpQ8Ady+gaEc\nGwhIHm43w6ifP1X3SIwUuegEzBc5j6IDydprU58W0EYH39YnIeKEwKq1kiNuWx4M\nZ8+1FB1PiFDcvhMuganaP9bZSkACnAJBf79MwwuYS/Id5d5M85PddEXXKGiMk7DL\n8vayoIk4E9PpPy5RIYqlA71OAWQ9pQE+CanzAgISeL6yNCUilYZprk3YAz+rylS5\nOJlrB/JB7AmAjqQg2ILHjlhiiRgMg+B8VcaIMFeRXA==\n=o4TJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ace7b13306f52ea5ab6f77360bf5f46408ed1ead\nparent 66cc47be982aa431b72494f5d655c20eea17a0f5\nauthor MarcoFalke <falke.marco@gmail.com> 1524083381 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1526229955 -0400\n\nbench: Add block assemble benchmark\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66cc47be982aa431b72494f5d655c20eea17a0f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66cc47be982aa431b72494f5d655c20eea17a0f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66cc47be982aa431b72494f5d655c20eea17a0f5"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 116,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e206a33b59bdf0d5ede4801ccf770dcb813953f7",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00",
        "patch": "@@ -15,6 +15,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n+  bench/block_assemble.cpp \\\n   bench/checkblock.cpp \\\n   bench/checkqueue.cpp \\\n   bench/Examples.cpp \\"
      },
      {
        "sha": "450f5bfb0482a1eb53746df5063480a2a3f87b17",
        "filename": "src/bench/block_assemble.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=fa0fc1bc7edc7f1dd419db6776dcf89749cc1a00",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2011-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <scheduler.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <list>\n+#include <vector>\n+\n+static std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)\n+{\n+    auto block = std::make_shared<CBlock>(\n+        BlockAssembler{Params()}\n+            .CreateNewBlock(coinbase_scriptPubKey, /* fMineWitnessTx */ true)\n+            ->block);\n+\n+    block->nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n+    block->hashMerkleRoot = BlockMerkleRoot(*block);\n+\n+    return block;\n+}\n+\n+\n+static CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n+{\n+    auto block = PrepareBlock(coinbase_scriptPubKey);\n+\n+    while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n+        assert(++block->nNonce);\n+    }\n+\n+    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    assert(processed);\n+\n+    return CTxIn{block->vtx[0]->GetHash(), 0};\n+}\n+\n+\n+static void AssembleBlock(benchmark::State& state)\n+{\n+    const std::vector<unsigned char> op_true{OP_TRUE};\n+    CScriptWitness witness;\n+    witness.stack.push_back(op_true);\n+\n+    uint256 witness_program;\n+    CSHA256().Write(&op_true[0], op_true.size()).Finalize(witness_program.begin());\n+\n+    const CScript SCRIPT_PUB{CScript(OP_0) << std::vector<unsigned char>{witness_program.begin(), witness_program.end()}};\n+\n+    // Switch to regtest so we can mine faster\n+    // Also segwit is active, so we can include witness transactions\n+    SelectParams(CBaseChainParams::REGTEST);\n+\n+    InitScriptExecutionCache();\n+\n+    boost::thread_group thread_group;\n+    CScheduler scheduler;\n+    {\n+        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        const CChainParams& chainparams = Params();\n+        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+        LoadGenesisBlock(chainparams);\n+        CValidationState state;\n+        ActivateBestChain(state, chainparams);\n+        assert(::chainActive.Tip() != nullptr);\n+        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n+        assert(witness_enabled);\n+    }\n+\n+    // Collect some loose transactions that spend the coinbases of our mined blocks\n+    constexpr size_t NUM_BLOCKS{200};\n+    std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n+    for (size_t b{0}; b < NUM_BLOCKS; ++b) {\n+        CMutableTransaction tx;\n+        tx.vin.push_back(MineBlock(SCRIPT_PUB));\n+        tx.vin.back().scriptWitness = witness;\n+        tx.vout.emplace_back(1337, SCRIPT_PUB);\n+        if (NUM_BLOCKS - b >= COINBASE_MATURITY)\n+            txs.at(b) = MakeTransactionRef(tx);\n+    }\n+    for (const auto& txr : txs) {\n+        CValidationState state;\n+        bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n+        assert(ret);\n+    }\n+\n+    while (state.KeepRunning()) {\n+        PrepareBlock(SCRIPT_PUB);\n+    }\n+\n+    thread_group.interrupt_all();\n+    thread_group.join_all();\n+    GetMainSignals().FlushBackgroundCallbacks();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n+}\n+\n+BENCHMARK(AssembleBlock, 700);"
      }
    ]
  }
]