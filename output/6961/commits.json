[
  {
    "sha": "b966aa836a3bc5bfa1314248258308f0026d41bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTY2YWE4MzZhM2JjNWJmYTEzMTQyNDgyNTgzMDhmMDAyNmQ0MWJi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T19:21:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T17:47:29Z"
      },
      "message": "Constrain constant values to a single location in code",
      "tree": {
        "sha": "479a641f12deef9df483b368876cbd8ede3da5e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/479a641f12deef9df483b368876cbd8ede3da5e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b966aa836a3bc5bfa1314248258308f0026d41bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b966aa836a3bc5bfa1314248258308f0026d41bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b966aa836a3bc5bfa1314248258308f0026d41bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b966aa836a3bc5bfa1314248258308f0026d41bb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa7311d64cb1a0109d63d6bf7406c119bf94cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92aa7311d64cb1a0109d63d6bf7406c119bf94cd"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 118,
      "deletions": 78
    },
    "files": [
      {
        "sha": "58ced1ade94d9acd57ea8203fd88ab92c1e25ce8",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -22,17 +22,18 @@\n \n using namespace std;\n \n+static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n \n std::string HelpMessageCli()\n {\n     string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     AppendParamsHelpMessages(strUsage);\n-    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n@@ -141,7 +142,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n-    std::string host = GetArg(\"-rpcconnect\", \"127.0.0.1\");\n+    std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n     int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n \n     // Create event base"
      },
      {
        "sha": "55331a3c6c4ab07241b82906de3a5be98c97f08f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 50,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -24,6 +24,7 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n+#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"script/sigcache.h\"\n #include \"scheduler.h\"\n@@ -66,6 +67,10 @@ using namespace std;\n CWallet* pwalletMain = NULL;\n #endif\n bool fFeeEstimatesInitialized = false;\n+static const bool DEFAULT_PROXYRANDOMIZE = true;\n+static const bool DEFAULT_REST_ENABLE = false;\n+static const bool DEFAULT_SAFEMODE = true;\n+static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -296,7 +301,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", !DEFAULT_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n }\n@@ -316,7 +321,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n     strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #ifndef WIN32\n@@ -332,7 +337,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -341,33 +346,33 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", strprintf(_(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\"), fNameLookup));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n     strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n     strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n     strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n@@ -388,22 +393,22 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), fSendFreeTransactions));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), bSpendZeroConfChange));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -420,18 +425,18 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", fCheckpointsEnabled));\n #ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n #endif\n-        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", !DEFAULT_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n #ifdef ENABLE_WALLET\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n #endif\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n@@ -442,25 +447,25 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), fLogIPs));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), fLogTimestamps));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n-        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", DEFAULT_LIMITFREERELAY));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", DEFAULT_RELAYPRIORITY));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n \n@@ -469,19 +474,19 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), fAcceptDatacarrier));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), DEFAULT_BLOCK_MIN_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", strprintf(\"Override block version to test forking scenarios (default: %d)\", (int)CBlock::CURRENT_VERSION));\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n@@ -497,13 +502,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageGroup(_(\"UI Options:\"));\n         if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", \"Allow self signed root certificates (default: 0)\");\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n         }\n-        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n         strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n         strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n@@ -643,7 +648,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         }\n     }\n \n-    if (GetBoolArg(\"-stopafterblockimport\", false)) {\n+    if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n@@ -675,7 +680,7 @@ bool AppInitServers(boost::thread_group& threadGroup)\n         return false;\n     if (!StartHTTPRPC())\n         return false;\n-    if (GetBoolArg(\"-rest\", false) && !StartREST())\n+    if (GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n         return false;\n     if (!StartHTTPServer())\n         return false;\n@@ -759,9 +764,9 @@ void InitParameterInteraction()\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", fLogTimestamps);\n     fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", false);\n+    fLogIPs = GetBoolArg(\"-logips\", fLogIPs);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -835,7 +840,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n-        if (GetBoolArg(\"-txindex\", false))\n+        if (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n #ifdef ENABLE_WALLET\n         if (GetBoolArg(\"-rescan\", false)) {\n@@ -896,7 +901,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", fCheckpointsEnabled);\n \n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n@@ -994,13 +999,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", bSpendZeroConfChange);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", fSendFreeTransactions);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd);\n+    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", fAcceptDatacarrier);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n@@ -1151,7 +1157,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n@@ -1186,7 +1192,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", true);\n+    fNameLookup = GetBoolArg(\"-dns\", fNameLookup);\n \n     bool fBound = false;\n     if (fListen) {\n@@ -1275,7 +1281,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n@@ -1331,7 +1337,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // Check for changed -txindex state\n-                if (fTxIndex != GetBoolArg(\"-txindex\", false)) {\n+                if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n                     break;\n                 }\n@@ -1557,7 +1563,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n             }\n         }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n+        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n     } // (!fDisableWallet)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n@@ -1631,7 +1637,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n+    GenerateBitcoins(GetBoolArg(\"-gen\", DEFAULT_GENERATE), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "2c43d21f8bfdee7072e395efb3afc5c9877c88ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -941,7 +941,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n@@ -963,7 +963,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             nLastTime = nNow;\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1436,7 +1436,7 @@ void Misbehaving(NodeId pnode, int howmuch)\n         return;\n \n     state->nMisbehavior += howmuch;\n-    int banscore = GetArg(\"-banscore\", 100);\n+    int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n@@ -3605,7 +3605,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n         return true;\n \n     // Use the provided setting for -txindex in the new database\n-    fTxIndex = GetBoolArg(\"-txindex\", false);\n+    fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"Initializing databases...\\n\");\n \n@@ -3936,7 +3936,7 @@ std::string GetWarnings(const std::string& strFor)\n     if (!CLIENT_VERSION_IS_RELEASE)\n         strStatusBar = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n \n-    if (GetBoolArg(\"-testsafemode\", false))\n+    if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n         strStatusBar = strRPC = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong"
      },
      {
        "sha": "5264e9219b9e3224679c070465db4720569ea5f3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -86,6 +86,13 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n+static const bool DEFAULT_RELAYPRIORITY = true;\n+\n+static const bool DEFAULT_TXINDEX = false;\n+static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n+\n+static const bool DEFAULT_TESTSAFEMODE = false;\n \n struct BlockHasher\n {"
      },
      {
        "sha": "5b711210dbe7929f4d10f7c921f369142897a1cb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -153,7 +153,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n         map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;"
      },
      {
        "sha": "16c8e2a976f13fc9cf690724e8e18924b72693d2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -17,8 +17,11 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const bool DEFAULT_GENERATE = false;\n static const int DEFAULT_GENERATE_THREADS = 1;\n \n+static const bool DEFAULT_PRINTPRIORITY = false;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "abc7cbb8f41fe397a9c1d34d7d33b2a015f298b9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -521,12 +521,11 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n     {\n-        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        bantimeoffset = GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n         sinceUnixEpoch = false;\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n-\n     LOCK(cs_setBanned);\n     if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n         setBanned[subNet] = banEntry;\n@@ -1414,7 +1413,7 @@ void ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n     if ((addrman.size() > 0) &&\n-        (!GetBoolArg(\"-forcednsseed\", false))) {\n+        (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         MilliSleep(11 * 1000);\n \n         LOCK(cs_vNodes);\n@@ -2337,8 +2336,8 @@ bool CAddrDB::Read(CAddrMan& addr)\n     return true;\n }\n \n-unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n-unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n+unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n+unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),"
      },
      {
        "sha": "3664ce9a7084242fe1e2db865baa1beb7da8680c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -65,6 +65,13 @@ static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n \n+static const bool DEFAULT_FORCEDNSSEED = false;\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+\n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n "
      },
      {
        "sha": "fa6598c1ef9aed92008f732d55f362e13e6d8315",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -40,7 +40,7 @@ static proxyType proxyInfo[NET_MAX];\n static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-bool fNameLookup = false;\n+bool fNameLookup = true;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n "
      },
      {
        "sha": "46c7f18942540781e2d3e8d00770385dddff1862",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -50,7 +50,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n         if (m < 1 || m > n)\n             return false;\n     } else if (whichType == TX_NULL_DATA &&\n-               (!GetBoolArg(\"-datacarrier\", true) || scriptPubKey.size() > nMaxDatacarrierBytes))\n+               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n \n     return whichType != TX_NONSTANDARD;"
      },
      {
        "sha": "1fa5ef5f5d07c99ab7ca681f444d4e23a75293be",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -660,7 +660,7 @@ int main(int argc, char *argv[])\n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);\n \n-    if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n+    if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n     try"
      },
      {
        "sha": "ab63e98d40970ad8e00323ece9b146d390e8b160",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -162,7 +162,7 @@ void Intro::pickDataDirectory()\n     /* 2) Allow QSettings to override default dir */\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", false))\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR))\n     {\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;"
      },
      {
        "sha": "1f54c62b6ee454834e858ce18d9c91a22949c05f",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -145,7 +145,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             int error = X509_STORE_CTX_get_error(store_ctx);\n             // For testing payment requests, we allow self signed root certs!\n             // This option is just shown in the UI options, if -help-debug is enabled.\n-            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", false))) {\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n                 throw SSLVerifyError(X509_verify_cert_error_string(error));\n             } else {\n                qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";"
      },
      {
        "sha": "c8649ec27d759598065d66de0cc8bb3b11563c2a",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -99,7 +99,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getgenerate\\n\"\n             \"\\nReturn if the server is set to generate coins or not. The default is false.\\n\"\n-            \"It is set with the command line argument -gen (or bitcoin.conf setting gen)\\n\"\n+            \"It is set with the command line argument -gen (or \" + std::string(BITCOIN_CONF_FILENAME) + \" setting gen)\\n\"\n             \"It can also be set with the setgenerate call.\\n\"\n             \"\\nResult\\n\"\n             \"true|false      (boolean) If the server is set to generate coins or not\\n\"\n@@ -109,7 +109,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    return GetBoolArg(\"-gen\", false);\n+    return GetBoolArg(\"-gen\", DEFAULT_GENERATE);\n }\n \n UniValue generate(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "60cf7ae49d5754bac34539cd8865617c6c3931c1",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -16,6 +16,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n+bool fAcceptDatacarrier = true;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}"
      },
      {
        "sha": "140306861affc7998e196021ba2b61502e30378a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -26,6 +26,7 @@ class CScriptID : public uint160\n };\n \n static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n+extern bool fAcceptDatacarrier;\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "b6d30b98e9d34346df6071755c56aef0758d5a10",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -99,6 +99,9 @@ namespace boost {\n \n using namespace std;\n \n+const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n map<string, string> mapArgs;\n map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n@@ -107,7 +110,7 @@ bool fPrintToDebugLog = true;\n bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n-bool fLogTimestamps = false;\n+bool fLogTimestamps = true;\n bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n bool fLogIPs = false;\n volatile bool fReopenDebugLog = false;\n@@ -520,7 +523,7 @@ void ClearDatadirCache()\n \n boost::filesystem::path GetConfigFile()\n {\n-    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n+    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -554,7 +557,7 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n #ifndef WIN32\n boost::filesystem::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n+    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }"
      },
      {
        "sha": "b9971f74432b246ee8101db2865818d6dbf0658b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -51,6 +51,13 @@ extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n extern CTranslationInterface translationInterface;\n \n+extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_PID_FILENAME;\n+\n+static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n+static const bool DEFAULT_CHOOSE_DATADIR = false;\n+static const bool DEFAULT_SPLASHSCREEN = true;\n+\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      },
      {
        "sha": "4b9dbebddd5eac4434bc0dc446699dceab770989",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -85,7 +85,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n-    if (GetBoolArg(\"-privdb\", true))\n+    if (GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n     dbenv->set_lg_dir(pathLogDir.string().c_str());"
      },
      {
        "sha": "7f58d03f08c3a7368aa54ae7c6cb165f1e805a98",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -21,6 +21,7 @@\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+static const bool DEFAULT_WALLET_PRIVDB = true;\n \n extern unsigned int nWalletDBUpdated;\n "
      },
      {
        "sha": "1aec97756a85f7a92cc7adb824300f17d436492c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -2260,7 +2260,7 @@ bool CWallet::NewKeyPool()\n         if (IsLocked())\n             return false;\n \n-        int64_t nKeys = max(GetArg(\"-keypool\", 100), (int64_t)0);\n+        int64_t nKeys = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n         for (int i = 0; i < nKeys; i++)\n         {\n             int64_t nIndex = i+1;\n@@ -2287,7 +2287,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n+            nTargetSize = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         while (setKeyPool.size() < (nTargetSize + 1))\n         {"
      },
      {
        "sha": "2fd3b4cabdfff62ae6401160e21be6e7829653fc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -37,6 +37,7 @@ extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n extern bool fPayAtLeastCustomFee;\n \n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n@@ -53,6 +54,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n+static const bool DEFAULT_WALLETBROADCAST = true;\n \n class CAccountingEntry;\n class CBlockIndex;"
      },
      {
        "sha": "5c08ee6d6cdd03cf3ce5e3aa9dbff970cf0a014c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -810,7 +810,7 @@ void ThreadFlushWalletDB(const string& strFile)\n     if (fOneThread)\n         return;\n     fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", true))\n+    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n         return;\n \n     unsigned int nLastSeen = nWalletDBUpdated;"
      },
      {
        "sha": "77f7958814ef3675e16d832b81c93c01a3fa3a11",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b966aa836a3bc5bfa1314248258308f0026d41bb/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b966aa836a3bc5bfa1314248258308f0026d41bb",
        "patch": "@@ -16,6 +16,8 @@\n #include <utility>\n #include <vector>\n \n+static const bool DEFAULT_FLUSHWALLET = true;\n+\n class CAccount;\n class CAccountingEntry;\n struct CBlockLocator;"
      }
    ]
  },
  {
    "sha": "3307bdb3331732e781c77a88ef7053fe23c78701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzA3YmRiMzMzMTczMmU3ODFjNzdhODhlZjcwNTNmZTIzYzc4NzAx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-01T04:29:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T17:47:29Z"
      },
      "message": "Bugfix: Omit wallet-related options from -help when wallet is not supported",
      "tree": {
        "sha": "cfede4ac8fcd53cbe3c827cd50332dfad10e543d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfede4ac8fcd53cbe3c827cd50332dfad10e543d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3307bdb3331732e781c77a88ef7053fe23c78701",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3307bdb3331732e781c77a88ef7053fe23c78701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3307bdb3331732e781c77a88ef7053fe23c78701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3307bdb3331732e781c77a88ef7053fe23c78701/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b966aa836a3bc5bfa1314248258308f0026d41bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b966aa836a3bc5bfa1314248258308f0026d41bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b966aa836a3bc5bfa1314248258308f0026d41bb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eccdaca54c5b60e79359ddcad4b0c68f6283e625",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3307bdb3331732e781c77a88ef7053fe23c78701/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3307bdb3331732e781c77a88ef7053fe23c78701/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3307bdb3331732e781c77a88ef7053fe23c78701",
        "patch": "@@ -24,7 +24,6 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n-#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"script/sigcache.h\"\n #include \"scheduler.h\"\n@@ -465,7 +464,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n+#endif\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n "
      }
    ]
  },
  {
    "sha": "faf93f37fe47fe326fcc4955302a66f24eb13b65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY5M2YzN2ZlNDdmZTMyNmZjYzQ5NTUzMDJhNjZmMjRlYjEzYjY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-09T18:16:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T18:01:11Z"
      },
      "message": "[trivial] Reuse translation and cleanup DEFAULT_* values\n\n* DEFAULT_DISABLE_SAFEMODE = false\n* Use DEFAULT_* constants for extern bools",
      "tree": {
        "sha": "a1f2ed7942c30233341f58f85cff6eaf2e14cb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1f2ed7942c30233341f58f85cff6eaf2e14cb5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf93f37fe47fe326fcc4955302a66f24eb13b65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3307bdb3331732e781c77a88ef7053fe23c78701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3307bdb3331732e781c77a88ef7053fe23c78701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3307bdb3331732e781c77a88ef7053fe23c78701"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 42,
      "deletions": 28
    },
    "files": [
      {
        "sha": "5c1abb54ef9a252368ab22d50acca61c669b8be0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -68,7 +68,7 @@ CWallet* pwalletMain = NULL;\n bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n-static const bool DEFAULT_SAFEMODE = true;\n+static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #if ENABLE_ZMQ\n@@ -300,7 +300,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", !DEFAULT_SAFEMODE) &&\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n }\n@@ -354,7 +354,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", strprintf(_(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\"), fNameLookup));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n@@ -365,7 +365,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n@@ -400,8 +400,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), fSendFreeTransactions));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), bSpendZeroConfChange));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n@@ -424,11 +424,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", fCheckpointsEnabled));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n #ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n #endif\n-        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", !DEFAULT_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n@@ -449,8 +449,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), fLogIPs));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), fLogTimestamps));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n@@ -475,7 +475,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), fAcceptDatacarrier));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n@@ -765,9 +765,9 @@ void InitParameterInteraction()\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", fLogTimestamps);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", fLogIPs);\n+    fLogIPs = GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -902,7 +902,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", fCheckpointsEnabled);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n@@ -1000,14 +1000,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", bSpendZeroConfChange);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", fSendFreeTransactions);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd);\n-    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", fAcceptDatacarrier);\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n+    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n@@ -1193,7 +1193,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", fNameLookup);\n+    fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n     bool fBound = false;\n     if (fListen) {"
      },
      {
        "sha": "6b6840ce8ca2106d2b7609cce0bb013f896161ff",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -66,10 +66,10 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = true;\n+bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n-bool fCheckpointsEnabled = true;\n+bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;"
      },
      {
        "sha": "dfa2fcb537ee65f2dd6b418e4be0120ea2d35f11",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -64,6 +64,7 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */\n@@ -89,6 +90,9 @@ static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n static const bool DEFAULT_RELAYPRIORITY = true;\n \n+/** Default for -permitbaremultisig */\n+static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n+static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n "
      },
      {
        "sha": "05214cb026fe583ddce63be0ee0f44b9da89b2f3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -40,7 +40,7 @@ static proxyType proxyInfo[NET_MAX];\n static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-bool fNameLookup = true;\n+bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n "
      },
      {
        "sha": "9c2df0338e20a974696c3afdb4bedd60355b6f87",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -19,8 +19,10 @@\n extern int nConnectTimeout;\n extern bool fNameLookup;\n \n-/** -timeout default */\n+//! -timeout default\n static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n+//! -dns default\n+static const int DEFAULT_NAME_LOOKUP = true;\n \n #ifdef WIN32\n // In MSVC, this is defined as a macro, undefine it to prevent a compile and link error"
      },
      {
        "sha": "4863b96391963d115b7870fd903cc0253044da1f",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool fAcceptDatacarrier = true;\n+bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}"
      },
      {
        "sha": "2b9fbe78dd1d41c9ccee122b50f0c2183d3422ae",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <stdint.h>\n \n+static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n+\n class CKeyID;\n class CScript;\n "
      },
      {
        "sha": "19131817125f00c007c91305aae430e0d643a080",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -110,9 +110,9 @@ bool fPrintToDebugLog = true;\n bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n-bool fLogTimestamps = true;\n+bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n-bool fLogIPs = false;\n+bool fLogIPs = DEFAULT_LOGIPS;\n volatile bool fReopenDebugLog = false;\n CTranslationInterface translationInterface;\n "
      },
      {
        "sha": "25ab27a8ed8512d230360e3caf96e79013cf1fd3",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -29,6 +29,8 @@\n #include <boost/thread/exceptions.hpp>\n \n static const bool DEFAULT_LOGTIMEMICROS = false;\n+static const bool DEFAULT_LOGIPS        = false;\n+static const bool DEFAULT_LOGTIMESTAMPS = true;\n \n /** Signals for translation. */\n class CTranslationInterface"
      },
      {
        "sha": "69b163ebc90b04f77e5101f6783457358fffe724",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -39,8 +39,8 @@ using namespace std;\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n-bool bSpendZeroConfChange = true;\n-bool fSendFreeTransactions = false;\n+bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n+bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool fPayAtLeastCustomFee = true;\n \n /**"
      },
      {
        "sha": "a4199488fc8cdbe4b2db38401052cd1c3e9087c3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf93f37fe47fe326fcc4955302a66f24eb13b65/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "patch": "@@ -48,6 +48,10 @@ static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n //! minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n+//! Default for -spendzeroconfchange\n+static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n+//! Default for -sendfreetransactions\n+static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)"
      }
    ]
  },
  {
    "sha": "fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQxZDRjOGM2ZTNmODRhOTExN2MwYWRkZjUxYTg3ZjE0MzIxZTJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-09T18:23:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T18:01:26Z"
      },
      "message": "[qt] Move GUI related HelpMessage() part downstream",
      "tree": {
        "sha": "be57e0918417600e4a758f02338f479946bb2721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be57e0918417600e4a758f02338f479946bb2721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf93f37fe47fe326fcc4955302a66f24eb13b65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf93f37fe47fe326fcc4955302a66f24eb13b65"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 25,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1c2f3f49d45e7d87979730f88f123677b86316c2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -499,23 +499,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     }\n \n-    if (mode == HMM_BITCOIN_QT)\n-    {\n-        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n-        }\n-        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n-        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n-        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n-        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n-        }\n-    }\n-\n     return strUsage;\n }\n "
      },
      {
        "sha": "216f23f1396bb3d6113180d4adb5aa2fac05fadf",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -14,6 +14,8 @@ static const int MAX_PASSPHRASE_SIZE = 1024;\n /* BitcoinGUI -- Size of icons in status bar */\n static const int STATUSBAR_ICONSIZE = 16;\n \n+static const bool DEFAULT_SPLASHSCREEN = true;\n+\n /* Invalid field background style */\n #define STYLE_INVALID \"background:#FF8080\"\n "
      },
      {
        "sha": "1d49922e93ca4592dd93a66150739373f3efa55a",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -9,6 +9,8 @@\n #include <QMutex>\n #include <QThread>\n \n+static const bool DEFAULT_CHOOSE_DATADIR = false;\n+\n class FreespaceChecker;\n \n namespace Ui {"
      },
      {
        "sha": "8a7c4c06236dd1b1ac3868c8c1c11dc5cc65f775",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -15,6 +15,8 @@\n #include <QList>\n #include <QString>\n \n+static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n+\n //\n // Wraps dumb protocol buffer paymentRequest\n // with extra methods"
      },
      {
        "sha": "da85ab2b30a569a204fcdc65b0c582ee5118c567",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -8,6 +8,9 @@\n \n #include \"bitcoingui.h\"\n #include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"intro.h\"\n+#include \"paymentrequestplus.h\"\n #include \"guiutil.h\"\n \n #include \"clientversion.h\"\n@@ -70,7 +73,22 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.insertText(header);\n         cursor.insertBlock();\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        std::string strUsage = HelpMessage(HMM_BITCOIN_QT);\n+        const bool showDebug = GetBoolArg(\"-help-debug\", false);\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", _(\"Reset all settings changes made over the GUI\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        }\n+        QString coreOptions = QString::fromStdString(strUsage);\n         text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n \n         QTextTableFormat tf;"
      },
      {
        "sha": "fb154f6660d65f20b6c4c59a41aaa935380e8319",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d4c8c6e3f84a9117c0addf51a87f14321e2a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=fa41d4c8c6e3f84a9117c0addf51a87f14321e2a",
        "patch": "@@ -56,10 +56,6 @@ extern CTranslationInterface translationInterface;\n extern const char * const BITCOIN_CONF_FILENAME;\n extern const char * const BITCOIN_PID_FILENAME;\n \n-static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n-static const bool DEFAULT_CHOOSE_DATADIR = false;\n-static const bool DEFAULT_SPLASHSCREEN = true;\n-\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      }
    ]
  }
]