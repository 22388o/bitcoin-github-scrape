[
  {
    "sha": "b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWQ1ZjQ0Yzk1YjEwMTBiZDZmYTUzZDBhODdhYmQ0ZDYzODlkZjhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-10-27T19:01:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-09T00:06:06Z"
      },
      "message": "Add CBufferedFile",
      "tree": {
        "sha": "b5b4ab23127e67feaae54a17efddc836dcdfe1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5b4ab23127e67feaae54a17efddc836dcdfe1d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16d9d61f99c2e081585e6634d25da3523804eabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16d9d61f99c2e081585e6634d25da3523804eabf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16d9d61f99c2e081585e6634d25da3523804eabf"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 144,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9e14666faccf311968dc1681824befcde23dc28d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
        "patch": "@@ -1225,4 +1225,148 @@ class CAutoFile\n     }\n };\n \n+/** Wrapper around a FILE* that implements a ring buffer to\n+ *  deserialize from. It guarantees the ability to rewind\n+ *  a given number of bytes. */\n+class CBufferedFile\n+{\n+private:\n+    FILE *src;          // source file\n+    uint64 nSrcPos;     // how many bytes have been read from source\n+    uint64 nReadPos;    // how many bytes have been read from this\n+    uint64 nReadLimit;  // up to which position we're allowed to read\n+    uint64 nRewind;     // how many bytes we guarantee to rewind\n+    std::vector<char> vchBuf; // the buffer\n+\n+    short state;\n+    short exceptmask;\n+\n+protected:\n+    void setstate(short bits, const char *psz) {\n+        state |= bits;\n+        if (state & exceptmask)\n+            throw std::ios_base::failure(psz);\n+    }\n+\n+    // read data from the source to fill the buffer\n+    bool Fill() {\n+        unsigned int pos = nSrcPos % vchBuf.size();\n+        unsigned int readNow = vchBuf.size() - pos;\n+        unsigned int nAvail = vchBuf.size() - (nSrcPos - nReadPos) - nRewind;\n+        if (nAvail < readNow)\n+            readNow = nAvail;\n+        if (readNow == 0)\n+            return false;\n+        size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n+        if (read == 0) {\n+            setstate(std::ios_base::failbit, feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            return false;\n+        } else {\n+            nSrcPos += read;\n+            return true;\n+        }\n+    }\n+\n+public:\n+    int nType;\n+    int nVersion;\n+\n+    CBufferedFile(FILE *fileIn, uint64 nBufSize, uint64 nRewindIn, int nTypeIn, int nVersionIn) :\n+        src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n+        state(0), exceptmask(std::ios_base::badbit | std::ios_base::failbit), nType(nTypeIn), nVersion(nVersionIn) {\n+    }\n+\n+    // check whether no error occurred\n+    bool good() const {\n+        return state == 0;\n+    }\n+\n+    // check whether we're at the end of the source file\n+    bool eof() const {\n+        return nReadPos == nSrcPos && feof(src);\n+    }\n+\n+    // read a number of bytes\n+    CBufferedFile& read(char *pch, size_t nSize) {\n+        if (nSize + nReadPos > nReadLimit)\n+            throw std::ios_base::failure(\"Read attempted past buffer limit\");\n+        if (nSize + nRewind > vchBuf.size())\n+            throw std::ios_base::failure(\"Read larger than buffer size\");\n+        while (nSize > 0) {\n+            if (nReadPos == nSrcPos)\n+                Fill();\n+            unsigned int pos = nReadPos % vchBuf.size();\n+            size_t nNow = nSize;\n+            if (nNow + pos > vchBuf.size())\n+                nNow = vchBuf.size() - pos;\n+            if (nNow + nReadPos > nSrcPos)\n+                nNow = nSrcPos - nReadPos;\n+            memcpy(pch, &vchBuf[pos], nNow);\n+            nReadPos += nNow;\n+            pch += nNow;\n+            nSize -= nNow;\n+        }\n+        return (*this);\n+    }\n+\n+    // return the current reading position\n+    uint64 GetPos() {\n+        return nReadPos;\n+    }\n+\n+    // rewind to a given reading position\n+    bool SetPos(uint64 nPos) {\n+        nReadPos = nPos;\n+        if (nReadPos + nRewind < nSrcPos) {\n+            nReadPos = nSrcPos - nRewind;\n+            return false;\n+        } else if (nReadPos > nSrcPos) {\n+            nReadPos = nSrcPos;\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    bool Seek(uint64 nPos) {\n+        long nLongPos = nPos;\n+        if (nPos != (uint64)nLongPos)\n+            return false;\n+        if (fseek(src, nLongPos, SEEK_SET))\n+            return false;\n+        nLongPos = ftell(src);\n+        nSrcPos = nLongPos;\n+        nReadPos = nLongPos;\n+        state = 0;\n+        return true;\n+    }\n+\n+    // prevent reading beyond a certain position\n+    // no argument removes the limit\n+    bool SetLimit(uint64 nPos = (uint64)(-1)) {\n+        if (nPos < nReadPos)\n+            return false;\n+        nReadLimit = nPos;\n+        return true;\n+    }\n+\n+    template<typename T>\n+    CBufferedFile& operator>>(T& obj) {\n+        // Unserialize from this stream\n+        ::Unserialize(*this, obj, nType, nVersion);\n+        return (*this);\n+    }\n+\n+    // search for a given byte in the stream, and remain positioned on it\n+    void FindByte(char ch) {\n+        while (true) {\n+            if (nReadPos == nSrcPos)\n+                Fill();\n+            if (vchBuf[nReadPos % vchBuf.size()] == ch)\n+                break;\n+            nReadPos++;\n+        }\n+    }\n+};\n+\n #endif"
      }
    ]
  },
  {
    "sha": "05d9726805969ff155e8a029579113f05529ea82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWQ5NzI2ODA1OTY5ZmYxNTVlOGEwMjk1NzkxMTNmMDU1MjllYTgy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-10-27T20:01:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-09T00:06:06Z"
      },
      "message": "LoadExternalBlockFile switched to CBufferedFile",
      "tree": {
        "sha": "15ad2a43d50a9d15ec86ae3e40a323f361f82756",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ad2a43d50a9d15ec86ae3e40a323f361f82756"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05d9726805969ff155e8a029579113f05529ea82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d9726805969ff155e8a029579113f05529ea82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05d9726805969ff155e8a029579113f05529ea82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d9726805969ff155e8a029579113f05529ea82/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5d5f44c95b1010bd6fa53d0a87abd4d6389df8b"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 25,
      "deletions": 40
    },
    "files": [
      {
        "sha": "7a9a32a6265cbe970cc523aa39ba880617d52ab1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 40,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05d9726805969ff155e8a029579113f05529ea82/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05d9726805969ff155e8a029579113f05529ea82/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=05d9726805969ff155e8a029579113f05529ea82",
        "patch": "@@ -2493,55 +2493,40 @@ bool LoadExternalBlockFile(FILE* fileIn)\n \n     int nLoaded = 0;\n     {\n-        try {\n-            CAutoFile blkdat(fileIn, SER_DISK, CLIENT_VERSION);\n-            unsigned int nPos = 0;\n-            while (nPos != (unsigned int)-1 && blkdat.good() && !fRequestShutdown)\n-            {\n-                unsigned char pchData[65536];\n-                do {\n-                    fseek(blkdat, nPos, SEEK_SET);\n-                    int nRead = fread(pchData, 1, sizeof(pchData), blkdat);\n-                    if (nRead <= 8)\n-                    {\n-                        nPos = (unsigned int)-1;\n-                        break;\n-                    }\n-                    void* nFind = memchr(pchData, pchMessageStart[0], nRead+1-sizeof(pchMessageStart));\n-                    if (nFind)\n-                    {\n-                        if (memcmp(nFind, pchMessageStart, sizeof(pchMessageStart))==0)\n-                        {\n-                            nPos += ((unsigned char*)nFind - pchData) + sizeof(pchMessageStart);\n-                            break;\n-                        }\n-                        nPos += ((unsigned char*)nFind - pchData) + 1;\n-                    }\n-                    else\n-                        nPos += sizeof(pchData) - sizeof(pchMessageStart) + 1;\n-                } while(!fRequestShutdown);\n-                if (nPos == (unsigned int)-1)\n-                    break;\n-                fseek(blkdat, nPos, SEEK_SET);\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        uint64 nRewind = blkdat.GetPos();\n+        while (blkdat.good() && !blkdat.eof() && !fShutdown) {\n+            blkdat.SetPos(nRewind);\n+            nRewind++; // start one byte further next time, in case of failure\n+            blkdat.SetLimit(); // remove former limit\n+            try {\n+                // locate a header\n+                unsigned char buf[4];\n+                blkdat.FindByte(pchMessageStart[0]);\n+                nRewind = blkdat.GetPos()+1;\n+                blkdat >> FLATDATA(buf);\n+                if (memcmp(buf, pchMessageStart, 4))\n+                    continue;\n+                // read size\n                 unsigned int nSize;\n                 blkdat >> nSize;\n-                if (nSize > 0 && nSize <= MAX_BLOCK_SIZE)\n+                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                    continue;\n+                // read block\n+                blkdat.SetLimit(blkdat.GetPos() + nSize);\n+                CBlock block;\n+                blkdat >> block;\n+                nRewind = blkdat.GetPos();\n                 {\n-                    CBlock block;\n-                    blkdat >> block;\n                     LOCK(cs_main);\n                     if (ProcessBlock(NULL,&block))\n-                    {\n                         nLoaded++;\n-                        nPos += 4 + nSize;\n-                    }\n                 }\n+            } catch (std::exception &e) {\n+                printf(\"%s() : Deserialize or I/O error caught during load\\n\", __PRETTY_FUNCTION__);\n             }\n         }\n-        catch (std::exception &e) {\n-            printf(\"%s() : Deserialize or I/O error caught during load\\n\",\n-                   __PRETTY_FUNCTION__);\n-        }\n+        fclose(fileIn);\n     }\n     printf(\"Loaded %i blocks from external file in %\"PRI64d\"ms\\n\", nLoaded, GetTimeMillis() - nStart);\n     return nLoaded > 0;"
      }
    ]
  }
]