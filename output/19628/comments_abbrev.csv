jonatack,2020-07-30 15:43:36,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-666471177,666471177,
vasild,2020-07-30 16:01:00,"[Filtered code coverage report](https://people.freebsd.org/~vd/pr19628_daa1d8b11_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\n\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19628_daa1d8b11_coverage/modified_and_not_covered.html).",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-666487671,666487671,
DrahtBot,2020-07-30 20:25:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19797 (net: Remove old check for 3-byte shifted IP addresses from pre-0.2.9 node â€¦ by i-rme)\n* #19687 (refactor: make En",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-666670421,666670421,
vasild,2020-08-05 11:04:07,Rebased to resolve a conflict.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-669129564,669129564,
vasild,2020-08-05 11:33:20,Applied review suggestions.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-669141744,669141744,
vasild,2020-08-10 13:10:45,Fixed Windows build and changed `SetLegacyIPv6()` to take a ~~Spam~~Span argument.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-671344431,671344431,
vasild,2020-08-10 20:19:38,"`s/IPv4_IN_IPv6_PREFIX/IPV4_IN_IPV6_PREFIX/` also in comment, was missed during the rename.",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-671569506,671569506,
vasild,2020-08-11 12:05:54,Rebased just to restart Travis.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-671905298,671905298,
vasild,2020-08-12 11:09:46,Addressed review suggestions.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-672807867,672807867,
vasild,2020-08-12 13:43:52,Addressed review suggestion.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-672879171,672879171,
vasild,2020-08-13 07:55:35,Addressed review suggestion.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-673324076,673324076,
jonatack,2020-08-13 08:15:46,"re-ACK 8b7f2c1 per `git diff bfe7d1b 8b7f2c1`\n\nRan bitcoind at bfe7d1b with both onion and clearnet ipv4/ipv6 conns open for a couple of days, debug log and `-netinfo` connections dashboard have been showing nominal operation. Restarting bitcoind now at 8b7f2c1.",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-673333774,673333774,
prusnak,2020-08-19 15:34:57,"I assume TORv3 addresses will be addressed in the future PRs, right?",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-676500110,676500110,
laanwj,2020-08-19 15:36:03,"> I assume TORv3 addresses will be addressed in the future PRs, right?\n\nYes. See BIP155 and  #19031. This is just preparatory work required for that,",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-676500709,676500709,
vasild,2020-08-20 16:52:22,"Addressed suggestions:\n\n[1.](https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473543192) Fixed a bug in netmask validation and extended a test to cover that case.\n[2.](https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473279613) Introduced `HasPrefix()` and used it where appropriate.\n[3.](https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473479704) Moved an assert ",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-677781004,677781004,
vasild,2020-08-20 17:04:17,"A note on invalid netmasks and sub-netting non IP networks:\n\nA netmask that contains 1-bits after 0-bits (the 1-bits are not contiguous on the left side) is invalid. IMO as invalid as ""255.255.390.0"" [[1]](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#Subnet_masks) [[2]](https://tools.ietf.org/html/rfc4632#section-5.1).\n\nThe code before this PR used to parse and accept such ",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-677787025,677787025,
vasild,2020-08-21 11:26:42,"@ryanofsky, thanks for the valuable input! Most of the suggestions addressed.\n\nChanges since the last push:\n\n[1.](https://travis-ci.org/github/bitcoin/bitcoin/jobs/719679500#L3262) Fixed compilation with GCC 8 (`HasPrefix()`)\n[2.](https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473486793) Simplified the check for `INADDR_ANY` and `INADDR_NONE`\n[3.](https://github.com/bitcoin/",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-678242917,678242917,
sipsorcery,2020-08-21 13:40:14,"Concept ACK.\n\nI've dones some tests with `bitcoind -testnet` between Windows and Linux and IPv4 and IPv6 nodes are successfully communicating.",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-678296187,678296187,
vasild,2020-08-21 14:06:22,"Revert any changes to `bool operator==(const CSubNet& a, const CSubNet& b)` and `operator<` - they are not necessary and a recent tweak [upset the fuzzer](https://travis-ci.org/github/bitcoin/bitcoin/jobs/719900948#L4309).\n\nIt is ok to compare the entire `netmask[16]` even for IPv4 because we memset it to `0`s in the constructors, so we will compare the trailing 12 zero bytes unnecessary. That",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-678308599,678308599,
sipa,2020-08-21 20:48:54,"Regarding the change to remove support arbitrary bitmasks as mask, if it's easier to make this change while dropping them, that's what we should do. They're undocumented, unexpected, useless as far as I can see, and I would be very surprised if anyone was using it.\n\nMy preference would be to do it as a separate commit, as it's semantically a very different change than goal of the PR. I would e",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-678486631,678486631,
vasild,2020-08-24 18:42:54,Changes in the last push - fix compilation with GCC 4.8.,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-679299042,679299042,
vasild,2020-08-24 20:00:25,"> Regarding the change to remove support arbitrary bitmasks as mask ... My preference would be to do it as a separate commit\n\nDone in the last push: this PR is now split in 2 commits with the cumulative diff [equal](https://github.com/bitcoin/bitcoin/compare/7c34237fba619667ed1d3981d3b564ad7c25077e..102867c587f5f7954232fb8ed8e85cda78bb4d32) to the single commit from before (modulo the added re",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-679335786,679335786,
sipa,2020-08-24 23:00:01,utACK 102867c587f5f7954232fb8ed8e85cda78bb4d32,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-679408162,679408162,
sipa,2020-08-24 23:36:25,"FWIW, if we just want to syntactic advantage of being able to write `HasPrefix(m_addr, {1,2,3,4})`, that could be done by making the argument `std::vector<uint8_t>`. I don't think it's worth changing that, especially as we'll probably be dropping support for GCC 4.8 soon anyway.",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-679418634,679418634,
vasild,2020-08-25 11:07:11,"This, I think, is settled and gathered some ACKs.\n\nFurther changes to be done as a followup:\n\n* Change `uint8_t CSubNet::netmask[16]` to `uint8_t CSubNet::m_cidr` and other improvements around `CSubNet` that are highly desirable, but not required for this PR, thus not included in it.\n* Elaborate on the release notes (open this [diff](https://github.com/vasild/bitcoin/commit/b45af8c0942b8",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-679958713,679958713,
MarcoFalke,2020-08-25 16:09:04,"Concept ACK 102867c587f5f7954232fb8ed8e85cda78bb4d32\n",https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-680121376,680121376,
MarcoFalke,2020-08-25 16:10:11,(edited OP to remove html comments),https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-680122011,680122011,
vasild,2020-09-01 13:31:46,Next PR on the road to TORv3: https://github.com/bitcoin/bitcoin/pull/19845,https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-684855561,684855561,
practicalswift,2020-08-01 10:36:13,"Are you sure the use of `prevector` is warranted here? Measurements would be nice.\n\nGenerally I think we should try stick with to the standard containers unless we have clear quantitative evidence showing that they are unsuitable for the scenario being considered. Reviewers, static analysers and compilers tend to be better at analysing use of the standard containers :)\n\nFWIW: \n\n```\n$",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r463949087,463949087,src/netaddress.h
sipa,2020-08-01 17:52:19,"I suggested this, so let me back it up.\n\nCurrently an address in CAddrMan consumes 256 bytes (cost in mapInfo and mapAddr together, plus allocation overhead).\n\nThis PR as-is raises that to 288 bytes, for addresses that take up to 16 bytes (which is all of them, for now).\n\nUsing an `std::vector<uint8_t>` instead would change that to 352 bytes per address, or an extra 64 on top. It would",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r463984610,463984610,src/netaddress.h
practicalswift,2020-08-02 20:01:00,@sipa Thanks for quantifying! That answers my question :),https://github.com/bitcoin/bitcoin/pull/19628#discussion_r464117640,464117640,src/netaddress.h
sipa,2020-08-03 01:42:35,"Slightly more modern:\n\n```c++\nreturn std::all_of(m_addr.begin(), m_addr.end(), [](uint8_t b) { return b == 0; });\n```\n",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r464154824,464154824,src/netaddress.cpp
sipa,2020-08-03 01:50:28,"Not something you introduced, but this only works because those addresses have the same byte representation in every byte order.\n",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r464156291,464156291,src/netaddress.cpp
sipa,2020-08-03 01:51:43,"More modern:\n\n```c++\nreturn std::tie(a.m_net, a.m_addr) < std::tie(b.m_net, b.m_addr);\n```\n",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r464156525,464156525,src/netaddress.cpp
sipa,2020-08-03 01:56:08,Nit: uppercase v in global constants (here and further).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r464157430,464157430,src/netaddress.h
vasild,2020-08-05 07:58:28,Thanks for the question and the elaborate explanation! Indeed smaller size and avoiding an extra heap allocation is better. FWIW I moved `m_addr` definition before `m_net` to save 8 bytes from the size of `CNetAddr` (32 vs 40 bytes on x64).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r465544086,465544086,src/netaddress.h
vasild,2020-08-05 08:39:19,"Right! Even though the values of those constants are never going to change (I hope!), does the following look better?\n\n```cpp\nfor (uint32_t a : {htonl(INADDR_ANY), htonl(INADDR_NONE)}) {\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r465567494,465567494,src/netaddress.cpp
vasild,2020-08-05 11:30:48,Changed.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r465660727,465660727,src/netaddress.cpp
vasild,2020-08-05 11:32:12,Modernized :bulb:,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r465661461,465661461,src/netaddress.cpp
vasild,2020-08-05 11:32:37,Changed to uppercase.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r465661649,465661649,src/netaddress.h
laanwj,2020-08-07 09:46:40,"That seems the best option, I think. It's too bad that there's no way to get these constants as byte spans that can be directly compared against m_addr so it wouldn't need the cast and `memcmp` at all.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r466938023,466938023,src/netaddress.cpp
laanwj,2020-08-07 09:53:38,This is pretty scary cast expression. Wouldn't a cast to just `const uint8_t*` work just as well?,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r466941269,466941269,src/test/fuzz/asmap.cpp
laanwj,2020-08-07 10:03:44,Heh we need to make `EncodeBase32` take a span too (not in this PR ofcourse).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r466946168,466946168,src/netaddress.cpp
laanwj,2020-08-07 10:12:30,"You do not need the ""hh"" here, or any type specifiers ever, `strprintf` is type safe.\nAlso maybe include the `/` to avoid an extra string concatenation\n```\nnetwork.ToString() + strprintf(""/%u"", cidr);\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r466950108,466950108,src/netaddress.cpp
vasild,2020-08-07 20:40:06,Changed to use `htonl()`.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r467258675,467258675,src/netaddress.cpp
vasild,2020-08-07 20:42:02,Changed.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r467259428,467259428,src/netaddress.cpp
vasild,2020-08-07 20:55:26,"Passing `const uint8_t*` will not work as long as the argument of the method is a reference to an array: `CNetAddr::SetLegacyIPv6(const uint8_t (&ipv6)[ADDR_IPV6_SIZE])` which is best of type safety but unfortunately two of the callers don't have an array to pass.\n\nI think either one of the following two is better:\n\n<details>\n<summary>change argument to void*</summary>\n\n```diff\ndif",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r467264650,467264650,src/test/fuzz/asmap.cpp
sipa,2020-08-07 21:02:32,"Span span span...\n\n![span](https://user-images.githubusercontent.com/548488/89688260-a0b3b200-d8b6-11ea-9f9c-6b8c7f87b385.png)\n",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r467267311,467267311,src/test/fuzz/asmap.cpp
vasild,2020-08-10 12:49:03,Done in https://github.com/bitcoin/bitcoin/pull/19687,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r467879433,467879433,src/netaddress.cpp
vasild,2020-08-10 13:11:23,Done,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r467891793,467891793,src/test/fuzz/asmap.cpp
jonatack,2020-08-12 08:40:54,"perhaps place the `NET_IPV6` case first to group the similar cases together\n\nsuggestion here and line 221 to be the same as the first case line 205:\n```suggestion\n                assert(prefix_size + m_addr.size() == sizeof(arr));\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469100605,469100605,src/netaddress.h
jonatack,2020-08-12 08:43:44,"per `developer-notes.md`:\n```suggestion\n    } // no default case, so the compiler can warn about missing cases\n    assert(false);\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469102204,469102204,src/netaddress.h
jonatack,2020-08-12 09:22:08,"`nBits` is currently given a value a few lines down but seems a good habit to always provide a default.\n```suggestion\n    int nBits{0};\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469124958,469124958,src/netaddress.cpp
jonatack,2020-08-12 09:27:25,consider using the pre-increment (`++i`) operator,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469128086,469128086,src/netaddress.cpp
vasild,2020-08-12 11:08:21,Default assigning in the case where we are supposed to always assign the variable later will suppress valgrind and compiler warnings if there is a bug in the code and it does not actually initialize the variable in some cases.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469180866,469180866,src/netaddress.cpp
vasild,2020-08-12 11:08:36,Done.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469180974,469180974,src/netaddress.h
vasild,2020-08-12 11:08:48,Done.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469181087,469181087,src/netaddress.h
vasild,2020-08-12 11:09:02,Done.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469181196,469181196,src/netaddress.cpp
jonatack,2020-08-12 11:40:27,(there's nuance to be sure; if helpful:)\n\nhttps://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es20-always-initialize-an-object\n\nSome history and reading on uninitialized reads in Bitcoin Core: https://bitcoincore.reviews/17639\n\nSee also this comment and thread https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559421439,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469195737,469195737,src/netaddress.cpp
vasild,2020-08-12 13:43:34,"Initialized to `0`. Note that the Cpp Core Guidelines contain an [example](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#example-186) that resembles our case and admits that ""This cannot trivially be rewritten to initialize i and j with initializers"".\n\nWe have:\n\n```cpp\nint nBits;\n... code that is supposed to set nBits ... // [1]\nread nBits // [2]\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469269332,469269332,src/netaddress.cpp
jonatack,2020-08-12 14:13:13,"Yes. Attempted at the time to summarize the trade-offs in the review club notes I linked to (LMK if you see any errors, I wanted it to be a resource).\n\nEdit: Thanks @vasild for the offline suggestions on the review club notes.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469290450,469290450,src/netaddress.cpp
jonatack,2020-08-12 14:42:04,Add the assert as well as the comment?,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469311652,469311652,src/netaddress.h
vasild,2020-08-12 15:17:19,"Hmm, I almost added the `assert(false);` but then realized that the code flow just continues after the `switch` (it contains `break;`, not `return;` as the example in the developer-notes).\n\nApply this?\n\n<details>\n<summary>diff</summary>\n\n```diff\ndiff --git i/src/netaddress.h w/src/netaddress.h\nindex b75eff1b9..8cd2401e2 100644\n--- i/src/netaddress.h\n+++ w/src/netaddress.h\n@",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469337602,469337602,src/netaddress.h
MarcoFalke,2020-08-12 15:38:08,"Maybe it is time to add an init macro that default initializes a variable, but disables the initialization when `--enable-debug` or so?",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469352267,469352267,src/netaddress.cpp
jonatack,2020-08-12 15:47:42,"I should have mentioned that. Returning LGTM, nothing else is being done in the function.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469361342,469361342,src/netaddress.h
vasild,2020-08-13 07:55:11,Changed `break;` to `return;` and added `assert(false);` after the `switch`.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r469765242,469765242,src/netaddress.h
elichai,2020-08-19 19:49:57,"nit, you could reformat this to more ""modern"" C++ (though I'm not sure if it is less or more readable)\n```c++\nif(std::equal(std::cbegin(IPV4_IN_IPV6_PREFIX), std::cend(IPV4_IN_IPV6_PREFIX), ipv6.cbegin()))\n```\n\n(you could replace `std::cbegin(IPV4_IN_IPV6_PREFIX)` with `IPV4_IN_IPV6_PREFIX.cbegin()` if you make it a `std::array` and not a C style array)",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473279613,473279613,src/netaddress.cpp
sipa,2020-08-20 00:27:56,"Nit: { } around indented blocks, if you're touching this code anyway.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473471945,473471945,src/netaddress.cpp
kallewoof,2020-08-20 00:40:13,Placing this assertion here seems weird to me. Shouldn't this check be done when(ever) `m_net` is modified? Same with `IsIPv6()` below.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473479704,473479704,src/netaddress.cpp
kallewoof,2020-08-20 00:51:19,"The opposite seems more straightforward:\n```C++\nif (IsIPv4()) {\n    uint32_t a;\n    memcpy(&a, m_addr.data(), sizeof(a));\n    if (a == htonl(INADDR_ANY) || a == htonl(INADDR_NONE)) return false;\n}\n```\n@sipa might yell at me but it is also possible to do `uint32_t a = *(uint32_t*)m_addr.data();` to skip the `memcpy` line.\n",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473486793,473486793,src/netaddress.cpp
kallewoof,2020-08-20 01:00:09,"It looks like you can do this as a copy operation now that the ordering is the same.\n```C++\nsize_t i = nBits >> 3;\nvchRet.insert(vchRet.end(), m_addr.begin(), m_addr.begin() + i);\nnBits &= 0x7;\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473492495,473492495,src/netaddress.cpp
sipa,2020-08-20 01:46:20,"It seems I've caused a lot of confusion here. Everything works here of course due to INADDR_ANY and INADDR_NONE being the same in LE and BE, but if they weren't, the code here would actually be wrong.\n\nThese constants (and the `s_addr` field of `struct in_addr`) are uint32_t in name only; they're really 4 bytes in big endian notation storing an IP address. So the IP address 1.2.3.4 would be st",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473522167,473522167,src/netaddress.cpp
sipa,2020-08-20 02:05:17,"Agree with @elichai's suggestion, `std::equal` is nicer.\n\nGiven how many of these tests are being done (including the IsRFC... stuff below), perhaps you want to go even further (this is absolutely not a blocker for this PR, however):\n\n```c++\ntemplate<typename T, int LEN>\nbool HasPrefix(const T1& obj, const uint8_t (&prefix)[LEN])\n{\n    return obj.size() >= LEN && std::equal(std::cb",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473534623,473534623,src/netaddress.cpp
sipa,2020-08-20 02:14:20,I believe that's correct.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473540199,473540199,src/netaddress.cpp
sipa,2020-08-20 02:19:13,"I don't think this is correct, for two reasons:\n\n* We technically support non-CIDR subnets (which are allowed to contain an arbitrary mix of 0 and 1 bits).\n* This test isn't even implementing whether the mask is CIDR, as it's only checking whether no 1-bits-after-0-bits occur within one byte of the mask, rather than the entire mask.\n\nI wouldn't be opposed to dropping non-CIDR netmasks, b",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473543192,473543192,src/netaddress.cpp
sipa,2020-08-20 02:24:15,"Braces, please.\n\n(for most rules I don't care that strongly whether you stick to the existing/surrounding style vs. follow the new style, but a braceless `if` has actually been part of the cause of a nontrivial security bug, see https://www.imperialviolet.org/2014/02/22/applebug.html)",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473546480,473546480,src/netaddress.cpp
sipa,2020-08-20 02:26:41,Here too it seems you're dropping support for non-CIDR masks. Is that intentional?,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473547937,473547937,src/netaddress.cpp
elichai,2020-08-20 08:52:14,In C++17 `HasPrefix` will be possible even with C arrays :D (by replacing `.size()` with `std::size(..)`),https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473780674,473780674,src/netaddress.cpp
vasild,2020-08-20 16:53:49,Done - [diff together with other suggestions](https://github.com/bitcoin/bitcoin/compare/8b7f2c13b67ae84a59f29a7cffe243055a2b93d9..86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474135614,474135614,src/netaddress.cpp
vasild,2020-08-20 16:54:10,Done - [diff together with other suggestions](https://github.com/bitcoin/bitcoin/compare/8b7f2c13b67ae84a59f29a7cffe243055a2b93d9..86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474135795,474135795,src/netaddress.cpp
vasild,2020-08-20 16:55:49,"Those constants are defined like this in the system headers:\n\n```cpp\ntypedef uint32_t in_addr_t;\n...\n#define	INADDR_ANY		((in_addr_t) 0x00000000)\n#define	INADDR_NONE		((in_addr_t) 0xffffffff)\n...\n#define INADDR_ALLHOSTS_GROUP	((in_addr_t) 0xe0000001) /* 224.0.0.1 */\n```\n\nOf course any discussion about the byte order of `INADDR_ANY` is meaningless, but nevertheless - we can as",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474136825,474136825,src/netaddress.cpp
vasild,2020-08-20 16:56:29,Done - [diff together with other suggestions](https://github.com/bitcoin/bitcoin/compare/8b7f2c13b67ae84a59f29a7cffe243055a2b93d9..86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474137228,474137228,src/netaddress.cpp
vasild,2020-08-20 16:59:36,I added { } to all places where the line containing if/for/while is modified for another reason (this one is not).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474139125,474139125,src/netaddress.cpp
vasild,2020-08-20 17:01:14,Done - [diff together with other suggestions](https://github.com/bitcoin/bitcoin/compare/8b7f2c13b67ae84a59f29a7cffe243055a2b93d9..86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474140065,474140065,src/netaddress.cpp
vasild,2020-08-20 17:05:14,"Yes, see https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-677787025 - it is mentioned in the commit message and also some tests are adjusted.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474142149,474142149,src/netaddress.cpp
vasild,2020-08-20 17:07:45,"Uh, oh, you found a bug (the second item above)! Fixed - [diff together with other suggestions](https://github.com/bitcoin/bitcoin/compare/8b7f2c13b67ae84a59f29a7cffe243055a2b93d9..86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3).\n\nA summary about the netmasks: https://github.com/bitcoin/bitcoin/pull/19628#issuecomment-677787025",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474143463,474143463,src/netaddress.cpp
sipa,2020-08-20 18:17:36,"You're right.\n\nI was confused by the fact that `struct in_addr`'s `s_addr` field stores IP addresses in BE order, but the INADDR_* constants are in native order (and you are supposed to use `htonl` & friends to convert between them; see the section on `sin_addr` in https://man7.org/linux/man-pages/man7/ip.7.html).\n\nArguably you should be using `ntohl` instead of `htonl` (as these constants",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474181694,474181694,src/netaddress.cpp
ryanofsky,2020-08-20 18:28:01,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nMaybe s/16/ADDR_IPV6_SIZE/ since code would be broken using any other size.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474187399,474187399,src/netaddress.h
ryanofsky,2020-08-20 18:32:08,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nCan you add a comment to explain why this is serializing 0's rather than asserting false in both of these cases? Maybe say when this code could be called to serialize unroutable addresses and when it could be called to serialize invalid NET_MAX addresses.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474189751,474189751,src/netaddress.h
elichai,2020-08-20 18:40:02,"I had to google this syntax :/  (for a second I thought it was a C trick to make arrays work, but it's actually C++)\ncould we please use `const std::array<uint8_t, N>&` instead? :)",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474194069,474194069,src/netaddress.cpp
ryanofsky,2020-08-20 18:40:08,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nHaving a `ParseUInt8()` function would seem more appealing than layering uint8 range checking on top of uint32 range checking done by `ParseUInt32`",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474194126,474194126,src/netbase.cpp
elichai,2020-08-20 18:41:52,or just make this generic over all containers,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474195211,474195211,src/netaddress.cpp
elichai,2020-08-20 18:43:47,"as @sipa said \n```C++\nuint32_t a = ReadBE32(m_data.data());\nif (a == INADDR_ANY || a == INADDR_ALL) ...\n```\nis so much more readable :)",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474196241,474196241,src/netaddress.cpp
ryanofsky,2020-08-20 19:07:07,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nPrecedes this PR, so maybe not worth changing here, but this method seems more awkward to use for assignment than plain `operator=`, and the `SetIP` method name is misleading since it works for all addresses, not just IP addresses. I think it would better to just use plain `=` for address ass",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474208419,474208419,src/netaddress.cpp
ryanofsky,2020-08-20 19:19:20,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nIt would be nice not to drop this explanation. I think it could move to the SerializeV1Array function or be incorporated in the TORV2_IN_IPV6_PREFIX comment.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474214757,474214757,src/netaddress.cpp
ryanofsky,2020-08-20 19:29:18,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nNot sure if it's portable, but it seems like you can avoid the casting and span declaration on this line with just `SetLegacyIPv6(ipv6Addr.s6_addr);`",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474219887,474219887,src/netaddress.cpp
ryanofsky,2020-08-20 19:41:55,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nMaybe would be good to static assert that `in_addr` size is the same as `ADDR_IPV4_SIZE`",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474230648,474230648,src/netaddress.cpp
ryanofsky,2020-08-20 20:18:08,"re: https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473522167\n\n> @kallewoof Your suggestion is UB, I'm afraid\n\nJust in case anybody else reading this gets confused like me, this is /not/ saying @kallewoof memcpy suggestion is UB. Only the second suggestion without memcpy is UB",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474248623,474248623,src/netaddress.cpp
ryanofsky,2020-08-20 20:54:02,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nNow that this is calling memcpy with dynamic size rather than fixed size, I think it'd be good to add an assert to check that it doesn't overflow the in_addr struct. Same suggestion for in6_addr struct below.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474266508,474266508,src/netaddress.cpp
ryanofsky,2020-08-20 21:02:08,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nI think this could be a little safer with bounds checking, and more readable as `ReadBE32(MakeSpan(m_addr).last(ADDR_IPV4_SIZE).data())`. Similarly for RFC4380 case below.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474270653,474270653,src/netaddress.cpp
ryanofsky,2020-08-20 21:18:03,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nProbably my fault, but I did spend a minute looking at this diff being baffled by `nBits >> 3` and `nBits &= 0x7`. Would suggest changing to `size_t bytes = nBits / 8` and `nBits = nBits % 8` to give a few more hints for comprehension.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474278171,474278171,src/netaddress.cpp
ryanofsky,2020-08-20 21:24:03,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nIt seems like this assert would make more sense moved before the `vchRet.insert` statement above, and not conditioned on nBits divisibility.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474280814,474280814,src/netaddress.cpp
ryanofsky,2020-08-20 21:31:51,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nMight be worth mentioning in commit message CNetAddr now has returns different hash values. It seems like GetHash is only called one place in net_processing. Maybe this is the only change in the PR that's not just refactoring and actually affects externally observable behavior.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474284346,474284346,src/netaddress.cpp
ryanofsky,2020-08-20 21:44:32,"In commit ""net: change CNetAddr::ip to have flexible size"" (86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3)\n\nValue of size variable used here seems fragile. Seems like it would be better to not assume any particular network type and use network.m_addr_size() like code above seems to do.\n\nSame suggestion for operator < below. ",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474289828,474289828,src/netaddress.cpp
sipa,2020-08-20 22:10:09,"Oops, yes, I guess this confused @kallewoof too (on IRC). Specifially, this is UB:\n\n```c++\nuint32_t a = *(uint32_t*)m_addr.data();\n```\n\nas it's accessing a byte array through an incompatible type.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474300152,474300152,src/netaddress.cpp
MarcoFalke,2020-08-21 05:47:46,"> generic over all containers\n\nSpan !?",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474421548,474421548,src/netaddress.cpp
vasild,2020-08-21 07:54:10,"I can't figure out how to use `std::array` or `Span` and keep the usage to just `HasPrefix(m_addr, {192, 168})` (which is sweet!), so I am keeping the reference to array.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474490128,474490128,src/netaddress.cpp
vasild,2020-08-21 08:49:13,"I agree. I considered swapping this for `operator=`, but cut it off, trying to keep the patch small. There are so many things that can be improved around this code!",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474538202,474538202,src/netaddress.cpp
vasild,2020-08-21 10:01:12,Looks like it is not: https://docs.microsoft.com/en-us/windows/win32/api/in6addr/ns-in6addr-in6_addr :-(,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474600947,474600947,src/netaddress.cpp
vasild,2020-08-21 10:07:32,I think that's not necessary. It was also the case before this PR that `struct in_addr` would be assumed to be 4 bytes. I don't see this ever changing.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474603824,474603824,src/netaddress.cpp
vasild,2020-08-21 10:36:24,"It is here because here we access `m_addr[i]`. I would normally use `m_addr.at(i)` if there is a chance it may get out of bounds and not write an explicit separate assert, but `prevector` does not have an `at()` method :/",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474617351,474617351,src/netaddress.cpp
vasild,2020-08-21 11:03:32,"Hmm, that hash is only used when relaying addresses and is not saved on disk or sent over the network. The current time is also thrown to the hasher, together with the result of the changed `CNetAddr::GetHash()` and also with the relay destination. So the final result from the hasher is likely to change even after just a bitcoind restart (because it will connect to other nodes) or after 24h or les",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474628679,474628679,src/netaddress.cpp
vasild,2020-08-21 11:30:45,"Alright, we have a clear winner with\n```cpp\nuint32_t a = ReadBE32(m_data.data());\nif (a == INADDR_ANY || a == INADDR_ALL) ...\n```\n\n[Changed](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2).",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474639720,474639720,src/netaddress.cpp
vasild,2020-08-21 11:31:49,[Done](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2).,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474640152,474640152,src/netaddress.h
vasild,2020-08-21 11:33:19,There is no reason to serialize as `0`s. `NET_UNROUTABLE` and `NET_MAX` are never set to `m_net` and must never be set. [Changed](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2) this to `assert(false)`.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474640768,474640768,src/netaddress.h
vasild,2020-08-21 11:35:12,"Right, [added ParseUint8()](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2).",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474641563,474641563,src/netbase.cpp
vasild,2020-08-21 11:36:55,[Moved](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2) the comment to `TORV2_IN_IPV6_PREFIX` and similar with `SetInternal()` and `INTERNAL_IN_IPV6_PREFIX`.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474642315,474642315,src/netaddress.cpp
vasild,2020-08-21 11:38:46,[Done](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2),https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474643161,474643161,src/netaddress.cpp
vasild,2020-08-21 11:39:09,[Done](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2),https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474643314,474643314,src/netaddress.cpp
vasild,2020-08-21 11:40:00,[Done](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2),https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474643738,474643738,src/netaddress.cpp
vasild,2020-08-21 11:42:04,"`a.network.m_addr` is protected here and can't be accessed. Anyway, since we only do subnetting of IPv4 and IPv6 I [added an assert](https://github.com/bitcoin/bitcoin/compare/86b2397faedcd9b57649ddb90e98c8cf6a4a6ad3..8c709e738773f954c1b385f997e6d3adeaea97c2) to ensure that this is the case.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474644667,474644667,src/netaddress.cpp
sipa,2020-08-21 16:31:49,"The hashing (in RelayAddress) is actually salted by a value that's randomly generated at startup (through `CConnman::GetDeterministicRandomizer`), so it will in fact always be different after restart.\n\nYou could add a comment in the commit description, but I don't think it needs more exposure than that.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474804072,474804072,src/netaddress.cpp
MarcoFalke,2020-08-21 16:36:16,"The current one doesn't compile either on gcc 4.8:\n\n```\nnetaddress.cpp: In member function â€˜bool CNetAddr::IsRFC3927() constâ€™:\n\nnetaddress.cpp:163:52: error: no matching function for call to â€˜HasPrefix(const prevector<16u, unsigned char>&, <brace-enclosed initializer list>)â€™\n\n     return IsIPv4() && HasPrefix(m_addr, {169, 254});\n\n                                                 ",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474806190,474806190,src/netaddress.cpp
sipa,2020-08-21 16:39:25,"@vasild Nice, that indeed works, and I don't see how that could work with `std::array` (the on-the-fly constructed array's length template parameter can't be figured out from the list of elements). It certainly can't work for `Span` as there needs to be some object that actually holds the elements.\n\n@elichai I guess you have an answer to the question you asked on IRC yesterday ""why would someo",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474807667,474807667,src/netaddress.cpp
sipa,2020-08-21 18:59:32,"@vasild @MarcoFalke I think that can be fixed by removing the `T2` template parameter, and just hardcoding it to an array of `uint8_t` (but templated size).",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474873018,474873018,src/netaddress.cpp
elichai,2020-08-23 11:35:34,"@sipa Yep, I guess C arrays are still treated quite differently than anything else (more like initilaizer_list etc) :(\n(interesting: https://stackoverflow.com/a/61390991/1621927)",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r475208522,475208522,src/netaddress.cpp
vasild,2020-08-24 11:57:56,"> I think that can be fixed by removing the T2 template parameter, and just hardcoding it to an array of uint8_t\n\n> I think that can be fixed by removing the `T2` template parameter, and just hardcoding it to an array of `uint8_t` (but templated size).\n\nIt does not compile either because then gcc 4.8 complained it cannot deduce the length from the initialiser list, so I [switched](https://",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r475547227,475547227,src/netaddress.cpp
sipa,2020-08-24 21:11:58,"Perhaps point out where these are used. I think the `-rpcallowip` parameter, and the `setban` RPC are the only ones?",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r475896917,475896917,doc/release-notes.md
sipa,2020-08-24 21:34:27,"Not a comment on this PR (it makes sense to not change any further behavior), but 0.2.8 is over 10 years old now, and can't even communicate with current software due to the mandatory checksum change in 2012. It's probably fine to drop this code at some point.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r475907453,475907453,src/netaddress.cpp
ryanofsky,2020-08-24 23:28:35,"re: https://github.com/bitcoin/bitcoin/pull/19628#discussion_r474617351\n\n> It is here because here we access `m_addr[i]`. I would normally use `m_addr.at(i)` if there is a chance it may get out of bounds and not write an explicit separate assert, but `prevector` does not have an `at()` method :/\n\nRight, but if you assume the assert is false and `num_bytes >= m_addr.size()`, then the expres",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r475958227,475958227,src/netaddress.cpp
jonatack,2020-08-25 03:05:34,"Append "" (#19628)""",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476099559,476099559,doc/release-notes.md
kallewoof,2020-08-25 03:35:59,Î¼-nit: not sure why this is `T1` and not simply `T`,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476120289,476120289,src/netaddress.cpp
kallewoof,2020-08-25 04:08:47,"If we for a brief moment pretended that `prevector.h:258` had this line added to it:\n```C++\n    static prevector from(std::initializer_list<T> il) { return prevector(il.begin(), il.end()); }\n```\n\nthen it would have been worth it to do:\n```C++\nstatic auto ipv6_loopback = prevector<16, uint8_t>::from({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1});\nif (IsIPv6() && m_addr == ipv6_loopback) {\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476142475,476142475,src/netaddress.cpp
kallewoof,2020-08-25 04:32:14,"This could be\n```C++\n    static prevector<ADDR_IPV6_SIZE, uint8_t> ipNone6{ADDR_IPV6_SIZE, 0x0};\n    if (IsIPv6() && m_addr == ipNone6) {\n```",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476159214,476159214,src/netaddress.cpp
vasild,2020-08-25 10:37:11,"This ended up with `const std::array<uint8_t, N>&` anyway, due to GCC 4.8. Will change it back to reference to an array once the support for GCC 4.8 is removed.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476349844,476349844,src/netaddress.cpp
vasild,2020-08-25 10:40:15,Will do so in a followup.,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476351352,476351352,doc/release-notes.md
vasild,2020-08-25 10:42:11,"Will do so in a followup, to keep the current ACKs.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476352324,476352324,doc/release-notes.md
vasild,2020-08-25 10:48:03,"This was `T` initially, then was changed to `T1` and `T2`, then I dropped the second one but forgot to rename `T1` to `T`. Will take are about it when touching this after GCC 4.8 is no longer supported.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476355204,476355204,src/netaddress.cpp
vasild,2020-08-25 10:52:43,"I think it is also important to not deviate from `std::vector` interface so that it is not too much hassle should one decide to swap `prevector` for `std::vector` or the other way around.\n\nBtw, `std::vector` has an initializer list constructor.\n\nAnyway - leaving this as is.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476357492,476357492,src/netaddress.cpp
vasild,2020-08-25 10:58:57,"Right! I will apply it if I modify this PR.\n\n`ADDR_IPV6_SIZE` is of type `size_t`, the typecast should not be needed?",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476360663,476360663,src/netaddress.cpp
kallewoof,2020-08-26 01:28:59,"Yeah, I had originally put 16 there but realized `ADDR_IPV6_SIZE` was better.",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476951941,476951941,src/netaddress.cpp
kallewoof,2020-08-26 01:32:20,"Yeah, it may be that my lines below (the `ipNode6`) were in fact invalid, and were the cause for the errors I saw when I did this as a prevector constructor, where I didn't initially cast 16 to `size_t` in `ipNone6{16, 0x0}`. I much prefer the constructor variant, which is also closer to `std::vector`. FTR, that was\n\n```C++\nprevector(std::initializer_list<T> il) : prevector(il.begin(), il.en",https://github.com/bitcoin/bitcoin/pull/19628#discussion_r476954228,476954228,src/netaddress.cpp
vasild,2020-08-26 08:07:18,I wonder if we can avoid defining a local variable for IPv6 loopback address and use `IN6ADDR_LOOPBACK_INIT` or `in6addr_loopback`...,https://github.com/bitcoin/bitcoin/pull/19628#discussion_r477113271,477113271,src/netaddress.cpp
