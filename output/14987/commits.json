[
  {
    "sha": "faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWExNTIyZTVlYzVlYzUzYjJiMmIxZWQzNmMxMWU4NDkzOWJiYjEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-21T17:29:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-25T19:16:07Z"
      },
      "message": "RPCHelpMan: Pass through Result and Examples",
      "tree": {
        "sha": "8575b7dbb7409b486e5e38f575bf5ecebc06adb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8575b7dbb7409b486e5e38f575bf5ecebc06adb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcS2B4AAoJEM4rdWl+aaVIzJwL/1ARQOCzH1G7EosVo2a8uaCU\noXSFKRXBiJYtsmJBV30JYaiutu4SlsGWl4+N9D6pvbcogU7LBF5aQ5n+aIRjc4FW\n6PioJHKnU2MBnxeGWaZDX7qku06yF+ud41ExpewU8A6Vstg3KIl40g0gg6t1rUp4\nlxsX7TrZygsgq1dmuctgPqPstRmvpjqGcRstDqxsA1XMDf2flDf7MTC64SKQCmgc\nqeMVdW1zDxaPeaDNJd24tcBQ2N2OAi1LVkwF+HPWenTz8K19Ej6awh9FHtsjMbOz\n25CZdR2+dYm4oXz3b61AshirIERcfhjVGCV8GugPZ+OUVXEJA4KwYMK+pknXVu9F\nbOlCqpn1sCn/pR0+EeAXDKSZL6EZ6ug5+9RppLJHxqgpE4XplFI91sGJSpp3joVL\nii3zRf4Gf1stw7fjc3eix3uAbeWf7oere+E1f9n/IsYIxpn0pWyP1KG8AL6hK/Ss\nzU0xasJmO18cbeHT+47SvnkQxg0qGyY98RRk7q/c7A==\n=+xYu\n-----END PGP SIGNATURE-----",
        "payload": "tree 8575b7dbb7409b486e5e38f575bf5ecebc06adb3\nparent 5eb32d23841bbcd8eaf7ba49dc4ddfd822bd4773\nauthor MarcoFalke <falke.marco@gmail.com> 1545413376 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1548443767 -0500\n\nRPCHelpMan: Pass through Result and Examples\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5eb32d23841bbcd8eaf7ba49dc4ddfd822bd4773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eb32d23841bbcd8eaf7ba49dc4ddfd822bd4773",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eb32d23841bbcd8eaf7ba49dc4ddfd822bd4773"
      }
    ],
    "stats": {
      "total": 1770,
      "additions": 1011,
      "deletions": 759
    },
    "files": [
      {
        "sha": "86cf121da24c3ca2fd187a6dfd993d7a949ca25b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 214,
        "deletions": 168,
        "changes": 382,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -162,14 +162,16 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getblockcount\",\n-                \"\\nReturns the number of blocks in the longest blockchain.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns the number of blocks in the longest blockchain.\\n\",\n+                {},\n+                RPCResult{\n             \"n    (numeric) The current block count\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockcount\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockcount\", \"\")\n             + HelpExampleRpc(\"getblockcount\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n     return chainActive.Height();\n@@ -180,14 +182,16 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getbestblockhash\",\n-                \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\",\n+                {},\n+                RPCResult{\n             \"\\\"hex\\\"      (string) the block hash, hex-encoded\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getbestblockhash\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n@@ -212,17 +216,18 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n                     {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n             \"  \\\"height\\\" : {     (int) Block height\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"waitfornewblock\", \"1000\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"waitfornewblock\", \"1000\")\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n-        );\n+                },\n+            }.ToString());\n     int timeout = 0;\n     if (!request.params[0].isNull())\n         timeout = request.params[0].get_int();\n@@ -253,17 +258,18 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"Block hash to wait for.\"},\n                     {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n             \"  \\\"height\\\" : {     (int) Block height\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n             + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n-        );\n+                },\n+            }.ToString());\n     int timeout = 0;\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n@@ -298,17 +304,18 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                 {\n                     {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Block height to wait for.\"},\n                     {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n             \"  \\\"height\\\" : {     (int) Block height\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n             + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n-        );\n+                },\n+            }.ToString());\n     int timeout = 0;\n \n     int height = request.params[0].get_int();\n@@ -336,12 +343,14 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n-                \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\", {}}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n+                \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n     SyncWithValidationInterfaceQueue();\n     return NullUniValue;\n@@ -352,14 +361,16 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getdifficulty\",\n-                \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\",\n+                {},\n+                RPCResult{\n             \"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getdifficulty\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getdifficulty\", \"\")\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n     return GetDifficulty(chainActive.Tip());\n@@ -491,9 +502,8 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult: (for verbose = false):\\n\"\n+                },\n+                RPCResult{\"for verbose = false\",\n             \"[                     (json array of string)\\n\"\n             \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n             \"  ,...\\n\"\n@@ -504,10 +514,12 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n             + EntryDescriptionString()\n             + \"  }, ...\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"true\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getrawmempool\", \"true\")\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n-        );\n+                },\n+            }.ToString());\n \n     bool fVerbose = false;\n     if (!request.params[0].isNull())\n@@ -525,23 +537,27 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult (for verbose = false):\\n\"\n+                },\n+                {\n+                    RPCResult{\"for verbose = false\",\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n+                    },\n+                    RPCResult{\"for verbose = true\",\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             + EntryDescriptionString()\n             + \"  }, ...\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n-            );\n+                },\n+            }.ToString());\n     }\n \n     bool fVerbose = false;\n@@ -591,23 +607,27 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult (for verbose = false):\\n\"\n+                },\n+                {\n+                    RPCResult{\"for verbose = false\",\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n+                    },\n+                    RPCResult{\"for verbose = true\",\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             + EntryDescriptionString()\n             + \"  }, ...\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n-            );\n+                },\n+            }.ToString());\n     }\n \n     bool fVerbose = false;\n@@ -656,16 +676,17 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                           (json object)\\n\"\n             + EntryDescriptionString()\n             + \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -691,14 +712,15 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n                     {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The height index\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"hash\\\"         (string) The block hash\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockhash\", \"1000\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockhash\", \"1000\")\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -720,9 +742,9 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult (for verbose = true):\\n\"\n+                },\n+                {\n+                    RPCResult{\"for verbose = true\",\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n@@ -740,12 +762,16 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"}\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n+                    },\n+                    RPCResult{\"for verbose=false\",\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     uint256 hash(ParseHashV(request.params[0], \"hash\"));\n \n@@ -806,11 +832,12 @@ static UniValue getblock(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n                     {\"verbosity\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult (for verbosity = 0):\\n\"\n+                },\n+                {\n+                    RPCResult{\"for verbosity = 0\",\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nResult (for verbosity = 1):\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 1\",\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n@@ -835,18 +862,22 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n             \"}\\n\"\n-            \"\\nResult (for verbosity = 2):\\n\"\n+                    },\n+                    RPCResult{\"for verbosity = 2\",\n             \"{\\n\"\n             \"  ...,                     Same output as verbosity = 1.\\n\"\n             \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n             \"         ,...\\n\"\n             \"  ],\\n\"\n             \"  ,...                     Same output as verbosity = 1.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -957,13 +988,15 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n                 {\n                     {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"n    (numeric) Height of the last block pruned.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"pruneblockchain\", \"1000\")\n-            + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"pruneblockchain\", \"1000\")\n+            + HelpExampleRpc(\"pruneblockchain\", \"1000\")\n+                },\n+            }.ToString());\n \n     if (!fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n@@ -1007,9 +1040,8 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) The hash of the block at the tip of the chain\\n\"\n@@ -1020,10 +1052,12 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"disk_size\\\": n,         (numeric) The estimated size of the chainstate on disk\\n\"\n             \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gettxoutsetinfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"gettxoutsetinfo\", \"\")\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     UniValue ret(UniValue::VOBJ);\n \n@@ -1054,9 +1088,8 @@ UniValue gettxout(const JSONRPCRequest& request)\n                     {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                     {\"n\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"vout number\"},\n                     {\"include_mempool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"bestblock\\\":  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n@@ -1073,15 +1106,16 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"  },\\n\"\n             \"  \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nGet unspent transactions\\n\"\n             + HelpExampleCli(\"listunspent\", \"\") +\n             \"\\nView the details\\n\"\n             + HelpExampleCli(\"gettxout\", \"\\\"txid\\\" 1\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -1134,14 +1168,15 @@ static UniValue verifychain(const JSONRPCRequest& request)\n                 {\n                     {\"checklevel\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"true|false       (boolean) Verified or not\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"verifychain\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -1229,9 +1264,9 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getblockchaininfo\",\n-                \"Returns an object containing various state info regarding blockchain processing.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"Returns an object containing various state info regarding blockchain processing.\\n\",\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",              (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"blocks\\\": xxxxxx,             (numeric) the current number of blocks processed in the server\\n\"\n@@ -1274,10 +1309,12 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockchaininfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockchaininfo\", \"\")\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -1349,9 +1386,8 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n             RPCHelpMan{\"getchaintips\",\n                 \"Return information about all known tips in the block tree,\"\n                 \" including the main chain as well as orphaned branches.\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                {},\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n@@ -1372,10 +1408,12 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n             \"3.  \\\"valid-headers\\\"         All blocks are available for this branch, but they were never fully validated\\n\"\n             \"4.  \\\"valid-fork\\\"            This branch is not part of the active chain, but is fully validated\\n\"\n             \"5.  \\\"active\\\"                This is the tip of the active main chain, which is certainly valid\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getchaintips\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getchaintips\", \"\")\n             + HelpExampleRpc(\"getchaintips\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -1466,9 +1504,9 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getmempoolinfo\",\n-                \"\\nReturns details on the active state of the TX memory pool.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns details on the active state of the TX memory pool.\\n\",\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n@@ -1477,10 +1515,12 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n             \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n             \"  \\\"minrelaytxfee\\\": xxxxx       (numeric) Current minimum relay fee for transactions\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempoolinfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     return mempoolInfoToJSON();\n }\n@@ -1495,13 +1535,13 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                 \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as precious\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n@@ -1532,13 +1572,13 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as invalid\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n@@ -1573,13 +1613,13 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to reconsider\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n@@ -1612,9 +1652,8 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"one month\", \"Size of the window in number of blocks\"},\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"chain tip\", \"The hash of the block that ends the window.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n             \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n@@ -1624,10 +1663,12 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n             \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n             \"  \\\"txrate\\\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getchaintxstats\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getchaintxstats\", \"\")\n             + HelpExampleRpc(\"getchaintxstats\", \"2016\")\n-        );\n+                },\n+            }.ToString());\n \n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n@@ -1751,9 +1792,8 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                             {\"time\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n                         },\n                         \"stats\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n             \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n@@ -1791,10 +1831,12 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n             \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n             + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     LOCK(cs_main);\n@@ -2006,12 +2048,14 @@ static UniValue savemempool(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"savemempool\",\n-                \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\", {}}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"savemempool\", \"\")\n+                \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"savemempool\", \"\")\n             + HelpExampleRpc(\"savemempool\", \"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     if (!g_is_mempool_loaded) {\n@@ -2120,9 +2164,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                             },\n                         },\n                         \"[scanobjects,...]\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"unspents\\\": [\\n\"\n             \"    {\\n\"\n@@ -2136,6 +2179,9 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"   ,...], \\n\"\n             \" \\\"total_amount\\\" : x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n             \"]\\n\"\n+                },\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});"
      },
      {
        "sha": "200dfa107bfb0eba4392a80233708666618e50b6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 54,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -94,14 +94,15 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n                     {\"height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"-1\", \"To estimate at the time of the given height.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"x             (numeric) Hashes per second estimated\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnetworkhashps\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getnetworkhashps\", \"\")\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n-       );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n@@ -165,16 +166,17 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The address to send the newly generated bitcoin to.\"},\n                     {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nGenerate 11 blocks to myaddress\\n\"\n             + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n             + \"If you are running the bitcoin core wallet, you can get a new address to send the newly generated bitcoin to with:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n@@ -198,9 +200,9 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getmininginfo\",\n-                \"\\nReturns a json object containing mining-related information.\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns a json object containing mining-related information.\",\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n             \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n@@ -211,10 +213,12 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmininginfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n \n     LOCK(cs_main);\n@@ -247,14 +251,15 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"true              (boolean) Returns true\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -326,9 +331,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                                 },\n                         },\n                         \"\\\"template_request\\\"\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"version\\\" : n,                    (numeric) The preferred block version\\n\"\n             \"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],    (array of strings) specific block rules that are to be enforced\\n\"\n@@ -372,11 +376,12 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n             + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n-         );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -713,13 +718,13 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                 {\n                     {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block data to submit\"},\n                     {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n@@ -777,13 +782,15 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                 \"\\nThrows when the header is invalid.\\n\",\n                 {\n                     {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block header data\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"None\"\n-            \"\\nExamples:\\n\" +\n-            HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n-            HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\"));\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n+                    HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\")\n+                },\n+            }.ToString());\n     }\n \n     CBlockHeader h;\n@@ -826,9 +833,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n@@ -839,9 +845,11 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"fee estimation is able to return based on how long it has been running.\\n\"\n             \"An error is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatesmartfee\", \"6\")\n-            );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"estimatesmartfee\", \"6\")\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n@@ -886,9 +894,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                     {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n             \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n@@ -910,9 +917,11 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"}\\n\"\n             \"\\n\"\n             \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n-            );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);"
      },
      {
        "sha": "dc3745858b5ae3ba3c2c64015acb24525fad9af1",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 40,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -40,9 +40,8 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                 \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to validate\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n@@ -52,10 +51,12 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n             \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n@@ -91,20 +92,20 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                             {\"key\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n                         }},\n                     {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nCreate a multisig address from 2 public keys\\n\"\n             + HelpExampleCli(\"createmultisig\", \"2 \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n-        ;\n+                },\n+            }.ToString();\n         throw std::runtime_error(msg);\n     }\n \n@@ -151,11 +152,11 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the signature.\"},\n                     {\"signature\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n                     {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message that was signed.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"true|false   (boolean) If the signature is verified or not.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n             \"\\nCreate the signature\\n\"\n@@ -164,7 +165,8 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n \n@@ -208,18 +210,19 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n                 {\n                     {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key to sign the message with.\"},\n                     {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nCreate the signature\\n\"\n             + HelpExampleCli(\"signmessagewithprivkey\", \"\\\"privkey\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n             + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n@@ -249,8 +252,10 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n                 {\n                     {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Unix seconds-since-epoch timestamp\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n-                }}\n-                .ToString()\n+                },\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n \n     if (!Params().MineBlocksOnDemand())\n@@ -314,9 +319,9 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n                     {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n             \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult (mode \\\"stats\\\"):\\n\"\n+                },\n+                {\n+                    RPCResult{\"mode \\\"stats\\\"\",\n             \"{\\n\"\n             \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n             \"    \\\"used\\\": xxxxx,          (numeric) Number of bytes used\\n\"\n@@ -327,12 +332,16 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n             \"    \\\"chunks_free\\\": xxxxx,   (numeric) Number unused chunks\\n\"\n             \"  }\\n\"\n             \"}\\n\"\n-            \"\\nResult (mode \\\"mallocinfo\\\"):\\n\"\n+                    },\n+                    RPCResult{\"mode \\\"mallocinfo\\\"\",\n             \"\\\"<malloc version=\\\"1\\\">...\\\"\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmemoryinfo\", \"\")\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getmemoryinfo\", \"\")\n             + HelpExampleRpc(\"getmemoryinfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n@@ -392,17 +401,18 @@ UniValue logging(const JSONRPCRequest& request)\n                         {\n                             {\"exclude_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n                         }},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n             \"  \\\"category\\\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\\n\"\n             \"  ...\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], \\\"[libevent]\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     uint32_t original_log_categories = g_logger->GetCategoryMask();\n@@ -446,9 +456,11 @@ static UniValue echo(const JSONRPCRequest& request)\n                 \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n                 \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in \"\n                 \"bitcoin-cli and the GUI. There is no server-side difference.\",\n-                {}}\n-                .ToString() +\n-            \"\");\n+                {},\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString()\n+        );\n \n     return request.params;\n }"
      },
      {
        "sha": "b50038b085f97a28eddee9f43854e31124a9c19c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 68,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -30,14 +30,16 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getconnectioncount\",\n-                \"\\nReturns the number of connections to other nodes.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns the number of connections to other nodes.\\n\",\n+                {},\n+                RPCResult{\n             \"n          (numeric) The connection count\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getconnectioncount\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getconnectioncount\", \"\")\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -53,12 +55,13 @@ static UniValue ping(const JSONRPCRequest& request)\n                 \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n                 \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n                 \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"ping\", \"\")\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -75,9 +78,9 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+                {},\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n@@ -124,10 +127,12 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getpeerinfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getpeerinfo\", \"\")\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -218,12 +223,13 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 {\n                     {\"node\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The node (see getpeerinfo for nodes)\"},\n                     {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n             + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -262,14 +268,15 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n                     {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n-        );\n+                },\n+            }.ToString());\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -305,9 +312,8 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n                     {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node IP address or name (as provided to addnode)\\n\"\n@@ -321,10 +327,12 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n             + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -372,9 +380,8 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n             RPCHelpMan{\"getnettotals\",\n                 \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n                 \"and current time.\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n             \"  \\\"totalbytessent\\\": n,   (numeric) Total bytes sent\\n\"\n@@ -389,10 +396,12 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n             \"    \\\"time_left_in_cycle\\\": t                 (numeric) Seconds left in current time cycle\\n\"\n             \"  }\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnettotals\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getnettotals\", \"\")\n             + HelpExampleRpc(\"getnettotals\", \"\")\n-       );\n+                },\n+            }.ToString());\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -438,9 +447,9 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getnetworkinfo\",\n-                \"Returns an object containing various state info regarding P2P networking.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"Returns an object containing various state info regarding P2P networking.\\n\",\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"version\\\": xxxxx,                      (numeric) the server version\\n\"\n             \"  \\\"subversion\\\": \\\"/Satoshi:x.x.x/\\\",     (string) the server subversion string\\n\"\n@@ -472,10 +481,12 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  ]\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network and blockchain warnings\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnetworkinfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getnetworkinfo\", \"\")\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n@@ -525,13 +536,14 @@ static UniValue setban(const JSONRPCRequest& request)\n                     {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n                     {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n                     {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n-                }}\n-                .ToString() +\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n-                            );\n+                },\n+            }.ToString());\n     if (!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -594,12 +606,14 @@ static UniValue listbanned(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"listbanned\",\n-                \"\\nList all banned IPs/Subnets.\\n\", {}}\n-                .ToString() +\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"listbanned\", \"\")\n+                \"\\nList all banned IPs/Subnets.\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n-                            );\n+                },\n+            }.ToString());\n \n     if(!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n@@ -629,12 +643,14 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"clearbanned\",\n-                \"\\nClear all banned IPs.\\n\", {}}\n-                .ToString() +\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"clearbanned\", \"\")\n+                \"\\nClear all banned IPs.\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n-                            );\n+                },\n+            }.ToString());\n     if (!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -652,8 +668,10 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n                     {\"state\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"true to enable networking, false to disable\"},\n-                }}\n-                .ToString()\n+                },\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n     }\n \n@@ -674,9 +692,8 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n                     {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"time\\\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\\n\"\n@@ -686,10 +703,12 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,....\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnodeaddresses\", \"8\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getnodeaddresses\", \"8\")\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n-        );\n+                },\n+            }.ToString());\n     }\n     if (!g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");"
      },
      {
        "sha": "68e3fcda33a943e60a9468aeb6d03f216dc2b007",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 90,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -82,12 +82,12 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"The block in which to look for the transaction\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult (if verbose is not set or set to false):\\n\"\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n             \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n-\n-            \"\\nResult (if verbose is set to true):\\n\"\n+                     },\n+                     RPCResult{\"if verbose is set to true\",\n             \"{\\n\"\n             \"  \\\"in_active_chain\\\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n@@ -133,14 +133,16 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"time\\\" : ttt,             (numeric) Same as \\\"blocktime\\\"\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -219,10 +221,12 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                         },\n                         },\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"If specified, looks for txid in the block with this hash\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n+                },\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n \n     std::set<uint256> setTxids;\n@@ -305,10 +309,12 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n                 {\n                     {\"proof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded proof generated by gettxoutproof\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n+                },\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n \n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -494,17 +500,17 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                     {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     RPCTypeCheck(request.params, {\n@@ -530,9 +536,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n             \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n@@ -572,11 +577,12 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n@@ -603,9 +609,8 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded script\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"asm\\\":\\\"asm\\\",   (string) Script public key\\n\"\n             \"  \\\"hex\\\":\\\"hex\\\",   (string) hex-encoded public key\\n\"\n@@ -617,10 +622,12 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"p2sh\\\",\\\"address\\\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -706,14 +713,14 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                             {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n                         },\n                         },\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"hex\\\"            (string) The hex-encoded raw transaction with signature(s)\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"combinerawtransaction\", \"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")\n-        );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"combinerawtransaction\", \"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")\n+                },\n+            }.ToString());\n \n \n     UniValue txs = request.params[0].get_array();\n@@ -953,9 +960,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n                     },\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n             \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n@@ -970,11 +976,12 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n             \"    ,...\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n \n@@ -1015,11 +1022,11 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n                     {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nCreate a transaction\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n             \"Sign the transaction, and get back the hex\\n\"\n@@ -1028,7 +1035,8 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     std::promise<void> promise;\n \n@@ -1118,9 +1126,8 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                         },\n                         },\n                     {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n             \"                            Length is exactly one for now.\\n\"\n             \" {\\n\"\n@@ -1129,7 +1136,8 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             \"  \\\"reject-reason\\\"  (string) Rejection string (only present when 'allowed' is false)\\n\"\n             \" }\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nCreate a transaction\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n             \"Sign the transaction, and get back the hex\\n\"\n@@ -1138,7 +1146,8 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             + HelpExampleCli(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n-            );\n+                },\n+            }.ToString());\n     }\n \n     RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VBOOL});\n@@ -1212,9 +1221,8 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n                     {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The PSBT base64 string\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"tx\\\" : {                   (json object) The decoded network-serialized unsigned transaction.\\n\"\n             \"    ...                                      The layout is the same as the output of decoderawtransaction.\\n\"\n@@ -1301,10 +1309,11 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             \"  ]\\n\"\n             \"  \\\"fee\\\" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n-    );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -1492,13 +1501,14 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                             {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n                         },\n                         },\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"combinepsbt\", \"[\\\"mybase64_1\\\", \\\"mybase64_2\\\", \\\"mybase64_3\\\"]\")\n-        );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"combinepsbt\", \"[\\\"mybase64_1\\\", \\\"mybase64_2\\\", \\\"mybase64_3\\\"]\")\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n@@ -1546,19 +1556,19 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                     {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n                     {\"extract\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"If true and the transaction is complete,\\n\"\n             \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction if not extracted\\n\"\n             \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded network transaction if extracted\\n\"\n             \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n-        );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL}, true);\n \n@@ -1637,13 +1647,14 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                     {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n-                }}\n-                .ToString() +\n-                            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-                            );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+                },\n+            }.ToString());\n \n \n     RPCTypeCheck(request.params, {\n@@ -1688,16 +1699,17 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n                             \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n                             \"                              permitsigdata is true.\"},\n-                }}\n-                .ToString() +\n-                            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n-                            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n                             \"\\nCreate a transaction\\n\"\n                             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\") +\n                             \"\\nConvert the transaction to a PSBT\\n\"\n                             + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n-                            );\n+                },\n+            }.ToString());\n \n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);"
      },
      {
        "sha": "6b31a1b016d92b32edade3a8249c46c234da4dd1",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 13,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -231,10 +231,12 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n                     {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all commands\", \"The command to get help on\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"text\\\"     (string) The help text\\n\"\n+                },\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n \n     std::string strCommand;\n@@ -254,8 +256,11 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"stop\",\n-                \"\\nStop Bitcoin server.\", {}}\n-                .ToString());\n+                \"\\nStop Bitcoin server.\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString());\n     // Event loop will exit after current HTTP requests have been handled, so\n     // this reply will get back to the client.\n     StartShutdown();\n@@ -270,14 +275,16 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"uptime\",\n-                \"\\nReturns the total uptime of the server.\\n\", {}}\n-                .ToString() +\n-                        \"\\nResult:\\n\"\n+                \"\\nReturns the total uptime of the server.\\n\",\n+                            {},\n+                            RPCResult{\n                         \"ttt        (numeric) The number of seconds that the server has been running\\n\"\n-                        \"\\nExamples:\\n\"\n-                + HelpExampleCli(\"uptime\", \"\")\n+                            },\n+                RPCExamples{\n+                    HelpExampleCli(\"uptime\", \"\")\n                 + HelpExampleRpc(\"uptime\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     return GetTime() - GetStartupTime();\n }\n@@ -287,8 +294,11 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"getrpcinfo\",\n-                \"\\nReturns details of the RPC server.\\n\", {}}\n-                .ToString()\n+                \"\\nReturns details of the RPC server.\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n     }\n "
      },
      {
        "sha": "4275cc09a80201533c4166417c277ba787c5b51f",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 2,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -242,8 +242,12 @@ struct Sections {\n     }\n };\n \n-RPCHelpMan::RPCHelpMan(const std::string& name, const std::string& description, const std::vector<RPCArg>& args)\n-    : m_name{name}, m_description{description}, m_args{args}\n+RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples)\n+    : m_name{std::move(name)},\n+      m_description{std::move(description)},\n+      m_args{std::move(args)},\n+      m_results{std::move(results)},\n+      m_examples{std::move(examples)}\n {\n     std::set<std::string> named_args;\n     for (const auto& arg : m_args) {\n@@ -252,6 +256,25 @@ RPCHelpMan::RPCHelpMan(const std::string& name, const std::string& description,\n     }\n }\n \n+std::string RPCResults::ToDescriptionString() const\n+{\n+    std::string result;\n+    for (const auto& r : m_results) {\n+        if (r.m_cond.empty()) {\n+            result += \"\\nResult:\\n\";\n+        } else {\n+            result += \"\\nResult (\" + r.m_cond + \"):\\n\";\n+        }\n+        result += r.m_result;\n+    }\n+    return result;\n+}\n+\n+std::string RPCExamples::ToDescriptionString() const\n+{\n+    return m_examples.empty() ? m_examples : \"\\nExamples:\\n\" + m_examples;\n+}\n+\n std::string RPCHelpMan::ToString() const\n {\n     std::string ret;\n@@ -292,6 +315,12 @@ std::string RPCHelpMan::ToString() const\n     }\n     ret += sections.ToString();\n \n+    // Result\n+    ret += m_results.ToDescriptionString();\n+\n+    // Examples\n+    ret += m_examples.ToDescriptionString();\n+\n     return ret;\n }\n "
      },
      {
        "sha": "4a9d4be787027c7c873cc9489d52cddfba818a38",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -106,17 +106,71 @@ struct RPCArg {\n     std::string ToDescriptionString(bool implicitly_required = false) const;\n };\n \n+struct RPCResult {\n+    const std::string m_cond;\n+    const std::string m_result;\n+\n+    explicit RPCResult(std::string result)\n+        : m_cond{}, m_result{std::move(result)}\n+    {\n+        assert(!m_result.empty());\n+    }\n+\n+    RPCResult(std::string cond, std::string result)\n+        : m_cond{std::move(cond)}, m_result{std::move(result)}\n+    {\n+        assert(!m_cond.empty());\n+        assert(!m_result.empty());\n+    }\n+};\n+\n+struct RPCResults {\n+    const std::vector<RPCResult> m_results;\n+\n+    RPCResults()\n+        : m_results{}\n+    {\n+    }\n+\n+    RPCResults(RPCResult result)\n+        : m_results{{result}}\n+    {\n+    }\n+\n+    RPCResults(std::initializer_list<RPCResult> results)\n+        : m_results{results}\n+    {\n+    }\n+\n+    /**\n+     * Return the description string.\n+     */\n+    std::string ToDescriptionString() const;\n+};\n+\n+struct RPCExamples {\n+    const std::string m_examples;\n+    RPCExamples(\n+        std::string examples)\n+        : m_examples(std::move(examples))\n+    {\n+    }\n+    std::string ToDescriptionString() const;\n+};\n+\n class RPCHelpMan\n {\n public:\n-    RPCHelpMan(const std::string& name, const std::string& description, const std::vector<RPCArg>& args);\n+    RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples);\n \n     std::string ToString() const;\n \n private:\n     const std::string m_name;\n     const std::string m_description;\n     const std::vector<RPCArg> m_args;\n+    const RPCResults m_results;\n+    const RPCExamples m_examples;\n };\n \n #endif // BITCOIN_RPC_UTIL_H"
      },
      {
        "sha": "7da92ca2264d7032d528c4dedb0476696d01ba33",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 62,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -111,16 +111,16 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"importprivkey\",\n                 \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n-                \"Hint: use importmulti to import more than one private key.\\n\",\n+                \"Hint: use importmulti to import more than one private key.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n                     {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key (see dumpprivkey)\"},\n                     {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n                     {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n-                }}\n-                .ToString() +\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nDump a private key\\n\"\n             + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\") +\n             \"\\nImport the private key with rescan\\n\"\n@@ -131,7 +131,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n-        );\n+                },\n+            }.ToString());\n \n \n     WalletRescanReserver reserver(pwallet);\n@@ -209,16 +210,18 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"abortrescan\",\n-                \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\", {}}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n+                \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nImport a private key\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n             \"\\nAbort the running wallet rescan\\n\"\n             + HelpExampleCli(\"abortrescan\", \"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"abortrescan\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     if (!pwallet->IsScanning() || pwallet->IsAbortingRescan()) return false;\n     pwallet->AbortRescan();\n@@ -272,27 +275,28 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n             RPCHelpMan{\"importaddress\",\n-                \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\",\n+                \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n+            \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n+            \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n+            \"as change, and not show up in many RPCs.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The Bitcoin address (or hex-encoded script)\"},\n                     {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n                     {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n                     {\"p2sh\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Add the P2SH version of the script as well\"},\n-                }}\n-                .ToString() +\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n-            \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n-            \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n-            \"as change, and not show up in many RPCs.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nImport an address with rescan\\n\"\n             + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n             + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\" \\\"testing\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n-        );\n+                },\n+            }.ToString());\n \n \n     std::string strLabel;\n@@ -358,8 +362,10 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n                 {\n                     {\"rawtransaction\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A raw transaction in hex funding an already-existing address in wallet\"},\n                     {\"txoutproof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex output from gettxoutproof that contains the transaction\"},\n-                }}\n-                .ToString()\n+                },\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString()\n         );\n \n     CMutableTransaction tx;\n@@ -423,13 +429,14 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded id of the transaction you are deleting\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -461,23 +468,24 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n             RPCHelpMan{\"importpubkey\",\n-                \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\",\n+                \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n                     {\"pubkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n                     {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n                     {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n-                }}\n-                .ToString() +\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nImport a public key with rescan\\n\"\n             + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n             + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n-        );\n+                },\n+            }.ToString());\n \n \n     std::string strLabel;\n@@ -538,16 +546,17 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet file\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nDump the wallet\\n\"\n             + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\") +\n             \"\\nImport the wallet\\n\"\n             + HelpExampleCli(\"importwallet\", \"\\\"test\\\"\") +\n             \"\\nImport using the json rpc call\\n\"\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n@@ -671,15 +680,16 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 \"Then the importprivkey can be used with this output\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for the private key\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"key\\\"                (string) The private key\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\")\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -720,16 +730,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The filename with path (either absolute or relative to bitcoind)\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"filename\\\" : {        (string) The filename with full absolute path\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -1150,7 +1161,9 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             RPCHelpMan{\"importmulti\",\n                 \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\\n\"\n                 \"If an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\\n\"\n-                \"Conversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.\\n\",\n+                \"Conversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n                 {\n                     {\"requests\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Data to be imported\",\n                         {\n@@ -1191,17 +1204,18 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                             {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },\n                         \"\\\"options\\\"\"},\n-                }}\n-                .ToString() +\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\"\n-            \"\\nExamples:\\n\" +\n-            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n-                                          \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n-            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\") +\n-\n+                },\n+                RPCResult{\n             \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n-            \"  [{\\\"success\\\": true}, {\\\"success\\\": true, \\\"warnings\\\": [\\\"Ignoring irrelevant private key\\\"]}, {\\\"success\\\": false, \\\"error\\\": {\\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"}}, ...]\\n\");\n+            \"  [{\\\"success\\\": true}, {\\\"success\\\": true, \\\"warnings\\\": [\\\"Ignoring irrelevant private key\\\"]}, {\\\"success\\\": false, \\\"error\\\": {\\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"}}, ...]\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n+                                          \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+                    HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\")\n+                },\n+            }.ToString()\n+        );\n \n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});"
      },
      {
        "sha": "4529e39124d7ec93594b61659b1d0518bfb94597",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 300,
        "deletions": 255,
        "changes": 555,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -157,14 +157,15 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 {\n                     {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n                     {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnewaddress\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getnewaddress\", \"\")\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n@@ -217,14 +218,15 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n                     {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"address\\\"    (string) The address\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getrawchangeaddress\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getrawchangeaddress\", \"\")\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n-       );\n+                },\n+            }.ToString());\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n@@ -273,12 +275,13 @@ static UniValue setlabel(const JSONRPCRequest& request)\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to be associated with a label.\"},\n                     {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label to assign to the address.\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -369,16 +372,17 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -446,9 +450,8 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n                 \"\\nLists groups of addresses which have had their common ownership\\n\"\n                 \"made public by common use as inputs or as the resulting change\\n\"\n                 \"in past transactions\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                {},\n+                RPCResult{\n             \"[\\n\"\n             \"  [\\n\"\n             \"    [\\n\"\n@@ -460,10 +463,12 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n             \"  ]\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"listaddressgroupings\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listaddressgroupings\", \"\")\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -510,11 +515,11 @@ static UniValue signmessage(const JSONRPCRequest& request)\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the private key.\"},\n                     {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n             \"\\nCreate the signature\\n\"\n@@ -523,7 +528,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n             + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -575,11 +581,11 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for transactions.\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\") +\n             \"\\nThe amount including unconfirmed transactions, zero confirmations\\n\"\n@@ -588,7 +594,8 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 6\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", 6\")\n-       );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -646,11 +653,11 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n                 {\n                     {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The selected label, may be the default label using \\\"\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this label.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nAmount received by the default label with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbylabel\", \"\\\"\\\"\") +\n             \"\\nAmount received at the tabby label including unconfirmed amounts with zero confirmations\\n\"\n@@ -659,7 +666,8 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 6\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -718,18 +726,19 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                     {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n             \"\\nThe total amount in the wallet at least 6 blocks confirmed\\n\"\n             + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -768,8 +777,11 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getunconfirmedbalance\",\n-                \"Returns the server's total unconfirmed balance\\n\", {}}\n-                .ToString());\n+                \"Returns the server's total unconfirmed balance\\n\",\n+                {},\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -819,12 +831,12 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n-                }}\n-                .ToString() +\n-             \"\\nResult:\\n\"\n+                },\n+                 RPCResult{\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n-            \"\\nExamples:\\n\"\n+                 },\n+                RPCExamples{\n             \"\\nSend two amounts to two different addresses:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n@@ -833,7 +845,8 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -964,19 +977,20 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                         },\n                     {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A label to assign the addresses to.\"},\n                     {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n-        ;\n+                },\n+            }.ToString();\n         throw std::runtime_error(msg);\n     }\n \n@@ -1193,9 +1207,8 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                     {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n                     {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If present, only return information on this address.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n@@ -1210,13 +1223,14 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"listreceivedbyaddress\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listreceivedbyaddress\", \"\")\n             + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1245,9 +1259,8 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n                     {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,   (bool) Only returned if imported addresses were involved in transaction\\n\"\n@@ -1257,12 +1270,13 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"listreceivedbylabel\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listreceivedbylabel\", \"\")\n             + HelpExampleCli(\"listreceivedbylabel\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbylabel\", \"6, true, true\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1388,9 +1402,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                     {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"10\", \"The number of transactions to return\"},\n                     {\"skip\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"The number of transactions to skip\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n@@ -1422,15 +1435,16 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"                                         'send' category of transactions.\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n-\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nList the most recent 10 transactions in the systems\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\") +\n             \"\\nList transactions 100 to 120\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1523,9 +1537,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                     {\"include_removed\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n             \"                                                           (not guaranteed to work on pruned nodes)\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n@@ -1560,11 +1573,13 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"lastblock\\\": \\\"lastblockhash\\\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"listsinceblock\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listsinceblock\", \"\")\n             + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1665,9 +1680,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"fee\\\": x.xxx,            (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n@@ -1702,12 +1716,13 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\"         (string) Raw data for transaction\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" true\")\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1770,13 +1785,13 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 \"It has no effect on transactions which are already abandoned.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1814,12 +1829,13 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n                     {\"destination\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The destination directory or file\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1853,12 +1869,13 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n                     {\"newsize\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"100\", \"The new keypool size\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"keypoolrefill\", \"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n@@ -1899,23 +1916,24 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"walletpassphrase\",\n                 \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n-                \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\",\n+                \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n+            \"\\nNote:\\n\"\n+            \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n+            \"time that overrides the old one.\\n\",\n                 {\n                     {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet passphrase\"},\n                     {\"timeout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n-                }}\n-                .ToString() +\n-            \"\\nNote:\\n\"\n-            \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n-            \"time that overrides the old one.\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nUnlock the wallet for 60 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +\n             \"\\nLock the wallet again (before 60 seconds)\\n\"\n             + HelpExampleCli(\"walletlock\", \"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n@@ -1988,12 +2006,13 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n                 {\n                     {\"oldpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The current passphrase\"},\n                     {\"newpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The new passphrase\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n@@ -2040,9 +2059,9 @@ static UniValue walletlock(const JSONRPCRequest& request)\n                 \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n                 \"After calling this method, you will need to call walletpassphrase again\\n\"\n                 \"before being able to call any methods which require the wallet to be unlocked.\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n+                {},\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nSet the passphrase for 2 minutes to perform a transaction\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 120\") +\n             \"\\nPerform a send (requires passphrase set)\\n\"\n@@ -2051,7 +2070,8 @@ static UniValue walletlock(const JSONRPCRequest& request)\n             + HelpExampleCli(\"walletlock\", \"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletlock\", \"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n@@ -2087,9 +2107,9 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\",\n                 {\n                     {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCResults{},\n+                RPCExamples{\n             \"\\nEncrypt your wallet\\n\"\n             + HelpExampleCli(\"encryptwallet\", \"\\\"my pass phrase\\\"\") +\n             \"\\nNow set the passphrase to use the wallet, such as for signing or sending bitcoin\\n\"\n@@ -2100,7 +2120,8 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n             + HelpExampleCli(\"walletlock\", \"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n@@ -2158,12 +2179,11 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                             },\n                         },\n                     },\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"true|false    (boolean) Whether the command was successful or not\\n\"\n-\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nList the unspent transactions\\n\"\n             + HelpExampleCli(\"listunspent\", \"\") +\n             \"\\nLock an unspent transaction\\n\"\n@@ -2174,7 +2194,8 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -2270,17 +2291,17 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlockunspent\",\n                 \"\\nReturns list of temporarily unspendable outputs.\\n\"\n                 \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                {},\n+                RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"txid\\\" : \\\"transactionid\\\",     (string) The transaction id locked\\n\"\n             \"    \\\"vout\\\" : n                      (numeric) The vout value\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nList the unspent transactions\\n\"\n             + HelpExampleCli(\"listunspent\", \"\") +\n             \"\\nLock an unspent transaction\\n\"\n@@ -2291,7 +2312,8 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2327,14 +2349,15 @@ static UniValue settxfee(const JSONRPCRequest& request)\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n                     {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult\\n\"\n+                },\n+                RPCResult{\n             \"true|false        (boolean) Returns true if successful\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"settxfee\", \"0.00001\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"settxfee\", \"0.00001\")\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n@@ -2366,9 +2389,9 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"getwalletinfo\",\n-                \"Returns an object containing various wallet state info.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"Returns an object containing various wallet state info.\\n\",\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"walletname\\\": xxxxx,               (string) the wallet name\\n\"\n             \"  \\\"walletversion\\\": xxxxx,            (numeric) the wallet version\\n\"\n@@ -2385,10 +2408,12 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getwalletinfo\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getwalletinfo\", \"\")\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -2429,8 +2454,9 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"listwalletdir\",\n-                \"Returns a list of wallets in the wallet directory.\\n\", {}}\n-                .ToString() +\n+                \"Returns a list of wallets in the wallet directory.\\n\",\n+                {},\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"wallets\\\" : [                (json array of objects)\\n\"\n             \"    {\\n\"\n@@ -2439,10 +2465,12 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n             \"    ,...\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"listwalletdir\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listwalletdir\", \"\")\n             + HelpExampleRpc(\"listwalletdir\", \"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     UniValue wallets(UniValue::VARR);\n@@ -2464,17 +2492,18 @@ static UniValue listwallets(const JSONRPCRequest& request)\n             RPCHelpMan{\"listwallets\",\n                 \"Returns a list of currently loaded wallets.\\n\"\n                 \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\",\n-                {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                {},\n+                RPCResult{\n             \"[                         (json array of strings)\\n\"\n             \"  \\\"walletname\\\"            (string) the wallet name\\n\"\n             \"   ...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"listwallets\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listwallets\", \"\")\n             + HelpExampleRpc(\"listwallets\", \"\")\n-        );\n+                },\n+            }.ToString());\n \n     UniValue obj(UniValue::VARR);\n \n@@ -2501,17 +2530,18 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet directory or .dat file.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if loaded successfully.\\n\"\n             \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n             + HelpExampleRpc(\"loadwallet\", \"\\\"test.dat\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     WalletLocation location(request.params[0].get_str());\n     std::string error;\n@@ -2555,17 +2585,18 @@ static UniValue createwallet(const JSONRPCRequest& request)\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n                     {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\\n\"\n             \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n             + HelpExampleRpc(\"createwallet\", \"\\\"testwallet\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n     std::string error;\n     std::string warning;\n@@ -2609,12 +2640,13 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n             + HelpExampleRpc(\"unloadwallet\", \"wallet_name\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     std::string wallet_name;\n@@ -2656,12 +2688,15 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"resendwallettransactions\",\n                 \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n-                \"Intended only for testing; the wallet code periodically re-broadcasts\\n\",\n-                {}}\n-                .ToString() +\n-            \"automatically.\\n\"\n+                \"Intended only for testing; the wallet code periodically re-broadcasts\\n\"\n+                \"automatically.\\n\",\n+                {},\n+                RPCResult{\n             \"Returns an RPC error if -walletbroadcast is set to false.\\n\"\n             \"Returns array of transaction ids that were re-broadcast.\\n\"\n+                },\n+                 RPCExamples{\"\"},\n+             }.ToString()\n             );\n \n     if (!g_connman)\n@@ -2716,9 +2751,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                             {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n                         },\n                         \"query_options\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult\\n\"\n+                },\n+                RPCResult{\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n             \"    \\\"txid\\\" : \\\"txid\\\",          (string) the transaction id \\n\"\n@@ -2738,14 +2772,15 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-\n-            \"\\nExamples\\n\"\n-            + HelpExampleCli(\"listunspent\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listunspent\", \"\")\n             + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n             + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n-        );\n+                },\n+            }.ToString());\n \n     int nMinDepth = 1;\n     if (!request.params[0].isNull()) {\n@@ -3028,15 +3063,15 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                         \"options\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n-                }}\n-                .ToString() +\n-                            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n                             \"  \\\"fee\\\":       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n                             \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n-                            \"\\nExamples:\\n\"\n+                                },\n+                                RPCExamples{\n                             \"\\nCreate a transaction with no inputs\\n\"\n                             + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n                             \"\\nAdd sufficient unsigned inputs to meet the output value\\n\"\n@@ -3045,7 +3080,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"signrawtransaction\", \"\\\"fundedtransactionhex\\\"\") +\n                             \"\\nSend the transaction\\n\"\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n-                            );\n+                                },\n+                            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n \n@@ -3107,9 +3143,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n             \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n@@ -3124,11 +3159,12 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n             \"    ,...\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n \n@@ -3190,18 +3226,20 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n             \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n             \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n             \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n-            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+                    HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                },\n+            }.ToString());\n     }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n@@ -3316,14 +3354,15 @@ UniValue generate(const JSONRPCRequest& request)\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n                     {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nGenerate 11 blocks\\n\"\n             + HelpExampleCli(\"generate\", \"11\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     if (!IsDeprecatedRPCEnabled(\"generate\")) {\n@@ -3370,17 +3409,18 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                 {\n                     {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"block height where the rescan should start\"},\n                     {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"tip height\", \"the last block height that should be scanned\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"start_height\\\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.\\n\"\n             \"  \\\"stop_height\\\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n             + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n-            );\n+                },\n+            }.ToString());\n     }\n \n     WalletRescanReserver reserver(pwallet);\n@@ -3579,9 +3619,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                 \"to be in the wallet.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to get the information of.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n@@ -3618,10 +3657,12 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"      },...\\n\"\n             \"    ]\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     LOCK(pwallet->cs_wallet);\n@@ -3705,18 +3746,19 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n                     {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{ (json object with addresses as keys)\\n\"\n             \"  \\\"address\\\": { (json object with information about address)\\n\"\n             \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n             \"  },...\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n             + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -3752,14 +3794,14 @@ static UniValue listlabels(const JSONRPCRequest& request)\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n                     {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"[               (json array of string)\\n\"\n             \"  \\\"label\\\",      (string) Label name\\n\"\n             \"  ...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n+                },\n+                RPCExamples{\n             \"\\nList all labels\\n\"\n             + HelpExampleCli(\"listlabels\", \"\") +\n             \"\\nList labels that have receiving addresses\\n\"\n@@ -3768,7 +3810,8 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listlabels\", \"send\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlabels\", \"receive\")\n-        );\n+                },\n+            }.ToString());\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -3816,14 +3859,15 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             \"                             keypool will be used until it has been depleted.\"},\n                     {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n             \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n-                }}\n-                .ToString() +\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"sethdseed\", \"\")\n+                },\n+                RPCResults{},\n+                RPCExamples{\n+                    HelpExampleCli(\"sethdseed\", \"\")\n             + HelpExampleCli(\"sethdseed\", \"false\")\n             + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n             + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n-            );\n+                },\n+            }.ToString());\n     }\n \n     if (IsInitialBlockDownload()) {\n@@ -3960,18 +4004,18 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n             \"{\\n\"\n             \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction\\n\"\n             \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n-        );\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n+                },\n+            }.ToString());\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n \n@@ -4069,18 +4113,19 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                         },\n                         \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n-                }}\n-                .ToString() +\n-                            \"\\nResult:\\n\"\n+                },\n+                RPCResult{\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n                             \"  \\\"fee\\\":       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n                             \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n-                            \"\\nExamples:\\n\"\n+                                },\n+                                RPCExamples{\n                             \"\\nCreate a transaction with no inputs\\n\"\n                             + HelpExampleCli(\"walletcreatefundedpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-                            );\n+                                },\n+                            }.ToString());\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,"
      },
      {
        "sha": "a34968ef7dd7c1d337ff872878c25a69dc674dfb",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=faa1522e5ec5ec53b2b2b1ed36c11e84939bbb13",
        "patch": "@@ -18,9 +18,9 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"getzmqnotifications\",\n-                \"\\nReturns information about the active ZeroMQ notifications.\\n\", {}}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n+                \"\\nReturns information about the active ZeroMQ notifications.\\n\",\n+                {},\n+                RPCResult{\n             \"[\\n\"\n             \"  {                        (json object)\\n\"\n             \"    \\\"type\\\": \\\"pubhashtx\\\",   (string) Type of notification\\n\"\n@@ -29,10 +29,12 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n             \"  },\\n\"\n             \"  ...\\n\"\n             \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getzmqnotifications\", \"\")\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getzmqnotifications\", \"\")\n             + HelpExampleRpc(\"getzmqnotifications\", \"\")\n-        );\n+                },\n+            }.ToString());\n     }\n \n     UniValue result(UniValue::VARR);"
      }
    ]
  }
]