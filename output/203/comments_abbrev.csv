CAFxX,2011-05-08T20:00:58Z,"I see you took into consideration the issue of the password/key being swapped out but didn't actually write any code to prevent it. You should use mlock (unix) or VirtualLock (windows) to prevent memory from being swapped (the correct way of doing this is: allocate, mlock/VirtualLock, use the memory, when done overwrite it (random data is better than 0s), deallocate). Note: this still won't protec",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1120096,1120096,
TheBlueMatt,2011-05-08T20:05:58Z,"Yea the whole ramdump to see password/key is pretty much impossible to prevent no matter what you do, so I'm really not going to try to fight it.  Though, I'm planning to add more security to the encryption later, but having it now really isn't worth it for several reasons (see the original forum thread by jgarzik linked by the one about this pull).\n",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1120108,1120108,
TheBlueMatt,2011-05-08T20:36:58Z,"As a side note, preventing any kind of key leakage is pretty much impossible in C++ when the user is entering the key in wx.  If nothing else, the current value of the password dialog might end up in swap.  I'll try to add a bunch of memlock's and memset/fills tomorrow but I don't think its possible for it to be 100%.\n",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1120196,1120196,
CAFxX,2011-05-09T05:51:51Z,"I guess so, unless we also patch wx in the process.\n",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1121346,1121346,
TheBlueMatt,2011-05-09T10:23:15Z,"Now with more mlock().  Note I made a conscious decision here that I only bother to keep the actual password entered by the user out of memory/swap as much as possible, not the derived key or the private keys themselves.  I have a separate branch which encrypts private keys in memory (much easier than not loading until needed in the current architecture) but still keeps the key to decrypt them in ",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1122111,1122111,
TheBlueMatt,2011-05-09T10:24:49Z,"Note that any password longer than 100 characters will only have the first 100 mlock()d, but if you can't derive the key without all of the password, so I'm not concerned.\n",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1122114,1122114,
CAFxX,2011-05-09T10:33:07Z,maybe adding some comments about this might help (eventually also mentioning that currently there's no way to stop another process from peeking and that we don't deal with hibernate-to-disk)\n,https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1122137,1122137,
TheBlueMatt,2011-05-10T08:32:59Z,"Now with more comments to clarify the purpose of mlock()s and such.  \nNow the question: I have a WIP branch which decrypts private keys only at spend-time (or it will in a couple days).  Still a couple things to tighten down, but the question is which would rather be seen in bitcoin?\nhttps://github.com/TheBlueMatt/bitcoin/tree/encprivkeys\n",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1129745,1129745,
CAFxX,2011-05-10T16:17:15Z,"well, keeping the keys encrypted in ram as a method to prevent other processes from reading it is pretty useless unless we manage to lock out all other processes from accessing our memory. reasking the password at spending-time is a good opt-in setting, but doesn't require keeping the keys encrypted in ram.\nso If I had to choose I'd definitely say wallet encryption over privkey encryption in ram.",https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1131896,1131896,
TheBlueMatt,2011-05-18T13:53:46Z,Superseded by #232 closed.\n,https://github.com/bitcoin/bitcoin/pull/203#issuecomment-1197019,1197019,
