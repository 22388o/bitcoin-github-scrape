[
  {
    "sha": "93e882d7e213994bd77c4ad47fbc346869eb9338",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2U4ODJkN2UyMTM5OTRiZDc3YzRhZDQ3ZmJjMzQ2ODY5ZWI5MzM4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-03-15T20:16:59Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-03-15T20:16:59Z"
      },
      "message": "Rename AcceptBlock and AcceptBlockHeader to StoreBlock and StoreBlockHeader",
      "tree": {
        "sha": "5041788c6771230702c8f42358e8c779473ef960",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5041788c6771230702c8f42358e8c779473ef960"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93e882d7e213994bd77c4ad47fbc346869eb9338",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e882d7e213994bd77c4ad47fbc346869eb9338",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93e882d7e213994bd77c4ad47fbc346869eb9338",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e882d7e213994bd77c4ad47fbc346869eb9338/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6a860796a44a2805a58391a009ba22752f64e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a860796a44a2805a58391a009ba22752f64e32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a860796a44a2805a58391a009ba22752f64e32"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e6bd1cf0237b81bb1679be48c09cbcd215131d9e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e882d7e213994bd77c4ad47fbc346869eb9338/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e882d7e213994bd77c4ad47fbc346869eb9338/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=93e882d7e213994bd77c4ad47fbc346869eb9338",
        "patch": "@@ -693,7 +693,7 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n \n     // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n     // nLockTime because when IsFinalTx() is called within\n-    // CBlock::AcceptBlock(), the height of the block *being*\n+    // CBlock::StoreBlock(), the height of the block *being*\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than chainActive.Height().\n@@ -3078,7 +3078,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         return true;\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n-    // redundant with the call in AcceptBlockHeader.\n+    // redundant with the call in StoreBlockHeader.\n     if (!CheckBlockHeader(block, state, fCheckPOW))\n         return false;\n \n@@ -3195,7 +3195,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     return true;\n }\n \n-static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex=NULL)\n+static bool StoreBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex=NULL)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -3243,13 +3243,13 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+static bool StoreBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *&pindex = *ppindex;\n \n-    if (!AcceptBlockHeader(block, state, chainparams, &pindex))\n+    if (!StoreBlockHeader(block, state, chainparams, &pindex))\n         return false;\n \n     // Try to process all requested blocks that we don't have, but only\n@@ -3290,12 +3290,12 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n         if (dbp != NULL)\n             blockPos = *dbp;\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n+            return error(\"StoreBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n                 AbortNode(state, \"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-            return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n+            return error(\"StoreBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n@@ -3328,13 +3328,13 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp);\n+        bool ret = StoreBlock(*pblock, state, chainparams, &pindex, fRequested, dbp);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret)\n-            return error(\"%s: AcceptBlock FAILED\", __func__);\n+            return error(\"%s: StoreBlock FAILED\", __func__);\n     }\n \n     if (!ActivateBestChain(state, chainparams, pblock))\n@@ -4965,7 +4965,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 Misbehaving(pfrom->GetId(), 20);\n                 return error(\"non-continuous headers sequence\");\n             }\n-            if (!AcceptBlockHeader(header, state, chainparams, &pindexLast)) {\n+            if (!StoreBlockHeader(header, state, chainparams, &pindexLast)) {\n                 int nDoS;\n                 if (state.IsInvalid(nDoS)) {\n                     if (nDoS > 0)\n@@ -5050,7 +5050,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Process all blocks from whitelisted peers, even if not requested,\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n-        // conditions in AcceptBlock().\n+        // conditions in StoreBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n         ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;"
      }
    ]
  }
]