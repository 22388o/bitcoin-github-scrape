practicalswift,2020-06-25 19:36:02,"Concept ACK: thanks for fixing! :)\n\n~~In case of `CAmount`:s outside of the money range: should we perhaps let `LoadMempool` return `false` on those to indicate that something went (very) wrong (instead of just skipping `PrioritiseTransaction`)?~~\n\n_Update: Negative deltas are allowed!_",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-649776961,649776961,
rajarshimaitra,2020-06-27 14:38:51,"@practicalswift I was thinking along the same line. Also, It seems better to initiate shutdown once something like this happens. As just returning `false` in `LoadMempool` doesn't seem to be triggering any catastrophe, and I am not sure what the node is doing about its mempool when loading from disk fails. The node seems to keep on running with just a failure message, My guess is its creates a fre",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-650569133,650569133,
practicalswift,2020-06-28 18:01:01,"~~@rajarshimaitra This is such an unlikely error that I don't think we need to add any special logic beyond returning `false` in case of `!MoneyRange(‚Ä¶)` :)~~\n\n_Update: Negative deltas are allowed!_",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-650800966,650800966,
rajarshimaitra,2020-07-01 07:45:17,@practicalswift updated to return failure instead of skipping `PrioritiseTransaction`.,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-652252433,652252433,
practicalswift,2020-07-01 16:38:35,"~~@rajarshimaitra Great! What about doing the same thing for the other `PrioritiseTransaction` call -- that is `return false` in the case of `!MoneyRange(i.second)` :)~~\n\n_Update: Negative deltas are allowed!_",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-652526576,652526576,
rajarshimaitra,2020-07-02 15:13:56,@practicalswift silly me. Should have done that. will push the same. ,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-653066427,653066427,
DrahtBot,2020-07-11 11:18:12,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-657047150,657047150,
rajarshimaitra,2020-07-13 11:13:08,@practicalswift addressed all your comments and rebased. ,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-657496764,657496764,
practicalswift,2020-07-13 16:07:29,"@rajarshimaitra  I think you still want `if (amountdelta) {` before doing `pool.PrioritiseTransaction(tx->GetHash(), amountdelta);` in order to not change the existing logic.\n\n~~I suggest leaving the existing `PrioritiseTransaction` logic intact in both cases, and simply add two stand-alone `MoneyRange` checks:~~\n\n_Update: Negative deltas allowed._\n\nSomething along the lines of ‚Ä¶\n\n",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-657649371,657649371,
rajarshimaitra,2020-07-17 04:59:38,"@practicalswift If i understand you correctly this is what you are suggesting? \n```\nCAmount amountdelta = nFeeDelta;\n            if (!MoneyRange(amountdelta)) {\n                return false;\n            }\n            if (amountdelta) {\n                pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n            }\n```\n\nand \n```\nfor (const auto& i : mapDeltas) {\n  ",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-659851821,659851821,
practicalswift,2020-07-17 08:04:05,"~~@rajarshimaitra Yes for the first case, but for the second case `pool.PrioritiseTransaction(i.first, i.second);` should be done unconditionally (skip `if (i.second)`) in order to not change the existing logic :)~~\n\n_Update: Negative deltas are allowed!_\n\nAlso would you mind changing the PR title to `Fix UBSan warnings triggered when loading corrupt mempool.dat files`?",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-659944489,659944489,
rajarshimaitra,2020-07-18 04:57:04,Fixed and updated. ,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-660425807,660425807,
practicalswift,2020-07-18 10:14:26,"~~ACK XXX~~\n\n_Update: Negative deltas are allowed!_\n\nRestarted Travis which failed spuriously :)",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-660461002,660461002,
fjahr,2020-07-21 18:52:12,Code review ACK 2cc2cbde13072a2d244912aba7df8a97c81646a1,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-662043906,662043906,
practicalswift,2020-08-18 18:48:34,"@rajarshimaitra To allow for negative deltas: what about replacing the `MoneyRange(‚Ä¶)` usages in this PR with `IsValidFeeDelta(‚Ä¶)` which could be something along the lines of:\n\n```c++\nNODISCARD bool IsValidFeeDelta(const CAmount fee_delta) {\n    return fee_delta >= -MAX_MONEY && fee_delta <= MAX_MONEY;\n}\n```",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-675651403,675651403,
DrahtBot,2021-02-11 14:06:07,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-777482828,777482828,
MarcoFalke,2021-05-10 10:38:24,Closing due to inactivity ,https://github.com/bitcoin/bitcoin/pull/19381#issuecomment-836535025,836535025,
jonatack,2020-06-25 17:30:45,"```suggestion\n            if(MoneyRange(i.second)) {\n```",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r445722677,445722677,src/validation.cpp
rajarshimaitra,2020-06-26 12:56:19,Noted.. ,https://github.com/bitcoin/bitcoin/pull/19381#discussion_r446166646,446166646,src/validation.cpp
MarcoFalke,2020-06-26 18:52:37,You may install `clang-format` and run the https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy script to preempt whitespace nitpicking.,https://github.com/bitcoin/bitcoin/pull/19381#discussion_r446354994,446354994,src/validation.cpp
practicalswift,2020-07-11 17:52:26,"```suggestion\n            }else {\n            } else {\n```",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r453218497,453218497,src/validation.cpp
practicalswift,2020-07-11 17:53:01,"```suggestion\n            if(!MoneyRange(i.second)) {\n            if (!MoneyRange(i.second)) {\n```",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r453218545,453218545,src/validation.cpp
rajarshimaitra,2020-07-13 11:11:43,Done,https://github.com/bitcoin/bitcoin/pull/19381#discussion_r453574819,453574819,src/validation.cpp
rajarshimaitra,2020-07-13 11:11:51,Done,https://github.com/bitcoin/bitcoin/pull/19381#discussion_r453574880,453574880,src/validation.cpp
MarcoFalke,2020-07-13 16:45:09,"```suggestion\n```\n\nnit: No need to change indentation on early-return. (same above)",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r453786078,453786078,src/validation.cpp
rajarshimaitra,2020-07-17 04:56:18,"Sorry, I didn't get it. Can you explain a bit what are you suggesting here?",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r456218118,456218118,src/validation.cpp
practicalswift,2020-07-18 10:14:59,This was fixed in your last push AFAICT :),https://github.com/bitcoin/bitcoin/pull/19381#discussion_r456774647,456774647,src/validation.cpp
luke-jr,2020-07-23 23:09:51,There is no requirement for deltas to be in `MoneyRange`... Better use a numeric_limit max,https://github.com/bitcoin/bitcoin/pull/19381#discussion_r459776903,459776903,src/validation.cpp
rajarshimaitra,2020-07-24 07:06:37,"Before I push the commit does this look ok?\n\n```\nCAmount amountdelta = nFeeDelta;\n            if (amountdelta > numeric_limits<int64_t>::max() || amountdelta < numeric_limits<int64_t>::min())  {\n                return false;\n            }\n```\n",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r459884880,459884880,src/validation.cpp
practicalswift,2020-07-25 15:43:51,"@luke-jr Oh, crap thanks for alerting about that! I na√Øvely assumed that the bounds of `CAmount` were defined by `MoneyRange(‚Ä¶)`, but I now understand that this is a case where negative amounts are allowed for a `CAmount`. I assume the valid range here is `[-MAX_MONEY, MAX_MONEY]` then?\n\nShould `CAmount` perhaps be reserved for cases where `MoneyRange(‚Ä¶)` defines the bounds?\n\n@rajarshimait",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r460416688,460416688,src/validation.cpp
rajarshimaitra,2020-07-26 06:16:14,"Oh, right. Well, this sounds quite deep for my grasp and I wouldn't know what exactly to do. Do suggest and will update the PR accordingly.",https://github.com/bitcoin/bitcoin/pull/19381#discussion_r460484682,460484682,src/validation.cpp
MarcoFalke,2021-05-10 10:36:43,Already in ee11a412a537f62aa46e8862678ce2069a2df5b7,https://github.com/bitcoin/bitcoin/pull/19381#discussion_r629251750,629251750,src/validation.cpp
