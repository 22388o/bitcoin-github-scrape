dgenr8,2014-07-08T14:18:44Z,@gavinandresen Hope you have time to review.\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48342043,48342043,
gavinandresen,2014-07-08T19:57:58Z,"Code changes look good, I am writing a regression test to help test.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48392090,48392090,
gavinandresen,2014-07-09T01:31:30Z,First cut regression test that just tests the 'ordinary' double-spend case:\n  https://github.com/gavinandresen/bitcoin-git/commits/doublespend_tests\n\nSimulating attack scenarios addressed by this pull as additional tests would be spiffy...\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48420073,48420073,
dgenr8,2014-07-11T15:04:15Z,"I'm adding 3 more tests, then will commit doublespendrelay.py. The tests are: no relay same input triple-spend, yes relay with triple spend before, and after, double-spend in input list.\n\nNo test for not adding invalid tx to bloom filter.  This would require shipping a tool that transmits invalid txes.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48741608,48741608,
dgenr8,2014-07-11T23:06:59Z,"The util.py function stop_node, which is used repeatedly in this test, sometimes hangs due to #4502 (stuck GetExternalIP).\n\nA successful test can take up to 30 seconds due to propagation waits.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48792997,48792997,
jgarzik,2014-07-11T23:16:17Z,"The changes themselves look OK at quick glance.\n\nHowever:  Pattern matched :)  In general, waiting a bit for tests to complete should be OK.\n\nHowever, anything longer than X seconds or minutes tends to impact programmer productivity, by slowing down the compile+test cycle, sometimes leading to the skipping of tests.  The usual solution is a switch between quick tests and comprehensive tests.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48793542,48793542,
sipa,2014-07-11T23:24:53Z,@jgarzik Compile with --with-comparison-tool=file.jar\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48794012,48794012,
ghost,2014-07-12T20:42:11Z,Looks good.\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-48823512,48823512,
SergioDemianLerner,2014-07-15T16:17:53Z,"Edited: removed accusation.\nA single transaction with 2000 double-spent inputs will be relayed 2000 times, one for each input!\n\nThe code should be:\n   if (pool.mapNextTx.count(outpoint))\n          {\n\n```\n       respend = true;\n\n        if ((doubleSpendFilter.contains(outpoint) &&  (!tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx)) )   // <<<---- ADDED\n          return false;           ",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49056152,49056152,
dgenr8,2014-07-15T16:43:25Z,"@SergioDemianLerner No, please re-read as committed.  And please do provide a concrete example of at least one bug when making such a broad accusation.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49059605,49059605,
SergioDemianLerner,2014-07-15T18:00:02Z,"Dear @dgenr8,\n I'm not saying that you made a mistake. Probably I did the mistake. I'm sure you worked very hard in this issue, and I didn't. \nWhat I'm saying is that the IDEA of this patch is difficult to implement right, if not impossible. \n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49069343,49069343,
SergioDemianLerner,2014-07-15T18:17:05Z,"@dgenr8 I still see the problem in the code. \nSuppose that TX with 1000 double-spend prevout is received, it will be broadcast because of the FIRST double-spend prevout.The remaining prevouts won't be added to the bloom filter.\nIf it is received again, it will be broadcast because of the SECOND double-spend prevout.\nSo if received 1000 times, it will be broadcast 1000 times, creating a massive ",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49071533,49071533,
dgenr8,2014-07-15T19:45:11Z,@SergioDemianLerner That is still @petertodd's attack.  Small first spend and huge respend.  Rate limiter.\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49082647,49082647,
petertodd,2014-07-15T19:52:39Z,"Yup.\n\n@SergioDemianLerner If you think there's an attack, write up a quick script that demonstrates it. For instance here's one I did for the invalid-due-to-too-many-sigops attack: https://github.com/petertodd/tx-flood-attack\n\nIt's really useful to have attack code available to do regression testing, as well as test new implementations.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49083518,49083518,
SergioDemianLerner,2014-07-16T00:43:46Z,"Ok. The reason my ""attack"" does not work is because RelayTransaction() does not relay the same transaction twice. And this is because setInventoryKnown is unbounded. But setInventoryKnown should be bounded (and this will be probably corrected in a future version), and so the attack is still possible, but it will require overflowing the setInventoryKnown to force it delete the tx hash. If elements ",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49111194,49111194,
SergioDemianLerner,2014-07-16T00:57:22Z,"For example, using SIGHASH_NONE the attacker can easily create thousands of variants of a single transaction without even computing signatures. Just 2000 double-spend inputs, and a single changing output. So the attacker consumes X bandwidth and each link of the whole network consumes X bandwidth.\n\nCan't we rise the bloom filter reset value to something like an average 100K hashes?\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49112010,49112010,
SergioDemianLerner,2014-07-16T01:06:44Z,What is the limit Kb/sec of the rate limiter?\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49112522,49112522,
sipa,2014-07-16T03:11:02Z,"Last I checked the code before merge, it was 50 kB per 10 minutes. Seems it\nwas increased to 1 MB per 10 minutes since...\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49119036,49119036,
dgenr8,2014-07-16T03:26:48Z,"Yes, the RR rate limit is currently 100 thousand bytes/min = 1.6Kb/s.  It was increased due to feedback from @sipa and @petertodd.  All of the numerical constants are open to better-reasoned values of course.\n\n@SergioDemianLerner Was raising the bloom filter size related to your malleability point?  The bloom filter contains outputs, not respend txes.  When attacker controls the outputs we can j",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49119807,49119807,
SergioDemianLerner,2014-07-16T20:10:54Z,"1.6Kb/s is very low, so the network will never be in danger for normal transactions/blocks, but is also means that the double-spend alert system will be easy to saturate if an attacker wants to.\nI have no more arguments, so I leave this to you. It was only my opinion against everyone else's, so you must know better... \n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49219902,49219902,
dgenr8,2014-07-16T20:43:06Z,"@SergioDemianLerner Targeted saturation with the goal of executing a particular double-spend in the dark is a risk.  But they are all in the dark today.  We would probably see this if unwise merchants accept 0-conf payments for valuable items.  I completely disagree that you are isolated -- and you have contributed a ton to this.  Do you still NACK it?  If so, are there specific changes that would",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49223966,49223966,
SergioDemianLerner,2014-07-17T12:57:54Z,"@dgenr8 Yes, I still think it has problems. If we keep the reset constant too low (1000 outputs), then I see that the system could be attacked in this other way:\n1. Fill the memory of a majority of the peers in the whole network bringing Bitcoin to death (not sure that I can, but I think so)\n2. Attack SPV battery-powered nodes by draining the battery or using the whole bandwidth.\n\nLet me first",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49302710,49302710,
dgenr8,2014-07-17T19:47:11Z,"@SergioDemianLerner \n\n> Now the attacker sends Tx2, which also arrives to X, and with high probability resets any\n> double-spend bloom filter of the network\n\nWhy did you go back to assuming that all prevouts re-spent by tx1 or tx2 are simultaneously added to the bloom filter?  That won't happen until MAX_DOUBLESPEND_BLOOM respend txes are relayed (on average).\n\nYour idea to dispense with th",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49354774,49354774,
dgenr8,2014-07-17T20:03:47Z,"@SergioDemianLerner Just to note, overall this attack requires attacker to pay his victim, and the network to accept, but fail to execute, the transaction.\n\nMAX_DOUBLESPEND_BLOOM increased to 100000.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49357600,49357600,
SergioDemianLerner,2014-07-17T20:39:15Z,"@dgenr8 Yes I did erroneously assumed again simultaneously additions of prevouts. \nBut we agree that this is unessential to the attack: if the attack is performed with 4000 different transactions each having a single prevout and 500 ouputs (500 simultaneous attack targets) then the same attack is possible. \n\nThe problem is still g_signals.SyncTransaction(tx, NULL). Have you carefully followed t",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49362337,49362337,
dgenr8,2014-07-17T23:16:42Z,"@SergioDemianLerner Got it, you are concerned about a wallet resource exhaustion attack on _double-spend payees_.  Well, those are dropping right on into the wallet.  Aaaand Sergio scores ;)\n\nAs you say, I think the only thing we can do is not allow a respend relay tx into the wallet at all, unless it conflicts with a tx already in the wallet.  That latter case is needed for the user alert, and ",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49378752,49378752,
dgenr8,2014-07-18T16:46:07Z,Lerner attack addressed in 389f3ee.\n,https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49453092,49453092,
BitcoinPullTester,2014-07-18T20:00:53Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4484_389f3ee45528dc0c88507b5a6abd78c71942eef4/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49473476,49473476,
dgenr8,2014-07-21T18:35:07Z,"Closing, since the now depends on reverted changes.  I'll submit a new cleaned-up pull request.\n",https://github.com/bitcoin/bitcoin/pull/4484#issuecomment-49646198,49646198,
