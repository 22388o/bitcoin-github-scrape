[
  {
    "sha": "71361ba03eea0cd3c727a6732a7d473933f592c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTM2MWJhMDNlZWEwY2QzYzcyN2E2NzMyYTdkNDczOTMzZjU5MmM5",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-08T14:09:34Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-18T16:08:51Z"
      },
      "message": "Respend relay must examine more inputs\n\nRestructure double-spend detection to fix three vulnerabilities\nin respend relay.\n\nWhen a transaction is found to be a relayable respend, stop\nchecking its inputs for more respent prevouts.\n\nWhen a respend is found NOT to be relayable due to previous relay\nin connection with one input, keep searching its inputs.\n\nDo not update the respend bloom filter until a respend is\nactually relayed.\n\nSince all the checks in RelayableRespend have been parceled out to\nother locations (except for the rate limit) rename the function.",
      "tree": {
        "sha": "748ae6089ec10b40ed4497e59bd43494c27a205c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/748ae6089ec10b40ed4497e59bd43494c27a205c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71361ba03eea0cd3c727a6732a7d473933f592c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71361ba03eea0cd3c727a6732a7d473933f592c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71361ba03eea0cd3c727a6732a7d473933f592c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71361ba03eea0cd3c727a6732a7d473933f592c9/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40d2d6922318957f1784dda735f24690baca027c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40d2d6922318957f1784dda735f24690baca027c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40d2d6922318957f1784dda735f24690baca027c"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 22,
      "deletions": 31
    },
    "files": [
      {
        "sha": "66e902c8e457e2e63faaa089a7f32a978172f372",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 31,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71361ba03eea0cd3c727a6732a7d473933f592c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71361ba03eea0cd3c727a6732a7d473933f592c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=71361ba03eea0cd3c727a6732a7d473933f592c9",
        "patch": "@@ -892,21 +892,8 @@ bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsig\n     return false;\n }\n \n-static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+static bool RespendRelayExceeded(const CTransaction& doubleSpend)\n {\n-    // Relaying double-spend attempts to our peers lets them detect when\n-    // somebody might be trying to cheat them. However, blindly relaying\n-    // every double-spend across the entire network gives attackers\n-    // a denial-of-service attack: just generate a stream of double-spends\n-    // re-spending the same (limited) set of outpoints owned by the attacker.\n-    // So, we use a bloom filter and only relay (at most) the first double\n-    // spend for each outpoint. False-positives (\"we have already relayed\")\n-    // are OK, because if the peer doesn't hear about the double-spend\n-    // from us they are very likely to hear about it from another peer, since\n-    // each peer uses a different, randomized bloom filter.\n-\n-    if (fInBlock || filter.contains(outPoint)) return false;\n-\n     // Apply an independent rate limit to double-spend relays\n     static double dRespendCount;\n     static int64_t nLastRespendTime;\n@@ -916,19 +903,12 @@ static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doub\n     if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n     {\n         LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n-        return false;\n+        return true;\n     }\n \n     LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n \n-    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n-    // insertions\n-    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n-        filter.clear();\n-\n-    filter.insert(outPoint);\n-\n-    return true;\n+    return false;\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n@@ -959,20 +939,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n-    bool relayableRespend = false;\n+    bool respend = false;\n+    COutPoint relayForOutpoint;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n-        // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n-        if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n+        // A respend is a tx that conflicts with a member of the pool\n+        if (pool.mapNextTx.count(outpoint))\n         {\n-            relayableRespend = RelayableRespend(outpoint, tx, false, doubleSpendFilter);\n-            if (!relayableRespend)\n-                return false;\n+            respend = true;\n+            // Relay only one tx per respent outpoint, but not if tx is equivalent to pool member\n+            if (!doubleSpendFilter.contains(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n+            {\n+                relayForOutpoint = outpoint;\n+                break;\n+            }\n         }\n     }\n+    if (respend && (relayForOutpoint.IsNull() || RespendRelayExceeded(tx)))\n+        return false;\n     }\n \n     {\n@@ -1064,8 +1051,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n \n-        if (relayableRespend)\n+        if (respend)\n         {\n+            // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM insertions\n+            if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n+                doubleSpendFilter.clear();\n+            doubleSpendFilter.insert(relayForOutpoint);\n             RelayTransaction(tx);\n         }\n         else\n@@ -1077,7 +1068,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     g_signals.SyncTransaction(tx, NULL);\n \n-    return !relayableRespend;\n+    return !respend;\n }\n \n "
      }
    ]
  },
  {
    "sha": "f217f4449b137c4eada0c126469205f839aa5cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjE3ZjQ0NDliMTM3YzRlYWRhMGMxMjY0NjkyMDVmODM5YWE1Y2Vh",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-11T22:38:32Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-18T16:08:51Z"
      },
      "message": "Add doublespendrelay.py regression test\n\nUse a 4-node network to test relay scenarios.",
      "tree": {
        "sha": "b252a38a394649e87c92525b414158c7ca2bc672",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b252a38a394649e87c92525b414158c7ca2bc672"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f217f4449b137c4eada0c126469205f839aa5cea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f217f4449b137c4eada0c126469205f839aa5cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f217f4449b137c4eada0c126469205f839aa5cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f217f4449b137c4eada0c126469205f839aa5cea/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71361ba03eea0cd3c727a6732a7d473933f592c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71361ba03eea0cd3c727a6732a7d473933f592c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71361ba03eea0cd3c727a6732a7d473933f592c9"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 136,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1765a906087bcdc14d709c7369f4f1597ecb0755",
        "filename": "qa/rpc-tests/doublespendrelay.py",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f217f4449b137c4eada0c126469205f839aa5cea/qa/rpc-tests/doublespendrelay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f217f4449b137c4eada0c126469205f839aa5cea/qa/rpc-tests/doublespendrelay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/doublespendrelay.py?ref=f217f4449b137c4eada0c126469205f839aa5cea",
        "patch": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test double-spend-relay and notification code\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from decimal import Decimal\n+from util import *\n+\n+class DoubleSpendRelay(BitcoinTestFramework):\n+\n+    #\n+    # Create a 4-node network; roles for the nodes are:\n+    # [0] : transaction creator\n+    # [1] : respend sender\n+    # [2] : relay node\n+    # [3] : receiver, should detect/notify of double-spends\n+    #\n+    # Node connectivity is:\n+    # [0,1] <--> [2] <--> [3]\n+    #\n+    def setup_network(self, test_dir):\n+        nodes = []\n+        for i in range(0,4):\n+            nodes.append(start_node(i, test_dir))\n+        connect_nodes(nodes[0], 2)\n+        connect_nodes(nodes[3], 2)\n+        sync_blocks(nodes)\n+        return nodes\n+\n+    def run_test(self, nodes):\n+        fee = Decimal(\"0.01\")\n+\n+        # Test 1: First spend\n+        # shutdown nodes[1] so it is not aware of the first spend\n+        # and will be willing to broadcast a respend\n+        stop_node(nodes[1], 1)\n+        # First spend: nodes[0] -> nodes[3]\n+        amount = Decimal(\"144\") # We rely on this requiring 3 50-BTC inputs\n+        (total_in, tx1_inputs) = gather_inputs(nodes[0], amount+fee)\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[3].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(tx1_inputs, outputs))\n+        txid1 = nodes[0].sendrawtransaction(signed[\"hex\"], True)\n+        sync_mempools([nodes[0], nodes[3]])\n+        \n+        txid1_info = nodes[3].gettransaction(txid1)\n+        assert_equal(txid1_info[\"respendsobserved\"], [])\n+\n+        # Test 2: Is double-spend of tx1_inputs[0] relayed?\n+        # Restart nodes[1]\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Second spend: nodes[0] -> nodes[0]\n+        amount = Decimal(\"40\")\n+        total_in = Decimal(\"50\")\n+        inputs2 = [tx1_inputs[0]]\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs2, outputs))\n+        txid2 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Wait until txid2 is relayed to nodes[3] (but don't wait forever):\n+        # Note we can't use sync_mempools, because the respend isn't added to\n+        # the mempool.\n+        for i in range(1,7):\n+            txid1_info = nodes[3].gettransaction(txid1)\n+            if txid1_info[\"respendsobserved\"] != []:\n+                break\n+            time.sleep(0.1 * i**2) # geometric back-off\n+        assert_equal(txid1_info[\"respendsobserved\"], [txid2])\n+\n+        # Test 3: Is triple-spend of tx1_inputs[0] not relayed?\n+        # Clear node1 mempool\n+        stop_node(nodes[1], 1)\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Third spend: nodes[0] -> nodes[0]\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs2, outputs))\n+        txid3 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Ensure txid3 not relayed to nodes[3]:\n+        time.sleep(9.1)\n+        txid1_info = nodes[3].gettransaction(txid1)\n+        assert_equal(txid1_info[\"respendsobserved\"], [txid2])\n+\n+        # Test 4: Is double-spend of tx1_inputs[1] relayed when triple-spend of tx1_inputs[0] precedes it?\n+        # Clear node1 mempool\n+        stop_node(nodes[1], 1)\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Inputs are third spend, second spend\n+        amount = Decimal(\"89\")\n+        total_in = Decimal(\"100\")\n+        inputs4 = [tx1_inputs[0],tx1_inputs[1]]\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs4, outputs))\n+        txid4 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Wait until txid4 is relayed to nodes[3] (but don't wait forever):\n+        for i in range(1,7):\n+            txid1_info = nodes[3].gettransaction(txid1)\n+            if txid1_info[\"respendsobserved\"] != [txid2]:\n+                break\n+            time.sleep(0.1 * i**2) # geometric back-off\n+        assert_equal(sorted(txid1_info[\"respendsobserved\"]), sorted([txid2,txid4]))\n+\n+        # Test 5: Is double-spend of tx1_inputs[2] relayed when triple-spend of tx1_inputs[0] follows it?\n+        # Clear node1 mempool\n+        stop_node(nodes[1], 1)\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Inputs are second spend, third spend\n+        amount = Decimal(\"88\")\n+        total_in = Decimal(\"100\")\n+        inputs5 = [tx1_inputs[2],tx1_inputs[0]]\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs5, outputs))\n+        txid5 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Wait until txid5 is relayed to nodes[3] (but don't wait forever):\n+        for i in range(1,7):\n+            txid1_info = nodes[3].gettransaction(txid1)\n+            if sorted(txid1_info[\"respendsobserved\"]) != sorted([txid2,txid4]):\n+                break\n+            time.sleep(0.1 * i**2) # geometric back-off\n+        assert_equal(sorted(txid1_info[\"respendsobserved\"]), sorted([txid2,txid4,txid5]))\n+\n+if __name__ == '__main__':\n+    DoubleSpendRelay().main()\n+"
      }
    ]
  },
  {
    "sha": "a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTc5YjRlNTE3ZWU0NDA4NDM0YzFiNmQ0ODBlMGE1YTFmZTNmY2Ji",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-17T20:07:59Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-18T16:08:51Z"
      },
      "message": "Increase MAX_DOUBLESPEND_BLOOM to 100000",
      "tree": {
        "sha": "54b28fe40c584d1bad2025c0c518db3e2d8a6c3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54b28fe40c584d1bad2025c0c518db3e2d8a6c3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f217f4449b137c4eada0c126469205f839aa5cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f217f4449b137c4eada0c126469205f839aa5cea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f217f4449b137c4eada0c126469205f839aa5cea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b8239fb3e3843d83f308f268de4f01cfcde9a59f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
        "patch": "@@ -126,7 +126,7 @@ namespace {\n } // anon namespace\n \n // Bloom filter to limit respend relays to one\n-static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n+static const unsigned int MAX_DOUBLESPEND_BLOOM = 100000;\n static CBloomFilter doubleSpendFilter;\n void InitRespendFilter() {\n     seed_insecure_rand();"
      }
    ]
  },
  {
    "sha": "389f3ee45528dc0c88507b5a6abd78c71942eef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODlmM2VlNDU1MjhkYzBjODg1MDdiNWE2YWJkNzhjNzE5NDJlZWY0",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-18T16:03:16Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-18T19:23:00Z"
      },
      "message": "Do not add double-spends that pay us to wallet\n\nAdd flag fRespend to SyncTransaction interface.\n\nDo not add double-spends to the local wallet, even if they pay us,\nunless they conflict with an existing wallet transaction.\n\nThis is to fix a resource exhaustion attack discovered by Sergio\nDemian Lerner.",
      "tree": {
        "sha": "535b4aa242f4a09a580b218048430b98325eb23d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/535b4aa242f4a09a580b218048430b98325eb23d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/389f3ee45528dc0c88507b5a6abd78c71942eef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/389f3ee45528dc0c88507b5a6abd78c71942eef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/389f3ee45528dc0c88507b5a6abd78c71942eef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/389f3ee45528dc0c88507b5a6abd78c71942eef4/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a579b4e517ee4408434c1b6d480e0a5a1fe3fcbb"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 29,
      "deletions": 25
    },
    "files": [
      {
        "sha": "bb482447b9ef9cfda7d4b548f185020cbc06af3b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=389f3ee45528dc0c88507b5a6abd78c71942eef4",
        "patch": "@@ -144,8 +144,9 @@ void InitRespendFilter() {\n namespace {\n \n struct CMainSignals {\n-    // Notifies listeners of updated transaction data (transaction, and optionally the block it is found in.\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    // Notifies listeners of updated transaction data (transaction, optionally the block it is found in,\n+\t// and whether this is a known respend)\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *, bool)> SyncTransaction;\n     // Notifies listeners of an erased transaction (currently disabled, requires transaction replacement).\n     boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n     // Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible).\n@@ -162,7 +163,7 @@ struct CMainSignals {\n \n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n@@ -176,7 +177,7 @@ void UnregisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.EraseTransaction.disconnect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n }\n \n void UnregisterAllWallets() {\n@@ -188,8 +189,8 @@ void UnregisterAllWallets() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n }\n \n-void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pblock);\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock, bool fRespend) {\n+    g_signals.SyncTransaction(tx, pblock, fRespend);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -939,7 +940,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n-    bool respend = false;\n+    bool fRespend = false;\n     COutPoint relayForOutpoint;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n@@ -949,7 +950,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // A respend is a tx that conflicts with a member of the pool\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            respend = true;\n+            fRespend = true;\n             // Relay only one tx per respent outpoint, but not if tx is equivalent to pool member\n             if (!doubleSpendFilter.contains(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n             {\n@@ -958,7 +959,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             }\n         }\n     }\n-    if (respend && (relayForOutpoint.IsNull() || RespendRelayExceeded(tx)))\n+    if (fRespend && (relayForOutpoint.IsNull() || RespendRelayExceeded(tx)))\n         return false;\n     }\n \n@@ -1051,7 +1052,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n \n-        if (respend)\n+        if (fRespend)\n         {\n             // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM insertions\n             if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n@@ -1066,9 +1067,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n     }\n \n-    g_signals.SyncTransaction(tx, NULL);\n+    g_signals.SyncTransaction(tx, NULL, fRespend);\n \n-    return !respend;\n+    return !fRespend;\n }\n \n \n@@ -1896,7 +1897,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n     // Watch for transactions paying to me\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        g_signals.SyncTransaction(tx, &block);\n+        g_signals.SyncTransaction(tx, &block, false);\n \n     // Watch for changes to the previous coinbase transaction.\n     static uint256 hashPrevBestCoinBase;\n@@ -2002,7 +2003,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, NULL);\n+        SyncWithWallets(tx, NULL, false);\n     }\n     return true;\n }\n@@ -2042,11 +2043,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx, NULL);\n+        SyncWithWallets(tx, NULL, false);\n     }\n     // ... and about transactions that got confirmed:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, &block);\n+        SyncWithWallets(tx, &block, false);\n     }\n     return true;\n }"
      },
      {
        "sha": "804b216fd12fb2bee869544f343924006af62cd5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=389f3ee45528dc0c88507b5a6abd78c71942eef4",
        "patch": "@@ -121,7 +121,7 @@ void UnregisterWallet(CWalletInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL, bool fRespend = false);\n \n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n@@ -1125,7 +1125,7 @@ class CMerkleBlock\n \n class CWalletInterface {\n protected:\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) =0;\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock, bool fRespend) =0;\n     virtual void EraseFromWallet(const uint256 &hash) =0;\n     virtual void SetBestChain(const CBlockLocator &locator) =0;\n     virtual void UpdatedTransaction(const uint256 &hash) =0;"
      },
      {
        "sha": "c2c2fcbea6204a0d8d669bb9403a187541bcfb43",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=389f3ee45528dc0c88507b5a6abd78c71942eef4",
        "patch": "@@ -781,7 +781,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         if (AcceptToMemoryPool(mempool, state, tx, false, NULL, !fOverrideFees))\n-            SyncWithWallets(tx, NULL);\n+            SyncWithWallets(tx, NULL, false);\n         else {\n             if(state.IsInvalid())\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));"
      },
      {
        "sha": "5d43d833df1f0e103ff8f7bd7949767dd0fd256e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=389f3ee45528dc0c88507b5a6abd78c71942eef4",
        "patch": "@@ -648,14 +648,17 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n // Add a transaction to the wallet, or update it.\n // pblock is optional, but should be provided if the transaction is known to be in a block.\n // If fUpdate is true, existing transactions will be updated.\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fRespend)\n {\n     {\n         AssertLockHeld(cs_wallet);\n         bool fExisted = mapWallet.count(tx.GetHash());\n         if (fExisted && !fUpdate) return false;\n \n         bool fIsConflicting = IsConflicting(tx);\n+        // Don't add respends that pay us, unless they conflict with us.  Prevents resource exhaustion.\n+        if (!fIsConflicting && fRespend) return false;\n+\n         if (fIsConflicting)\n             nConflictsReceived++;\n \n@@ -671,10 +674,10 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock, bool fRespend)\n {\n     LOCK2(cs_main, cs_wallet);\n-    if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pblock, true, fRespend))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -923,7 +926,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n-                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate))\n+                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate, false))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);"
      },
      {
        "sha": "1d5ae1ff05f050a596fa33690de154b03cffaf9f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/389f3ee45528dc0c88507b5a6abd78c71942eef4/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=389f3ee45528dc0c88507b5a6abd78c71942eef4",
        "patch": "@@ -256,8 +256,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n-    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock, bool fRespend);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fRespend);\n     void EraseFromWallet(const uint256 &hash);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      }
    ]
  }
]