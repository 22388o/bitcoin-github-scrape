jonasschnelli,2015-01-20T15:10:08Z,"Currently there is no migration tool from bdb to logdb.\nBecause it would be good to avoid Bdb in our binaries, a python tool for wallet migration could do the job. \n\nIMO the version code 0.1x should make clear that such required manual migrations are still possible.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70668008,70668008,
jgarzik,2015-01-20T15:14:48Z,@jonasschnelli Agree that a migration tool is necessary before rolling this out.\n\nThere are a few complications with python that would need double-checking:\n- Are python installs guaranteed capable of reading BDB 4.8-format data?\n- For people using --with-incompatible-bdb configure option -- like me and some of the other devs -- conversion becomes even more annoying.\n\nI would prefer a C++ mi,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70668851,70668851,
jonasschnelli,2015-01-20T15:26:36Z,"@jgarzik a C++ tool would probably get better results. Agreed.\nIt would just help the main bitcoin repository to not have to much legacy stuff. There is also some other things that can be removed from the code like the bdb wallet migration and features-checking (example: wallet feature for compressed key, etc.).\n\nMoving the c++ migration tool to separate repository makes sense. There we could a",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70671019,70671019,
laanwj,2015-01-20T16:04:16Z,"> Are python installs guaranteed capable of reading BDB 4.8-format data?\n\nYes - Python is generally linked against the system's BDB, which on modern systems is always >4.8. Newer BDB versions have no problem reading old databases. The problem is the other way around. After the file is ""touched"" it won't be backwards compatible anymore. Making a temporary copy then reading that would be a strateg",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70678273,70678273,
laanwj,2015-01-20T16:07:35Z,"Apart form that: nice work! I agree with your internal roadmap.\n\nI think it makes sense to do this work on a 'newwallet' branch so that other people can cooperate, and we can merge it into master when the work is complete, which will likely be no sooner than 0.12.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70678991,70678991,
jgarzik,2015-01-20T16:13:39Z,+1 @laanwj \n\nConcept ACK for the wallet changes.\n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70680242,70680242,
jgarzik,2015-01-20T16:16:30Z,"@jonasschnelli Yes.  I go back and forth between ""separate repo now"" and ""separate repo later""\n\nFor the initial conversion, it makes everything easier if the migration tool is in bitcoin/bitcoin.git and is built with the current build system.  That is the path of least resistance.\n\nBuild system & install Just Works.  You automatically get the migration tool, even if you didn't know you needed ",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70680887,70680887,
luke-jr,2015-01-20T16:40:41Z,"It may be a good idea to have 0.11 still compatible with bdb wallets without upgrading them - note that all our wallet upgrades have been opt-in so far, and you can still use a 0.4.0 wallet with 0.10 while retaining backward compatibility.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70686138,70686138,
jonasschnelli,2015-01-20T19:29:34Z,"Supporting both (bdb and logdb) wallet formats (at runtime) would require some work.\nI'm also aware of the missing backward compatibility. Supporting bdb wallets after a possible switch to logdb would require resources better spent at bip32, accounting overhaul, etc.\nIMO a clean cut would be worth it. Remove all the migration, min-version feature-compatibility legacy stuff.\n\nI agree with not l",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70716263,70716263,
laanwj,2015-01-21T08:39:08Z,"On IRC I've explicitly argued against dual database support, and I'm going to do so here again.\nHaving an intermediate phase where both databases are supported means legacy concerns (such as accounts) have to ooze into the new wallet interface. It also complicates testing. Are you going to verify that the new wallet will keep working with 0.3 wallets at every step of development?\n\nAn alternativ",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70801900,70801900,
luke-jr,2015-01-21T09:05:39Z,"Sounds reasonable, but if we can't build with both supported, how will binaries go out? Probably not too much more effort to just keep the class names unique and switch between them at runtime startup, is it?\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70804945,70804945,
jonasschnelli,2015-01-21T09:25:46Z,"I like laanwjs idea of supporting both formats with a compile option.\n\nTwo concerns I see:\n- the new wallet needs some changes in init.cpp. I could try to make the init.cpp changes flexible in case of the backend database. Even rpcwallet.cpp could support both. But this needs work.\n\nThe 2nd concern is more a ""conceptual"" one. If we support both wallet formats, why should one upgrade his walle",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70807280,70807280,
jgarzik,2015-01-21T10:07:15Z,"The original idea I discussed w/ @sipa on IRC was dropping support for BDB from bitcoind entirely, plus an auto-launched migration tool.  Still prefer that arrangement.  From bitcoind's standpoint, BDB support is _deleted_.  No dual mode codebase.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70812476,70812476,
laanwj,2015-01-21T11:38:52Z,"@jonasschnelli  \n- Yes, initialization/deinitalization should be moved to the wallet module(s) themselves and only called from init. This is long due anyhow, and mostly low-impact move-only.\n- My idea is not about supporting two formats, but supporting two different wallets. The old wallet will stay exactly as it is now (barring critical fixes). The new wallet will see new development, and come ",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70823258,70823258,
jgarzik,2015-01-21T11:48:59Z,"@laanwj hmmm, that is an interesting way to transition.  Let's think through the user making that old wallet / new wallet choice.  That plan would indeed make for a nice, clean separation.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-70824297,70824297,
jtimon,2015-01-23T15:39:10Z,I like the roadmap with multiwallet support and a legacy wallet / new wallet selectable. Maybe add a migrate button that only appears when the legacy wallet is selected.\nMaybe we want to support this wallet selection (and the migration button) as a build option disabled by default until it gets more testing as @laanwj also suggests.\nThen enable it by default or just remove the option and enable ,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71211193,71211193,
jonasschnelli,2015-01-25T08:47:15Z,"I did some brainwork in how we could handle the wallet code.\nSupporting both type of wallets at runtime or as compile option would be possible but some has drawbacks:\n- if we support both wallets, things like multiwallet or bip32 needs implementation in both worlds. Even if only one wallet type can handle things like multiwallet support, the interface needs adaption for supporting this somehow.\",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71360792,71360792,
jtimon,2015-01-25T14:33:39Z,"@jonasschnelli What about\n\n```\nvoid CLegacyWallet::Bip32Interface(args)\n{\n    throw ""CWallet::Bip32Interface() not implemented by CLegacyWallet"";\n}\n```\n\n?\nFor testing you can test both for the common interface and only the new one for the new features.\nOf course, I agree it's all simpler if no new features are added until the legacy wallet is removed, which I think should be the next re",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71375249,71375249,
jonasschnelli,2015-01-25T19:32:31Z,"I thought about the implementation once more. Unless somebody else convince me for another way i think i start with this (maybe this is more or less the original idea of @laanwj):\n- Replace the wallet code inside of the `#ifdef WALLET_ENABLE` with flexible hooks. Goal: get rid of wallet-code inside of the bitcoind's general code. We can keep the ifdefs or we could provide a empty ""no-wallet"" inst",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71387741,71387741,
jgarzik,2015-01-25T20:34:47Z,"It really depends on how ugly the code becomes, how large the maintenance burden becomes, to support two wallets in parallel.  It sounds like there will be a lot of ""creeping #ifdefs"" and semi-duplicated code in an effort to keep the legacy wallet unchanging.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71391823,71391823,
jonasschnelli,2015-01-25T20:44:03Z,"@jgarzik The legacy-wallet needs mostly move-only operation (move stuff from init.cpp, rpcmisc, etc.) to src/legacywallet/wallet.cpp (which then should provide a new class(name) CLegacyWallet [or similar]). I would see most wallet #ifdefs gone, unless people would find it better to have ifdefs then a CWallet conform ""no-wallet"" implementation.\n\nBut yes. The legacy-bdb-wallet needs a lot of movin",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71392341,71392341,
laanwj,2015-01-27T05:11:47Z,"@jonasschnelli : Sounds good to me. Some notes:\n\n> `provide a empty ""no-wallet"" instance to allow the user to run without a wallet.`. \n\nDon't call it a no-wallet. As with the NotificationInterface, just give it a general name, like ModuleInterface. In this case it's used to plug in a wallet, but the same mechanism could be used to plug in another module that provides e.g. RPC calls and hooks i",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-71590805,71590805,
jonasschnelli,2015-02-04T13:13:11Z,"Because this is getting to big, i try to form independent easy-reviewable PRs to slowly come towards the new wallet.\nI first like to move the wallet into a module by decoupling init/RPC/tests and remove the `ifdef ENABLE_WALLET` (only one ifdef ENABLE_WALLET for loading the module).\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-72851822,72851822,
jtimon,2015-02-06T19:10:41Z,Sounds like a good plan to me. Can you reference those PRs from here as you create them? \n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-73294558,73294558,
jonasschnelli,2015-02-06T19:15:19Z,"@jtimon currently it's #5752, #5758, #5744\nBut also have a look at the ""status"" page: #5761.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-73295374,73295374,
pstratem,2015-05-19T06:19:30Z,A suggestion for a more robust frame format.\n\n```\nuint64_t Unique Magic per log file\nuint64_t Counter\nuint64_t Length\n    0xffffffffffffffff indicates length not specified\nuint64_t Unique Magic per Record\nuint8_t[Length] Body\nuint64_t Unique Magic per Record\nSHA256 hash of Counter|Length|Unique Magic per Record|Body\n```\n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-103354054,103354054,
jgarzik,2015-05-19T06:44:52Z,"- on length-not-specified, seems like the majority of cases (100%?) would use 0xffff..\n- it can sometimes be useful to pad the body to a 64-bit etc. alignment\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-103368085,103368085,
jonasschnelli,2015-05-19T06:49:47Z,@pstratem but wouldn't the 2nd and 3rd element (`uint64_t Counter` and `uint64_t Length`) break the advantage of a append only format?\n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-103369875,103369875,
pstratem,2015-05-19T07:00:02Z,"@jgarzik \n\n> on length-not-specified, seems like the majority of cases (100%?) would use 0xffff..\n\nThe purpose of allowing an unspecified length is extremely long records, those simply do not exist in a bitcoin wallet.\n- Keys\n- Transactions\n\n> it can sometimes be useful to pad the body to a 64-bit etc. alignment\n\neh... yeah I guess sometimes, but that should be defined as part of the for",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-103372547,103372547,
pstratem,2015-05-19T07:01:03Z,@jonasschnelli \n\n> but wouldn't the 2nd and 3rd element (uint64_t Counter and uint64_t Length) break the advantage of a append only format?\n\nyou're gonna have to explain that one\n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-103372779,103372779,
jonasschnelli,2015-05-19T07:06:44Z,> > but wouldn't the 2nd and 3rd element (uint64_t Counter and uint64_t Length) break the advantage of a append only format?\n> \n> you're gonna have to explain that one\n\nAh now i see!\nI first thought the counter and length is at the beginning of the file and contains the combined length/counter of all frames within the filestore. But as i read again i saw that you propose the counter and lengt,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-103374335,103374335,
pstratem,2015-05-20T23:04:48Z,This kind of stuff is the reason for the frame to be more robust.\nhttps://www.mail-archive.com/linux-kernel@vger.kernel.org/msg886512.html\n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-104067544,104067544,
jgarzik,2015-09-15T17:59:40Z,"Leaning towards closing as Work In Progress.  General IRC consensus has been ""we want this"" for a long time, so concept ACK from most developers seems implied, myself included.\n\nHowever, this seems more of a longer term project resulting in a long lived PR.  Recommend storing this on a branch and opening a mailing list thread to follow development.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-140483307,140483307,
jonasschnelli,2015-09-15T18:10:50Z,Closing.\nThis is included in my core wallet fork an will be further developed there with a chance of allowing a merge to this repository if it's once is stable and tested enough.\n,https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-140486840,140486840,
jonasschnelli,2016-03-09T10:21:30Z,"I started an append only key/value file format in pure C, based on @sipa concept, that aims to be storage format for wallets (https://github.com/libbtc/libbtc/pull/41), suitable for MCUs, smartphones, desktop, etc.\n\nJust in case someone wants to contribute.\n",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-194226017,194226017,
halvors,2017-04-02T22:06:08Z,"What's the status on this? It's been over a year now, is this idea dead?",https://github.com/bitcoin/bitcoin/pull/5686#issuecomment-291018604,291018604,
Diapolo,2015-05-19T12:41:05Z,Nit: Include group ordering (own headers before system ones).\nEdit: Also obsolete file/license header...\n,https://github.com/bitcoin/bitcoin/pull/5686#discussion_r30594358,30594358,src/logdb.cpp
Diapolo,2015-05-19T12:42:09Z,Was this introduced here and what is the meaning of this constant?\n,https://github.com/bitcoin/bitcoin/pull/5686#discussion_r30594435,30594435,src/logdb.cpp
jonasschnelli,2015-05-19T12:43:37Z,@Diapolo: it's a file format magic. Check: http://en.wikipedia.org/wiki/Magic_number_(programming)\n,https://github.com/bitcoin/bitcoin/pull/5686#discussion_r30594541,30594541,src/logdb.cpp
