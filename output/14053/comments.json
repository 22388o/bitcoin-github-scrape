[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415858539",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-415858539",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 415858539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTg1ODUzOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-24T19:23:51Z",
    "updated_at": "2021-01-02T19:00:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20404 (Remove names from translatable strings by hebasto)\n* #20012 (rpc: Remove duplicate name and argNames from CRPCCommand by MarcoFalke)\n* #19873 (Flush dbcache early if system is under memory pressure by luke-jr)\n* #19806 (validation: UTXO snapshot activation by jamesob)\n* #19521 (Coinstats Index (without UTXO set hash) by fjahr)\n* #15946 (Allow maintaining the blockfilterindex when using prune by jonasschnelli)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415858539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417697510",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-417697510",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 417697510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzY5NzUxMA==",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?u=38970c06fa3c115f2caba3def2c99b78d7a48023&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-31T15:19:08Z",
    "updated_at": "2018-08-31T15:19:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for all the reviews. \r\n\r\nTo answer some of @jimpo's questions:\r\n2 & 4. I included part of the block hash so that in BlockDisconnected we ae sure to remove the entries in the index from this block only (that's where  `filter_by_value` is used). The reason I chose to remove entries from the database is to prevent reading into a block file using an old `CDiskTxPos`  that may no longer be a valid position. Otherwise in `FindTxsByScript` you could run into errors. You're right that this problem would be better handled by higher level methods.\r\n\r\nI think that returning just the outpoint is a better idea than the current choice so I'll switch to that and try to incorporate all the other feedback here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417697510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427261876",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-427261876",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 427261876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI2MTg3Ng==",
    "user": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?u=854fea8a963c480615c968173df512adbec42bfa&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T06:40:09Z",
    "updated_at": "2018-10-05T07:09:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Comments to the concept\r\n\r\nSome time ago I have rebased bitpay's bitcore patches (from their insight block explorer) to bitcoin core here (without much work on my own)\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/10370\r\n\r\nThe consensus back then seemed to be that more indexes in the core is not a good thing, and work should be instead done on external indexes. However I am no sure how this PR differs, I just quickly skimmed it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427261876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427280137",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-427280137",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 427280137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI4MDEzNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T08:02:32Z",
    "updated_at": "2018-10-05T08:02:32Z",
    "author_association": "MEMBER",
    "body": "@karel-3d I think this one is based on  #13033, so at least the performance impact should be less pronounced. Other than that it should be rather similar.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427280137/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447556680",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-447556680",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 447556680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzU1NjY4MA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-15T10:14:36Z",
    "updated_at": "2018-12-15T10:14:36Z",
    "author_association": "MEMBER",
    "body": "We talked about (address) indexes during the previous [IRC meeting](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2018/bitcoin-core-dev.2018-12-13-19.00.html). ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447556680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459132969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-459132969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 459132969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTEzMjk2OQ==",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?u=38970c06fa3c115f2caba3def2c99b78d7a48023&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T22:19:56Z",
    "updated_at": "2019-01-30T22:19:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Sjors \r\n> Lightly tested on macOS. It doesn't find the coinbase transaction to `mtnNvZY7iQCfzJCVon13tfJSVYDn9iiUWD` in [block 120](https://testnet.blockchain.info/en/block/0000000058dbb5e3fce9be42ae79beb564be666866c6b85c9791863219ec36db), `mg4bQva8w7Cjs8KaKHeEbyXUaCzoQAcXyH` in [block 10001](https://testnet.blockchain.info/nl/block/0000000000629d100db387f37d0f37c51118f250fb0946310a8c37316cbc4028) and several others.\r\n\r\nI'm confused at what you're referring to by`mtn...` and `mg4...`. The outputs for those two coinbase transactions are P2PK, so the only way to search for them is by scriptPubKey.  I used the hex value of the scriptPubKey from [here](https://blockstream.info/block/00000000000080b66c911bd5ba14a74260057311eaeb1982802f7010f1a9f090) and was able to find it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459132969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512578228",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-512578228",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 512578228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjU3ODIyOA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-17T21:36:31Z",
    "updated_at": "2019-07-17T21:36:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe tag this [needing concept ack](https://github.com/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review).\r\n\r\nThis would probably be pretty easy to rebase, and has a previous concept ack from jimpo, but it's not clear if other people want this change or might object to it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512578228/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518964997",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-518964997",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 518964997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODk2NDk5Nw==",
    "user": {
      "login": "dan-da",
      "id": 5110592,
      "node_id": "MDQ6VXNlcjUxMTA1OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5110592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dan-da",
      "html_url": "https://github.com/dan-da",
      "followers_url": "https://api.github.com/users/dan-da/followers",
      "following_url": "https://api.github.com/users/dan-da/following{/other_user}",
      "gists_url": "https://api.github.com/users/dan-da/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dan-da/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dan-da/subscriptions",
      "organizations_url": "https://api.github.com/users/dan-da/orgs",
      "repos_url": "https://api.github.com/users/dan-da/repos",
      "events_url": "https://api.github.com/users/dan-da/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dan-da/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-07T06:50:40Z",
    "updated_at": "2019-08-07T06:50:40Z",
    "author_association": "NONE",
    "body": "I for one would be very happy to see an optional addr index + api finally available in bitcoin-core, and not as a separate patch or hacky thing.\r\n\r\n@marcinja is there an API in your PR that accepts multiple addresses as input and returns total received/spent for each?  Some block explorers have this functionality and it is great because much more efficient than calling API for each addr individually.  \r\n\r\nAlso I think it should be caller's option (via param) whether to return list of tx or not.  Sometimes only addr summary info is needed eg total received/spent and tx info just adds bloat and slows things down in such cases.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518964997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537065474",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-537065474",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 537065474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzA2NTQ3NA==",
    "user": {
      "login": "abunsen",
      "id": 93429,
      "node_id": "MDQ6VXNlcjkzNDI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/93429?u=748ce152c5bfb946c65dfc6019a3bf5ab5b5612f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abunsen",
      "html_url": "https://github.com/abunsen",
      "followers_url": "https://api.github.com/users/abunsen/followers",
      "following_url": "https://api.github.com/users/abunsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/abunsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abunsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abunsen/subscriptions",
      "organizations_url": "https://api.github.com/users/abunsen/orgs",
      "repos_url": "https://api.github.com/users/abunsen/repos",
      "events_url": "https://api.github.com/users/abunsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abunsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T14:33:55Z",
    "updated_at": "2019-10-01T14:33:55Z",
    "author_association": "NONE",
    "body": "@marcinja you're so close. Thanks for all your hard work on this! Does anyone know if this is getting merged anytime soon?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537065474/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555957701",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-555957701",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 555957701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk1NzcwMQ==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-20T11:12:54Z",
    "updated_at": "2019-11-20T11:12:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't looked at how this is implemented, at all-- but the goal is one that is extraordinarily useful and addresses a severe and growing usability probable in the software that has burned me many times. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555957701/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557117513",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-557117513",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 557117513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzExNzUxMw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T14:48:06Z",
    "updated_at": "2019-11-21T14:48:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I haven't looked at how this is implemented, at all-- but the goal is one that is extraordinarily useful and addresses a severe and growing usability probable in the software that has burned me many times.\r\n\r\nSorry for the dumb question, but what's the severe usability problem?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557117513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558330123",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558330123",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558330123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMzMDEyMw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T20:38:52Z",
    "updated_at": "2019-11-25T20:38:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Most recent IRC discussion I could find about address indexes, http://www.erisian.com.au/bitcoin-core-dev/log-2018-12-13.html#l-601 seemed to have conclusion (from @jamesob) with: \r\n\"I'll report on any compelling usecases I find for addr index, but I suspect sipa et al are right that that's usually just the Wrong way\"",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558330123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558335048",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558335048",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558335048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMzNTA0OA==",
    "user": {
      "login": "dan-da",
      "id": 5110592,
      "node_id": "MDQ6VXNlcjUxMTA1OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5110592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dan-da",
      "html_url": "https://github.com/dan-da",
      "followers_url": "https://api.github.com/users/dan-da/followers",
      "following_url": "https://api.github.com/users/dan-da/following{/other_user}",
      "gists_url": "https://api.github.com/users/dan-da/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dan-da/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dan-da/subscriptions",
      "organizations_url": "https://api.github.com/users/dan-da/orgs",
      "repos_url": "https://api.github.com/users/dan-da/repos",
      "events_url": "https://api.github.com/users/dan-da/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dan-da/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T20:52:54Z",
    "updated_at": "2019-11-25T20:52:54Z",
    "author_association": "NONE",
    "body": "> \"usually just the Wrong way\"\r\n\r\nThis sounds like an ivory tower attitude to me.   So tell us wise ones, if an addrindex is the wrong way, then what exactly is the right way?   Because thus far bitcoin-core's answer seems to be:  don't lookup transactions related to an address AT ALL unless they are in your own wallet, which is useless for anyone trying to provide address lookup as a service.  They then must either run a patched bitcoind or turn to btcd or some other 3rd party solution.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558335048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558337160",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558337160",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558337160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMzNzE2MA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T20:58:35Z",
    "updated_at": "2019-11-25T20:58:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> what exactly is the right way?\r\n\r\nThe right way to do what? Can you provide more detail? I think it'd be good to keep the discussion as concrete as possible and discuss specific problems and use cases.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558337160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558344637",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558344637",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558344637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM0NDYzNw==",
    "user": {
      "login": "dan-da",
      "id": 5110592,
      "node_id": "MDQ6VXNlcjUxMTA1OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5110592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dan-da",
      "html_url": "https://github.com/dan-da",
      "followers_url": "https://api.github.com/users/dan-da/followers",
      "following_url": "https://api.github.com/users/dan-da/following{/other_user}",
      "gists_url": "https://api.github.com/users/dan-da/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dan-da/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dan-da/subscriptions",
      "organizations_url": "https://api.github.com/users/dan-da/orgs",
      "repos_url": "https://api.github.com/users/dan-da/repos",
      "events_url": "https://api.github.com/users/dan-da/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dan-da/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T21:19:28Z",
    "updated_at": "2019-11-25T21:20:21Z",
    "author_association": "NONE",
    "body": "ok, here are two tools I alone have written that need something like searchrawtransactions().\r\n\r\n[hd-wallet-addrs](https://github.com/dan-da/hd-wallet-addrs#blockchain-api-provider-notes) - a tool for discovering all hd-wallet addresses that have ever been used.  So it derives [receive,change] and checks if each address has ever received funds, up to gap limit.  Presently it must rely on 3rd party block explorers APIs.\r\n\r\n[bitprices](https://github.com/dan-da/bitprices#blockchain-api-provider-notes) A tool for querying all transactions for all used addresses in a wallet (or any group of addresses) and generating reports including historical prices on the date of each transaction.  Useful for audits and finding gain/loss, etc after the fact.  Presently btcd has the best/fastest implementation, but only after I submitted patches for searchrawtransactions.\r\n\r\nHere is a [website frontend](https://mybitprices.info).\r\n\r\nNote that the above tools work with any arbitrary seeds or addresses and are expected to return results quickly, so creating a watch-only wallet for each request is not a good option, and anyway it would then just be discarded immediately, so why bother?\r\n\r\nThe first two links above actually link to discussions of the various API providers and their various strengths/weaknesses for these purposes.\r\n\r\nOthers have their own reasons.  afaict, most block explorers or bitcoin API providers need some sort of address index and are rolling their own somehow.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558344637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558351495",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558351495",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558351495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM1MTQ5NQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T21:37:56Z",
    "updated_at": "2019-11-25T21:37:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks. From what I can gather the tools described in https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558344637 are accounting / auditing tools useful for someone running the bitcoin wallet, and this PR would let people who want to use these tools run them locally instead of relying on centralized third party services.\r\n\r\nIt seems like a good argument in favor of this feature.\r\n\r\nI'm not sure what the better arguments against this feature are, so it would be helpful if someone wanted to articulate them. One argument might be that we don't want people getting used to using tools like these, because eventually in the future historical indexes will be less able to scale, and people who are using these tools in their workflow will be forced to turn to centralized third party services.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558351495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558361845",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558361845",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558361845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM2MTg0NQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T22:07:58Z",
    "updated_at": "2019-11-25T22:07:58Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. The main argument against adding an address index to Bitcoin Core is that people/services will come to rely on them, and they're not scalable long term. My response to that is that people are already using address indexes and block explorers. Providing/not providing that functionality in Bitcoin Core isn't going to change that.\r\n\r\nThe new indexing infrastructure means that this can be done in a very unobtrusive way. The index has no direct interaction at all with validation or networking. Instead it hooks into the validation interface and runs in a background thread, and so should have no performance impact when the node is sync'ed (I expect this might slow down IBD as `ActivateBestChain()` gets blocked on `LimitValidationInterfaceQueue()`, but presumably users who are indexing the entire transaction history are prepared to wait a bit longer).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558361845/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558362070",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558362070",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558362070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM2MjA3MA==",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?u=0b02049ec38b6bb7d55c5c66d9bbeb0d4b822129&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T22:08:42Z",
    "updated_at": "2019-11-25T22:08:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "addr-index is the most frequently patched-in change to Core, across the years, IME.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558362070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558366875",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558366875",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558366875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM2Njg3NQ==",
    "user": {
      "login": "dan-da",
      "id": 5110592,
      "node_id": "MDQ6VXNlcjUxMTA1OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5110592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dan-da",
      "html_url": "https://github.com/dan-da",
      "followers_url": "https://api.github.com/users/dan-da/followers",
      "following_url": "https://api.github.com/users/dan-da/following{/other_user}",
      "gists_url": "https://api.github.com/users/dan-da/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dan-da/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dan-da/subscriptions",
      "organizations_url": "https://api.github.com/users/dan-da/orgs",
      "repos_url": "https://api.github.com/users/dan-da/repos",
      "events_url": "https://api.github.com/users/dan-da/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dan-da/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T22:21:44Z",
    "updated_at": "2019-11-25T22:21:44Z",
    "author_association": "NONE",
    "body": "querying a 3rd party entails a loss of privacy and requires trusting the 3rd party to return truthful data.  ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558366875/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558717488",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558717488",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558717488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcxNzQ4OA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:45:44Z",
    "updated_at": "2019-11-26T16:45:44Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\nI know I've flip-flopped on this feature historically, but I agree very much with the points that @jnewbery makes. Trading the maintenance burden of ~800 lines of relatively non-consensus-risky indexing code for some very practical gains in user privacy is compelling to me. Even with the caveat that we don't think some of these uses are architecturally sound for years and years.\r\n\r\nOne might make the argument that there's a slippery slope here - if we consent to this index now, would demand for yet another index come along, and the next and so on? I don't think so. In the few years I've followed this, there has been reliable demand for an address index (and numerous community implementations of varying repute) and nothing else - aside of course from the compact block index - so I don't think a slippery-slope argument holds.\r\n\r\n@marcinja do you have time to rebase this PR?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558717488/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558858883",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558858883",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 558858883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODg1ODg4Mw==",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?u=38970c06fa3c115f2caba3def2c99b78d7a48023&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T23:18:59Z",
    "updated_at": "2019-11-26T23:18:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I will rebase this and clean it up a bit. Thanks for the conceptual review.  ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558858883/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559105948",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-559105948",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 559105948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEwNTk0OA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:18:05Z",
    "updated_at": "2019-11-27T14:18:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe we should log a warning when the address index is enabled, like:\r\n\r\n<dl><dd>Warning: built-in address index is enabled! Address indexing is going to become less scalable as transaction history increases, and will eventually need to be removed from [PACKAGE_NAME] and replaced by a dedicated external index. Users relying on the address index for accounting purposes are advised to track metadata in real time so relying on a historical index is not necessary.</dd></dl>\r\n\r\nCould also add a coda if the built in wallet is enabled:\r\n\r\n<dl><dd>If using the address index to work around lack of tagging or notifications from the built-in [PACKAGE_NAME] wallet, please file wallet feature requests: [PACKAGE_BUGREPORT]</dd></dl>\r\n\r\nThe idea would be to give end users relying on third party accounting tools a way of knowing about the limitations of those tools, and encouraging authors to implement more scalable approaches.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559105948/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560176208",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-560176208",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 560176208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDE3NjIwOA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-01T23:51:16Z",
    "updated_at": "2019-12-01T23:51:16Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560176208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571208221",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-571208221",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 571208221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTIwODIyMQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-06T16:31:17Z",
    "updated_at": "2020-01-06T16:31:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice set of notes on this PR at https://bitcoincore.reviews/14053.html",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571208221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572200658",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-572200658",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 572200658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjIwMDY1OA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-08T18:39:19Z",
    "updated_at": "2020-01-08T18:39:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "For me what this PR is missing some analysis on the current size of the index in mainnet and the growth rate of the data. Has anyone run the numbers recently and can report?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572200658/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572239482",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-572239482",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 572239482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjIzOTQ4Mg==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-08T20:19:29Z",
    "updated_at": "2020-01-08T20:19:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think @jnewbery was hinting at this in the PR Review Club as well: it seems like this index does not handle reorgs. `BaseIndex` handles this through `Rewind` which is not overridden.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572239482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572849475",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-572849475",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 572849475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Mjg0OTQ3NQ==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-10T02:49:31Z",
    "updated_at": "2020-01-10T18:07:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ran on i7-8750H, took about 48 hours on an already synced node. Took 200 GB disk space.\r\n```\r\n2020-01-08T02:22:01Z addr_index thread start\r\n...\r\n2020-01-10T02:37:07Z addr_index is enabled at height 611001\r\n2020-01-10T02:37:07Z addr_index thread exit\r\n```\r\n```\r\n$ du -h addr_index\r\n200G\taddr_index\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572849475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579571607",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-579571607",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 579571607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTU3MTYwNw==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T03:06:11Z",
    "updated_at": "2020-01-29T03:06:11Z",
    "author_association": "MEMBER",
    "body": "Might be a good idea to replace `CDiskTxPos` with a height+tx# for [future?] pruning compatibility, like #13014",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579571607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579571984",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-579571984",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 579571984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTU3MTk4NA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T03:07:59Z",
    "updated_at": "2020-01-29T03:07:59Z",
    "author_association": "MEMBER",
    "body": "> I think @jnewbery was hinting at this in the PR Review Club as well: it seems like this index does not handle reorgs. BaseIndex handles this through Rewind which is not overridden.\r\n\r\nHandling reorgs might actually be undesirable for this... but changing CDiskTxPos like I just suggested to a block height could be incompatible with saving references to blocks not in the main chain too. (Maybe storing height OR blockhash would work?)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579571984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610942861",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-610942861",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 610942861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDk0Mjg2MQ==",
    "user": {
      "login": "Talkless",
      "id": 292191,
      "node_id": "MDQ6VXNlcjI5MjE5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/292191?u=d9debc4e87d0036b59d7d56a02f7f0728a8a76e2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Talkless",
      "html_url": "https://github.com/Talkless",
      "followers_url": "https://api.github.com/users/Talkless/followers",
      "following_url": "https://api.github.com/users/Talkless/following{/other_user}",
      "gists_url": "https://api.github.com/users/Talkless/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
      "organizations_url": "https://api.github.com/users/Talkless/orgs",
      "repos_url": "https://api.github.com/users/Talkless/repos",
      "events_url": "https://api.github.com/users/Talkless/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Talkless/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-08T12:56:00Z",
    "updated_at": "2020-04-08T12:56:00Z",
    "author_association": "NONE",
    "body": "@marcinja Do you believe this index could allow wallets such as Electrum to avoid relying on extra applications (like ElectrumX, Electrum Private Server, etc), and (if leared how to speak Bitcoin RPC) use Bitcoin Core node directly?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610942861/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650716222",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650716222",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650716222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDcxNjIyMg==",
    "user": {
      "login": "baso10",
      "id": 1388925,
      "node_id": "MDQ6VXNlcjEzODg5MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1388925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baso10",
      "html_url": "https://github.com/baso10",
      "followers_url": "https://api.github.com/users/baso10/followers",
      "following_url": "https://api.github.com/users/baso10/following{/other_user}",
      "gists_url": "https://api.github.com/users/baso10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baso10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baso10/subscriptions",
      "organizations_url": "https://api.github.com/users/baso10/orgs",
      "repos_url": "https://api.github.com/users/baso10/repos",
      "events_url": "https://api.github.com/users/baso10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baso10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T08:18:44Z",
    "updated_at": "2020-06-28T08:18:44Z",
    "author_association": "NONE",
    "body": "Any update when this could be merged?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650716222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650726577",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650726577",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650726577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDcyNjU3Nw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T09:49:39Z",
    "updated_at": "2020-06-28T09:49:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Any update when this could be merged?\r\n\r\nI kind of thought that this was still in conceptual review but it has received 5 Concept ACKs from experienced Core developers and I did not see much of the push back this has received historically, so I tend to believe this can be moved out of Conceptual review phase and move forward. There is still a lot of work to be done in terms of testing, documentation etc.\r\n\r\n@marcinja If you are currently unable to work on this I would be happy to take this over since I have some experience with indexes already :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650726577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650727850",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650727850",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650727850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDcyNzg1MA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T10:00:52Z",
    "updated_at": "2020-06-28T10:00:52Z",
    "author_association": "MEMBER",
    "body": "Past NACKs don't disappear just because a new PR is opened...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650727850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650729233",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650729233",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650729233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDcyOTIzMw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T10:12:59Z",
    "updated_at": "2020-06-28T10:12:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Past NACKs don't disappear just because a new PR is opened...\r\n\r\nDefinitely agree, especially if the PRs are very close. But I think if a new PR is opened with a different approach it can still be expected for the reviewers who gave NACKs in the past, to participate in the discussion again and reinstate their NACK or someone else who agrees with their view should do it for them. Otherwise, we might never be able to move forward if a concept is NACKed and then the reviewer leaves the project or just does not comment on the new approach. But it would probably be good if @marcinja would address the past NACKs directly and give those reviewers another chance to say if they have changed their minds or not.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650729233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650737107",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650737107",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650737107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDczNzEwNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T11:22:53Z",
    "updated_at": "2020-06-28T11:22:53Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650737107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650740221",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650740221",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650740221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDc0MDIyMQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T11:49:38Z",
    "updated_at": "2020-06-28T11:49:38Z",
    "author_association": "MEMBER",
    "body": "> Any update when this could be merged?\r\n\r\n@baso10 \r\n\r\n1. This PR needs to be rebased, as you can see in https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-610034274\r\n\r\n2. The PR is still going through peer review -- see the discussion above\r\n\r\n3. See https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#peer-review for more info about the peer review process in this project\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650740221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650740253",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650740253",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 650740253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDc0MDI1Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T11:49:51Z",
    "updated_at": "2020-06-28T11:49:51Z",
    "author_association": "MEMBER",
    "body": "A good resource for more context and history and reasons for and against this addition: https://bitcoincore.reviews/14053.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650740253/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658499547",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-658499547",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 658499547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODQ5OTU0Nw==",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?u=38970c06fa3c115f2caba3def2c99b78d7a48023&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T01:54:08Z",
    "updated_at": "2020-07-15T01:56:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey everyone. Just wanted to give a small update here. I am still planning on keeping this PR up-to-date and rebased. I've realized it's more annoying to rebase after procrastinating, and also it's not fair to the reviewers and other people interested so I will be much more diligent about rebasing now.\r\n\r\nThe total size of the address index right now is 223GB. I don't have a good answer on  index sync time because I was re-syncing on a laptop. This was done on the 8f3fc6b4b8fb1a2db3035398d3dd5a2ed91cc3f9 branch over the course of a few days.  I'm going to time an IBD and addrindex sync on a desktop with a good SSD so as to get meaningful results.\r\n\r\nThe good news is that `searchrawtransactions` is not prohibitively slow. \r\n```\r\ntime ./src/bitcoin-cli searchrawtransactions 3EiAcrzq1cELXScc98KeCswGWZaPGceT1d true 30000 > big-search\r\n\r\n./src/bitcoin-cli searchrawtransactions 3EiAcrzq1cELXScc98KeCswGWZaPGceT1d     4.79s user 1.95s system 49% cpu 13.575 total\r\n```\r\n(the file `big-search` created here is about 366MB)\r\n\r\nI have also confirmed that the address index has the same number of created/spent outpoints as on this explorer:  https://blockstream.info/address/3EiAcrzq1cELXScc98KeCswGWZaPGceT1d\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658499547/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666891128",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-666891128",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 666891128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Njg5MTEyOA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-31T03:19:18Z",
    "updated_at": "2020-07-31T03:19:18Z",
    "author_association": "MEMBER",
    "body": "@marcinja If you feel like it, you could pull 2ce521784432550007c0df1da85b4d3d0b1c7477 and 2761d11cc798d42839676f98250781a3ea445ce2 out of here and PR separately.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666891128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707536003",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-707536003",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 707536003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzUzNjAwMw==",
    "user": {
      "login": "c78867886",
      "id": 10693052,
      "node_id": "MDQ6VXNlcjEwNjkzMDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10693052?u=a651457f7ec8166bf8f533ab858339a05134e97d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/c78867886",
      "html_url": "https://github.com/c78867886",
      "followers_url": "https://api.github.com/users/c78867886/followers",
      "following_url": "https://api.github.com/users/c78867886/following{/other_user}",
      "gists_url": "https://api.github.com/users/c78867886/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/c78867886/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/c78867886/subscriptions",
      "organizations_url": "https://api.github.com/users/c78867886/orgs",
      "repos_url": "https://api.github.com/users/c78867886/repos",
      "events_url": "https://api.github.com/users/c78867886/events{/privacy}",
      "received_events_url": "https://api.github.com/users/c78867886/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-13T07:01:53Z",
    "updated_at": "2020-10-13T07:01:53Z",
    "author_association": "NONE",
    "body": "Can someone plz approve this?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707536003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723519083",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-723519083",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 723519083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzUxOTA4Mw==",
    "user": {
      "login": "decryp2kanon",
      "id": 60179867,
      "node_id": "MDQ6VXNlcjYwMTc5ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/60179867?u=e9e1c5a6e483ca07e551fb1e8a7d00c28d0843c0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decryp2kanon",
      "html_url": "https://github.com/decryp2kanon",
      "followers_url": "https://api.github.com/users/decryp2kanon/followers",
      "following_url": "https://api.github.com/users/decryp2kanon/following{/other_user}",
      "gists_url": "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
      "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
      "repos_url": "https://api.github.com/users/decryp2kanon/repos",
      "events_url": "https://api.github.com/users/decryp2kanon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-08T01:48:30Z",
    "updated_at": "2020-11-08T01:48:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723519083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744002909",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-744002909",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 744002909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDAwMjkwOQ==",
    "user": {
      "login": "Talkless",
      "id": 292191,
      "node_id": "MDQ6VXNlcjI5MjE5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/292191?u=d9debc4e87d0036b59d7d56a02f7f0728a8a76e2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Talkless",
      "html_url": "https://github.com/Talkless",
      "followers_url": "https://api.github.com/users/Talkless/followers",
      "following_url": "https://api.github.com/users/Talkless/following{/other_user}",
      "gists_url": "https://api.github.com/users/Talkless/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
      "organizations_url": "https://api.github.com/users/Talkless/orgs",
      "repos_url": "https://api.github.com/users/Talkless/repos",
      "events_url": "https://api.github.com/users/Talkless/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Talkless/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-13T12:47:55Z",
    "updated_at": "2020-12-13T12:47:55Z",
    "author_association": "NONE",
    "body": "@marcinja will this allow other wallets like Electrum to utilize this feature (RPC credentials provided, of course) and avoid having to run ElecturmX (https://github.com/spesmilo/electrumx), EPS (https://github.com/chris-belcher/electrum-personal-server) or BWT (https://github.com/shesek/bwt) intermediary software?\r\n\r\n@ecdsa @SomberNight @chris-belcher @shesek could you provide your input on how this feature might be useful (or not)?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744002909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744015971",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-744015971",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 744015971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDAxNTk3MQ==",
    "user": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?u=7bddbb9f558c51cf0d8f1754f506d395d776a71a&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-13T14:30:13Z",
    "updated_at": "2020-12-13T14:30:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "The main issue AFAIU is that Electrum is using `SHA256(scriptPubKey)` while this PR is using `MurmurHash3(scriptPubKey)`.\r\nAlso, ElectrumX & [electrs](https://github.com/romanz/electrs) are using RocksDB for the index storage - resulting in better performance and disk usage (compared to LevelDB).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744015971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744020488",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-744020488",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 744020488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDAyMDQ4OA==",
    "user": {
      "login": "SomberNight",
      "id": 29142493,
      "node_id": "MDQ6VXNlcjI5MTQyNDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SomberNight",
      "html_url": "https://github.com/SomberNight",
      "followers_url": "https://api.github.com/users/SomberNight/followers",
      "following_url": "https://api.github.com/users/SomberNight/following{/other_user}",
      "gists_url": "https://api.github.com/users/SomberNight/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SomberNight/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
      "organizations_url": "https://api.github.com/users/SomberNight/orgs",
      "repos_url": "https://api.github.com/users/SomberNight/repos",
      "events_url": "https://api.github.com/users/SomberNight/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SomberNight/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-13T15:04:58Z",
    "updated_at": "2020-12-13T15:04:58Z",
    "author_association": "NONE",
    "body": "@Talkless note that while some Electrum users run their own bitcoind, many do not. Electrum wants to support both use cases, and in fact the suspicion is that most users just use a public server. When using a public server, the client cannot use bitcoind RPC, hence in that case I don't see how the middleware (e.g. ElectrumX) could be avoided.\r\n\r\nFor the own bitcoind use case, maybe the client could have another optional mode of operation where it uses bitcoind RPC directly, which is I guess what you are asking about. For that, an address-index in bitcoind is the main thing missing indeed, however not the only one. For one, the electrum protocol (the client<->\"middleware server\" connection) has address subscriptions - the client gets a notification when a history of one its addresses changes. We are also planning on soon adding another method into the protocol that allows `txoutpoint->spender_txid` lookups (and notifications); I guess that could be implemented using the index in this PR albeit in a very inefficient way for heavily reused addresses.\r\n\r\nIMHO there are multiple upsides for having this middleware setup for Electrum:\r\n- for the project, it keeps the codebase simpler (again, we want to support users without own bitcoind)\r\n- for the project, it also allows for more flexibility for implementing new functionality: just consider present PR here, we have needed such an index for 9 years but bitcoind did not have it or want it, so we could just implement it ourselves\r\n- for the server operator, even if they don't want to open up the server for the public, they could share it with their friends and family. I don't think that's feasible with bitcoind RPC. I think this is a common use case.\r\n\r\nNevertheless if someone steps up and contributes patches, this kind of thing could be added.\r\n\r\n-----\r\n\r\n> The total size of the address index right now is 223GB\r\n\r\nThat sounds much larger than expected.\r\nEven with the `txoutpoint->spender_txid` map I mentioned above, when using LevelDB, ElectrumX uses around 90 GiB of disk space.\r\n\r\n> The DB keys are structured as follows: `<addr_id, key_type, outpoint>`\r\n> The DB values are simply: `<CDiskTxPos, CScript> `\r\n\r\nInstead of having both `addr_id` and `CScript`, why not just put a long hash, e.g. `sha256(CScript)` into the key?\r\n\r\nAlso, I expect most users of this index would also want txindex enabled. You might want to consider making address index dependent on txindex. Have you investigated how much space that would save? There would be no need to store `CDiskTxPos`.\r\n\r\nAnother trick that ElectrumX uses is that only the best chain is indexed. We have a `tx_num->txid` map as raw files on disk. A `tx_num` is the index of the transaction in the linear history of the blockchain, a 5-byte integer (so e.g. the genesis block coinbase tx has `tx_num=0`). This map uses around 17 GiB atm. With this, you can encode the txid part of the `outpoint` as 5 bytes instead of 32 bytes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744020488/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747639681",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747639681",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 747639681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzYzOTY4MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T19:09:02Z",
    "updated_at": "2020-12-17T19:09:02Z",
    "author_association": "MEMBER",
    "body": "Concept ACK (might have already done that)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747639681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747648440",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747648440",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 747648440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzY0ODQ0MA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T19:25:09Z",
    "updated_at": "2020-12-17T19:28:06Z",
    "author_association": "MEMBER",
    "body": "I'm concept -0 on this.\r\n\r\nMy primary objection is that I think it's a bad idea for any infrastructure to be built all that relies on having fully-indexed blockchain data available (this also applies to txindex, but we can't just remove support...).\r\n\r\nHowever, it seems many people want something like this, and are going to use it anyway. The question is then whether it belongs in the bitcoin-core codebase. Alternative, and more performant presumably, like electrs exist already too, so it isn't exactly impossible to do this elsewhere.\r\n\r\nStill, given that we now have the indexes infrastructure, it means that things like this are easy to add in a fairly modular way without invading consensus code. So if people really want this, fine.\r\n\r\nOverall approach comment: I don't think MurmurHash should be used for anything new; there are strictly better hash functions available. I'd suggest SipHash if that's fast enough.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747648440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747658388",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747658388",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 747658388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzY1ODM4OA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T19:42:23Z",
    "updated_at": "2020-12-17T19:42:23Z",
    "author_association": "MEMBER",
    "body": "I'm also a little more negative on having this in Core than I previously was. After working in a few industrial contexts on wallet stuff, it's clear to me that an address index is really only required if you want to implement a block explorer or do chain analysis. For both of these applications, using something like electrs seems sufficient.\r\n\r\nFor personal wallet management, a full address index is not required. I think the origin of some confusion is that things like the Electrum Personal Server have become synonymous with this kind of usage, but in reality a full index is overkill when descriptor-specific rescans can be done once for a historical backfill and then per-block scanning can be done from there on out.\r\n\r\nI want to point out that this is a nice implementation and good work by @marcinja, but I'm leaning slightly against the inclusion of such an index in Core at this point.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747658388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747661798",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747661798",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 747661798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzY2MTc5OA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T19:48:52Z",
    "updated_at": "2020-12-17T19:48:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "> My primary objection is that I think it's a bad idea for any infrastructure to be built that relies on having fully-indexed blockchain data available.\r\n\r\nI agree on this.\r\n\r\nIMO the only use cases to ever use a full address index are:\r\n* 1) Instant seed/xpriv backup recovery including spent history\r\n* 2) Backend service for thousands of wallets\r\n* 3) Debug/explore purposes\r\n\r\n**1** (instant backup recovery) could be solved with either `scantxoutset` (take a minute or two) or by an address-index for the utxo set only. But both would not restore the spent history.\r\nA scalable non-enterprise solution to restore the spent history is using blockfilters. Scan through the filters and rescan only the relevant blocks (a matter of minutes), see #20664.\r\n\r\n**2** (a backend for thousands of wallets): out of scope for this project.\r\n\r\n**3** (explore purposes): I think this is a valid use case. Though adding this PR to Bitcoin Core will lead to **many many projects** using it **in production** increasing the traffic in this project and eventually *steal* time from existing contributors (rebase, maintenance, drag-along)\r\n\r\n**My main fear is that people are going to use this index (a full address index) to use it as an electrum(ish) backend for a handful of wallets.**\r\n\r\nWith multiwallet, watch-only-wallets, PSBT, we have all tools to server multiple wallets in a scalable way for external applications.\r\n\r\nI also think merging this as it is, would be in contradiction to the process- and repository-separation effort.\r\n\r\nTherefore I'm ~0 (slightly towards NACK) to add this.\r\nIf this would be in another repository (still under `bitcoin/*`) and process separated, I would ACK it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747661798/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754071381",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-754071381",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 754071381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NDA3MTM4MQ==",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?u=38970c06fa3c115f2caba3def2c99b78d7a48023&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-04T16:21:10Z",
    "updated_at": "2021-01-04T16:21:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi all, thanks for the feedback and review. This was an enjoyable PR to work on and I learned a lot from all your comments.\r\n\r\nI'm closing this PR because its size probably requires stronger support from contributors to get in. It also seems more clear now that all of the practical use-cases are covered by existing features and some lightweight alternatives (https://github.com/bitcoin/bitcoin/pull/20664) .\r\n\r\nI also agree that it would be bad to incentivize using an address index to support an external electrum wallet, when it's not the intended use-case and would cause unnecessary burden on contributors and maintainers in this project, e.g. from users of those wallets wanting new features or updates.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754071381/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754089336",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-754089336",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
    "id": 754089336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NDA4OTMzNg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-04T16:53:22Z",
    "updated_at": "2021-01-04T16:53:22Z",
    "author_association": "MEMBER",
    "body": "@marcinja thank you and I hope to see more contributions of this quality from you.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754089336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213754112",
    "pull_request_review_id": 150655713,
    "id": 213754112,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc1NDExMg==",
    "diff_hunk": "@@ -93,6 +96,33 @@ class BaseIndex : public CValidationInterface\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();\n+\n+    bool IsInSyncWithMainChain() const;\n+};\n+\n+struct CDiskTxPos : public CDiskBlockPos",
    "path": "src/index/base.h",
    "position": null,
    "original_position": 25,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nNote: this class is moved from `src/index/txindex.cpp` with no changes (except whitespace)",
    "created_at": "2018-08-29T16:47:20Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213754112",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213754112"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213754112"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213754112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 103,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213756026",
    "pull_request_review_id": 150655713,
    "id": 213756026,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc1NjAyNg==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nNote: new `index/addrindex.cpp`, `index/addrindex.h`, and `test/addrindex_tests.cpp` files in this commit mirror existing `index/txindex.cpp` and `index/txindex.h`, `test/txindex_tests.cpp` files and have some code and comments in common. It can help to diff the `addr` files against the `tx` files when reviewing this PR.",
    "created_at": "2018-08-29T16:53:38Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213756026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213756026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213756026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213756026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213770206",
    "pull_request_review_id": 150655713,
    "id": 213770206,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc3MDIwNg==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nI think this code could benefit from some typedefs and more consistent use of types internally to improve readability. Maybe:\r\n\r\n```\r\nusing AddressId = uint64_t;\r\nusing BlockId = uint64;\r\nusing DbKey = std::pair<std::pair<char, AddressID>, CDiskTxPos>;\r\nusing DbValue = BlockId;\r\n```\r\n\r\nI also wonder if `std::tuple<char, AddressId, CDiskTxPos>` might be a more natural key format than the nested pair.",
    "created_at": "2018-08-29T17:37:39Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213770206",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213770206"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213770206"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213770206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773597",
    "pull_request_review_id": 150655713,
    "id": 213773597,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc3MzU5Nw==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 55,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nCould just make this a return value instead of an output parameter. Existing return value seems redundant.",
    "created_at": "2018-08-29T17:47:55Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773597",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773597"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773597"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773659",
    "pull_request_review_id": 150655713,
    "id": 213773659,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc3MzY1OQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nCould consolidate last two parameters into single `boost::optional<AddressId> filter_value` param.",
    "created_at": "2018-08-29T17:48:07Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213782329",
    "pull_request_review_id": 150655713,
    "id": 213782329,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc4MjMyOQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 124,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nThis sleep + BlockUntilSyncedToCurrentChain call is pretty hacky but probably ok in principle. I think @jimpo could easily tell you how to improve it. I would move this code out of the `AddrIndex` class and into a `g_txindex->WaitForSync()` or similar method, and probably replace the sleep with a condition variable wait.\r\n\r\nOr maybe this code will be unnecessary with #14035 undo data?",
    "created_at": "2018-08-29T18:14:05Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213782329",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213782329"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213782329"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213782329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 124,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213785140",
    "pull_request_review_id": 150655713,
    "id": 213785140,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc4NTE0MA==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 66,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nShould probably reorder this condition. It seems pointless to retrieve the value when the key is wrong, and maybe dangerous if the value is a different format and deserializing could throw an exception.",
    "created_at": "2018-08-29T18:22:29Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213785140",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213785140"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213785140"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213785140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213788343",
    "pull_request_review_id": 150655713,
    "id": 213788343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc4ODM0Mw==",
    "diff_hunk": "@@ -203,6 +204,123 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "226eeea9736127269058fbbf7816c7100f90974d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add searchrawtransactions RPC\" (226eeea9736127269058fbbf7816c7100f90974d)\r\n\r\nShould add a basic python functional test for the new RPC method.",
    "created_at": "2018-08-29T18:32:17Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213788343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213788343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213788343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213788343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 223,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013007",
    "pull_request_review_id": 150972075,
    "id": 214013007,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxMzAwNw==",
    "diff_hunk": "@@ -1611,6 +1625,13 @@ bool AppInitMain()\n         g_txindex->Start();\n     }\n \n+    if (gArgs.GetBoolArg(\"-addrindex\", DEFAULT_ADDRINDEX)) {\n+        if (!g_txindex)\n+            InitWarning(_(\"-txindex must be enabled for -addrindex to index spends from addresses.\"));",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There is no such thing as a \"spend from address\"",
    "created_at": "2018-08-30T12:37:52Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013007",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013007"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013007"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013007/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1630,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013753",
    "pull_request_review_id": 150972977,
    "id": 214013753,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxMzc1Mw==",
    "diff_hunk": "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`skip` and `count` probably make sense on an options object instead.",
    "created_at": "2018-08-30T12:40:10Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013753",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013753"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013753"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 216,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013906",
    "pull_request_review_id": 150972977,
    "id": 214013906,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxMzkwNg==",
    "diff_hunk": "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(this would be number 4, but n/a once on an options object)",
    "created_at": "2018-08-30T12:40:32Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013906",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013906"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013906"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013906/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 217,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015214",
    "pull_request_review_id": 150972977,
    "id": 214015214,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxNTIxNA==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 114,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This basically shouldn't be here. The address used to receive a coin has zero relationship with the transaction spending that coin.\r\n\r\nIf someone really cares about getting it anyway, there should be a separate input txid/index -> spend txid index.",
    "created_at": "2018-08-30T12:45:05Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015214",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015214"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015214"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 114,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015281",
    "pull_request_review_id": 150972977,
    "id": 214015281,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxNTI4MQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 132,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This looks like a very fragile assumption.",
    "created_at": "2018-08-30T12:45:18Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 132,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015451",
    "pull_request_review_id": 150972977,
    "id": 214015451,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxNTQ1MQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "With this, why is the loop waiting for IsInSyncWithMainChain needed?",
    "created_at": "2018-08-30T12:45:50Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015451",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015451"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015451"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 129,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214093388",
    "pull_request_review_id": 151073881,
    "id": 214093388,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDA5MzM4OA==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`BlockUntilSyncedToCurrentChain` returns false immediately if `m_synced` is false.\r\n\r\nThe loop waiting for `IsInSyncWithMainChain` waits for txindex to finish in `ThreadSync`. Once txindex finishes in `ThreadSync` it will be updated by ValiditionInterface callbacks from that point on.\r\n\r\nThis line (since txindex must have `m_synced` =  true now) will actually block now until txindex syncs with the ValidationInterface queue.",
    "created_at": "2018-08-30T16:16:00Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214093388",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214093388"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214093388"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214093388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 129,
    "side": "RIGHT",
    "in_reply_to_id": 214015451
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214136359",
    "pull_request_review_id": 151126290,
    "id": 214136359,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDEzNjM1OQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "commit: Introduce address index\r\n\r\nCan you move this comment to `BaseIndex::DB` and delete from `TxIndex::DB` as well? No need to copy it to every new index file, especially since it's handled at the base layer.",
    "created_at": "2018-08-30T18:31:21Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214136359",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214136359"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214136359"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214136359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214149325",
    "pull_request_review_id": 151142587,
    "id": 214149325,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDE0OTMyNQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This needs an `if (!m_synced) return;`",
    "created_at": "2018-08-30T19:14:05Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214149325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214149325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214149325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214149325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203100",
    "pull_request_review_id": 151126290,
    "id": 214203100,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwMzEwMA==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 114,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Spends from an address should at least get indexed under a separate key prefix even if it's done by the same indexer.\r\n\r\nUsing the undo files is a much better way to get this information than the txindex.",
    "created_at": "2018-08-30T22:45:49Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203100",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203100"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203100"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 114,
    "side": "RIGHT",
    "in_reply_to_id": 214015214
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203436",
    "pull_request_review_id": 151126290,
    "id": 214203436,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwMzQzNg==",
    "diff_hunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    BaseIndex::DB& GetDB() const override;\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;\n+\n+    const char* GetName() const override { return \"addrindex\"; }\n+\n+public:\n+    /// Constructs the index, which becomes available to be queried.\n+    explicit AddrIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n+    virtual ~AddrIndex() override;\n+\n+    /// Lookup transaction(s) by scriptPubKey. Fills txs vector with (block_hash, tx) pairs.\n+    bool FindTxsByScript(const CScript& dest, std::vector<std::pair<uint256, CTransactionRef>> &txs);",
    "path": "src/index/addrindex.h",
    "position": null,
    "original_position": 47,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There should be a way of differentiating between txs where the script is the output and ones that spend from the address. Perhaps two methods or two output vector parameters.",
    "created_at": "2018-08-30T22:47:56Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203436",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203436"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203436"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203723",
    "pull_request_review_id": 151126290,
    "id": 214203723,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwMzcyMw==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A better way to do it is to loop until `BlockUntilSyncedToCurrentChain` becomes true.",
    "created_at": "2018-08-30T22:49:33Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203723",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203723"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203723"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 129,
    "side": "RIGHT",
    "in_reply_to_id": 214015451
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204067",
    "pull_request_review_id": 151126290,
    "id": 214204067,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDA2Nw==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {\n+    const uint64_t block_hash_bits = block->GetHash().GetUint64(0);\n+    std::unordered_set<uint64_t> addr_ids_to_remove;\n+\n+    {",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 162,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Use the undo files instead of CCoinsViewCache.",
    "created_at": "2018-08-30T22:51:37Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204067",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204067"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204067"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 162,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204133",
    "pull_request_review_id": 151126290,
    "id": 214204133,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDEzMw==",
    "diff_hunk": "@@ -276,3 +278,8 @@ void BaseIndex::Stop()\n         m_thread_sync.join();\n     }\n }\n+\n+\n+bool BaseIndex::IsInSyncWithMainChain() const {",
    "path": "src/index/base.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This shouldn't be necessary.",
    "created_at": "2018-08-30T22:52:00Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204133",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204133"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204133"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 283,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204265",
    "pull_request_review_id": 151126290,
    "id": 214204265,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDI2NQ==",
    "diff_hunk": "@@ -61,6 +62,8 @@ class BaseIndex : public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                         const std::vector<CTransactionRef>& txn_conflicted) override;\n \n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;",
    "path": "src/index/base.h",
    "position": null,
    "original_position": 12,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why? The implementation is empty.",
    "created_at": "2018-08-30T22:52:49Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204265",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204265"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204265"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204406",
    "pull_request_review_id": 151126290,
    "id": 214204406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDQwNg==",
    "diff_hunk": "@@ -93,6 +96,33 @@ class BaseIndex : public CValidationInterface\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();\n+\n+    bool IsInSyncWithMainChain() const;\n+};\n+\n+struct CDiskTxPos : public CDiskBlockPos",
    "path": "src/index/base.h",
    "position": null,
    "original_position": 25,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd vote to move it to it's own file, like `src/index/disktxpos.{h,cpp}`.",
    "created_at": "2018-08-30T22:53:47Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 103,
    "side": "RIGHT",
    "in_reply_to_id": 213754112
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204889",
    "pull_request_review_id": 151126290,
    "id": 214204889,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDg4OQ==",
    "diff_hunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    BaseIndex::DB& GetDB() const override;\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;\n+\n+    const char* GetName() const override { return \"addrindex\"; }\n+\n+public:\n+    /// Constructs the index, which becomes available to be queried.\n+    explicit AddrIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n+    virtual ~AddrIndex() override;\n+\n+    /// Lookup transaction(s) by scriptPubKey. Fills txs vector with (block_hash, tx) pairs.\n+    bool FindTxsByScript(const CScript& dest, std::vector<std::pair<uint256, CTransactionRef>> &txs);\n+\n+    // Returns part of key used to store information in db.\n+    static uint64_t GetAddrID(const CScript& script);",
    "path": "src/index/addrindex.h",
    "position": null,
    "original_position": 50,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is this exposed? It seems internal.",
    "created_at": "2018-08-30T22:56:35Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204889",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204889"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204889"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214205452",
    "pull_request_review_id": 151126290,
    "id": 214205452,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNTQ1Mg==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "3c7cc3c705b08828dc8dc919e53343df78568ebd",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems that `filter_by_value` functionality isn't used? Also, I'd rename to something like `filter_by_block` because it's not clear what value means and is tightly coupled to the database layout chosen.",
    "created_at": "2018-08-30T23:00:15Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214205452",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214205452"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214205452"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214205452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161819",
    "pull_request_review_id": 152365361,
    "id": 215161819,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MTgxOQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Redundant condition `filter_by_value`: what about `!filter_by_value || value == value_wanted` instead?",
    "created_at": "2018-09-05T07:30:12Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161819",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161819"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161819"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161936",
    "pull_request_review_id": 152365501,
    "id": 215161936,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MTkzNg==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 146,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`block_hash` should be passed by const reference?",
    "created_at": "2018-09-05T07:30:41Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161936",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161936"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161936"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 146,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161992",
    "pull_request_review_id": 152365584,
    "id": 215161992,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MTk5Mg==",
    "diff_hunk": "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {",
    "path": "src/test/test_bitcoin.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`prev_hash` should be passed by const reference?",
    "created_at": "2018-09-05T07:30:58Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161992",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161992"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161992"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162067",
    "pull_request_review_id": 152365666,
    "id": 215162067,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjA2Nw==",
    "diff_hunk": "@@ -89,6 +89,15 @@ struct TestChain100Setup : public TestingSetup {\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n                                  const CScript& scriptPubKey);\n \n+    void BuildChain(const uint256 prev_hash,",
    "path": "src/test/test_bitcoin.h",
    "position": null,
    "original_position": 4,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`prev_hash` should be passed by const reference?",
    "created_at": "2018-09-05T07:31:15Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162067",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162067"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162067"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162287",
    "pull_request_review_id": 152365920,
    "id": 215162287,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjI4Nw==",
    "diff_hunk": "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {\n+    if (height <= 0) return;\n+\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus some of the passed-in txns:\n+    block.vtx.resize(1);\n+\n+    // If this is the last block, add all remaining transactions.\n+    // Otherwise add with some randomness.\n+    for (auto it = txns.begin(); it != txns.end();) {\n+        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());\n+\n+        if (add_tx) {\n+            CMutableTransaction tx = *it;\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+            it = txns.erase(it);\n+        } else {\n+            it++;\n+        }\n+    }\n+\n+    block.hashPrevBlock = prev_hash;\n+    block.nTime = prev_time + 1;\n+\n+    // This is the body of IncrementExtraNonce, modified specifically for this function.\n+    // (IncrementExtraNonce creates a valid coinbase and merkleRoot)\n+    // Height first in coinbase required for block.version=2\n+    unsigned int extraNonce = 1;\n+    unsigned int nHeight = chainActive.Tip()->nHeight+1+blocks.size();\n+    CMutableTransaction txCoinbase(*block.vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(extraNonce)) + COINBASE_FLAGS;\n+    assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n+\n+    block.vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+    blocks.push_back(shared_pblock);\n+\n+    BuildChain(blocks.back()->GetHash(), blocks.back()->nTime, height - 1, txns, scriptPubKey, blocks);\n+}\n+\n+void TestChain100Setup::CreateSpendingTxs(int coinbase_spent_offset, std::vector<CScript>& script_pub_keys, std::vector<CMutableTransaction> &spends, CScript coinbase_script_pub_key) {",
    "path": "src/test/test_bitcoin.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`coinbase_script_pub_key` should be passed by const reference?",
    "created_at": "2018-09-05T07:32:04Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162287",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162287"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162287"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 228,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162430",
    "pull_request_review_id": 152366108,
    "id": 215162430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjQzMA==",
    "diff_hunk": "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \"   {\\n\"\n+            \"      \\\"hex\\\" : \\\"data\\\",             (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      \\\"txid\\\" : \\\"id\\\",              (string) The transaction id (same as provided)\\n\"\n+            \"      \\\"hash\\\" : \\\"id\\\",              (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"      \\\"size\\\" : n,                   (numeric) The serialized transaction size\\n\"\n+            \"      \\\"vsize\\\" : n,                  (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n+            \"      \\\"weight\\\" : n,                 (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n+            \"      \\\"version\\\" : n,                (numeric) The version\\n\"\n+            \"      \\\"locktime\\\" : ttt,             (numeric) The lock time\\n\"\n+            \"      \\\"vin\\\" : [                     (array of json objects)\\n\"\n+            \"        {\\n\"\n+            \"          \\\"txid\\\": \\\"id\\\",           (string) The transaction id\\n\"\n+            \"          \\\"vout\\\": n,                (numeric) \\n\"\n+            \"          \\\"scriptSig\\\": {            (json object) The script\\n\"\n+            \"            \\\"asm\\\": \\\"asm\\\",         (string) asm\\n\"\n+            \"            \\\"hex\\\": \\\"hex\\\"          (string) hex\\n\"\n+            \"        },\\n\"\n+            \"      \\\"sequence\\\": n                 (numeric) The script sequence number\\n\"\n+            \"      \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"    \\\"vout\\\" : [                       (array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"         \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"         \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"           \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"           \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"             \\\"address\\\"               (string) bitcoin address\\n\"\n+            \"             ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",         (string) the block hash\\n\"\n+            \"  }\\n\"\n+            \" ]\\n\"\n+            );\n+\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int skip = 0;\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        skip = request.params[2].get_int();\n+    }\n+    if (request.params.size() > 3) {\n+        if (!request.params[3].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 4 must be an integer\");\n+        }\n+        count = request.params[3].get_int();\n+    }\n+\n+    if (!g_addrindex) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addrindex->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+    std::vector<std::pair<uint256, CTransactionRef>> result;\n+    if (!g_addrindex->FindTxsByScript(scriptPubKey, result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");\n+        }\n+        return ret;\n+    }\n+\n+    std::vector<std::pair<uint256, CTransactionRef>>::const_iterator it = result.begin();\n+    while (it != result.end() && skip--) it++; // Skip first set of results as needed.",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: `++it`",
    "created_at": "2018-09-05T07:32:35Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 312,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162543",
    "pull_request_review_id": 152366243,
    "id": 215162543,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjU0Mw==",
    "diff_hunk": "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \"   {\\n\"\n+            \"      \\\"hex\\\" : \\\"data\\\",             (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      \\\"txid\\\" : \\\"id\\\",              (string) The transaction id (same as provided)\\n\"\n+            \"      \\\"hash\\\" : \\\"id\\\",              (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"      \\\"size\\\" : n,                   (numeric) The serialized transaction size\\n\"\n+            \"      \\\"vsize\\\" : n,                  (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n+            \"      \\\"weight\\\" : n,                 (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n+            \"      \\\"version\\\" : n,                (numeric) The version\\n\"\n+            \"      \\\"locktime\\\" : ttt,             (numeric) The lock time\\n\"\n+            \"      \\\"vin\\\" : [                     (array of json objects)\\n\"\n+            \"        {\\n\"\n+            \"          \\\"txid\\\": \\\"id\\\",           (string) The transaction id\\n\"\n+            \"          \\\"vout\\\": n,                (numeric) \\n\"\n+            \"          \\\"scriptSig\\\": {            (json object) The script\\n\"\n+            \"            \\\"asm\\\": \\\"asm\\\",         (string) asm\\n\"\n+            \"            \\\"hex\\\": \\\"hex\\\"          (string) hex\\n\"\n+            \"        },\\n\"\n+            \"      \\\"sequence\\\": n                 (numeric) The script sequence number\\n\"\n+            \"      \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"    \\\"vout\\\" : [                       (array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"         \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"         \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"           \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"           \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"             \\\"address\\\"               (string) bitcoin address\\n\"\n+            \"             ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",         (string) the block hash\\n\"\n+            \"  }\\n\"\n+            \" ]\\n\"\n+            );\n+\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int skip = 0;\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        skip = request.params[2].get_int();\n+    }\n+    if (request.params.size() > 3) {\n+        if (!request.params[3].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 4 must be an integer\");\n+        }\n+        count = request.params[3].get_int();\n+    }\n+\n+    if (!g_addrindex) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addrindex->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+    std::vector<std::pair<uint256, CTransactionRef>> result;\n+    if (!g_addrindex->FindTxsByScript(scriptPubKey, result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");\n+        }\n+        return ret;\n+    }\n+\n+    std::vector<std::pair<uint256, CTransactionRef>>::const_iterator it = result.begin();\n+    while (it != result.end() && skip--) it++; // Skip first set of results as needed.\n+    while (it != result.end() && count--) {\n+        const auto& tuple = *it;\n+        UniValue tx_val(UniValue::VOBJ);\n+        if (verbose) {\n+            TxToJSON(*(tuple.second), tuple.first, tx_val);\n+        } else {\n+            std::string hex_tx = EncodeHexTx(*(tuple.second), RPCSerializationFlags());\n+            tx_val.pushKV(\"hex\", hex_tx);\n+            tx_val.pushKV(\"blockhash\", tuple.first.GetHex());\n+        }\n+        ret.push_back(tx_val);\n+        it++;",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: `++it`",
    "created_at": "2018-09-05T07:32:59Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162543",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162543"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162543"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 324,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215762841",
    "pull_request_review_id": 153102413,
    "id": 215762841,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2Mjg0MQ==",
    "diff_hunk": "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {\n+    if (height <= 0) return;\n+\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus some of the passed-in txns:\n+    block.vtx.resize(1);\n+\n+    // If this is the last block, add all remaining transactions.\n+    // Otherwise add with some randomness.\n+    for (auto it = txns.begin(); it != txns.end();) {\n+        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());",
    "path": "src/test/test_bitcoin.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\ntest/test_bitcoin.cpp:194:60: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [-Wsign-compare]\r\n        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());\r\n                                        ~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\r\n```",
    "created_at": "2018-09-06T20:16:34Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215762841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215762841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215762841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215762841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 194,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763081",
    "pull_request_review_id": 153102721,
    "id": 215763081,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzA4MQ==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 110,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\nindex/addrindex.cpp:110:25: warning: loop variable 'tx_out' of type 'const CTxOut' creates a copy from type 'const CTxOut' [-Wrange-loop-analysis]\r\n        for (const auto tx_out : tx->vout){\r\n                        ^\r\nindex/addrindex.cpp:110:14: note: use reference type 'const CTxOut &' to prevent copying\r\n        for (const auto tx_out : tx->vout){\r\n             ^~~~~~~~~~~~~~~~~~~\r\n```",
    "created_at": "2018-09-06T20:17:28Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763081",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763081"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763081"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763177",
    "pull_request_review_id": 153102835,
    "id": 215763177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzE3Nw==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here - see above.",
    "created_at": "2018-09-06T20:17:47Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763264",
    "pull_request_review_id": 153102932,
    "id": 215763264,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzI2NA==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {\n+    const uint64_t block_hash_bits = block->GetHash().GetUint64(0);\n+    std::unordered_set<uint64_t> addr_ids_to_remove;\n+\n+    {\n+        LOCK(cs_main);\n+        CCoinsViewCache view(pcoinsTip.get());\n+\n+        // Collect all addr_ids from txs in this block.\n+        for (const auto& tx : block->vtx) {\n+            for (const auto tx_out : tx->vout){",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 168,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here - see above.",
    "created_at": "2018-09-06T20:18:04Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763264",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763264"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763264"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 168,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763353",
    "pull_request_review_id": 153103042,
    "id": 215763353,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzM1Mw==",
    "diff_hunk": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {\n+    const uint64_t block_hash_bits = block->GetHash().GetUint64(0);\n+    std::unordered_set<uint64_t> addr_ids_to_remove;\n+\n+    {\n+        LOCK(cs_main);\n+        CCoinsViewCache view(pcoinsTip.get());\n+\n+        // Collect all addr_ids from txs in this block.\n+        for (const auto& tx : block->vtx) {\n+            for (const auto tx_out : tx->vout){\n+                addr_ids_to_remove.emplace(GetAddrID(tx_out.scriptPubKey));\n+            }\n+\n+            if (!tx->IsCoinBase()) {\n+                for (const auto tx_in : tx->vin){",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 173,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here - see above.",
    "created_at": "2018-09-06T20:18:20Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763353",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763353"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763353"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 173,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763499",
    "pull_request_review_id": 153103233,
    "id": 215763499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzQ5OQ==",
    "diff_hunk": "@@ -0,0 +1,418 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(addrindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_initial_sync, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+\n+    CTransactionRef tx_disk;\n+    uint256 block_hash;\n+\n+    // Transactions should not be found in the index before it is started.\n+    for (const auto& txn : m_coinbase_txns) {\n+        for (const auto& out : txn->vout) {\n+            std::vector<std::pair<uint256, CTransactionRef>> txs;\n+            BOOST_CHECK(!addr_index.FindTxsByScript(out.scriptPubKey, txs));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before addrindex is started.\n+    BOOST_CHECK(!addr_index.BlockUntilSyncedToCurrentChain());\n+    addr_index.Start();\n+\n+    // Allow addrindex to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!addr_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that addrindex has all addresses sent to that were in the chain before it started.\n+    for (const auto& txn : m_coinbase_txns) {\n+        uint256 tx_hash = txn->GetHash();\n+        for (const auto& out : txn->vout) {\n+            std::vector<std::pair<uint256, CTransactionRef>> txs;\n+            if (!addr_index.FindTxsByScript(out.scriptPubKey, txs)) {\n+                    BOOST_ERROR(\"FindTxsByScript failed\");\n+            }\n+\n+            // Confirm that the transaction's destination is in the index.\n+            bool found_tx = false;\n+            for (const auto& tuple : txs) {\n+                if (tuple.second->GetHash() == tx_hash) {\n+                    found_tx = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!found_tx) {\n+                BOOST_ERROR(\"Transaction not found by destination\");\n+            }\n+        }\n+    }\n+\n+    // Check that new transactions in new blocks make it into the index.\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    for (int i = 0; i < 10; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CTransaction& txn = *block.vtx[0];\n+\n+        BOOST_CHECK(addr_index.BlockUntilSyncedToCurrentChain());\n+\n+        uint256 tx_hash = txn.GetHash();\n+        std::vector<std::pair<uint256, CTransactionRef>> txs;\n+        if (!addr_index.FindTxsByScript(coinbase_script_pub_key, txs)) {\n+            BOOST_ERROR(\"FindTransactionsByDestionation failed\");\n+        }\n+\n+        // Every coinbase tx sends to the same address so we should expect the number of txs\n+        // for this address to increase with each tx we add.\n+        BOOST_CHECK_EQUAL(txs.size(), i + 1);\n+\n+        // Confirm that the transaction's destination is in the index.\n+        bool found_tx = false;\n+        for (const auto& tuple : txs) {\n+            if (tuple.second->GetHash() == tx_hash) {\n+                found_tx = true;\n+                break;\n+            }\n+        }\n+\n+        if (!found_tx) {\n+            BOOST_ERROR(\"Transaction not found by destination\");\n+        }\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_many_spends, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+    addr_index.Start();\n+\n+    // Mine blocks for coinbase maturity, so we can spend some coinbase outputs in the test.\n+    CScript coinbase_script_pub_key = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < 20; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);",
    "path": "src/test/addrindex_tests.cpp",
    "position": null,
    "original_position": 112,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\ntest/addrindex_tests.cpp:112:23: warning: unused variable 'block' [-Wunused-variable]\r\n        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\r\n                      ^\r\n```",
    "created_at": "2018-09-06T20:18:50Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 33,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216033759",
    "pull_request_review_id": 153436851,
    "id": 216033759,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAzMzc1OQ==",
    "diff_hunk": "@@ -1611,6 +1625,13 @@ bool AppInitMain()\n         g_txindex->Start();\n     }\n \n+    if (gArgs.GetBoolArg(\"-addrindex\", DEFAULT_ADDRINDEX)) {\n+        if (!g_txindex)\n+            InitWarning(_(\"-txindex must be enabled for -addrindex to index spends from addresses.\"));",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggest dropping \"to index spends from addresses\"; if someone configures `addrindex=` I assume they know why. Also prevents a long debate :-)",
    "created_at": "2018-09-07T17:35:14Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216033759",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216033759"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216033759"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216033759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1630,
    "side": "RIGHT",
    "in_reply_to_id": 214013007
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216034219",
    "pull_request_review_id": 153436851,
    "id": 216034219,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAzNDIxOQ==",
    "diff_hunk": "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {\n+    if (height <= 0) return;\n+\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus some of the passed-in txns:\n+    block.vtx.resize(1);\n+\n+    // If this is the last block, add all remaining transactions.\n+    // Otherwise add with some randomness.\n+    for (auto it = txns.begin(); it != txns.end();) {\n+        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());",
    "path": "src/test/test_bitcoin.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@MarcoFalke why is it again that Travis doesn't fail on warnings?",
    "created_at": "2018-09-07T17:37:02Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216034219",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216034219"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216034219"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216034219/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 194,
    "side": "RIGHT",
    "in_reply_to_id": 215762841
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216037366",
    "pull_request_review_id": 153436851,
    "id": 216037366,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAzNzM2Ng==",
    "diff_hunk": "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \"   {\\n\"\n+            \"      \\\"hex\\\" : \\\"data\\\",             (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      \\\"txid\\\" : \\\"id\\\",              (string) The transaction id (same as provided)\\n\"\n+            \"      \\\"hash\\\" : \\\"id\\\",              (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"      \\\"size\\\" : n,                   (numeric) The serialized transaction size\\n\"\n+            \"      \\\"vsize\\\" : n,                  (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n+            \"      \\\"weight\\\" : n,                 (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n+            \"      \\\"version\\\" : n,                (numeric) The version\\n\"\n+            \"      \\\"locktime\\\" : ttt,             (numeric) The lock time\\n\"\n+            \"      \\\"vin\\\" : [                     (array of json objects)\\n\"\n+            \"        {\\n\"\n+            \"          \\\"txid\\\": \\\"id\\\",           (string) The transaction id\\n\"\n+            \"          \\\"vout\\\": n,                (numeric) \\n\"\n+            \"          \\\"scriptSig\\\": {            (json object) The script\\n\"\n+            \"            \\\"asm\\\": \\\"asm\\\",         (string) asm\\n\"\n+            \"            \\\"hex\\\": \\\"hex\\\"          (string) hex\\n\"\n+            \"        },\\n\"\n+            \"      \\\"sequence\\\": n                 (numeric) The script sequence number\\n\"\n+            \"      \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"    \\\"vout\\\" : [                       (array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"         \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"         \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"           \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"           \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"             \\\"address\\\"               (string) bitcoin address\\n\"\n+            \"             ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",         (string) the block hash\\n\"\n+            \"  }\\n\"\n+            \" ]\\n\"\n+            );\n+\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int skip = 0;\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        skip = request.params[2].get_int();\n+    }\n+    if (request.params.size() > 3) {\n+        if (!request.params[3].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 4 must be an integer\");\n+        }\n+        count = request.params[3].get_int();\n+    }\n+\n+    if (!g_addrindex) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addrindex->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+    std::vector<std::pair<uint256, CTransactionRef>> result;\n+    if (!g_addrindex->FindTxsByScript(scriptPubKey, result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 100,
    "original_position": 111,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `Blockchain transactions are still in the process of being indexed` warning should always be shown, because there might be missing transactions while indexing is in progress (`txindex` doesn't have that problem).",
    "created_at": "2018-09-07T17:47:50Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216037366",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216037366"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216037366"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216037366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 313,
    "original_line": 313,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691273",
    "pull_request_review_id": 157931838,
    "id": 219691273,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTI3Mw==",
    "diff_hunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    BaseIndex::DB& GetDB() const override;\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;\n+\n+    const char* GetName() const override { return \"addrindex\"; }\n+\n+public:\n+    /// Constructs the index, which becomes available to be queried.\n+    explicit AddrIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n+    virtual ~AddrIndex() override;",
    "path": "src/index/addrindex.h",
    "position": null,
    "original_position": 44,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "4865275573a56abb9e079d8a4ff5957c3694c583",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 21:20:09 cpplint(pr=14053): src/index/addrindex.h:44:  \"virtual\" is redundant since function is already declared as \"override\"  [readability/inheritance] [4]\r\n```",
    "created_at": "2018-09-23T07:59:48Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691273",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691273"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691273"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509440",
    "pull_request_review_id": 195908542,
    "id": 250509440,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDUwOTQ0MA==",
    "diff_hunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(addrindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_initial_sync_and_spends, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+    CScript coinbase_script_pub_key = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Transactions should not be found in the index before it is started.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations;\n+    BOOST_CHECK(!addr_index.FindTxsByScript(coinbase_script_pub_key, spends, creations));\n+\n+    // BlockUntilSyncedToCurrentChain should return false before addrindex is started.\n+    BOOST_CHECK(!addr_index.BlockUntilSyncedToCurrentChain());\n+    addr_index.Start();\n+\n+    // Mine blocks for coinbase maturity, so we can spend some coinbase outputs in the test.\n+    for (int i = 0; i < 20; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    }\n+\n+    // Allow addrindex to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!addr_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that addrindex has all coinbase outputs indexed.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends2;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations2;\n+    if (!addr_index.FindTxsByScript(coinbase_script_pub_key, spends2, creations2)) {\n+            BOOST_ERROR(\"FindTxsByScript failed\");\n+    }\n+    // The coinbase transactions have the same scriptPubKey in their output.\n+    BOOST_CHECK_EQUAL(spends2.size(), 0);\n+    BOOST_CHECK_EQUAL(creations2.size(), 120);\n+\n+    // Create several new key pairs to test sending to many different addresses in the same block.\n+    std::vector<CKey> priv_keys(10);\n+    std::vector<CScript> script_pub_keys(10);\n+    for (int i = 0; i < 10; i++) {\n+        priv_keys[i].MakeNewKey(true);\n+        script_pub_keys[i] = CScript() <<  ToByteVector(priv_keys[i].GetPubKey()) << OP_CHECKSIG;\n+    }\n+\n+    // Create a transaction sending to each of the new addresses.\n+    std::vector<CMutableTransaction> spend_txns(10);\n+    CreateSpendingTxs(0, script_pub_keys, spend_txns, coinbase_script_pub_key);\n+\n+    const CBlock& block = CreateAndProcessBlock(spend_txns, coinbase_script_pub_key);\n+    const uint256 block_hash = block.GetHash();\n+    BOOST_CHECK(addr_index.BlockUntilSyncedToCurrentChain()); // Let the address index catch up.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block_hash); // Sanity check to make sure this block is actually being used.\n+\n+    // Now check that all the addresses we sent to are present in the index.\n+    for (int i = 0; i < 10; i++) {\n+        std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;",
    "path": "src/test/addrindex_tests.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "fc075a0d94bcc5b8453da5da3ac78614c76470df",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`spends` shadows a variable existing in the outer scope.",
    "created_at": "2019-01-24T08:48:21Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509440",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509440"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509440"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509491",
    "pull_request_review_id": 195908614,
    "id": 250509491,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDUwOTQ5MQ==",
    "diff_hunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(addrindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_initial_sync_and_spends, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+    CScript coinbase_script_pub_key = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Transactions should not be found in the index before it is started.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations;\n+    BOOST_CHECK(!addr_index.FindTxsByScript(coinbase_script_pub_key, spends, creations));\n+\n+    // BlockUntilSyncedToCurrentChain should return false before addrindex is started.\n+    BOOST_CHECK(!addr_index.BlockUntilSyncedToCurrentChain());\n+    addr_index.Start();\n+\n+    // Mine blocks for coinbase maturity, so we can spend some coinbase outputs in the test.\n+    for (int i = 0; i < 20; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    }\n+\n+    // Allow addrindex to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!addr_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that addrindex has all coinbase outputs indexed.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends2;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations2;\n+    if (!addr_index.FindTxsByScript(coinbase_script_pub_key, spends2, creations2)) {\n+            BOOST_ERROR(\"FindTxsByScript failed\");\n+    }\n+    // The coinbase transactions have the same scriptPubKey in their output.\n+    BOOST_CHECK_EQUAL(spends2.size(), 0);\n+    BOOST_CHECK_EQUAL(creations2.size(), 120);\n+\n+    // Create several new key pairs to test sending to many different addresses in the same block.\n+    std::vector<CKey> priv_keys(10);\n+    std::vector<CScript> script_pub_keys(10);\n+    for (int i = 0; i < 10; i++) {\n+        priv_keys[i].MakeNewKey(true);\n+        script_pub_keys[i] = CScript() <<  ToByteVector(priv_keys[i].GetPubKey()) << OP_CHECKSIG;\n+    }\n+\n+    // Create a transaction sending to each of the new addresses.\n+    std::vector<CMutableTransaction> spend_txns(10);\n+    CreateSpendingTxs(0, script_pub_keys, spend_txns, coinbase_script_pub_key);\n+\n+    const CBlock& block = CreateAndProcessBlock(spend_txns, coinbase_script_pub_key);\n+    const uint256 block_hash = block.GetHash();\n+    BOOST_CHECK(addr_index.BlockUntilSyncedToCurrentChain()); // Let the address index catch up.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block_hash); // Sanity check to make sure this block is actually being used.\n+\n+    // Now check that all the addresses we sent to are present in the index.\n+    for (int i = 0; i < 10; i++) {\n+        std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;\n+        std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations;",
    "path": "src/test/addrindex_tests.cpp",
    "position": null,
    "original_position": 74,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "fc075a0d94bcc5b8453da5da3ac78614c76470df",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here but for `creations`.",
    "created_at": "2019-01-24T08:48:33Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509491",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509491"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509491"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363953762",
    "pull_request_review_id": 339511029,
    "id": 363953762,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1Mzc2Mg==",
    "diff_hunk": "@@ -135,6 +135,8 @@ BITCOIN_CORE_H = \\\n   httpserver.h \\\n   index/base.h \\\n   index/blockfilterindex.h \\\n+  index/addrindex.h \\\n+  index/disktxpos.h \\",
    "path": "src/Makefile.am",
    "position": 7,
    "original_position": 5,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: this is added in the wrong commit (should be in _Move only: Move CDiskTxPos to own file_, not _Add address index_)",
    "created_at": "2020-01-07T21:14:19Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363953762",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363953762"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363953762"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363953762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 145,
    "original_line": 145,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363956015",
    "pull_request_review_id": 339511029,
    "id": 363956015,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1NjAxNQ==",
    "diff_hunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+#include <undo.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+    // m_hash_seed is used by GetAddrID in its calls to MurmurHash3.\n+    // It is stored in the index, and restored from their on construction",
    "path": "src/index/addrindex.h",
    "position": null,
    "original_position": 32,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "spelling: there",
    "created_at": "2020-01-07T21:19:58Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363956015",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363956015"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363956015"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363956015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363963378",
    "pull_request_review_id": 339511029,
    "id": 363963378,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MzM3OA==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure if this is actually needed. The other indexes have different prefixes for the different object types that they store, but all objects in this index are given the same prefix, so is it necessary?",
    "created_at": "2020-01-07T21:38:17Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363963378",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363963378"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363963378"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363963378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363965804",
    "pull_request_review_id": 339511029,
    "id": 363965804,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NTgwNA==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 126,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does this branch need to advance the iterator? If not, I think `value` will be the same the next time round and we'll never break out of this loop.\r\n\r\nI think the following is what we want:\r\n\r\n```\r\n    ...\r\n    if (value.second == script) {\r\n        result.emplace_back(std::make_pair(key, value));\r\n    }\r\n\r\n    iter->Next();\r\n}\r\n```",
    "created_at": "2020-01-07T21:44:27Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363965804",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363965804"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363965804"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363965804/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363967426",
    "pull_request_review_id": 339511029,
    "id": 363967426,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NzQyNg==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;\n+\n+        result.emplace_back(std::make_pair(key, value));\n+        iter->Next();\n+    }\n+\n+    return result;\n+}\n+\n+bool AddrIndex::Init() {\n+        m_hash_seed = m_db->SetupHashSeed();\n+        return BaseIndex::Init();\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)) {}\n+\n+unsigned int AddrIndex::DB::SetupHashSeed() {\n+    static const auto seed_key = std::make_pair(DB_ADDR_INDEX, static_cast<uint8_t>(DBKeyType::SEED));\n+    unsigned int seed;\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    std::pair<char, uint8_t> key;\n+\n+    // If key is in the index already, read it and return.\n+    iter->Seek(seed_key);\n+    if (iter->Valid() && iter->GetKey(key) && key == seed_key && iter->GetValue(seed)) {\n+        return seed;\n+    }\n+\n+    // Generate a random key and write it to the index.\n+    seed = GetRandInt(std::numeric_limits<int>::max());\n+    Write(seed_key, seed);\n+    return seed;\n+}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+unsigned int AddrIndex::GetAddrId(const CScript& script) {\n+    std::vector<unsigned char> script_data;\n+    for (auto it = script.begin(); it != script.end(); ++it) {\n+        script_data.push_back(*it);\n+    }\n+    return MurmurHash3(m_hash_seed, script_data);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<DBKey, DBValue>> entries;\n+\n+    const bool not_genesis_block = (pindex->nHeight > 0);",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 178,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "style nit: having a variable defined as `not_thing` seems unintuitive to me. I think it'd be better to define `genesis` and then test on `!genesis`.",
    "created_at": "2020-01-07T21:48:29Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363967426",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363967426"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363967426"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363967426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 178,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363971325",
    "pull_request_review_id": 339511029,
    "id": 363971325,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk3MTMyNQ==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;\n+\n+        result.emplace_back(std::make_pair(key, value));\n+        iter->Next();\n+    }\n+\n+    return result;\n+}\n+\n+bool AddrIndex::Init() {\n+        m_hash_seed = m_db->SetupHashSeed();\n+        return BaseIndex::Init();\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)) {}\n+\n+unsigned int AddrIndex::DB::SetupHashSeed() {\n+    static const auto seed_key = std::make_pair(DB_ADDR_INDEX, static_cast<uint8_t>(DBKeyType::SEED));\n+    unsigned int seed;\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    std::pair<char, uint8_t> key;\n+\n+    // If key is in the index already, read it and return.\n+    iter->Seek(seed_key);\n+    if (iter->Valid() && iter->GetKey(key) && key == seed_key && iter->GetValue(seed)) {\n+        return seed;\n+    }\n+\n+    // Generate a random key and write it to the index.\n+    seed = GetRandInt(std::numeric_limits<int>::max());\n+    Write(seed_key, seed);\n+    return seed;\n+}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+unsigned int AddrIndex::GetAddrId(const CScript& script) {\n+    std::vector<unsigned char> script_data;\n+    for (auto it = script.begin(); it != script.end(); ++it) {\n+        script_data.push_back(*it);\n+    }\n+    return MurmurHash3(m_hash_seed, script_data);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<DBKey, DBValue>> entries;\n+\n+    const bool not_genesis_block = (pindex->nHeight > 0);\n+    if (not_genesis_block && !UndoReadFromDisk(block_undo, pindex)) {\n+      return false;\n+    }\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *(block.vtx[i]);\n+        const uint256 tx_hash = tx.GetHash();\n+        for (size_t j = 0; j < tx.vout.size(); ++j) {\n+            CScript script_pub_key = tx.vout[j].scriptPubKey;\n+            DBKey key(DBKeyType::CREATED, GetAddrId(script_pub_key), COutPoint(tx_hash, j));\n+            entries.emplace_back(key, std::make_pair(pos, script_pub_key));\n+        }\n+\n+        // Skip coinbase inputs.\n+        if (not_genesis_block && i > 0) {\n+            const CTxUndo& tx_undo = block_undo.vtxundo[i-1];\n+            for (size_t k = 0; k < tx.vin.size(); ++k) {\n+                CScript spent_outputs_scriptpubkey = tx_undo.vprevout[k].out.scriptPubKey;\n+                DBKey key(DBKeyType::SPENT, GetAddrId(spent_outputs_scriptpubkey), tx.vin[k].prevout);",
    "path": "src/index/addrindex.cpp",
    "position": 209,
    "original_position": 197,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this isn't the information that we want to save in the address index. For a given scriptPubKey, a user wants to know:\r\n\r\n- which txouts (txid, output index) spent to that scriptPubKey (the CREATED DBKeyType above)\r\n- which txins (txid, input index) consume UTXOs for that scriptPubKey (the SPENT DBKeyType here)\r\n\r\nSo here, I think you want to save the txid and input index spending the coin. You're actually saving the txid and output index that creates the coin, because you're using the prevout.\r\n\r\n(I'm not entirely sure about this. Perhaps you are trying to return the outpoint that created the coin in the spent outputs array, but that's not clear to me from the RPC documentation).",
    "created_at": "2020-01-07T21:57:55Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363971325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363971325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363971325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363971325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 209,
    "original_line": 209,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363973201",
    "pull_request_review_id": 339511029,
    "id": 363973201,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk3MzIwMQ==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+             RPCHelpMan{ \"searchrawtransactions\\n\",\n+            \"\\nReturns raw transactions that contain outputs with the given script/address, and outpoint information for those outputs.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, /* default_val */ \"\", \"address or scriptPubKey\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, /* default_val */ \"false\", \"If false, return hex-encoded tx, otherwise return a json object\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default_val */ \"\", \"The block in which to look for the transaction\"},",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"The block in which to look for the transaction\" is wrong",
    "created_at": "2020-01-07T22:02:33Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363973201",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363973201"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363973201"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363973201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 227,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363976031",
    "pull_request_review_id": 339511029,
    "id": 363976031,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk3NjAzMQ==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+             RPCHelpMan{ \"searchrawtransactions\\n\",\n+            \"\\nReturns raw transactions that contain outputs with the given script/address, and outpoint information for those outputs.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, /* default_val */ \"\", \"address or scriptPubKey\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, /* default_val */ \"false\", \"If false, return hex-encoded tx, otherwise return a json object\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default_val */ \"\", \"The block in which to look for the transaction\"},\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I suggest you make this an object with two keys: `creates` and `spends`",
    "created_at": "2020-01-07T22:10:07Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363976031",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363976031"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363976031"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363976031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 232,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364043704",
    "pull_request_review_id": 339621545,
    "id": 364043704,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MzcwNA==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\r\n```",
    "created_at": "2020-01-08T02:45:03Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364043704",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364043704"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364043704"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364043704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 218,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364044637",
    "pull_request_review_id": 339622658,
    "id": 364044637,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0NDYzNw==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+             RPCHelpMan{ \"searchrawtransactions\\n\",\n+            \"\\nReturns raw transactions that contain outputs with the given script/address, and outpoint information for those outputs.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, /* default_val */ \"\", \"address or scriptPubKey\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, /* default_val */ \"false\", \"If false, return hex-encoded tx, otherwise return a json object\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default_val */ \"\", \"The block in which to look for the transaction\"},",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The default value is implicitly 100. It should be explicitly defined here.",
    "created_at": "2020-01-08T02:50:16Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364044637",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364044637"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364044637"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364044637/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 227,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364047738",
    "pull_request_review_id": 339626587,
    "id": 364047738,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0NzczOA==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;\n+\n+        result.emplace_back(std::make_pair(key, value));\n+        iter->Next();\n+    }\n+\n+    return result;\n+}\n+\n+bool AddrIndex::Init() {\n+        m_hash_seed = m_db->SetupHashSeed();\n+        return BaseIndex::Init();\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)) {}\n+\n+unsigned int AddrIndex::DB::SetupHashSeed() {\n+    static const auto seed_key = std::make_pair(DB_ADDR_INDEX, static_cast<uint8_t>(DBKeyType::SEED));\n+    unsigned int seed;\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    std::pair<char, uint8_t> key;\n+\n+    // If key is in the index already, read it and return.\n+    iter->Seek(seed_key);\n+    if (iter->Valid() && iter->GetKey(key) && key == seed_key && iter->GetValue(seed)) {\n+        return seed;\n+    }\n+\n+    // Generate a random key and write it to the index.\n+    seed = GetRandInt(std::numeric_limits<int>::max());\n+    Write(seed_key, seed);\n+    return seed;\n+}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+unsigned int AddrIndex::GetAddrId(const CScript& script) {\n+    std::vector<unsigned char> script_data;\n+    for (auto it = script.begin(); it != script.end(); ++it) {\n+        script_data.push_back(*it);\n+    }\n+    return MurmurHash3(m_hash_seed, script_data);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<DBKey, DBValue>> entries;\n+\n+    const bool not_genesis_block = (pindex->nHeight > 0);\n+    if (not_genesis_block && !UndoReadFromDisk(block_undo, pindex)) {\n+      return false;\n+    }\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *(block.vtx[i]);\n+        const uint256 tx_hash = tx.GetHash();\n+        for (size_t j = 0; j < tx.vout.size(); ++j) {\n+            CScript script_pub_key = tx.vout[j].scriptPubKey;\n+            DBKey key(DBKeyType::CREATED, GetAddrId(script_pub_key), COutPoint(tx_hash, j));\n+            entries.emplace_back(key, std::make_pair(pos, script_pub_key));\n+        }\n+\n+        // Skip coinbase inputs.\n+        if (not_genesis_block && i > 0) {\n+            const CTxUndo& tx_undo = block_undo.vtxundo[i-1];\n+            for (size_t k = 0; k < tx.vin.size(); ++k) {\n+                CScript spent_outputs_scriptpubkey = tx_undo.vprevout[k].out.scriptPubKey;\n+                DBKey key(DBKeyType::SPENT, GetAddrId(spent_outputs_scriptpubkey), tx.vin[k].prevout);\n+                entries.emplace_back(key, std::make_pair(pos, spent_outputs_scriptpubkey));\n+            }\n+        }\n+        pos.nTxOffset += ::GetSerializeSize(tx, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(entries);\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& entry : entries) {\n+        batch.Write(entry.first, entry.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+// FindTxsByScript fills the spends_result vector with outpoints corresponding\n+// to the output spent with the given script, and the transaction it was spent\n+// in. creations_result is filled with outpoints for outputs created with this\n+// script as their script pubkey, and the transactions they were created in.\n+bool AddrIndex::FindTxsByScript(const CScript& script,",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 220,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shouldn't this method take the count as a parameter and return early when enough entries are found?",
    "created_at": "2020-01-08T03:09:17Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364047738",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364047738"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364047738"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364047738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 220,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364048337",
    "pull_request_review_id": 339627272,
    "id": 364048337,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0ODMzNw==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+             RPCHelpMan{ \"searchrawtransactions\\n\",\n+            \"\\nReturns raw transactions that contain outputs with the given script/address, and outpoint information for those outputs.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, /* default_val */ \"\", \"address or scriptPubKey\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, /* default_val */ \"false\", \"If false, return hex-encoded tx, otherwise return a json object\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default_val */ \"\", \"The block in which to look for the transaction\"},\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \" [                                    (array of json objects) outpoint/tx pairs for spent outputs with this scriptPubKey\\n\"\n+            \"   {\\n\"\n+            \"      \\\"spent_outpoint\\\" : \\n\"\n+            \"      {\\n\"\n+            \"        \\\"txid\\\" : \\\"id\\\",            (string) The transaction id\\n\"\n+            \"        \\\"hex\\\" : \\\"data\\\",           (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      }\\n\"\n+            \"      (raw transaction OR hex-encoded transaction) \\n\"\n+            \"   }\\n\"\n+            \" ],\\n\"\n+            \"     \\n\"\n+            \" [                                    (array of json objects) outpoint/tx pairs for outputs created with this scriptPubKey\\n\"\n+            \"   {\\n\"\n+            \"      \\\"created_outpoint\\\" : \\n\"\n+            \"      {\\n\"\n+            \"        \\\"txid\\\" : \\\"id\\\",            (string) The transaction id\\n\"\n+            \"        \\\"hex\\\" : \\\"data\\\",           (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      }\\n\"\n+            \"      (raw transaction OR hex-encoded transaction) \\n\"\n+            \"   }\\n\"\n+            \" ],\\n\"\n+            \" ]\\n\"\n+                },\n+            },\n+            RPCExamples{\n+                    HelpExampleCli(\"searchrawtransactions\", \"\\\"address\\\"\")\n+        + HelpExampleCli(\"searchrawtransactions\", \"\\\"address\\\" true\")\n+            },\n+        }.ToString());\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        count = request.params[2].get_int();\n+    }\n+\n+    if (!g_addr_index) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addr_index->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends_result;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations_result;\n+    if (!g_addr_index->FindTxsByScript(scriptPubKey, spends_result, creations_result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");\n+        }\n+        return ret;\n+    }\n+\n+    UniValue spends(UniValue::VARR);\n+    UniValue creations(UniValue::VARR);\n+\n+    auto spends_it = spends_result.begin();\n+    while (spends_it != spends_result.end() && count--) {\n+        const auto& spend = *spends_it;\n+        UniValue tx_val(UniValue::VOBJ);\n+\n+        UniValue outpoint_val(UniValue::VOBJ);\n+        outpoint_val.pushKV(\"txid\", spend.first.hash.GetHex());\n+        outpoint_val.pushKV(\"n\", static_cast<int>(spend.first.n));\n+\n+        tx_val.pushKV(\"spent_outpoint\", outpoint_val);\n+        if (verbose) {\n+            TxToJSON(*(spend.second.first), spend.second.second, tx_val);\n+        } else {\n+            std::string hex_tx = EncodeHexTx(*(spend.second.first), RPCSerializationFlags());\n+            tx_val.pushKV(\"hex\", hex_tx);\n+        }\n+        spends.push_back(tx_val);\n+        ++spends_it;\n+    }",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 126,
    "original_position": 121,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If there are more spends than `count` then no creates will be returned. Ideally the spends and creates will be returned in order, rather than all spends first.",
    "created_at": "2020-01-08T03:13:01Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364048337",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364048337"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364048337"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364048337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 339,
    "original_line": 339,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364048499",
    "pull_request_review_id": 339627472,
    "id": 364048499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0ODQ5OQ==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There doesn't seem to be a way to skip transactions anymore. Was this removed intentionally?",
    "created_at": "2020-01-08T03:14:01Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364048499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364048499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364048499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364048499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 223,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364324758",
    "pull_request_review_id": 339988317,
    "id": 364324758,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyNDc1OA==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 123,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "e739288bd5eadfd4f684b869a2e8067a1406052e",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do you want to log or throw something here? If I understand the LevelDB docs correctly, you have what LevelDB says is a valid iterator which should be positioned at the key. I think if any of these return false you'd want to know as the DB could be corrupted.",
    "created_at": "2020-01-08T16:31:43Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364324758",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364324758"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364324758"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364324758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 123,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364329232",
    "pull_request_review_id": 339994050,
    "id": 364329232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyOTIzMg==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 123,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "e739288bd5eadfd4f684b869a2e8067a1406052e",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think in general it would be nice if this class did some of the error logging that I see in `blockfilterindex.cpp`.  ",
    "created_at": "2020-01-08T16:40:09Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364329232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364329232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364329232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364329232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 123,
    "side": "RIGHT",
    "in_reply_to_id": 364324758
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364353217",
    "pull_request_review_id": 340025939,
    "id": 364353217,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1MzIxNw==",
    "diff_hunk": "@@ -487,6 +486,44 @@ def run_test(self):\n         assert_equal(testres['allowed'], True)\n         self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'], maxfeerate='0.20000000')\n \n+        self._test_searchrawtransactions()\n+\n+    def _test_searchrawtransactions(self):",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 23,
    "original_position": 32,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please also test the spends_results path (returning transactions which spend from this address).",
    "created_at": "2020-01-08T17:31:40Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364353217",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364353217"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364353217"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364353217/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 494,
    "original_line": 494,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364361434",
    "pull_request_review_id": 340036491,
    "id": 364361434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM2MTQzNA==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;\n+\n+        result.emplace_back(std::make_pair(key, value));\n+        iter->Next();\n+    }\n+\n+    return result;\n+}\n+\n+bool AddrIndex::Init() {\n+        m_hash_seed = m_db->SetupHashSeed();\n+        return BaseIndex::Init();\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)) {}\n+\n+unsigned int AddrIndex::DB::SetupHashSeed() {\n+    static const auto seed_key = std::make_pair(DB_ADDR_INDEX, static_cast<uint8_t>(DBKeyType::SEED));\n+    unsigned int seed;\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    std::pair<char, uint8_t> key;\n+\n+    // If key is in the index already, read it and return.\n+    iter->Seek(seed_key);\n+    if (iter->Valid() && iter->GetKey(key) && key == seed_key && iter->GetValue(seed)) {\n+        return seed;\n+    }\n+\n+    // Generate a random key and write it to the index.\n+    seed = GetRandInt(std::numeric_limits<int>::max());\n+    Write(seed_key, seed);\n+    return seed;\n+}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+unsigned int AddrIndex::GetAddrId(const CScript& script) {\n+    std::vector<unsigned char> script_data;\n+    for (auto it = script.begin(); it != script.end(); ++it) {\n+        script_data.push_back(*it);\n+    }\n+    return MurmurHash3(m_hash_seed, script_data);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<DBKey, DBValue>> entries;\n+\n+    const bool not_genesis_block = (pindex->nHeight > 0);\n+    if (not_genesis_block && !UndoReadFromDisk(block_undo, pindex)) {\n+      return false;\n+    }\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *(block.vtx[i]);\n+        const uint256 tx_hash = tx.GetHash();\n+        for (size_t j = 0; j < tx.vout.size(); ++j) {\n+            CScript script_pub_key = tx.vout[j].scriptPubKey;\n+            DBKey key(DBKeyType::CREATED, GetAddrId(script_pub_key), COutPoint(tx_hash, j));\n+            entries.emplace_back(key, std::make_pair(pos, script_pub_key));\n+        }\n+\n+        // Skip coinbase inputs.\n+        if (not_genesis_block && i > 0) {\n+            const CTxUndo& tx_undo = block_undo.vtxundo[i-1];\n+            for (size_t k = 0; k < tx.vin.size(); ++k) {\n+                CScript spent_outputs_scriptpubkey = tx_undo.vprevout[k].out.scriptPubKey;\n+                DBKey key(DBKeyType::SPENT, GetAddrId(spent_outputs_scriptpubkey), tx.vin[k].prevout);",
    "path": "src/index/addrindex.cpp",
    "position": 209,
    "original_position": 197,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I *think* this is correct because he is using the prevout in the *key*. When looking up by this script with this outpoint, one would want to find this transaction because it spends this outpoint.\r\n\r\nAFAICT the value just contains the position of the relevant transaction on disk and the scriptPubKey (to detect collisions).  The value does not contain any indexes into inputs or outputs.",
    "created_at": "2020-01-08T17:50:39Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364361434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364361434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364361434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364361434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 209,
    "original_line": 209,
    "side": "RIGHT",
    "in_reply_to_id": 363971325
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364363443",
    "pull_request_review_id": 340039105,
    "id": 364363443,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM2MzQ0Mw==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;\n+\n+        result.emplace_back(std::make_pair(key, value));\n+        iter->Next();\n+    }\n+\n+    return result;\n+}\n+\n+bool AddrIndex::Init() {\n+        m_hash_seed = m_db->SetupHashSeed();\n+        return BaseIndex::Init();\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)) {}\n+\n+unsigned int AddrIndex::DB::SetupHashSeed() {\n+    static const auto seed_key = std::make_pair(DB_ADDR_INDEX, static_cast<uint8_t>(DBKeyType::SEED));\n+    unsigned int seed;\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    std::pair<char, uint8_t> key;\n+\n+    // If key is in the index already, read it and return.\n+    iter->Seek(seed_key);\n+    if (iter->Valid() && iter->GetKey(key) && key == seed_key && iter->GetValue(seed)) {\n+        return seed;\n+    }\n+\n+    // Generate a random key and write it to the index.\n+    seed = GetRandInt(std::numeric_limits<int>::max());\n+    Write(seed_key, seed);\n+    return seed;\n+}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+unsigned int AddrIndex::GetAddrId(const CScript& script) {\n+    std::vector<unsigned char> script_data;\n+    for (auto it = script.begin(); it != script.end(); ++it) {\n+        script_data.push_back(*it);\n+    }\n+    return MurmurHash3(m_hash_seed, script_data);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<DBKey, DBValue>> entries;\n+\n+    const bool not_genesis_block = (pindex->nHeight > 0);\n+    if (not_genesis_block && !UndoReadFromDisk(block_undo, pindex)) {\n+      return false;\n+    }\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *(block.vtx[i]);\n+        const uint256 tx_hash = tx.GetHash();\n+        for (size_t j = 0; j < tx.vout.size(); ++j) {\n+            CScript script_pub_key = tx.vout[j].scriptPubKey;\n+            DBKey key(DBKeyType::CREATED, GetAddrId(script_pub_key), COutPoint(tx_hash, j));\n+            entries.emplace_back(key, std::make_pair(pos, script_pub_key));\n+        }\n+\n+        // Skip coinbase inputs.\n+        if (not_genesis_block && i > 0) {\n+            const CTxUndo& tx_undo = block_undo.vtxundo[i-1];\n+            for (size_t k = 0; k < tx.vin.size(); ++k) {\n+                CScript spent_outputs_scriptpubkey = tx_undo.vprevout[k].out.scriptPubKey;\n+                DBKey key(DBKeyType::SPENT, GetAddrId(spent_outputs_scriptpubkey), tx.vin[k].prevout);",
    "path": "src/index/addrindex.cpp",
    "position": 209,
    "original_position": 197,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you add a comment with your key/value format somewhere and the justification?",
    "created_at": "2020-01-08T17:55:21Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364363443",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364363443"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364363443"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364363443/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 209,
    "original_line": 209,
    "side": "RIGHT",
    "in_reply_to_id": 363971325
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364388433",
    "pull_request_review_id": 340071893,
    "id": 364388433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4ODQzMw==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+             RPCHelpMan{ \"searchrawtransactions\\n\",\n+            \"\\nReturns raw transactions that contain outputs with the given script/address, and outpoint information for those outputs.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, /* default_val */ \"\", \"address or scriptPubKey\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, /* default_val */ \"false\", \"If false, return hex-encoded tx, otherwise return a json object\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default_val */ \"\", \"The block in which to look for the transaction\"},\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \" [                                    (array of json objects) outpoint/tx pairs for spent outputs with this scriptPubKey\\n\"\n+            \"   {\\n\"\n+            \"      \\\"spent_outpoint\\\" : \\n\"\n+            \"      {\\n\"\n+            \"        \\\"txid\\\" : \\\"id\\\",            (string) The transaction id\\n\"\n+            \"        \\\"hex\\\" : \\\"data\\\",           (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      }\\n\"\n+            \"      (raw transaction OR hex-encoded transaction) \\n\"\n+            \"   }\\n\"\n+            \" ],\\n\"\n+            \"     \\n\"\n+            \" [                                    (array of json objects) outpoint/tx pairs for outputs created with this scriptPubKey\\n\"\n+            \"   {\\n\"\n+            \"      \\\"created_outpoint\\\" : \\n\"\n+            \"      {\\n\"\n+            \"        \\\"txid\\\" : \\\"id\\\",            (string) The transaction id\\n\"\n+            \"        \\\"hex\\\" : \\\"data\\\",           (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      }\\n\"\n+            \"      (raw transaction OR hex-encoded transaction) \\n\"\n+            \"   }\\n\"\n+            \" ],\\n\"\n+            \" ]\\n\"\n+                },\n+            },\n+            RPCExamples{\n+                    HelpExampleCli(\"searchrawtransactions\", \"\\\"address\\\"\")\n+        + HelpExampleCli(\"searchrawtransactions\", \"\\\"address\\\" true\")\n+            },\n+        }.ToString());\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        count = request.params[2].get_int();\n+    }\n+\n+    if (!g_addr_index) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addr_index->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends_result;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations_result;\n+    if (!g_addr_index->FindTxsByScript(scriptPubKey, spends_result, creations_result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");\n+        }\n+        return ret;\n+    }\n+\n+    UniValue spends(UniValue::VARR);\n+    UniValue creations(UniValue::VARR);\n+\n+    auto spends_it = spends_result.begin();\n+    while (spends_it != spends_result.end() && count--) {\n+        const auto& spend = *spends_it;\n+        UniValue tx_val(UniValue::VOBJ);\n+\n+        UniValue outpoint_val(UniValue::VOBJ);\n+        outpoint_val.pushKV(\"txid\", spend.first.hash.GetHex());",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        outpoint_val.pushKV(\"txid\", spend.second.first.hash.GetHex());\r\n```\r\nI'll write a functional test that catches this too :)",
    "created_at": "2020-01-08T18:53:46Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364388433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364388433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364388433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364388433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 314,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364389525",
    "pull_request_review_id": 340073212,
    "id": 364389525,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4OTUyNQ==",
    "diff_hunk": "@@ -0,0 +1,263 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+static constexpr char DB_ADDR_INDEX = 'a';\n+\n+// DBKeyType is used by the address index to distinguish between the\n+// different kinds of values stored.\n+enum class DBKeyType : uint8_t {\n+    SEED,    // Seed used for MurmurHash3 inside GetAddrId\n+    SPENT,   // Used for values in the index indicating a spend\n+    CREATED, // Used for values in the index indicating the creation of an input\n+};\n+\n+// AddrId is used to identify each script.\n+using AddrId = unsigned int;\n+\n+namespace {\n+\n+struct DBKeyPrefix {\n+  AddrId m_addr_id;\n+\n+  DBKeyPrefix() {}\n+  explicit DBKeyPrefix(AddrId addr_id) :  m_addr_id(addr_id) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    char prefix = DB_ADDR_INDEX;\n+    READWRITE(prefix);\n+    if (prefix != DB_ADDR_INDEX) {\n+      throw std::ios_base::failure(\"Invalid format for address index DB key\");\n+    }\n+\n+    READWRITE(m_addr_id);\n+  }\n+};\n+\n+struct DBKey : DBKeyPrefix {\n+  DBKeyType m_key_type;\n+  COutPoint m_outpoint;\n+\n+  DBKey() {}\n+  explicit DBKey(DBKeyType key_type, AddrId addr_id, COutPoint outpoint) : DBKeyPrefix(addr_id), m_key_type(key_type), m_outpoint(outpoint) {}\n+\n+  ADD_SERIALIZE_METHODS;\n+\n+  template <typename Stream, typename Operation>\n+  inline void SerializationOp(Stream& s, Operation ser_action) {\n+    READWRITEAS(DBKeyPrefix, *this);\n+\n+    uint8_t key_type = static_cast<uint8_t>(m_key_type);\n+    READWRITE(key_type);\n+    m_key_type = static_cast<DBKeyType>(key_type);\n+\n+    // Check if the key type is a valid key. SEED keys are excluded because they\n+    // are never created with this type.\n+    if ((m_key_type != DBKeyType::SPENT) && (m_key_type != DBKeyType::CREATED)) {\n+      throw std::ios_base::failure(\"Invalid key type for address index DB key\");\n+    }\n+\n+    READWRITE(m_outpoint);\n+  }\n+};\n+\n+}; // namespace\n+\n+// The address index stores information needed to get relevant transactions,\n+// and a copy of the CScript to double check against in case of hash collisions.\n+using DBValue = std::pair<CDiskTxPos, CScript>;\n+\n+/** Access to the addr_index database (indexes/addr_index/)*/\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /** ReadAddrIndex returns the set of entries stored in the index for this addr_id. */\n+    std::vector<std::pair<DBKey, DBValue>> ReadAddrIndex(const unsigned int addr_id, const CScript& script);\n+\n+    /** WriteToIndex writes the input vector of database entries into the index.  */\n+    bool WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries);\n+\n+    /** SetupHashSeed is used to create/backup/restore the seed used by the index for hashing. */\n+    unsigned int SetupHashSeed();\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addr_index\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+std::vector<std::pair<DBKey, DBValue>> AddrIndex::DB::ReadAddrIndex(const unsigned int addr_id, const CScript& script)\n+{\n+    std::vector<std::pair<DBKey, DBValue>> result;\n+    DBKeyPrefix search_key(addr_id);\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    iter->Seek(search_key);\n+    while (iter->Valid()) {\n+        DBKey key;\n+        DBValue value;\n+        if (!iter->GetKey(key) || key.m_addr_id != addr_id || !iter->GetValue(value) ) break;\n+\n+        // Check that the stored script matches the one we're searching for, in case of hash collisions.\n+        if (value.second != script) continue;\n+\n+        result.emplace_back(std::make_pair(key, value));\n+        iter->Next();\n+    }\n+\n+    return result;\n+}\n+\n+bool AddrIndex::Init() {\n+        m_hash_seed = m_db->SetupHashSeed();\n+        return BaseIndex::Init();\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)) {}\n+\n+unsigned int AddrIndex::DB::SetupHashSeed() {\n+    static const auto seed_key = std::make_pair(DB_ADDR_INDEX, static_cast<uint8_t>(DBKeyType::SEED));\n+    unsigned int seed;\n+\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+    std::pair<char, uint8_t> key;\n+\n+    // If key is in the index already, read it and return.\n+    iter->Seek(seed_key);\n+    if (iter->Valid() && iter->GetKey(key) && key == seed_key && iter->GetValue(seed)) {\n+        return seed;\n+    }\n+\n+    // Generate a random key and write it to the index.\n+    seed = GetRandInt(std::numeric_limits<int>::max());\n+    Write(seed_key, seed);\n+    return seed;\n+}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+unsigned int AddrIndex::GetAddrId(const CScript& script) {\n+    std::vector<unsigned char> script_data;\n+    for (auto it = script.begin(); it != script.end(); ++it) {\n+        script_data.push_back(*it);\n+    }\n+    return MurmurHash3(m_hash_seed, script_data);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<DBKey, DBValue>> entries;\n+\n+    const bool not_genesis_block = (pindex->nHeight > 0);\n+    if (not_genesis_block && !UndoReadFromDisk(block_undo, pindex)) {\n+      return false;\n+    }\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *(block.vtx[i]);\n+        const uint256 tx_hash = tx.GetHash();\n+        for (size_t j = 0; j < tx.vout.size(); ++j) {\n+            CScript script_pub_key = tx.vout[j].scriptPubKey;\n+            DBKey key(DBKeyType::CREATED, GetAddrId(script_pub_key), COutPoint(tx_hash, j));\n+            entries.emplace_back(key, std::make_pair(pos, script_pub_key));\n+        }\n+\n+        // Skip coinbase inputs.\n+        if (not_genesis_block && i > 0) {\n+            const CTxUndo& tx_undo = block_undo.vtxundo[i-1];\n+            for (size_t k = 0; k < tx.vin.size(); ++k) {\n+                CScript spent_outputs_scriptpubkey = tx_undo.vprevout[k].out.scriptPubKey;\n+                DBKey key(DBKeyType::SPENT, GetAddrId(spent_outputs_scriptpubkey), tx.vin[k].prevout);\n+                entries.emplace_back(key, std::make_pair(pos, spent_outputs_scriptpubkey));\n+            }\n+        }\n+        pos.nTxOffset += ::GetSerializeSize(tx, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(entries);\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<DBKey, DBValue>> &entries)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& entry : entries) {\n+        batch.Write(entry.first, entry.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+// FindTxsByScript fills the spends_result vector with outpoints corresponding\n+// to the output spent with the given script, and the transaction it was spent\n+// in. creations_result is filled with outpoints for outputs created with this\n+// script as their script pubkey, and the transactions they were created in.\n+bool AddrIndex::FindTxsByScript(const CScript& script,\n+                                std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> &spends_result,\n+                                std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> &creations_result)\n+{\n+    auto db_entries = m_db->ReadAddrIndex(GetAddrId(script), script);\n+    if (db_entries.size() == 0) return false;\n+\n+    for (const auto& entry : db_entries) {\n+        DBKey key = entry.first;\n+        CDiskTxPos pos = entry.second.first;\n+\n+        CAutoFile file(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+        if (file.IsNull()) {\n+            return error(\"%s: OpenBlockFile failed\", __func__);\n+        }\n+        CBlockHeader header;\n+        CTransactionRef tx;\n+        try {\n+            file >> header;\n+            if (fseek(file.Get(), pos.nTxOffset, SEEK_CUR)) {\n+                return error(\"%s: fseek(...) failed\", __func__);\n+            }\n+            file >> tx;\n+        } catch (const std::exception& e) {\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+        std::pair<CTransactionRef, uint256> result =  std::make_pair(tx, header.GetHash());\n+\n+        // Place entry into correct vector depending on its type.\n+        switch (key.m_key_type) {\n+            case DBKeyType::SPENT:\n+                spends_result.emplace_back(std::make_pair(key.m_outpoint, result));",
    "path": "src/index/addrindex.cpp",
    "position": 267,
    "original_position": 251,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As pointed out by jnewbery in review club, I think this is wrong. \r\n\r\nThe DB's key always represents the outpoint that *created* the scriptPubKey.  For spends_result, you want the txid of the transaction that *spends* the scriptPubKey.  So instead of the DB key's outpoint as the transaction id to be returned to the user, you want the transaction id of the transaction in the DB value.  Or, in the RPC code lines 314 and 315, use the txid from `spend.second`.\r\n\r\nEdit: Or maybe this field of the returned result is always the created_outpoint, even though it's called the spent_outpoint sometimes?  Would be good to clarify this.",
    "created_at": "2020-01-08T18:56:02Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364389525",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364389525"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364389525"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364389525/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 267,
    "original_line": 267,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365356888",
    "pull_request_review_id": 341326570,
    "id": 365356888,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1Njg4OA==",
    "diff_hunk": "@@ -213,6 +214,142 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "c21767116be0d0ebcac5966db240d596be2b5920",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should use the new `.Check()` syntax instead",
    "created_at": "2020-01-10T17:56:13Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r365356888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365356888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r365356888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365356888/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 218,
    "side": "RIGHT",
    "in_reply_to_id": 364043704
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466563287",
    "pull_request_review_id": 462721671,
    "id": 466563287,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MzI4Nw==",
    "diff_hunk": "@@ -0,0 +1,279 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+/*\n+ * The address index stores two main types of objects that allow for\n+ * script-based/address-based look-ups of all created outputs and all spent\n+ * outputs in the Bitcoin blockchain. These are differentiated by their key_type\n+ * as either DBKeyType::SPENT or DBKekyType::CREATED. The address index also\n+ * stores one unique global value under the DBKeyType::SEED key that seeds the\n+ * MurmurHash3 hasher used to create AddrIds.\n+ *\n+ * The DB keys are structured as follows: <addr_id, key_type, outpoint>\n+ *\n+ * addr_id is the hash of the script_pub_key computed using MurmurHash3, a a\n+ * short non-cryptographic hash function. It also functions as the search key,\n+ * since LevelDB keys are iterated through in lexicograpical order. Collisions\n+ * are resolved by storing the full script_pub_key in the DB value. This can be\n+ * checked against the script used to make a look-up in the index.\n+ *\n+ * key_type is SPENT when the outpoint stored in the key is spent, i.e. it is\n+ * used as a prevout in a transaction input.  It is CREATED when the outpoint is\n+ * created as a new  COutpoint in that transaction.\n+ *\n+ * outpoints are stored in the key as opposed to in the DB value to preserve\n+ * uniqueness and to support multiple values for a a single addr_id and key_type",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "75e044564bc0561c72fe1bcbb6d21dfc3a3314fd",
    "user": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n * uniqueness and to support multiple values for a single addr_id and key_type\r\n```",
    "created_at": "2020-08-06T17:16:24Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r466563287",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466563287"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r466563287"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466563287/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466563439",
    "pull_request_review_id": 462721671,
    "id": 466563439,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MzQzOQ==",
    "diff_hunk": "@@ -0,0 +1,279 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/disktxpos.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <txdb.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+std::unique_ptr<AddrIndex> g_addr_index;\n+\n+/*\n+ * The address index stores two main types of objects that allow for\n+ * script-based/address-based look-ups of all created outputs and all spent\n+ * outputs in the Bitcoin blockchain. These are differentiated by their key_type\n+ * as either DBKeyType::SPENT or DBKekyType::CREATED. The address index also\n+ * stores one unique global value under the DBKeyType::SEED key that seeds the\n+ * MurmurHash3 hasher used to create AddrIds.\n+ *\n+ * The DB keys are structured as follows: <addr_id, key_type, outpoint>\n+ *\n+ * addr_id is the hash of the script_pub_key computed using MurmurHash3, a a",
    "path": "src/index/addrindex.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "cd274024b8e47e840a54e21a1c0e27c7024d3d73",
    "original_commit_id": "75e044564bc0561c72fe1bcbb6d21dfc3a3314fd",
    "user": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n * addr_id is the hash of the script_pub_key computed using MurmurHash3, a\r\n```",
    "created_at": "2020-08-06T17:16:41Z",
    "updated_at": "2020-10-01T01:27:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r466563439",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466563439"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r466563439"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466563439/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  }
]