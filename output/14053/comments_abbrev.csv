DrahtBot,2018-08-24T19:23:51Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20404 (Remove names from translatable strings by hebasto)\n* #20012 (rpc: Remove duplicate name and argNames from CRPCCom",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-415858539,415858539,
marcinja,2018-08-31T15:19:08Z,"Thanks for all the reviews. \n\nTo answer some of @jimpo's questions:\n2 & 4. I included part of the block hash so that in BlockDisconnected we ae sure to remove the entries in the index from this block only (that's where  `filter_by_value` is used). The reason I chose to remove entries from the database is to prevent reading into a block file using an old `CDiskTxPos`  that may no longer be a ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-417697510,417697510,
karelbilek,2018-10-05T06:40:09Z,"Comments to the concept\n\nSome time ago I have rebased bitpay's bitcore patches (from their insight block explorer) to bitcoin core here (without much work on my own)\n\nhttps://github.com/bitcoin/bitcoin/pull/10370\n\nThe consensus back then seemed to be that more indexes in the core is not a good thing, and work should be instead done on external indexes. However I am no sure how this PR ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-427261876,427261876,
MarcoFalke,2018-10-05T08:02:32Z,"@karel-3d I think this one is based on  #13033, so at least the performance impact should be less pronounced. Other than that it should be rather similar.",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-427280137,427280137,
Sjors,2018-12-15T10:14:36Z,We talked about (address) indexes during the previous [IRC meeting](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2018/bitcoin-core-dev.2018-12-13-19.00.html). ,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-447556680,447556680,
marcinja,2019-01-30T22:19:56Z,"@Sjors \n> Lightly tested on macOS. It doesn't find the coinbase transaction to `mtnNvZY7iQCfzJCVon13tfJSVYDn9iiUWD` in [block 120](https://testnet.blockchain.info/en/block/0000000058dbb5e3fce9be42ae79beb564be666866c6b85c9791863219ec36db), `mg4bQva8w7Cjs8KaKHeEbyXUaCzoQAcXyH` in [block 10001](https://testnet.blockchain.info/nl/block/0000000000629d100db387f37d0f37c51118f250fb0946310a8c37316cbc4028",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-459132969,459132969,
ryanofsky,2019-07-17T21:36:31Z,"Maybe tag this [needing concept ack](https://github.com/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review).\n\nThis would probably be pretty easy to rebase, and has a previous concept ack from jimpo, but it's not clear if other people want this change or might object to it.",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-512578228,512578228,
dan-da,2019-08-07T06:50:40Z,"I for one would be very happy to see an optional addr index + api finally available in bitcoin-core, and not as a separate patch or hacky thing.\n\n@marcinja is there an API in your PR that accepts multiple addresses as input and returns total received/spent for each?  Some block explorers have this functionality and it is great because much more efficient than calling API for each addr individu",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-518964997,518964997,
abunsen,2019-10-01T14:33:55Z,@marcinja you're so close. Thanks for all your hard work on this! Does anyone know if this is getting merged anytime soon?,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-537065474,537065474,
gmaxwell,2019-11-20T11:12:54Z,"I haven't looked at how this is implemented, at all-- but the goal is one that is extraordinarily useful and addresses a severe and growing usability probable in the software that has burned me many times. ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-555957701,555957701,
ryanofsky,2019-11-21T14:48:06Z,"> I haven't looked at how this is implemented, at all-- but the goal is one that is extraordinarily useful and addresses a severe and growing usability probable in the software that has burned me many times.\n\nSorry for the dumb question, but what's the severe usability problem?",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-557117513,557117513,
ryanofsky,2019-11-25T20:38:52Z,"Most recent IRC discussion I could find about address indexes, http://www.erisian.com.au/bitcoin-core-dev/log-2018-12-13.html#l-601 seemed to have conclusion (from @jamesob) with: \n""I'll report on any compelling usecases I find for addr index, but I suspect sipa et al are right that that's usually just the Wrong way""",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558330123,558330123,
dan-da,2019-11-25T20:52:54Z,"> ""usually just the Wrong way""\n\nThis sounds like an ivory tower attitude to me.   So tell us wise ones, if an addrindex is the wrong way, then what exactly is the right way?   Because thus far bitcoin-core's answer seems to be:  don't lookup transactions related to an address AT ALL unless they are in your own wallet, which is useless for anyone trying to provide address lookup as a service.  ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558335048,558335048,
ryanofsky,2019-11-25T20:58:35Z,"> what exactly is the right way?\n\nThe right way to do what? Can you provide more detail? I think it'd be good to keep the discussion as concrete as possible and discuss specific problems and use cases.",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558337160,558337160,
dan-da,2019-11-25T21:19:28Z,"ok, here are two tools I alone have written that need something like searchrawtransactions().\n\n[hd-wallet-addrs](https://github.com/dan-da/hd-wallet-addrs#blockchain-api-provider-notes) - a tool for discovering all hd-wallet addresses that have ever been used.  So it derives [receive,change] and checks if each address has ever received funds, up to gap limit.  Presently it must rely on 3rd par",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558344637,558344637,
ryanofsky,2019-11-25T21:37:56Z,"Thanks. From what I can gather the tools described in https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558344637 are accounting / auditing tools useful for someone running the bitcoin wallet, and this PR would let people who want to use these tools run them locally instead of relying on centralized third party services.\n\nIt seems like a good argument in favor of this feature.\n\nI'",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558351495,558351495,
jnewbery,2019-11-25T22:07:58Z,"Concept ACK. The main argument against adding an address index to Bitcoin Core is that people/services will come to rely on them, and they're not scalable long term. My response to that is that people are already using address indexes and block explorers. Providing/not providing that functionality in Bitcoin Core isn't going to change that.\n\nThe new indexing infrastructure means that this can ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558361845,558361845,
jgarzik,2019-11-25T22:08:42Z,"addr-index is the most frequently patched-in change to Core, across the years, IME.",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558362070,558362070,
dan-da,2019-11-25T22:21:44Z,querying a 3rd party entails a loss of privacy and requires trusting the 3rd party to return truthful data.  ,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558366875,558366875,
jamesob,2019-11-26T16:45:44Z,"Concept ACK.\n\nI know I've flip-flopped on this feature historically, but I agree very much with the points that @jnewbery makes. Trading the maintenance burden of ~800 lines of relatively non-consensus-risky indexing code for some very practical gains in user privacy is compelling to me. Even with the caveat that we don't think some of these uses are architecturally sound for years and years.",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558717488,558717488,
marcinja,2019-11-26T23:18:59Z,"Yes, I will rebase this and clean it up a bit. Thanks for the conceptual review.  ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-558858883,558858883,
ryanofsky,2019-11-27T14:18:05Z,"Maybe we should log a warning when the address index is enabled, like:\n\n<dl><dd>Warning: built-in address index is enabled! Address indexing is going to become less scalable as transaction history increases, and will eventually need to be removed from [PACKAGE_NAME] and replaced by a dedicated external index. Users relying on the address index for accounting purposes are advised to track metad",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-559105948,559105948,
promag,2019-12-01T23:51:16Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-560176208,560176208,
ryanofsky,2020-01-06T16:31:17Z,Nice set of notes on this PR at https://bitcoincore.reviews/14053.html,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-571208221,571208221,
fjahr,2020-01-08T18:39:19Z,For me what this PR is missing some analysis on the current size of the index in mainnet and the growth rate of the data. Has anyone run the numbers recently and can report?,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-572200658,572200658,
fjahr,2020-01-08T20:19:29Z,I think @jnewbery was hinting at this in the PR Review Club as well: it seems like this index does not handle reorgs. `BaseIndex` handles this through `Rewind` which is not overridden.,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-572239482,572239482,
andrewtoth,2020-01-10T02:49:31Z,"Ran on i7-8750H, took about 48 hours on an already synced node. Took 200 GB disk space.\n```\n2020-01-08T02:22:01Z addr_index thread start\n...\n2020-01-10T02:37:07Z addr_index is enabled at height 611001\n2020-01-10T02:37:07Z addr_index thread exit\n```\n```\n$ du -h addr_index\n200G	addr_index\n```",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-572849475,572849475,
luke-jr,2020-01-29T03:06:11Z,"Might be a good idea to replace `CDiskTxPos` with a height+tx# for [future?] pruning compatibility, like #13014",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-579571607,579571607,
luke-jr,2020-01-29T03:07:59Z,"> I think @jnewbery was hinting at this in the PR Review Club as well: it seems like this index does not handle reorgs. BaseIndex handles this through Rewind which is not overridden.\n\nHandling reorgs might actually be undesirable for this... but changing CDiskTxPos like I just suggested to a block height could be incompatible with saving references to blocks not in the main chain too. (Maybe s",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-579571984,579571984,
Talkless,2020-04-08T12:56:00Z,"@marcinja Do you believe this index could allow wallets such as Electrum to avoid relying on extra applications (like ElectrumX, Electrum Private Server, etc), and (if leared how to speak Bitcoin RPC) use Bitcoin Core node directly?",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-610942861,610942861,
baso10,2020-06-28T08:18:44Z,Any update when this could be merged?,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650716222,650716222,
fjahr,2020-06-28T09:49:39Z,"> Any update when this could be merged?\n\nI kind of thought that this was still in conceptual review but it has received 5 Concept ACKs from experienced Core developers and I did not see much of the push back this has received historically, so I tend to believe this can be moved out of Conceptual review phase and move forward. There is still a lot of work to be done in terms of testing, documen",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650726577,650726577,
luke-jr,2020-06-28T10:00:52Z,Past NACKs don't disappear just because a new PR is opened...,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650727850,650727850,
fjahr,2020-06-28T10:12:59Z,"> Past NACKs don't disappear just because a new PR is opened...\n\nDefinitely agree, especially if the PRs are very close. But I think if a new PR is opened with a different approach it can still be expected for the reviewers who gave NACKs in the past, to participate in the discussion again and reinstate their NACK or someone else who agrees with their view should do it for them. Otherwise, we ",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650729233,650729233,
MarcoFalke,2020-06-28T11:22:53Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650737107,650737107,
jonatack,2020-06-28T11:49:38Z,"> Any update when this could be merged?\n\n@baso10 \n\n1. This PR needs to be rebased, as you can see in https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-610034274\n\n2. The PR is still going through peer review -- see the discussion above\n\n3. See https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#peer-review for more info about the peer review process in this proje",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650740221,650740221,
jonatack,2020-06-28T11:49:51Z,"A good resource for more context and history and reasons for and against this addition: https://bitcoincore.reviews/14053.\n",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-650740253,650740253,
marcinja,2020-07-15T01:54:08Z,"Hey everyone. Just wanted to give a small update here. I am still planning on keeping this PR up-to-date and rebased. I've realized it's more annoying to rebase after procrastinating, and also it's not fair to the reviewers and other people interested so I will be much more diligent about rebasing now.\n\nThe total size of the address index right now is 223GB. I don't have a good answer on  inde",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-658499547,658499547,
fanquake,2020-07-31T03:19:18Z,"@marcinja If you feel like it, you could pull 2ce521784432550007c0df1da85b4d3d0b1c7477 and 2761d11cc798d42839676f98250781a3ea445ce2 out of here and PR separately.",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-666891128,666891128,
c78867886,2020-10-13T07:01:53Z,Can someone plz approve this?,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-707536003,707536003,
decryp2kanon,2020-11-08T01:48:30Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-723519083,723519083,
Talkless,2020-12-13T12:47:55Z,"@marcinja will this allow other wallets like Electrum to utilize this feature (RPC credentials provided, of course) and avoid having to run ElecturmX (https://github.com/spesmilo/electrumx), EPS (https://github.com/chris-belcher/electrum-personal-server) or BWT (https://github.com/shesek/bwt) intermediary software?\n\n@ecdsa @SomberNight @chris-belcher @shesek could you provide your input on how",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-744002909,744002909,
romanz,2020-12-13T14:30:13Z,"The main issue AFAIU is that Electrum is using `SHA256(scriptPubKey)` while this PR is using `MurmurHash3(scriptPubKey)`.\nAlso, ElectrumX & [electrs](https://github.com/romanz/electrs) are using RocksDB for the index storage - resulting in better performance and disk usage (compared to LevelDB).",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-744015971,744015971,
SomberNight,2020-12-13T15:04:58Z,"@Talkless note that while some Electrum users run their own bitcoind, many do not. Electrum wants to support both use cases, and in fact the suspicion is that most users just use a public server. When using a public server, the client cannot use bitcoind RPC, hence in that case I don't see how the middleware (e.g. ElectrumX) could be avoided.\n\nFor the own bitcoind use case, maybe the client co",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-744020488,744020488,
MarcoFalke,2020-12-17T19:09:02Z,Concept ACK (might have already done that),https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747639681,747639681,
sipa,2020-12-17T19:25:09Z,"I'm concept -0 on this.\n\nMy primary objection is that I think it's a bad idea for any infrastructure to be built all that relies on having fully-indexed blockchain data available (this also applies to txindex, but we can't just remove support...).\n\nHowever, it seems many people want something like this, and are going to use it anyway. The question is then whether it belongs in the bitcoin-",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747648440,747648440,
jamesob,2020-12-17T19:42:23Z,"I'm also a little more negative on having this in Core than I previously was. After working in a few industrial contexts on wallet stuff, it's clear to me that an address index is really only required if you want to implement a block explorer or do chain analysis. For both of these applications, using something like electrs seems sufficient.\n\nFor personal wallet management, a full address inde",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747658388,747658388,
jonasschnelli,2020-12-17T19:48:52Z,"> My primary objection is that I think it's a bad idea for any infrastructure to be built that relies on having fully-indexed blockchain data available.\n\nI agree on this.\n\nIMO the only use cases to ever use a full address index are:\n* 1) Instant seed/xpriv backup recovery including spent history\n* 2) Backend service for thousands of wallets\n* 3) Debug/explore purposes\n\n**1** (ins",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747661798,747661798,
marcinja,2021-01-04T16:21:10Z,"Hi all, thanks for the feedback and review. This was an enjoyable PR to work on and I learned a lot from all your comments.\n\nI'm closing this PR because its size probably requires stronger support from contributors to get in. It also seems more clear now that all of the practical use-cases are covered by existing features and some lightweight alternatives (https://github.com/bitcoin/bitcoin/pu",https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-754071381,754071381,
jonatack,2021-01-04T16:53:22Z,@marcinja thank you and I hope to see more contributions of this quality from you.,https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-754089336,754089336,
ryanofsky,2018-08-29T16:47:20Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nNote: this class is moved from `src/index/txindex.cpp` with no changes (except whitespace)",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213754112,213754112,src/index/base.h
ryanofsky,2018-08-29T16:53:38Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nNote: new `index/addrindex.cpp`, `index/addrindex.h`, and `test/addrindex_tests.cpp` files in this commit mirror existing `index/txindex.cpp` and `index/txindex.h`, `test/txindex_tests.cpp` files and have some code and comments in common. It can help to diff the `addr` files against the `tx` files when reviewing th",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213756026,213756026,src/index/addrindex.cpp
ryanofsky,2018-08-29T17:37:39Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nI think this code could benefit from some typedefs and more consistent use of types internally to improve readability. Maybe:\n\n```\nusing AddressId = uint64_t;\nusing BlockId = uint64;\nusing DbKey = std::pair<std::pair<char, AddressID>, CDiskTxPos>;\nusing DbValue = BlockId;\n```\n\nI also wonder if `st",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213770206,213770206,src/index/addrindex.cpp
ryanofsky,2018-08-29T17:47:55Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nCould just make this a return value instead of an output parameter. Existing return value seems redundant.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773597,213773597,src/index/addrindex.cpp
ryanofsky,2018-08-29T17:48:07Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nCould consolidate last two parameters into single `boost::optional<AddressId> filter_value` param.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773659,213773659,src/index/addrindex.cpp
ryanofsky,2018-08-29T18:14:05Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nThis sleep + BlockUntilSyncedToCurrentChain call is pretty hacky but probably ok in principle. I think @jimpo could easily tell you how to improve it. I would move this code out of the `AddrIndex` class and into a `g_txindex->WaitForSync()` or similar method, and probably replace the sleep with a condition variable",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213782329,213782329,src/index/addrindex.cpp
ryanofsky,2018-08-29T18:22:29Z,"In commit ""Introduce address index"" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\n\nShould probably reorder this condition. It seems pointless to retrieve the value when the key is wrong, and maybe dangerous if the value is a different format and deserializing could throw an exception.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213785140,213785140,src/index/addrindex.cpp
ryanofsky,2018-08-29T18:32:17Z,"In commit ""Add searchrawtransactions RPC"" (226eeea9736127269058fbbf7816c7100f90974d)\n\nShould add a basic python functional test for the new RPC method.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213788343,213788343,src/rpc/rawtransaction.cpp
luke-jr,2018-08-30T12:37:52Z,"There is no such thing as a ""spend from address""",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013007,214013007,src/init.cpp
luke-jr,2018-08-30T12:40:10Z,`skip` and `count` probably make sense on an options object instead.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013753,214013753,src/rpc/rawtransaction.cpp
luke-jr,2018-08-30T12:40:32Z,"(this would be number 4, but n/a once on an options object)",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013906,214013906,src/rpc/rawtransaction.cpp
luke-jr,2018-08-30T12:45:05Z,"This basically shouldn't be here. The address used to receive a coin has zero relationship with the transaction spending that coin.\n\nIf someone really cares about getting it anyway, there should be a separate input txid/index -> spend txid index.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015214,214015214,src/index/addrindex.cpp
luke-jr,2018-08-30T12:45:18Z,This looks like a very fragile assumption.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015281,214015281,src/index/addrindex.cpp
luke-jr,2018-08-30T12:45:50Z,"With this, why is the loop waiting for IsInSyncWithMainChain needed?",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015451,214015451,src/index/addrindex.cpp
marcinja,2018-08-30T16:16:00Z,"`BlockUntilSyncedToCurrentChain` returns false immediately if `m_synced` is false.\n\nThe loop waiting for `IsInSyncWithMainChain` waits for txindex to finish in `ThreadSync`. Once txindex finishes in `ThreadSync` it will be updated by ValiditionInterface callbacks from that point on.\n\nThis line (since txindex must have `m_synced` =  true now) will actually block now until txindex syncs with",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214093388,214093388,src/index/addrindex.cpp
jimpo,2018-08-30T18:31:21Z,"commit: Introduce address index\n\nCan you move this comment to `BaseIndex::DB` and delete from `TxIndex::DB` as well? No need to copy it to every new index file, especially since it's handled at the base layer.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214136359,214136359,src/index/addrindex.cpp
marcinja,2018-08-30T19:14:05Z,This needs an `if (!m_synced) return;`,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214149325,214149325,src/index/addrindex.cpp
jimpo,2018-08-30T22:45:49Z,"Spends from an address should at least get indexed under a separate key prefix even if it's done by the same indexer.\n\nUsing the undo files is a much better way to get this information than the txindex.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203100,214203100,src/index/addrindex.cpp
jimpo,2018-08-30T22:47:56Z,There should be a way of differentiating between txs where the script is the output and ones that spend from the address. Perhaps two methods or two output vector parameters.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203436,214203436,src/index/addrindex.h
jimpo,2018-08-30T22:49:33Z,A better way to do it is to loop until `BlockUntilSyncedToCurrentChain` becomes true.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203723,214203723,src/index/addrindex.cpp
jimpo,2018-08-30T22:51:37Z,Use the undo files instead of CCoinsViewCache.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204067,214204067,src/index/addrindex.cpp
jimpo,2018-08-30T22:52:00Z,This shouldn't be necessary.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204133,214204133,src/index/base.cpp
jimpo,2018-08-30T22:52:49Z,Why? The implementation is empty.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204265,214204265,src/index/base.h
jimpo,2018-08-30T22:53:47Z,"I'd vote to move it to it's own file, like `src/index/disktxpos.{h,cpp}`.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204406,214204406,src/index/base.h
jimpo,2018-08-30T22:56:35Z,Why is this exposed? It seems internal.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204889,214204889,src/index/addrindex.h
jimpo,2018-08-30T23:00:15Z,"Seems that `filter_by_value` functionality isn't used? Also, I'd rename to something like `filter_by_block` because it's not clear what value means and is tightly coupled to the database layout chosen.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214205452,214205452,src/index/addrindex.cpp
practicalswift,2018-09-05T07:30:12Z,Redundant condition `filter_by_value`: what about `!filter_by_value || value == value_wanted` instead?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161819,215161819,src/index/addrindex.cpp
practicalswift,2018-09-05T07:30:41Z,`block_hash` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161936,215161936,src/index/addrindex.cpp
practicalswift,2018-09-05T07:30:58Z,`prev_hash` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161992,215161992,src/test/test_bitcoin.cpp
practicalswift,2018-09-05T07:31:15Z,`prev_hash` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162067,215162067,src/test/test_bitcoin.h
practicalswift,2018-09-05T07:32:04Z,`coinbase_script_pub_key` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162287,215162287,src/test/test_bitcoin.cpp
practicalswift,2018-09-05T07:32:35Z,Nit: `++it`,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162430,215162430,src/rpc/rawtransaction.cpp
practicalswift,2018-09-05T07:32:59Z,Nit: `++it`,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162543,215162543,src/rpc/rawtransaction.cpp
practicalswift,2018-09-06T20:16:34Z,"```\ntest/test_bitcoin.cpp:194:60: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [-Wsign-compare]\n        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());\n                                        ~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215762841,215762841,src/test/test_bitcoin.cpp
practicalswift,2018-09-06T20:17:28Z,"```\nindex/addrindex.cpp:110:25: warning: loop variable 'tx_out' of type 'const CTxOut' creates a copy from type 'const CTxOut' [-Wrange-loop-analysis]\n        for (const auto tx_out : tx->vout){\n                        ^\nindex/addrindex.cpp:110:14: note: use reference type 'const CTxOut &' to prevent copying\n        for (const auto tx_out : tx->vout){\n             ^~~~~~~~~~~~~~~~~~~\",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763081,215763081,src/index/addrindex.cpp
practicalswift,2018-09-06T20:17:47Z,Same here - see above.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763177,215763177,src/index/addrindex.cpp
practicalswift,2018-09-06T20:18:04Z,Same here - see above.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763264,215763264,src/index/addrindex.cpp
practicalswift,2018-09-06T20:18:20Z,Same here - see above.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763353,215763353,src/index/addrindex.cpp
practicalswift,2018-09-06T20:18:50Z,"```\ntest/addrindex_tests.cpp:112:23: warning: unused variable 'block' [-Wunused-variable]\n        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n                      ^\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763499,215763499,src/test/addrindex_tests.cpp
Sjors,2018-09-07T17:35:14Z,"Suggest dropping ""to index spends from addresses""; if someone configures `addrindex=` I assume they know why. Also prevents a long debate :-)",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216033759,216033759,src/init.cpp
Sjors,2018-09-07T17:37:02Z,@MarcoFalke why is it again that Travis doesn't fail on warnings?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216034219,216034219,src/test/test_bitcoin.cpp
Sjors,2018-09-07T17:47:50Z,"The `Blockchain transactions are still in the process of being indexed` warning should always be shown, because there might be missing transactions while indexing is in progress (`txindex` doesn't have that problem).",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216037366,216037366,src/rpc/rawtransaction.cpp
practicalswift,2018-09-23T07:59:48Z,"```\n2018-09-22 21:20:09 cpplint(pr=14053): src/index/addrindex.h:44:  ""virtual"" is redundant since function is already declared as ""override""  [readability/inheritance] [4]\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691273,219691273,src/index/addrindex.h
practicalswift,2019-01-24T08:48:21Z,`spends` shadows a variable existing in the outer scope.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509440,250509440,src/test/addrindex_tests.cpp
practicalswift,2019-01-24T08:48:33Z,Same here but for `creations`.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509491,250509491,src/test/addrindex_tests.cpp
jnewbery,2020-01-07T21:14:19Z,"nit: this is added in the wrong commit (should be in _Move only: Move CDiskTxPos to own file_, not _Add address index_)",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363953762,363953762,src/Makefile.am
jnewbery,2020-01-07T21:19:58Z,spelling: there,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363956015,363956015,src/index/addrindex.h
jnewbery,2020-01-07T21:38:17Z,"I'm not sure if this is actually needed. The other indexes have different prefixes for the different object types that they store, but all objects in this index are given the same prefix, so is it necessary?",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363963378,363963378,src/index/addrindex.cpp
jnewbery,2020-01-07T21:44:27Z,"Does this branch need to advance the iterator? If not, I think `value` will be the same the next time round and we'll never break out of this loop.\n\nI think the following is what we want:\n\n```\n    ...\n    if (value.second == script) {\n        result.emplace_back(std::make_pair(key, value));\n    }\n\n    iter->Next();\n}\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363965804,363965804,src/index/addrindex.cpp
jnewbery,2020-01-07T21:48:29Z,style nit: having a variable defined as `not_thing` seems unintuitive to me. I think it'd be better to define `genesis` and then test on `!genesis`.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363967426,363967426,src/index/addrindex.cpp
jnewbery,2020-01-07T21:57:55Z,"I don't think this isn't the information that we want to save in the address index. For a given scriptPubKey, a user wants to know:\n\n- which txouts (txid, output index) spent to that scriptPubKey (the CREATED DBKeyType above)\n- which txins (txid, input index) consume UTXOs for that scriptPubKey (the SPENT DBKeyType here)\n\nSo here, I think you want to save the txid and input index spendin",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363971325,363971325,src/index/addrindex.cpp
jnewbery,2020-01-07T22:02:33Z,"""The block in which to look for the transaction"" is wrong",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363973201,363973201,src/rpc/rawtransaction.cpp
jnewbery,2020-01-07T22:10:07Z,I suggest you make this an object with two keys: `creates` and `spends`,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r363976031,363976031,src/rpc/rawtransaction.cpp
andrewtoth,2020-01-08T02:45:03Z,"```suggestion\n    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364043704,364043704,src/rpc/rawtransaction.cpp
andrewtoth,2020-01-08T02:50:16Z,The default value is implicitly 100. It should be explicitly defined here.,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364044637,364044637,src/rpc/rawtransaction.cpp
andrewtoth,2020-01-08T03:09:17Z,Shouldn't this method take the count as a parameter and return early when enough entries are found?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364047738,364047738,src/index/addrindex.cpp
andrewtoth,2020-01-08T03:13:01Z,"If there are more spends than `count` then no creates will be returned. Ideally the spends and creates will be returned in order, rather than all spends first.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364048337,364048337,src/rpc/rawtransaction.cpp
andrewtoth,2020-01-08T03:14:01Z,There doesn't seem to be a way to skip transactions anymore. Was this removed intentionally?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364048499,364048499,src/rpc/rawtransaction.cpp
narula,2020-01-08T16:31:43Z,"Do you want to log or throw something here? If I understand the LevelDB docs correctly, you have what LevelDB says is a valid iterator which should be positioned at the key. I think if any of these return false you'd want to know as the DB could be corrupted.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364324758,364324758,src/index/addrindex.cpp
narula,2020-01-08T16:40:09Z,I think in general it would be nice if this class did some of the error logging that I see in `blockfilterindex.cpp`.  ,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364329232,364329232,src/index/addrindex.cpp
narula,2020-01-08T17:31:40Z,Please also test the spends_results path (returning transactions which spend from this address).,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364353217,364353217,test/functional/rpc_rawtransaction.py
narula,2020-01-08T17:50:39Z,"I *think* this is correct because he is using the prevout in the *key*. When looking up by this script with this outpoint, one would want to find this transaction because it spends this outpoint.\n\nAFAICT the value just contains the position of the relevant transaction on disk and the scriptPubKey (to detect collisions).  The value does not contain any indexes into inputs or outputs.",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364361434,364361434,src/index/addrindex.cpp
narula,2020-01-08T17:55:21Z,Can you add a comment with your key/value format somewhere and the justification?,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364363443,364363443,src/index/addrindex.cpp
marcinja,2020-01-08T18:53:46Z,"```suggestion\n        outpoint_val.pushKV(""txid"", spend.second.first.hash.GetHex());\n```\nI'll write a functional test that catches this too :)",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364388433,364388433,src/rpc/rawtransaction.cpp
narula,2020-01-08T18:56:02Z,"As pointed out by jnewbery in review club, I think this is wrong. \n\nThe DB's key always represents the outpoint that *created* the scriptPubKey.  For spends_result, you want the txid of the transaction that *spends* the scriptPubKey.  So instead of the DB key's outpoint as the transaction id to be returned to the user, you want the transaction id of the transaction in the DB value.  Or, in the",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r364389525,364389525,src/index/addrindex.cpp
MarcoFalke,2020-01-10T17:56:13Z,Should use the new `.Check()` syntax instead,https://github.com/bitcoin/bitcoin/pull/14053#discussion_r365356888,365356888,src/rpc/rawtransaction.cpp
romanz,2020-08-06T17:16:24Z,"```suggestion\n * uniqueness and to support multiple values for a single addr_id and key_type\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r466563287,466563287,src/index/addrindex.cpp
romanz,2020-08-06T17:16:41Z,"```suggestion\n * addr_id is the hash of the script_pub_key computed using MurmurHash3, a\n```",https://github.com/bitcoin/bitcoin/pull/14053#discussion_r466563439,466563439,src/index/addrindex.cpp
