ryanofsky,2021-04-06 20:19:11,"It's great for this to be removing the recursive locks in 09c924d3beb56a6b64d8855b1818b6e73c40ec0d and 5b8587f0bf5076d6651ec67d4a941034b5287429. Also annotating CChainState::m_chain in 8257e9ab7592a7fe459089f021053c7740004817 makes a lot of sense.\n\nThe thing I don't understand is what bug is prevented by making `m_active_chainstate` `std::atomic<CChainState*>` instead of `CChainState*`? What b",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814412610,814412610,
DrahtBot,2021-04-06 23:51:22,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21789 (refactor: Remove ::Params() global from CChainState by MarcoFalke)\n* #21584 (Fix assumeutxo crash due to invalid ",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814504792,814504792,
jamesob,2021-04-07 02:08:46,"Thanks for the quick look @ryanofsky. \n\n> The thing I don't understand is what bug is prevented by making m_active_chainstate std::atomic<CChainState*> instead of CChainState*? What bugs are prevented by adding LOCK(m_cs_chainstates); or having m_cs_chainstates exist at all?\n\nStrictly speaking, I don't think there's a difference in bugs between this approach and just repurposing `cs_main` ",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814548722,814548722,
ryanofsky,2021-04-08 21:28:45,"Will review in more detail, and I'm all for lock granularity if locks are independent. But if we're just turning one lock into two dependent locks where you acquire one lock, release it, then always acquire the other lock, it seems pointlessly complex. It increases the number of states things can be in and makes thread safety annotations less likely to catch race conditions. If there is theoretica",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-816222195,816222195,
dongcarl,2021-04-13 01:51:21,"I haven't read everything yet, and plan on doing it soon. Q for you: Does this mean that even if we hold `::cs_main`, we won't be sure that the `m_active_chainstate` won't change from under us?",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818372304,818372304,
jamesob,2021-04-13 15:12:03,"Good points @ryanofsky @dongcarl. After digesting this a little, I actually think that both this approach *and* our current approach have bugs.\n\nConsider the case where `ActivateSnapshot()` is called [at this moment during `ProcessNewBlock()`](https://github.com/jamesob/bitcoin/blob/c47a00d3de4ac3e62d3eee215f6180d4f3170dfb/src/validation.cpp#L3840). Neither a `cs_main` hold nor the `atomic` ap",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818814730,818814730,
ryanofsky,2021-04-13 15:40:50,"> The narrow solution in this case is maybe obviously to grab a single chainstate at the top of the function (instead of `calling` `ActiveChainstate()` for each usage)\n\nYes, please. This was on my unimplemented review suggestion followup list. https://github.com/bitcoin/bitcoin/pull/20749#discussion_r560979259 https://github.com/bitcoin/bitcoin/pull/20749#pullrequestreview-578845627 https://gi",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818836912,818836912,
ryanofsky,2021-04-14 17:05:07,"Offline thread:\n\n\<james>: I think we need cs_active_chainstate or something that functions like PNB either acquire or are annotated with to prevent the active chainstate from being swapped out during their usage\n\n\<russ>: I'm not trying to claim adding lock annotations will prevent all Chainstatemanger callers from being buggy and wrongly assuming chainstate doesn't change when they didn'",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819675825,819675825,
ryanofsky,2021-04-14 17:11:11,"If there is a case where it's neccessary for code to release cs_main but prevent the active chain from changing would suggest a condition variable:\n\n```c++\nbool m_lock_chainstate = false;\nstd::condition_variable m_lock_chainstate_cv;\n```\n\nThen in the code that wants to update the chainstate:\n\n```c++\nlock_chainstate_cv.wait(cs_main, []{return !lock_chainstate;});\n```\n\nAnd ",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819680129,819680129,
ryanofsky,2021-04-14 17:20:42,"Actually I guess that could be equivalent to your [active_chainstate](https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819675825) mutex if it using manual locking instead of a scoped lock. So maybe I'll arrive at the same conclusion as you from a different angle. It just seems like there are a lot of solutions here, and there shouldn't be any conflict between a good solution and one that",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819685974,819685974,
jnewbery,2021-04-15 10:53:42,"I haven't looked at the code here yet, but I want to respond to a couple of the points raised in the discussion here:\n\n> Not putting EXCLUSIVE_LOCKS_REQUIRED(cs_main) on ChainstateManager methods seems like Six Flags saying congratulations, we're waiving the $100 fee to get into the park, we're just going to charge you $100 the first time you get onto any ride. It seems like this could only be",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-820330794,820330794,
ryanofsky,2021-04-15 12:09:14,"> Most of the client code (eg in net_processing, rpc, etc) shouldn't need to lock chainman in most cases. Usually it's just trying to read a single piece of data (whether we're in IBD, what the current height is, fetch a CBlockIndex pointer to the tip, etc). \n\nYes, I think we are on the same page. When you just need one piece of data, this is what atomics are for and it makes sense to switch a",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-820373026,820373026,
DrahtBot,2021-05-03 09:32:25,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-831141850,831141850,
DrahtBot,2021-05-12 20:46:01,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-840085400,840085400,
