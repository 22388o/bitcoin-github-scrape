practicalswift,2017-10-21T23:03:35Z,@laanwj Good point. Fixed! :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338438395,338438395,
practicalswift,2017-10-22T11:07:39Z,"Added commits from #11547 (""Avoid unintended unsigned integer wraparounds in FormatScript(...) and SplitHostPort(...)"") as requested :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338469134,338469134,
practicalswift,2017-10-24T06:30:55Z,Added a few more wrap-arounds and squashed. Now at 16 fixed wrap-arounds.,https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338887851,338887851,
sipa,2017-10-24T06:32:28Z,We tend to use C-style casts for primitive types... just for brevity.,https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338888132,338888132,
practicalswift,2017-10-24T06:37:50Z,"@sipa I'll change! Other than that, do the changes look reasonable? :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-338889062,338889062,
practicalswift,2017-10-25T09:07:32Z,@sipa Now using C-style casts for primitive types :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-339265375,339265375,
practicalswift,2017-10-25T19:35:19Z,"Added another wraparound fix (this time in `AcceptBlock(…)`) and squashed.\n\nAnyone willing to review? :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-339445880,339445880,
practicalswift,2017-11-09T15:51:41Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-343197368,343197368,
practicalswift,2017-12-05T18:30:04Z,Anyone willing to review - ACK or NACK? :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-349396815,349396815,
practicalswift,2018-01-28T10:49:47Z,Ping? :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-361053761,361053761,
practicalswift,2018-02-22T21:48:41Z,Do we not care about integer wrap-arounds? If so let me know and I'll close :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-367833754,367833754,
MarcoFalke,2018-02-22T22:27:00Z,"ACK test changes, they seem straightforward. The other need a cautious review, since they change behavior.\n\n(You can split the test changes into a separate pull request, if you want)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-367844106,367844106,
morcos,2018-03-05T20:57:39Z,"Re: policy/fees.cpp changes   utACK   (didn't review anything else)\n\nThanks!\n",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-370562782,370562782,
practicalswift,2018-03-12T22:02:23Z,@promag Thanks for reviewing. Switched to suggested `for` formulation. Please re-review.,https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-372477778,372477778,
practicalswift,2018-04-16T14:29:30Z,"Anyone willing to review?\n\nGetting the project to run cleanly under `-fsanitize=integer` would be very nice :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-381618931,381618931,
practicalswift,2018-04-16T15:52:50Z,"@promag Thanks for reviewing! Feedback addressed!\n\n@sipa @promag Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-381654160,381654160,
DrahtBot,2018-07-22T12:55:18Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 96 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-406864592,406864592,
practicalswift,2018-09-06T14:35:42Z,"@arvidn Updated to address your feedback. Please re-review!\n\nBTW, I love your talk about C++ integers! Great to have you as a reviewer of this PR :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-419116895,419116895,
practicalswift,2018-09-14T08:47:38Z,Updated! Please re-review.,https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-421277713,421277713,
DrahtBot,2018-09-21T13:31:13Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14224.html) (Document intentional and unintentional unsi",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-423531745,423531745,
practicalswift,2018-09-28T15:57:42Z,"To increase the likelihood of this PR getting merged – should I limit it to a subset that is low-risk/non-controversial? Please help me find that subset :-)\n\nIt would be really nice to get rid of these unintended unsigned integer wraparounds. ",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-425482291,425482291,
flack,2018-09-28T20:30:48Z,"> Please help me find that subset :-)\n\n@practicalswift see https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-367844106",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-425557240,425557240,
practicalswift,2018-10-07T12:22:06Z,@flack That subset has already been fixed – see #12516 :-),https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-427649164,427649164,
arvidn,2018-11-05T14:16:03Z,"I don't have any authority here, I can only offer advice how I would approach this.\n\nWhat do I mean by ""this""? I think the code should transition to using signed integers pervasively, everywhere by default, except the places where it needs unsigned integers (such as bit fiddling and modulo-2 arithmetic, a lot of crypto code falls into this category).\n\nI think getting there has to be increm",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-435890346,435890346,
MarcoFalke,2018-11-05T14:25:23Z,"If we decide to return sizes and lengths as int64_t, that should probably be documented in the developer notes (coding style) with rationale for doing so. Otherwise it seems like the code could go back and forth over this constantly.",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-435893403,435893403,
practicalswift,2018-11-05T15:57:14Z,"@arvidn Good point regarding splitting this PR into smaller parts. I'll do that.\n\n@arvidn @MarcoFalke Are there any parts of this PR that you can ACK or NACK? I'm trying to identify the appropriate parts to split it in :-)",https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-435927455,435927455,
laanwj,2017-10-21T09:19:05Z,Does this still need the ```<int>``` qualifier on `std::max/min` if you cast all the arguments to int?,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r146101242,146101242,src/test/prevector_tests.cpp
practicalswift,2017-10-24T06:58:23Z,This change needs extra review. Is this the correct way to handle this wrap-around?,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r146467591,146467591,src/policy/fees.cpp
MarcoFalke,2018-03-05T17:59:05Z,This change is already in master,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172274239,172274239,src/test/scheduler_tests.cpp
promag,2018-03-05T18:08:42Z,Why is this necessary?,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172277234,172277234,src/txmempool.cpp
promag,2018-03-05T18:19:05Z,"IMO there is no need in copying the whole string. Suggestion:\n```cpp\nif (!ret.empty()) ret.pop_back();\nreturn ret;\n```",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172280302,172280302,src/core_write.cpp
promag,2018-03-05T18:51:25Z,Does it matters if `nBlockHeight < GetMaxConfirms()`? Maybe we should just skip `EstimateMedianVal` entirely if so. cc @morcos ,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172289616,172289616,src/policy/fees.cpp
morcos,2018-03-05T19:26:32Z,"Actually I think the existing code is broken, we should fix it by replacing the for loop with:\n`for (unsigned int confct = confTarget; confct < GetMaxConfirms() && confct <= nBlockHeight; confct++)`",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172300217,172300217,src/policy/fees.cpp
promag,2018-03-05T19:31:12Z,That makes sense. ,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172301578,172301578,src/policy/fees.cpp
practicalswift,2018-03-05T20:31:04Z,Thanks @promag and @morcos. Now updated. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172318907,172318907,src/policy/fees.cpp
promag,2018-03-05T21:23:43Z,"It doesn't matter if it wraps, `j` is only used inside the loop and it only wraps when `j = 0` which is when the loop ends.\n\nAnyway, how about changing to:\n```cpp\nfor (int j = tx.vin.size() - 1; j >= 0; --j) {\n```\nwhich IMO is more clear.\n\nEdit: `j` could still be `unsigned` since `tx.vin.size()` is always `> 0` (this code runs for non coinbase transactions), but I guess the analys",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r172332877,172332877,src/validation.cpp
practicalswift,2018-03-12T21:52:14Z,"Consider the case where `add == false` and `it->GetTxSize() == 2`.\n\nThen an unsigned integer overflow occurs when calculating `updateCount * it->GetTxSize()` (but not for `updateCount * (int64_t)it->GetTxSize()`).\n\n(And yes, the resulting `int64_t updateSize` will be `-2` in both cases :-))",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r173958925,173958925,src/txmempool.cpp
practicalswift,2018-03-12T22:09:23Z,All unsigned integer overflows matter :-),https://github.com/bitcoin/bitcoin/pull/11535#discussion_r173963087,173963087,src/validation.cpp
promag,2018-03-12T23:24:47Z,Why is this cast necessary?,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r173977398,173977398,src/chain.h
practicalswift,2018-03-13T20:44:59Z,"An unsigned integer overflow occurs in the case where `vChain.size() == 0`.\n\n(And yes, the value return by `Height()` will be the expected `-1`, but an overflow occurred before returning :-))",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r174277929,174277929,src/chain.h
promag,2018-04-16T14:39:05Z,"Nit, `++ confct`.",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r181757116,181757116,src/policy/fees.cpp
promag,2018-04-16T14:40:14Z,:+1:,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r181757524,181757524,src/txmempool.cpp
promag,2018-04-16T14:40:22Z,:+1:,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r181757570,181757570,src/chain.h
promag,2018-04-16T14:42:50Z,Should cast here too (`int j = (int)tx.vin.size() - 1`)?,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r181758492,181758492,src/validation.cpp
arvidn,2018-09-06T14:23:40Z,it seems questionable that `confct` is unsigned to begin with. presumably this loop doesn't rely on the counter having modulo-2 arithmetic.,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r215645298,215645298,src/policy/fees.cpp
practicalswift,2018-09-14T08:59:15Z,@arvidn Thanks for reviewing! Do you suggest changing it from `unsigned int` to `int` or leaving it as is? :-)  Note that `GetMaxConfirms()` returns an `unsigned int`.,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r217645506,217645506,src/policy/fees.cpp
arvidn,2018-09-15T00:07:45Z,"yes, in general I would recommend using signed integers for anything that is expected to have normal arithmetic (as opposed to modulo-2 arithmetic). i.e. `GetMaxConfirms()` should probably return a signed integer. But I don't think it's practical to ""unravel"" all such dependencies in one commit.",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r217867769,217867769,src/policy/fees.cpp
arvidn,2018-09-15T00:08:25Z,"yes, in general I would recommend using signed integers for anything that is expected to have normal arithmetic (as opposed to modulo-2 arithmetic). i.e. `GetMaxConfirms()` should probably return a signed integer. But I don't think it's practical to ""unravel"" all such dependencies in one commit.",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r217867812,217867812,src/policy/fees.cpp
practicalswift,2018-09-21T07:51:42Z,"```\n2018-09-19 12:07:43 clang-tidy(pr=11535): src/script/interpreter.cpp:54:74: warning: macro argument should be enclosed in parentheses [misc-macro-parentheses]\n```",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r219410939,219410939,src/script/interpreter.cpp
practicalswift,2018-09-21T07:51:53Z,"```\n2018-09-19 12:07:43 clang-tidy(pr=11535): src/script/interpreter.cpp:55:83: warning: macro argument should be enclosed in parentheses [misc-macro-parentheses]\n```",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r219410982,219410982,src/script/interpreter.cpp
ken2812221,2018-11-07T18:31:56Z,How do this avoid overflow?,https://github.com/bitcoin/bitcoin/pull/11535#discussion_r231625644,231625644,src/validation.cpp
sipa,2018-11-07T18:36:57Z,"It won't decrement when `num` is 0. The old code would stop the loop, but still decrement.",https://github.com/bitcoin/bitcoin/pull/11535#discussion_r231627334,231627334,src/validation.cpp
