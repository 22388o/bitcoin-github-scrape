[
  {
    "sha": "be8eec170694eed6cc1377330f579b716454067f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZThlZWMxNzA2OTRlZWQ2Y2MxMzc3MzMwZjU3OWI3MTY0NTQwNjdm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-24T06:18:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-06T23:33:44Z"
      },
      "message": "Avoid unintentional unsigned integer wraparounds",
      "tree": {
        "sha": "1bc94bf08daddc36fb48e65106117191fb239b67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bc94bf08daddc36fb48e65106117191fb239b67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be8eec170694eed6cc1377330f579b716454067f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8eec170694eed6cc1377330f579b716454067f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be8eec170694eed6cc1377330f579b716454067f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8eec170694eed6cc1377330f579b716454067f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d864e45730be82879abe9c096c4d577975fdda7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d864e45730be82879abe9c096c4d577975fdda7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d864e45730be82879abe9c096c4d577975fdda7d"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ffd5eda30d1c2d607f04122d44ac8822f55e598d",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -475,7 +475,7 @@ class CChain {\n \n     /** Return the maximal height in the chain. Is equal to chain.Tip() ? chain.Tip()->nHeight : -1. */\n     int Height() const {\n-        return vChain.size() - 1;\n+        return (int)vChain.size() - 1;\n     }\n \n     /** Set/initialize a chain with a given tip. */"
      },
      {
        "sha": "a08f2bdb034e079beaa2cc3f751b43d76f67c721",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -58,7 +58,10 @@ std::string FormatScript(const CScript& script)\n         ret += strprintf(\"0x%x \", HexStr(it2, script.end()));\n         break;\n     }\n-    return ret.substr(0, ret.size() - 1);\n+    if (!ret.empty()) {\n+        ret.pop_back();\n+    }\n+    return ret;\n }\n \n const std::map<unsigned char, std::string> mapSigHashTypes = {"
      },
      {
        "sha": "82fa9b8a4f67e571739d8e026f9c4822be8c9fde",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -288,7 +288,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         nConf += confAvg[periodTarget - 1][bucket];\n         totalNum += txCtAvg[bucket];\n         failNum += failAvg[periodTarget - 1][bucket];\n-        for (unsigned int confct = confTarget; confct < GetMaxConfirms(); confct++)\n+        for (unsigned int confct = confTarget; confct < GetMaxConfirms() && confct <= nBlockHeight; ++confct)\n             extraNum += unconfTxs[(nBlockHeight - confct)%bins][bucket];\n         extraNum += oldUnconfTxs[bucket];\n         // If we have enough transaction data points in this range of buckets,"
      },
      {
        "sha": "dda541aa153f6c17174a940effb130a1cb912ee0",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -303,8 +303,8 @@ class prevector {\n     iterator end() { return iterator(item_ptr(size())); }\n     const_iterator end() const { return const_iterator(item_ptr(size())); }\n \n-    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }\n-    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }\n+    reverse_iterator rbegin() { return reverse_iterator(item_ptr((int)size() - 1)); }\n+    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr((int)size() - 1)); }\n     reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }\n     const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }\n "
      },
      {
        "sha": "36626d630d1f464c55379929a0b98f24cf77c83f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -51,8 +51,8 @@ bool CastToBool(const valtype& vch)\n  * Script is a stack machine (like Forth) that evaluates a predicate\n  * returning a bool indicating valid or not.  There are no loops.\n  */\n-#define stacktop(i)  (stack.at(stack.size()+(i)))\n-#define altstacktop(i)  (altstack.at(altstack.size()+(i)))\n+#define stacktop(i)  (stack.at((size_t)((ssize_t)stack.size() + (ssize_t)i)))\n+#define altstacktop(i)  (altstack.at((size_t)((ssize_t)altstack.size() + (ssize_t)i)))\n static inline void popstack(std::vector<valtype>& stack)\n {\n     if (stack.empty())"
      },
      {
        "sha": "d2a95fdca9774e9470c842031c73955d40c7f51a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -216,7 +216,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n         UpdateChild(piter, it, add);\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n-    const int64_t updateSize = updateCount * it->GetTxSize();\n+    const int64_t updateSize = updateCount * (int64_t)it->GetTxSize();\n     const CAmount updateFee = updateCount * it->GetModifiedFee();\n     for (txiter ancestorIt : setAncestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));"
      },
      {
        "sha": "2f5de60d4c0f5a15bb79700fa1babee1a921173a",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -111,7 +111,7 @@ void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n     bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n-    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n+    bool fMultiColon = fHaveColon && colon != 0 && (in.find_last_of(':', colon - 1) != in.npos);\n     if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n         int32_t n;\n         if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {"
      },
      {
        "sha": "a5e94b2ec1d6aa67eb4827a7dd9488e97483141c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8eec170694eed6cc1377330f579b716454067f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8eec170694eed6cc1377330f579b716454067f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=be8eec170694eed6cc1377330f579b716454067f",
        "patch": "@@ -1608,7 +1608,7 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n                 error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n                 return DISCONNECT_FAILED;\n             }\n-            for (unsigned int j = tx.vin.size(); j-- > 0;) {\n+            for (int j = (int)tx.vin.size() - 1; j >= 0; --j) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 int res = ApplyTxInUndo(std::move(txundo.vprevout[j]), view, out);\n                 if (res == DISCONNECT_FAILED) return DISCONNECT_FAILED;\n@@ -3468,7 +3468,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // blocks which are too close in height to the tip.  Apply this test\n     // regardless of whether pruning is enabled; it should generally be safe to\n     // not process unrequested blocks.\n-    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n+    bool fTooFarAhead = pindex->nHeight > (chainActive.Height() + (int)MIN_BLOCKS_TO_KEEP);\n \n     // TODO: Decouple this function from the block download logic by removing fRequested\n     // This requires some new chain data structure to efficiently look up if a\n@@ -4707,7 +4707,8 @@ bool LoadMempool()\n         }\n         uint64_t num;\n         file >> num;\n-        while (num--) {\n+        while (num) {\n+            --num;\n             CTransactionRef tx;\n             int64_t nTime;\n             int64_t nFeeDelta;"
      }
    ]
  },
  {
    "sha": "a92926a7fa85d56da01925ecd3dff9201a467734",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTI5MjZhN2ZhODVkNTZkYTAxOTI1ZWNkM2RmZjkyMDFhNDY3NzM0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-23T21:24:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-11T18:29:49Z"
      },
      "message": "Fix unintentional unsigned integer wrap-around in GetBlockProofEquivalentTime(...) when to.nChainWork <= from.nChainWork",
      "tree": {
        "sha": "3ca7fc07ea609f1b6ec1985c97fef1a93f16c53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ca7fc07ea609f1b6ec1985c97fef1a93f16c53b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a92926a7fa85d56da01925ecd3dff9201a467734",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92926a7fa85d56da01925ecd3dff9201a467734",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a92926a7fa85d56da01925ecd3dff9201a467734",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92926a7fa85d56da01925ecd3dff9201a467734/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be8eec170694eed6cc1377330f579b716454067f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8eec170694eed6cc1377330f579b716454067f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be8eec170694eed6cc1377330f579b716454067f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cec2b21bb2175920586f63328f227f1d79217853",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a92926a7fa85d56da01925ecd3dff9201a467734/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a92926a7fa85d56da01925ecd3dff9201a467734/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=a92926a7fa85d56da01925ecd3dff9201a467734",
        "patch": "@@ -147,7 +147,7 @@ int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& fr\n     if (r.bits() > 63) {\n         return sign * std::numeric_limits<int64_t>::max();\n     }\n-    return sign * r.GetLow64();\n+    return sign * static_cast<int64_t>(r.GetLow64());\n }\n \n /** Find the last common ancestor two blocks have."
      },
      {
        "sha": "3e77d6b9ce9635470badc18fc39279eda755e5bb",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a92926a7fa85d56da01925ecd3dff9201a467734/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a92926a7fa85d56da01925ecd3dff9201a467734/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a92926a7fa85d56da01925ecd3dff9201a467734",
        "patch": "@@ -51,8 +51,8 @@ bool CastToBool(const valtype& vch)\n  * Script is a stack machine (like Forth) that evaluates a predicate\n  * returning a bool indicating valid or not.  There are no loops.\n  */\n-#define stacktop(i)  (stack.at((size_t)((ssize_t)stack.size() + (ssize_t)i)))\n-#define altstacktop(i)  (altstack.at((size_t)((ssize_t)altstack.size() + (ssize_t)i)))\n+#define stacktop(i)  (stack.at((size_t)((int)stack.size() + (int)(i))))\n+#define altstacktop(i)  (altstack.at((size_t)((int)altstack.size() + (int)(i))))\n static inline void popstack(std::vector<valtype>& stack)\n {\n     if (stack.empty())"
      }
    ]
  },
  {
    "sha": "42aba473a57fb564b2deb81d902da2f1dc9ef44b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmFiYTQ3M2E1N2ZiNTY0YjJkZWI4MWQ5MDJkYTJmMWRjOWVmNDRi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-06T23:35:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-11T18:29:49Z"
      },
      "message": "Remove UBSan suppression",
      "tree": {
        "sha": "5550bd259832022590c4f31e3ec69f545e698ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5550bd259832022590c4f31e3ec69f545e698ef3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42aba473a57fb564b2deb81d902da2f1dc9ef44b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42aba473a57fb564b2deb81d902da2f1dc9ef44b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42aba473a57fb564b2deb81d902da2f1dc9ef44b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42aba473a57fb564b2deb81d902da2f1dc9ef44b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a92926a7fa85d56da01925ecd3dff9201a467734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92926a7fa85d56da01925ecd3dff9201a467734",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a92926a7fa85d56da01925ecd3dff9201a467734"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c3f9a527e410fa3b920eb503c9651378fb58e50d",
        "filename": "contrib/sanitizers-ubsan.suppressions",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42aba473a57fb564b2deb81d902da2f1dc9ef44b/contrib/sanitizers-ubsan.suppressions",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42aba473a57fb564b2deb81d902da2f1dc9ef44b/contrib/sanitizers-ubsan.suppressions",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/sanitizers-ubsan.suppressions?ref=42aba473a57fb564b2deb81d902da2f1dc9ef44b",
        "patch": "@@ -10,10 +10,7 @@ unsigned-integer-overflow:basic_string.h\n unsigned-integer-overflow:bench/bench.h\n unsigned-integer-overflow:bitcoin-tx.cpp\n unsigned-integer-overflow:bloom.cpp\n-unsigned-integer-overflow:chain.cpp\n-unsigned-integer-overflow:chain.h\n unsigned-integer-overflow:coded_stream.h\n-unsigned-integer-overflow:core_write.cpp\n unsigned-integer-overflow:crypto/chacha20.cpp\n unsigned-integer-overflow:crypto/ctaes/ctaes.c\n unsigned-integer-overflow:crypto/ripemd160.cpp\n@@ -25,12 +22,7 @@ unsigned-integer-overflow:leveldb/db/log_reader.cc\n unsigned-integer-overflow:leveldb/util/bloom.cc\n unsigned-integer-overflow:leveldb/util/crc32c.h\n unsigned-integer-overflow:leveldb/util/hash.cc\n-unsigned-integer-overflow:policy/fees.cpp\n-unsigned-integer-overflow:prevector.h\n-unsigned-integer-overflow:script/interpreter.cpp\n unsigned-integer-overflow:stl_bvector.h\n unsigned-integer-overflow:streams.h\n unsigned-integer-overflow:txmempool.cpp\n-unsigned-integer-overflow:util/strencodings.cpp\n-unsigned-integer-overflow:validation.cpp\n vptr:fs.cpp"
      }
    ]
  }
]