practicalswift,2018-04-18T13:03:27Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-382378760,382378760,
sdaftuar,2018-04-19T12:45:45Z,@sipa raised design concerns with caching data like this in CTransaction previously (see #9700),https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-382720372,382720372,
TheBlueMatt,2018-04-20T16:01:28Z,"Honestly I think we need to revive #9700. Now that SegWit has some use, giving up on the huge performance gains of that (and this) for (IMO) minor design concerns is an absurd tradeoff.",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383142776,383142776,
sipa,2018-04-20T16:09:09Z,"Then at the very least introduce alternate versions of CTransaction/CBlock that don't precompute anything, for use in reindexing and rescanning and serving blocks from disk. Otherwise you'll waste your time computing wtxids/sighashes in those cases, where they're never used.",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383145046,383145046,
TheBlueMatt,2018-04-20T16:11:48Z,"Indeed, though we may want to look into something wholesale smarter for rescan, its already impossibly slow even when considering the amount of I/O required.",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383145929,383145929,
MarcoFalke,2018-05-04T21:57:06Z,Split into two commits for easier review,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-386745532,386745532,
TheBlueMatt,2018-05-10T18:24:34Z,utACK fac1223a568fa1ad6dd602350598eed278d115e8. We should probably take this as-is IMO and then we can clean things up when we look at fully splitting out hashes in #13098.,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388141402,388141402,
jamesob,2018-05-10T20:10:01Z,"utACK https://github.com/bitcoin/bitcoin/pull/13011/commits/fac1223a568fa1ad6dd602350598eed278d115e8\n\nNumbers would be nice, but the code looks good.",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388170656,388170656,
ryanofsky,2018-05-11T14:04:44Z,"Was a discussion about this in IRC meeting yesterday: https://botbot.me/freenode/bitcoin-core-dev/msg/99929243/\n\nBeginning of discussion before it goes on to talk about related PRs like #13098\n\n> [19:10:54] \<MarcoFalke> Background: The witness hash is used for all loose transactions, so caching it would speed up validation (e.g. ATMP and compact block relay). Also, the witness hash is equ",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388373544,388373544,
MarcoFalke,2018-05-11T14:28:03Z,"This speeds up:\n* compactblocks (v2)\n* ATMP\n* validation and miner (via `BlockWitnessMerkleRoot`)\n* sigcache (see also unrelated #13204)\n* rpc and rest (nice, but irrelevant)\n\nThis presumably slows down rescan, which uses a `CTransaction` and its `GetHash`, but never uses the `GetWitnessHash`. The slow down is proportional to the number of witness transactions in the rescan window. I",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388380145,388380145,
MarcoFalke,2018-05-11T14:56:34Z,"Note: You can run benchmarks such as:\n\n```\n./src/bench/bench_bitcoin --filter=MempoolEviction  # ATMP (unchecked) with 100% segwit transactions\n./src/bench/bench_bitcoin --filter=DeserializeBlockTest  # Used by rescan, so this should be slower, but none of the txs have witness, so there is no difference in runtime",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388388722,388388722,
jimpo,2018-05-13T02:42:56Z,"If performance is a concern in contexts where the precomputed value isn't needed, couldn't this just lazily compute and cache the witness hash? There'd probably have to be some concurrency handling, I suppose.",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388596940,388596940,
sipa,2018-05-13T02:46:18Z,"avoid ""some concurrency handling"" was the reason for making these fields const in the first place.\n\nThe alternative is either indirections (through atomic pointers) or mutexes all over the place.\n\nThe solution to not computing it in places where it isn't needed is not using a type that caches these values.",https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388597043,388597043,
promag,2018-05-13T07:07:00Z,utACK fac1223.,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-388606259,388606259,
jimpo,2018-05-17T18:40:28Z,utACK fac1223,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-389967563,389967563,
sipa,2018-05-17T20:43:36Z,utACK fac1223a568fa1ad6dd602350598eed278d115e8,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-390005021,390005021,
danielsam,2018-05-21T18:47:30Z,utACK [fac1223](https://github.com/bitcoin/bitcoin/commit/fac1223a568fa1ad6dd602350598eed278d115e8),https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-390746432,390746432,
laanwj,2018-05-23T17:26:10Z,utACK fac1223a568fa1ad6dd602350598eed278d115e,https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-391431614,391431614,
ryanofsky,2018-04-17T22:21:53Z,"Could use `MakeUnique<const uint256>(SerializeHash(*this, SER_GETHASH, 0));` here",https://github.com/bitcoin/bitcoin/pull/13011#discussion_r182260079,182260079,src/primitives/transaction.cpp
ryanofsky,2018-04-17T22:25:39Z,"I believe you could remove some of the boilerplate and repetition here using member initialization in the header:\n\n```\nconst std::unique_ptr<const uint256> m_witness_hash = ComputeWitnessHash();\n```\n\nIt would be nice to do this for the other members, too.",https://github.com/bitcoin/bitcoin/pull/13011#discussion_r182260771,182260771,src/primitives/transaction.cpp
promag,2018-04-18T07:01:24Z,"I wonder what would be the execution order in this case? `ComputeWitnessHash` calls `SerializeHash(*this, ...)` so other members must be initialized before.",https://github.com/bitcoin/bitcoin/pull/13011#discussion_r182326060,182326060,src/primitives/transaction.cpp
promag,2018-04-18T07:03:17Z,Could this expression be in `ComputeWitnessHash`?,https://github.com/bitcoin/bitcoin/pull/13011#discussion_r182326418,182326418,src/primitives/transaction.h
ryanofsky,2018-05-17T20:17:47Z,"> I wonder what would be the execution order in this case? ComputeWitnessHash calls SerializeHash(*this, ...) so other members must be initialized before.\n\nExecution order always the matches order members are declared in the class, not the order initializations are written in the constructor (compilers will warn if the orders differ), so this wouldn't change behavior. You can see https://isocp",https://github.com/bitcoin/bitcoin/pull/13011#discussion_r189087616,189087616,src/primitives/transaction.cpp
MarcoFalke,2018-05-17T20:30:13Z,"We couldn't do the same for the `hash` member, I guess, so will leave this as is for now.",https://github.com/bitcoin/bitcoin/pull/13011#discussion_r189091225,189091225,src/primitives/transaction.cpp
