[
  {
    "sha": "baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWYwNTA3NWZhZTJjYzI2MjVhMmE3NGIzNWNjNjY5MDJmM2NiZmEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-10T07:19:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-12T10:41:44Z"
      },
      "message": "Improve proxy initialization\n\nSimplify and make the code in AppInit2 more clear.\n\nThis provides a straightforward flow, gets rid of .count() (which makes\nit possible to override an earlier provided proxy option to nothing), as\nwell as comments the different cases.",
      "tree": {
        "sha": "740cc0dde16f88cbc7a94f9562ac1063a43087e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/740cc0dde16f88cbc7a94f9562ac1063a43087e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf05075fae2cc2625a2a74b35cc66902f3cbfa3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebab5d3c59558000f0e0fd18b7f26ed6f31ac21a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebab5d3c59558000f0e0fd18b7f26ed6f31ac21a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebab5d3c59558000f0e0fd18b7f26ed6f31ac21a"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "277a16ad0dd118a9deb703ac1e9c2912cfef6ece",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baf05075fae2cc2625a2a74b35cc66902f3cbfa3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baf05075fae2cc2625a2a74b35cc66902f3cbfa3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
        "patch": "@@ -984,31 +984,36 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    proxyType addrProxy;\n-    bool fProxy = false;\n-    if (mapArgs.count(\"-proxy\")) {\n-        addrProxy = proxyType(CService(mapArgs[\"-proxy\"], 9050), GetBoolArg(\"-proxyrandomize\", true));\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    // -proxy sets a proxy for all outgoing network traffic\n+    // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n+    std::string proxyArg = GetArg(\"-proxy\", \"\");\n+    if (proxyArg != \"\" && proxyArg != \"0\") {\n+        proxyType addrProxy = proxyType(CService(proxyArg, 9050), proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"]));\n+            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n+        SetProxy(NET_TOR, addrProxy);\n         SetNameProxy(addrProxy);\n-        fProxy = true;\n+        SetReachable(NET_TOR); // by default, -proxy sets onion as reachable, unless -noonion later\n     }\n \n-    // -onion can override normal proxy, -noonion disables connecting to .onion entirely\n-    if (!(mapArgs.count(\"-onion\") && mapArgs[\"-onion\"] == \"0\") &&\n-        (fProxy || mapArgs.count(\"-onion\"))) {\n-        proxyType addrOnion;\n-        if (!mapArgs.count(\"-onion\"))\n-            addrOnion = addrProxy;\n-        else\n-            addrOnion = proxyType(CService(mapArgs[\"-onion\"], 9050), GetBoolArg(\"-proxyrandomize\", true));\n-        if (!addrOnion.IsValid())\n-            return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), mapArgs[\"-onion\"]));\n-        SetProxy(NET_TOR, addrOnion);\n-        SetReachable(NET_TOR);\n+    // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n+    // -noonion (or -onion=0) disables connecting to .onion entirely\n+    // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n+    std::string onionArg = GetArg(\"-onion\", \"\");\n+    if (onionArg != \"\") {\n+        if (onionArg == \"0\") { // Handle -noonion/-onion=0\n+            SetReachable(NET_TOR, false); // set onions as unreachable\n+        } else {\n+            proxyType addrOnion = proxyType(CService(onionArg, 9050), proxyRandomize);\n+            if (!addrOnion.IsValid())\n+                return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));\n+            SetProxy(NET_TOR, addrOnion);\n+            SetReachable(NET_TOR);\n+        }\n     }\n \n     // see Step 2: parameter interactions for more information about these"
      }
    ]
  },
  {
    "sha": "edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGJkZjg4NTVkZWQ0MTQyZDc4YzBmOWI1ZWY4YzMyMzNjNjFhNWYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-15T10:44:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-15T10:45:13Z"
      },
      "message": "tests: Extend RPC proxy tests\n\nAlso test -noonion",
      "tree": {
        "sha": "0be3221bb38130b6317e61e0bec5836c389dabf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0be3221bb38130b6317e61e0bec5836c389dabf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf05075fae2cc2625a2a74b35cc66902f3cbfa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/baf05075fae2cc2625a2a74b35cc66902f3cbfa3"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 48,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3623c1616236b655aba2a1b61ba78f8e27b0fb8b",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 48,
        "deletions": 14,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=edbdf8855ded4142d78c0f9b5ef8c3233c61a5f0",
        "patch": "@@ -68,10 +68,10 @@ def setup_nodes(self):\n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0']\n+            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n             ])\n \n-    def node_test(self, node, proxies, auth):\n+    def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []\n         # Test: outgoing IPv4 connection through node\n         node.addnode(\"15.61.23.23:1234\", \"onetry\")\n@@ -99,17 +99,18 @@ def node_test(self, node, proxies, auth):\n             assert_equal(cmd.password, None)\n         rv.append(cmd)\n \n-        # Test: outgoing onion connection through node\n-        node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n-        cmd = proxies[2].queue.get()\n-        assert(isinstance(cmd, Socks5Command))\n-        assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n-        assert_equal(cmd.port, 8333)\n-        if not auth:\n-            assert_equal(cmd.username, None)\n-            assert_equal(cmd.password, None)\n-        rv.append(cmd)\n+        if test_onion:\n+            # Test: outgoing onion connection through node\n+            node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n+            cmd = proxies[2].queue.get()\n+            assert(isinstance(cmd, Socks5Command))\n+            assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n+            assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n+            assert_equal(cmd.port, 8333)\n+            if not auth:\n+                assert_equal(cmd.username, None)\n+                assert_equal(cmd.password, None)\n+            rv.append(cmd)\n \n         # Test: outgoing DNS name connection through node\n         node.addnode(\"node.noumenon:8333\", \"onetry\")\n@@ -139,8 +140,41 @@ def run_test(self):\n         assert_equal(len(credentials), 4)\n \n         # proxy on IPv6 localhost\n-        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False)\n+        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)\n+\n+        def networks_dict(d):\n+            r = {}\n+            for x in d['networks']:\n+                r[x['name']] = x\n+            return r\n+\n+        # test RPC getnetworkinfo\n+        n0 = networks_dict(self.nodes[0].getnetworkinfo())\n+        for net in ['ipv4','ipv6','onion']:\n+            assert_equal(n0[net]['proxy'], '%s:%i' % (self.conf1.addr))\n+            assert_equal(n0[net]['proxy_randomize_credentials'], True)\n+        assert_equal(n0['onion']['reachable'], True)\n+\n+        n1 = networks_dict(self.nodes[1].getnetworkinfo())\n+        for net in ['ipv4','ipv6']:\n+            assert_equal(n1[net]['proxy'], '%s:%i' % (self.conf1.addr))\n+            assert_equal(n1[net]['proxy_randomize_credentials'], False)\n+        assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n+        assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n+        assert_equal(n1['onion']['reachable'], True)\n         \n+        n2 = networks_dict(self.nodes[2].getnetworkinfo())\n+        for net in ['ipv4','ipv6','onion']:\n+            assert_equal(n2[net]['proxy'], '%s:%i' % (self.conf2.addr))\n+            assert_equal(n2[net]['proxy_randomize_credentials'], True)\n+        assert_equal(n2['onion']['reachable'], True)\n+\n+        n3 = networks_dict(self.nodes[3].getnetworkinfo())\n+        for net in ['ipv4','ipv6']:\n+            assert_equal(n3[net]['proxy'], '[%s]:%i' % (self.conf3.addr))\n+            assert_equal(n3[net]['proxy_randomize_credentials'], False)\n+        assert_equal(n3['onion']['reachable'], False)\n+\n if __name__ == '__main__':\n     ProxyTest().main()\n "
      }
    ]
  }
]