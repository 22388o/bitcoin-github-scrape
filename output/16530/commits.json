[
  {
    "sha": "b2ea20d3302275a62bbdfdb96169c6788fe7b9c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmVhMjBkMzMwMjI3NWE2MmJiZGZkYjk2MTY5YzY3ODhmZTdiOWMx",
    "commit": {
      "author": {
        "name": "Kristian Kramer",
        "email": "kristian@beyonddata.llc",
        "date": "2019-08-02T02:40:27Z"
      },
      "committer": {
        "name": "Kristian Kramer",
        "email": "kristian@beyonddata.llc",
        "date": "2019-08-03T15:30:37Z"
      },
      "message": "doc: Fix grammar and punctuation in developer notes\n\nThis pull request is regarding minor grammar and punctuation errors in the developer notes. There were no modifications to the existing code, only alterations to fix the grammar and punctuation in the text.\n\nUpdate developer-notes.md\n\nUpdate developer-notes.md\n\nRevert \"Update developer-notes.md\"\n\nThis reverts commit dfeb0bacb054ed24766f8af7bae0c0166b0cb4cb.",
      "tree": {
        "sha": "f5f3e8fc683562db98e0378c56bf24388abe892f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5f3e8fc683562db98e0378c56bf24388abe892f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2ea20d3302275a62bbdfdb96169c6788fe7b9c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ea20d3302275a62bbdfdb96169c6788fe7b9c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2ea20d3302275a62bbdfdb96169c6788fe7b9c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ea20d3302275a62bbdfdb96169c6788fe7b9c1/comments",
    "author": {
      "login": "Tech1k",
      "id": 26831625,
      "node_id": "MDQ6VXNlcjI2ODMxNjI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/26831625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tech1k",
      "html_url": "https://github.com/Tech1k",
      "followers_url": "https://api.github.com/users/Tech1k/followers",
      "following_url": "https://api.github.com/users/Tech1k/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tech1k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tech1k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tech1k/subscriptions",
      "organizations_url": "https://api.github.com/users/Tech1k/orgs",
      "repos_url": "https://api.github.com/users/Tech1k/repos",
      "events_url": "https://api.github.com/users/Tech1k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tech1k/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Tech1k",
      "id": 26831625,
      "node_id": "MDQ6VXNlcjI2ODMxNjI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/26831625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tech1k",
      "html_url": "https://github.com/Tech1k",
      "followers_url": "https://api.github.com/users/Tech1k/followers",
      "following_url": "https://api.github.com/users/Tech1k/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tech1k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tech1k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tech1k/subscriptions",
      "organizations_url": "https://api.github.com/users/Tech1k/orgs",
      "repos_url": "https://api.github.com/users/Tech1k/repos",
      "events_url": "https://api.github.com/users/Tech1k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tech1k/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5639d71a07db4cdc896ba3e2658b335d91a65b9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5639d71a07db4cdc896ba3e2658b335d91a65b9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5639d71a07db4cdc896ba3e2658b335d91a65b9c"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 76,
      "deletions": 79
    },
    "files": [
      {
        "sha": "d1114b0c73f603b6b196b30345be99d4e346b27d",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 76,
        "deletions": 79,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ea20d3302275a62bbdfdb96169c6788fe7b9c1/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ea20d3302275a62bbdfdb96169c6788fe7b9c1/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=b2ea20d3302275a62bbdfdb96169c6788fe7b9c1",
        "patch": "@@ -62,7 +62,7 @@ tool to clean up patches automatically before submission.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces.\n   - No indentation for `public`/`protected`/`private` or for `namespace`.\n-  - No extra spaces inside parenthesis; don't do ( this )\n+  - No extra spaces inside parenthesis; don't do ( this ).\n   - No space after function names; one space after `if`, `for` and `while`.\n   - If an `if` only has a single-statement `then`-clause, it can appear\n     on the same line as the `if`, without braces. In every other case,\n@@ -72,12 +72,12 @@ tool to clean up patches automatically before submission.\n - **Symbol naming conventions**. These are preferred in new code, but are not\n required when doing so would need changes to significant pieces of existing\n code.\n-  - Variable (including function arguments) and namespace names are all lowercase, and may use `_` to\n+  - Variable (including function arguments) and namespace names are all lowercase and may use `_` to\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n   - Constant names are all uppercase, and use `_` to separate words.\n-  - Class names, function names and method names are UpperCamelCase\n+  - Class names, function names, and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n   - Test suite naming convention: The Boost test suite in file\n     `src/test/foo_tests.cpp` should be named `foo_tests`. Test suite names\n@@ -134,6 +134,7 @@ Bitcoin Core uses [Doxygen](http://www.doxygen.nl/) to generate its official doc\n Use Doxygen-compatible comment blocks for functions, methods, and fields.\n \n For example, to describe a function use:\n+\n ```c++\n /**\n  * ... text ...\n@@ -143,11 +144,12 @@ For example, to describe a function use:\n  */\n bool function(int arg1, const char *arg2)\n ```\n+\n A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n-To describe a class use the same construct above the class definition:\n+To describe a class, use the same construct above the class definition:\n ```c++\n /**\n  * Alerts are for notifying old versions if they become too obsolete and\n@@ -189,7 +191,7 @@ but the above styles are favored.\n \n Documentation can be generated with `make docs` and cleaned up with `make clean-docs`. The resulting files are located in `doc/doxygen/html`; open `index.html` to view the homepage.\n \n-Before running `make docs`, you will need to install dependencies `doxygen` and `dot`. For example, on MacOS via Homebrew:\n+Before running `make docs`, you will need to install dependencies `doxygen` and `dot`. For example, on macOS via Homebrew:\n ```\n brew install doxygen --with-graphviz\n ```\n@@ -231,7 +233,7 @@ that run in `-regtest` mode.\n Bitcoin Core is a multi-threaded application, and deadlocks or other\n multi-threading bugs can be very difficult to track down. The `--enable-debug`\n configure option adds `-DDEBUG_LOCKORDER` to the compiler flags. This inserts\n-run-time checks to keep track of which locks are held, and adds warnings to the\n+run-time checks to keep track of which locks are held and adds warnings to the\n debug.log file if inconsistencies are detected.\n \n ### Valgrind suppressions file\n@@ -299,7 +301,7 @@ $ perf record \\\n     -p `pgrep bitcoind` -- sleep 60\n ```\n \n-You could then analyze the results by running\n+You could then analyze the results by running:\n \n ```sh\n perf report --stdio | c++filt | less\n@@ -364,7 +366,7 @@ Additional resources:\n Locking/mutex usage notes\n -------------------------\n \n-The code is multi-threaded, and uses mutexes and the\n+The code is multi-threaded and uses mutexes and the\n `LOCK` and `TRY_LOCK` macros to protect data structures.\n \n Deadlocks due to inconsistent lock ordering (thread 1 locks `cs_main` and then\n@@ -389,7 +391,7 @@ Threads\n \n - ThreadDNSAddressSeed : Loads addresses of peers from the DNS.\n \n-- ThreadMapPort : Universal plug-and-play startup/shutdown\n+- ThreadMapPort : Universal plug-and-play startup/shutdown.\n \n - ThreadSocketHandler : Sends/Receives data from peers on port 8333.\n \n@@ -408,7 +410,7 @@ Threads\n Ignoring IDE/editor files\n --------------------------\n \n-In closed-source environments in which everyone uses the same IDE it is common\n+In closed-source environments in which everyone uses the same IDE, it is common\n to add temporary files it produces to the project-wide `.gitignore` file.\n \n However, in open source software such as Bitcoin Core, where everyone uses\n@@ -446,33 +448,33 @@ pay attention to for reviewers of Bitcoin Core code.\n General Bitcoin Core\n ----------------------\n \n-- New features should be exposed on RPC first, then can be made available in the GUI\n+- New features should be exposed on RPC first, then can be made available in the GUI.\n \n   - *Rationale*: RPC allows for better automatic testing. The test suite for\n-    the GUI is very limited\n+    the GUI is very limited.\n \n-- Make sure pull requests pass Travis CI before merging\n+- Make sure pull requests pass Travis CI before merging.\n \n   - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n-     on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n-     confusion and mayhem\n+     on the master branch. Otherwise, all new pull requests will start failing the tests, resulting in\n+     confusion and mayhem.\n \n   - *Explanation*: If the test suite is to be updated for a change, this has to\n-    be done first\n+    be done first.\n \n Wallet\n -------\n \n - Make sure that no crashes happen with run-time option `-disablewallet`.\n \n   - *Rationale*: In RPC code that conditionally uses the wallet (such as\n-    `validateaddress`) it is easy to forget that global pointer `pwalletMain`\n+    `validateaddress`), it is easy to forget that global pointer `pwalletMain`\n     can be nullptr. See `test/functional/disablewallet.py` for functional tests\n-    exercising the API with `-disablewallet`\n+    exercising the API with `-disablewallet`.\n \n-- Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set\n+- Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set.\n \n-  - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB\n+  - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB.\n \n General C++\n -------------\n@@ -483,54 +485,54 @@ Guidelines](https://isocpp.github.io/CppCoreGuidelines/).\n Common misconceptions are clarified in those sections:\n \n - Passing (non-)fundamental types in the [C++ Core\n-  Guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional)\n+  Guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional).\n \n-- Assertions should not have side-effects\n+- Assertions should not have side-effects.\n \n   - *Rationale*: Even though the source code is set to refuse to compile\n     with assertions disabled, having side-effects in assertions is unexpected and\n-    makes the code harder to understand\n+    makes the code harder to understand.\n \n-- If you use the `.h`, you must link the `.cpp`\n+- If you use the `.h`, you must link the `.cpp`.\n \n   - *Rationale*: Include files define the interface for the code in implementation files. Including one but\n       not linking the other is confusing. Please avoid that. Moving functions from\n-      the `.h` to the `.cpp` should not result in build errors\n+      the `.h` to the `.cpp` should not result in build errors.\n \n-- Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n+- Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example, by using\n   `unique_ptr` for allocations in a function.\n \n-  - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n+  - *Rationale*: This avoids memory and resource leaks, and ensures exception safety.\n \n-- Use `MakeUnique()` to construct objects owned by `unique_ptr`s\n+- Use `MakeUnique()` to construct objects owned by `unique_ptr`s.\n \n   - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n     `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n \n C++ data structures\n --------------------\n \n-- Never use the `std::map []` syntax when reading from a map, but instead use `.find()`\n+- Never use the `std::map []` syntax when reading from a map, but instead use `.find()`.\n \n   - *Rationale*: `[]` does an insert (of the default element) if the item doesn't\n     exist in the map yet. This has resulted in memory leaks in the past, as well as\n-    race conditions (expecting read-read behavior). Using `[]` is fine for *writing* to a map\n+    race conditions (expecting read-read behavior). Using `[]` is fine for *writing* to a map.\n \n - Do not compare an iterator from one data structure with an iterator of\n-  another data structure (even if of the same type)\n+  another data structure (even if of the same type).\n \n   - *Rationale*: Behavior is undefined. In C++ parlor this means \"may reformat\n-    the universe\", in practice this has resulted in at least one hard-to-debug crash bug\n+    the universe\", in practice this has resulted in at least one hard-to-debug crash bug.\n \n - Watch out for out-of-bounds vector access. `&vch[vch.size()]` is illegal,\n   including `&vch[0]` for an empty vector. Use `vch.data()` and `vch.data() +\n   vch.size()` instead.\n \n-- Vector bounds checking is only enabled in debug mode. Do not rely on it\n+- Vector bounds checking is only enabled in debug mode. Do not rely on it.\n \n - Initialize all non-static class members where they are defined.\n   If this is skipped for a good reason (i.e., optimization on the critical\n-  path), add an explicit comment about this\n+  path), add an explicit comment about this.\n \n   - *Rationale*: Ensure determinism by avoiding accidental use of uninitialized\n     values. Also, static analyzers balk about this.\n@@ -554,30 +556,30 @@ class A\n   `int8_t`. Do not use bare `char` unless it is to pass to a third-party API.\n   This type can be signed or unsigned depending on the architecture, which can\n   lead to interoperability problems or dangerous conditions such as\n-  out-of-bounds array accesses\n+  out-of-bounds array accesses.\n \n-- Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior\n+- Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior.\n \n   - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n-  that are not language lawyers\n+  that are not language lawyers.\n \n Strings and formatting\n ------------------------\n \n - Be careful of `LogPrint` versus `LogPrintf`. `LogPrint` takes a `category` argument, `LogPrintf` does not.\n \n   - *Rationale*: Confusion of these can result in runtime exceptions due to\n-    formatting mismatch, and it is easy to get wrong because of subtly similar naming\n+    formatting mismatch, and it is easy to get wrong because of subtly similar naming.\n \n-- Use `std::string`, avoid C string manipulation functions\n+- Use `std::string`, avoid C string manipulation functions.\n \n   - *Rationale*: C++ string handling is marginally safer, less scope for\n-    buffer overflows and surprises with `\\0` characters. Also some C string manipulations\n-    tend to act differently depending on platform, or even the user locale\n+    buffer overflows, and surprises with `\\0` characters. Also, some C string manipulations\n+    tend to act differently depending on platform, or even the user locale.\n \n-- Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n+- Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing.\n \n-  - *Rationale*: These functions do overflow checking, and avoid pesky locale issues.\n+  - *Rationale*: These functions do overflow checking and avoid pesky locale issues.\n \n - Avoid using locale dependent functions if possible. You can use the provided\n   [`lint-locale-dependence.sh`](/test/lint/lint-locale-dependence.sh)\n@@ -607,14 +609,14 @@ Strings and formatting\n     `wcstoll`, `wcstombs`, `wcstoul`, `wcstoull`, `wcstoumax`, `wcswidth`,\n     `wcsxfrm`, `wctob`, `wctomb`, `wctrans`, `wctype`, `wcwidth`, `wprintf`\n \n-- For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers\n+- For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers.\n \n-  - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion\n+  - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion.\n \n Variable names\n --------------\n \n-Although the shadowing warning (`-Wshadow`) is not enabled by default (it prevents issues rising\n+Although the shadowing warning (`-Wshadow`) is not enabled by default (it prevents issues arising\n from using a different variable with the same name),\n please name variables so that their names do not shadow variables defined in the source code.\n \n@@ -633,22 +635,20 @@ AddressBookPage::AddressBookPage(Mode _mode)\n ```\n \n When using nested cycles, do not name the inner cycle variable the same as in\n-upper cycle etc.\n-\n+the upper cycle, etc.\n \n Threads and synchronization\n ----------------------------\n \n - Build and run tests with `-DDEBUG_LOCKORDER` to verify that no potential\n   deadlocks are introduced. As of 0.12, this is defined by default when\n-  configuring with `--enable-debug`\n+  configuring with `--enable-debug`.\n \n - When using `LOCK`/`TRY_LOCK` be aware that the lock exists in the context of\n   the current scope, so surround the statement and the code that needs the lock\n-  with braces\n+  with braces.\n \n   OK:\n-\n ```c++\n {\n     TRY_LOCK(cs_vNodes, lockNodes);\n@@ -657,7 +657,6 @@ Threads and synchronization\n ```\n \n   Wrong:\n-\n ```c++\n TRY_LOCK(cs_vNodes, lockNodes);\n {\n@@ -679,13 +678,11 @@ Scripts\n     `#!/usr/bin/env bash` searches the user's PATH to find the bash binary.\n \n   OK:\n-\n ```bash\n #!/usr/bin/env bash\n ```\n \n   Wrong:\n-\n ```bash\n #!/bin/bash\n ```\n@@ -694,9 +691,9 @@ Source code organization\n --------------------------\n \n - Implementation code should go into the `.cpp` file and not the `.h`, unless necessary due to template usage or\n-  when performance due to inlining is critical\n+  when performance due to inlining is critical.\n \n-  - *Rationale*: Shorter and simpler header files are easier to read, and reduce compile time\n+  - *Rationale*: Shorter and simpler header files are easier to read and reduce compile time.\n \n - Use only the lowercase alphanumerics (`a-z0-9`), underscore (`_`) and hyphen (`-`) in source code filenames.\n \n@@ -714,7 +711,7 @@ Source code organization\n - Don't import anything into the global namespace (`using namespace ...`). Use\n   fully specified types such as `std::string`.\n \n-  - *Rationale*: Avoids symbol conflicts\n+  - *Rationale*: Avoids symbol conflicts.\n \n - Terminate namespaces with a comment (`// namespace mynamespace`). The comment\n   should be placed on the same line as the brace closing the namespace, e.g.\n@@ -729,7 +726,7 @@ namespace {\n } // namespace\n ```\n \n-  - *Rationale*: Avoids confusion about the namespace context\n+  - *Rationale*: Avoids confusion about the namespace context.\n \n - Use `#include <primitives/transaction.h>` bracket syntax instead of\n   `#include \"primitives/transactions.h\"` quote syntax.\n@@ -752,13 +749,13 @@ namespace {\n GUI\n -----\n \n-- Do not display or manipulate dialogs in model code (classes `*Model`)\n+- Do not display or manipulate dialogs in model code (classes `*Model`).\n \n   - *Rationale*: Model classes pass through events and data from the core, they\n     should not interact with the user. That's where View classes come in. The converse also\n     holds: try to not directly access core data structures from Views.\n \n-- Avoid adding slow or blocking code in the GUI thread. In particular do not\n+- Avoid adding slow or blocking code in the GUI thread. In particular, do not\n   add new `interfaces::Node` and `interfaces::Wallet` method calls, even if they\n   may be fast now, in case they are changed to lock or communicate across\n   processes in the future.\n@@ -777,12 +774,12 @@ Subtrees\n Several parts of the repository are subtrees of software maintained elsewhere.\n \n Some of these are maintained by active developers of Bitcoin Core, in which case changes should probably go\n-directly upstream without being PRed directly against the project.  They will be merged back in the next\n+directly upstream without being PRed directly against the project. They will be merged back in the next\n subtree merge.\n \n-Others are external projects without a tight relationship with our project.  Changes to these should also\n-be sent upstream but bugfixes may also be prudent to PR against Bitcoin Core so that they can be integrated\n-quickly.  Cosmetic changes should be purely taken upstream.\n+Others are external projects without a tight relationship with our project. Changes to these should also\n+be sent upstream, but bugfixes may also be prudent to PR against Bitcoin Core so that they can be integrated\n+quickly. Cosmetic changes should be purely taken upstream.\n \n There is a tool in `test/lint/git-subtree-check.sh` to check a subtree directory for consistency with\n its upstream repository.\n@@ -812,11 +809,11 @@ you must be aware of.\n \n ### File Descriptor Counts\n \n-In most configurations we use the default LevelDB value for `max_open_files`,\n+In most configurations, we use the default LevelDB value for `max_open_files`,\n which is 1000 at the time of this writing. If LevelDB actually uses this many\n-file descriptors it will cause problems with Bitcoin's `select()` loop, because\n+file descriptors, it will cause problems with Bitcoin's `select()` loop, because\n it may cause new sockets to be created where the fd value is >= 1024. For this\n-reason, on 64-bit Unix systems we rely on an internal LevelDB optimization that\n+reason, on 64-bit Unix systems, we rely on an internal LevelDB optimization that\n uses `mmap()` + `close()` to open table files without actually retaining\n references to the table file descriptors. If you are upgrading LevelDB, you must\n sanity check the changes to make sure that this assumption remains valid.\n@@ -841,14 +838,14 @@ details.\n \n It is possible for LevelDB changes to inadvertently change consensus\n compatibility between nodes. This happened in Bitcoin 0.8 (when LevelDB was\n-first introduced). When upgrading LevelDB you should review the upstream changes\n+first introduced). When upgrading LevelDB, you should review the upstream changes\n to check for issues affecting consensus compatibility.\n \n For example, if LevelDB had a bug that accidentally prevented a key from being\n returned in an edge case, and that bug was fixed upstream, the bug \"fix\" would\n-be an incompatible consensus change. In this situation the correct behavior\n+be an incompatible consensus change. In this situation, the correct behavior\n would be to revert the upstream fix before applying the updates to Bitcoin's\n-copy of LevelDB. In general you should be wary of any upstream changes affecting\n+copy of LevelDB. In general, you should be wary of any upstream changes affecting\n what data is returned from LevelDB queries.\n \n Scripted diffs\n@@ -867,7 +864,7 @@ To create a scripted-diff:\n     - `-BEGIN VERIFY SCRIPT-`\n     - `-END VERIFY SCRIPT-`\n \n-The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`. The tool's default behavior when supplied\n+The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`. The tool's default behavior, when supplied\n with a commit is to verify all scripted-diffs from the beginning of time up to said commit. Internally, the tool passes\n the first supplied argument to `git rev-list --reverse` to determine which commits to verify script-diffs for, ignoring\n commits that don't conform to the commit message format described above.\n@@ -900,23 +897,23 @@ RPC interface guidelines\n \n A few guidelines for introducing and reviewing new RPC interfaces:\n \n-- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`.\n \n-  - *Rationale*: Consistency with existing interface.\n+  - *Rationale*: Consistency with the existing interface.\n \n - Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n \n-  - *Rationale*: Consistency with existing interface.\n+  - *Rationale*: Consistency with the existing interface.\n \n - Use the JSON parser for parsing, don't manually parse integers or strings from\n   arguments unless absolutely necessary.\n \n   - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n-    which is error prone, and it is easy to get things such as escaping wrong.\n+    which is error-prone, and it is easy to get things such as escaping wrong.\n     JSON already supports nested data structures, no need to re-invent the wheel.\n \n   - *Exception*: AmountFromValue can parse amounts as string. This was introduced because many JSON\n-    parsers and formatters hard-code handling decimal numbers as floating point\n+    parsers and formatters hard-code handling decimal numbers as floating-point\n     values, resulting in potential loss of precision. This is unacceptable for\n     monetary values. **Always** use `AmountFromValue` and `ValueFromAmount` when\n     inputting or outputting monetary values. The only exceptions to this are\n@@ -925,7 +922,7 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n - Missing arguments and 'null' should be treated the same: as default values. If there is no\n   default value, both cases should fail in the same way. The easiest way to follow this\n-  guideline is detect unspecified arguments with `params[x].isNull()` instead of\n+  guideline is to detect unspecified arguments with `params[x].isNull()` instead of\n   `params.size() <= x`. The former returns true if the argument is either null or missing,\n   while the latter returns true if is missing, and false if it is null.\n \n@@ -959,15 +956,15 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n     from there.\n \n - A RPC method must either be a wallet method or a non-wallet method. Do not\n-  introduce new methods that differ in behavior based on presence of a wallet.\n+  introduce new methods that differ in behavior based on the presence of a wallet.\n \n   - *Rationale*: as well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n \n - Try to make the RPC response a JSON object.\n \n-  - *Rationale*: If a RPC response is not a JSON object then it is harder to avoid API breakage if\n+  - *Rationale*: If a RPC response is not a JSON object, then it is harder to avoid API breakage if\n     new data in the response is needed.\n \n - Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with"
      }
    ]
  }
]