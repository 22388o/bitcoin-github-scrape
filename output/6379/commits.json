[
  {
    "sha": "9cc91523dbec6441e327e1e4c83ba751a4680bec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2M5MTUyM2RiZWM2NDQxZTMyN2UxZTRjODNiYTc1MWE0NjgwYmVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-06T08:49:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-10T13:43:26Z"
      },
      "message": "rpc: Accept scientific notation for monetary amounts in JSON\n\nAdd a function `ParseFixedPoint` that parses numbers according\nto the JSON number specification and returns a 64-bit integer.\n\nThen this in `AmountFromValue`, rather than `ParseMoney`.\n\nAlso add lots of tests (thanks to @jonasschnelli for some of them).\n\nFixes issue #6297.",
      "tree": {
        "sha": "f7ad53eeb2e34d7773e067acf2a268076b1078ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7ad53eeb2e34d7773e067acf2a268076b1078ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cc91523dbec6441e327e1e4c83ba751a4680bec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cc91523dbec6441e327e1e4c83ba751a4680bec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cc91523dbec6441e327e1e4c83ba751a4680bec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cc91523dbec6441e327e1e4c83ba751a4680bec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0a10c1959176eb40c0ec47a56de00820c59066d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0a10c1959176eb40c0ec47a56de00820c59066d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0a10c1959176eb40c0ec47a56de00820c59066d"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 215,
      "deletions": 1
    },
    "files": [
      {
        "sha": "aeb51fed562d617edbff6f34425cd86d9514b370",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9cc91523dbec6441e327e1e4c83ba751a4680bec",
        "patch": "@@ -124,7 +124,7 @@ CAmount AmountFromValue(const UniValue& value)\n     if (!value.isReal() && !value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n-    if (!ParseMoney(value.getValStr(), amount))\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     if (!MoneyRange(amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");"
      },
      {
        "sha": "25599beafca49e9dcc31b8e5a8c2ea9427430bdb",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9cc91523dbec6441e327e1e4c83ba751a4680bec",
        "patch": "@@ -142,6 +142,24 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1.00000000\")), 100000000LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.9999999\")), 2099999999999990LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.99999999\")), 2099999999999999LL);\n+\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1e-8\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.1e-7\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.01e-6\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.0000000000000000000000000000000000000000000000000000000000000000000000000001e+68\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"10000000000000000000000000000000000000000000000000000000000000000e-64\")), COIN);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000e64\")), COIN);\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e-9\")), UniValue); //should fail\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"0.000000019\")), UniValue); //should fail\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000001000000\")), 1LL); //should pass, cut trailing 0\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"19e-9\")), UniValue); //should fail\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.19e-6\")), 19); //should pass, leading 0 is present\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"92233720368.54775808\")), UniValue); //overflow error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e+11\")), UniValue); //overflow error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e11\")), UniValue); //overflow error signless\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"93e+9\")), UniValue); //overflow error\n }\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)\n@@ -151,6 +169,9 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n     // Valid, with leading or trailing whitespace\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\" 1.0\").get_real(), 1.0);\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\"1.0 \").get_real(), 1.0);\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ParseNonRFCJSONValue(\".19e-6\")), std::runtime_error); //should fail, missing leading 0, therefore invalid JSON\n+    BOOST_CHECK_EQUAL(AmountFromValue(ParseNonRFCJSONValue(\"0.00000000000000000000000000000000000001e+30 \")), 1);\n     // Invalid, initial garbage\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"[1.0\"), std::runtime_error);\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"a1.0\"), std::runtime_error);"
      },
      {
        "sha": "e956cc5b90dfd3e289f4ee0edbf7a9b15b1c942d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=9cc91523dbec6441e327e1e4c83ba751a4680bec",
        "patch": "@@ -418,4 +418,70 @@ BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n }\n+\n+BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n+{\n+    int64_t amount = 0;\n+    BOOST_CHECK(ParseFixedPoint(\"0\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 0LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.0\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 0LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-0.1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -10000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 110000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.10000000000000000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 110000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1e1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1100000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1e-1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 11000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-1000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -100000000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.0000000100000000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-0.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1000000000.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000000000001LL);\n+    BOOST_CHECK(ParseFixedPoint(\"9999999999.99999999\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 999999999999999999LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-9999999999.99999999\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -999999999999999999LL);\n+\n+    BOOST_CHECK(!ParseFixedPoint(\"\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"a-1000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-a1000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-1000a\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-01000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"00.1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\".1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"--0.1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"0.000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-0.000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"0.00000001000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000009\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000009\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-99999999999.99999999\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"99999909999.09999999\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775807\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775808\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775808\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775809\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.1e\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.1e-\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "7208ca9474974aa71cde6d296de059ad28b5524f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=9cc91523dbec6441e327e1e4c83ba751a4680bec",
        "patch": "@@ -538,3 +538,123 @@ int atoi(const std::string& str)\n {\n     return atoi(str.c_str());\n }\n+\n+/** Upper bound for mantissa.\n+ * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer.\n+ * Larger integers cannot consist of arbitrary combinations of 0-9:\n+ *\n+ *   999999999999999999  1^18-1\n+ *  9223372036854775807  (1<<63)-1  (max int64_t)\n+ *  9999999999999999999  1^19-1     (would overflow)\n+ */\n+static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;\n+\n+/** Helper function for ParseFixedPoint */\n+static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n+{\n+    if(ch == '0')\n+        ++mantissa_tzeros;\n+    else {\n+        for (int i=0; i<=mantissa_tzeros; ++i) {\n+            if (mantissa > (UPPER_BOUND / 10LL))\n+                return false; /* overflow */\n+            mantissa *= 10;\n+        }\n+        mantissa += ch - '0';\n+        mantissa_tzeros = 0;\n+    }\n+    return true;\n+}\n+\n+bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n+{\n+    int64_t mantissa = 0;\n+    int64_t exponent = 0;\n+    int mantissa_tzeros = 0;\n+    bool mantissa_sign = false;\n+    bool exponent_sign = false;\n+    int ptr = 0;\n+    int end = val.size();\n+    int point_ofs = 0;\n+\n+    if (ptr < end && val[ptr] == '-') {\n+        mantissa_sign = true;\n+        ++ptr;\n+    }\n+    if (ptr < end)\n+    {\n+        if (val[ptr] == '0') {\n+            /* pass single 0 */\n+            ++ptr;\n+        } else if (val[ptr] >= '1' && val[ptr] <= '9') {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n+                    return false; /* overflow */\n+                ++ptr;\n+            }\n+        } else return false; /* missing expected digit */\n+    } else return false; /* empty string or loose '-' */\n+    if (ptr < end && val[ptr] == '.')\n+    {\n+        ++ptr;\n+        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9')\n+        {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n+                    return false; /* overflow */\n+                ++ptr;\n+                ++point_ofs;\n+            }\n+        } else return false; /* missing expected digit */\n+    }\n+    if (ptr < end && (val[ptr] == 'e' || val[ptr] == 'E'))\n+    {\n+        ++ptr;\n+        if (ptr < end && val[ptr] == '+')\n+            ++ptr;\n+        else if (ptr < end && val[ptr] == '-') {\n+            exponent_sign = true;\n+            ++ptr;\n+        }\n+        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (exponent > (UPPER_BOUND / 10LL))\n+                    return false; /* overflow */\n+                exponent = exponent * 10 + val[ptr] - '0';\n+                ++ptr;\n+            }\n+        } else return false; /* missing expected digit */\n+    }\n+    if (ptr != end)\n+        return false; /* trailing garbage */\n+\n+    /* finalize exponent */\n+    if (exponent_sign)\n+        exponent = -exponent;\n+    exponent = exponent - point_ofs + mantissa_tzeros;\n+\n+    /* finalize mantissa */\n+    if (mantissa_sign)\n+        mantissa = -mantissa;\n+\n+    /* convert to one 64-bit fixed-point value */\n+    exponent += decimals;\n+    if (exponent < 0)\n+        return false; /* cannot represent values smaller than 10^-decimals */\n+    if (exponent >= 18)\n+        return false; /* cannot represent values larger than or equal to 10^(18-decimals) */\n+\n+    for (int i=0; i < exponent; ++i) {\n+        if (mantissa > (UPPER_BOUND / 10LL) || mantissa < -(UPPER_BOUND / 10LL))\n+            return false; /* overflow */\n+        mantissa *= 10;\n+    }\n+    if (mantissa > UPPER_BOUND || mantissa < -UPPER_BOUND)\n+        return false; /* overflow */\n+\n+    if (amount_out)\n+        *amount_out = mantissa;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "dcd56751f2eb7bbef14dd0576fb1916202a55ccc",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc91523dbec6441e327e1e4c83ba751a4680bec/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=9cc91523dbec6441e327e1e4c83ba751a4680bec",
        "patch": "@@ -109,4 +109,11 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n+/** Parse number as fixed point according to JSON number syntax.\n+ * See http://json.org/number.gif\n+ * @returns true on success, false on error.\n+ * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n+ */\n+bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      }
    ]
  }
]