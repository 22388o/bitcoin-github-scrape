[
  {
    "sha": "53c3c1ea9e20f881c843a9219e48cec202e962f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2MzYzFlYTllMjBmODgxYzg0M2E5MjE5ZTQ4Y2VjMjAyZTk2MmY4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T02:43:51Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-21T17:45:40Z"
      },
      "message": "wallet/rpc/getbalances: add entry for 'mine.used' balance in results",
      "tree": {
        "sha": "9e3a4e250d10ec1a1ebdfd696a77dd66c689ad3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e3a4e250d10ec1a1ebdfd696a77dd66c689ad3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53c3c1ea9e20f881c843a9219e48cec202e962f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0NF8QACgkQV692LbM1\nMyISUxAAhNGbtx4BOMJElT8K288UPum3nH6Fxm5FVW5M/2J44WnwDSkkuAwlOyZt\n0jVrnxT66Rpye8DLkJUZO0VFFNoo4L0ajrKZPkvEw2U2bJVKwWpor2YmyzAdYvfl\nXHiHCoUiBOXG4GFC8iuQOT8NXQW6b1FM5ffF2+Q5wHIN35IjkcKYmCJb+mCyNaMk\nby5BK97DhHTsa+x8eVTOBFUphtbJIEY7MDfqVEkm1swj/o3FnTNOtSrNAUcL6QfL\n3+idLk6gXLlNINmXfq/UBNBQ3Iiey/Jr2FQ6G93LshyWGJ+ZkeZiNacqvzwj0JEj\nTpOilV97soXZ50jGUBnwrp4KJHIwKVQrFbLnEmdvbr8EHEXoStiic+w40N2pnP3e\n382dLxLI7Z+uumXwCmESyDyaLDe81W8eQofh4G5our8i8ltowz5ostORto1PXOcF\nSIbt/5Hm5HozZdy8ymAIl1ChXgeulhbPeP/3azUjwKOAqoi3fr4ZRJgVPQ22EJXM\nmFwMBRV2bzvEEMrL+g7pBJcb768vL18Yg6vgpmnTn8o7SNLjcSBE8r+mxTs+FHfd\nB0Lyok0HktTY6L+T1v+xzGzS+pn4Zk9CdijZa5n/Lhd0q0+L65eYmYXazaPOXSCc\ndw/GsushwHbBRU7TmaZLix+OJxffdU/JkjvxC/RhMyGlmC9p3D4=\n=3+lU\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e3a4e250d10ec1a1ebdfd696a77dd66c689ad3a\nparent 44d81723236114f9370f386f3b3310477a6dde43\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560912231 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1561139140 +0900\n\nwallet/rpc/getbalances: add entry for 'mine.used' balance in results\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c3c1ea9e20f881c843a9219e48cec202e962f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53c3c1ea9e20f881c843a9219e48cec202e962f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c3c1ea9e20f881c843a9219e48cec202e962f8/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44d81723236114f9370f386f3b3310477a6dde43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44d81723236114f9370f386f3b3310477a6dde43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44d81723236114f9370f386f3b3310477a6dde43"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2ad62d37c0b760e9955913770419b8b0dd29babd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53c3c1ea9e20f881c843a9219e48cec202e962f8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53c3c1ea9e20f881c843a9219e48cec202e962f8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=53c3c1ea9e20f881c843a9219e48cec202e962f8",
        "patch": "@@ -2409,6 +2409,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n             \"      \\\"trusted\\\": xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n             \"      \\\"untrusted_pending\\\": xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n             \"      \\\"immature\\\": xxx                (numeric) balance from immature coinbase outputs\\n\"\n+            \"      \\\"used\\\": xxx                    (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\\n\"\n             \"    },\\n\"\n             \"    \\\"watchonly\\\": {                   (object) watchonly balances (not present if wallet does not watch anything)\\n\"\n             \"      \\\"trusted\\\": xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n@@ -2441,6 +2442,12 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         balances_mine.pushKV(\"trusted\", ValueFromAmount(bal.m_mine_trusted));\n         balances_mine.pushKV(\"untrusted_pending\", ValueFromAmount(bal.m_mine_untrusted_pending));\n         balances_mine.pushKV(\"immature\", ValueFromAmount(bal.m_mine_immature));\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            // If the AVOID_REUSE flag is set, bal has been set to just the un-reused address balance. Get\n+            // the total balance, and then subtract bal to get the reused address balance.\n+            const auto full_bal = wallet.GetBalance(0, false);\n+            balances_mine.pushKV(\"used\", ValueFromAmount(full_bal.m_mine_trusted + full_bal.m_mine_untrusted_pending - bal.m_mine_trusted - bal.m_mine_untrusted_pending));\n+        }\n         balances.pushKV(\"mine\", balances_mine);\n     }\n     if (wallet.HaveWatchOnly()) {"
      },
      {
        "sha": "58ad835d39c1e69d0cabe6374a6c01a8cb3edf05",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53c3c1ea9e20f881c843a9219e48cec202e962f8/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53c3c1ea9e20f881c843a9219e48cec202e962f8/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=53c3c1ea9e20f881c843a9219e48cec202e962f8",
        "patch": "@@ -63,6 +63,12 @@ def assert_unspent(node, total_count=None, total_sum=None, reused_supported=None\n     if reused_sum is not None:\n         assert_approx(stats[\"reused\"][\"sum\"], reused_sum, 0.001)\n \n+def assert_balances(node, mine):\n+    '''Make assertions about a node's getbalances output'''\n+    got = node.getbalances()[\"mine\"]\n+    for k,v in mine.items():\n+        assert_approx(got[k], v, 0.001)\n+\n class AvoidReuseTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n@@ -140,25 +146,35 @@ def test_fund_send_fund_senddirty(self):\n \n         # listunspent should show 1 single, unused 10 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n+        # getbalances should show no used, 10 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 10})\n+        # node 0 should not show a used entry, as it does not enable avoid_reuse\n+        assert(\"used\" not in self.nodes[0].getbalances()[\"mine\"])\n \n         self.nodes[1].sendtoaddress(retaddr, 5)\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # listunspent should show 1 single, unused 5 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n+        # getbalances should show no used, 5 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 5})\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n         assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n+        # getbalances should show 10 used, 5 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 5})\n \n         self.nodes[1].sendtoaddress(address=retaddr, amount=10, avoid_reuse=False)\n \n         # listunspent should show 1 total outputs (5 btc), unused\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_count=0)\n+        # getbalances should show no used, 5 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 5})\n \n         # node 1 should now have about 5 btc left (for both cases)\n         assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n@@ -183,20 +199,26 @@ def test_fund_send_fund_send(self):\n \n         # listunspent should show 1 single, unused 10 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n+        # getbalances should show no used, 10 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 10})\n \n         self.nodes[1].sendtoaddress(retaddr, 5)\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # listunspent should show 1 single, unused 5 btc output\n         assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n+        # getbalances should show no used, 5 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 5})\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n         assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n+        # getbalances should show 10 used, 5 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 5})\n \n         # node 1 should now have a balance of 5 (no dirty) or 15 (including dirty)\n         assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n@@ -208,6 +230,8 @@ def test_fund_send_fund_send(self):\n \n         # listunspent should show 2 total outputs (1, 10 btc), one unused (1), one reused (10)\n         assert_unspent(self.nodes[1], total_count=2, total_sum=11, reused_count=1, reused_sum=10)\n+        # getbalances should show 10 used, 1 btc trusted\n+        assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 1})\n \n         # node 1 should now have about 1 btc left (no dirty) and 11 (including dirty)\n         assert_approx(self.nodes[1].getbalance(), 1, 0.001)"
      }
    ]
  },
  {
    "sha": "3d2ff379131a01e4e9f9648b150e806104a23795",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDJmZjM3OTEzMWEwMWU0ZTlmOTY0OGIxNTBlODA2MTA0YTIzNzk1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T02:55:41Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-21T17:45:40Z"
      },
      "message": "wallet/rpc: use static help text\n\nAlways show the same help topic regardless of wallet flags, and explain that something is not always available, rather than runtime-modifying the help output.",
      "tree": {
        "sha": "a1d901f8afb365ef80ac7fbd9a5450908d1bd9ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1d901f8afb365ef80ac7fbd9a5450908d1bd9ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d2ff379131a01e4e9f9648b150e806104a23795",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0NF8QACgkQV692LbM1\nMyLcGA/+N+FGdUPjcOdtrz8ouk6Da/fmU7ky01T87+QL0iviksKxxO7m6oCUEqI5\n71GT4El8Hhn1dWZ7o/KecJt8dzeGRYZ8LNfkEjWO66M/VP9yNvKNEmEF84pZBPcl\nvraTSo3mcAQidkaqiK4wNadsY+59t60IGn5C5BXyO282G99kq6gxCnJerRlDEvz1\n63Om2srAlgCAaxwVPVYHnM8Vv+2HH4tEtAG4h3kud9ofOBT2NOp8sc9K3USxBR3K\nbvwF1NQs9gIgmsU/2jb2U/YxpcO6e9rrhg+7h+GTJiUa0izEPzP9SiZ11qe1L0sc\nCXJU9fb8iDXfz66wst1MHnjf+8Dkyr6JbgtXDoy6Q1qo9Sq5Jn569BCcuBIKyAjI\n+n76VqaEcWYi/Ohj4hpLUviLCDWomkWedxT7286GGMcEE2hgHPIPaXNMgYgCix3M\nrTecHx8RvmpcrAs9pba3iKA9HYcwybcY6n4ziMPsyv36Y0d6rOxj5+xO3dpmfSkz\nTS3HO3FdtRwZaLDVKixYkKW18ime9RaQRffJIMWV5EuaMMdm/TSMyDXBrfE/w5+S\npA1/cFw7/hRW4J/oVkmscJthvzlmNUiYPH/4/xjwtrACRWcYTfDxUpNZwvPoFMpT\ntLMhsTgyYDKSCmat+nJe6/WdjEZdrLBiE2AvsOVr+Uojvmr0to4=\n=QdeE\n-----END PGP SIGNATURE-----",
        "payload": "tree a1d901f8afb365ef80ac7fbd9a5450908d1bd9ac\nparent 53c3c1ea9e20f881c843a9219e48cec202e962f8\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560912941 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1561139140 +0900\n\nwallet/rpc: use static help text\n\nAlways show the same help topic regardless of wallet flags, and explain that something is not always available, rather than runtime-modifying the help output.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d2ff379131a01e4e9f9648b150e806104a23795",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d2ff379131a01e4e9f9648b150e806104a23795",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d2ff379131a01e4e9f9648b150e806104a23795/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53c3c1ea9e20f881c843a9219e48cec202e962f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c3c1ea9e20f881c843a9219e48cec202e962f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53c3c1ea9e20f881c843a9219e48cec202e962f8"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "befa3cbaa9bd40914ceced7fc2be0aabdde9ae74",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d2ff379131a01e4e9f9648b150e806104a23795/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d2ff379131a01e4e9f9648b150e806104a23795/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3d2ff379131a01e4e9f9648b150e806104a23795",
        "patch": "@@ -383,7 +383,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n-                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE) ? \"true\" : \"unavailable\", \"Avoid spending from dirty addresses; addresses are considered\\n\"\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n             \"                             dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n@@ -743,7 +743,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                     {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n-                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE) ? \"true\" : \"unavailable\", \"Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n@@ -2892,11 +2892,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    bool avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n-\n-    if (request.fHelp || request.params.size() > 5)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"listunspent\",\n+    const RPCHelpMan help{\n+                \"listunspent\",\n                 \"\\nReturns array of unspent transaction outputs\\n\"\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n                 \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n@@ -2933,9 +2930,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n-            + (avoid_reuse ?\n-            \"    \\\"reused\\\" : xxx,           (bool) Whether this output is reused/dirty (sent to an address that was previously spent from)\\n\" :\n-            \"\") +\n+            \"    \\\"reused\\\" : xxx,           (bool) (only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\\n\"\n             \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n             \"    \\\"safe\\\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n             \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n@@ -2951,7 +2946,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n                 },\n-            }.ToString());\n+            };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     int nMinDepth = 1;\n     if (!request.params[0].isNull()) {\n@@ -3024,6 +3023,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n \n     LOCK(pwallet->cs_wallet);\n \n+    const bool avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n+\n     for (const COutput& out : vecOutputs) {\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;"
      }
    ]
  },
  {
    "sha": "71d0344cf25d3aaf60112c5248198c444bc98105",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWQwMzQ0Y2YyNWQzYWFmNjAxMTJjNTI0ODE5OGM0NDRiYzk4MTA1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T16:06:06Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-21T17:45:40Z"
      },
      "message": "docs: release note wording",
      "tree": {
        "sha": "f8b49dd5bc30d2a0cf01d13b0198b2d9286a96bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8b49dd5bc30d2a0cf01d13b0198b2d9286a96bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71d0344cf25d3aaf60112c5248198c444bc98105",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0NF8QACgkQV692LbM1\nMyJPYw//VoCdgqEZafzkeH8IitnqVqn7E+xWnJEXFYMFre6xhWtv6D8WKT8ws1EV\nuhAORkUoxAcD+K/Ey23UlxuSrW8h3/6GvKNh/SZDLy+yIDYH0lp3qfdamzY4Yk8B\nihO05vupbr3WTTbdnestLzq1k+j01K4OSVQ5y0eK8ViZ3gmveLjRZzC1J6C1KdM9\nW9apPPWLvPOhMjhlpqB0z6Rtnxchwy2YNPl83RCelKxdyP6+cUfheloJxX6lRSHL\ntkJEHB2ineNpumB2qeSVyZscDAZkSB1n/kQ6rMeNOiWpkghOxvk49othZq5dI/z8\njaCpEeNS/UU49PD9JKdqhn0VUNQrCSReOq9wNtuSGWeitf9jJk/G64REJB5Ulcls\nlql1UcWarSMI2Roa2dqN5Ontise24dy24t88hISa2me1PbOcRlxjsliEo99sC7Ia\nzZL4Pvxy068pMQQcILhRFH4EjXPSYjulhQzyNquwq34a/u4sfuiPD1x4nIW5lMSg\nA/1AU1Yj4C2kAQ3AyGDpX3zO6Ldw/z5wv8+U6O+5fZzEit99rvpUw0ASnxiGu5sn\n4R7+rJYDlG5jJqQTvblvFXMCBykEeTysubx6as9Al0ishKcBEpbEn2gbvzKpATs3\nSlU5s+ScZeWLYKiJb8A2l8LGLsdbsoWuXA5eog7XHCO8Qo2qVUI=\n=eJs9\n-----END PGP SIGNATURE-----",
        "payload": "tree f8b49dd5bc30d2a0cf01d13b0198b2d9286a96bc\nparent 3d2ff379131a01e4e9f9648b150e806104a23795\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560960366 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1561139140 +0900\n\ndocs: release note wording\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d0344cf25d3aaf60112c5248198c444bc98105",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71d0344cf25d3aaf60112c5248198c444bc98105",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d0344cf25d3aaf60112c5248198c444bc98105/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d2ff379131a01e4e9f9648b150e806104a23795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d2ff379131a01e4e9f9648b150e806104a23795",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d2ff379131a01e4e9f9648b150e806104a23795"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a500aceb0f081715daab62021c0f145b838aefcf",
        "filename": "doc/release-notes-13756.md",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71d0344cf25d3aaf60112c5248198c444bc98105/doc/release-notes-13756.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71d0344cf25d3aaf60112c5248198c444bc98105/doc/release-notes-13756.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-13756.md?ref=71d0344cf25d3aaf60112c5248198c444bc98105",
        "patch": "@@ -7,8 +7,8 @@ A new wallet flag `avoid_reuse` has been added (default off). When enabled,\n a wallet will distinguish between used and unused addresses, and default to not\n use the former in coin selection.\n \n-(Note: rescanning the blockchain is required, to correctly mark previously\n-used destinations.)\n+Rescanning the blockchain is required, to correctly mark previously\n+used destinations.\n \n Together with \"avoid partial spends\" (present as of Bitcoin v0.17), this\n addresses a serious privacy issue where a malicious user can track spends by\n@@ -30,10 +30,12 @@ These include:\n \n - createwallet\n - getbalance\n+- getbalances\n - sendtoaddress\n \n-In addition, `sendtoaddress` has been changed to enable `-avoidpartialspends` when\n-`avoid_reuse` is enabled.\n+In addition, `sendtoaddress` has been changed to avoid partial spends when `avoid_reuse`\n+is enabled (if not already enabled via the  `-avoidpartialspends` command line flag),\n+as it would otherwise risk using up the \"wrong\" UTXO for an address reuse case.\n \n The listunspent RPC has also been updated to now include a \"reused\" bool, for nodes\n with \"avoid_reuse\" enabled."
      }
    ]
  }
]