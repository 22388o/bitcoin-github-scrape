[
  {
    "sha": "88dd3598d22197a22565e524cecdc08107cf76ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGRkMzU5OGQyMjE5N2EyMjU2NWU1MjRjZWNkYzA4MTA3Y2Y3NmFj",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-01T21:26:57Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-01T21:37:10Z"
      },
      "message": "Check signatures before respend relay\n\nCheck that all inputs are completely valid before actually\nrelaying a double-spend.",
      "tree": {
        "sha": "5b8dc57a708368ed127b08235e33986aea535294",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b8dc57a708368ed127b08235e33986aea535294"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88dd3598d22197a22565e524cecdc08107cf76ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88dd3598d22197a22565e524cecdc08107cf76ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88dd3598d22197a22565e524cecdc08107cf76ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88dd3598d22197a22565e524cecdc08107cf76ac/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f04f1234078288d4806aaab0952d60f137337e81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f04f1234078288d4806aaab0952d60f137337e81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f04f1234078288d4806aaab0952d60f137337e81"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 22,
      "deletions": 15
    },
    "files": [
      {
        "sha": "1294e5b2ed8bfa3c75acc811b4ad1528604dea59",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 15,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88dd3598d22197a22565e524cecdc08107cf76ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88dd3598d22197a22565e524cecdc08107cf76ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=88dd3598d22197a22565e524cecdc08107cf76ac",
        "patch": "@@ -127,7 +127,7 @@ namespace {\n \n // Forward reference functions defined here:\n static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n-static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n+static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -156,7 +156,7 @@ struct CMainSignals {\n     // transaction was first seen in a block.\n     // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n     // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n-    boost::signals2::signal<void (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n+    boost::signals2::signal<bool (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n \n } // anon namespace\n@@ -166,7 +166,7 @@ void RegisterInternalSignals() {\n     seed_insecure_rand();\n     doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n \n-    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayDoubleSpend, _1, _2, _3, doubleSpendFilter));\n+    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayableRespend, _1, _2, _3, doubleSpendFilter));\n }\n \n \n@@ -936,6 +936,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n+    bool relayableRespend = false;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -944,8 +945,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n         if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n         {\n-            g_signals.DetectedDoubleSpend(outpoint, tx, false);\n-            return false;\n+            relayableRespend = g_signals.DetectedDoubleSpend(outpoint, tx, false);\n+            if (!relayableRespend)\n+                return false;\n         }\n     }\n     }\n@@ -1038,16 +1040,24 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         {\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n-        // Store transaction in memory\n-        pool.addUnchecked(hash, entry);\n+\n+        if (relayableRespend)\n+        {\n+            RelayTransaction(tx);\n+        }\n+        else\n+        {\n+            // Store transaction in memory\n+            pool.addUnchecked(hash, entry);\n+        }\n     }\n \n     g_signals.SyncTransaction(tx, NULL);\n \n-    return true;\n+    return !relayableRespend;\n }\n \n-static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n {\n     // Relaying double-spend attempts to our peers lets them detect when\n     // somebody might be trying to cheat them. However, blindly relaying\n@@ -1060,7 +1070,7 @@ static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doub\n     // from us they are very likely to hear about it from another peer, since\n     // each peer uses a different, randomized bloom filter.\n \n-    if (fInBlock || filter.contains(outPoint)) return;\n+    if (fInBlock || filter.contains(outPoint)) return false;\n \n     // Apply an independent rate limit to double-spend relays\n     static double dRespendCount;\n@@ -1071,7 +1081,7 @@ static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doub\n     if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n     {\n         LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n-        return;\n+        return false;\n     }\n \n     LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n@@ -1083,10 +1093,7 @@ static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doub\n \n     filter.insert(outPoint);\n \n-    RelayTransaction(doubleSpend);\n-\n-    // Share conflict with wallet\n-    g_signals.SyncTransaction(doubleSpend, NULL);\n+    return true;\n }\n \n "
      }
    ]
  },
  {
    "sha": "0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGE2YjNmZDE4N2RhM2FhODEwYWFhNTg0ZDhiZDE5N2FkNGZhMmI5",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-02T16:27:29Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-02T16:27:29Z"
      },
      "message": "Remove signal DoubleSpendDetected, use function\n\nAlso removes the need for forward reference to RelayableRespend.",
      "tree": {
        "sha": "bc93c00b02d971749302b0edc2d52ac82e66d623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc93c00b02d971749302b0edc2d52ac82e66d623"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88dd3598d22197a22565e524cecdc08107cf76ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88dd3598d22197a22565e524cecdc08107cf76ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88dd3598d22197a22565e524cecdc08107cf76ac"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 50,
      "deletions": 59
    },
    "files": [
      {
        "sha": "6c0898c036d4ea6f5699c64a8949c75ac851c624",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
        "patch": "@@ -1176,7 +1176,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n-    RegisterInternalSignals();\n+    InitRespendFilter();\n     StartNode(threadGroup);\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "7baf33c39f9ba6b090874dfce7d6290436d28318",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 56,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
        "patch": "@@ -125,9 +125,14 @@ namespace {\n \n } // anon namespace\n \n-// Forward reference functions defined here:\n+// Bloom filter to limit respend relays to one\n static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n-static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n+static CBloomFilter doubleSpendFilter;\n+void InitRespendFilter() {\n+    seed_insecure_rand();\n+    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n+}\n+\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -151,24 +156,10 @@ struct CMainSignals {\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     // Tells listeners to broadcast their data.\n     boost::signals2::signal<void ()> Broadcast;\n-    // Notifies listeners of detection of a double-spent transaction. Arguments are outpoint that is\n-    // double-spent, first transaction seen, double-spend transaction, and whether the second double-spend\n-    // transaction was first seen in a block.\n-    // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n-    // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n-    boost::signals2::signal<bool (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n \n } // anon namespace\n \n-void RegisterInternalSignals() {\n-    static CBloomFilter doubleSpendFilter;\n-    seed_insecure_rand();\n-    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n-\n-    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayableRespend, _1, _2, _3, doubleSpendFilter));\n-}\n-\n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n@@ -908,6 +899,45 @@ bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsig\n     return false;\n }\n \n+static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+{\n+    // Relaying double-spend attempts to our peers lets them detect when\n+    // somebody might be trying to cheat them. However, blindly relaying\n+    // every double-spend across the entire network gives attackers\n+    // a denial-of-service attack: just generate a stream of double-spends\n+    // re-spending the same (limited) set of outpoints owned by the attacker.\n+    // So, we use a bloom filter and only relay (at most) the first double\n+    // spend for each outpoint. False-positives (\"we have already relayed\")\n+    // are OK, because if the peer doesn't hear about the double-spend\n+    // from us they are very likely to hear about it from another peer, since\n+    // each peer uses a different, randomized bloom filter.\n+\n+    if (fInBlock || filter.contains(outPoint)) return false;\n+\n+    // Apply an independent rate limit to double-spend relays\n+    static double dRespendCount;\n+    static int64_t nLastRespendTime;\n+    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n+    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n+    {\n+        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n+        return false;\n+    }\n+\n+    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n+\n+    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n+    // insertions\n+    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n+        filter.clear();\n+\n+    filter.insert(outPoint);\n+\n+    return true;\n+}\n+\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectInsaneFee)\n {\n@@ -945,7 +975,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n         if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n         {\n-            relayableRespend = g_signals.DetectedDoubleSpend(outpoint, tx, false);\n+            relayableRespend = RelayableRespend(outpoint, tx, false, doubleSpendFilter);\n             if (!relayableRespend)\n                 return false;\n         }\n@@ -1057,45 +1087,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return !relayableRespend;\n }\n \n-static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n-{\n-    // Relaying double-spend attempts to our peers lets them detect when\n-    // somebody might be trying to cheat them. However, blindly relaying\n-    // every double-spend across the entire network gives attackers\n-    // a denial-of-service attack: just generate a stream of double-spends\n-    // re-spending the same (limited) set of outpoints owned by the attacker.\n-    // So, we use a bloom filter and only relay (at most) the first double\n-    // spend for each outpoint. False-positives (\"we have already relayed\")\n-    // are OK, because if the peer doesn't hear about the double-spend\n-    // from us they are very likely to hear about it from another peer, since\n-    // each peer uses a different, randomized bloom filter.\n-\n-    if (fInBlock || filter.contains(outPoint)) return false;\n-\n-    // Apply an independent rate limit to double-spend relays\n-    static double dRespendCount;\n-    static int64_t nLastRespendTime;\n-    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n-    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n-    {\n-        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n-        return false;\n-    }\n-\n-    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n-\n-    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n-    // insertions\n-    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n-        filter.clear();\n-\n-    filter.insert(outPoint);\n-\n-    return true;\n-}\n-\n \n int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n {"
      },
      {
        "sha": "26450bb7212c5fd7705eb66f63d1c926dd1e3d2a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9",
        "patch": "@@ -108,8 +108,8 @@ struct CNodeStateStats;\n \n struct CBlockTemplate;\n \n-/** Set up internal signal handlers **/\n-void RegisterInternalSignals();\n+/** Initialize respend bloom filter **/\n+void InitRespendFilter();\n \n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWalletInterface* pwalletIn);"
      }
    ]
  }
]