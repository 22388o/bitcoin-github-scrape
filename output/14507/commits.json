[
  {
    "sha": "18f4248b49ffee828fda098770092667a485980b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGY0MjQ4YjQ5ZmZlZTgyOGZkYTA5ODc3MDA5MjY2N2E0ODU5ODBi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-10-18T04:02:21Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-10-18T04:32:16Z"
      },
      "message": "net: avoid asking pruning peers for blocks that would result in a remote disconnection of self\n\nDue to the NODE_NETWORK_LIMITED_MIN_BLOCKS setting, if a node ends up connecting to peers which are pruning nodes, the node may end up inadvertedly disconnecting itself from the peer by asking for a block beyond the limit. Instead, nodes attempt to avoid asking pruning nodes for blocks if they are beyond or close to the limit.",
      "tree": {
        "sha": "dbd6f6ae572782fe14e965bf326b4606f8cb86b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbd6f6ae572782fe14e965bf326b4606f8cb86b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18f4248b49ffee828fda098770092667a485980b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlvIDNkACgkQV692LbM1\nMyKuShAAl7ckvC03iIOJK9Q0nUBy3oPqWvTwdYeNYEB5kwsYF8jZp9rB301a1THZ\nycCEHqIrNd7Y4S7CLNGxbVgqQFUL3Ppqtl5G8U4zf0Fikx6b6iWnq3GmH4tt08cA\nTQdSMBGUVhd289CFsOoXG4rM/H8/I4hbi+KzAcnCh3dQ2uCGt8wv7u2mg2MFVlsd\ny2C7aSYE0OeLFbKungknKNnJkpNJYEZuXZKTZ/gD+Jw0XX453Ne1CvUL2j23H+zx\nEiomqLRXEmShLGILMW9SCag+Zea5za8iwG4sptwCwvPH2eg5sJ9BiBVLkj/+vf+0\nLcbb3N2D5ACHMnr7v6guKg7hZlaTY4VtFxX+DZRig3csg4Sn5jALVIvkvfARY2RE\nkZTzWBVWK3ATZyog3W8RNIGRITI1kGGEG9PFK+Li9SoLkpOUxQhrKTrgWdDoHoxh\nz4RzaYAHKsC6R3Gtb6qAfiZg4k4L6+F8J/wE2VKcKcrKeq+V4h/yfPn+XNR3BjCT\n43mK80fDVSLF06nxHweSbOYFVgVTNXFlrtQtV2oloJngT6NupdRBZDmn+7I92B9U\nsY0deq+ZtlyZ99K0ygD9TBpZ8ndza+OP9qaoI+VxELScGFE8eXzJgpo0zE95AeRI\nT4X3epAJWHIWSTsJQHNly5TzkAdKPKP9MEXfey62v6G6QP8gfY0=\n=7CBy\n-----END PGP SIGNATURE-----",
        "payload": "tree dbd6f6ae572782fe14e965bf326b4606f8cb86b2\nparent 816fab9ccae568612d5ed90378b4587256925a1e\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1539835341 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1539837136 +0900\n\nnet: avoid asking pruning peers for blocks that would result in a remote disconnection of self\n\nDue to the NODE_NETWORK_LIMITED_MIN_BLOCKS setting, if a node ends up connecting to peers which are pruning nodes, the node may end up inadvertedly disconnecting itself from the peer by asking for a block beyond the limit. Instead, nodes attempt to avoid asking pruning nodes for blocks if they are beyond or close to the limit.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18f4248b49ffee828fda098770092667a485980b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18f4248b49ffee828fda098770092667a485980b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18f4248b49ffee828fda098770092667a485980b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "816fab9ccae568612d5ed90378b4587256925a1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816fab9ccae568612d5ed90378b4587256925a1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816fab9ccae568612d5ed90378b4587256925a1e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f899b3e85d845e687a85f9cbdd612f437cee6e8a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f4248b49ffee828fda098770092667a485980b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f4248b49ffee828fda098770092667a485980b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=18f4248b49ffee828fda098770092667a485980b",
        "patch": "@@ -3694,7 +3694,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n+            uint64_t max_height = std::max<uint64_t>(pto->nStartingHeight, state.pindexBestKnownBlock ? state.pindexBestKnownBlock->nHeight : 0);\n             for (const CBlockIndex *pindex : vToDownload) {\n+                if (pto->m_limited_node && pto->nStartingHeight > 0 && pindex->nHeight + NODE_NETWORK_LIMITED_MIN_BLOCKS <= max_height) {\n+                    // This peer is borderline out of reach due to the limited min blocks threshold; it may end up disconnecting us, so let's stop for now\n+                    break;\n+                }\n                 uint32_t nFetchFlags = GetFetchFlags(pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);"
      }
    ]
  },
  {
    "sha": "fdf6ec0eb144f973685b89b2aab3e257b38cc221",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY2ZWMwZWIxNDRmOTczNjg1Yjg5YjJhYWIzZTI1N2IzOGNjMjIx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-10-18T04:03:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-10-18T06:05:20Z"
      },
      "message": "test: add a test case where a node will trigger a self-disconnection from a pruning node during sync-up",
      "tree": {
        "sha": "c07d5cce53ecae052f5e4bf6b33a9c640174a7ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c07d5cce53ecae052f5e4bf6b33a9c640174a7ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf6ec0eb144f973685b89b2aab3e257b38cc221",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlvIIqAACgkQV692LbM1\nMyKjixAAj0l8gs90jV6oFkVplzGzzEpbven6HoWNyHjrUeSoqZXrgBk6G7FmvdYL\nGzRjpa2++fQJNFcmRubH2kQsdoYk+AB0D8gl8eqBUBCI5aSzIR/WiyifWfVpLN19\n1vE1AFZxSbhJIqd9oBVXNKjDtu/cjhTBynTCVhA7fqLDsbPG1ug+Jz8WkEkxaCLN\nKfx+iYdXxbYB65kYk1wxAqjkeCeXUCxxFJR/p14205txq+wAHDVzB3ywdI6wSU2w\nSZQblrzH3Y6enYY4VDEWDE2zOBXjp2zsd1g4XPMjh5A0u78rIesUm1fgzxFdS2gq\n4Obi6S85IRLzd/8Gspkt5kaOeher57hzGWAYcGsLQ1KlcfgwSPgrBYuCjYJaElKE\n8Ke8pjOGPmPYH5JpMZj0aYkum6Ii0uoFxzU00s3qNoNft1CArKXvFQTZH8sX7s9a\nN5NaB6gEoHf9aXCqJorgDrYbBTO5kRUAAYNPljaHgZZpMHWcao/eOXSloboUTEUG\nB/SXYHav6qilxPrJJAZR5mZxeTKRu0/9mnz9Y+6d+9oxLCHeTpnaJJqHV4iE9z5G\nqMcmV6AX5fUYOqdtWbljcHzqHSDe3dzBQVIqXb9IyVK+E4vQuNp/z0oVoXLtXjP9\npww5WTsCE1jYvUTp6vW4+Dzu3Sh9ALdt1ojiE4p6q1c9buj31mM=\n=4QFh\n-----END PGP SIGNATURE-----",
        "payload": "tree c07d5cce53ecae052f5e4bf6b33a9c640174a7ef\nparent 18f4248b49ffee828fda098770092667a485980b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1539835393 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1539842720 +0900\n\ntest: add a test case where a node will trigger a self-disconnection from a pruning node during sync-up\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf6ec0eb144f973685b89b2aab3e257b38cc221",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf6ec0eb144f973685b89b2aab3e257b38cc221",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf6ec0eb144f973685b89b2aab3e257b38cc221/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18f4248b49ffee828fda098770092667a485980b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18f4248b49ffee828fda098770092667a485980b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18f4248b49ffee828fda098770092667a485980b"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 111,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c761efae9db68cf2c8631b5ffacd10bba55d6fcc",
        "filename": "test/functional/feature_pruning_fast.py",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf6ec0eb144f973685b89b2aab3e257b38cc221/test/functional/feature_pruning_fast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf6ec0eb144f973685b89b2aab3e257b38cc221/test/functional/feature_pruning_fast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning_fast.py?ref=fdf6ec0eb144f973685b89b2aab3e257b38cc221",
        "patch": "@@ -0,0 +1,110 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Quick tests for pruning nodes.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, connect_nodes, sync_blocks, wait_until\n+\n+class FastPruneTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+        # Create node 0 to mine.\n+        # Create nodes 1-2 to test pruning.\n+        self.extra_args = [\n+            [],\n+            [\"-prune=550\"],\n+            [],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[2], 0)\n+        sync_blocks(self.nodes[0:2])\n+\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.start_nodes()\n+\n+    def prepare_chain(self):\n+        connect_nodes(self.nodes[2], 1)\n+        self.nodes[0].generate(200)\n+        connect_nodes(self.nodes[1], 0)\n+        sync_blocks(self.nodes[0:2])\n+        assert_equal(self.nodes[0].getblockcount(), 200)\n+        assert_equal(self.nodes[1].getblockcount(), 200)\n+        assert_equal(self.nodes[2].getblockcount(), 200)\n+        # Shut down last node before making long chain\n+        self.stop_node(2)\n+        self.nodes[0].generate(1000)\n+        sync_blocks(self.nodes[0:1])\n+\n+    def slacking_test(self):\n+        # test that a node that is offline for a while will not be disconnected\n+        # from a pruned node despite being beyond limits\n+        # node connects only to pruned node at first, and ensures it does not\n+        # get itself disconnected despite requiring more than\n+        #       NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 = 288 + 2 = 290\n+        # to sync up. The node should NOT ask the limited peer for blocks that\n+        # would cause a disconnect-slap.\n+        self.log.info(\"- connecting to pruning node should not result in invalid requests\")\n+        self.start_node(2)\n+        n2 = self.nodes[2]\n+        n1 = self.nodes[1]\n+        assert_equal(n2.getblockcount(),  200)\n+        assert_equal(n2.getconnectioncount(), 0)\n+        # connect to pruned node with so many blocks we cannot sync from them\n+        assert(n1.getconnectioncount() > 0)\n+        assert(n1.getblockcount() > n2.getblockcount() + 290)\n+        connect_nodes(n2, 1)\n+        self.nodes[0].generate(100)\n+        # We should NOT receive any blocks, because our tip (#200) is way below\n+        # the limit for pruned nodes (1200 - 290 = 910)\n+        assert_equal(n2.getblockcount(), 200)\n+        # However, we should NOT be disconnected from the pruned peer, since\n+        # we will eventually catch up\n+        assert_equal(n2.getconnectioncount(), 1)\n+\n+        self.log.info(\"- connecting to full node should properly sync, without losing connection to pruned node\")\n+        connect_nodes(n2, 0)\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+        assert_equal(n2.getblockcount(), n1.getblockcount())\n+        # node 2 should be connected to node 0 and node 1\n+        assert_equal(n2.getconnectioncount(), 2)\n+\n+        self.log.info(\"- syncing up with pruned node within limits should work\")\n+        # shut down again\n+        self.stop_node(2)\n+        # make blocks but within limit (288+2)\n+        self.nodes[0].generate(288)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 1688, timeout=30)\n+        sync_blocks(self.nodes[0:1])\n+        assert_equal(self.nodes[0].getblockcount(), 1688)\n+        assert_equal(self.nodes[1].getblockcount(), 1688)\n+        # get back up and connect to pruned node which should now give us blocks\n+        self.start_node(2)\n+        connect_nodes(n2, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getblockcount(), 1688)\n+\n+    def run_test(self):\n+        self.prepare_chain()\n+\n+        self.log.info(\"Test slacking node\")\n+        self.slacking_test()\n+\n+        self.log.info(\"Done\")\n+\n+if __name__ == '__main__':\n+    FastPruneTest().main()"
      },
      {
        "sha": "0d393b25aa3a52899980a3d0f140eb1945b2f583",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf6ec0eb144f973685b89b2aab3e257b38cc221/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf6ec0eb144f973685b89b2aab3e257b38cc221/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fdf6ec0eb144f973685b89b2aab3e257b38cc221",
        "patch": "@@ -136,6 +136,7 @@\n     'rpc_net.py',\n     'wallet_keypool.py',\n     'p2p_mempool.py',\n+    'feature_pruning_fast.py',\n     'mining_prioritisetransaction.py',\n     'p2p_invalid_locator.py',\n     'p2p_invalid_block.py',"
      }
    ]
  }
]