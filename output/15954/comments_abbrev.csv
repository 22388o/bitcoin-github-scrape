laanwj,2019-05-05 15:59:06,"Concept ACK, might want to add a short mention to the release notes in case someone was still relying on the old behavior.",https://github.com/bitcoin/bitcoin/pull/15954#issuecomment-489439144,489439144,
tryphe,2019-05-05 18:28:33,"@laanwj, thanks! Release notes created.",https://github.com/bitcoin/bitcoin/pull/15954#issuecomment-489451022,489451022,
fanquake,2019-05-06 02:41:15,"Concept ACK\n\nCan you [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) 9de6512 -> 72275fc into a single commit. (i.e `doc: add release notes for #15954`).\n\nCan you also checkout the Travis [build logs](https://travis-ci.org/bitcoin/bitcoin/builds/528621021), and fix (and squash into the first commit) any errors thrown by the linter. i.e `This diff a",https://github.com/bitcoin/bitcoin/pull/15954#issuecomment-489487232,489487232,
tryphe,2019-05-07 23:44:42,"@promag nice catches, thanks! Squashed.",https://github.com/bitcoin/bitcoin/pull/15954#issuecomment-490293735,490293735,
MarcoFalke,2019-05-10 12:13:23,"Could add a functional test to mine some blocks, create a boostrap.dat with the helper script, then load it with the command line arg.",https://github.com/bitcoin/bitcoin/pull/15954#issuecomment-491267397,491267397,
fanquake,2019-06-03 14:34:11,@tryphe Are you interested in writing a test for this change?,https://github.com/bitcoin/bitcoin/pull/15954#issuecomment-498282700,498282700,
promag,2019-05-06 13:35:38,`-loadblock`,https://github.com/bitcoin/bitcoin/pull/15954#discussion_r281187286,281187286,doc/release-notes-15954.md
promag,2019-05-06 13:50:26,"Note that it is possible to run with `-noloadblock`. I suggest to add the condition before spawning the thread:\n```cpp\nif (!vImportFiles.empty()) {\n    // Spawn 'loadblk' thread to run ThreadImport()\n    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n}\n```",https://github.com/bitcoin/bitcoin/pull/15954#discussion_r281193244,281193244,src/init.cpp
promag,2019-05-07 21:40:45,"See https://github.com/bitcoin/bitcoin/blob/b2a6b0216192b6e8428f1a80b47f5178fccb961a/src/util/system.cpp#L407-L412\n\nBasically you can invert options and so if you run with `-noloadblock` then `gArgs.IsArgSet(""-loadblock"") == true` but `gArgs.GetArgs(""-loadblock"")` gives an empty array. The result is that the import thread is spawned for no good reason.",https://github.com/bitcoin/bitcoin/pull/15954#discussion_r281840528,281840528,src/init.cpp
tryphe,2019-05-07 23:46:45,Thanks! Let me know if you see anything else that needs changing.,https://github.com/bitcoin/bitcoin/pull/15954#discussion_r281869867,281869867,src/init.cpp
MarcoFalke,2019-05-09 22:19:47,"The thread must be called currently (even if nothing is imported) to activate the best chain.\n\nThis explains the test failures, I believe",https://github.com/bitcoin/bitcoin/pull/15954#discussion_r282687368,282687368,src/init.cpp
tryphe,2019-05-09 23:56:24,"That's interesting. This compiled and runs fine for me, but I guess since I'm already synced I didn't reproduce these test issues?",https://github.com/bitcoin/bitcoin/pull/15954#discussion_r282706887,282706887,src/init.cpp
tryphe,2019-05-10 00:01:35,"Also, this is the only failure I see, but I assumed it was unrelated? `FAIL qt/test/test_bitcoin-qt (exit status: 134)`\n\nI can't seem to find the source of the `134`",https://github.com/bitcoin/bitcoin/pull/15954#discussion_r282707729,282707729,src/init.cpp
tryphe,2019-05-10 00:51:21,"There's also this in appveyor but I wasn't totally sure what it meant:\n`AssertionError: [node 0] Error: no RPC connection` via\n`  File ""C:\projects\bitcoin/test/functional/create_cache.py"", line 28, in <module>`\nI guess that's it?",https://github.com/bitcoin/bitcoin/pull/15954#discussion_r282714968,282714968,src/init.cpp
