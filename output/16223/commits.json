[
  {
    "sha": "0e01e4522e0f9e2e994f80fc61f40d61a4a70d79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTAxZTQ1MjJlMGY5ZTJlOTk0ZjgwZmM2MWY0MGQ2MWE0YTcwZDc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-06-17T12:39:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-06-17T12:54:35Z"
      },
      "message": "devtools: Fetch and display ACKs at sign-off time in github-merge\n\n- Fetch the ACKs only at sign-off time. This makes sure that any\n  last-minute ACKs are included (fixes #16200)\n- Show a list of ACKs and their author before signing off, and warn if\n  there are none",
      "tree": {
        "sha": "77f9c31a00f82ece666b57884d57979315834c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77f9c31a00f82ece666b57884d57979315834c8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e01e4522e0f9e2e994f80fc61f40d61a4a70d79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e01e4522e0f9e2e994f80fc61f40d61a4a70d79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e01e4522e0f9e2e994f80fc61f40d61a4a70d79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e01e4522e0f9e2e994f80fc61f40d61a4a70d79/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6f924811d5b4ae2a6c77105403747cd31d3e49d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f924811d5b4ae2a6c77105403747cd31d3e49d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f924811d5b4ae2a6c77105403747cd31d3e49d"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 49,
      "deletions": 19
    },
    "files": [
      {
        "sha": "cd7a271e830c28662824cd29490be3475d2cfde8",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 49,
        "deletions": 19,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e01e4522e0f9e2e994f80fc61f40d61a4a70d79/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e01e4522e0f9e2e994f80fc61f40d61a4a70d79/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=0e01e4522e0f9e2e994f80fc61f40d61a4a70d79",
        "patch": "@@ -32,10 +32,14 @@\n # OS specific configuration for terminal attributes\n ATTR_RESET = ''\n ATTR_PR = ''\n+ATTR_NAME = ''\n+ATTR_WARN = ''\n COMMIT_FORMAT = '%H %s (%an)%d'\n if os.name == 'posix': # if posix, assume we can use basic terminal escapes\n     ATTR_RESET = '\\033[0m'\n     ATTR_PR = '\\033[1;36m'\n+    ATTR_NAME = '\\033[0;36m'\n+    ATTR_WARN = '\\033[1;31m'\n     COMMIT_FORMAT = '%C(bold blue)%H%Creset %s %C(cyan)(%an)%Creset%C(green)%d%Creset'\n \n def git_config_get(option, default=None):\n@@ -164,18 +168,36 @@ def tree_sha512sum(commit='HEAD'):\n     return overall.hexdigest()\n \n def get_acks_from_comments(head_commit, comments):\n-    assert len(head_commit) == 6\n-    ack_str ='\\n\\nACKs for commit {}:\\n'.format(head_commit)\n+    # Look for abbreviated commit id, because not everyone wants to type/paste\n+    # the whole thing and the chance of collisions within a PR is small enough\n+    head_abbrev = head_commit[0:6]\n+    acks = []\n     for c in comments:\n-        review = [l for l in c['body'].split('\\r\\n') if 'ACK' in l and head_commit in l]\n+        review = [l for l in c['body'].split('\\r\\n') if 'ACK' in l and head_abbrev in l]\n         if review:\n-            ack_str += '  {}:\\n'.format(c['user']['login'])\n-            ack_str += '    {}\\n'.format(review[0])\n+            acks.append((c['user']['login'], review[0]))\n+    return acks\n+\n+def make_acks_message(head_commit, acks):\n+    if acks:\n+        ack_str ='\\n\\nACKs for top commit:\\n'.format(head_commit)\n+        for name, msg in acks:\n+            ack_str += '  {}:\\n'.format(name)\n+            ack_str += '    {}\\n'.format(msg)\n+    else:\n+        ack_str ='\\n\\nTop commit has no ACKs.\\n'\n     return ack_str\n \n-def print_merge_details(pull, title, branch, base_branch, head_branch):\n+def print_merge_details(pull, title, branch, base_branch, head_branch, acks):\n     print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n     subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n+    if acks is not None:\n+        if acks:\n+            print('{}ACKs:{}'.format(ATTR_PR, ATTR_RESET))\n+            for (name, message) in acks:\n+                print('* {} {}({}){}'.format(message, ATTR_NAME, name, ATTR_RESET))\n+        else:\n+            print('{}Top commit has no ACKs!{}'.format(ATTR_WARN, ATTR_RESET))\n \n def parse_arguments():\n     epilog = '''\n@@ -225,9 +247,6 @@ def main():\n     info = retrieve_pr_info(repo,pull,ghtoken)\n     if info is None:\n         sys.exit(1)\n-    comments = retrieve_pr_comments(repo,pull,ghtoken) + retrieve_pr_reviews(repo,pull,ghtoken)\n-    if comments is None:\n-        sys.exit(1)\n     title = info['title'].strip()\n     body = info['body'].strip()\n     # precedence order for destination branch argument:\n@@ -257,6 +276,8 @@ def main():\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n+        head_commit = subprocess.check_output([GIT,'log','-1','--pretty=format:%H',head_branch]).decode('utf-8')\n+        assert len(head_commit) == 40\n     except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n         sys.exit(3)\n@@ -281,7 +302,6 @@ def main():\n         message = firstline + '\\n\\n'\n         message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%H %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n         message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n-        message += get_acks_from_comments(head_commit=subprocess.check_output([GIT,'log','-1','--pretty=format:%H',head_branch]).decode('utf-8')[:6], comments=comments)\n         try:\n             subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','--no-gpg-sign','-m',message.encode('utf-8'),head_branch])\n         except subprocess.CalledProcessError:\n@@ -299,20 +319,14 @@ def main():\n         if len(symlink_files) > 0:\n             sys.exit(4)\n \n-        # Put tree SHA512 into the message\n+        # Compute SHA512 of git tree (to be able to detect changes before sign-off)\n         try:\n             first_sha512 = tree_sha512sum()\n-            message += '\\n\\nTree-SHA512: ' + first_sha512\n         except subprocess.CalledProcessError:\n             print(\"ERROR: Unable to compute tree hash\")\n             sys.exit(4)\n-        try:\n-            subprocess.check_call([GIT,'commit','--amend','--no-gpg-sign','-m',message.encode('utf-8')])\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Cannot update message.\", file=stderr)\n-            sys.exit(4)\n \n-        print_merge_details(pull, title, branch, base_branch, head_branch)\n+        print_merge_details(pull, title, branch, base_branch, head_branch, None)\n         print()\n \n         # Run test command if configured.\n@@ -345,8 +359,24 @@ def main():\n             print(\"ERROR: Tree hash changed unexpectedly\",file=stderr)\n             sys.exit(8)\n \n+        # Retrieve PR comments and ACKs and add to commit message, store ACKs to print them with commit\n+        # description\n+        comments = retrieve_pr_comments(repo,pull,ghtoken) + retrieve_pr_reviews(repo,pull,ghtoken)\n+        if comments is None:\n+            print(\"ERROR: Could not fetch PR comments and reviews\",file=stderr)\n+            sys.exit(1)\n+        acks = get_acks_from_comments(head_commit=head_commit, comments=comments)\n+        message += make_acks_message(head_commit=head_commit, acks=acks)\n+        # end message with SHA512 tree hash, then update message\n+        message += '\\n\\nTree-SHA512: ' + first_sha512\n+        try:\n+            subprocess.check_call([GIT,'commit','--amend','--no-gpg-sign','-m',message.encode('utf-8')])\n+        except subprocess.CalledProcessError:\n+            print(\"ERROR: Cannot update message.\", file=stderr)\n+            sys.exit(4)\n+\n         # Sign the merge commit.\n-        print_merge_details(pull, title, branch, base_branch, head_branch)\n+        print_merge_details(pull, title, branch, base_branch, head_branch, acks)\n         while True:\n             reply = ask_prompt(\"Type 's' to sign off on the above merge, or 'x' to reject and exit.\").lower()\n             if reply == 's':"
      }
    ]
  }
]