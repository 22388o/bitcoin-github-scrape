[
  {
    "sha": "cacd92112e76076f642931102318b6caeff69eb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWNkOTIxMTJlNzYwNzZmNjQyOTMxMTAyMzE4YjZjYWVmZjY5ZWI5",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-06-09T19:17:17Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-25T11:22:02Z"
      },
      "message": "Add u8string and u8path function macros",
      "tree": {
        "sha": "4f4b54fc11f0f3ba8dcf0a3d30f1bf508604c28a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f4b54fc11f0f3ba8dcf0a3d30f1bf508604c28a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cacd92112e76076f642931102318b6caeff69eb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacd92112e76076f642931102318b6caeff69eb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cacd92112e76076f642931102318b6caeff69eb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacd92112e76076f642931102318b6caeff69eb9/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94dd89e6fa37d4d81c9e6787f965bc522242300d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94dd89e6fa37d4d81c9e6787f965bc522242300d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94dd89e6fa37d4d81c9e6787f965bc522242300d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2a1fcce5c1bcae6d5e70954bac16559ff73e2ee",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacd92112e76076f642931102318b6caeff69eb9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacd92112e76076f642931102318b6caeff69eb9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=cacd92112e76076f642931102318b6caeff69eb9",
        "patch": "@@ -84,6 +84,8 @@ const int64_t nStartupTime = GetTime();\n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n+fs::detail::utf8_codecvt_facet g_utf8;\n+\n ArgsManager gArgs;\n \n CTranslationInterface translationInterface;"
      },
      {
        "sha": "66ad9c0514e4e6e13caec4a2c8d010e153e746d1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacd92112e76076f642931102318b6caeff69eb9/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacd92112e76076f642931102318b6caeff69eb9/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=cacd92112e76076f642931102318b6caeff69eb9",
        "patch": "@@ -50,6 +50,11 @@ extern CTranslationInterface translationInterface;\n extern const char * const BITCOIN_CONF_FILENAME;\n extern const char * const BITCOIN_PID_FILENAME;\n \n+extern fs::detail::utf8_codecvt_facet g_utf8;\n+\n+#define u8string() string(g_utf8)\n+#define u8path(str) path(str, g_utf8)\n+\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      }
    ]
  },
  {
    "sha": "045aa17a27d098f25a0791deb9b5a5122a7ababa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDVhYTE3YTI3ZDA5OGYyNWEwNzkxZGViOWI1YTUxMjJhN2FiYWJh",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-06-11T19:50:30Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:28:57Z"
      },
      "message": "Convert command line string to utf8",
      "tree": {
        "sha": "0a0a7c561e5aba1e00d4496168912ef8d44f3145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a0a7c561e5aba1e00d4496168912ef8d44f3145"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/045aa17a27d098f25a0791deb9b5a5122a7ababa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045aa17a27d098f25a0791deb9b5a5122a7ababa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/045aa17a27d098f25a0791deb9b5a5122a7ababa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045aa17a27d098f25a0791deb9b5a5122a7ababa/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cacd92112e76076f642931102318b6caeff69eb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacd92112e76076f642931102318b6caeff69eb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cacd92112e76076f642931102318b6caeff69eb9"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 235,
      "deletions": 69
    },
    "files": [
      {
        "sha": "40a8960f58ba5e7639e31c6ab084599b415da5e0",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -1219,7 +1219,11 @@ fi\n if test \"x$use_ccache\" = \"xyes\"; then\n     AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n fi\n-\n+case $host in\n+  *mingw*)\n+     UNICODE_LDFLAGS=\"-municode\"\n+  ;;\n+esac\n dnl enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n if test x$enable_wallet != xno; then\n@@ -1382,6 +1386,7 @@ AC_SUBST(SSE41_CXXFLAGS)\n AC_SUBST(AVX2_CXXFLAGS)\n AC_SUBST(SHANI_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(UNICODE_LDFLAGS)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)"
      },
      {
        "sha": "de78fc2ec76cc7d8f208710f03d67eb06949cc76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -424,6 +424,7 @@ if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n AM_LDFLAGS += $(COMPAT_LDFLAGS)\n endif\n+AM_LDFLAGS += $(UNICODE_LDFLAGS)\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)"
      },
      {
        "sha": "7e76cf0a9ff6b0e952d9849976e1f5d4630561eb",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -46,7 +46,11 @@ static fs::path SetDataDir()\n     return ret;\n }\n \n+#ifndef WIN32\n int main(int argc, char** argv)\n+#else\n+int wmain(int argc, wchar_t** argv)\n+#endif\n {\n     SetupBenchArgs();\n     std::string error;"
      },
      {
        "sha": "10abfae684e3757159189a0c7241ced9d1e45e9c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -24,6 +24,10 @@\n \n #include <univalue.h>\n \n+#ifdef WIN32\n+#include <shellapi.h>\n+#endif\n+\n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n static const bool DEFAULT_NAMED=false;\n@@ -92,7 +96,11 @@ class CConnectionFailed : public std::runtime_error\n // This function returns either one of EXIT_ codes when it's expected to stop the process or\n // CONTINUE_EXECUTION when it's expected to continue further.\n //\n+#ifndef WIN32\n static int AppInitRPC(int argc, char* argv[])\n+#else\n+static int AppInitRPC(int argc, wchar_t* argv[])\n+#endif\n {\n     //\n     // Parameters\n@@ -405,7 +413,11 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+#ifndef WIN32\n static int CommandLineRPC(int argc, char *argv[])\n+#else\n+static int CommandLineRPC(int argc, wchar_t* argv[])\n+#endif\n {\n     std::string strPrint;\n     int nRet = 0;\n@@ -422,7 +434,15 @@ static int CommandLineRPC(int argc, char *argv[])\n             }\n             gArgs.ForceSetArg(\"-rpcpassword\", rpcPass);\n         }\n+#ifndef WIN32\n         std::vector<std::string> args = std::vector<std::string>(&argv[1], &argv[argc]);\n+#else\n+        std::vector<std::wstring> wargs = std::vector<std::wstring>(&argv[1], &argv[argc]);\n+        std::vector<std::string> args;\n+        for (std::wstring& warg : wargs) {\n+            args.push_back(WideToUtf8(warg));\n+        }\n+#endif\n         if (gArgs.GetBoolArg(\"-stdin\", false)) {\n             // Read one arg per line from stdin and append\n             std::string line;\n@@ -511,8 +531,11 @@ static int CommandLineRPC(int argc, char *argv[])\n     }\n     return nRet;\n }\n-\n+#ifndef WIN32\n int main(int argc, char* argv[])\n+#else\n+int wmain(int argc, wchar_t* argv[])\n+#endif\n {\n     SetupEnvironment();\n     if (!SetupNetworking()) {"
      },
      {
        "sha": "d9a623da4febafb819ec361b6e4b0fbb4c5869c0",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -74,7 +74,11 @@ static void SetupBitcoinTxArgs()\n // This function returns either one of EXIT_ codes when it's expected to stop the process or\n // CONTINUE_EXECUTION when it's expected to continue further.\n //\n+#ifndef WIN32\n static int AppInitRawTx(int argc, char* argv[])\n+#else\n+static int AppInitRawTx(int argc, wchar_t* argv[])\n+#endif\n {\n     //\n     // Parameters\n@@ -768,7 +772,11 @@ static std::string readStdin()\n     return ret;\n }\n \n+#ifndef WIN32\n static int CommandLineRawTx(int argc, char* argv[])\n+#else\n+static int CommandLineRawTx(int argc, wchar_t* argv[])\n+#endif\n {\n     std::string strPrint;\n     int nRet = 0;\n@@ -789,7 +797,11 @@ static int CommandLineRawTx(int argc, char* argv[])\n                 throw std::runtime_error(\"too few parameters\");\n \n             // param: hex-encoded bitcoin transaction\n+#ifndef WIN32\n             std::string strHexTx(argv[1]);\n+#else\n+            std::string strHexTx(WideToUtf8(argv[1]));\n+#endif\n             if (strHexTx == \"-\")                 // \"-\" implies standard input\n                 strHexTx = readStdin();\n \n@@ -801,7 +813,11 @@ static int CommandLineRawTx(int argc, char* argv[])\n             startArg = 1;\n \n         for (int i = startArg; i < argc; i++) {\n+#ifndef WIN32\n             std::string arg = argv[i];\n+#else\n+            std::string arg = WideToUtf8(argv[i]);\n+#endif\n             std::string key, value;\n             size_t eqpos = arg.find('=');\n             if (eqpos == std::string::npos)\n@@ -835,7 +851,11 @@ static int CommandLineRawTx(int argc, char* argv[])\n     return nRet;\n }\n \n+#ifndef WIN32\n int main(int argc, char* argv[])\n+#else\n+int wmain(int argc, wchar_t* argv[])\n+#endif\n {\n     SetupEnvironment();\n "
      },
      {
        "sha": "d4c3b8dffb7d98a8272765a1210b42038d3796f7",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -54,7 +54,11 @@ static void WaitForShutdown()\n //\n // Start\n //\n+#ifndef WIN32\n static bool AppInit(int argc, char* argv[])\n+#else\n+static bool AppInit(int argc, wchar_t* argv[])\n+#endif\n {\n     bool fRet = false;\n \n@@ -183,7 +187,11 @@ static bool AppInit(int argc, char* argv[])\n     return fRet;\n }\n \n+#ifndef WIN32\n int main(int argc, char* argv[])\n+#else\n+int wmain(int argc, wchar_t* argv[])\n+#endif\n {\n     SetupEnvironment();\n "
      },
      {
        "sha": "707dfd53564c0a26d4ff77af6752d15ff4ed08f1",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -49,7 +49,11 @@ namespace {\n \n class NodeImpl : public Node\n {\n+#ifndef WIN32\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n+#else\n+    bool parseParameters(int argc, const wchar_t* const argv[], std::string& error) override\n+#endif\n     {\n         return gArgs.ParseParameters(argc, argv, error);\n     }"
      },
      {
        "sha": "c7487fcda2867a927e6b227cd50c5f896a7f8546",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -38,7 +38,11 @@ class Node\n     virtual ~Node() {}\n \n     //! Set command line arguments.\n+#ifndef WIN32\n     virtual bool parseParameters(int argc, const char* const argv[], std::string& error) = 0;\n+#else\n+    virtual bool parseParameters(int argc, const wchar_t* const argv[], std::string& error) = 0;\n+#endif\n \n     //! Set a command line argument if it doesn't already have a value\n     virtual bool softSetArg(const std::string& arg, const std::string& value) = 0;"
      },
      {
        "sha": "9975e337635bc04a2d0fb5948cd6d515e8cedfbd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -32,6 +32,7 @@\n #include <ui_interface.h>\n #include <uint256.h>\n #include <util.h>\n+#include <utilstrencodings.h>\n #include <warnings.h>\n \n #include <walletinitinterface.h>\n@@ -52,6 +53,10 @@\n #include <QTranslator>\n #include <QSslConfiguration>\n \n+#ifdef WIN32\n+#include <shellapi.h>\n+#endif\n+\n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n #if QT_VERSION < 0x050400\n@@ -553,7 +558,11 @@ static void SetupUIArgs()\n }\n \n #ifndef BITCOIN_QT_TEST\n+#ifndef WIN32\n int main(int argc, char *argv[])\n+#else\n+int wmain(int argc, wchar_t* argv[])\n+#endif\n {\n     SetupEnvironment();\n \n@@ -565,7 +574,11 @@ int main(int argc, char *argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     Q_INIT_RESOURCE(bitcoin_locale);\n \n+#ifndef WIN32\n     BitcoinApplication app(*node, argc, argv);\n+#else\n+    BitcoinApplication app(*node, __argc, __argv);\n+#endif\n #if QT_VERSION > 0x050100\n     // Generate high-dpi pixmaps\n     QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);"
      },
      {
        "sha": "93dff2f95dab4601e020e8c2119b4935b18c9299",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -190,11 +190,19 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // Warning: ipcSendCommandLine() is called early in init,\n // so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n+#ifndef WIN32\n void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char* argv[])\n+#else\n+void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, wchar_t* argv[])\n+#endif\n {\n     for (int i = 1; i < argc; i++)\n     {\n+#ifndef WIN32\n         QString arg(argv[i]);\n+#else\n+        QString arg = QString::fromStdWString(argv[i]);\n+#endif\n         if (arg.startsWith(\"-\"))\n             continue;\n "
      },
      {
        "sha": "e103ba3b11dd01614656201f240c49a3acfaf4f2",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -60,7 +60,11 @@ class PaymentServer : public QObject\n public:\n     // Parse URIs on command line\n     // Returns false on error\n+#ifndef WIN32\n     static void ipcParseCommandLine(interfaces::Node& node, int argc, char *argv[]);\n+#else\n+    static void ipcParseCommandLine(interfaces::Node& node, int argc, wchar_t* argv[]);\n+#endif\n \n     // Returns true if there were URIs on the command line\n     // which were successfully sent to an already-running"
      },
      {
        "sha": "2caa9a6fef8f31720a3b1fa2a7c3d71296141af6",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -41,7 +41,11 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n extern void noui_connect();\n \n // This is all you need to run all the tests\n+#ifndef WIN32\n int main(int argc, char *argv[])\n+#else\n+int wmain(int argc, wchar_t* argv[])\n+#endif\n {\n     SetupEnvironment();\n     SetupNetworking();\n@@ -65,7 +69,11 @@ int main(int argc, char *argv[])\n \n     // Don't remove this, it's needed to access\n     // QApplication:: and QCoreApplication:: in the tests\n+#ifndef WIN32\n     QApplication app(argc, argv);\n+#else\n+    QApplication app(__argc, __argv);\n+#endif\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n \n     SSL_library_init();"
      },
      {
        "sha": "b6ad078d22e03e42b071a1706a698a78012e7ecb",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 30,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -13,18 +13,28 @@\n \n BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n \n+#ifndef WIN32\n+#define _T(TEXT) TEXT\n+typedef char _TCHAR;\n+typedef std::string _tstring;\n static void ResetArgs(const std::string& strArg)\n+#else\n+#define _T(TEXT) L##TEXT\n+typedef wchar_t _TCHAR;\n+typedef std::wstring _tstring;\n+static void ResetArgs(const std::wstring& strArg)\n+#endif\n {\n-    std::vector<std::string> vecArg;\n+    std::vector<_tstring> vecArg;\n     if (strArg.size())\n       boost::split(vecArg, strArg, boost::is_space(), boost::token_compress_on);\n \n     // Insert dummy executable name:\n-    vecArg.insert(vecArg.begin(), \"testbitcoin\");\n+    vecArg.insert(vecArg.begin(), _T(\"testbitcoin\"));\n \n     // Convert to char*:\n-    std::vector<const char*> vecChar;\n-    for (std::string& s : vecArg)\n+    std::vector<const _TCHAR*> vecChar;\n+    for (_tstring& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n@@ -42,7 +52,7 @@ static void SetupArgs(const std::vector<std::string>& args)\n BOOST_AUTO_TEST_CASE(boolarg)\n {\n     SetupArgs({\"-foo\"});\n-    ResetArgs(\"-foo\");\n+    ResetArgs(_T(\"-foo\"));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n@@ -52,41 +62,41 @@ BOOST_AUTO_TEST_CASE(boolarg)\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-fooo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n+    ResetArgs(_T(\"-foo=0\"));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n+    ResetArgs(_T(\"-foo=1\"));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n+    ResetArgs(_T(\"-nofoo\"));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n+    ResetArgs(_T(\"-nofoo=1\"));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n+    ResetArgs(_T(\"-foo -nofoo\")); // -nofoo should win\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n+    ResetArgs(_T(\"-foo=1 -nofoo=1\")); // -nofoo should win\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n+    ResetArgs(_T(\"-foo=0 -nofoo=0\")); // -nofoo=0 should win\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n+    ResetArgs(_T(\"--foo=1\"));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"--nofoo=1\");\n+    ResetArgs(_T(\"--nofoo=1\"));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n@@ -95,23 +105,23 @@ BOOST_AUTO_TEST_CASE(boolarg)\n BOOST_AUTO_TEST_CASE(stringarg)\n {\n     SetupArgs({\"-foo\", \"-bar\"});\n-    ResetArgs(\"\");\n+    ResetArgs(_T(\"\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n-    ResetArgs(\"-foo -bar\");\n+    ResetArgs(_T(\"-foo -bar\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"\");\n \n-    ResetArgs(\"-foo=\");\n+    ResetArgs(_T(\"-foo=\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"\");\n \n-    ResetArgs(\"-foo=11\");\n+    ResetArgs(_T(\"-foo=11\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"11\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"11\");\n \n-    ResetArgs(\"-foo=eleven\");\n+    ResetArgs(_T(\"-foo=eleven\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"eleven\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n@@ -120,54 +130,54 @@ BOOST_AUTO_TEST_CASE(stringarg)\n BOOST_AUTO_TEST_CASE(intarg)\n {\n     SetupArgs({\"-foo\", \"-bar\"});\n-    ResetArgs(\"\");\n+    ResetArgs(_T(\"\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n+    ResetArgs(_T(\"-foo -bar\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 0);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 0);\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n+    ResetArgs(_T(\"-foo=11 -bar=12\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 11);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n+    ResetArgs(_T(\"-foo=NaN -bar=NotANumber\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 1), 0);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n     SetupArgs({\"-foo\", \"-bar\"});\n-    ResetArgs(\"--foo\");\n+    ResetArgs(_T(\"--foo\"));\n     BOOST_CHECK_EQUAL(gArgs.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n+    ResetArgs(_T(\"--foo=verbose --bar=1\"));\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"verbose\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n     SetupArgs({\"-foo\", \"-bar\"});\n-    ResetArgs(\"-nofoo\");\n+    ResetArgs(_T(\"-nofoo\"));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-nofoo=1\");\n+    ResetArgs(_T(\"-nofoo=1\"));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-nofoo=0\");\n+    ResetArgs(_T(\"-nofoo=0\"));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n+    ResetArgs(_T(\"-foo --nofoo\")); // --nofoo should win\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n+    ResetArgs(_T(\"-nofoo -foo\")); // foo always wins:\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n }"
      },
      {
        "sha": "a2d1cfab8ac52b72e39dbcd8210ac6a50ad6ca0b",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -297,8 +297,10 @@ extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n // Declare main(...) \"weak\" to allow for libFuzzer linking. libFuzzer provides\n // the main(...) function.\n __attribute__((weak))\n-#endif\n int main(int argc, char **argv)\n+#else\n+int wmain(int argc, wchar_t** argv)\n+#endif\n {\n     initialize();\n #ifdef __AFL_INIT"
      },
      {
        "sha": "c84d35423afef21ea90104f66cc40a57d83010f7",
        "filename": "src/test/test_bitcoin_main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/test_bitcoin_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/test_bitcoin_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_main.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -26,3 +26,11 @@ bool ShutdownRequested()\n {\n   return false;\n }\n+\n+#ifdef WIN32\n+int main(int argc, char** argv);\n+int wmain(int argc, wchar_t** argv)\n+{\n+    main(argc, __argv);\n+}\n+#endif"
      },
      {
        "sha": "918bb86b4dec48c9913d1f1a9a747b99fb2e6c38",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -21,6 +21,14 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#ifndef WIN32\n+#define _T(TEXT) TEXT\n+typedef char _TCHAR;\n+#else\n+#define _T(TEXT) L##TEXT\n+typedef wchar_t _TCHAR;\n+#endif\n+\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -206,17 +214,17 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n     TestArgsManager testArgs;\n     const char* avail_args[] = {\"-a\", \"-b\", \"-ccc\", \"-d\"};\n-    const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n+    const _TCHAR* argv_test[] = {_T(\"-ignored\"), _T(\"-a\"), _T(\"-b\"), _T(\"-ccc=argument\"), _T(\"-ccc=multiple\"), _T(\"f\"), _T(\"-d=e\")};\n \n     std::string error;\n     testArgs.SetupArgs(4, avail_args);\n-    testArgs.ParseParameters(0, (char**)argv_test, error);\n+    testArgs.ParseParameters(0, (_TCHAR**)argv_test, error);\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n-    testArgs.ParseParameters(1, (char**)argv_test, error);\n+    testArgs.ParseParameters(1, (_TCHAR**)argv_test, error);\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n-    testArgs.ParseParameters(7, (char**)argv_test, error);\n+    testArgs.ParseParameters(7, (_TCHAR**)argv_test, error);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n@@ -238,11 +246,11 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n {\n     TestArgsManager testArgs;\n     const char* avail_args[] = {\"-a\", \"-b\", \"-c\", \"-d\", \"-e\", \"-f\"};\n-    const char *argv_test[] = {\n-        \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n+    const _TCHAR* argv_test[] = {\n+        _T(\"ignored\"), _T(\"-a\"), _T(\"-nob\"), _T(\"-c=0\"), _T(\"-d=1\"), _T(\"-e=false\"), _T(\"-f=true\")};\n     std::string error;\n     testArgs.SetupArgs(6, avail_args);\n-    testArgs.ParseParameters(7, (char**)argv_test, error);\n+    testArgs.ParseParameters(7, (_TCHAR**)argv_test, error);\n \n     // Each letter should be set.\n     for (char opt : \"abcdef\")\n@@ -275,10 +283,10 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Params test\n     const char* avail_args[] = {\"-foo\", \"-bar\"};\n-    const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n+    const _TCHAR* argv_test[] = {_T(\"ignored\"), _T(\"-nofoo\"), _T(\"-foo\"), _T(\"-nobar=0\")};\n     testArgs.SetupArgs(2, avail_args);\n     std::string error;\n-    testArgs.ParseParameters(4, (char**)argv_test, error);\n+    testArgs.ParseParameters(4, (_TCHAR**)argv_test, error);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n@@ -290,7 +298,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Config test\n     const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n-    testArgs.ParseParameters(1, (char**)argv_test, error);\n+    testArgs.ParseParameters(1, (_TCHAR**)argv_test, error);\n     testArgs.ReadConfigString(conf_test);\n \n     // This was passed twice, second one overrides the negative setting,\n@@ -303,9 +311,9 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n \n     // Combined test\n-    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const _TCHAR* combo_test_args[] = {_T(\"ignored\"), _T(\"-nofoo\"), _T(\"-bar\")};\n     const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n-    testArgs.ParseParameters(3, (char**)combo_test_args, error);\n+    testArgs.ParseParameters(3, (_TCHAR**)combo_test_args, error);\n     testArgs.ReadConfigString(combo_test_conf);\n \n     // Command line overrides, but doesn't erase old setting\n@@ -547,72 +555,72 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     const char* avail_args[] = {\"-testnet\", \"-regtest\"};\n     test_args.SetupArgs(2, avail_args);\n \n-    const char* argv_testnet[] = {\"cmd\", \"-testnet\"};\n-    const char* argv_regtest[] = {\"cmd\", \"-regtest\"};\n-    const char* argv_test_no_reg[] = {\"cmd\", \"-testnet\", \"-noregtest\"};\n-    const char* argv_both[] = {\"cmd\", \"-testnet\", \"-regtest\"};\n+    const _TCHAR* argv_testnet[] = {_T(\"cmd\"), _T(\"-testnet\")};\n+    const _TCHAR* argv_regtest[] = {_T(\"cmd\"), _T(\"-regtest\")};\n+    const _TCHAR* argv_test_no_reg[] = {_T(\"cmd\"), _T(\"-testnet\"), _T(\"-noregtest\")};\n+    const _TCHAR* argv_both[] = {_T(\"cmd\"), _T(\"-testnet\"), _T(\"-regtest\")};\n \n     // equivalent to \"-testnet\"\n     // regtest in testnet section is ignored\n     const char* testnetconf = \"testnet=1\\nregtest=0\\n[test]\\nregtest=1\";\n     std::string error;\n \n-    test_args.ParseParameters(0, (char**)argv_testnet, error);\n+    test_args.ParseParameters(0, (_TCHAR**)argv_testnet, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"main\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_testnet, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_regtest, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"regtest\");\n \n-    test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n+    test_args.ParseParameters(3, (_TCHAR**)argv_test_no_reg, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both, error);\n+    test_args.ParseParameters(3, (_TCHAR**)argv_both, error);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(0, (char**)argv_testnet, error);\n+    test_args.ParseParameters(0, (_TCHAR**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_regtest, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n+    test_args.ParseParameters(3, (_TCHAR**)argv_test_no_reg, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both, error);\n+    test_args.ParseParameters(3, (_TCHAR**)argv_both, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n     test_args.SelectConfigNetwork(\"test\");\n \n-    test_args.ParseParameters(0, (char**)argv_testnet, error);\n+    test_args.ParseParameters(0, (_TCHAR**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_regtest, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(2, (char**)argv_test_no_reg, error);\n+    test_args.ParseParameters(2, (_TCHAR**)argv_test_no_reg, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both, error);\n+    test_args.ParseParameters(3, (_TCHAR**)argv_both, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }"
      },
      {
        "sha": "bfce5c6dad7ec681ab38a83a28e0b691ed0a54b0",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -15,6 +15,8 @@\n #if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n #include <pthread.h>\n #include <pthread_np.h>\n+#elif defined(WIN32)\n+#include <shellapi.h>\n #endif\n \n #ifndef WIN32\n@@ -412,14 +414,23 @@ void ArgsManager::SelectConfigNetwork(const std::string& network)\n {\n     m_network = network;\n }\n-\n+#ifndef WIN32\n bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)\n+#else\n+bool ArgsManager::ParseParameters(int argc, const wchar_t* const argv[], std::string& error)\n+#endif\n {\n     LOCK(cs_args);\n     m_override_args.clear();\n \n     for (int i = 1; i < argc; i++) {\n+#ifndef WIN32\n         std::string key(argv[i]);\n+#else\n+        std::string key;\n+        std::wstring wkey(argv[i]);\n+        key = WideToUtf8(wkey);\n+#endif\n         std::string val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {"
      },
      {
        "sha": "0b286c9b01bd24c7f10e04e3a2113280428f4a45",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -114,14 +114,17 @@ void runCommand(const std::string& strCommand);\n  */\n fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific = true);\n \n+#ifndef WIN32\n inline bool IsSwitchChar(char c)\n {\n-#ifdef WIN32\n-    return c == '-' || c == '/';\n-#else\n     return c == '-';\n-#endif\n }\n+#else\n+inline bool IsSwitchChar(wchar_t c)\n+{\n+    return c == L'-' || c == L'/';\n+}\n+#endif\n \n enum class OptionsCategory {\n     OPTIONS,\n@@ -172,7 +175,11 @@ class ArgsManager\n      */\n     void SelectConfigNetwork(const std::string& network);\n \n+#ifndef WIN32\n     bool ParseParameters(int argc, const char* const argv[], std::string& error);\n+#else\n+    bool ParseParameters(int argc, const wchar_t* const argv[], std::string& error);\n+#endif\n     bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n     /**"
      },
      {
        "sha": "8acbc402f3bba3c06e3d2c257aa669cfb6b09505",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -12,6 +12,10 @@\n #include <errno.h>\n #include <limits>\n \n+#ifdef WIN32\n+#include <stringapiset.h>\n+#endif\n+\n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n static const std::string SAFE_CHARS[] =\n@@ -544,3 +548,13 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n     return true;\n }\n \n+#ifdef WIN32\n+std::string WideToUtf8(const std::wstring& wide_string)\n+{\n+    size_t size = WideCharToMultiByte(CP_UTF8, 0, &*wide_string.begin(), wide_string.size(), nullptr, 0, nullptr, nullptr);\n+    std::string utf8_string(size, 0);\n+    size = WideCharToMultiByte(CP_UTF8, 0, &*wide_string.begin(), wide_string.size(), &*utf8_string.begin(), utf8_string.size(), nullptr, nullptr);\n+    assert(size == utf8_string.size());\n+    return utf8_string;\n+}\n+#endif\n\\ No newline at end of file"
      },
      {
        "sha": "2f099f9b01b8ad415c50434d4afeb8a1c58b9b87",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045aa17a27d098f25a0791deb9b5a5122a7ababa/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "patch": "@@ -183,4 +183,8 @@ bool ConvertBits(const O& outfn, I it, I end) {\n     return true;\n }\n \n+#ifdef WIN32\n+std::string WideToUtf8(const std::wstring& wide_string);\n+#endif\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      }
    ]
  },
  {
    "sha": "93dd077609532cc16e47864c1993224112f0d44f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2RkMDc3NjA5NTMyY2MxNmU0Nzg2NGMxOTkzMjI0MTEyZjBkNDRm",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-06-09T19:26:33Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:29:01Z"
      },
      "message": "Use u8string at proper place",
      "tree": {
        "sha": "5074cf9ec27c53c97bb5e383a50cb492f8f63dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5074cf9ec27c53c97bb5e383a50cb492f8f63dfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93dd077609532cc16e47864c1993224112f0d44f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93dd077609532cc16e47864c1993224112f0d44f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93dd077609532cc16e47864c1993224112f0d44f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93dd077609532cc16e47864c1993224112f0d44f/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045aa17a27d098f25a0791deb9b5a5122a7ababa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045aa17a27d098f25a0791deb9b5a5122a7ababa"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 58,
      "deletions": 58
    },
    "files": [
      {
        "sha": "d3fadc4b427a408ed859b468e74e1c5ec94f1cf8",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -45,12 +45,12 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n     FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.u8string());\n \n     // Serialize\n     if (!SerializeDB(fileout, data)) return false;\n     if (!FileCommit(fileout.Get()))\n-        return error(\"%s: Failed to flush file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to flush file %s\", __func__, pathTmp.u8string());\n     fileout.fclose();\n \n     // replace existing file, if any, with new file\n@@ -98,7 +98,7 @@ bool DeserializeFileDB(const fs::path& path, Data& data)\n     FILE *file = fsbridge::fopen(path, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, path.string());\n+        return error(\"%s: Failed to open file %s\", __func__, path.u8string());\n \n     return DeserializeDB(filein, data);\n }"
      },
      {
        "sha": "a3bf59f016e6c09ce2195865e36603c4596b7dea",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -393,7 +393,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n         if (failedToGetAuthCookie) {\n             throw std::runtime_error(strprintf(\n                 \"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\",\n-                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n+                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).u8string().c_str()));\n         } else {\n             throw std::runtime_error(\"Authorization failed: Incorrect rpcuser or rpcpassword\");\n         }"
      },
      {
        "sha": "c644970b90e20ae1f436963c3490cb5edca2c6d4",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -129,21 +129,21 @@ CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bo\n         options.env = penv;\n     } else {\n         if (fWipe) {\n-            LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n+            LogPrintf(\"Wiping LevelDB in %s\\n\", path.u8string());\n             leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n-        LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n+        LogPrintf(\"Opening LevelDB in %s\\n\", path.u8string());\n     }\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n     dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n     if (gArgs.GetBoolArg(\"-forcecompactdb\", false)) {\n-        LogPrintf(\"Starting database compaction of %s\\n\", path.string());\n+        LogPrintf(\"Starting database compaction of %s\\n\", path.u8string());\n         pdb->CompactRange(nullptr, nullptr);\n-        LogPrintf(\"Finished database compaction of %s\\n\", path.string());\n+        LogPrintf(\"Finished database compaction of %s\\n\", path.u8string());\n     }\n \n     // The base-case obfuscation key, which is a noop.\n@@ -160,10 +160,10 @@ CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bo\n         Write(OBFUSCATE_KEY_KEY, new_key);\n         obfuscate_key = new_key;\n \n-        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.u8string(), HexStr(obfuscate_key));\n     }\n \n-    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.u8string(), HexStr(obfuscate_key));\n }\n \n CDBWrapper::~CDBWrapper()"
      },
      {
        "sha": "6bd89a8a51ccc269ca8da15462b0aff07029718d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -234,7 +234,7 @@ void Shutdown()\n         if (!est_fileout.IsNull())\n             ::feeEstimator.Write(est_fileout);\n         else\n-            LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n+            LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.u8string());\n         fFeeEstimatesInitialized = false;\n     }\n \n@@ -604,12 +604,12 @@ static void CleanupBlockRevFiles()\n     fs::path blocksdir = GetBlocksDir();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (fs::is_regular_file(*it) &&\n-            it->path().filename().string().length() == 12 &&\n-            it->path().filename().string().substr(8,4) == \".dat\")\n+            it->path().filename().u8string().length() == 12 &&\n+            it->path().filename().u8string().substr(8,4) == \".dat\")\n         {\n-            if (it->path().filename().string().substr(0,3) == \"blk\")\n-                mapBlockFiles[it->path().filename().string().substr(3,5)] = it->path();\n-            else if (it->path().filename().string().substr(0,3) == \"rev\")\n+            if (it->path().filename().u8string().substr(0,3) == \"blk\")\n+                mapBlockFiles[it->path().filename().u8string().substr(3,5)] = it->path();\n+            else if (it->path().filename().u8string().substr(0,3) == \"rev\")\n                 remove(it->path());\n         }\n     }\n@@ -668,18 +668,18 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n             LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n-            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n+            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.u8string());\n         }\n     }\n \n     // -loadblock=\n     for (const fs::path& path : vImportFiles) {\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n-            LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n+            LogPrintf(\"Importing blocks file %s...\\n\", path.u8string());\n             LoadExternalBlockFile(chainparams, file);\n         } else {\n-            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.u8string());\n         }\n     }\n \n@@ -1180,10 +1180,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.u8string()));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), _(PACKAGE_NAME)));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.u8string(), _(PACKAGE_NAME)));\n     }\n     return true;\n }\n@@ -1236,15 +1236,15 @@ bool AppInitMain()\n         }\n         if (!g_logger->OpenDebugLog()) {\n             return InitError(strprintf(\"Could not open debug log file %s\",\n-                                       g_logger->m_file_path.string()));\n+                                       g_logger->m_file_path.u8string()));\n         }\n     }\n \n     if (!g_logger->m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n-    LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n-    LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+    LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().u8string());\n+    LogPrintf(\"Using data directory %s\\n\", GetDataDir().u8string());\n+    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).u8string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n@@ -1253,7 +1253,7 @@ bool AppInitMain()\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n                   \"also be data loss if bitcoin is started while in a temporary directory.\\n\",\n-            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n+            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().u8string());\n     }\n \n     InitSignatureCache();"
      },
      {
        "sha": "1d99816fe28de75b40aaeb0d4053acf88beab9da",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -235,7 +235,7 @@ bool Intro::pickDataDirectory(interfaces::Node& node)\n      * (to be consistent with bitcoind behavior)\n      */\n     if(dataDir != getDefaultDataDirectory()) {\n-        node.softSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+        node.softSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).u8string()); // use OS locale for path setting\n     }\n     return true;\n }"
      },
      {
        "sha": "bc0ab05faf7bd087c425150a1d11ff7f2d1b093a",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -54,7 +54,7 @@ int wmain(int argc, wchar_t* argv[])\n     ClearDatadirCache();\n     fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n     fs::create_directories(pathTemp);\n-    gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+    gArgs.ForceSetArg(\"-datadir\", pathTemp.u8string());\n \n     bool fInvalid = false;\n "
      },
      {
        "sha": "69da5d31b1743fb3e5bb2ef61dc23d0f39ed92e5",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -89,18 +89,18 @@ bool GenerateAuthCookie(std::string *cookie_out)\n     fs::path filepath_tmp = GetAuthCookieFile(true);\n     file.open(filepath_tmp.string().c_str());\n     if (!file.is_open()) {\n-        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.string());\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.u8string());\n         return false;\n     }\n     file << cookie;\n     file.close();\n \n     fs::path filepath = GetAuthCookieFile(false);\n     if (!RenameOver(filepath_tmp, filepath)) {\n-        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.string(), filepath.string());\n+        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.u8string(), filepath.u8string());\n         return false;\n     }\n-    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n+    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.u8string());\n \n     if (cookie_out)\n         *cookie_out = cookie;\n@@ -112,7 +112,7 @@ bool GetAuthCookie(std::string *cookie_out)\n     std::ifstream file;\n     std::string cookie;\n     fs::path filepath = GetAuthCookieFile();\n-    file.open(filepath.string().c_str());\n+    file.open(filepath.u8string().c_str());\n     if (!file.is_open())\n         return false;\n     std::getline(file, cookie);"
      },
      {
        "sha": "647bf6e214df18abb227e2d824b6b3bb9373a346",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -70,7 +70,7 @@ fs::path BasicTestingSetup::SetDataDir(const std::string& name)\n {\n     fs::path ret = m_path_root / name;\n     fs::create_directories(ret);\n-    gArgs.ForceSetArg(\"-datadir\", ret.string());\n+    gArgs.ForceSetArg(\"-datadir\", ret.u8string());\n     return ret;\n }\n "
      },
      {
        "sha": "8ab4e825205aa56830c4cb7071a4f3e62beda075",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -467,7 +467,7 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n+        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().u8string());\n         private_key = pkf.second;\n     }\n }\n@@ -505,9 +505,9 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().u8string());\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().u8string());\n         }\n         AddLocal(service, LOCAL_MANUAL);\n         // ... onion requested - keep connection open"
      },
      {
        "sha": "fd5e034f615b6f6b8d10833db616ae9fcdcf129d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -155,7 +155,7 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     fs::path pathLockFile = directory / lockfile_name;\n \n     // If a lock for this directory already exists in the map, don't try to re-lock it\n-    if (dir_locks.count(pathLockFile.string())) {\n+    if (dir_locks.count(pathLockFile.u8string())) {\n         return true;\n     }\n \n@@ -170,10 +170,10 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n         }\n         if (!probe_only) {\n             // Lock successful and we're not just probing, put it into the map\n-            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n+            dir_locks.emplace(pathLockFile.u8string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n-        return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n+        return error(\"Error while attempting to lock directory %s: %s\", directory.u8string(), e.what());\n     }\n     return true;\n }\n@@ -992,7 +992,7 @@ bool RenameOver(fs::path src, fs::path dest)\n     return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n                        MOVEFILE_REPLACE_EXISTING) != 0;\n #else\n-    int rc = std::rename(src.string().c_str(), dest.string().c_str());\n+    int rc = std::rename(src.u8string().c_str(), dest.u8string().c_str());\n     return (rc == 0);\n #endif /* WIN32 */\n }"
      },
      {
        "sha": "8b50eef581cacc3be76bdec718e2e9c187ae5211",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -3790,12 +3790,12 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n     if (!file && !fReadOnly)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        LogPrintf(\"Unable to open file %s\\n\", path.u8string());\n         return nullptr;\n     }\n     if (pos.nPos) {\n         if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.u8string());\n             fclose(file);\n             return nullptr;\n         }"
      },
      {
        "sha": "0e049dec98775126d3d4e3f380764f24aa2050cf",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -64,7 +64,7 @@ BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& data\n         // existing file, treat it as the path to a BDB data file in a parent\n         // directory that also contains BDB log files.\n         env_directory = wallet_path.parent_path();\n-        database_filename = wallet_path.filename().string();\n+        database_filename = wallet_path.filename().u8string();\n     } else {\n         // Normal case: Interpret wallet path as a directory path containing\n         // data and log files.\n@@ -76,7 +76,7 @@ BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& data\n     // emplace function if the key already exists. This is a little inefficient,\n     // but not a big concern since the map will be changed in the future to hold\n     // pointers instead of objects, anyway.\n-    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.u8string()), std::forward_as_tuple(env_directory)).first->second;\n }\n \n //\n@@ -114,7 +114,7 @@ void BerkeleyEnvironment::Reset()\n     fMockDb = false;\n }\n \n-BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.string())\n+BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.u8string())\n {\n     Reset();\n }\n@@ -141,7 +141,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n     fs::path pathErrorFile = pathIn / \"db.log\";\n-    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.u8string(), pathErrorFile.u8string());\n \n     unsigned int nEnvFlags = 0;\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n@@ -179,7 +179,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n             fs::path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n             try {\n                 fs::rename(pathLogDir, pathDatabaseBak);\n-                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.string(), pathDatabaseBak.string());\n+                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.u8string(), pathDatabaseBak.u8string());\n             } catch (const fs::filesystem_error&) {\n                 // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n@@ -328,7 +328,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n-        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.string());\n+        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.u8string());\n         return false;\n     }\n \n@@ -775,15 +775,15 @@ bool BerkeleyDatabase::Backup(const std::string& strDest)\n \n                 try {\n                     if (fs::equivalent(pathSrc, pathDest)) {\n-                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.u8string());\n                         return false;\n                     }\n \n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n-                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n+                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.u8string());\n                     return true;\n                 } catch (const fs::filesystem_error& e) {\n-                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.string(), e.what());\n+                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.u8string(), e.what());\n                     return false;\n                 }\n             }"
      },
      {
        "sha": "35c7ea3ab9e6ac8783f6e1e6ba682931f1cdbfdc",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -180,15 +180,15 @@ bool WalletInit::Verify() const\n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n         if (!fs::exists(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.u8string()));\n         } else if (!fs::is_directory(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.u8string()));\n         } else if (!wallet_dir.is_absolute()) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.u8string()));\n         }\n     }\n \n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().u8string());\n \n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n "
      },
      {
        "sha": "60c8f5f510c5e2610fa20e462d085fbff80344fd",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -728,7 +728,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n      * It may also avoid other security issues.\n      */\n     if (boost::filesystem::exists(filepath)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.u8string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n     }\n \n     std::ofstream file;\n@@ -814,7 +814,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.pushKV(\"filename\", filepath.string());\n+    reply.pushKV(\"filename\", filepath.u8string());\n \n     return reply;\n }"
      },
      {
        "sha": "6bb6929b5c0bcb4d589130c130fbc8500f6bae30",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93dd077609532cc16e47864c1993224112f0d44f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=93dd077609532cc16e47864c1993224112f0d44f",
        "patch": "@@ -130,7 +130,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     LOCK(cs_main);\n \n-    std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").string();\n+    std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").u8string();\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {"
      }
    ]
  },
  {
    "sha": "d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODgwY2EwY2EyYTkyNzgyYzA0MmU5YjJjYjI4N2Q2MGM5ZDA5Y2Zk",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-06-11T04:46:18Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:29:01Z"
      },
      "message": "Use u8path at proper place",
      "tree": {
        "sha": "922b09f537e08eaf7fb34ac99b65bcacf490bf9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/922b09f537e08eaf7fb34ac99b65bcacf490bf9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93dd077609532cc16e47864c1993224112f0d44f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93dd077609532cc16e47864c1993224112f0d44f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93dd077609532cc16e47864c1993224112f0d44f"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "678555c765950aecfe2582e29e7c3102cbf71ceb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -825,7 +825,7 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n void InitLogging()\n {\n     g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    g_logger->m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    g_logger->m_file_path = AbsPathForConfigVal(fs::u8path(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n \n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n@@ -1248,7 +1248,7 @@ bool AppInitMain()\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n-    if (gArgs.IsArgSet(\"-datadir\") && !fs::path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n+    if (gArgs.IsArgSet(\"-datadir\") && !fs::u8path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n         LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \" /* Continued */\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n@@ -1655,7 +1655,7 @@ bool AppInitMain()\n \n     std::vector<fs::path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n-        vImportFiles.push_back(strFile);\n+        vImportFiles.push_back(fs::u8path(strFile));\n     }\n \n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));"
      },
      {
        "sha": "6e4b5e2c3ae2e216df503dabe17ca83e78b7af32",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -613,9 +613,9 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n fs::path static GetAutostartDir()\n {\n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n-    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n+    if (pszConfigHome) return fs::u8path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");\n-    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n+    if (pszHome) return fs::u8path(pszHome) / \".config\" / \"autostart\";\n     return fs::path();\n }\n "
      },
      {
        "sha": "07da9d02bb2465951fb45008cbc1385e88eb4454",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -72,7 +72,7 @@ static fs::path GetAuthCookieFile(bool temp=false)\n     if (temp) {\n         arg += \".tmp\";\n     }\n-    return AbsPathForConfigVal(fs::path(arg));\n+    return AbsPathForConfigVal(fs::u8path(arg));\n }\n \n bool GenerateAuthCookie(std::string *cookie_out)"
      },
      {
        "sha": "6b947d277308c36684c3094bbe778c6ea091c9ca",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -728,9 +728,9 @@ fs::path GetDefaultDataDir()\n     fs::path pathRet;\n     char* pszHome = getenv(\"HOME\");\n     if (pszHome == nullptr || strlen(pszHome) == 0)\n-        pathRet = fs::path(\"/\");\n+        pathRet = fs::u8path(\"/\");\n     else\n-        pathRet = fs::path(pszHome);\n+        pathRet = fs::u8path(pszHome);\n #ifdef MAC_OSX\n     // Mac\n     return pathRet / \"Library/Application Support/Bitcoin\";\n@@ -760,7 +760,7 @@ const fs::path &GetBlocksDir(bool fNetSpecific)\n         return path;\n \n     if (gArgs.IsArgSet(\"-blocksdir\")) {\n-        path = fs::system_complete(gArgs.GetArg(\"-blocksdir\", \"\"));\n+        path = fs::system_complete(fs::u8path(gArgs.GetArg(\"-blocksdir\", \"\")));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -789,7 +789,7 @@ const fs::path &GetDataDir(bool fNetSpecific)\n         return path;\n \n     if (gArgs.IsArgSet(\"-datadir\")) {\n-        path = fs::system_complete(gArgs.GetArg(\"-datadir\", \"\"));\n+        path = fs::system_complete(fs::u8path(gArgs.GetArg(\"-datadir\", \"\")));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -820,7 +820,7 @@ void ClearDatadirCache()\n \n fs::path GetConfigFile(const std::string& confPath)\n {\n-    return AbsPathForConfigVal(fs::path(confPath), false);\n+    return AbsPathForConfigVal(fs::u8path(confPath), false);\n }\n \n static std::string TrimString(const std::string& str, const std::string& pattern)\n@@ -972,7 +972,7 @@ std::string ArgsManager::GetChainName() const\n #ifndef WIN32\n fs::path GetPidFile()\n {\n-    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+    return AbsPathForConfigVal(fs::u8path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n void CreatePidFile(const fs::path &path, pid_t pid)\n@@ -1135,11 +1135,11 @@ fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n \n     if(SHGetSpecialFolderPathA(nullptr, pszPath, nFolder, fCreate))\n     {\n-        return fs::path(pszPath);\n+        return fs::u8path(pszPath);\n     }\n \n     LogPrintf(\"SHGetSpecialFolderPathA() failed, could not obtain requested path.\\n\");\n-    return fs::path(\"\");\n+    return fs::u8path(\"\");\n }\n #endif\n "
      },
      {
        "sha": "ca018c43375d567511feae863a341b49823a0fa2",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -104,7 +104,7 @@ void BerkeleyEnvironment::Close()\n     if (ret != 0)\n         LogPrintf(\"BerkeleyEnvironment::Close: Error %d closing database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n-        DbEnv((u_int32_t)0).remove(strPath.c_str(), 0);\n+        DbEnv((u_int32_t)0).remove(fs::u8path(strPath).string().c_str(), 0);\n }\n \n void BerkeleyEnvironment::Reset()\n@@ -131,7 +131,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n \n     boost::this_thread::interruption_point();\n \n-    fs::path pathIn = strPath;\n+    fs::path pathIn = fs::u8path(strPath);\n     TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n@@ -157,7 +157,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv->open(strPath.c_str(),\n+    int ret = dbenv->open(fs::u8path(strPath).string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -236,14 +236,14 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n+    int result = db.verify(fs::u8path(strFile).string().c_str(), nullptr, nullptr, 0);\n     if (result == 0)\n         return VerifyResult::VERIFY_OK;\n     else if (recoverFunc == nullptr)\n         return VerifyResult::RECOVER_FAIL;\n \n     // Try to recover:\n-    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n+    bool fRecovered = (*recoverFunc)(fs::u8path(strPath) / fs::u8path(strFile), out_backup_filename);\n     return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n }\n \n@@ -262,8 +262,8 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     int64_t now = GetTime();\n     newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n-                                       newFilename.c_str(), DB_AUTO_COMMIT);\n+    int result = env->dbenv->dbrename(nullptr, fs::u8path(filename).string().c_str(), nullptr,\n+                                       fs::u8path(newFilename).string().c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n     else\n@@ -283,7 +283,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n \n     std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                            filename.c_str(),   // Filename\n+                            fs::u8path(filename).string().c_str(),   // Filename\n                             \"main\",             // Logical db name\n                             DB_BTREE,           // Database type\n                             DB_CREATE,          // Flags\n@@ -346,7 +346,7 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& w\n     BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n-    if (fs::exists(walletDir / walletFile))\n+    if (fs::exists(walletDir / fs::u8path(walletFile)))\n     {\n         std::string backup_filename;\n         BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n@@ -385,7 +385,7 @@ bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive,\n     std::stringstream strDump;\n \n     Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n+    int result = db.verify(fs::u8path(strFile).string().c_str(), nullptr, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n@@ -439,7 +439,7 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n     dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv->lsn_reset(strFile.c_str(), 0);\n+    dbenv->lsn_reset(fs::u8path(strFile).string().c_str(), 0);\n }\n \n \n@@ -478,8 +478,8 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             }\n \n             ret = pdb_temp->open(nullptr,                             // Txn pointer\n-                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n-                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            fMockDb ? nullptr : fs::u8path(strFilename).string().c_str(),  // Filename\n+                            fMockDb ? fs::u8path(strFilename).string().c_str() : \"main\",   // Logical db name\n                             DB_BTREE,                                 // Database type\n                             nFlags,                                   // Flags\n                             0);\n@@ -596,7 +596,7 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                     std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                                            strFileRes.c_str(), // Filename\n+                                            fs::u8path(strFileRes).string().c_str(), // Filename\n                                             \"main\",             // Logical db name\n                                             DB_BTREE,           // Database type\n                                             DB_CREATE,          // Flags\n@@ -645,10 +645,10 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                 }\n                 if (fSuccess) {\n                     Db dbA(env->dbenv.get(), 0);\n-                    if (dbA.remove(strFile.c_str(), nullptr, 0))\n+                    if (dbA.remove(fs::u8path(strFile).string().c_str(), nullptr, 0))\n                         fSuccess = false;\n                     Db dbB(env->dbenv.get(), 0);\n-                    if (dbB.rename(strFileRes.c_str(), nullptr, strFile.c_str(), 0))\n+                    if (dbB.rename(fs::u8path(strFileRes).string().c_str(), nullptr, fs::u8path(strFile).string().c_str(), 0))\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n@@ -682,7 +682,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv->lsn_reset(strFile.c_str(), 0);\n+                    dbenv->lsn_reset(fs::u8path(strFile).string().c_str(), 0);\n                 LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n@@ -695,7 +695,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n-                    fs::remove_all(fs::path(strPath) / \"database\");\n+                    fs::remove_all(fs::u8path(strPath) / \"database\");\n                 }\n                 g_dbenvs.erase(strPath);\n             }\n@@ -768,10 +768,10 @@ bool BerkeleyDatabase::Backup(const std::string& strDest)\n                 env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n-                fs::path pathSrc = GetWalletDir() / strFile;\n-                fs::path pathDest(strDest);\n+                fs::path pathSrc = GetWalletDir() / fs::u8path(strFile);\n+                fs::path pathDest = fs::u8path(strDest);\n                 if (fs::is_directory(pathDest))\n-                    pathDest /= strFile;\n+                    pathDest /= fs::u8path(strFile);\n \n                 try {\n                     if (fs::equivalent(pathSrc, pathDest)) {"
      },
      {
        "sha": "76e7a7dda57e8c11d4ed344f1d214e8c742c47ed",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -178,7 +178,7 @@ bool WalletInit::Verify() const\n     }\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n-        fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n+        fs::path wallet_dir = fs::u8path(gArgs.GetArg(\"-walletdir\", \"\"));\n         if (!fs::exists(wallet_dir)) {\n             return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.u8string()));\n         } else if (!fs::is_directory(wallet_dir)) {\n@@ -228,7 +228,7 @@ bool WalletInit::Open() const\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(fs::u8path(walletFile), GetWalletDir()));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "c376f12c4797bae2467fe5eb8fe7b2e611e7d8d9",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -719,7 +719,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    boost::filesystem::path filepath = request.params[0].get_str();\n+    boost::filesystem::path filepath = fs::u8path(request.params[0].get_str());\n     filepath = boost::filesystem::absolute(filepath);\n \n     /* Prevent arbitrary files from being overwritten. There have been reports"
      },
      {
        "sha": "aa93022c3190e7cb37d005dcd47b1ae92946e40b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -3109,7 +3109,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n     std::string wallet_file = request.params[0].get_str();\n     std::string error;\n \n-    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+    fs::path wallet_path = fs::absolute(fs::u8path(wallet_file), GetWalletDir());\n     if (fs::symlink_status(wallet_path).type() == fs::file_not_found) {\n         throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + wallet_file + \" not found.\");\n     } else if (fs::is_directory(wallet_path)) {\n@@ -3125,7 +3125,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(fs::u8path(wallet_file), GetWalletDir()));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n     }\n@@ -3168,7 +3168,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         disable_privatekeys = request.params[1].get_bool();\n     }\n \n-    fs::path wallet_path = fs::absolute(wallet_name, GetWalletDir());\n+    fs::path wallet_path = fs::absolute(fs::u8path(wallet_name), GetWalletDir());\n     if (fs::symlink_status(wallet_path).type() != fs::file_not_found) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + wallet_name + \" already exists.\");\n     }\n@@ -3178,7 +3178,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(wallet_name, GetWalletDir()), (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(fs::u8path(wallet_name), GetWalletDir()), (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }"
      },
      {
        "sha": "729758ed80bec41ec59980728f98f25b719b3939",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -3962,11 +3962,11 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n     LOCK(cs_wallets);\n-    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+    fs::path wallet_path = fs::absolute(fs::u8path(wallet_file), GetWalletDir());\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::path(wallet_file).filename() == wallet_file))) {\n+          (path_type == fs::regular_file && fs::u8path(wallet_file).filename() == wallet_file))) {\n         error_string = strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n@@ -3977,7 +3977,7 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     for (auto wallet : GetWallets()) {\n-        if (fs::absolute(wallet->GetName(), GetWalletDir()) == wallet_path) {\n+        if (fs::absolute(fs::u8path(wallet->GetName()), GetWalletDir()) == wallet_path) {\n             error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", wallet_file);\n             return false;\n         }"
      },
      {
        "sha": "236499e084a2e53b443936e740b42bfbcdb599b2",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "patch": "@@ -9,7 +9,7 @@ fs::path GetWalletDir()\n     fs::path path;\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n-        path = gArgs.GetArg(\"-walletdir\", \"\");\n+        path = fs::u8path(gArgs.GetArg(\"-walletdir\", \"\"));\n         if (!fs::is_directory(path)) {\n             // If the path specified doesn't exist, we return the deliberately\n             // invalid empty string."
      }
    ]
  },
  {
    "sha": "e06465a801c42ea0e0e7e20a52cc167a42fdc058",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDY0NjVhODAxYzQyZWEwZTBlN2UyMGE1MmNjMTY3YTQyZmRjMDU4",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-06-11T05:24:53Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:29:01Z"
      },
      "message": "ui: Use u8string and u8path to convert between path and QString",
      "tree": {
        "sha": "58399822b64c8ea5c5d8fa0ac6a09a7de7d63777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58399822b64c8ea5c5d8fa0ac6a09a7de7d63777"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e06465a801c42ea0e0e7e20a52cc167a42fdc058",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06465a801c42ea0e0e7e20a52cc167a42fdc058",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e06465a801c42ea0e0e7e20a52cc167a42fdc058",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06465a801c42ea0e0e7e20a52cc167a42fdc058/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d880ca0ca2a92782c042e9b2cb287d60c9d09cfd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b3efc95c005b29579ac2942dc503050c76ab4cb0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e06465a801c42ea0e0e7e20a52cc167a42fdc058/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e06465a801c42ea0e0e7e20a52cc167a42fdc058/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e06465a801c42ea0e0e7e20a52cc167a42fdc058",
        "patch": "@@ -61,8 +61,6 @@\n #include <QFontDatabase>\n #endif\n \n-static fs::detail::utf8_codecvt_facet utf8;\n-\n namespace GUIUtil {\n \n QString dateTimeStr(const QDateTime &date)\n@@ -780,12 +778,12 @@ void setClipboard(const QString& str)\n \n fs::path qstringToBoostPath(const QString &path)\n {\n-    return fs::path(path.toStdString(), utf8);\n+    return fs::u8path(path.toStdString());\n }\n \n QString boostPathToQString(const fs::path &path)\n {\n-    return QString::fromStdString(path.string(utf8));\n+    return QString::fromStdString(path.u8string());\n }\n \n QString formatDurationStr(int secs)"
      }
    ]
  },
  {
    "sha": "97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2QxNTJmYzRjNTg2MDRmNmU5ZTUzY2I1ZmU5YWVmYzE0ZmU2YmRh",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-25T06:22:47Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:29:01Z"
      },
      "message": "Make bdb compiled in Unicode mode",
      "tree": {
        "sha": "0fe7291b09871e31841d28a8d9eed4c15649e81d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fe7291b09871e31841d28a8d9eed4c15649e81d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e06465a801c42ea0e0e7e20a52cc167a42fdc058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06465a801c42ea0e0e7e20a52cc167a42fdc058",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e06465a801c42ea0e0e7e20a52cc167a42fdc058"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3cd2e28858ed802f5c46b6df03832add39fe657a",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
        "patch": "@@ -10,6 +10,7 @@ $(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n $(package)_cxxflags=-std=c++11\n+$(package)_cppflags_mingw32=-DUNICODE -D_UNICODE\n endef\n \n define $(package)_preprocess_cmds"
      }
    ]
  },
  {
    "sha": "bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2NmYzVkYjQwOTYzZWE4N2U0NmFkYjk0Y2ZjMWI1ZDczZTM1ZGZi",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-25T06:32:16Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:29:01Z"
      },
      "message": "Pass utf-8 encoded string to bdb api",
      "tree": {
        "sha": "21841720023d7e29a10c98d3cfc48637cbd5970e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21841720023d7e29a10c98d3cfc48637cbd5970e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97d152fc4c58604f6e9e53cb5fe9aefc14fe6bda"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a01cc4b1ba3ffa96526e5e4ff108da9c4eed68b1",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
        "patch": "@@ -104,7 +104,7 @@ void BerkeleyEnvironment::Close()\n     if (ret != 0)\n         LogPrintf(\"BerkeleyEnvironment::Close: Error %d closing database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n-        DbEnv((u_int32_t)0).remove(fs::u8path(strPath).string().c_str(), 0);\n+        DbEnv((u_int32_t)0).remove(fs::u8path(strPath).u8string().c_str(), 0);\n }\n \n void BerkeleyEnvironment::Reset()\n@@ -147,7 +147,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_lg_dir(pathLogDir.u8string().c_str());\n     dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n     dbenv->set_lg_bsize(0x10000);\n     dbenv->set_lg_max(1048576);\n@@ -157,7 +157,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv->open(fs::u8path(strPath).string().c_str(),\n+    int ret = dbenv->open(fs::u8path(strPath).u8string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -236,7 +236,7 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     Db db(dbenv.get(), 0);\n-    int result = db.verify(fs::u8path(strFile).string().c_str(), nullptr, nullptr, 0);\n+    int result = db.verify(fs::u8path(strFile).u8string().c_str(), nullptr, nullptr, 0);\n     if (result == 0)\n         return VerifyResult::VERIFY_OK;\n     else if (recoverFunc == nullptr)\n@@ -262,8 +262,8 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     int64_t now = GetTime();\n     newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = env->dbenv->dbrename(nullptr, fs::u8path(filename).string().c_str(), nullptr,\n-                                       fs::u8path(newFilename).string().c_str(), DB_AUTO_COMMIT);\n+    int result = env->dbenv->dbrename(nullptr, fs::u8path(filename).u8string().c_str(), nullptr,\n+                                       fs::u8path(newFilename).u8string().c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n     else\n@@ -283,7 +283,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n \n     std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                            fs::u8path(filename).string().c_str(),   // Filename\n+                            fs::u8path(filename).u8string().c_str(),   // Filename\n                             \"main\",             // Logical db name\n                             DB_BTREE,           // Database type\n                             DB_CREATE,          // Flags\n@@ -385,7 +385,7 @@ bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive,\n     std::stringstream strDump;\n \n     Db db(dbenv.get(), 0);\n-    int result = db.verify(fs::u8path(strFile).string().c_str(), nullptr, &strDump, flags);\n+    int result = db.verify(fs::u8path(strFile).u8string().c_str(), nullptr, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n@@ -439,7 +439,7 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n     dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv->lsn_reset(fs::u8path(strFile).string().c_str(), 0);\n+    dbenv->lsn_reset(fs::u8path(strFile).u8string().c_str(), 0);\n }\n \n \n@@ -478,8 +478,8 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             }\n \n             ret = pdb_temp->open(nullptr,                             // Txn pointer\n-                            fMockDb ? nullptr : fs::u8path(strFilename).string().c_str(),  // Filename\n-                            fMockDb ? fs::u8path(strFilename).string().c_str() : \"main\",   // Logical db name\n+                            fMockDb ? nullptr : fs::u8path(strFilename).u8string().c_str(),  // Filename\n+                            fMockDb ? fs::u8path(strFilename).u8string().c_str() : \"main\",   // Logical db name\n                             DB_BTREE,                                 // Database type\n                             nFlags,                                   // Flags\n                             0);\n@@ -596,7 +596,7 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                     std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                                            fs::u8path(strFileRes).string().c_str(), // Filename\n+                                            fs::u8path(strFileRes).u8string().c_str(), // Filename\n                                             \"main\",             // Logical db name\n                                             DB_BTREE,           // Database type\n                                             DB_CREATE,          // Flags\n@@ -645,10 +645,10 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                 }\n                 if (fSuccess) {\n                     Db dbA(env->dbenv.get(), 0);\n-                    if (dbA.remove(fs::u8path(strFile).string().c_str(), nullptr, 0))\n+                    if (dbA.remove(fs::u8path(strFile).u8string().c_str(), nullptr, 0))\n                         fSuccess = false;\n                     Db dbB(env->dbenv.get(), 0);\n-                    if (dbB.rename(fs::u8path(strFileRes).string().c_str(), nullptr, fs::u8path(strFile).string().c_str(), 0))\n+                    if (dbB.rename(fs::u8path(strFileRes).u8string().c_str(), nullptr, fs::u8path(strFile).u8string().c_str(), 0))\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n@@ -682,7 +682,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv->lsn_reset(fs::u8path(strFile).string().c_str(), 0);\n+                    dbenv->lsn_reset(fs::u8path(strFile).u8string().c_str(), 0);\n                 LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else"
      }
    ]
  },
  {
    "sha": "5ca74904c7a9587a1ce5e1b9f68b678122f98f3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2E3NDkwNGM3YTk1ODdhMWNlNWUxYjlmNjhiNjc4MTIyZjk4ZjNm",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-25T09:33:22Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-26T02:29:01Z"
      },
      "message": "Make FileLock support utf8 for Windows",
      "tree": {
        "sha": "b1bda8acf542b6c6c398bb7271b6333d066d4a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1bda8acf542b6c6c398bb7271b6333d066d4a72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ca74904c7a9587a1ce5e1b9f68b678122f98f3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca74904c7a9587a1ce5e1b9f68b678122f98f3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ca74904c7a9587a1ce5e1b9f68b678122f98f3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca74904c7a9587a1ce5e1b9f68b678122f98f3f/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bccfc5db40963ea87e46adb94cfc1b5d73e35dfb"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb890ef1835fc506c6647dd9daca90d1fddb5735",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca74904c7a9587a1ce5e1b9f68b678122f98f3f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca74904c7a9587a1ce5e1b9f68b678122f98f3f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=5ca74904c7a9587a1ce5e1b9f68b678122f98f3f",
        "patch": "@@ -140,12 +140,39 @@ class CInit\n }\n instance_of_cinit;\n \n+#ifdef WIN32\n+class WinFileLock {\n+public:\n+    HANDLE hLockFile;\n+    WinFileLock(const fs::path& file) {\n+        hLockFile = CreateFileW(file.wstring().c_str(), GENERIC_READ | GENERIC_WRITE, 0, nullptr, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);\n+    }\n+    try_lock() {\n+        if (hLockFile == INVALID_HANDLE_VALUE) {\n+            return false;\n+        }\n+        _OVERLAPPED overlapped = {0};\n+        return LockFileEx(hLockFile, LOCKFILE_EXCLUSIVE_LOCK | LOCKFILE_FAIL_IMMEDIATELY, 0, 0, 0, &overlapped);\n+    }\n+    ~WinFileLock() {\n+        if (hLockFile != INVALID_HANDLE_VALUE) {\n+            UnlockFile(hLockFile, 0, 0, 0, 0);\n+            CloseHandle(hLockFile);\n+        }\n+    }\n+};\n+#endif\n+\n /** A map that contains all the currently held directory locks. After\n  * successful locking, these will be held here until the global destructor\n  * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n  * is called.\n  */\n+#ifndef WIN32\n static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+#else\n+static std::map<std::string, std::unique_ptr<WinFileLock>> dir_locks;\n+#endif\n /** Mutex to protect dir_locks. */\n static std::mutex cs_dir_locks;\n \n@@ -162,9 +189,12 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     // Create empty lock file if it doesn't exist.\n     FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n-\n     try {\n+#ifndef WIN32\n         auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+#else\n+        auto lock = MakeUnique<WinFileLock>(pathLockFile);\n+#endif\n         if (!lock->try_lock()) {\n             return false;\n         }"
      }
    ]
  }
]