[
  {
    "sha": "5864e9c1611e6034a8d49b78231abe6bfade686d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODY0ZTljMTYxMWU2MDM0YThkNDliNzgyMzFhYmU2YmZhZGU2ODZk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:29:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-05T13:48:46Z"
      },
      "message": "[tests] remove direct testing on JSONRPCException from individual test cases",
      "tree": {
        "sha": "e8cec4a64d53873002d7ab327e2cd026802bc49e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8cec4a64d53873002d7ab327e2cd026802bc49e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5864e9c1611e6034a8d49b78231abe6bfade686d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5864e9c1611e6034a8d49b78231abe6bfade686d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5864e9c1611e6034a8d49b78231abe6bfade686d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5864e9c1611e6034a8d49b78231abe6bfade686d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93fff1463ae906fc986bf98c3b118c82f171546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93fff1463ae906fc986bf98c3b118c82f171546",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93fff1463ae906fc986bf98c3b118c82f171546"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "aece60bc3dbaeefc8e7810ca6e76a7bce55f4290",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -19,9 +19,8 @@\n happened previously.\n \"\"\"\n \n-from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_jsonrpc, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -35,21 +34,26 @@\n class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n+    def try_rpc(self, func, *args, **kwargs):\n+        if self.expect_disabled:\n+            assert_raises_jsonrpc(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+        else:\n+            return func(*args, **kwargs)\n+\n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n-            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n-                                 'code': -4} if self.expect_disabled else None)\n+\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -179,13 +183,5 @@ def run_test(self):\n             else:\n                 variant.check()\n \n-\n-def try_rpc(func, *args, **kwargs):\n-    try:\n-        return func(*args, **kwargs), None\n-    except JSONRPCException as e:\n-        return None, e.error\n-\n-\n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      },
      {
        "sha": "fcc38123a965e6660cebc79ac189e58930b7d74f",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -423,11 +423,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+        assert_raises_jsonrpc(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_jsonrpc(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "3fcbaa4fa6b87279765f6437cceebf373860e8b8",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -452,11 +452,7 @@ def run_test(self):\n         for i in importlist:\n             # import all generated addresses. The wallet already has the private keys for some of these, so catch JSON RPC\n             # exceptions and continue.\n-            try:\n-                self.nodes[0].importaddress(i,\"\",False,True)\n-            except JSONRPCException as exp:\n-                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n-                assert_equal(exp.error[\"code\"], -4)\n+            try_rpc(-4, \"The wallet already contains the private key for this address or script\", self.nodes[0].importaddress, i, \"\", False, True)\n \n         self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n         self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey"
      },
      {
        "sha": "00a58e108e76c1d67aa104c80fe0b866e894b4e4",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_jsonrpc(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "44d7e04a898096b9b1dff961f89e6cab85cce665",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5864e9c1611e6034a8d49b78231abe6bfade686d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5864e9c1611e6034a8d49b78231abe6bfade686d",
        "patch": "@@ -99,6 +99,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function.\n     \"\"\"\n+    assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\n+\n+def try_rpc(code, message, fun, *args, **kwds):\n+    \"\"\"Tries to run an rpc command.\n+\n+    Test against error code and message if the rpc fails.\n+    Returns whether a JSONRPCException was raised.\"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n@@ -107,10 +114,11 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+        return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n-        raise AssertionError(\"No exception raised\")\n+        return False\n \n def assert_is_hex_string(string):\n     try:"
      }
    ]
  },
  {
    "sha": "677d893ff758b61f66203730da224bd7ef8f0b43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzdkODkzZmY3NThiNjFmNjYyMDM3MzBkYTIyNGJkN2VmOGYwYjQz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:29:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-05T13:48:46Z"
      },
      "message": "[tests] do not allow assert_raises_message to be called with JSONRPCException",
      "tree": {
        "sha": "aacb8e0e82eed17e61860ba7a62dd3a36fdf83af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aacb8e0e82eed17e61860ba7a62dd3a36fdf83af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/677d893ff758b61f66203730da224bd7ef8f0b43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677d893ff758b61f66203730da224bd7ef8f0b43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/677d893ff758b61f66203730da224bd7ef8f0b43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677d893ff758b61f66203730da224bd7ef8f0b43/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5864e9c1611e6034a8d49b78231abe6bfade686d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5864e9c1611e6034a8d49b78231abe6bfade686d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5864e9c1611e6034a8d49b78231abe6bfade686d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed35bf576eb83b9a3c6587594beca73a1b00bfb5",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/677d893ff758b61f66203730da224bd7ef8f0b43/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/677d893ff758b61f66203730da224bd7ef8f0b43/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=677d893ff758b61f66203730da224bd7ef8f0b43",
        "patch": "@@ -51,6 +51,8 @@ def assert_raises(exc, fun, *args, **kwds):\n def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n+    except JSONRPCException:\n+        raise AssertionError(\"Use assert_raises_jsonrpc() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])"
      }
    ]
  },
  {
    "sha": "47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2JhOGNmNzFlOWEzYTZmNzQ1MjQ4OGZjOWFiM2IzNTBmMGZhZTM2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:33:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-05T13:57:19Z"
      },
      "message": "scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/assert_raises_jsonrpc/assert_raises_rpc_error/g' test/functional/*py test/functional/test_framework/*py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b21f00f81ce5e933436f9418ae73f8e37f81fcd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21f00f81ce5e933436f9418ae73f8e37f81fcd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "677d893ff758b61f66203730da224bd7ef8f0b43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/677d893ff758b61f66203730da224bd7ef8f0b43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/677d893ff758b61f66203730da224bd7ef8f0b43"
      }
    ],
    "stats": {
      "total": 234,
      "additions": 117,
      "deletions": 117
    },
    "files": [
      {
        "sha": "5f8f21701f934fa558810b6a399ef8e022b92bde",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -83,7 +83,7 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n         tx2.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n@@ -180,7 +180,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n             else:\n                 # This raw transaction should be accepted\n                 self.nodes[0].sendrawtransaction(rawtx)\n@@ -227,7 +227,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n                 node.sendrawtransaction(ToHex(tx))\n@@ -280,7 +280,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n         raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n         # Test mempool-BIP68 consistency after reorg\n         #\n@@ -353,7 +353,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n         tx3.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n \n         # make a block that violates bip68; ensure that the tip updates\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      },
      {
        "sha": "d4851eea4940b365dbd45f401b39ace9ecfb8125",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -25,7 +25,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n )\n@@ -101,7 +101,7 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_jsonrpc(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n@@ -147,7 +147,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_jsonrpc(-5, \"Block not found\",\n+        assert_raises_rpc_error(-5, \"Block not found\",\n                               node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()"
      },
      {
        "sha": "008e83d5b2a7eda9f52f22d24f5a20db5723ac6a",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -133,7 +133,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n-    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -153,7 +153,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -164,7 +164,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -173,7 +173,7 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -205,15 +205,15 @@ def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -264,7 +264,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.walletlock()\n-    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n "
      },
      {
        "sha": "19fd24edb925d313bd3213dbd8ba4c3ca5aceb5a",
        "filename": "test/functional/deprecated_rpc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/deprecated_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/deprecated_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/deprecated_rpc.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_jsonrpc\n+from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n \n         self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n         self.nodes[1].estimatefee(1)"
      },
      {
        "sha": "c75ef9b9f12d562a3667ec246e601045ce9bba97",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n \n     def run_test (self):\n         # Make sure wallet is really disabled\n-        assert_raises_jsonrpc(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n@@ -28,7 +28,7 @@ def run_test (self):\n         # Checking mining to an address without a wallet. Generating to a valid address should succeed\n         # but generating to an invalid address will fail.\n         self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        assert_raises_jsonrpc(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n \n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "59655d37fbe21878e13b76f5952c533a1512197a",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     wait_until,\n )\n@@ -34,14 +34,14 @@ def run_test(self):\n \n         self.log.info(\"setban: fail to ban an already banned subnet\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_rpc_error(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n \n         self.log.info(\"setban: fail to ban an invalid subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_raises_rpc_error(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n \n         self.log.info(\"setban remove: fail to unban a non-banned subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_raises_rpc_error(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n         self.log.info(\"setban remove: successfully unban subnet\")\n@@ -81,10 +81,10 @@ def run_test(self):\n         self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         node1 = self.nodes[0].getpeerinfo()[0]['addr']\n-        assert_raises_jsonrpc(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n+        assert_raises_rpc_error(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n \n         self.log.info(\"disconnectnode: fail to disconnect when calling with junk address\")\n-        assert_raises_jsonrpc(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n+        assert_raises_rpc_error(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n \n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']"
      },
      {
        "sha": "d446f56d0e4b347d2d4aeeb98443c1a2752b9636",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -179,7 +179,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n+        assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -192,7 +192,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n+        assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -206,7 +206,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n+        assert_raises_rpc_error(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -314,7 +314,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -469,14 +469,14 @@ def run_test(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].keypoolrefill(8) #need to refill the keypool to get an internal change address\n         self.nodes[1].walletlock()\n \n-        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n+        assert_raises_rpc_error(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "6807fa66964dbfac610f74e683be4ef9b994c830",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -20,7 +20,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_raises_jsonrpc, connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_rpc_error, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -36,7 +36,7 @@ class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n \n     def try_rpc(self, func, *args, **kwargs):\n         if self.expect_disabled:\n-            assert_raises_jsonrpc(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+            assert_raises_rpc_error(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n         else:\n             return func(*args, **kwargs)\n "
      },
      {
        "sha": "c1a42870ece8434fab5e3ed5d1beef836b87daae",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -423,11 +423,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_jsonrpc(-3, 'Missing required timestamp field for key',\n+        assert_raises_rpc_error(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_jsonrpc(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_rpc_error(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "3236b35739f27d69e6df369dbdbb03b1cf6ebff6",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n+        assert_raises_rpc_error(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -97,7 +97,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n+        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "f2701c36bdcacbfd45ff30d27fd839131b1e228d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n@@ -47,7 +47,7 @@ def run_test(self):\n         nodes[0].getrawchangeaddress()\n         addr = set()\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n         addr.add(nodes[0].getnewaddress())\n@@ -58,7 +58,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         assert(len(addr) == 6)\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n         nodes[0].walletpassphrase('test', 1)\n@@ -72,7 +72,7 @@ def run_test(self):\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].generate, 1)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].generate, 1)\n \n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)"
      },
      {
        "sha": "b845c756818e4216b22f30bd4c378a29ca528169",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -167,7 +167,7 @@ def run_test(self):\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "92f66be2ff896fdf15abca822e166c3dd695feb1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         mempooldotnew1 = mempooldat1 + '.new'\n         with os.fdopen(os.open(mempooldotnew1, os.O_CREAT, 0o000), 'w'):\n             pass\n-        assert_raises_jsonrpc(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n+        assert_raises_rpc_error(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n         os.remove(mempooldotnew1)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "2803371f5b603892fc549e15284f01b98ec73883",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -50,14 +50,14 @@ def run_test(self):\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n         timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n-        assert_raises_jsonrpc(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n         # Time-locked transaction is still too immature to spend\n-        assert_raises_jsonrpc(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 49.98)"
      },
      {
        "sha": "6e8a635a765413fd3ab3ba0e38e739a6836039c9",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n \n         # coinbase at height 102 should be too immature to spend\n-        assert_raises_jsonrpc(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n+        assert_raises_rpc_error(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n \n         # mempool should have just spend_101:\n         assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])"
      },
      {
        "sha": "b3989a4c54885ab9d9763cded9c263ef4dd06f75",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -38,7 +38,7 @@ def run_test(self):\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n@@ -63,11 +63,11 @@ def run_test(self):\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n         # We can't find the block from a fully-spent tx\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_jsonrpc(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n@@ -76,7 +76,7 @@ def run_test(self):\n         # We can always get a proof if we have a -txindex\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n-        assert_raises_jsonrpc(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "9aee06864efce0bbe04f0baa45e3cfd5cc48769d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.blocktools import create_coinbase\n from test_framework.mininode import CBlock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -68,7 +68,7 @@ def run_test(self):\n         assert_template(node, block, None)\n \n         self.log.info(\"submitblock: Test block decode failure\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -77,10 +77,10 @@ def run_test(self):\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n         self.log.info(\"submitblock: Test invalid coinbase transaction\")\n-        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -107,7 +107,7 @@ def run_test(self):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n         bad_block_sn[TX_COUNT_OFFSET] += 1\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)"
      },
      {
        "sha": "6adcc1fd88289f6980c078507269f5a89e98c15e",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -9,7 +9,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -43,10 +43,10 @@ def run_test(self):\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n+        assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n-        assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n \n         # check w1 wallet balance\n         w1_info = w1.getwalletinfo()"
      },
      {
        "sha": "16e4f6adb41b48e2f2fd366c6ce61a1422a40221",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -12,7 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n )\n@@ -84,7 +84,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n         # check that a non-existent node returns an error\n-        assert_raises_jsonrpc(-24, \"Node has not been added\",\n+        assert_raises_rpc_error(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n     def _test_getpeerinfo(self):"
      },
      {
        "sha": "91c4550653826253b949775bdd04807cffa532a1",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -80,14 +80,14 @@ def run_test(self):\n         test4tx = self.create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")"
      },
      {
        "sha": "5b6429b410194d87a5c8ae76cf695d442cc3fad9",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -171,7 +171,7 @@ def run_test(self):\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n-        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip"
      },
      {
        "sha": "bb56db9b40f31758a96bc1605787cc019ec7aae2",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "0101f6118542f845fb8faa890cbbd3cef473668a",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -185,7 +185,7 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        assert_raises_rpc_error(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n         self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n@@ -232,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         self.start_node(node_number)\n         node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_rpc_error(-1, \"not in prune mode\", node.pruneblockchain, 500)\n \n         # now re-start in manual pruning mode\n         self.stop_node(node_number)\n@@ -265,14 +265,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_rpc_error(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)"
      },
      {
        "sha": "2777cb96937e77eef56c9cac229a648a731a1daf",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n         # This will raise an exception since there are missing inputs\n-        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n+        assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -188,13 +188,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n@@ -205,12 +205,12 @@ def run_test(self):\n         # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "269d57775c8af7526af0ca069067a35fa7ad4da9",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -125,17 +125,17 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n         # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -178,7 +178,7 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n@@ -239,7 +239,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n@@ -267,7 +267,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -291,7 +291,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -314,7 +314,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n@@ -331,7 +331,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n@@ -350,7 +350,7 @@ def test_new_unconfirmed_inputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n@@ -396,7 +396,7 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n@@ -423,7 +423,7 @@ def test_opt_in(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n@@ -441,7 +441,7 @@ def test_opt_in(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now create a new transaction that spends from tx1a and tx2a\n         # opt-in on one of the inputs\n@@ -493,7 +493,7 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n@@ -520,7 +520,7 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))"
      },
      {
        "sha": "d959bb4c3836466fa11e50fabc9da6f3d1cfc4d9",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test resendwallettransactions RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_jsonrpc(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)"
      },
      {
        "sha": "0e8c3fa209ee82d73336ce2abda17c59f71dd55d",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Check that with invalid rpcallowip, we are denied\n         self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n-        assert_raises_jsonrpc(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n+        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n \n if __name__ == '__main__':\n     RPCBindTest().main()"
      },
      {
        "sha": "c47212bddb14bbc33af32506358fb5bf72ecbe0c",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class NamedArgumentTest(BitcoinTestFramework):\n@@ -19,7 +19,7 @@ def run_test(self):\n         h = node.help(command='getblockchaininfo')\n         assert(h.startswith('getblockchaininfo\\n'))\n \n-        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n+        assert_raises_rpc_error(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "6ecade7cb6a4c3e3db47ead6b35f72c37b995a8a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -99,11 +99,11 @@ def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n-        assert_raises_jsonrpc(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        assert_raises_rpc_error(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n \n     def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n-        assert_raises_jsonrpc(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n+        assert_raises_rpc_error(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n         sync_blocks(self.nodes)\n \n     def run_test(self):\n@@ -465,7 +465,7 @@ def run_test(self):\n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that no witness address should be returned by unsolvable addresses\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address:\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # addwitnessaddress should return a witness addresses even if keys are not in the wallet\n         self.nodes[0].addwitnessaddress(multisig_without_privkey_address)\n@@ -548,7 +548,7 @@ def run_test(self):\n         # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress:\n             # This will raise an exception\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n         v = self.nodes[0].validateaddress(compressed_solvable_address[1])"
      },
      {
        "sha": "9a45d53cb85640e41c0542270148427294a03d4c",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises_jsonrpc(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "102c903018fedf239bae20be22451349539cf701",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -52,7 +52,7 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException:\n-        raise AssertionError(\"Use assert_raises_jsonrpc() to test RPC failures\")\n+        raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n@@ -85,7 +85,7 @@ def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException"
      },
      {
        "sha": "47de8777a655803bd89e4d316cb750ebe98aa839",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n+from test_framework.util import (assert_equal, assert_raises_rpc_error)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -106,7 +106,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) \n \n         # Overwriting should fail\n-        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      },
      {
        "sha": "db62e1e30f489b18f573b08a135ccc5d7d321f04",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -32,28 +32,28 @@ def run_test(self):\n         self.start_node(0)\n \n         # Test that the wallet is encrypted\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n \n         # Check that the timeout is right\n         time.sleep(2)\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test wrong passphrase\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n         self.nodes[0].walletlock()\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n "
      },
      {
        "sha": "9d8ae503549bb60aec7f9a2ab07fddc281fd02ba",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n         self.nodes[2].lockunspent(False, [unspent_0])\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -286,10 +286,10 @@ def run_test(self):\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         # This will raise an exception because the amount type is wrong\n-        assert_raises_jsonrpc(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n-        assert_raises_jsonrpc(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n+        assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n@@ -422,7 +422,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_jsonrpc(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))"
      },
      {
        "sha": "8cd622dc8ec3b7996140f2115f904a89e3a6639e",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     wait_until,\n )\n \n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  }
]