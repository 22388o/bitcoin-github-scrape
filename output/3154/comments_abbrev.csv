Diapolo,2013-10-26T11:11:43Z,Is it good / wise or just unneded to enable the -checkmempool with a normal node? Do we work towards enabling this as default in the future? Just want to get some insight on it :).\n,https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27144149,27144149,
jgarzik,2013-10-26T12:07:41Z,Looks mostly OK.  One issue:  the locking for the mempool lookup inside ProcessMessage() seems to have changed.\n,https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27144971,27144971,
sipa,2013-10-26T12:24:08Z,"I like the idea of moving this out, but this doesn't really encapsulate it cleanly. A suggestion to obtain that:\n- CTxMempool should just be a data structure with associated logic to remain consistent, and not contain part of the validation logic. So, CTxMempool::accept should remain in main (as a function, not a CTxMempool method).\n  - That means no forward declaration of CValidationState in tx",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27145188,27145188,
jgarzik,2013-10-26T12:24:59Z,@sipa +1\n,https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27145198,27145198,
gavinandresen,2013-10-28T01:07:43Z,@sipa : good idea.\n,https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27184461,27184461,
petertodd,2013-10-28T04:37:02Z,"@sipa Agreed.\n\nFWIW I wound up implementing a CTxMempool style thing myself when I was looking at doing a child-pays-for-parent mempool, so I think that's the right general direction to go in.\n",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27189086,27189086,
gavinandresen,2013-10-30T00:35:06Z,"Rebased and updated as per @sipa's suggestions.\n\n@jgarzik: locking has changed, but should be safer than before because there are many fewer cases of ""reach inside and LOCK(mempool.cs)"".  I'd like to make the mempool critical section private, but I think that should be done in a future refactor (we will probably need a ""give me a snapshot copy of the memory pool""; but that should wait until afte",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27356567,27356567,
sipa,2013-10-30T11:47:04Z,"ACK design and implementation. Haven't tested, and haven't checked that the moves are really move-only.\n",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27382502,27382502,
sipa,2013-11-02T14:01:31Z,"An alternative and perhaps cleaner solution to passing the LookupFromTip pointer:\n- Move CCoinsView, CCoinsViewBacked and CCoinsViewCache to core\n- Pass a CCoinsViewCache object (pcoinsTip) to CTxMempool::check (which the caller knows the corresponding lock is held for).\n- CCoinsViewMempool can then move to txmempool as well\n",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27622529,27622529,
petertodd,2013-11-03T07:09:33Z,ACK\n\nI checked that the moves were all really move-only.\n,https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27640074,27640074,
gavinandresen,2013-11-04T01:42:11Z,"Rebased, and renamed AcceptToMempool to AcceptToMemoryPool for consistency.\n\n@sipa: Moving CCoinsView/etc to core is non-trivial; CBlockIndex (at least) would have to move also. Lets save that for a future even-more-perfect refactor.\n",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27660608,27660608,
BitcoinPullTester,2013-11-04T01:50:42Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/319b11607f8592d7ef67ec82fa73545ad7430974 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3154#issuecomment-27660814,27660814,
sipa,2013-10-30T11:32:21Z,Passing this method to mempool.check() requires that you're holding cs_main. I'd feel safer documenting that :)\n,https://github.com/bitcoin/bitcoin/pull/3154#discussion_r7308226,7308226,src/main.cpp
gavinandresen,2013-10-30T22:58:36Z,"I'll add a comment about holding cs_main, and will note that when we switch to C++11 replacing it with lambda expressions will probably make sense.\n",https://github.com/bitcoin/bitcoin/pull/3154#discussion_r7329323,7329323,src/main.cpp
