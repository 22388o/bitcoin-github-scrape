[
  {
    "sha": "504e9bb9af76605caa3e7f7fe158c56eb5e82b51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDRlOWJiOWFmNzY2MDVjYWEzZTdmN2ZlMTU4YzU2ZWI1ZTgyYjUx",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-04-29T00:00:50Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-04-29T00:04:02Z"
      },
      "message": "Avoid crash on start in TestBlockValidity with gen=1.\n\nWhen the internal miner is enabled at the start of a new node, there\n is an near instant assert in TestBlockValidity because its attempting\n to mine a block before the top checkpoint.\n\nAlso avoids a data race around vNodes.",
      "tree": {
        "sha": "fcf030e0e3ce22071b2a9a8fe5c1e984e12935f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcf030e0e3ce22071b2a9a8fe5c1e984e12935f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/504e9bb9af76605caa3e7f7fe158c56eb5e82b51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504e9bb9af76605caa3e7f7fe158c56eb5e82b51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/504e9bb9af76605caa3e7f7fe158c56eb5e82b51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504e9bb9af76605caa3e7f7fe158c56eb5e82b51/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bf5d5efa60c89c0e0c353dddc2a76fe4f243808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf5d5efa60c89c0e0c353dddc2a76fe4f243808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf5d5efa60c89c0e0c353dddc2a76fe4f243808"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9060d5cc4b24b803ba5f7e4a483989a745d1200f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/504e9bb9af76605caa3e7f7fe158c56eb5e82b51/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/504e9bb9af76605caa3e7f7fe158c56eb5e82b51/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=504e9bb9af76605caa3e7f7fe158c56eb5e82b51",
        "patch": "@@ -91,6 +91,11 @@ void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams,\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n+    LOCK(cs_main);\n+    // Are we in sync enough to even try creating a block? Otherwise TestBlockValidity will fail.\n+    if (chainActive.Height() < Checkpoints::GetTotalBlocksEstimate())\n+        return NULL;\n+\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -133,7 +138,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     CAmount nFees = 0;\n \n     {\n-        LOCK2(cs_main, mempool.cs);\n+        LOCK(mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache view(pcoinsTip);\n@@ -453,8 +458,15 @@ void static BitcoinMiner(CWallet *pwallet)\n             if (chainparams.MiningRequiresPeers()) {\n                 // Busy-wait for the network to come online so we don't waste time mining\n                 // on an obsolete chain. In regtest mode we expect to fly solo.\n-                while (vNodes.empty())\n+                do {\n+                    bool fvNodesEmpty;\n+                    {\n+                        LOCK(cs_vNodes);\n+                        fvNodesEmpty = vNodes.empty();\n+                    }\n+                    if (!fvNodesEmpty && !IsInitialBlockDownload()) break;\n                     MilliSleep(1000);\n+                } while(true);\n             }\n \n             //"
      }
    ]
  }
]