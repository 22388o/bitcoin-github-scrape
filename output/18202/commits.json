[
  {
    "sha": "08fc6f6cfc3b06fd170452a766696d7b833113fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGZjNmY2Y2ZjM2IwNmZkMTcwNDUyYTc2NjY5NmQ3YjgzMzExM2Zh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-24T19:12:50Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-06-19T09:17:06Z"
      },
      "message": "[rpc] refactor: consolidate sendmany and sendtoaddress code\n\nThe only new behavior is some error codes are changed from -4 to -6.",
      "tree": {
        "sha": "b01e74a4bfc6d320fa2965944b4a71c8196ab3ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b01e74a4bfc6d320fa2965944b4a71c8196ab3ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08fc6f6cfc3b06fd170452a766696d7b833113fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl7sgpIACgkQV/+b28ww\nEAlq/xAAjRECB/EPRRQv+sI6j94QMnfvrf/6PD0cPu9xMJlHfzvpUeKPlCxg9kdK\nO5U4CAKc7pyRLGFg7IWmo1gvjo0BNvK0SwhO4uZkcvdxzLs6aKz3mH2iUrBfIiIY\nuPxah5wabyRn7hCvUmhUZL5+JOEQ1Mbdlu34Z4jdyZm7SA7kIKhzeicb6TlxrsK+\nKXZzmIKmucgOi37eTz4ajc1PINEzIbO78zX6KOSCjNMux3VxUHjdCL7DbzUq38bd\njmeC+gt/IMpFKK4UFd8mrscaeBzj86DXGDzj/uFCnLSDTfky/AD38Oeg47gb8XfD\ncwD0duuISgAGmJtUm/52hfXfKg8+8kw5zsvsyOuYk/rWHqCq/PBVvAWjSdnVzINm\nhf/LPNkJAjHGmvSIkoxGjq+312yNrtCW0GBS20klZiJj5Z9B9sT0AraxF0gGY2R5\nPjSldmkkrOxWRsMv6LjhIP8WS2d1o75NZKK52gVt7xuX/k6uS/n/XtH5aKMNn3KK\ncQZinDKShWashaq1SwdMomlgqquO+WThQ1spKMMK7DdM3wAogWEW6DAUbiNE0+HD\nmpKPUOir9zhGxOO/Fwu4w3GCzY3mJRjH3Ex38osb99xtdl4HebkKFFSJFXdxAEuL\nNXzGI0JpAz6T/OUTTegLAw3uEBVgM5VPxAcGiDCe//qPqJuAGXE=\n=wGrx\n-----END PGP SIGNATURE-----",
        "payload": "tree b01e74a4bfc6d320fa2965944b4a71c8196ab3ad\nparent 0101110f9b64fec4ee19882c4fdb5f6cd941cdfa\nauthor Sjors Provoost <sjors@sprovoost.nl> 1582571570 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1592558226 +0200\n\n[rpc] refactor: consolidate sendmany and sendtoaddress code\n\nThe only new behavior is some error codes are changed from -4 to -6.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fc6f6cfc3b06fd170452a766696d7b833113fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08fc6f6cfc3b06fd170452a766696d7b833113fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fc6f6cfc3b06fd170452a766696d7b833113fa/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0101110f9b64fec4ee19882c4fdb5f6cd941cdfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0101110f9b64fec4ee19882c4fdb5f6cd941cdfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0101110f9b64fec4ee19882c4fdb5f6cd941cdfa"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 68,
      "deletions": 81
    },
    "files": [
      {
        "sha": "f2bd870ac44ec382035d15e5605dc41c735f6710",
        "filename": "doc/release-notes-18202.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fc6f6cfc3b06fd170452a766696d7b833113fa/doc/release-notes-18202.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fc6f6cfc3b06fd170452a766696d7b833113fa/doc/release-notes-18202.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18202.md?ref=08fc6f6cfc3b06fd170452a766696d7b833113fa",
        "patch": "@@ -0,0 +1,8 @@\n+Low-level RPC Changes\n+---------------------\n+\n+- To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n+    `sendtoaddress` codes were changed from `-4` to `-6`:\n+  - Insufficient funds\n+  - Fee estimation failed\n+  - Transaction has too long of a mempool chain"
      },
      {
        "sha": "611c418a0643dbb1ffd3fdf5c4d7723845f92366",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 78,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fc6f6cfc3b06fd170452a766696d7b833113fa/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fc6f6cfc3b06fd170452a766696d7b833113fa/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=08fc6f6cfc3b06fd170452a766696d7b833113fa",
        "patch": "@@ -321,36 +321,54 @@ static UniValue setlabel(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n+    std::set<CTxDestination> destinations;\n+    int i = 0;\n+    for (const std::string& address: address_amounts.getKeys()) {\n+        CTxDestination dest = DecodeDestination(address);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + address);\n+        }\n \n-static CTransactionRef SendMoney(CWallet* const pwallet, const CTxDestination& address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n-{\n-    CAmount curBalance = pwallet->GetBalance(0, coin_control.m_avoid_address_reuse).m_mine_trusted;\n+        if (destinations.count(dest)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + address);\n+        }\n+        destinations.insert(dest);\n \n-    // Check amount\n-    if (nValue <= 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+        CScript script_pub_key = GetScriptForDestination(dest);\n+        CAmount amount = AmountFromValue(address_amounts[i++]);\n \n-    if (nValue > curBalance)\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+        bool subtract_fee = false;\n+        for (unsigned int idx = 0; idx < subtract_fee_outputs.size(); idx++) {\n+            const UniValue& addr = subtract_fee_outputs[idx];\n+            if (addr.get_str() == address) {\n+                subtract_fee = true;\n+            }\n+        }\n \n-    // Parse Bitcoin address\n-    CScript scriptPubKey = GetScriptForDestination(address);\n+        CRecipient recipient = {script_pub_key, amount, subtract_fee};\n+        recipients.push_back(recipient);\n+    }\n+}\n+\n+UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std::vector<CRecipient> &recipients, mapValue_t map_value)\n+{\n+    EnsureWalletIsUnlocked(pwallet);\n \n-    // Create and send the transaction\n+    // Shuffle recipient list\n+    std::shuffle(recipients.begin(), recipients.end(), FastRandomContext());\n+\n+    // Send\n     CAmount nFeeRequired = 0;\n-    bilingual_str error;\n-    std::vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n-    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n-    vecSend.push_back(recipient);\n+    bilingual_str error;\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, error, coin_control)) {\n-        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n-            error = strprintf(Untranslated(\"Error: This transaction requires a transaction fee of at least %s\"), FormatMoney(nFeeRequired));\n-        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n+    bool fCreated = pwallet->CreateTransaction(recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    if (!fCreated) {\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n     }\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n-    return tx;\n+    pwallet->CommitTransaction(tx, std::move(map_value), {} /* orderForm */);\n+    return tx->GetHash().GetHex();\n }\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -398,16 +416,6 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     LOCK(pwallet->cs_wallet);\n \n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-    }\n-\n-    // Amount\n-    CAmount nAmount = AmountFromValue(request.params[1]);\n-    if (nAmount <= 0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-\n     // Wallet comments\n     mapValue_t mapValue;\n     if (!request.params[2].isNull() && !request.params[2].get_str().empty())\n@@ -441,8 +449,18 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n-    return tx->GetHash().GetHex();\n+    UniValue address_amounts(UniValue::VOBJ);\n+    const std::string address = request.params[0].get_str();\n+    address_amounts.pushKV(address, request.params[1]);\n+    UniValue subtractFeeFromAmount(UniValue::VARR);\n+    if (fSubtractFeeFromAmount) {\n+        subtractFeeFromAmount.push_back(address);\n+    }\n+\n+    std::vector<CRecipient> recipients;\n+    ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n+\n+    return SendMoney(pwallet, coin_control, recipients, mapValue);\n }\n \n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n@@ -840,52 +858,10 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::set<CTxDestination> destinations;\n-    std::vector<CRecipient> vecSend;\n+    std::vector<CRecipient> recipients;\n+    ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n \n-    std::vector<std::string> keys = sendTo.getKeys();\n-    for (const std::string& name_ : keys) {\n-        CTxDestination dest = DecodeDestination(name_);\n-        if (!IsValidDestination(dest)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + name_);\n-        }\n-\n-        if (destinations.count(dest)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + name_);\n-        }\n-        destinations.insert(dest);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        CAmount nAmount = AmountFromValue(sendTo[name_]);\n-        if (nAmount <= 0)\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-\n-        bool fSubtractFeeFromAmount = false;\n-        for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n-            const UniValue& addr = subtractFeeFromAmount[idx];\n-            if (addr.get_str() == name_)\n-                fSubtractFeeFromAmount = true;\n-        }\n-\n-        CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};\n-        vecSend.push_back(recipient);\n-    }\n-\n-    EnsureWalletIsUnlocked(pwallet);\n-\n-    // Shuffle recipient list\n-    std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n-\n-    // Send\n-    CAmount nFeeRequired = 0;\n-    int nChangePosRet = -1;\n-    bilingual_str error;\n-    CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, error, coin_control);\n-    if (!fCreated)\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n-    return tx->GetHash().GetHex();\n+    return SendMoney(pwallet, coin_control, recipients, std::move(mapValue));\n }\n \n static UniValue addmultisigaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "18755f23a9fc5a9e762d3cc40e640eddeffc7846",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fc6f6cfc3b06fd170452a766696d7b833113fa/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fc6f6cfc3b06fd170452a766696d7b833113fa/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=08fc6f6cfc3b06fd170452a766696d7b833113fa",
        "patch": "@@ -119,7 +119,7 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"Invalid parameter, expected locked output\", self.nodes[2].lockunspent, True, [unspent_0])\n         self.nodes[2].lockunspent(False, [unspent_0])\n         assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -309,6 +309,9 @@ def run_test(self):\n         assert_equal(tx_obj['amount'], Decimal('-0.0001'))\n \n         # General checks for errors from incorrect inputs\n+        # This will raise an exception because the amount is negative\n+        assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"-1\")\n+\n         # This will raise an exception because the amount type is wrong\n         assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n@@ -468,7 +471,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-6, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\", 99999)))"
      },
      {
        "sha": "dbf853b35c9787d1090e0cc5a6b176884e6cc94b",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fc6f6cfc3b06fd170452a766696d7b833113fa/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fc6f6cfc3b06fd170452a766696d7b833113fa/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=08fc6f6cfc3b06fd170452a766696d7b833113fa",
        "patch": "@@ -22,7 +22,7 @@ def run_test(self):\n \n         # test sending a tx with disabled fallback fee (must fail)\n         self.restart_node(0, extra_args=[\"-fallbackfee=0\"])\n-        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n         assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n         assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendmany(\"\", {self.nodes[0].getnewaddress(): 1}))\n "
      }
    ]
  }
]