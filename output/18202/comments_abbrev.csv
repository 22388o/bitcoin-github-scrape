DrahtBot,2020-02-24 20:52:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Use shared pointers only in validation interface by bvbfan)\n\nIf you consider this pull request important, please",https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-590542670,590542670,
Sjors,2020-02-25 09:53:51,Dropped the dependency on #18115 since it was only necessary in the original PR. ,https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-590781071,590781071,
Sjors,2020-02-25 19:15:53,Rebased and snake-cased.,https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-591020548,591020548,
laanwj,2020-03-05 16:01:35,"Nice cleanup, overall!",https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-595306434,595306434,
meshcollider,2020-03-09 07:27:46,"Concept ACK, looks good",https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-596369570,596369570,
instagibbs,2020-03-09 14:43:14,need rebase,https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-596574782,596574782,
Sjors,2020-03-09 19:09:30,"Rebased, added safety `{}` and a `std::move(mapValue)`.",https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-596727691,596727691,
Sjors,2020-03-27 11:23:36,Rebased and added a helper function `ParseRecipients()` so that `SendMoney` is now a lot shorter.,https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-604948407,604948407,
instagibbs,2020-04-24 20:10:30,"reACK https://github.com/bitcoin/bitcoin/pull/18202/commits/a6e1761823c8cd11a6e9338eaedd9301c9b36756\n\neven shorter nice",https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-619217415,619217415,
Sjors,2020-05-04 10:53:56,Rebased after #16426,https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-623395259,623395259,
Sjors,2020-05-04 18:37:41,Rebased again after #18699,https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-623634387,623634387,
Sjors,2020-06-23 09:43:38,"Thanks, I'll address the above nits if this PR needs touching.",https://github.com/bitcoin/bitcoin/pull/18202#issuecomment-648032194,648032194,
instagibbs,2020-02-25 15:28:05,this string is changing yet I don't see associated test strings changing. Increase coverage?,https://github.com/bitcoin/bitcoin/pull/18202#discussion_r383951177,383951177,src/wallet/rpcwallet.cpp
instagibbs,2020-02-25 15:30:49,also good time to add braces to this conditional :),https://github.com/bitcoin/bitcoin/pull/18202#discussion_r383953020,383953020,src/wallet/rpcwallet.cpp
Sjors,2020-02-25 19:08:12,"`AmountFromValue` already checks the range, so dropping it here and adding a test with a negative value.",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r384066419,384066419,src/wallet/rpcwallet.cpp
instagibbs,2020-02-25 19:09:18,"even better :) `CreateTransaction` checks as well, heh",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r384067001,384067001,src/wallet/rpcwallet.cpp
instagibbs,2020-02-25 19:18:28,"now that I mention it, I'm a little shocked we don't have coverage on this?",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r384071771,384071771,test/functional/wallet_basic.py
Sjors,2020-02-25 19:23:07,We do for the utility function via `createrawtransaction` tests.,https://github.com/bitcoin/bitcoin/pull/18202#discussion_r384074210,384074210,test/functional/wallet_basic.py
instagibbs,2020-02-25 19:24:11,"you mean `AmountFromValue`? I meant specifically for `sendtoaddress`. Anyways, a test is a win.",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r384074794,384074794,test/functional/wallet_basic.py
laanwj,2020-03-05 15:55:04,"This (order N, so in aggregate, quadratic) lookup would be unnecessary if the loop would iterate over key,value pairs in `address_amounts`. But I don't think univalue offers this functionality?",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r388386332,388386332,src/wallet/rpcwallet.cpp
laanwj,2020-03-05 16:00:57,"Please add braces here as required by the style guidelines, or put the `subtrace_fee...` on the same line.\nI was to suggest using ranged for here but that doesn't work for univalue as there's no `begin()` and `end()`.",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r388391093,388391093,src/wallet/rpcwallet.cpp
Sjors,2020-03-09 19:06:16,"There's `getKeys()` and `getValues()` but not both. A future refactor could convert from `UniValue` to `std::map<CTxDestination, CAmount>`, but you have to loop over the `UniValue` at least once. So if it's really a performance bottleneck for big transactions, someone would need to patch UniValue to add e.g. `bool getStringDictionary(std::map<std::string,std::string>& dict)`",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r389900876,389900876,src/wallet/rpcwallet.cpp
Sjors,2020-03-09 19:06:31,Done,https://github.com/bitcoin/bitcoin/pull/18202#discussion_r389901059,389901059,src/wallet/rpcwallet.cpp
ryanofsky,2020-03-09 21:07:13,"Can also do\n\n```c++\nint i = 0;\nfor (const std::string& address: address_amounts.getKeys()) {\n    CAmount amount = AmountFromValue(address_amounts[i++]);\n    ...\n```",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r389962051,389962051,src/wallet/rpcwallet.cpp
Sjors,2020-03-10 13:26:25,"Ah, I didn't notice this operator: `const UniValue& operator[](size_t index) const;`",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r390310099,390310099,src/wallet/rpcwallet.cpp
flack,2020-03-10 18:51:30,"```suggestion\n- To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n```",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r390538283,390538283,doc/release-notes-18202.md
sipa,2020-03-27 03:34:52,Do you intend to pass coin_control by value? In the original code it's a `const CCoinControl &` which avoids a copy.,https://github.com/bitcoin/bitcoin/pull/18202#discussion_r399017045,399017045,src/wallet/rpcwallet.cpp
Sjors,2020-03-27 11:22:45,Fixed,https://github.com/bitcoin/bitcoin/pull/18202#discussion_r399196472,399196472,src/wallet/rpcwallet.cpp
fjahr,2020-06-22 19:08:14,"```suggestion\n                subtract_fee = true;\n                break;\n```",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r443768413,443768413,src/wallet/rpcwallet.cpp
jonatack,2020-06-23 07:16:47,"08fc6f6c suggestion\n```diff\n-- To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n-    `sendtoaddress` codes were changed from `-4` to `-6`:\n+- To make RPC `sendtoaddress` more consistent with `sendmany`, the following\n+  `sendtoaddress` error codes are changed from `-4` to `-6`:\n```",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r444011176,444011176,doc/release-notes-18202.md
jonatack,2020-06-23 09:27:11,"while retouching this code, could update to the current convention\n```suggestion\n        for (unsigned int idx = 0; idx < subtract_fee_outputs.size(); ++idx) {\n```",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r444088543,444088543,src/wallet/rpcwallet.cpp
jonatack,2020-06-23 09:31:34,"can use `move` for mapValue here as well?\n```suggestion\n    return SendMoney(pwallet, coin_control, recipients, std::move(mapValue));\n```\n",https://github.com/bitcoin/bitcoin/pull/18202#discussion_r444091121,444091121,src/wallet/rpcwallet.cpp
