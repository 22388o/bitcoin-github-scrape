[
  {
    "sha": "07aefe77ea65bba891ab97b8830670b832c6d777",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2FlZmU3N2VhNjViYmE4OTFhYjk3Yjg4MzA2NzBiODMyYzZkNzc3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-13T14:38:55Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-13T14:47:53Z"
      },
      "message": "revert 39b432 net: allow CSubNet of non-IP networks\n\nThe problem with #20852 is that if a host is banned that cannot be\nserialized in addrv1 format (e.g. Torv3) it is serialized as a dummy\nIPv6 (`::`) in `banlist.dat`. So, upon restart, the ban entry is\nlost (is deserialized as an invalid subnet that matches nothing).\n\nThis reverts commit 39b43298d9c54f9c18bef36f3d5934f57aefd088\nfrom https://github.com/bitcoin/bitcoin/pull/20852.",
      "tree": {
        "sha": "3adfd7a5b9944a7f539051d15373cb92e212e6a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3adfd7a5b9944a7f539051d15373cb92e212e6a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07aefe77ea65bba891ab97b8830670b832c6d777",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl//CF8ACgkQVN8G9ktV\ny7+DHCAApEAKryvQC2GKkStQvvKVQMyyZV3R6HMeNx/DDj45ppU3s5MI165rE3bM\nfq1hSUe6ai0Yo4wgRWGHANgZeJxscML8cIUmFd7qDNqg0kqT0JQefQR7PGju9xeU\n4IX2SDlXA8n8cFlOfdcGkcaVqNlj7KEJEcM9ErfE2lXsgKVYcxftH+spELT3G+2E\n+Fpq+N/7QhtRCwl0OcgMOT/feZdt26WQu9fRZ8buXAxKs7LtTZSksPTpGn6Yooy4\nZXnc0mrXUXzrq74hG6PU92kBI2KX4aao7idY61GTVVVYjyUxFTcaOcT0d0W9zwRe\n7KtG3DehaGOjK8fZUCQwznULQH+jG0CWbCx6doPDwIWep9BYtqQMLkWZwGA9GH/g\nJvA0npGkq0xzlXNGV5E4oLtaJ4yFZa267AEXaZ09rz3iefsNJNlFe6CjzkoAuUj/\nbxc6rFmjl5eZBDI2oOHnqYaOYzBzV4+UV0Ta1dp31r2ooCOdxDNqrGnErP+0wTq3\n2gMkjcdXQ2qTrCYkE6gzxBp19Mztq4fw5t5Kw6qQ5+5lDxaanjkKf4Khu6toNW5r\nC+nKe6ECZ44YXSSmEENjHC20YHz9J75NJdQ//kpBm+elghh1O1kscY1GExHdN7rQ\nCYec0G6xUkVs4wYQh/yiYVD3r3mdIWJ9ZLecSeKB9JKtO0jebyI9x60KnPLXOKXL\nOPTp9YyVjOIL1dDFCm42oCu6faz9VGpqqJ3E4EfQL1EdDXPw8MycHousNCoR+zFX\nFiZiEkF3qpCCweK15Ek9dgM/deV+jHJGeie3S/6aHtw0u3Lpxs+IDq3OyFhIg2T+\no6rb+/VMFEyd1pRSJ/LAB4hnsVK2h1GzLtmE6I6sjQwuRGWLI6RN2+GsbWtmlyGb\n9wt+LvbY9TmuqnqRuADYlZclkOtMciFgzzNfC78tLZXE+DZ53Kg+FFhWa1EU7g+o\niyKcUwr+b8ZuRpB4AcV1hVg5cwERflvFYPo4IzLeiYu4CohV6XRxcqR5vdHB8G83\n43IlrBwyLr6M45+5rI6SZqPAs4KROxrhs4utcRtvAH+4gqtog4Eetwz34io3bdK9\nK8DuR6l30j3BGoO4YBuL66OIG6o3LM5tIUf7G5oBz0XhfV12b7QQfnwqNVCvKs09\n9RED3KnGnb8t/8DJraT63vvClY1EtcvBLGaUUIBy4gMw7Z23xRSy8M8HgesnDb8U\na3lfvREnYaIYaj4LCZBz+nSZ9pgQtOVB4zmWg/JOwbcWhF5uqb0383D6YPtyx/pt\nRLUEExhd09YUMRL8TwFQ4qgzy+P/fvBdu7ic4UVbxWrzMMVlCkTslhkesce9Uu8x\nrQ9Ah8eMAroN6yJJEfqwXhqyEy4AKA==\n=HrCt\n-----END PGP SIGNATURE-----",
        "payload": "tree 3adfd7a5b9944a7f539051d15373cb92e212e6a2\nparent e7eb37128c3155f074af5f38974934ce6941b0fb\nauthor Vasil Dimov <vd@FreeBSD.org> 1610548735 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610549273 +0100\n\nrevert 39b432 net: allow CSubNet of non-IP networks\n\nThe problem with #20852 is that if a host is banned that cannot be\nserialized in addrv1 format (e.g. Torv3) it is serialized as a dummy\nIPv6 (`::`) in `banlist.dat`. So, upon restart, the ban entry is\nlost (is deserialized as an invalid subnet that matches nothing).\n\nThis reverts commit 39b43298d9c54f9c18bef36f3d5934f57aefd088\nfrom https://github.com/bitcoin/bitcoin/pull/20852.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07aefe77ea65bba891ab97b8830670b832c6d777",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07aefe77ea65bba891ab97b8830670b832c6d777",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07aefe77ea65bba891ab97b8830670b832c6d777/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7eb37128c3155f074af5f38974934ce6941b0fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7eb37128c3155f074af5f38974934ce6941b0fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7eb37128c3155f074af5f38974934ce6941b0fb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 0,
      "deletions": 16
    },
    "files": [
      {
        "sha": "523fdc9f6365363a793147fc3754a25b46ae3164",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07aefe77ea65bba891ab97b8830670b832c6d777/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07aefe77ea65bba891ab97b8830670b832c6d777/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=07aefe77ea65bba891ab97b8830670b832c6d777",
        "patch": "@@ -15,9 +15,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[],[]]\n \n-    def is_banned(self, node, addr):\n-        return any(e['address'] == addr for e in node.listbanned())\n-\n     def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n         self.connect_nodes(0, 1)\n@@ -45,18 +42,5 @@ def run_test(self):\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n \n-        self.log.info(\"Test that a non-IP address can be banned/unbanned\")\n-        node = self.nodes[1]\n-        tor_addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"\n-        ip_addr = \"1.2.3.4\"\n-        assert(not self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n-        node.setban(tor_addr, \"add\")\n-        assert(self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n-        node.setban(tor_addr, \"remove\")\n-        assert(not self.is_banned(self.nodes[1], tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n-\n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "e61023506e52ebd028d41afa4491c56c2e32b6ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjEwMjM1MDZlNTJlYmQwMjhkNDFhZmE0NDkxYzU2YzJlMzJiNmFl",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-13T14:47:11Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-13T14:49:11Z"
      },
      "message": "revert 94d335 net: allow CSubNet of non-IP networks\n\nThe problem with #20852 is that if a host is banned that cannot be\nserialized in addrv1 format (e.g. Torv3) it is serialized as a dummy\nIPv6 (`::`) in `banlist.dat`. So, upon restart, the ban entry is\nlost (is deserialized as an invalid subnet that matches nothing).\n\nThis reverts commit 94d335da7f8232bc653c9b08b0a33b517b4c98ad\nfrom https://github.com/bitcoin/bitcoin/pull/20852.",
      "tree": {
        "sha": "3acaf43ce1dbbbbf76b1015c26076331386b4935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3acaf43ce1dbbbbf76b1015c26076331386b4935"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e61023506e52ebd028d41afa4491c56c2e32b6ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl//CHYACgkQVN8G9ktV\ny7881B//WPbpbUCzP2ehChE/iK2TSVF3FjFjwoMCbIE38TGVcDvzAGyKO0dWNbqG\nzYKC925wtfDxWkgwTXf//9ZQxw/t4VKVvC0WO390+qhbpQRkWd5217vdwjWcAwHB\nzJyn6fVP+HK++mR9BH9Sjb58ujxZPTfhZrg/D4F3Ic+kKGDTeUaJymZqZxdwxth+\nS/sBy9ITLZtIaXTu1Dvu1uJsiZX8BkCxOnpTE8Mc/TksNbLFvGZorz2D8CtHa6YD\n927OpKdrVBFiTe0dZo7eCrlncBhAAYduXnZfU3hizUmJIET1d2ITvGRr2sr0GQDB\nnJD/YM8Mb8yqdQ6UmisscQzbQ0SgY9i/4NwgFGr5iaP6f2BLINuTwbWgTsyx+YfY\nA+9qN9FjO8iiSkYGJdHT9oIifIOLpKp0DGGgpuIjh1rHNH/hnJ/D6gZY2A/jsiPA\nr3sv2462KqPqgNuzWHpoB0qSv2AxirYSpZBqDS0W2ZBjgQbHFMdE4M4LjaYALQ0a\nCgiA6m94GalwiwmJQBCT69hmIYJvBuAGo7dVuAiW5t8076Z4j7gRPr5bGznS3xZS\nJpMI25k1UBKcojSHYCStNs+aFzX+lLiXdHP/6DO7JEnIiY+4QRCs8yrEstAv54mv\nf9a7Y/dnq1Uu08vyclEVnS0AaGJut3UTpXyBOj9CAu6GPzCqjsa4tStCwEhiPTVm\nXkxOnhd7nPCixINYMyeiagOy1FNpKyKJO6Pj5IsKP6MTcm7vUzUnWzOpfDmEvsVN\nYdCFrm6Ba2LrGDvW8AqItgvEeM6hYIPD15ch2H+cjBoZypfQHmK5qB8tcSpaPqGL\naxkDM0YvyPen10PIiekF9KY3Sy88i9eM3x8Bi6KeLi6irQWlpmGS27tvD1mcpkBe\nIWJhZ5ZmcIn5V1tEYt9RBXXhTXKRjA0NteD0itaid9sQdk6e/DLFJMnRV3wB8kwN\nxxyukp9yxKdDHMTx/anL9A4rLbLDa3R2UuSsyMAQhEMOxDPJTs5Iok6wiR8Jy7kH\nJuV29xZ/qeSeMgm78SNarPue3+PK5tLnD9v3tuWw4y0qDwOBaS9YC6l0eVlKfNWY\n4M1pAi1NWqFsBT6q216tAWWe6+aiMRgBpsTyQpOtvEZ/ouXAW3DpUIfsH65AHNXG\n++oyYm2BEhs/7eCtemY1UaS9qD+/X0XRX5BP3MeXQODfgY0jm+rOEFimLyaQLM+s\nvOxi9VRT1P0WKYzsbLDAFfmZFh8SHqHxKL9LDSwjqg3T/MJziKj7xTGTwBOQRRkG\nYNky1b6qMV+XT/naLSP8u/ODnxDhOGS1+YkbWZgY/vdvymnVAKCpiiZ44/OyqtvF\nQEdkQ4gbNB+97CNcSIKbqhsO4NLmtQ==\n=Ouhz\n-----END PGP SIGNATURE-----",
        "payload": "tree 3acaf43ce1dbbbbf76b1015c26076331386b4935\nparent 07aefe77ea65bba891ab97b8830670b832c6d777\nauthor Vasil Dimov <vd@FreeBSD.org> 1610549231 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610549351 +0100\n\nrevert 94d335 net: allow CSubNet of non-IP networks\n\nThe problem with #20852 is that if a host is banned that cannot be\nserialized in addrv1 format (e.g. Torv3) it is serialized as a dummy\nIPv6 (`::`) in `banlist.dat`. So, upon restart, the ban entry is\nlost (is deserialized as an invalid subnet that matches nothing).\n\nThis reverts commit 94d335da7f8232bc653c9b08b0a33b517b4c98ad\nfrom https://github.com/bitcoin/bitcoin/pull/20852.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e61023506e52ebd028d41afa4491c56c2e32b6ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e61023506e52ebd028d41afa4491c56c2e32b6ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e61023506e52ebd028d41afa4491c56c2e32b6ae/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07aefe77ea65bba891ab97b8830670b832c6d777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07aefe77ea65bba891ab97b8830670b832c6d777",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07aefe77ea65bba891ab97b8830670b832c6d777"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 19,
      "deletions": 107
    },
    "files": [
      {
        "sha": "b1f9d32d34c0d91c79d66746f44bf7e4a2f6b26f",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 67,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61023506e52ebd028d41afa4491c56c2e32b6ae/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61023506e52ebd028d41afa4491c56c2e32b6ae/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=e61023506e52ebd028d41afa4491c56c2e32b6ae",
        "patch": "@@ -1068,24 +1068,15 @@ CSubNet::CSubNet(const CNetAddr& addr, const CNetAddr& mask) : CSubNet()\n \n CSubNet::CSubNet(const CNetAddr& addr) : CSubNet()\n {\n-    switch (addr.m_net) {\n-    case NET_IPV4:\n-    case NET_IPV6:\n-        valid = true;\n-        assert(addr.m_addr.size() <= sizeof(netmask));\n-        memset(netmask, 0xFF, addr.m_addr.size());\n-        break;\n-    case NET_ONION:\n-    case NET_I2P:\n-    case NET_CJDNS:\n-        valid = true;\n-        break;\n-    case NET_INTERNAL:\n-    case NET_UNROUTABLE:\n-    case NET_MAX:\n+    valid = addr.IsIPv4() || addr.IsIPv6();\n+    if (!valid) {\n         return;\n     }\n \n+    assert(addr.m_addr.size() <= sizeof(netmask));\n+\n+    memset(netmask, 0xFF, addr.m_addr.size());\n+\n     network = addr;\n }\n \n@@ -1097,21 +1088,6 @@ bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid() || network.m_net != addr.m_net)\n         return false;\n-\n-    switch (network.m_net) {\n-    case NET_IPV4:\n-    case NET_IPV6:\n-        break;\n-    case NET_ONION:\n-    case NET_I2P:\n-    case NET_CJDNS:\n-    case NET_INTERNAL:\n-        return addr == network;\n-    case NET_UNROUTABLE:\n-    case NET_MAX:\n-        return false;\n-    }\n-\n     assert(network.m_addr.size() == addr.m_addr.size());\n     for (size_t x = 0; x < addr.m_addr.size(); ++x) {\n         if ((addr.m_addr[x] & netmask[x]) != network.m_addr[x]) {\n@@ -1123,35 +1099,18 @@ bool CSubNet::Match(const CNetAddr &addr) const\n \n std::string CSubNet::ToString() const\n {\n-    std::string suffix;\n+    assert(network.m_addr.size() <= sizeof(netmask));\n \n-    switch (network.m_net) {\n-    case NET_IPV4:\n-    case NET_IPV6: {\n-        assert(network.m_addr.size() <= sizeof(netmask));\n-\n-        uint8_t cidr = 0;\n+    uint8_t cidr = 0;\n \n-        for (size_t i = 0; i < network.m_addr.size(); ++i) {\n-            if (netmask[i] == 0x00) {\n-                break;\n-            }\n-            cidr += NetmaskBits(netmask[i]);\n+    for (size_t i = 0; i < network.m_addr.size(); ++i) {\n+        if (netmask[i] == 0x00) {\n+            break;\n         }\n-\n-        suffix = strprintf(\"/%u\", cidr);\n-        break;\n-    }\n-    case NET_ONION:\n-    case NET_I2P:\n-    case NET_CJDNS:\n-    case NET_INTERNAL:\n-    case NET_UNROUTABLE:\n-    case NET_MAX:\n-        break;\n+        cidr += NetmaskBits(netmask[i]);\n     }\n \n-    return network.ToString() + suffix;\n+    return network.ToString() + strprintf(\"/%u\", cidr);\n }\n \n bool CSubNet::IsValid() const\n@@ -1161,19 +1120,7 @@ bool CSubNet::IsValid() const\n \n bool CSubNet::SanityCheck() const\n {\n-    switch (network.m_net) {\n-    case NET_IPV4:\n-    case NET_IPV6:\n-        break;\n-    case NET_ONION:\n-    case NET_I2P:\n-    case NET_CJDNS:\n-        return true;\n-    case NET_INTERNAL:\n-    case NET_UNROUTABLE:\n-    case NET_MAX:\n-        return false;\n-    }\n+    if (!(network.IsIPv4() || network.IsIPv6())) return false;\n \n     for (size_t x = 0; x < network.m_addr.size(); ++x) {\n         if (network.m_addr[x] & ~netmask[x]) return false;"
      },
      {
        "sha": "cf878fe3748982d01fbad7e078dfc63edbbdffd2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61023506e52ebd028d41afa4491c56c2e32b6ae/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61023506e52ebd028d41afa4491c56c2e32b6ae/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=e61023506e52ebd028d41afa4491c56c2e32b6ae",
        "patch": "@@ -462,33 +462,11 @@ class CSubNet\n         bool SanityCheck() const;\n \n     public:\n-        /**\n-         * Construct an invalid subnet (empty, `Match()` always returns false).\n-         */\n         CSubNet();\n-\n-        /**\n-         * Construct from a given network start and number of bits (CIDR mask).\n-         * @param[in] addr Network start. Must be IPv4 or IPv6, otherwise an invalid subnet is\n-         * created.\n-         * @param[in] mask CIDR mask, must be in [0, 32] for IPv4 addresses and in [0, 128] for\n-         * IPv6 addresses. Otherwise an invalid subnet is created.\n-         */\n         CSubNet(const CNetAddr& addr, uint8_t mask);\n-\n-        /**\n-         * Construct from a given network start and mask.\n-         * @param[in] addr Network start. Must be IPv4 or IPv6, otherwise an invalid subnet is\n-         * created.\n-         * @param[in] mask Network mask, must be of the same type as `addr` and not contain 0-bits\n-         * followed by 1-bits. Otherwise an invalid subnet is created.\n-         */\n         CSubNet(const CNetAddr& addr, const CNetAddr& mask);\n \n-        /**\n-         * Construct a single-host subnet.\n-         * @param[in] addr The sole address to be contained in the subnet, can also be non-IPv[46].\n-         */\n+        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n         explicit CSubNet(const CNetAddr& addr);\n \n         bool Match(const CNetAddr &addr) const;"
      },
      {
        "sha": "ac4db3a5b68508adaaf6ede701d435cd6c628e9a",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 17,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61023506e52ebd028d41afa4491c56c2e32b6ae/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61023506e52ebd028d41afa4491c56c2e32b6ae/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=e61023506e52ebd028d41afa4491c56c2e32b6ae",
        "patch": "@@ -226,22 +226,8 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     // IPv4 address with IPv6 netmask or the other way around.\n     BOOST_CHECK(!CSubNet(ResolveIP(\"1.1.1.1\"), ResolveIP(\"ffff::\")).IsValid());\n     BOOST_CHECK(!CSubNet(ResolveIP(\"::1\"), ResolveIP(\"255.0.0.0\")).IsValid());\n-\n-    // Create Non-IP subnets.\n-\n-    const CNetAddr tor_addr{\n-        ResolveIP(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\")};\n-\n-    subnet = CSubNet(tor_addr);\n-    BOOST_CHECK(subnet.IsValid());\n-    BOOST_CHECK_EQUAL(subnet.ToString(), tor_addr.ToString());\n-    BOOST_CHECK(subnet.Match(tor_addr));\n-    BOOST_CHECK(\n-        !subnet.Match(ResolveIP(\"kpgvmscirrdqpekbqjsvw5teanhatztpp2gl6eee4zkowvwfxwenqaid.onion\")));\n-    BOOST_CHECK(!subnet.Match(ResolveIP(\"1.2.3.4\")));\n-\n-    BOOST_CHECK(!CSubNet(tor_addr, 200).IsValid());\n-    BOOST_CHECK(!CSubNet(tor_addr, ResolveIP(\"255.0.0.0\")).IsValid());\n+    // Can't subnet TOR (or any other non-IPv4 and non-IPv6 network).\n+    BOOST_CHECK(!CSubNet(ResolveIP(\"5wyqrzbvrdsumnok.onion\"), ResolveIP(\"255.0.0.0\")).IsValid());\n \n     subnet = ResolveSubNet(\"1.2.3.4/255.255.255.255\");\n     BOOST_CHECK_EQUAL(subnet.ToString(), \"1.2.3.4/32\");\n@@ -456,7 +442,8 @@ BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)\n     BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0example.com\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0example.com\\0\"s, ret));\n-    BOOST_CHECK(LookupSubNet(\"5wyqrzbvrdsumnok.onion\"s, ret));\n+    // We only do subnetting for IPv4 and IPv6\n+    BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0example.com\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\"s, ret));"
      }
    ]
  }
]