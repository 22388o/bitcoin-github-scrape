[
  {
    "sha": "fbf327b13868861c2877c5754caf5a9816f2603c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmYzMjdiMTM4Njg4NjFjMjg3N2M1NzU0Y2FmNWE5ODE2ZjI2MDNj",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-11-09T20:06:49Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-11-09T20:06:49Z"
      },
      "message": "Minimal code changes to allow msvc compilation.",
      "tree": {
        "sha": "c8fe180d7a8ad74859dfcf28e0f4de96eb2ab4e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8fe180d7a8ad74859dfcf28e0f4de96eb2ab4e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbf327b13868861c2877c5754caf5a9816f2603c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf327b13868861c2877c5754caf5a9816f2603c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf327b13868861c2877c5754caf5a9816f2603c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf327b13868861c2877c5754caf5a9816f2603c/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f4375f8e75f95522ad763d06da047b1b3893530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f4375f8e75f95522ad763d06da047b1b3893530",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4375f8e75f95522ad763d06da047b1b3893530"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 23,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c74a958c8b179ae074156cd4bd400ee2daaf2384",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -22,7 +22,7 @@ static void Base58Encode(benchmark::State& state)\n         }\n     };\n     while (state.KeepRunning()) {\n-        EncodeBase58(buff.begin(), buff.end());\n+        EncodeBase58(buff.data(), buff.data() + buff.size());\n     }\n }\n "
      },
      {
        "sha": "94064c9ca67c9b57736009ed151d608d1c725b0f",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -19,7 +19,7 @@ static const int MIN_CORES = 2;\n static const size_t BATCHES = 101;\n static const size_t BATCH_SIZE = 30;\n static const int PREVECTOR_SIZE = 28;\n-static const int QUEUE_BATCH_SIZE = 128;\n+static const unsigned int QUEUE_BATCH_SIZE = 128;\n static void CCheckQueueSpeed(benchmark::State& state)\n {\n     struct FakeJobNoWork {"
      },
      {
        "sha": "77c17c061c32c748ab9704133bdcbd944d3fdc18",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -146,7 +146,7 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n                 { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n@@ -248,7 +248,7 @@ class CTestNetParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n \n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n             }\n@@ -319,7 +319,7 @@ class CRegTestParams : public CChainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n             }"
      },
      {
        "sha": "09657eccba55aa4887114d3ea4303d05f62da46e",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -31,6 +31,7 @@\n #include <mswsock.h>\n #include <windows.h>\n #include <ws2tcpip.h>\n+#include <stdint.h>\n #else\n #include <sys/fcntl.h>\n #include <sys/mman.h>\n@@ -71,6 +72,15 @@ typedef unsigned int SOCKET;\n #else\n #define MAX_PATH            1024\n #endif\n+#ifdef _MSC_VER\n+#if !defined(ssize_t)\n+#ifdef _WIN64\n+typedef int64_t ssize_t;\n+#else\n+typedef int32_t ssize_t;\n+#endif\n+#endif\n+#endif\n \n #if HAVE_DECL_STRNLEN == 0\n size_t strnlen( const char *start, size_t max_len);"
      },
      {
        "sha": "82b09f5f14dc7239781a401e8b0c86f102a15d42",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -41,7 +41,7 @@ std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of\n struct IteratorComparator\n {\n     template<typename I>\n-    bool operator()(const I& a, const I& b)\n+    bool operator()(const I& a, const I& b) const\n     {\n         return &(*a) < &(*b);\n     }"
      },
      {
        "sha": "413adbd46441a5f4e885a624a9f107a7ade06939",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -128,7 +128,7 @@ class FastRandomContext {\n  * sure that the underlying OS APIs for all platforms support the number.\n  * (many cap out at 256 bytes).\n  */\n-static const ssize_t NUM_OS_RANDOM_BYTES = 32;\n+static const int NUM_OS_RANDOM_BYTES = 32;\n \n /** Get 32 bytes of system entropy. Do not use this in application code: use\n  * GetStrongRandBytes instead."
      },
      {
        "sha": "eb6e0a73a20826ba7db3cc878afbbb2266e95d20",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -7,6 +7,10 @@\n \n #include <cstring>\n \n+#if defined(_MSC_VER)\n+#include <Windows.h> // For SecureZeroMemory.\n+#endif\n+\n /* Compilers have a bad habit of removing \"superfluous\" memset calls that\n  * are trying to zero memory. For example, when memset()ing a buffer and\n  * then free()ing it, the compiler might decide that the memset is\n@@ -32,7 +36,7 @@ void memory_cleanse(void *ptr, size_t len)\n        might try to eliminate \"superfluous\" memsets. If there's an easy way to\n        detect memset_s, it would be better to use that. */\n #if defined(_MSC_VER)\n-    __asm;\n+    SecureZeroMemory(ptr, len);\n #else\n     __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n #endif"
      },
      {
        "sha": "162c597c30ef2f2080dc3ad1e8e97e0b7b2878b7",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf327b13868861c2877c5754caf5a9816f2603c/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf327b13868861c2877c5754caf5a9816f2603c/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=fbf327b13868861c2877c5754caf5a9816f2603c",
        "patch": "@@ -24,7 +24,7 @@\n // otherwise.\n BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n \n-static const int QUEUE_BATCH_SIZE = 128;\n+static const unsigned int QUEUE_BATCH_SIZE = 128;\n \n struct FakeCheck {\n     bool operator()()"
      }
    ]
  },
  {
    "sha": "e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmUzZmMzOTUxOGIzZTM0ZDA3NWYwM2ZjMDg3ZjhkMGI3ZmE5NzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T20:00:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T20:11:57Z"
      },
      "message": "Merge #11272: CKeystore/CCrypter: move relevant implementation out of the header\n\ndd9bb25 Fix code style in keystore.cpp/crypter.cpp (Jonas Schnelli)\n208fda6 CCrypter: move relevant implementation out of the header (Jonas Schnelli)\n3155fd2 CKeystore: move relevant implementation out of the header (Jonas Schnelli)\n\nPull request description:\n\nTree-SHA512: 4ce73cca5609199b74b8ff2614ee2b6af949545a1332a3a0135c6453c98665d2b0da171c1e390c9a2aec6b12b7fad931ec90084bb7c2defe243786bfc70daf60",
      "tree": {
        "sha": "e0fe5171e1e5f4ea9859c19a5dbcd31137b50179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0fe5171e1e5f4ea9859c19a5dbcd31137b50179"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaBLaNAAoJEB5K7WKYbNJdrAgH/jFVqguxglm0J65j8xmlnlT3\nDU3wjFxp4mytIe0X4mw00s8Jl3EfoN120CqY9eHRxfzTZO6VErSGc64JJPBw5NYl\nruKfbxXxgZkrLfO2VbMhb51JKF98hisodoEOU2SEkh2xbdtE6E3XudJJc6kWkAKP\nTRvsa7ZooOhWyG8sk8sXs2YZ+qB/xQHZ1g+msVlaqcNUov2/I+7gdm6uAfDqp45Y\nI6ODBR4IZraJwdnvbZOh/tFhLQNibokssKKyABWezVhRMUFWaOtQRydWH1i8BBzp\nSAubmwyd+4YLFdO1qweKCvSXZ69deMJ+ov1HSApDAMJ7FidyFFomOwZht1aK5CE=\n=KNKi\n-----END PGP SIGNATURE-----",
        "payload": "tree e0fe5171e1e5f4ea9859c19a5dbcd31137b50179\nparent 1f4375f8e75f95522ad763d06da047b1b3893530\nparent dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510257619 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510258317 +0100\n\nMerge #11272: CKeystore/CCrypter: move relevant implementation out of the header\n\ndd9bb25 Fix code style in keystore.cpp/crypter.cpp (Jonas Schnelli)\n208fda6 CCrypter: move relevant implementation out of the header (Jonas Schnelli)\n3155fd2 CKeystore: move relevant implementation out of the header (Jonas Schnelli)\n\nPull request description:\n\nTree-SHA512: 4ce73cca5609199b74b8ff2614ee2b6af949545a1332a3a0135c6453c98665d2b0da171c1e390c9a2aec6b12b7fad931ec90084bb7c2defe243786bfc70daf60\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f4375f8e75f95522ad763d06da047b1b3893530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f4375f8e75f95522ad763d06da047b1b3893530",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4375f8e75f95522ad763d06da047b1b3893530"
      },
      {
        "sha": "dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb"
      }
    ],
    "stats": {
      "total": 244,
      "additions": 117,
      "deletions": 127
    },
    "files": [
      {
        "sha": "e2ce474298bee3897f928647c769ecb75a95446e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
        "patch": "@@ -36,6 +36,33 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n     return true;\n }\n \n+bool CBasicKeyStore::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    return mapKeys.count(address) > 0;\n+}\n+\n+std::set<CKeyID> CBasicKeyStore::GetKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::set<CKeyID> set_address;\n+    for (const auto& mi : mapKeys) {\n+        set_address.insert(mi.first);\n+    }\n+    return set_address;\n+}\n+\n+bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    KeyMap::const_iterator mi = mapKeys.find(address);\n+    if (mi != mapKeys.end()) {\n+        keyOut = mi->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)"
      },
      {
        "sha": "26ddff436f94e4b35b30705d19625f3845bad69c",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 3,
        "deletions": 31,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
        "patch": "@@ -62,37 +62,9 @@ class CBasicKeyStore : public CKeyStore\n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    bool HaveKey(const CKeyID &address) const override\n-    {\n-        bool result;\n-        {\n-            LOCK(cs_KeyStore);\n-            result = (mapKeys.count(address) > 0);\n-        }\n-        return result;\n-    }\n-    std::set<CKeyID> GetKeys() const override\n-    {\n-        LOCK(cs_KeyStore);\n-        std::set<CKeyID> set_address;\n-        for (const auto& mi : mapKeys) {\n-            set_address.insert(mi.first);\n-        }\n-        return set_address;\n-    }\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const override\n-    {\n-        {\n-            LOCK(cs_KeyStore);\n-            KeyMap::const_iterator mi = mapKeys.find(address);\n-            if (mi != mapKeys.end())\n-            {\n-                keyOut = mi->second;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n+    bool HaveKey(const CKeyID &address) const override;\n+    std::set<CKeyID> GetKeys() const override;\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n     bool AddCScript(const CScript& redeemScript) override;\n     bool HaveCScript(const CScriptID &hash) const override;\n     bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;"
      },
      {
        "sha": "5b31a40fc7358e97160a75d5f6936395e1a15629",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 56,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
        "patch": "@@ -152,6 +152,15 @@ bool CCryptoKeyStore::SetCrypted()\n     return true;\n }\n \n+bool CCryptoKeyStore::IsLocked() const\n+{\n+    if (!IsCrypted()) {\n+        return false;\n+    }\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n+}\n+\n bool CCryptoKeyStore::Lock()\n {\n     if (!SetCrypted())\n@@ -206,94 +215,112 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n \n bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n+    }\n \n-        if (IsLocked())\n-            return false;\n+    if (IsLocked()) {\n+        return false;\n+    }\n \n-        std::vector<unsigned char> vchCryptedSecret;\n-        CKeyingMaterial vchSecret(key.begin(), key.end());\n-        if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret))\n-            return false;\n+    std::vector<unsigned char> vchCryptedSecret;\n+    CKeyingMaterial vchSecret(key.begin(), key.end());\n+    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+        return false;\n+    }\n \n-        if (!AddCryptedKey(pubkey, vchCryptedSecret))\n-            return false;\n+    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n+        return false;\n     }\n     return true;\n }\n \n \n bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n     }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n     return true;\n }\n \n+bool CCryptoKeyStore::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::HaveKey(address);\n+    }\n+    return mapCryptedKeys.count(address) > 0;\n+}\n+\n bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::GetKey(address, keyOut);\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::GetKey(address, keyOut);\n+    }\n \n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-        if (mi != mapCryptedKeys.end())\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n-        }\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        const CPubKey &vchPubKey = (*mi).second.first;\n+        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n     }\n     return false;\n }\n \n bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n {\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n     {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+        vchPubKeyOut = (*mi).second.first;\n+        return true;\n+    }\n+    // Check for watch-only pubkeys\n+    return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+}\n \n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-        if (mi != mapCryptedKeys.end())\n-        {\n-            vchPubKeyOut = (*mi).second.first;\n-            return true;\n-        }\n-        // Check for watch-only pubkeys\n-        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+std::set<CKeyID> CCryptoKeyStore::GetKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::GetKeys();\n     }\n+    std::set<CKeyID> set_address;\n+    for (const auto& mi : mapCryptedKeys) {\n+        set_address.insert(mi.first);\n+    }\n+    return set_address;\n }\n \n bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n {\n+    LOCK(cs_KeyStore);\n+    if (!mapCryptedKeys.empty() || IsCrypted())\n+        return false;\n+\n+    fUseCrypto = true;\n+    for (KeyMap::value_type& mKey : mapKeys)\n     {\n-        LOCK(cs_KeyStore);\n-        if (!mapCryptedKeys.empty() || IsCrypted())\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n+            return false;\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n             return false;\n-\n-        fUseCrypto = true;\n-        for (KeyMap::value_type& mKey : mapKeys)\n-        {\n-            const CKey &key = mKey.second;\n-            CPubKey vchPubKey = key.GetPubKey();\n-            CKeyingMaterial vchSecret(key.begin(), key.end());\n-            std::vector<unsigned char> vchCryptedSecret;\n-            if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n-                return false;\n-            if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n-                return false;\n-        }\n-        mapKeys.clear();\n     }\n+    mapKeys.clear();\n     return true;\n }"
      },
      {
        "sha": "67c848119600fdf77c23902bfefe437e8cb373fb",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 40,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
        "patch": "@@ -139,52 +139,16 @@ class CCryptoKeyStore : public CBasicKeyStore\n     {\n     }\n \n-    bool IsCrypted() const\n-    {\n-        return fUseCrypto;\n-    }\n-\n-    bool IsLocked() const\n-    {\n-        if (!IsCrypted())\n-            return false;\n-        bool result;\n-        {\n-            LOCK(cs_KeyStore);\n-            result = vMasterKey.empty();\n-        }\n-        return result;\n-    }\n-\n+    bool IsCrypted() const { return fUseCrypto; }\n+    bool IsLocked() const;\n     bool Lock();\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool HaveKey(const CKeyID &address) const override\n-    {\n-        {\n-            LOCK(cs_KeyStore);\n-            if (!IsCrypted()) {\n-                return CBasicKeyStore::HaveKey(address);\n-            }\n-            return mapCryptedKeys.count(address) > 0;\n-        }\n-        return false;\n-    }\n+    bool HaveKey(const CKeyID &address) const override;\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    std::set<CKeyID> GetKeys() const override\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted()) {\n-            return CBasicKeyStore::GetKeys();\n-        }\n-        std::set<CKeyID> set_address;\n-        for (const auto& mi : mapCryptedKeys) {\n-            set_address.insert(mi.first);\n-        }\n-        return set_address;\n-    }\n+    std::set<CKeyID> GetKeys() const override;\n \n     /**\n      * Wallet status (encrypted, locked) changed."
      }
    ]
  },
  {
    "sha": "23e9074e0a36f206c8719c9f9cdc28639b121b04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2U5MDc0ZTBhMzZmMjA2Yzg3MTljOWY5Y2RjMjg2MzliMTIxYjA0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T20:15:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T20:20:20Z"
      },
      "message": "Merge #10771: Remove unused variables in shell scripts\n\nab8e8b9 Remove unused variables in shell scripts. (practicalswift)\n\nPull request description:\n\n  Remove unused variables in shell scripts. Use `_` where we don't care about the result.\n\nTree-SHA512: 35049e79ee432c805f061456c32902a92811b5214d50ce6770b22d1442cc5999ed53cfe05bb2347f6995ca33c707a0f3fe92d5829c0385c4a3e254953924cbc4",
      "tree": {
        "sha": "79f778f6df0b174ee70fa5d4e338765353d0a2a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79f778f6df0b174ee70fa5d4e338765353d0a2a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23e9074e0a36f206c8719c9f9cdc28639b121b04",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaBLiEAAoJEB5K7WKYbNJdxaUH/3czknHDd2+7qAHS9zFAz5fj\nxHwH/Ml7TruqztzW9bnUd9mQqGg1YdJenKpUdrFkUMyvR+LFXD91qpff2Gw1+9ZW\nOF/o98Lq9hsbFJgkuvMp6kNEfBbO/T1xs2+RgebsITfjVW0vJ6CY1nFORHl5m5nE\nrGcWEDz7E63kgc5a1foEYR8PlIAEEboT8QlZwzxYh9nLt4KwrLEoFiQiuOIY2hB7\nJPfMOFBwB67gMUTYVAwvkylquz/VclAaGG0NgSM7J4/zJrWTFKxvmvWTnH9uaT/d\nFx3RDa19uR13W6IGhFhHw7OqqnOQtb2KsRuFPrihAYs0FA2L8s38I31gTlm25p0=\n=sGdp\n-----END PGP SIGNATURE-----",
        "payload": "tree 79f778f6df0b174ee70fa5d4e338765353d0a2a2\nparent e6e3fc39518b3e34d075f03fc087f8d0b7fa970a\nparent ab8e8b97a359e1c4f1bca8e1769021c95019f2c4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510258554 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510258820 +0100\n\nMerge #10771: Remove unused variables in shell scripts\n\nab8e8b9 Remove unused variables in shell scripts. (practicalswift)\n\nPull request description:\n\n  Remove unused variables in shell scripts. Use `_` where we don't care about the result.\n\nTree-SHA512: 35049e79ee432c805f061456c32902a92811b5214d50ce6770b22d1442cc5999ed53cfe05bb2347f6995ca33c707a0f3fe92d5829c0385c4a3e254953924cbc4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e9074e0a36f206c8719c9f9cdc28639b121b04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23e9074e0a36f206c8719c9f9cdc28639b121b04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e9074e0a36f206c8719c9f9cdc28639b121b04/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6e3fc39518b3e34d075f03fc087f8d0b7fa970a"
      },
      {
        "sha": "ab8e8b97a359e1c4f1bca8e1769021c95019f2c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab8e8b97a359e1c4f1bca8e1769021c95019f2c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab8e8b97a359e1c4f1bca8e1769021c95019f2c4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "446db59167d719a7ed843316526787b9ef1d1ba4",
        "filename": "contrib/devtools/git-subtree-check.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/devtools/git-subtree-check.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/devtools/git-subtree-check.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/git-subtree-check.sh?ref=23e9074e0a36f206c8719c9f9cdc28639b121b04",
        "patch": "@@ -18,7 +18,7 @@ find_latest_squash()\n \tsub=\n \tgit log --grep=\"^git-subtree-dir: $dir/*\\$\" \\\n \t\t--pretty=format:'START %H%n%s%n%n%b%nEND%n' \"$COMMIT\" |\n-\twhile read a b junk; do\n+\twhile read a b _; do\n \t\tcase \"$a\" in\n \t\t\tSTART) sq=\"$b\" ;;\n \t\t\tgit-subtree-mainline:) main=\"$b\" ;;\n@@ -48,7 +48,6 @@ if [ -z \"$latest_squash\" ]; then\n fi\n \n set $latest_squash\n-old=$1\n rev=$2\n if [ \"d$(git cat-file -t $rev 2>/dev/null)\" != dcommit ]; then\n     echo \"ERROR: subtree commit $rev unavailable. Fetch/update the subtree repository\" >&2"
      },
      {
        "sha": "511c1a4c481dbb7e23a0a484eac858f4176768c7",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=23e9074e0a36f206c8719c9f9cdc28639b121b04",
        "patch": "@@ -6,7 +6,6 @@\n sign=false\n verify=false\n build=false\n-setupenv=false\n \n # Systems to build\n linux=true"
      },
      {
        "sha": "a1ef715fb3f7f8b4d087b9b4916fb38f6ec1fb60",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=23e9074e0a36f206c8719c9f9cdc28639b121b04",
        "patch": "@@ -12,8 +12,6 @@ VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n VERIFIED_SHA512_ROOT=$(cat \"${DIR}/trusted-sha512-root-commit\")\n REVSIG_ALLOWED=$(cat \"${DIR}/allow-revsig-commits\")\n \n-HAVE_FAILED=false\n-\n HAVE_GNU_SHA512=1\n [ ! -x \"$(which sha512sum)\" ] && HAVE_GNU_SHA512=0\n \n@@ -95,9 +93,9 @@ while true; do\n \t\tFILE_HASHES=\"\"\n \t\tfor FILE in $(git ls-tree --full-tree -r --name-only \"$CURRENT_COMMIT\" | LC_ALL=C sort); do\n \t\t\tif [ \"$HAVE_GNU_SHA512\" = 1 ]; then\n-\t\t\t\tHASH=$(git cat-file blob \"$CURRENT_COMMIT\":\"$FILE\" | sha512sum | { read FIRST OTHER; echo $FIRST; } )\n+\t\t\t\tHASH=$(git cat-file blob \"$CURRENT_COMMIT\":\"$FILE\" | sha512sum | { read FIRST _; echo $FIRST; } )\n \t\t\telse\n-\t\t\t\tHASH=$(git cat-file blob \"$CURRENT_COMMIT\":\"$FILE\" | shasum -a 512 | { read FIRST OTHER; echo $FIRST; } )\n+\t\t\t\tHASH=$(git cat-file blob \"$CURRENT_COMMIT\":\"$FILE\" | shasum -a 512 | { read FIRST _; echo $FIRST; } )\n \t\t\tfi\n \t\t\t[ \"$FILE_HASHES\" != \"\" ] && FILE_HASHES=\"$FILE_HASHES\"'\n '"
      },
      {
        "sha": "320add64d0bebf6f34dd4fe1651aa19cd37588ca",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e9074e0a36f206c8719c9f9cdc28639b121b04/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=23e9074e0a36f206c8719c9f9cdc28639b121b04",
        "patch": "@@ -76,8 +76,6 @@ if [ -n \"$1\" ]; then\n          BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSION/\"\n       fi\n    fi\n-\n-   SIGNATUREFILE=\"$BASEDIR$SIGNATUREFILENAME\"\n else\n    echo \"Error: need to specify a version on the command line\"\n    exit 2"
      }
    ]
  },
  {
    "sha": "5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTliZTE2OWU0MzBhNjgyOGI2OWYyMmFlOWQ0N2VjYzFiMjY4NWMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T20:22:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T20:34:25Z"
      },
      "message": "Merge #11043: Use std::unique_ptr (C++11) where possible\n\na357293 Use MakeUnique<Db>(...) (practicalswift)\n3e09b39 Use MakeUnique<T>(...) instead of std::unique_ptr<T>(new T(...)) (practicalswift)\n8617989 Add MakeUnique (substitute for C++14 std::make_unique) (practicalswift)\nd223bc9 Use unique_ptr for pcoinscatcher/pcoinsdbview/pcoinsTip/pblocktree (practicalswift)\nb45c597 Use unique_ptr for pdbCopy (Db) and fix potential memory leak (practicalswift)\n29ab96d Use unique_ptr for dbenv (DbEnv) (practicalswift)\nf72cbf9 Use unique_ptr for pfilter (CBloomFilter) (practicalswift)\n8ccf1bb Use unique_ptr for sem{Addnode,Outbound} (CSemaphore) (practicalswift)\n73db063 Use unique_ptr for upnp_thread (boost::thread) (practicalswift)\n0024531 Use unique_ptr for dbw (CDBWrapper) (practicalswift)\nfa6d122 Use unique_ptr:s for {fee,short,long}Stats (TxConfirmStats) (practicalswift)\n5a6f768 Use unique_ptr for httpRPCTimerInterface (HTTPRPCTimerInterface) (practicalswift)\n860e912 Use unique_ptr for pwalletMain (CWallet) (practicalswift)\n\nPull request description:\n\n  Use `std::unique_ptr` (C++11) where possible.\n\n  Rationale:\n  1. Avoid resource leaks (specifically: forgetting to `delete` an object created using `new`)\n  2. Avoid undefined behaviour (specifically: double `delete`:s)\n\n  **Note to reviewers:** Please let me know if I've missed any obvious `std::unique_ptr` candidates. Hopefully this PR should cover all the trivial cases.\n\nTree-SHA512: 9fbeb47b800ab8ff4e0be9f2a22ab63c23d5c613a0c6716d9183db8d22ddbbce592fb8384a8b7874bf7375c8161efb13ca2197ad6f24b75967148037f0f7b20c",
      "tree": {
        "sha": "ef9fe4676d4826ae125e38b51c495e6f4ef5a48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef9fe4676d4826ae125e38b51c495e6f4ef5a48c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaBLvRAAoJEB5K7WKYbNJdS+EIANISkr1ys19PbOp3Mz7Z2Gzo\nuwpREg4NIH7dUcqmqbaOfOQ5ipzux60GnwHYEPefctZf/l1EaioyrmeVBzPpJ0gX\n0YSVvSXrUbug2lbz14AWuTKTIuAdAcv7rpXK7/8o0+G/zP5fcqHtUhxN8HMOvDcQ\n5hNzWbQKFs72Tc2QGvHtMEKCJpGGRviohhMZT9B5EdDtGlObF0fT8o96+oKVDiwB\ngJA7Ftaxr2DvwbeFDTLaFX7/YDmhbLUH8S9kREgY91muXifxkbwzavm/UbcR07em\n4Wcq5Zxq6FC7CC9VjsW1n/7XCzSTT63P7gmHLUV32AuwgSox1NqvXPiWbtIsrDE=\n=rLRp\n-----END PGP SIGNATURE-----",
        "payload": "tree ef9fe4676d4826ae125e38b51c495e6f4ef5a48c\nparent 23e9074e0a36f206c8719c9f9cdc28639b121b04\nparent a357293c871d7eb9ccaf9fff61736248319f7a63\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510258928 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510259665 +0100\n\nMerge #11043: Use std::unique_ptr (C++11) where possible\n\na357293 Use MakeUnique<Db>(...) (practicalswift)\n3e09b39 Use MakeUnique<T>(...) instead of std::unique_ptr<T>(new T(...)) (practicalswift)\n8617989 Add MakeUnique (substitute for C++14 std::make_unique) (practicalswift)\nd223bc9 Use unique_ptr for pcoinscatcher/pcoinsdbview/pcoinsTip/pblocktree (practicalswift)\nb45c597 Use unique_ptr for pdbCopy (Db) and fix potential memory leak (practicalswift)\n29ab96d Use unique_ptr for dbenv (DbEnv) (practicalswift)\nf72cbf9 Use unique_ptr for pfilter (CBloomFilter) (practicalswift)\n8ccf1bb Use unique_ptr for sem{Addnode,Outbound} (CSemaphore) (practicalswift)\n73db063 Use unique_ptr for upnp_thread (boost::thread) (practicalswift)\n0024531 Use unique_ptr for dbw (CDBWrapper) (practicalswift)\nfa6d122 Use unique_ptr:s for {fee,short,long}Stats (TxConfirmStats) (practicalswift)\n5a6f768 Use unique_ptr for httpRPCTimerInterface (HTTPRPCTimerInterface) (practicalswift)\n860e912 Use unique_ptr for pwalletMain (CWallet) (practicalswift)\n\nPull request description:\n\n  Use `std::unique_ptr` (C++11) where possible.\n\n  Rationale:\n  1. Avoid resource leaks (specifically: forgetting to `delete` an object created using `new`)\n  2. Avoid undefined behaviour (specifically: double `delete`:s)\n\n  **Note to reviewers:** Please let me know if I've missed any obvious `std::unique_ptr` candidates. Hopefully this PR should cover all the trivial cases.\n\nTree-SHA512: 9fbeb47b800ab8ff4e0be9f2a22ab63c23d5c613a0c6716d9183db8d22ddbbce592fb8384a8b7874bf7375c8161efb13ca2197ad6f24b75967148037f0f7b20c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23e9074e0a36f206c8719c9f9cdc28639b121b04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e9074e0a36f206c8719c9f9cdc28639b121b04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23e9074e0a36f206c8719c9f9cdc28639b121b04"
      },
      {
        "sha": "a357293c871d7eb9ccaf9fff61736248319f7a63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a357293c871d7eb9ccaf9fff61736248319f7a63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a357293c871d7eb9ccaf9fff61736248319f7a63"
      }
    ],
    "stats": {
      "total": 235,
      "additions": 104,
      "deletions": 131
    },
    "files": [
      {
        "sha": "dbd09595c6ed21087fb9fc9c78563d3ea8f12ec3",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -62,7 +62,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n /* Pre-base64-encoded authentication token */\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n-static HTTPRPCTimerInterface* httpRPCTimerInterface = nullptr;\n+static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -238,8 +238,8 @@ bool StartHTTPRPC()\n     RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n #endif\n     assert(EventBase());\n-    httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n-    RPCSetTimerInterface(httpRPCTimerInterface);\n+    httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(EventBase());\n+    RPCSetTimerInterface(httpRPCTimerInterface.get());\n     return true;\n }\n \n@@ -253,8 +253,7 @@ void StopHTTPRPC()\n     LogPrint(BCLog::RPC, \"Stopping HTTP RPC server\\n\");\n     UnregisterHTTPHandler(\"/\", true);\n     if (httpRPCTimerInterface) {\n-        RPCUnsetTimerInterface(httpRPCTimerInterface);\n-        delete httpRPCTimerInterface;\n-        httpRPCTimerInterface = nullptr;\n+        RPCUnsetTimerInterface(httpRPCTimerInterface.get());\n+        httpRPCTimerInterface.reset();\n     }\n }"
      },
      {
        "sha": "7ac2cf2d32a6ce63a49b2c0919623dce4295f378",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -152,7 +152,7 @@ class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n     // Writes do not need similar protection, as failure to write is handled by the caller.\n };\n \n-static CCoinsViewErrorCatcher *pcoinscatcher = nullptr;\n+static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n void Interrupt(boost::thread_group& threadGroup)\n@@ -235,14 +235,10 @@ void Shutdown()\n         if (pcoinsTip != nullptr) {\n             FlushStateToDisk();\n         }\n-        delete pcoinsTip;\n-        pcoinsTip = nullptr;\n-        delete pcoinscatcher;\n-        pcoinscatcher = nullptr;\n-        delete pcoinsdbview;\n-        pcoinsdbview = nullptr;\n-        delete pblocktree;\n-        pblocktree = nullptr;\n+        pcoinsTip.reset();\n+        pcoinscatcher.reset();\n+        pcoinsdbview.reset();\n+        pblocktree.reset();\n     }\n #ifdef ENABLE_WALLET\n     StopWallets();\n@@ -1406,12 +1402,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         do {\n             try {\n                 UnloadBlockIndex();\n-                delete pcoinsTip;\n-                delete pcoinsdbview;\n-                delete pcoinscatcher;\n-                delete pblocktree;\n-\n-                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n+                pcoinsTip.reset();\n+                pcoinsdbview.reset();\n+                pcoinscatcher.reset();\n+                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {\n                     pblocktree->WriteReindexing(true);\n@@ -1462,8 +1456,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into mapBlockIndex!\n \n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState);\n-                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n+                pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n+                pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n \n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n@@ -1473,13 +1467,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n                     strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                     break;\n                 }\n \n                 // The on-disk coinsdb is now in a good state, create the cache\n-                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n+                pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n                 bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 if (!is_coinsview_empty) {\n@@ -1521,7 +1515,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         }\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                   gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                         strLoadError = _(\"Corrupted block database detected\");\n                         break;"
      },
      {
        "sha": "0f9de81d7f9749493adc5ba980b4dfc69bcc3661",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -1534,22 +1534,20 @@ void ThreadMapPort()\n \n void MapPort(bool fUseUPnP)\n {\n-    static boost::thread* upnp_thread = nullptr;\n+    static std::unique_ptr<boost::thread> upnp_thread;\n \n     if (fUseUPnP)\n     {\n         if (upnp_thread) {\n             upnp_thread->interrupt();\n             upnp_thread->join();\n-            delete upnp_thread;\n         }\n-        upnp_thread = new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort));\n+        upnp_thread.reset(new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n     }\n     else if (upnp_thread) {\n         upnp_thread->interrupt();\n         upnp_thread->join();\n-        delete upnp_thread;\n-        upnp_thread = nullptr;\n+        upnp_thread.reset();\n     }\n }\n \n@@ -2224,8 +2222,6 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     nLastNodeId = 0;\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n-    semOutbound = nullptr;\n-    semAddnode = nullptr;\n     flagInterruptMsgProc = false;\n     SetTryNewOutboundPeer(false);\n \n@@ -2331,11 +2327,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (semOutbound == nullptr) {\n         // initialize semaphore\n-        semOutbound = new CSemaphore(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n+        semOutbound = MakeUnique<CSemaphore>(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n     }\n     if (semAddnode == nullptr) {\n         // initialize semaphore\n-        semAddnode = new CSemaphore(nMaxAddnode);\n+        semAddnode = MakeUnique<CSemaphore>(nMaxAddnode);\n     }\n \n     //\n@@ -2458,10 +2454,8 @@ void CConnman::Stop()\n     vNodes.clear();\n     vNodesDisconnected.clear();\n     vhListenSocket.clear();\n-    delete semOutbound;\n-    semOutbound = nullptr;\n-    delete semAddnode;\n-    semAddnode = nullptr;\n+    semOutbound.reset();\n+    semAddnode.reset();\n }\n \n void CConnman::DeleteNode(CNode* pnode)\n@@ -2747,7 +2741,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nNextInvSend = 0;\n     fRelayTxes = false;\n     fSentAddr = false;\n-    pfilter = new CBloomFilter();\n+    pfilter = MakeUnique<CBloomFilter>();\n     timeLastMempoolReq = 0;\n     nLastBlockTime = 0;\n     nLastTXTime = 0;\n@@ -2777,8 +2771,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n CNode::~CNode()\n {\n     CloseSocket(hSocket);\n-\n-    delete pfilter;\n }\n \n void CNode::AskFor(const CInv& inv)"
      },
      {
        "sha": "8cb00dd5a5947a61cff517341f6a0eb2a965c868",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -399,8 +399,8 @@ class CConnman\n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n \n-    CSemaphore *semOutbound;\n-    CSemaphore *semAddnode;\n+    std::unique_ptr<CSemaphore> semOutbound;\n+    std::unique_ptr<CSemaphore> semAddnode;\n     int nMaxConnections;\n     int nMaxOutbound;\n     int nMaxAddnode;\n@@ -648,7 +648,7 @@ class CNode\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n-    CBloomFilter* pfilter;\n+    std::unique_ptr<CBloomFilter> pfilter;\n     std::atomic<int> nRefCount;\n \n     const uint64_t nKeyedNetGroup;"
      },
      {
        "sha": "8e503f89db4639f1addffd52c4b6f27cdf78c3b7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -2102,7 +2102,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         if (!AlreadyHave(inv) &&\n             AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n-            mempool.check(pcoinsTip);\n+            mempool.check(pcoinsTip.get());\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 vWorkQueue.emplace_back(inv.hash, i);\n@@ -2169,7 +2169,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                             recentRejects->insert(orphanHash);\n                         }\n                     }\n-                    mempool.check(pcoinsTip);\n+                    mempool.check(pcoinsTip.get());\n                 }\n             }\n \n@@ -2751,8 +2751,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         else\n         {\n             LOCK(pfrom->cs_filter);\n-            delete pfrom->pfilter;\n-            pfrom->pfilter = new CBloomFilter(filter);\n+            pfrom->pfilter.reset(new CBloomFilter(filter));\n             pfrom->pfilter->UpdateEmptyFull();\n             pfrom->fRelayTxes = true;\n         }\n@@ -2788,8 +2787,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     {\n         LOCK(pfrom->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n-            delete pfrom->pfilter;\n-            pfrom->pfilter = new CBloomFilter();\n+            pfrom->pfilter.reset(new CBloomFilter());\n         }\n         pfrom->fRelayTxes = true;\n     }"
      },
      {
        "sha": "a459186359513ddbea5ec8f5de58cbf8aafdaa70",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 15,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -548,16 +548,13 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     bucketMap[INF_FEERATE] = bucketIndex;\n     assert(bucketMap.size() == buckets.size());\n \n-    feeStats = new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE);\n-    shortStats = new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE);\n-    longStats = new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE);\n+    feeStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE));\n+    shortStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE));\n+    longStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE));\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n {\n-    delete feeStats;\n-    delete shortStats;\n-    delete longStats;\n }\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n@@ -690,16 +687,16 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     double sufficientTxs = SUFFICIENT_FEETXS;\n     switch (horizon) {\n     case FeeEstimateHorizon::SHORT_HALFLIFE: {\n-        stats = shortStats;\n+        stats = shortStats.get();\n         sufficientTxs = SUFFICIENT_TXS_SHORT;\n         break;\n     }\n     case FeeEstimateHorizon::MED_HALFLIFE: {\n-        stats = feeStats;\n+        stats = feeStats.get();\n         break;\n     }\n     case FeeEstimateHorizon::LONG_HALFLIFE: {\n-        stats = longStats;\n+        stats = longStats.get();\n         break;\n     }\n     default: {\n@@ -1002,12 +999,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             }\n \n             // Destroy old TxConfirmStats and point to new ones that already reference buckets and bucketMap\n-            delete feeStats;\n-            delete shortStats;\n-            delete longStats;\n-            feeStats = fileFeeStats.release();\n-            shortStats = fileShortStats.release();\n-            longStats = fileLongStats.release();\n+            feeStats = std::move(fileFeeStats);\n+            shortStats = std::move(fileShortStats);\n+            longStats = std::move(fileLongStats);\n \n             nBestSeenHeight = nFileBestSeenHeight;\n             historicalFirst = nFileHistoricalFirst;"
      },
      {
        "sha": "9c0937cbd6028ccfb495e42b9f9b39cbe460e042",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -245,9 +245,9 @@ class CBlockPolicyEstimator\n     std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n \n     /** Classes to track historical data on transaction confirmations */\n-    TxConfirmStats* feeStats;\n-    TxConfirmStats* shortStats;\n-    TxConfirmStats* longStats;\n+    std::unique_ptr<TxConfirmStats> feeStats;\n+    std::unique_ptr<TxConfirmStats> shortStats;\n+    std::unique_ptr<TxConfirmStats> longStats;\n \n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;"
      },
      {
        "sha": "59d7f37841bf0b12be74ff8c53e4ae0b5899c0ac",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -17,9 +17,6 @@ class RPCNestedTests : public QObject\n \n     private Q_SLOTS:\n     void rpcNestedTests();\n-\n-private:\n-    CCoinsViewDB *pcoinsdbview;\n };\n \n #endif // BITCOIN_QT_TEST_RPC_NESTED_TESTS_H"
      },
      {
        "sha": "4a3404308d8cb2b5d68c29acb027ab37c1d0a210",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -928,7 +928,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n-    if (GetUTXOStats(pcoinsdbview, stats)) {\n+    if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n         ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n@@ -996,7 +996,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n-        CCoinsViewMemPool view(pcoinsTip, mempool);\n+        CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n             return NullUniValue;\n         }\n@@ -1048,7 +1048,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         nCheckDepth = request.params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n+    return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */"
      },
      {
        "sha": "c1625cf47617c2a3ea3ac666f641532ee4fbb4b6",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -135,8 +135,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n \n     // Call the destructor to free leveldb LOCK\n-    delete dbw;\n-    dbw = nullptr;\n+    dbw.reset();\n \n     // Now, set up another wrapper that wants to obfuscate the same directory\n     CDBWrapper odbw(ph, (1 << 10), false, false, true);\n@@ -167,7 +166,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -177,8 +176,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n \n     // Call the destructor to free leveldb LOCK\n-    delete dbw;\n-    dbw = nullptr;\n+    dbw.reset();\n \n     // Simulate a -reindex by wiping the existing data store\n     CDBWrapper odbw(ph, (1 << 10), false, true, true);"
      },
      {
        "sha": "0d7d52478f70f4e42c88cdb2b2bb24c3f6358953",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -81,9 +81,9 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n         mempool.setSanityCheck(1.0);\n-        pblocktree = new CBlockTreeDB(1 << 20, true);\n-        pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-        pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n         if (!LoadGenesisBlock(chainparams)) {\n             throw std::runtime_error(\"LoadGenesisBlock failed.\");\n         }\n@@ -110,9 +110,9 @@ TestingSetup::~TestingSetup()\n         g_connman.reset();\n         peerLogic.reset();\n         UnloadBlockIndex();\n-        delete pcoinsTip;\n-        delete pcoinsdbview;\n-        delete pblocktree;\n+        pcoinsTip.reset();\n+        pcoinsdbview.reset();\n+        pblocktree.reset();\n         fs::remove_all(pathTemp);\n }\n "
      },
      {
        "sha": "6398386d4215f7f0f7dbf186901deefdb8937b6c",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -57,7 +57,6 @@ struct CConnmanTest {\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n-    CCoinsViewDB *pcoinsdbview;\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;"
      },
      {
        "sha": "7d551a7bb4a3b5e602b2b4572d165d849be33b87",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -119,7 +119,7 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n-        bool ret = CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, nullptr);\n+        bool ret = CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n@@ -135,13 +135,13 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n         if (ret && add_to_cache) {\n             // Check that we get a cache hit if the tx was valid\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK(scriptchecks.empty());\n         } else {\n             // Check that we get script executions to check, if the transaction\n             // was invalid, or we didn't add to cache.\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n         }\n     }\n@@ -201,13 +201,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         CValidationState state;\n         PrecomputedTransactionData ptd_spend_tx(spend_tx);\n \n-        BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+        BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n \n         // If we call again asking for scriptchecks (as happens in\n         // ConnectBlock), we should add a script check object for this -- we're\n         // not caching invalidity (if that changes, delete this test case).\n         std::vector<CScriptCheck> scriptchecks;\n-        BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 1);\n \n         // Test that CheckInputs returns true iff DERSIG-enforcing flags are\n@@ -268,7 +268,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         CValidationState state;\n         PrecomputedTransactionData txdata(invalid_with_cltv_tx);\n-        BOOST_CHECK(CheckInputs(invalid_with_cltv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputs(invalid_with_cltv_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TEST CHECKSEQUENCEVERIFY\n@@ -296,7 +296,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         CValidationState state;\n         PrecomputedTransactionData txdata(invalid_with_csv_tx);\n-        BOOST_CHECK(CheckInputs(invalid_with_csv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputs(invalid_with_csv_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TODO: add tests for remaining script flags\n@@ -358,12 +358,12 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         CValidationState state;\n         PrecomputedTransactionData txdata(tx);\n         // This transaction is now invalid under segwit, because of the second input.\n-        BOOST_CHECK(!CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+        BOOST_CHECK(!CheckInputs(tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n \n         std::vector<CScriptCheck> scriptchecks;\n         // Make sure this transaction was not cached (ie because the first\n         // input was valid)\n-        BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n         // Should get 2 script checks back -- caching is on a whole-transaction basis.\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 2);\n     }"
      },
      {
        "sha": "43acd93ee260e640914cc190c3093ab88a64ab77",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -326,4 +326,11 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n \n std::string CopyrightHolders(const std::string& strPrefix);\n \n+//! Substitute for C++14 std::make_unique.\n+template <typename T, typename... Args>\n+std::unique_ptr<T> MakeUnique(Args&&... args)\n+{\n+    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+}\n+\n #endif // BITCOIN_UTIL_H"
      },
      {
        "sha": "e7b6fc52a8e04f83a561c0759703fe8dbc578b5a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -201,9 +201,9 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n     return chain.Genesis();\n }\n \n-CCoinsViewDB *pcoinsdbview = nullptr;\n-CCoinsViewCache *pcoinsTip = nullptr;\n-CBlockTreeDB *pblocktree = nullptr;\n+std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n+std::unique_ptr<CCoinsViewCache> pcoinsTip;\n+std::unique_ptr<CBlockTreeDB> pblocktree;\n \n enum FlushStateMode {\n     FLUSH_STATE_NONE,\n@@ -295,7 +295,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n     }\n     else {\n         // pcoinsTip contains the UTXO set for chainActive.Tip()\n-        CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip.get(), mempool);\n         std::vector<int> prevheights;\n         prevheights.resize(tx.vin.size());\n         for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n@@ -424,7 +424,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(pcoinsTip.get(), chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n }\n@@ -557,7 +557,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         LockPoints lp;\n         {\n         LOCK(pool.cs);\n-        CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n         view.SetBackend(viewMemPool);\n \n         // do all inputs exist?\n@@ -2105,7 +2105,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n-        CCoinsViewCache view(pcoinsTip);\n+        CCoinsViewCache view(pcoinsTip.get());\n         assert(view.GetBestBlock() == pindexDelete->GetBlockHash());\n         if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n@@ -2235,7 +2235,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime3;\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);\n     {\n-        CCoinsViewCache view(pcoinsTip);\n+        CCoinsViewCache view(pcoinsTip.get());\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n@@ -2413,7 +2413,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         // any disconnected transactions back to the mempool.\n         UpdateMempoolForReorg(disconnectpool, true);\n     }\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip.get());\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -3275,7 +3275,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n-    CCoinsViewCache viewNew(pcoinsTip);\n+    CCoinsViewCache viewNew(pcoinsTip.get());\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;"
      },
      {
        "sha": "f2ffdc89931af5fc41b58b8f1ac3e8a51c1daa81",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -444,13 +444,13 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex);\n extern CChain chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n-extern CCoinsViewDB *pcoinsdbview;\n+extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern CCoinsViewCache *pcoinsTip;\n+extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n-extern CBlockTreeDB *pblocktree;\n+extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n /**\n  * Return the spend height, which is one more than the inputs.GetBestBlock()."
      },
      {
        "sha": "ca8e680ff710176e88aaf69fd685cc0f2ff85508",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -75,22 +75,19 @@ void CDBEnv::EnvShutdown()\n \n void CDBEnv::Reset()\n {\n-    delete dbenv;\n-    dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n+    dbenv.reset(new DbEnv(DB_CXX_NO_EXCEPTIONS));\n     fDbEnvInit = false;\n     fMockDb = false;\n }\n \n-CDBEnv::CDBEnv() : dbenv(nullptr)\n+CDBEnv::CDBEnv()\n {\n     Reset();\n }\n \n CDBEnv::~CDBEnv()\n {\n     EnvShutdown();\n-    delete dbenv;\n-    dbenv = nullptr;\n }\n \n void CDBEnv::Close()\n@@ -182,7 +179,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, recoverFunc_type\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    Db db(dbenv, 0);\n+    Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n     if (result == 0)\n         return VERIFY_OK;\n@@ -225,7 +222,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy(new Db(bitdb.dbenv, 0));\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(bitdb.dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -334,7 +331,7 @@ bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<C\n \n     std::stringstream strDump;\n \n-    Db db(dbenv, 0);\n+    Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n@@ -416,7 +413,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n+            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n@@ -525,7 +522,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(dbw, \"r\");\n-                    Db* pdbCopy = new Db(env->dbenv, 0);\n+                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -574,13 +571,12 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                     } else {\n                         pdbCopy->close(0);\n                     }\n-                    delete pdbCopy;\n                 }\n                 if (fSuccess) {\n-                    Db dbA(env->dbenv, 0);\n+                    Db dbA(env->dbenv.get(), 0);\n                     if (dbA.remove(strFile.c_str(), nullptr, 0))\n                         fSuccess = false;\n-                    Db dbB(env->dbenv, 0);\n+                    Db dbB(env->dbenv.get(), 0);\n                     if (dbB.rename(strFileRes.c_str(), nullptr, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }"
      },
      {
        "sha": "e6d5a9f293b7a68ae8c036de5786131352e0a377",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -36,7 +36,7 @@ class CDBEnv\n \n public:\n     mutable CCriticalSection cs_db;\n-    DbEnv *dbenv;\n+    std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n "
      },
      {
        "sha": "34f210fcd7572abe3b761d5cb493ca484698c701",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -8,7 +8,7 @@\n #include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n-CWallet *pwalletMain;\n+std::unique_ptr<CWallet> pwalletMain;\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n@@ -17,18 +17,17 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n \n     bool fFirstRun;\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    pwalletMain = new CWallet(std::move(dbw));\n+    pwalletMain = MakeUnique<CWallet>(std::move(dbw));\n     pwalletMain->LoadWallet(fFirstRun);\n-    RegisterValidationInterface(pwalletMain);\n+    RegisterValidationInterface(pwalletMain.get());\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n \n WalletTestingSetup::~WalletTestingSetup()\n {\n-    UnregisterValidationInterface(pwalletMain);\n-    delete pwalletMain;\n-    pwalletMain = nullptr;\n+    UnregisterValidationInterface(pwalletMain.get());\n+    pwalletMain.reset();\n \n     bitdb.Flush(true);\n     bitdb.Reset();"
      },
      {
        "sha": "dceb818b50e0ada5a1e9e2f654233d9003861877",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9be169e430a6828b69f22ae9d47ecc1b2685c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "patch": "@@ -3806,7 +3806,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n         std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-        std::unique_ptr<CWallet> tempWallet(new CWallet(std::move(dbw)));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(std::move(dbw));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));"
      }
    ]
  },
  {
    "sha": "fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTAwMjVkYzNjYmE1MmFkOGZiMjQxMWI5ZDYxY2E1YTE4NDUwMjVi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-09T21:53:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-09T21:49:25Z"
      },
      "message": "Revert \"Remove unused variable in shell script\"\n\nThis partially reverts commit ab8e8b97a359e1c4f1bca8e1769021c95019f2c4",
      "tree": {
        "sha": "66a17d5fef7cc115098ea8cd6bd1610e162d06d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a17d5fef7cc115098ea8cd6bd1610e162d06d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e9be169e430a6828b69f22ae9d47ecc1b2685c1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f34451e1a0fb971dc495c5609a4d58908fe6e0f",
        "filename": "contrib/devtools/git-subtree-check.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b/contrib/devtools/git-subtree-check.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b/contrib/devtools/git-subtree-check.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/git-subtree-check.sh?ref=fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
        "patch": "@@ -48,6 +48,7 @@ if [ -z \"$latest_squash\" ]; then\n fi\n \n set $latest_squash\n+old=$1\n rev=$2\n if [ \"d$(git cat-file -t $rev 2>/dev/null)\" != dcommit ]; then\n     echo \"ERROR: subtree commit $rev unavailable. Fetch/update the subtree repository\" >&2"
      }
    ]
  },
  {
    "sha": "c838283ecdfb9490425bb071b7c22e542de46c7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODM4MjgzZWNkZmI5NDkwNDI1YmIwNzFiN2MyMmU1NDJkZTQ2Yzdj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-09T22:02:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-09T22:02:06Z"
      },
      "message": "Merge #11649: Revert \"Remove unused variable in shell script\"\n\nfa0025dc3 Revert \"Remove unused variable in shell script\" (MarcoFalke)\n\nPull request description:\n\n  This partially reverts commit ab8e8b97a359e1c4f1bca8e1769021c95019f2c4 (#10771), as the variable is still used. See for example #11394.\n\nTree-SHA512: 1788d5471e1399d4a15d287cd8c41979833524e31b8fe61af8a7d20c9777828460d61ab87885a228ba7ca919f1d08703f4cb182d5840eb863e2154b3cf8ff4e6",
      "tree": {
        "sha": "66a17d5fef7cc115098ea8cd6bd1610e162d06d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a17d5fef7cc115098ea8cd6bd1610e162d06d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c838283ecdfb9490425bb071b7c22e542de46c7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBNBfAAoJENLqSFDnUoslRekQAKjezAK1Ok0zC+vr6A+H2ldj\nDUEAeuriB9tYEMMmYdwfytm2UYBXQfdRCxhS3e+x0yuLL8mWu4miocaW4GKpY0yh\nCmne8uuVfgrAuR5x+dtRj1j0LeaToz+HX9LSCPpuMdPKtCinH8FlEH7TBH71mPDu\nw1wshMrpjtHMpFcJKJ8+6gHJWxvS8dMIcx4/0n/ctkkP6lPVWJR6d9k9n+TvaPWd\ntv77ciA0exgOr38W4gfKWi60mE2yMqf6cVgjKSmmTv3Sg96ZmC1oBbPRwc54C8nG\nAMYcqadeSA38TYeo95Vr03jyROmr4f+zQm+HW/Rz8KarA8uysj0Vf437tWt9C0FC\niL7rv28yyfTXrnOUxy47Y2VZ7+KMiKlTqKMxwn++gVm6TW4/kBAkm8yFOR32g2C4\nNSldoJmCqCR7Meot2OnW9zdvtU1qqbwdxYJnYAhWW7b67XkZLV2fORHfVBUbL8Lm\nPOSQ45kUphWN/CaqWka5k6X9f2FdiJBYFazoe8UA0pQWps2mPtpCznwTNgkJbCGt\n3q8tZGvJnJUs6U3Db42Qzz4NsdOh57vNwM1AbQai8pALZyQuV1kY37eNABU9abxq\n/V+VW+2p0Ku2WKeFKmXuW+ciTZE09yM5CzxjOaMTQNpdAlBztXsun3tAzO3+3wUx\nj8kFqicrwZaU4T7fi430\n=zuQt\n-----END PGP SIGNATURE-----",
        "payload": "tree 66a17d5fef7cc115098ea8cd6bd1610e162d06d2\nparent 5e9be169e430a6828b69f22ae9d47ecc1b2685c1\nparent fa0025dc3cba52ad8fb2411b9d61ca5a1845025b\nauthor MarcoFalke <falke.marco@gmail.com> 1510264922 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510264926 -0500\n\nMerge #11649: Revert \"Remove unused variable in shell script\"\n\nfa0025dc3 Revert \"Remove unused variable in shell script\" (MarcoFalke)\n\nPull request description:\n\n  This partially reverts commit ab8e8b97a359e1c4f1bca8e1769021c95019f2c4 (#10771), as the variable is still used. See for example #11394.\n\nTree-SHA512: 1788d5471e1399d4a15d287cd8c41979833524e31b8fe61af8a7d20c9777828460d61ab87885a228ba7ca919f1d08703f4cb182d5840eb863e2154b3cf8ff4e6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c838283ecdfb9490425bb071b7c22e542de46c7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c838283ecdfb9490425bb071b7c22e542de46c7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c838283ecdfb9490425bb071b7c22e542de46c7c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9be169e430a6828b69f22ae9d47ecc1b2685c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e9be169e430a6828b69f22ae9d47ecc1b2685c1"
      },
      {
        "sha": "fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0025dc3cba52ad8fb2411b9d61ca5a1845025b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f34451e1a0fb971dc495c5609a4d58908fe6e0f",
        "filename": "contrib/devtools/git-subtree-check.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c838283ecdfb9490425bb071b7c22e542de46c7c/contrib/devtools/git-subtree-check.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c838283ecdfb9490425bb071b7c22e542de46c7c/contrib/devtools/git-subtree-check.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/git-subtree-check.sh?ref=c838283ecdfb9490425bb071b7c22e542de46c7c",
        "patch": "@@ -48,6 +48,7 @@ if [ -z \"$latest_squash\" ]; then\n fi\n \n set $latest_squash\n+old=$1\n rev=$2\n if [ \"d$(git cat-file -t $rev 2>/dev/null)\" != dcommit ]; then\n     echo \"ERROR: subtree commit $rev unavailable. Fetch/update the subtree repository\" >&2"
      }
    ]
  },
  {
    "sha": "6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTRlOThlZThjZTJkYTNjY2EyZTJmZDIxMGU5ZThkYmM5YjFjOTM2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-09T22:06:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-09T22:06:20Z"
      },
      "message": "Merge #11394: Perform a weaker subtree check in Travis\n\n487aff421 Check subtree consistency in Travis (Pieter Wuille)\ne1d0cc23a Improve git-subtree-check.sh (Pieter Wuille)\n\nPull request description:\n\n  Apparently many of our subtrees get modified by PRs in this repository, without getting noticed.\n\n  To improve upon this:\n  * Make git-subtree-check.sh capable of doing a weaker consistency check (that doesn't need access to external repositories), but which should be sufficient to detect unintended changes. It can be fooled by a fake subtree merge commit, but that would hopefully be obvious to reviewers.\n  * Make Travis invoke this subtree check for each of our subtrees.\n\n  Note that Travis is currently expected to fail on this PR, as 2 out of 4 subtrees (`src/secp156k1` and `src/univalue` have been modified directly in master).\n\nTree-SHA512: 465b680392d3daf38a8c1dda77d6f74b1d1c23324c378774777fb95aa673e119a8f7e3ccc124e41d97b5ac8975f3d79f3015797d2d309666582394364917ec4e",
      "tree": {
        "sha": "46edfb42d273bf038ee94fa8b3fa6682b406cea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46edfb42d273bf038ee94fa8b3fa6682b406cea7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBNFcAAoJENLqSFDnUosliRAQAJb6lECQFNUcJRahXROFaiXV\nj38YosHeMntIdDv/p9yehD9vYktTrk8RgKijOePIhHsRMy/56hwjpMg28VjqH8gB\n6EC5mFynhe8mDCPyjbGMnSajIVvc9/eM1kqysJdGGxKNU8BAViZcHn5aYE+YhuE2\nGrme6doZS7IGI1jjrHRkjtmCz9yJUsIZ7+cuCqlbPy/DTJkn3XFa1SVcrtDvCeBV\nHkG5EZMc/zAroQIVXlJSRXOw7U/QNOCVnypP/uZ6WCIC+DIdZMeibCgHm9EZVxSC\nX9nLSoYoVT6E71XQZ3CAghc/USijJPqlAxl51QswhbbFDEBQFzg13T2ckiWZBOZl\noHciO7H/hVU07WTWKnH6VryaMtqMkjiwoPrin00a6a28gMn/NUtjlv/2E7o1g1g5\nYqcvgbv3e1WXR4YK6ni2tMLeS8qgbQH0pwBygzw8f9c00k//rCZBhLLurTpsx53+\nI7qrkyeU/+0O43OXuVTAFCMP7jwVN3tQn5puyPYhg5VGFos0h33Jpj/tBL/xHrDI\nVe5QLB5Blt5Z445d++iBoDl0NniiAPJeGokwY70TP+A5YMSHzu1DIYuC8EhIBGza\nKDhKVfF+tllKyP6TO3uK+RQn0ZQ/BjpW9fUmOI0RwBVV5edG31fRfgb909nofrJY\ne8NS1a7475xKHZSlpTl0\n=em64\n-----END PGP SIGNATURE-----",
        "payload": "tree 46edfb42d273bf038ee94fa8b3fa6682b406cea7\nparent c838283ecdfb9490425bb071b7c22e542de46c7c\nparent 487aff42184117ae3b8be4381b77587448e297a5\nauthor MarcoFalke <falke.marco@gmail.com> 1510265175 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510265180 -0500\n\nMerge #11394: Perform a weaker subtree check in Travis\n\n487aff421 Check subtree consistency in Travis (Pieter Wuille)\ne1d0cc23a Improve git-subtree-check.sh (Pieter Wuille)\n\nPull request description:\n\n  Apparently many of our subtrees get modified by PRs in this repository, without getting noticed.\n\n  To improve upon this:\n  * Make git-subtree-check.sh capable of doing a weaker consistency check (that doesn't need access to external repositories), but which should be sufficient to detect unintended changes. It can be fooled by a fake subtree merge commit, but that would hopefully be obvious to reviewers.\n  * Make Travis invoke this subtree check for each of our subtrees.\n\n  Note that Travis is currently expected to fail on this PR, as 2 out of 4 subtrees (`src/secp156k1` and `src/univalue` have been modified directly in master).\n\nTree-SHA512: 465b680392d3daf38a8c1dda77d6f74b1d1c23324c378774777fb95aa673e119a8f7e3ccc124e41d97b5ac8975f3d79f3015797d2d309666582394364917ec4e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c838283ecdfb9490425bb071b7c22e542de46c7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c838283ecdfb9490425bb071b7c22e542de46c7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c838283ecdfb9490425bb071b7c22e542de46c7c"
      },
      {
        "sha": "487aff42184117ae3b8be4381b77587448e297a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/487aff42184117ae3b8be4381b77587448e297a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/487aff42184117ae3b8be4381b77587448e297a5"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 30,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e98cae030b2daf9f1942c4e0f62555f034839c6c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
        "patch": "@@ -46,6 +46,10 @@ install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:\n     - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n+    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/crypto/ctaes; fi\n+    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/secp256k1; fi\n+    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/univalue; fi\n+    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/leveldb; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-doc.py; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-rpc-mappings.py .; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/lint-all.sh; fi"
      },
      {
        "sha": "184951715e99ee051cea0f73535330f5033ee80f",
        "filename": "contrib/devtools/git-subtree-check.sh",
        "status": "modified",
        "additions": 26,
        "deletions": 9,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936/contrib/devtools/git-subtree-check.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936/contrib/devtools/git-subtree-check.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/git-subtree-check.sh?ref=6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
        "patch": "@@ -41,21 +41,17 @@ find_latest_squash()\n \tdone\n }\n \n+# find latest subtree update\n latest_squash=\"$(find_latest_squash \"$DIR\")\"\n if [ -z \"$latest_squash\" ]; then\n     echo \"ERROR: $DIR is not a subtree\" >&2\n     exit 2\n fi\n-\n set $latest_squash\n old=$1\n rev=$2\n-if [ \"d$(git cat-file -t $rev 2>/dev/null)\" != dcommit ]; then\n-    echo \"ERROR: subtree commit $rev unavailable. Fetch/update the subtree repository\" >&2\n-    exit 2\n-fi\n-tree_subtree=$(git show -s --format=\"%T\" $rev)\n-echo \"$DIR in $COMMIT was last updated to upstream commit $rev (tree $tree_subtree)\"\n+\n+# get the tree in the current commit\n tree_actual=$(git ls-tree -d \"$COMMIT\" \"$DIR\" | head -n 1)\n if [ -z \"$tree_actual\" ]; then\n     echo \"FAIL: subtree directory $DIR not found in $COMMIT\" >&2\n@@ -69,9 +65,30 @@ if [ \"d$tree_actual_type\" != \"dtree\" ]; then\n     echo \"FAIL: subtree directory $DIR is not a tree in $COMMIT\" >&2\n     exit 1\n fi\n+\n+# get the tree at the time of the last subtree update\n+tree_commit=$(git show -s --format=\"%T\" $old)\n+echo \"$DIR in $COMMIT was last updated in commit $old (tree $tree_commit)\"\n+\n+# ... and compare the actual tree with it\n+if [ \"$tree_actual_tree\" != \"$tree_commit\" ]; then\n+    git diff $tree_commit $tree_actual_tree >&2\n+    echo \"FAIL: subtree directory was touched without subtree merge\" >&2\n+    exit 1\n+fi\n+\n+# get the tree in the subtree commit referred to\n+if [ \"d$(git cat-file -t $rev 2>/dev/null)\" != dcommit ]; then\n+    echo \"subtree commit $rev unavailable: cannot compare\" >&2\n+    exit\n+fi\n+tree_subtree=$(git show -s --format=\"%T\" $rev)\n+echo \"$DIR in $COMMIT was last updated to upstream commit $rev (tree $tree_subtree)\"\n+\n+# ... and compare the actual tree with it\n if [ \"$tree_actual_tree\" != \"$tree_subtree\" ]; then\n-    git diff-tree $tree_actual_tree $tree_subtree >&2\n-    echo \"FAIL: subtree directory tree doesn't match subtree commit tree\" >&2\n+    echo \"FAIL: subtree update commit differs from upstream tree!\" >&2\n     exit 1\n fi\n+\n echo \"GOOD\""
      }
    ]
  },
  {
    "sha": "be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTlmMzhjNjEzMWFiMGM3YWQ5NmU0ZjZmM2Q4YjVhZTZmODcwZWE5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-30T22:56:37Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-09T23:41:18Z"
      },
      "message": "Do not make it trivial for inbound peers to generate log entries\n\nWe should generally avoid writing to debug.log unconditionally for\ninbound peers which misbehave (the peer being about to be banned\nbeing an exception, since they cannot do this twice).\n\nTo avoid removing logs for outbound peers, a new log is added to\nnotify users when a new outbound peer is connected which mimics\nthe version print.",
      "tree": {
        "sha": "c1eb34294a5c39304b360c541d07d0185c0eabb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1eb34294a5c39304b360c541d07d0185c0eabb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3788a8479b4efd481f3e91419bcf347113375112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3788a8479b4efd481f3e91419bcf347113375112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3788a8479b4efd481f3e91419bcf347113375112"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4453f409ad1ffdccb78e290c8b285ef117b6b2ac",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
        "patch": "@@ -1111,7 +1111,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (IsBanned(addr) && !whitelisted)\n     {\n-        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+        LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }"
      },
      {
        "sha": "8e76dabc85c4c0e3b0186703c13b30feaade9e09",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
        "patch": "@@ -1042,7 +1042,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                     send = BlockRequestAllowed(mi->second, consensusParams);\n                     if (!send) {\n-                        LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+                        LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n@@ -1511,7 +1511,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n+            LogPrint(BCLog::NET, \"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n@@ -1611,7 +1611,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+        LogPrint(BCLog::NET, \"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n                   cleanSubVer, pfrom->nVersion,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->GetId(),\n                   remoteAddr);\n@@ -1654,6 +1654,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // Mark this node as currently connected, so we update its timestamp later.\n             LOCK(cs_main);\n             State(pfrom->GetId())->fCurrentlyConnected = true;\n+            LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s\\n\",\n+                      pfrom->nVersion.load(), pfrom->nStartingHeight, pfrom->GetId(),\n+                      (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom->addr.ToString()) : \"\"));\n         }\n \n         if (pfrom->nVersion >= SENDHEADERS_VERSION) {\n@@ -1932,7 +1935,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n-            LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n+            LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n             return true;\n         }\n \n@@ -1984,7 +1987,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pindex = (*mi).second;\n \n             if (!BlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n-                LogPrintf(\"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+                LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                 return true;\n             }\n         }\n@@ -2232,10 +2235,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0) {\n+                    LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                     LOCK(cs_main);\n                     Misbehaving(pfrom->GetId(), nDoS);\n+                } else {\n+                    LogPrint(BCLog::NET, \"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 }\n-                LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 return true;\n             }\n         }\n@@ -2837,7 +2842,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     msg.SetVersion(pfrom->GetRecvVersion());\n     // Scan for message start\n     if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n         pfrom->fDisconnect = true;\n         return false;\n     }\n@@ -2846,7 +2851,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     CMessageHeader& hdr = msg.hdr;\n     if (!hdr.IsValid(chainparams.MessageStart()))\n     {\n-        LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n         return fMoreWork;\n     }\n     std::string strCommand = hdr.GetCommand();\n@@ -2859,7 +2864,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     const uint256& hash = msg.GetMessageHash();\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n     {\n-        LogPrintf(\"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n            SanitizeString(strCommand), nMessageSize,\n            HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n            HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n@@ -2882,17 +2887,17 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         if (strstr(e.what(), \"end of data\"))\n         {\n             // Allow exceptions from under-length message on vRecv\n-            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n         else if (strstr(e.what(), \"size too large\"))\n         {\n             // Allow exceptions from over-long size\n-            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n         else if (strstr(e.what(), \"non-canonical ReadCompactSize()\"))\n         {\n             // Allow exceptions from non-canonical encoding\n-            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n         else\n         {\n@@ -2906,7 +2911,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     if (!fRet) {\n-        LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n     }\n \n     LOCK(cs_main);"
      },
      {
        "sha": "a0c4b33ad4c14c6ccd5837e4e8fe3fb3ffcd0347",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
        "patch": "@@ -132,6 +132,10 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n     MarkUsed(args...);\n }\n \n+// Be conservative when using LogPrintf/error or other things which\n+// unconditionally log to debug.log! It should not be the case that an inbound\n+// peer can fill up a users disk with debug.log entries.\n+\n #ifdef USE_COVERAGE\n #define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n #define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)"
      }
    ]
  },
  {
    "sha": "fe503e118f08a9a781d8cc1a6cdde5a615178433",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTUwM2UxMThmMDhhOWE3ODFkOGNjMWE2Y2RkZTVhNjE1MTc4NDMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-10T07:20:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-10T07:20:43Z"
      },
      "message": "Merge #11646: Require a steady clock for bench with at least micro precision\n\n620bae3 Require a steady clock for bench with at least micro precision (Matt Corallo)\n\nPull request description:\n\n  Using a non-steady high_precision_clock by default is definitely not what we want, and in practice steady_clock has more than enough precision. Should double-check that travis passes on this one to make sure we actually have at least microsecond precision on all platforms.\n\nTree-SHA512: 54a4af3b6addca9897e8ab04694f9461343691b475ca3ed2368595c37520612e284969be94a8ee3d7c66d16532f7bb16b6ad80284cbc153653e8ef2d56696e9d",
      "tree": {
        "sha": "06696dfba44b36275d2b2872c87b9c20ff45b5cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06696dfba44b36275d2b2872c87b9c20ff45b5cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaBVNLAAoJEB5K7WKYbNJdeRQIAKryxOMNZNxhzp+qPH5uqYsP\nFxU35qb+sHkj9SkYQ7kTeZwTC0F0C/vEVLlH9m915+xEyoCyx+HmOw8iM/OVrCnf\n+/UOHvdvJtJstaHy4u/Q4zWfnDRPKst88JKPejiV/UzrZ3vIF4wczfy3OZ0OBWdy\nktuJjyeVWpe2J5EOVq6a6+58q8R0cax7qeAgaZZF+MTnIDOUNGr/0UnVO02Zirx8\nAN9WUl6ryFHSY8rneZWxNm8HrvEjQY4a21GdnJWJYZcD6pEEb+K/jOxMQ0XF924a\nEDZhvT+d6q96Rk2C17GXrLIyx7ITpLkC4m/SVcGlLvO2nYtElCqXXaqzxn0ElUk=\n=UCkh\n-----END PGP SIGNATURE-----",
        "payload": "tree 06696dfba44b36275d2b2872c87b9c20ff45b5cb\nparent 6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936\nparent 620bae34cfe10e20daa0dcec7e4b9ffee8dfd397\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510298415 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510298443 +0100\n\nMerge #11646: Require a steady clock for bench with at least micro precision\n\n620bae3 Require a steady clock for bench with at least micro precision (Matt Corallo)\n\nPull request description:\n\n  Using a non-steady high_precision_clock by default is definitely not what we want, and in practice steady_clock has more than enough precision. Should double-check that travis passes on this one to make sure we actually have at least microsecond precision on all platforms.\n\nTree-SHA512: 54a4af3b6addca9897e8ab04694f9461343691b475ca3ed2368595c37520612e284969be94a8ee3d7c66d16532f7bb16b6ad80284cbc153653e8ef2d56696e9d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe503e118f08a9a781d8cc1a6cdde5a615178433",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936"
      },
      {
        "sha": "620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4c5a036773d8afdef0ac5cb3a76803f56e87ffa6",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe503e118f08a9a781d8cc1a6cdde5a615178433/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe503e118f08a9a781d8cc1a6cdde5a615178433/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "patch": "@@ -23,6 +23,9 @@ void\n benchmark::BenchRunner::RunAll(benchmark::duration elapsedTimeForOne)\n {\n     perf_init();\n+    if (std::ratio_less_equal<benchmark::clock::period, std::micro>::value) {\n+        std::cerr << \"WARNING: Clock precision is worse than microsecond - benchmarks may be less accurate!\\n\";\n+    }\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min(ns)\" << \",\" << \"max(ns)\" << \",\" << \"average(ns)\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n "
      },
      {
        "sha": "ab5c3d5604d22962f90df7588c0e3047cea076a5",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe503e118f08a9a781d8cc1a6cdde5a615178433/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe503e118f08a9a781d8cc1a6cdde5a615178433/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "patch": "@@ -37,13 +37,11 @@ BENCHMARK(CODE_TO_TIME);\n  */\n  \n namespace benchmark {\n-    // On many systems, the high_resolution_clock offers no better resolution than the steady_clock.\n-    // If that's the case, prefer the steady_clock.\n+    // In case high_resolution_clock is steady, prefer that, otherwise use steady_clock.\n     struct best_clock {\n         using hi_res_clock = std::chrono::high_resolution_clock;\n         using steady_clock = std::chrono::steady_clock;\n-        static constexpr bool steady_is_high_res = std::ratio_less_equal<steady_clock::period, hi_res_clock::period>::value;\n-        using type = std::conditional<steady_is_high_res, steady_clock, hi_res_clock>::type;\n+        using type = std::conditional<hi_res_clock::is_steady, hi_res_clock, steady_clock>::type;\n     };\n     using clock = best_clock::type;\n     using time_point = clock::time_point;"
      }
    ]
  },
  {
    "sha": "b1f634242e73b2ca7c486ac7a876e840188ff107",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWY2MzQyNDJlNzNiMmNhN2M0ODZhYzdhODc2ZTg0MDE4OGZmMTA3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-09-25T04:13:27Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-10T11:50:05Z"
      },
      "message": "Qt: Rename confusingly-named \"address prefix\" to \"search string\"",
      "tree": {
        "sha": "a1f4aaef27a4ffe8c2708f4c22a04d6b0289a099",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1f4aaef27a4ffe8c2708f4c22a04d6b0289a099"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1f634242e73b2ca7c486ac7a876e840188ff107",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f634242e73b2ca7c486ac7a876e840188ff107",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1f634242e73b2ca7c486ac7a876e840188ff107",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f634242e73b2ca7c486ac7a876e840188ff107/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e707919f596c80056bca295abd71543ccae4956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e707919f596c80056bca295abd71543ccae4956",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e707919f596c80056bca295abd71543ccae4956"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "18366bc05380cdb3b4db43d281d53c5166d8e189",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=b1f634242e73b2ca7c486ac7a876e840188ff107",
        "patch": "@@ -20,7 +20,7 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     QSortFilterProxyModel(parent),\n     dateFrom(MIN_DATE),\n     dateTo(MAX_DATE),\n-    addrPrefix(),\n+    m_search_string(),\n     typeFilter(ALL_TYPES),\n     watchOnlyFilter(WatchOnlyFilter_All),\n     minAmount(0),\n@@ -51,7 +51,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n         return false;\n     if(datetime < dateFrom || datetime > dateTo)\n         return false;\n-    if (!address.contains(addrPrefix, Qt::CaseInsensitive) && !label.contains(addrPrefix, Qt::CaseInsensitive))\n+    if (!address.contains(m_search_string, Qt::CaseInsensitive) && !label.contains(m_search_string, Qt::CaseInsensitive))\n         return false;\n     if(amount < minAmount)\n         return false;\n@@ -66,9 +66,9 @@ void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime\n     invalidateFilter();\n }\n \n-void TransactionFilterProxy::setAddressPrefix(const QString &_addrPrefix)\n+void TransactionFilterProxy::setSearchString(const QString &search_string)\n {\n-    this->addrPrefix = _addrPrefix;\n+    m_search_string = search_string;\n     invalidateFilter();\n }\n "
      },
      {
        "sha": "0b451492dc256617578dabd7eee6915998d70a82",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=b1f634242e73b2ca7c486ac7a876e840188ff107",
        "patch": "@@ -35,7 +35,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     };\n \n     void setDateRange(const QDateTime &from, const QDateTime &to);\n-    void setAddressPrefix(const QString &addrPrefix);\n+    void setSearchString(const QString &);\n     /**\n       @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n@@ -57,7 +57,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n private:\n     QDateTime dateFrom;\n     QDateTime dateTo;\n-    QString addrPrefix;\n+    QString m_search_string;\n     quint32 typeFilter;\n     WatchOnlyFilter watchOnlyFilter;\n     CAmount minAmount;"
      },
      {
        "sha": "e8380ad744a2a160b1d4adc6b9bfdced78d52f44",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=b1f634242e73b2ca7c486ac7a876e840188ff107",
        "patch": "@@ -95,11 +95,11 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n \n     hlayout->addWidget(typeWidget);\n \n-    addressWidget = new QLineEdit(this);\n+    search_widget = new QLineEdit(this);\n #if QT_VERSION >= 0x040700\n-    addressWidget->setPlaceholderText(tr(\"Enter address or label to search\"));\n+    search_widget->setPlaceholderText(tr(\"Enter address or label to search\"));\n #endif\n-    hlayout->addWidget(addressWidget);\n+    hlayout->addWidget(search_widget);\n \n     amountWidget = new QLineEdit(this);\n #if QT_VERSION >= 0x040700\n@@ -187,8 +187,8 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n     connect(amountWidget, SIGNAL(textChanged(QString)), amount_typing_delay, SLOT(start()));\n     connect(amount_typing_delay, SIGNAL(timeout()), this, SLOT(changedAmount()));\n-    connect(addressWidget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n-    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedPrefix()));\n+    connect(search_widget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n+    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedSearch()));\n \n     connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n     connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n@@ -326,11 +326,11 @@ void TransactionView::chooseWatchonly(int idx)\n         (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n }\n \n-void TransactionView::changedPrefix()\n+void TransactionView::changedSearch()\n {\n     if(!transactionProxyModel)\n         return;\n-    transactionProxyModel->setAddressPrefix(addressWidget->text());\n+    transactionProxyModel->setSearchString(search_widget->text());\n }\n \n void TransactionView::changedAmount()"
      },
      {
        "sha": "bf65780f0c69fdcb39d36055f7e634ccf45b2d4c",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f634242e73b2ca7c486ac7a876e840188ff107/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=b1f634242e73b2ca7c486ac7a876e840188ff107",
        "patch": "@@ -66,7 +66,7 @@ class TransactionView : public QWidget\n     QComboBox *dateWidget;\n     QComboBox *typeWidget;\n     QComboBox *watchOnlyWidget;\n-    QLineEdit *addressWidget;\n+    QLineEdit *search_widget;\n     QLineEdit *amountWidget;\n \n     QMenu *contextMenu;\n@@ -113,7 +113,7 @@ public Q_SLOTS:\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);\n     void changedAmount();\n-    void changedPrefix();\n+    void changedSearch();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n "
      }
    ]
  },
  {
    "sha": "c407c61c5bd7a41dae23d280644d46a9883de6ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDA3YzYxYzViZDdhNDFkYWUyM2QyODA2NDRkNDZhOTg4M2RlNmFl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-09-25T23:23:46Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-10T11:50:05Z"
      },
      "message": "Qt: Avoid invalidating the search filter, when it doesn't really change",
      "tree": {
        "sha": "c5e51626e556f7dcb083ec384fc495964bc96a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e51626e556f7dcb083ec384fc495964bc96a47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c407c61c5bd7a41dae23d280644d46a9883de6ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c407c61c5bd7a41dae23d280644d46a9883de6ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c407c61c5bd7a41dae23d280644d46a9883de6ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c407c61c5bd7a41dae23d280644d46a9883de6ae/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1f634242e73b2ca7c486ac7a876e840188ff107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f634242e73b2ca7c486ac7a876e840188ff107",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1f634242e73b2ca7c486ac7a876e840188ff107"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c9124830937e7b149239513776916d60a31cd35f",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c407c61c5bd7a41dae23d280644d46a9883de6ae/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c407c61c5bd7a41dae23d280644d46a9883de6ae/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=c407c61c5bd7a41dae23d280644d46a9883de6ae",
        "patch": "@@ -68,6 +68,7 @@ void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime\n \n void TransactionFilterProxy::setSearchString(const QString &search_string)\n {\n+    if (m_search_string == search_string) return;\n     m_search_string = search_string;\n     invalidateFilter();\n }"
      }
    ]
  },
  {
    "sha": "eac2abca02e01c83cc696ebe8a760e842e2f8424",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWMyYWJjYTAyZTAxYzgzY2M2OTZlYmU4YTc2MGU4NDJlMmY4NDI0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-09-25T04:18:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-10T11:50:05Z"
      },
      "message": "Qt: Enable searching by transaction id",
      "tree": {
        "sha": "6270824fd1973e30e672726cc0b1725ff317cf6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6270824fd1973e30e672726cc0b1725ff317cf6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eac2abca02e01c83cc696ebe8a760e842e2f8424",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac2abca02e01c83cc696ebe8a760e842e2f8424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eac2abca02e01c83cc696ebe8a760e842e2f8424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac2abca02e01c83cc696ebe8a760e842e2f8424/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c407c61c5bd7a41dae23d280644d46a9883de6ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c407c61c5bd7a41dae23d280644d46a9883de6ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c407c61c5bd7a41dae23d280644d46a9883de6ae"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1598728294b730845151ad3a07ef9269d2d24190",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac2abca02e01c83cc696ebe8a760e842e2f8424/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac2abca02e01c83cc696ebe8a760e842e2f8424/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=eac2abca02e01c83cc696ebe8a760e842e2f8424",
        "patch": "@@ -38,6 +38,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     bool involvesWatchAddress = index.data(TransactionTableModel::WatchonlyRole).toBool();\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n+    QString txid = index.data(TransactionTableModel::TxIDRole).toString();\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n@@ -51,8 +52,11 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n         return false;\n     if(datetime < dateFrom || datetime > dateTo)\n         return false;\n-    if (!address.contains(m_search_string, Qt::CaseInsensitive) && !label.contains(m_search_string, Qt::CaseInsensitive))\n+    if (!address.contains(m_search_string, Qt::CaseInsensitive) &&\n+        !  label.contains(m_search_string, Qt::CaseInsensitive) &&\n+        !   txid.contains(m_search_string, Qt::CaseInsensitive)) {\n         return false;\n+    }\n     if(amount < minAmount)\n         return false;\n "
      },
      {
        "sha": "39e85d65b5879659b02c91fb771e8cae4a116304",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac2abca02e01c83cc696ebe8a760e842e2f8424/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac2abca02e01c83cc696ebe8a760e842e2f8424/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=eac2abca02e01c83cc696ebe8a760e842e2f8424",
        "patch": "@@ -97,7 +97,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n \n     search_widget = new QLineEdit(this);\n #if QT_VERSION >= 0x040700\n-    search_widget->setPlaceholderText(tr(\"Enter address or label to search\"));\n+    search_widget->setPlaceholderText(tr(\"Enter address, transaction id, or label to search\"));\n #endif\n     hlayout->addWidget(search_widget);\n "
      }
    ]
  },
  {
    "sha": "63c2d83e58c7506a1030e7fe4dcea84cdce97147",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2MyZDgzZTU4Yzc1MDZhMTAzMGU3ZmU0ZGNlYTg0Y2RjZTk3MTQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T14:22:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T14:37:37Z"
      },
      "message": "Explicitly state assumption that state.m_chain_sync.m_work_header != nullptr in ConsiderEviction\n\nStatic analyzer (and humans!) will see ...\n\n```\nelse if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && ...\n```\n\n... and infer that state.m_chain_sync.m_work_header might be set to nullptr,\nand thus flag `state.m_chain_sync.m_work_header->GetBlockHash().ToString()`\nas a potential null pointer dereference.\n\nThis commit makes the tacit assumption (m_work_header != nullptr) explicit.\n\nCode introduced in 5a6d00 (\"Permit disconnection of outbound peers on\nbad/slow chains\") which was merged into master four days ago.",
      "tree": {
        "sha": "677047ac759c3a07d737cdd8195f8ee87ebc03d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/677047ac759c3a07d737cdd8195f8ee87ebc03d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe503e118f08a9a781d8cc1a6cdde5a615178433"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38b9703d9105b56909461ed2578eef8d924659a6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c2d83e58c7506a1030e7fe4dcea84cdce97147/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c2d83e58c7506a1030e7fe4dcea84cdce97147/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=63c2d83e58c7506a1030e7fe4dcea84cdce97147",
        "patch": "@@ -3006,6 +3006,7 @@ void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n                 LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n                 pto->fDisconnect = true;\n             } else {\n+                assert(state.m_chain_sync.m_work_header);\n                 LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n                 connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n                 state.m_chain_sync.m_sent_getheaders = true;"
      }
    ]
  },
  {
    "sha": "76b33491596736ca804e3a29bd8398d7a1516ab7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmIzMzQ5MTU5NjczNmNhODA0ZTNhMjliZDgzOThkN2ExNTE2YWI3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T15:08:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T15:08:24Z"
      },
      "message": "Merge #11468: [tests] Make comp test framework more debuggable\n\n748157913 [tests] Make comp test framework more debuggable (John Newbery)\n\nPull request description:\n\n  We should remove the comparison test framework entirely (see #10603).\n\n  Until we do that, let's make it a bit more debuggable. Currently, if there's an assert in the framework, it's very difficult to track down where we are in the test generator. Make the logging a bit better to help with debugging.\n\n  Before this PR:\n\n  ```\n  \u2192 ./p2p-fullblocktest.py\n  2017-10-09 14:05:11.302000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testzdnax_yr\n  2017-10-09 14:05:11.557000 TestFramework.mininode (INFO): Connecting to Bitcoin Node: 127.0.0.1:11975\n  2017-10-09 14:05:11.712000 TestFramework.comptool (INFO): Test 1: PASS\n  2017-10-09 14:05:11.947000 TestFramework.comptool (INFO): Test 2: PASS\n  2017-10-09 14:05:12.057000 TestFramework.comptool (INFO): Test 3: PASS\n  2017-10-09 14:05:12.058000 TestFramework (ERROR): Assertion failed\n  Traceback (most recent call last):\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/test_framework.py\", line 117, in main\n      self.run_test()\n    File \"./p2p-fullblocktest.py\", line 72, in run_test\n      self.test.run()\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/comptool.py\", line 306, in run\n      assert test_number != 4\n  AssertionError\n  2017-10-09 14:05:12.059000 TestFramework (INFO): Stopping nodes\n  2017-10-09 14:05:14.203000 TestFramework (WARNING): Not cleaning up dir /tmp/user/1000/testzdnax_yr\n  2017-10-09 14:05:14.204000 TestFramework (ERROR): Test failed. Test logging available at /tmp/user/1000/testzdnax_yr/test_framework.log\n  ```\n\n  With this PR:\n\n  ```\n  \u2192 ./p2p-fullblocktest.py\n  2017-10-09 14:03:54.069000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testuey7t3tf\n  2017-10-09 14:03:54.329000 TestFramework.mininode (INFO): Connecting to Bitcoin Node: 127.0.0.1:11783\n  2017-10-09 14:03:54.383000 TestFramework.comptool (INFO): Running test 1: ./p2p-fullblocktest.py line 184\n  2017-10-09 14:03:54.496000 TestFramework.comptool (INFO): Running test 2: ./p2p-fullblocktest.py line 193\n  2017-10-09 14:03:54.758000 TestFramework.comptool (INFO): Running test 3: ./p2p-fullblocktest.py line 205\n  2017-10-09 14:03:54.867000 TestFramework.comptool (INFO): Running test 4: ./p2p-fullblocktest.py line 208\n  2017-10-09 14:03:54.867000 TestFramework (ERROR): Assertion failed\n  Traceback (most recent call last):\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/test_framework.py\", line 117, in main\n      self.run_test()\n    File \"./p2p-fullblocktest.py\", line 72, in run_test\n      self.test.run()\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/comptool.py\", line 309, in run\n      assert test_number != 4\n  AssertionError\n  2017-10-09 14:03:54.868000 TestFramework (INFO): Stopping nodes\n  2017-10-09 14:03:56.950000 TestFramework (WARNING): Not cleaning up dir /tmp/user/1000/testuey7t3tf\n  2017-10-09 14:03:56.950000 TestFramework (ERROR): Test failed. Test logging available at /tmp/user/1000/testuey7t3tf/test_framework.log\n  ```\n\nTree-SHA512: 5525958b0098d661c281bd955c92c72bf81359464376e96d44e6c88f18aea57ba08270ecd564edda4b47d674e3b27d20e5b1060544bf8dd5c6a68103d2bb35b8",
      "tree": {
        "sha": "15200f77e126dfe63b5eddec3a3b04f01f2f5d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15200f77e126dfe63b5eddec3a3b04f01f2f5d79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76b33491596736ca804e3a29bd8398d7a1516ab7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBcDoAAoJENLqSFDnUosl/icP/A3TW8XHCvcjeft5+XnmfKeD\nyQhq+VyNwJ0cE8rDQeKet5d0rfpQ9mgEE7aulSb7BJdvIb3/gEBPeb+g3NcZJDLD\nHzsBbD8kYr7MwA/xey7y8P7hoVDi6bJNR47IfxOcqowqCWBzCoPI+K7fvuxU/59H\nTpuN9dxmZhrp7fPhZfrYluNTJKPRfo291rqrBd5tAVcjdjuOH5T6sB8QrhBOh5cg\ngX4eXWPLWaydev3UNOH2gpvnxG6dLI3AQK69zi89QHfjOYbKGO6F+kIh4/IVj9t4\nUqgq+am+KsCJkJ1hbPd6sOYhwepZJm6E9YRu6YH7kI2jfn4OOp03z5uVSEIMkOY9\nEp3Zl2sKr363QD7R225d4qDDov/av1BWcuYwTLl4q2G5xr6Ue11HgHiTTpMxAkNF\nk55HT8WBFwEmQD3Sd0vd1K/ePbW2VTYSwoD6QPDd6tP+J6YIxdL16VrlZ7GuEd4G\nrZMvuqtVB41perFafgvfg2iIwnm+BJ/N7VhP4ltlaxiCGxz0PNF066wAXFM+mkTA\nRbhu+zSlekudBCIfIiLI9ImahlSPjUqUPgRpEtkLfgiBWU86S9RzoWP/H3v6YDJh\nQybSJGA+iZljoXrz0+WIR7C/2axi/tYZxlI2J+E1ELkITP9fnDhO5WgiUQlBe5JA\nuDAQC/7+MsZsntRo44v/\n=iznS\n-----END PGP SIGNATURE-----",
        "payload": "tree 15200f77e126dfe63b5eddec3a3b04f01f2f5d79\nparent fe503e118f08a9a781d8cc1a6cdde5a615178433\nparent 7481579131e3a330300d2c7f9a8f93aa67be33e1\nauthor MarcoFalke <falke.marco@gmail.com> 1510326489 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510326504 -0500\n\nMerge #11468: [tests] Make comp test framework more debuggable\n\n748157913 [tests] Make comp test framework more debuggable (John Newbery)\n\nPull request description:\n\n  We should remove the comparison test framework entirely (see #10603).\n\n  Until we do that, let's make it a bit more debuggable. Currently, if there's an assert in the framework, it's very difficult to track down where we are in the test generator. Make the logging a bit better to help with debugging.\n\n  Before this PR:\n\n  ```\n  \u2192 ./p2p-fullblocktest.py\n  2017-10-09 14:05:11.302000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testzdnax_yr\n  2017-10-09 14:05:11.557000 TestFramework.mininode (INFO): Connecting to Bitcoin Node: 127.0.0.1:11975\n  2017-10-09 14:05:11.712000 TestFramework.comptool (INFO): Test 1: PASS\n  2017-10-09 14:05:11.947000 TestFramework.comptool (INFO): Test 2: PASS\n  2017-10-09 14:05:12.057000 TestFramework.comptool (INFO): Test 3: PASS\n  2017-10-09 14:05:12.058000 TestFramework (ERROR): Assertion failed\n  Traceback (most recent call last):\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/test_framework.py\", line 117, in main\n      self.run_test()\n    File \"./p2p-fullblocktest.py\", line 72, in run_test\n      self.test.run()\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/comptool.py\", line 306, in run\n      assert test_number != 4\n  AssertionError\n  2017-10-09 14:05:12.059000 TestFramework (INFO): Stopping nodes\n  2017-10-09 14:05:14.203000 TestFramework (WARNING): Not cleaning up dir /tmp/user/1000/testzdnax_yr\n  2017-10-09 14:05:14.204000 TestFramework (ERROR): Test failed. Test logging available at /tmp/user/1000/testzdnax_yr/test_framework.log\n  ```\n\n  With this PR:\n\n  ```\n  \u2192 ./p2p-fullblocktest.py\n  2017-10-09 14:03:54.069000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testuey7t3tf\n  2017-10-09 14:03:54.329000 TestFramework.mininode (INFO): Connecting to Bitcoin Node: 127.0.0.1:11783\n  2017-10-09 14:03:54.383000 TestFramework.comptool (INFO): Running test 1: ./p2p-fullblocktest.py line 184\n  2017-10-09 14:03:54.496000 TestFramework.comptool (INFO): Running test 2: ./p2p-fullblocktest.py line 193\n  2017-10-09 14:03:54.758000 TestFramework.comptool (INFO): Running test 3: ./p2p-fullblocktest.py line 205\n  2017-10-09 14:03:54.867000 TestFramework.comptool (INFO): Running test 4: ./p2p-fullblocktest.py line 208\n  2017-10-09 14:03:54.867000 TestFramework (ERROR): Assertion failed\n  Traceback (most recent call last):\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/test_framework.py\", line 117, in main\n      self.run_test()\n    File \"./p2p-fullblocktest.py\", line 72, in run_test\n      self.test.run()\n    File \"/home/ubuntu/bitcoin/test/functional/test_framework/comptool.py\", line 309, in run\n      assert test_number != 4\n  AssertionError\n  2017-10-09 14:03:54.868000 TestFramework (INFO): Stopping nodes\n  2017-10-09 14:03:56.950000 TestFramework (WARNING): Not cleaning up dir /tmp/user/1000/testuey7t3tf\n  2017-10-09 14:03:56.950000 TestFramework (ERROR): Test failed. Test logging available at /tmp/user/1000/testuey7t3tf/test_framework.log\n  ```\n\nTree-SHA512: 5525958b0098d661c281bd955c92c72bf81359464376e96d44e6c88f18aea57ba08270ecd564edda4b47d674e3b27d20e5b1060544bf8dd5c6a68103d2bb35b8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76b33491596736ca804e3a29bd8398d7a1516ab7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76b33491596736ca804e3a29bd8398d7a1516ab7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76b33491596736ca804e3a29bd8398d7a1516ab7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe503e118f08a9a781d8cc1a6cdde5a615178433"
      },
      {
        "sha": "7481579131e3a330300d2c7f9a8f93aa67be33e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7481579131e3a330300d2c7f9a8f93aa67be33e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7481579131e3a330300d2c7f9a8f93aa67be33e1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "03f967ba71d57fad1ecf2dbb5127ae8a78ade69e",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76b33491596736ca804e3a29bd8398d7a1516ab7/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76b33491596736ca804e3a29bd8398d7a1516ab7/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=76b33491596736ca804e3a29bd8398d7a1516ab7",
        "patch": "@@ -295,8 +295,11 @@ def run(self):\n         # Wait until verack is received\n         self.wait_for_verack()\n \n-        test_number = 1\n-        for test_instance in self.test_generator.get_tests():\n+        test_number = 0\n+        tests = self.test_generator.get_tests()\n+        for test_instance in tests:\n+            test_number += 1\n+            logger.info(\"Running test %d: %s line %s\" % (test_number, tests.gi_code.co_filename, tests.gi_frame.f_lineno))\n             # We use these variables to keep track of the last block\n             # and last transaction in the tests, which are used\n             # if we're not syncing on every block or every tx.\n@@ -397,9 +400,6 @@ def run(self):\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-            logger.info(\"Test %d: PASS\" % test_number)\n-            test_number += 1\n-\n         [ c.disconnect_node() for c in self.connections ]\n         self.wait_for_disconnections()\n         self.block_store.close()"
      }
    ]
  },
  {
    "sha": "22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmNkZjkzYzA2MmVlYWEwZjhmOWQ2MjIwZjAxYjY3MjQwMDczZGZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T15:43:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T15:43:55Z"
      },
      "message": "Merge #11316: [qt] Add use available balance in send coins dialog (CryptAxe, promag)\n\nd052e3847 [qt] Add use available balance in send coins dialog (CryptAxe)\n\nPull request description:\n\n  This is an alternative to #11098 to handle #11033 where a new button `Use available balance` is added to each entry. When activated, the available balance is calculated by using the coin control (if any) and then it's subtracted the remaining recipient amounts. If this amount is positive then the `Subtract fee from amount` is automatically selected.\n\n  Comparing to #11098, this has the advantage to avoid the fair amount division over the recipients and allows to fine adjust the amounts in multiple iterations.\n\n  Started from @CryptAxe commit 89e9eda to credit some code.\n\n  <img width=\"965\" alt=\"screen shot 2017-09-13 at 01 32 44\" src=\"https://user-images.githubusercontent.com/3534524/30354518-e1bee31c-9824-11e7-9354-300aa63cdfd0.png\">\n  <img width=\"964\" alt=\"screen shot 2017-09-13 at 01 44 57\" src=\"https://user-images.githubusercontent.com/3534524/30354598-5731ac9c-9825-11e7-9d5f-8781988ed219.png\">\n\nTree-SHA512: 01d20c13fd8b6c2a0ca1d74d3a9027c6922e6dccd3b08e59d5a72636be7072ed5eca7ebc5d431299497dd3374e83753220ad4174d8bc46dadb4b2f54973036a5",
      "tree": {
        "sha": "74b132efb08177b96a04ae673aca82a7e45ea1bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74b132efb08177b96a04ae673aca82a7e45ea1bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBck7AAoJENLqSFDnUosl+ycP/2eH81uzQiF0x/d3/eA1stE6\neAxtcZyXBCxZrDXx2HgmhbZnDV77whbEChhsm4hmEyJK4s0YGUdCniwlogEIMaRL\nkkwJOUYrEgRbF+Xb+6rYDeM+AZdgL834KmtVSnTP2n+mN2pKNjm+EsZMeIaMomOl\nBhQYNvKs0Rg0RIEf/qp1vfXGiDajAmYQlOMxBVILi1GdgcFMO6rrgTh9d4j0Wso7\nk5Y4U8hRsfb7Enr2v0uuvVgMAqIry3GWkJcFb/Y6uKmaRndKNBL2cSwWYrQDSi7d\nWALl/X/1CD/9352ncIHq128pmoBxMHPhz8yv5afpld9Z8jjcH0w64nziYPe3ns6M\nW7F7IuaRMpmvoASmJaWM91VtTadxmC30IWKdU6IAvaXYUPfw2fr69Hwsejx72uuX\nDS3H60c2zWXgOd2QlVnUsyIsaXlliWSchhlh4GzrWnFoiadeIJiuWejGbJ9zaLY/\nbeohVLCiOYqQpIx1MI07DvX0S/8+WpvsgpbyfnGyeWGuIC637XIHQVY5gtRyqLb/\nx9lJwEXs9FXFKZffCwXXf2qFok3aPR8aDtLPKk9rGocifPpOOCmMiIOJVuwnUUV/\nUjiTFgEnzgym6loYyWqGAJ7hpvrf8a3ttXk7fR3Fsn8Pv5/uRvcHZgeUQqNmtjiw\nyBV6qcVOz5nJxOmm/FzV\n=evYI\n-----END PGP SIGNATURE-----",
        "payload": "tree 74b132efb08177b96a04ae673aca82a7e45ea1bc\nparent 76b33491596736ca804e3a29bd8398d7a1516ab7\nparent d052e3847c84fc89f3a3ec6ddef15bbe836d755d\nauthor MarcoFalke <falke.marco@gmail.com> 1510328630 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510328635 -0500\n\nMerge #11316: [qt] Add use available balance in send coins dialog (CryptAxe, promag)\n\nd052e3847 [qt] Add use available balance in send coins dialog (CryptAxe)\n\nPull request description:\n\n  This is an alternative to #11098 to handle #11033 where a new button `Use available balance` is added to each entry. When activated, the available balance is calculated by using the coin control (if any) and then it's subtracted the remaining recipient amounts. If this amount is positive then the `Subtract fee from amount` is automatically selected.\n\n  Comparing to #11098, this has the advantage to avoid the fair amount division over the recipients and allows to fine adjust the amounts in multiple iterations.\n\n  Started from @CryptAxe commit 89e9eda to credit some code.\n\n  <img width=\"965\" alt=\"screen shot 2017-09-13 at 01 32 44\" src=\"https://user-images.githubusercontent.com/3534524/30354518-e1bee31c-9824-11e7-9354-300aa63cdfd0.png\">\n  <img width=\"964\" alt=\"screen shot 2017-09-13 at 01 44 57\" src=\"https://user-images.githubusercontent.com/3534524/30354598-5731ac9c-9825-11e7-9d5f-8781988ed219.png\">\n\nTree-SHA512: 01d20c13fd8b6c2a0ca1d74d3a9027c6922e6dccd3b08e59d5a72636be7072ed5eca7ebc5d431299497dd3374e83753220ad4174d8bc46dadb4b2f54973036a5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76b33491596736ca804e3a29bd8398d7a1516ab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76b33491596736ca804e3a29bd8398d7a1516ab7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76b33491596736ca804e3a29bd8398d7a1516ab7"
      },
      {
        "sha": "d052e3847c84fc89f3a3ec6ddef15bbe836d755d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d052e3847c84fc89f3a3ec6ddef15bbe836d755d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d052e3847c84fc89f3a3ec6ddef15bbe836d755d"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 55,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d0748c2edb8ca7cf3497d9fc6cfdfdd3527a8b3e",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "patch": "@@ -163,7 +163,7 @@\n      </widget>\n     </item>\n     <item row=\"2\" column=\"1\">\n-     <layout class=\"QHBoxLayout\" name=\"horizontalLayoutAmount\" stretch=\"0,1\">\n+     <layout class=\"QHBoxLayout\" name=\"horizontalLayoutAmount\" stretch=\"0,1,0\">\n       <item>\n        <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n       </item>\n@@ -177,6 +177,13 @@\n         </property>\n        </widget>\n       </item>\n+      <item>\n+       <widget class=\"QPushButton\" name=\"useAvailableBalanceButton\">\n+        <property name=\"text\">\n+         <string>Use available balance</string>\n+        </property>\n+       </widget>\n+      </item>\n      </layout>\n     </item>\n     <item row=\"3\" column=\"0\">"
      },
      {
        "sha": "0d4cab2091d50e1e48f09770ffa096f07e763900",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "patch": "@@ -402,6 +402,7 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n     entry->setModel(model);\n     ui->entries->addWidget(entry);\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n+    connect(entry, SIGNAL(useAvailableBalance(SendCoinsEntry*)), this, SLOT(useAvailableBalance(SendCoinsEntry*)));\n     connect(entry, SIGNAL(payAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n     connect(entry, SIGNAL(subtractFeeFromAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n \n@@ -599,6 +600,31 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n     minimizeFeeSection(true);\n }\n \n+void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n+{\n+    // Get CCoinControl instance if CoinControl is enabled or create a new one.\n+    CCoinControl coin_control;\n+    if (model->getOptionsModel()->getCoinControlFeatures()) {\n+        coin_control = *CoinControlDialog::coinControl;\n+    }\n+\n+    // Calculate available amount to send.\n+    CAmount amount = model->getBalance(&coin_control);\n+    for (int i = 0; i < ui->entries->count(); ++i) {\n+        SendCoinsEntry* e = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n+        if (e && !e->isHidden() && e != entry) {\n+            amount -= e->getValue().amount;\n+        }\n+    }\n+\n+    if (amount > 0) {\n+      entry->checkSubtractFeeFromAmount();\n+      entry->setAmount(amount);\n+    } else {\n+      entry->setAmount(0);\n+    }\n+}\n+\n void SendCoinsDialog::setMinimumFee()\n {\n     ui->customFee->setValue(GetRequiredFee(1000));"
      },
      {
        "sha": "2ae6ccfa648be62a65ab93236807f757a9e796dd",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "patch": "@@ -76,6 +76,7 @@ private Q_SLOTS:\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n     void removeEntry(SendCoinsEntry* entry);\n+    void useAvailableBalance(SendCoinsEntry* entry);\n     void updateDisplayUnit();\n     void coinControlFeatureChanged(bool);\n     void coinControlButtonClicked();"
      },
      {
        "sha": "8cf8db803022573889c35e3fd2a63b486d1486c9",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "patch": "@@ -48,6 +48,7 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *par\n     connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n+    connect(ui->useAvailableBalanceButton, SIGNAL(clicked()), this, SLOT(useAvailableBalanceClicked()));\n }\n \n SendCoinsEntry::~SendCoinsEntry()\n@@ -112,11 +113,21 @@ void SendCoinsEntry::clear()\n     updateDisplayUnit();\n }\n \n+void SendCoinsEntry::checkSubtractFeeFromAmount()\n+{\n+    ui->checkboxSubtractFeeFromAmount->setChecked(true);\n+}\n+\n void SendCoinsEntry::deleteClicked()\n {\n     Q_EMIT removeEntry(this);\n }\n \n+void SendCoinsEntry::useAvailableBalanceClicked()\n+{\n+    Q_EMIT useAvailableBalance(this);\n+}\n+\n bool SendCoinsEntry::validate()\n {\n     if (!model)\n@@ -228,6 +239,11 @@ void SendCoinsEntry::setAddress(const QString &address)\n     ui->payAmount->setFocus();\n }\n \n+void SendCoinsEntry::setAmount(const CAmount &amount)\n+{\n+    ui->payAmount->setValue(amount);\n+}\n+\n bool SendCoinsEntry::isClear()\n {\n     return ui->payTo->text().isEmpty() && ui->payTo_is->text().isEmpty() && ui->payTo_s->text().isEmpty();"
      },
      {
        "sha": "557fea4e5476047ce8f5233bd5f9704f1cd44a7d",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cdf93c062eeaa0f8f9d6220f01b67240073dfb/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "patch": "@@ -38,6 +38,7 @@ class SendCoinsEntry : public QStackedWidget\n \n     void setValue(const SendCoinsRecipient &value);\n     void setAddress(const QString &address);\n+    void setAmount(const CAmount &amount);\n \n     /** Set up the tab chain manually, as Qt messes up the tab chain by default in some cases\n      *  (issue https://bugreports.qt-project.org/browse/QTBUG-10907).\n@@ -48,14 +49,17 @@ class SendCoinsEntry : public QStackedWidget\n \n public Q_SLOTS:\n     void clear();\n+    void checkSubtractFeeFromAmount();\n \n Q_SIGNALS:\n     void removeEntry(SendCoinsEntry *entry);\n+    void useAvailableBalance(SendCoinsEntry* entry);\n     void payAmountChanged();\n     void subtractFeeFromAmountChanged();\n \n private Q_SLOTS:\n     void deleteClicked();\n+    void useAvailableBalanceClicked();\n     void on_payTo_textChanged(const QString &address);\n     void on_addressBookButton_clicked();\n     void on_pasteButton_clicked();"
      }
    ]
  },
  {
    "sha": "109a85899571aa499572e211bb08f05715e8743b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDlhODU4OTk1NzFhYTQ5OTU3MmUyMTFiYjA4ZjA1NzE1ZTg3NDNi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T22:08:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T16:16:07Z"
      },
      "message": "tests: Add missing locks to tests\n\nAdd missing locks to tests to satisfy lock requirements (such as\nEXCLUSIVE_LOCKS_REQUIRED(...) (Clang Thread Safety Analysis),\nAssertLockHeld(...) and implicit lock assumptions).",
      "tree": {
        "sha": "0a5db134a775920a176e27e76bcf0f69a07dd214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5db134a775920a176e27e76bcf0f69a07dd214"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/109a85899571aa499572e211bb08f05715e8743b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109a85899571aa499572e211bb08f05715e8743b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/109a85899571aa499572e211bb08f05715e8743b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109a85899571aa499572e211bb08f05715e8743b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe503e118f08a9a781d8cc1a6cdde5a615178433"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 60,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4289bf5d87b73461c1e50a60502ddb6d89709488",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -164,7 +164,10 @@ void TestGUI()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+    {\n+        LOCK(cs_main);\n+        wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+    }\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "bf6f2533df15d3725fd47d7d4c08b0eb1bd27f1f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 7,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -66,11 +66,14 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     dummyNode1.fSuccessfullyConnected = true;\n \n     // This test requires that we have a chain with non-zero work.\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip() != nullptr);\n     BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n \n     // Test starts here\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    LOCK(dummyNode1.cs_vSend);\n     BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     dummyNode1.vSendMsg.clear();\n \n@@ -183,7 +186,11 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    }\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n@@ -194,11 +201,18 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode2.GetId(), 50);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode2.GetId(), 50);\n+    }\n+    LOCK(dummyNode2.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n-    Misbehaving(dummyNode2.GetId(), 50);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode2.GetId(), 50);\n+    }\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n \n@@ -219,13 +233,23 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), 100);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 100);\n+    }\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n-    Misbehaving(dummyNode1.GetId(), 10);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 10);\n+    }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n-    Misbehaving(dummyNode1.GetId(), 1);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 1);\n+    }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n@@ -249,7 +273,11 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n-    Misbehaving(dummyNode.GetId(), 100);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode.GetId(), 100);\n+    }\n+    LOCK(dummyNode.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n@@ -266,6 +294,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n+    LOCK(cs_main);\n     it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n@@ -335,6 +364,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         BOOST_CHECK(!AddOrphanTx(MakeTransactionRef(tx), i));\n     }\n \n+    LOCK(cs_main);\n     // Test EraseOrphansFor:\n     for (NodeId i = 0; i < 3; i++)\n     {"
      },
      {
        "sha": "71baf286e9c4bf35f28bd46e30ab22fc9bc723e7",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -62,6 +62,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     // Do a simple ShortTxIDs RT\n@@ -161,6 +162,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;\n@@ -227,6 +229,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(*block.vtx[1]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;"
      },
      {
        "sha": "c7abad8026e761f094bc9d1407ec5120620fb5ce",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -165,6 +165,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n+    LOCK(pool.cs);\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -375,6 +376,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     }\n     sortedOrder[4] = tx3.GetHash().ToString(); // 0\n \n+    LOCK(pool.cs);\n     CheckSort<ancestor_score>(pool, sortedOrder);\n \n     /* low fee parent with high fee child */"
      },
      {
        "sha": "fbe9e217ec11602ca6bf6974b7ee296f68e0bb64",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -149,7 +149,10 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(MakeTransactionRef(tx));\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    {\n+        LOCK(cs_main);\n+        IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    }\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      },
      {
        "sha": "ce3060a5f31f4cbb2ddd127123b4e78af3d6e91a",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -66,6 +66,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     // Test 1: block with both of those transactions should be rejected.\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n@@ -151,7 +152,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n {\n     // Test that passing CheckInputs with one set of script flags doesn't imply\n     // that we would pass again with a different set of flags.\n-    InitScriptExecutionCache();\n+    {\n+        LOCK(cs_main);\n+        InitScriptExecutionCache();\n+    }\n \n     CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n     CScript p2sh_scriptPubKey = GetScriptForDestination(CScriptID(p2pk_scriptPubKey));"
      },
      {
        "sha": "503dedb5b312a9d1bb1f163fe821bbf690275278",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -489,6 +489,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         vpwallets[0] = &wallet;\n         ::importwallet(request);\n \n+        LOCK(wallet.cs_wallet);\n         BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3);\n         BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103);\n         for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n@@ -534,6 +535,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n+        LOCK(cs_main);\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n@@ -547,6 +549,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         wtx.SetMerkleBranch(block, 0);\n     }\n     wallet.AddToWallet(wtx);\n+    LOCK(wallet.cs_wallet);\n     return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n }\n \n@@ -583,6 +586,7 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = CKeyID();\n+    LOCK(pwalletMain->cs_wallet);\n     pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n     pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n     pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n@@ -625,6 +629,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        LOCK(wallet->cs_wallet);\n         auto it = wallet->mapWallet.find(wtx.GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n         CreateAndProcessBlock({CMutableTransaction(*it->second.tx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));"
      }
    ]
  },
  {
    "sha": "ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTkyMjQzZTY2ZjJkZjAzYjNhNzU5YThmZmI3NWRjMDZmMGNlYTBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T16:52:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T16:54:16Z"
      },
      "message": "Merge #11623: tests: Add missing locks to tests\n\n109a85899 tests: Add missing locks to tests (practicalswift)\n\nPull request description:\n\n  Add missing locks to tests to satisfy lock requirements (such as `EXCLUSIVE_LOCKS_REQUIRED(...)` (Clang Thread Safety Analysis, see #11226), `AssertLockHeld(...)` and implicit lock assumptions).\n\nTree-SHA512: 1aaeb1da89df1779f02fcceff9d2f8ea24a3926d421f9ea305a19be04dd0b3e63d91f6c1ed22fb7e6988343f6a5288829a387ef872cfa7b6add57bd01046b5d9",
      "tree": {
        "sha": "c0c39162e9f995662f5115f471b55c0664aeb144",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0c39162e9f995662f5115f471b55c0664aeb144"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBdm4AAoJENLqSFDnUosloTkP/iEFuJvHqUkV61+UQgun4/WT\na5euNt+yimtEGaw5ehoGh657+O1GZEyX0qpNUzq4Ln8xYJLUtmRcYh5VKowtDS2O\nLP8jC2/sPYv1pxE4qqtYjGplV1klTAkr5lHcIPWY1YuVVMFRl1zejbNg/ZWMJaR9\nUGDkxKyTKC9uWeD3NE4ug8fmdL3SVEQ2N1nLavPo1m2pDccriSoXBsh61klogZ04\nqyP4vMdCUjhriKE5dDC6KtmIujuglHf5i3QPa9bw4nYsAowy+xbamylkPIxW++hO\nC2WuL+XoIvpgo9zixEVJ1bks85yD7ibeQbIlRyNz1RBXNzk/XGtGYZa2UJmFh5tf\nYXn5/0lZn8ogl/4afslrswMNeqAvXbRO9ch9wTsrq2xCeexL467f7aLAIxGkQPXr\nO8kr0iGm7ZfKPD9JlbNOdBXVAodRxSGTVo63+MBKY/WngtJcSInXfZp3DwnGHoF0\nv/wt3S9nYYYrV8XQKEyYpPBG+v744/fvuJ2XNJGcFAxmipNYZo5hj/HI2bh1/GP3\nkRQ747LCZegsVsCV/cSUjaUSJOmNL5H2BGQ4Zdu5e6qTtB7J7vI0EIkj8YOliiCx\nHteyTbTIPcUfRujnq5fWH+FwqBiNNgonWZXk2nRlFq6eR2+vH0yIkGckWhMBCjlx\nyHk+7XT9ueQ0zMs2c4dZ\n=0vR/\n-----END PGP SIGNATURE-----",
        "payload": "tree c0c39162e9f995662f5115f471b55c0664aeb144\nparent 22cdf93c062eeaa0f8f9d6220f01b67240073dfb\nparent 109a85899571aa499572e211bb08f05715e8743b\nauthor MarcoFalke <falke.marco@gmail.com> 1510332747 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510332856 -0500\n\nMerge #11623: tests: Add missing locks to tests\n\n109a85899 tests: Add missing locks to tests (practicalswift)\n\nPull request description:\n\n  Add missing locks to tests to satisfy lock requirements (such as `EXCLUSIVE_LOCKS_REQUIRED(...)` (Clang Thread Safety Analysis, see #11226), `AssertLockHeld(...)` and implicit lock assumptions).\n\nTree-SHA512: 1aaeb1da89df1779f02fcceff9d2f8ea24a3926d421f9ea305a19be04dd0b3e63d91f6c1ed22fb7e6988343f6a5288829a387ef872cfa7b6add57bd01046b5d9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cdf93c062eeaa0f8f9d6220f01b67240073dfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22cdf93c062eeaa0f8f9d6220f01b67240073dfb"
      },
      {
        "sha": "109a85899571aa499572e211bb08f05715e8743b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109a85899571aa499572e211bb08f05715e8743b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/109a85899571aa499572e211bb08f05715e8743b"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 60,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4289bf5d87b73461c1e50a60502ddb6d89709488",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -164,7 +164,10 @@ void TestGUI()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+    {\n+        LOCK(cs_main);\n+        wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+    }\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "bf6f2533df15d3725fd47d7d4c08b0eb1bd27f1f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 7,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -66,11 +66,14 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     dummyNode1.fSuccessfullyConnected = true;\n \n     // This test requires that we have a chain with non-zero work.\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip() != nullptr);\n     BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n \n     // Test starts here\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    LOCK(dummyNode1.cs_vSend);\n     BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     dummyNode1.vSendMsg.clear();\n \n@@ -183,7 +186,11 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    }\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n@@ -194,11 +201,18 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode2.GetId(), 50);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode2.GetId(), 50);\n+    }\n+    LOCK(dummyNode2.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n-    Misbehaving(dummyNode2.GetId(), 50);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode2.GetId(), 50);\n+    }\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n \n@@ -219,13 +233,23 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), 100);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 100);\n+    }\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n-    Misbehaving(dummyNode1.GetId(), 10);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 10);\n+    }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n-    Misbehaving(dummyNode1.GetId(), 1);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 1);\n+    }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n@@ -249,7 +273,11 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n-    Misbehaving(dummyNode.GetId(), 100);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode.GetId(), 100);\n+    }\n+    LOCK(dummyNode.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n@@ -266,6 +294,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n+    LOCK(cs_main);\n     it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n@@ -335,6 +364,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         BOOST_CHECK(!AddOrphanTx(MakeTransactionRef(tx), i));\n     }\n \n+    LOCK(cs_main);\n     // Test EraseOrphansFor:\n     for (NodeId i = 0; i < 3; i++)\n     {"
      },
      {
        "sha": "71baf286e9c4bf35f28bd46e30ab22fc9bc723e7",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -62,6 +62,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     // Do a simple ShortTxIDs RT\n@@ -161,6 +162,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;\n@@ -227,6 +229,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(*block.vtx[1]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;"
      },
      {
        "sha": "c7abad8026e761f094bc9d1407ec5120620fb5ce",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -165,6 +165,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n+    LOCK(pool.cs);\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -375,6 +376,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     }\n     sortedOrder[4] = tx3.GetHash().ToString(); // 0\n \n+    LOCK(pool.cs);\n     CheckSort<ancestor_score>(pool, sortedOrder);\n \n     /* low fee parent with high fee child */"
      },
      {
        "sha": "fbe9e217ec11602ca6bf6974b7ee296f68e0bb64",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -149,7 +149,10 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(MakeTransactionRef(tx));\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    {\n+        LOCK(cs_main);\n+        IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    }\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      },
      {
        "sha": "ce3060a5f31f4cbb2ddd127123b4e78af3d6e91a",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -66,6 +66,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     // Test 1: block with both of those transactions should be rejected.\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n@@ -151,7 +152,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n {\n     // Test that passing CheckInputs with one set of script flags doesn't imply\n     // that we would pass again with a different set of flags.\n-    InitScriptExecutionCache();\n+    {\n+        LOCK(cs_main);\n+        InitScriptExecutionCache();\n+    }\n \n     CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n     CScript p2sh_scriptPubKey = GetScriptForDestination(CScriptID(p2pk_scriptPubKey));"
      },
      {
        "sha": "503dedb5b312a9d1bb1f163fe821bbf690275278",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "patch": "@@ -489,6 +489,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         vpwallets[0] = &wallet;\n         ::importwallet(request);\n \n+        LOCK(wallet.cs_wallet);\n         BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3);\n         BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103);\n         for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n@@ -534,6 +535,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n+        LOCK(cs_main);\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n@@ -547,6 +549,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         wtx.SetMerkleBranch(block, 0);\n     }\n     wallet.AddToWallet(wtx);\n+    LOCK(wallet.cs_wallet);\n     return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n }\n \n@@ -583,6 +586,7 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = CKeyID();\n+    LOCK(pwalletMain->cs_wallet);\n     pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n     pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n     pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n@@ -625,6 +629,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        LOCK(wallet->cs_wallet);\n         auto it = wallet->mapWallet.find(wtx.GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n         CreateAndProcessBlock({CMutableTransaction(*it->second.tx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));"
      }
    ]
  },
  {
    "sha": "f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWNkOWIxYmZhZjY1YjRlMjRjMWViOWNhODI2ODUxM2U3OGNjNDU4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T02:25:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T16:56:45Z"
      },
      "message": "[tests] Move test_framework Bitcoin primitives into separate module\n\nmininode.py wildcard imports all names from primitives.py. This is\nto avoid having to change all test scripts that import from mininode.py.",
      "tree": {
        "sha": "d4f37ab8dbf724abc0fe78445dcb25261c4fdb13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4f37ab8dbf724abc0fe78445dcb25261c4fdb13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f4375f8e75f95522ad763d06da047b1b3893530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f4375f8e75f95522ad763d06da047b1b3893530",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4375f8e75f95522ad763d06da047b1b3893530"
      }
    ],
    "stats": {
      "total": 2625,
      "additions": 1320,
      "deletions": 1305
    },
    "files": [
      {
        "sha": "40d02f3ee0a63953dd7836816d257197d177a4ed",
        "filename": "test/functional/test_framework/messages.py",
        "status": "added",
        "additions": 1319,
        "deletions": 0,
        "changes": 1319,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
        "patch": "@@ -0,0 +1,1319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2010 ArtForz -- public domain half-a-node\n+# Copyright (c) 2012 Jeff Garzik\n+# Copyright (c) 2010-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Bitcoin test framework primitive and message strcutures\n+\n+CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n+    data structures that should map to corresponding structures in\n+    bitcoin/primitives\n+\n+msg_block, msg_tx, msg_headers, etc.:\n+    data structures that represent network messages\n+\n+ser_*, deser_*: functions that handle serialization/deserialization.\"\"\"\n+from codecs import encode\n+import copy\n+import hashlib\n+from io import BytesIO\n+import random\n+import socket\n+import struct\n+import time\n+\n+from test_framework.siphash import siphash256\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n+\n+MIN_VERSION_SUPPORTED = 60001\n+MY_VERSION = 70014  # past bip-31 for ping/pong\n+MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n+MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n+\n+MAX_INV_SZ = 50000\n+MAX_BLOCK_BASE_SIZE = 1000000\n+\n+COIN = 100000000 # 1 btc in satoshis\n+\n+NODE_NETWORK = (1 << 0)\n+# NODE_GETUTXO = (1 << 1)\n+# NODE_BLOOM = (1 << 2)\n+NODE_WITNESS = (1 << 3)\n+NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n+NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n+\n+# Serialization/deserialization tools\n+def sha256(s):\n+    return hashlib.new('sha256', s).digest()\n+\n+def ripemd160(s):\n+    return hashlib.new('ripemd160', s).digest()\n+\n+def hash256(s):\n+    return sha256(sha256(s))\n+\n+def ser_compact_size(l):\n+    r = b\"\"\n+    if l < 253:\n+        r = struct.pack(\"B\", l)\n+    elif l < 0x10000:\n+        r = struct.pack(\"<BH\", 253, l)\n+    elif l < 0x100000000:\n+        r = struct.pack(\"<BI\", 254, l)\n+    else:\n+        r = struct.pack(\"<BQ\", 255, l)\n+    return r\n+\n+def deser_compact_size(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    return nit\n+\n+def deser_string(f):\n+    nit = deser_compact_size(f)\n+    return f.read(nit)\n+\n+def ser_string(s):\n+    return ser_compact_size(len(s)) + s\n+\n+def deser_uint256(f):\n+    r = 0\n+    for i in range(8):\n+        t = struct.unpack(\"<I\", f.read(4))[0]\n+        r += t << (i * 32)\n+    return r\n+\n+\n+def ser_uint256(u):\n+    rs = b\"\"\n+    for i in range(8):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n+        u >>= 32\n+    return rs\n+\n+\n+def uint256_from_str(s):\n+    r = 0\n+    t = struct.unpack(\"<IIIIIIII\", s[:32])\n+    for i in range(8):\n+        r += t[i] << (i * 32)\n+    return r\n+\n+\n+def uint256_from_compact(c):\n+    nbytes = (c >> 24) & 0xFF\n+    v = (c & 0xFFFFFF) << (8 * (nbytes - 3))\n+    return v\n+\n+\n+def deser_vector(f, c):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = c()\n+        t.deserialize(f)\n+        r.append(t)\n+    return r\n+\n+\n+# ser_function_name: Allow for an alternate serialization function on the\n+# entries in the vector (we use this for serializing the vector of transactions\n+# for a witness block).\n+def ser_vector(l, ser_function_name=None):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        if ser_function_name:\n+            r += getattr(i, ser_function_name)()\n+        else:\n+            r += i.serialize()\n+    return r\n+\n+\n+def deser_uint256_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = deser_uint256(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_uint256_vector(l):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        r += ser_uint256(i)\n+    return r\n+\n+\n+def deser_string_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = deser_string(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_string_vector(l):\n+    r = ser_compact_size(len(l))\n+    for sv in l:\n+        r += ser_string(sv)\n+    return r\n+\n+\n+def deser_int_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = struct.unpack(\"<i\", f.read(4))[0]\n+        r.append(t)\n+    return r\n+\n+\n+def ser_int_vector(l):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        r += struct.pack(\"<i\", i)\n+    return r\n+\n+# Deserialize from a hex string representation (eg from RPC)\n+def FromHex(obj, hex_string):\n+    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n+    return obj\n+\n+# Convert a binary-serializable object to hex (eg for submission via RPC)\n+def ToHex(obj):\n+    return bytes_to_hex_str(obj.serialize())\n+\n+# Objects that map to bitcoind objects, which can be serialized/deserialized\n+\n+class CAddress():\n+    def __init__(self):\n+        self.nServices = 1\n+        self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n+        self.ip = \"0.0.0.0\"\n+        self.port = 0\n+\n+    def deserialize(self, f):\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.pchReserved = f.read(12)\n+        self.ip = socket.inet_ntoa(f.read(4))\n+        self.port = struct.unpack(\">H\", f.read(2))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += self.pchReserved\n+        r += socket.inet_aton(self.ip)\n+        r += struct.pack(\">H\", self.port)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n+                                                         self.ip, self.port)\n+\n+MSG_WITNESS_FLAG = 1<<30\n+\n+class CInv():\n+    typemap = {\n+        0: \"Error\",\n+        1: \"TX\",\n+        2: \"Block\",\n+        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n+        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n+        4: \"CompactBlock\"\n+    }\n+\n+    def __init__(self, t=0, h=0):\n+        self.type = t\n+        self.hash = h\n+\n+    def deserialize(self, f):\n+        self.type = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.type)\n+        r += ser_uint256(self.hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CInv(type=%s hash=%064x)\" \\\n+            % (self.typemap[self.type], self.hash)\n+\n+\n+class CBlockLocator():\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.vHave = []\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vHave = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256_vector(self.vHave)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n+            % (self.nVersion, repr(self.vHave))\n+\n+\n+class COutPoint():\n+    def __init__(self, hash=0, n=0):\n+        self.hash = hash\n+        self.n = n\n+\n+    def deserialize(self, f):\n+        self.hash = deser_uint256(f)\n+        self.n = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_uint256(self.hash)\n+        r += struct.pack(\"<I\", self.n)\n+        return r\n+\n+    def __repr__(self):\n+        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n+\n+\n+class CTxIn():\n+    def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n+        if outpoint is None:\n+            self.prevout = COutPoint()\n+        else:\n+            self.prevout = outpoint\n+        self.scriptSig = scriptSig\n+        self.nSequence = nSequence\n+\n+    def deserialize(self, f):\n+        self.prevout = COutPoint()\n+        self.prevout.deserialize(f)\n+        self.scriptSig = deser_string(f)\n+        self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.prevout.serialize()\n+        r += ser_string(self.scriptSig)\n+        r += struct.pack(\"<I\", self.nSequence)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n+            % (repr(self.prevout), bytes_to_hex_str(self.scriptSig),\n+               self.nSequence)\n+\n+\n+class CTxOut():\n+    def __init__(self, nValue=0, scriptPubKey=b\"\"):\n+        self.nValue = nValue\n+        self.scriptPubKey = scriptPubKey\n+\n+    def deserialize(self, f):\n+        self.nValue = struct.unpack(\"<q\", f.read(8))[0]\n+        self.scriptPubKey = deser_string(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<q\", self.nValue)\n+        r += ser_string(self.scriptPubKey)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n+            % (self.nValue // COIN, self.nValue % COIN,\n+               bytes_to_hex_str(self.scriptPubKey))\n+\n+\n+class CScriptWitness():\n+    def __init__(self):\n+        # stack is a vector of strings\n+        self.stack = []\n+\n+    def __repr__(self):\n+        return \"CScriptWitness(%s)\" % \\\n+               (\",\".join([bytes_to_hex_str(x) for x in self.stack]))\n+\n+    def is_null(self):\n+        if self.stack:\n+            return False\n+        return True\n+\n+\n+class CTxInWitness():\n+    def __init__(self):\n+        self.scriptWitness = CScriptWitness()\n+\n+    def deserialize(self, f):\n+        self.scriptWitness.stack = deser_string_vector(f)\n+\n+    def serialize(self):\n+        return ser_string_vector(self.scriptWitness.stack)\n+\n+    def __repr__(self):\n+        return repr(self.scriptWitness)\n+\n+    def is_null(self):\n+        return self.scriptWitness.is_null()\n+\n+\n+class CTxWitness():\n+    def __init__(self):\n+        self.vtxinwit = []\n+\n+    def deserialize(self, f):\n+        for i in range(len(self.vtxinwit)):\n+            self.vtxinwit[i].deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        # This is different than the usual vector serialization --\n+        # we omit the length of the vector, which is required to be\n+        # the same length as the transaction's vin vector.\n+        for x in self.vtxinwit:\n+            r += x.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxWitness(%s)\" % \\\n+               (';'.join([repr(x) for x in self.vtxinwit]))\n+\n+    def is_null(self):\n+        for x in self.vtxinwit:\n+            if not x.is_null():\n+                return False\n+        return True\n+\n+\n+class CTransaction():\n+    def __init__(self, tx=None):\n+        if tx is None:\n+            self.nVersion = 1\n+            self.vin = []\n+            self.vout = []\n+            self.wit = CTxWitness()\n+            self.nLockTime = 0\n+            self.sha256 = None\n+            self.hash = None\n+        else:\n+            self.nVersion = tx.nVersion\n+            self.vin = copy.deepcopy(tx.vin)\n+            self.vout = copy.deepcopy(tx.vout)\n+            self.nLockTime = tx.nLockTime\n+            self.sha256 = tx.sha256\n+            self.hash = tx.hash\n+            self.wit = copy.deepcopy(tx.wit)\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vin = deser_vector(f, CTxIn)\n+        flags = 0\n+        if len(self.vin) == 0:\n+            flags = struct.unpack(\"<B\", f.read(1))[0]\n+            # Not sure why flags can't be zero, but this\n+            # matches the implementation in bitcoind\n+            if (flags != 0):\n+                self.vin = deser_vector(f, CTxIn)\n+                self.vout = deser_vector(f, CTxOut)\n+        else:\n+            self.vout = deser_vector(f, CTxOut)\n+        if flags != 0:\n+            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n+            self.wit.deserialize(f)\n+        self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize_without_witness(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    # Only serialize with witness when explicitly called for\n+    def serialize_with_witness(self):\n+        flags = 0\n+        if not self.wit.is_null():\n+            flags |= 1\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        if flags:\n+            dummy = []\n+            r += ser_vector(dummy)\n+            r += struct.pack(\"<B\", flags)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        if flags & 1:\n+            if (len(self.wit.vtxinwit) != len(self.vin)):\n+                # vtxinwit must have the same length as vin\n+                self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n+                for i in range(len(self.wit.vtxinwit), len(self.vin)):\n+                    self.wit.vtxinwit.append(CTxInWitness())\n+            r += self.wit.serialize()\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    # Regular serialization is without witness -- must explicitly\n+    # call serialize_with_witness to include witness data.\n+    def serialize(self):\n+        return self.serialize_without_witness()\n+\n+    # Recalculate the txid (transaction hash without witness)\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+\n+    # We will only cache the serialization without witness in\n+    # self.sha256 and self.hash -- those are expected to be the txid.\n+    def calc_sha256(self, with_witness=False):\n+        if with_witness:\n+            # Don't cache the result, just return it\n+            return uint256_from_str(hash256(self.serialize_with_witness()))\n+\n+        if self.sha256 is None:\n+            self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n+        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        for tout in self.vout:\n+            if tout.nValue < 0 or tout.nValue > 21000000 * COIN:\n+                return False\n+        return True\n+\n+    def __repr__(self):\n+        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n+            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n+\n+\n+class CBlockHeader():\n+    def __init__(self, header=None):\n+        if header is None:\n+            self.set_null()\n+        else:\n+            self.nVersion = header.nVersion\n+            self.hashPrevBlock = header.hashPrevBlock\n+            self.hashMerkleRoot = header.hashMerkleRoot\n+            self.nTime = header.nTime\n+            self.nBits = header.nBits\n+            self.nNonce = header.nNonce\n+            self.sha256 = header.sha256\n+            self.hash = header.hash\n+            self.calc_sha256()\n+\n+    def set_null(self):\n+        self.nVersion = 1\n+        self.hashPrevBlock = 0\n+        self.hashMerkleRoot = 0\n+        self.nTime = 0\n+        self.nBits = 0\n+        self.nNonce = 0\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hashPrevBlock = deser_uint256(f)\n+        self.hashMerkleRoot = deser_uint256(f)\n+        self.nTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nBits = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nNonce = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256(self.hashPrevBlock)\n+        r += ser_uint256(self.hashMerkleRoot)\n+        r += struct.pack(\"<I\", self.nTime)\n+        r += struct.pack(\"<I\", self.nBits)\n+        r += struct.pack(\"<I\", self.nNonce)\n+        return r\n+\n+    def calc_sha256(self):\n+        if self.sha256 is None:\n+            r = b\"\"\n+            r += struct.pack(\"<i\", self.nVersion)\n+            r += ser_uint256(self.hashPrevBlock)\n+            r += ser_uint256(self.hashMerkleRoot)\n+            r += struct.pack(\"<I\", self.nTime)\n+            r += struct.pack(\"<I\", self.nBits)\n+            r += struct.pack(\"<I\", self.nNonce)\n+            self.sha256 = uint256_from_str(hash256(r))\n+            self.hash = encode(hash256(r)[::-1], 'hex_codec').decode('ascii')\n+\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+        return self.sha256\n+\n+    def __repr__(self):\n+        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce)\n+\n+\n+class CBlock(CBlockHeader):\n+    def __init__(self, header=None):\n+        super(CBlock, self).__init__(header)\n+        self.vtx = []\n+\n+    def deserialize(self, f):\n+        super(CBlock, self).deserialize(f)\n+        self.vtx = deser_vector(f, CTransaction)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += super(CBlock, self).serialize()\n+        if with_witness:\n+            r += ser_vector(self.vtx, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.vtx)\n+        return r\n+\n+    # Calculate the merkle root given a vector of transaction hashes\n+    @classmethod\n+    def get_merkle_root(cls, hashes):\n+        while len(hashes) > 1:\n+            newhashes = []\n+            for i in range(0, len(hashes), 2):\n+                i2 = min(i+1, len(hashes)-1)\n+                newhashes.append(hash256(hashes[i] + hashes[i2]))\n+            hashes = newhashes\n+        return uint256_from_str(hashes[0])\n+\n+    def calc_merkle_root(self):\n+        hashes = []\n+        for tx in self.vtx:\n+            tx.calc_sha256()\n+            hashes.append(ser_uint256(tx.sha256))\n+        return self.get_merkle_root(hashes)\n+\n+    def calc_witness_merkle_root(self):\n+        # For witness root purposes, the hash of the\n+        # coinbase, with witness, is defined to be 0...0\n+        hashes = [ser_uint256(0)]\n+\n+        for tx in self.vtx[1:]:\n+            # Calculate the hashes with witness data\n+            hashes.append(ser_uint256(tx.calc_sha256(True)))\n+\n+        return self.get_merkle_root(hashes)\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        target = uint256_from_compact(self.nBits)\n+        if self.sha256 > target:\n+            return False\n+        for tx in self.vtx:\n+            if not tx.is_valid():\n+                return False\n+        if self.calc_merkle_root() != self.hashMerkleRoot:\n+            return False\n+        return True\n+\n+    def solve(self):\n+        self.rehash()\n+        target = uint256_from_compact(self.nBits)\n+        while self.sha256 > target:\n+            self.nNonce += 1\n+            self.rehash()\n+\n+    def __repr__(self):\n+        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n+\n+\n+class PrefilledTransaction():\n+    def __init__(self, index=0, tx = None):\n+        self.index = index\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.index = deser_compact_size(f)\n+        self.tx = CTransaction()\n+        self.tx.deserialize(f)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_compact_size(self.index)\n+        if with_witness:\n+            r += self.tx.serialize_with_witness()\n+        else:\n+            r += self.tx.serialize_without_witness()\n+        return r\n+\n+    def serialize_with_witness(self):\n+        return self.serialize(with_witness=True)\n+\n+    def __repr__(self):\n+        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n+\n+# This is what we send on the wire, in a cmpctblock message.\n+class P2PHeaderAndShortIDs():\n+    def __init__(self):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids_length = 0\n+        self.shortids = []\n+        self.prefilled_txn_length = 0\n+        self.prefilled_txn = []\n+\n+    def deserialize(self, f):\n+        self.header.deserialize(f)\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.shortids_length = deser_compact_size(f)\n+        for i in range(self.shortids_length):\n+            # shortids are defined to be 6 bytes in the spec, so append\n+            # two zero bytes and read it in as an 8-byte number\n+            self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n+        self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n+        self.prefilled_txn_length = len(self.prefilled_txn)\n+\n+    # When using version 2 compact blocks, we must serialize with_witness.\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += self.header.serialize()\n+        r += struct.pack(\"<Q\", self.nonce)\n+        r += ser_compact_size(self.shortids_length)\n+        for x in self.shortids:\n+            # We only want the first 6 bytes\n+            r += struct.pack(\"<Q\", x)[0:6]\n+        if with_witness:\n+            r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.prefilled_txn)\n+        return r\n+\n+    def __repr__(self):\n+        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n+\n+# P2P version of the above that will use witness serialization (for compact\n+# block version 2)\n+class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n+    def serialize(self):\n+        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n+\n+# Calculate the BIP 152-compact blocks shortid for a given transaction hash\n+def calculate_shortid(k0, k1, tx_hash):\n+    expected_shortid = siphash256(k0, k1, tx_hash)\n+    expected_shortid &= 0x0000ffffffffffff\n+    return expected_shortid\n+\n+# This version gets rid of the array lengths, and reinterprets the differential\n+# encoding into indices that can be used for lookup.\n+class HeaderAndShortIDs():\n+    def __init__(self, p2pheaders_and_shortids = None):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids = []\n+        self.prefilled_txn = []\n+        self.use_witness = False\n+\n+        if p2pheaders_and_shortids != None:\n+            self.header = p2pheaders_and_shortids.header\n+            self.nonce = p2pheaders_and_shortids.nonce\n+            self.shortids = p2pheaders_and_shortids.shortids\n+            last_index = -1\n+            for x in p2pheaders_and_shortids.prefilled_txn:\n+                self.prefilled_txn.append(PrefilledTransaction(x.index + last_index + 1, x.tx))\n+                last_index = self.prefilled_txn[-1].index\n+\n+    def to_p2p(self):\n+        if self.use_witness:\n+            ret = P2PHeaderAndShortWitnessIDs()\n+        else:\n+            ret = P2PHeaderAndShortIDs()\n+        ret.header = self.header\n+        ret.nonce = self.nonce\n+        ret.shortids_length = len(self.shortids)\n+        ret.shortids = self.shortids\n+        ret.prefilled_txn_length = len(self.prefilled_txn)\n+        ret.prefilled_txn = []\n+        last_index = -1\n+        for x in self.prefilled_txn:\n+            ret.prefilled_txn.append(PrefilledTransaction(x.index - last_index - 1, x.tx))\n+            last_index = x.index\n+        return ret\n+\n+    def get_siphash_keys(self):\n+        header_nonce = self.header.serialize()\n+        header_nonce += struct.pack(\"<Q\", self.nonce)\n+        hash_header_nonce_as_str = sha256(header_nonce)\n+        key0 = struct.unpack(\"<Q\", hash_header_nonce_as_str[0:8])[0]\n+        key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n+        return [ key0, key1 ]\n+\n+    # Version 2 compact blocks use wtxid in shortids (rather than txid)\n+    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n+        self.header = CBlockHeader(block)\n+        self.nonce = nonce\n+        self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n+        self.shortids = []\n+        self.use_witness = use_witness\n+        [k0, k1] = self.get_siphash_keys()\n+        for i in range(len(block.vtx)):\n+            if i not in prefill_list:\n+                tx_hash = block.vtx[i].sha256\n+                if use_witness:\n+                    tx_hash = block.vtx[i].calc_sha256(with_witness=True)\n+                self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n+\n+    def __repr__(self):\n+        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n+\n+\n+class BlockTransactionsRequest():\n+\n+    def __init__(self, blockhash=0, indexes = None):\n+        self.blockhash = blockhash\n+        self.indexes = indexes if indexes != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        indexes_length = deser_compact_size(f)\n+        for i in range(indexes_length):\n+            self.indexes.append(deser_compact_size(f))\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        r += ser_compact_size(len(self.indexes))\n+        for x in self.indexes:\n+            r += ser_compact_size(x)\n+        return r\n+\n+    # helper to set the differentially encoded indexes from absolute ones\n+    def from_absolute(self, absolute_indexes):\n+        self.indexes = []\n+        last_index = -1\n+        for x in absolute_indexes:\n+            self.indexes.append(x-last_index-1)\n+            last_index = x\n+\n+    def to_absolute(self):\n+        absolute_indexes = []\n+        last_index = -1\n+        for x in self.indexes:\n+            absolute_indexes.append(x+last_index+1)\n+            last_index = absolute_indexes[-1]\n+        return absolute_indexes\n+\n+    def __repr__(self):\n+        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n+\n+\n+class BlockTransactions():\n+\n+    def __init__(self, blockhash=0, transactions = None):\n+        self.blockhash = blockhash\n+        self.transactions = transactions if transactions != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        self.transactions = deser_vector(f, CTransaction)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        if with_witness:\n+            r += ser_vector(self.transactions, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.transactions)\n+        return r\n+\n+    def __repr__(self):\n+        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n+\n+\n+# Objects that correspond to messages on the wire\n+class msg_version():\n+    command = b\"version\"\n+\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.nServices = NODE_NETWORK | NODE_WITNESS\n+        self.nTime = int(time.time())\n+        self.addrTo = CAddress()\n+        self.addrFrom = CAddress()\n+        self.nNonce = random.getrandbits(64)\n+        self.strSubVer = MY_SUBVERSION\n+        self.nStartingHeight = -1\n+        self.nRelay = MY_RELAY\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        if self.nVersion == 10300:\n+            self.nVersion = 300\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n+        self.addrTo = CAddress()\n+        self.addrTo.deserialize(f)\n+\n+        if self.nVersion >= 106:\n+            self.addrFrom = CAddress()\n+            self.addrFrom.deserialize(f)\n+            self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n+            self.strSubVer = deser_string(f)\n+        else:\n+            self.addrFrom = None\n+            self.nNonce = None\n+            self.strSubVer = None\n+            self.nStartingHeight = None\n+\n+        if self.nVersion >= 209:\n+            self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n+        else:\n+            self.nStartingHeight = None\n+\n+        if self.nVersion >= 70001:\n+            # Relay field is optional for version 70001 onwards\n+            try:\n+                self.nRelay = struct.unpack(\"<b\", f.read(1))[0]\n+            except:\n+                self.nRelay = 0\n+        else:\n+            self.nRelay = 0\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += struct.pack(\"<q\", self.nTime)\n+        r += self.addrTo.serialize()\n+        r += self.addrFrom.serialize()\n+        r += struct.pack(\"<Q\", self.nNonce)\n+        r += ser_string(self.strSubVer)\n+        r += struct.pack(\"<i\", self.nStartingHeight)\n+        r += struct.pack(\"<b\", self.nRelay)\n+        return r\n+\n+    def __repr__(self):\n+        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i nRelay=%i)' \\\n+            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n+               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n+               self.strSubVer, self.nStartingHeight, self.nRelay)\n+\n+\n+class msg_verack():\n+    command = b\"verack\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_verack()\"\n+\n+\n+class msg_addr():\n+    command = b\"addr\"\n+\n+    def __init__(self):\n+        self.addrs = []\n+\n+    def deserialize(self, f):\n+        self.addrs = deser_vector(f, CAddress)\n+\n+    def serialize(self):\n+        return ser_vector(self.addrs)\n+\n+    def __repr__(self):\n+        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n+\n+\n+class msg_inv():\n+    command = b\"inv\"\n+\n+    def __init__(self, inv=None):\n+        if inv is None:\n+            self.inv = []\n+        else:\n+            self.inv = inv\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getdata():\n+    command = b\"getdata\"\n+\n+    def __init__(self, inv=None):\n+        self.inv = inv if inv != None else []\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getblocks():\n+    command = b\"getblocks\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+class msg_tx():\n+    command = b\"tx\"\n+\n+    def __init__(self, tx=CTransaction()):\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.tx.deserialize(f)\n+\n+    def serialize(self):\n+        return self.tx.serialize_without_witness()\n+\n+    def __repr__(self):\n+        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n+\n+class msg_witness_tx(msg_tx):\n+\n+    def serialize(self):\n+        return self.tx.serialize_with_witness()\n+\n+\n+class msg_block():\n+    command = b\"block\"\n+\n+    def __init__(self, block=None):\n+        if block is None:\n+            self.block = CBlock()\n+        else:\n+            self.block = block\n+\n+    def deserialize(self, f):\n+        self.block.deserialize(f)\n+\n+    def serialize(self):\n+        return self.block.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_block(block=%s)\" % (repr(self.block))\n+\n+# for cases where a user needs tighter control over what is sent over the wire\n+# note that the user must supply the name of the command, and the data\n+class msg_generic():\n+    def __init__(self, command, data=None):\n+        self.command = command\n+        self.data = data\n+\n+    def serialize(self):\n+        return self.data\n+\n+    def __repr__(self):\n+        return \"msg_generic()\"\n+\n+class msg_witness_block(msg_block):\n+\n+    def serialize(self):\n+        r = self.block.serialize(with_witness=True)\n+        return r\n+\n+class msg_getaddr():\n+    command = b\"getaddr\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_getaddr()\"\n+\n+\n+class msg_ping():\n+    command = b\"ping\"\n+\n+    def __init__(self, nonce=0):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_ping(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_pong():\n+    command = b\"pong\"\n+\n+    def __init__(self, nonce=0):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_pong(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_mempool():\n+    command = b\"mempool\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_mempool()\"\n+\n+class msg_sendheaders():\n+    command = b\"sendheaders\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_sendheaders()\"\n+\n+\n+# getheaders message has\n+# number of entries\n+# vector of hashes\n+# hash_stop (hash of last desired block header, 0 to get as many as possible)\n+class msg_getheaders():\n+    command = b\"getheaders\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+# headers message has\n+# <count> <vector of block headers>\n+class msg_headers():\n+    command = b\"headers\"\n+\n+    def __init__(self, headers=None):\n+        self.headers = headers if headers is not None else []\n+\n+    def deserialize(self, f):\n+        # comment in bitcoind indicates these should be deserialized as blocks\n+        blocks = deser_vector(f, CBlock)\n+        for x in blocks:\n+            self.headers.append(CBlockHeader(x))\n+\n+    def serialize(self):\n+        blocks = [CBlock(x) for x in self.headers]\n+        return ser_vector(blocks)\n+\n+    def __repr__(self):\n+        return \"msg_headers(headers=%s)\" % repr(self.headers)\n+\n+\n+class msg_reject():\n+    command = b\"reject\"\n+    REJECT_MALFORMED = 1\n+\n+    def __init__(self):\n+        self.message = b\"\"\n+        self.code = 0\n+        self.reason = b\"\"\n+        self.data = 0\n+\n+    def deserialize(self, f):\n+        self.message = deser_string(f)\n+        self.code = struct.unpack(\"<B\", f.read(1))[0]\n+        self.reason = deser_string(f)\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n+            self.data = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = ser_string(self.message)\n+        r += struct.pack(\"<B\", self.code)\n+        r += ser_string(self.reason)\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n+            r += ser_uint256(self.data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_reject: %s %d %s [%064x]\" \\\n+            % (self.message, self.code, self.reason, self.data)\n+\n+class msg_feefilter():\n+    command = b\"feefilter\"\n+\n+    def __init__(self, feerate=0):\n+        self.feerate = feerate\n+\n+    def deserialize(self, f):\n+        self.feerate = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.feerate)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_feefilter(feerate=%08x)\" % self.feerate\n+\n+class msg_sendcmpct():\n+    command = b\"sendcmpct\"\n+\n+    def __init__(self):\n+        self.announce = False\n+        self.version = 1\n+\n+    def deserialize(self, f):\n+        self.announce = struct.unpack(\"<?\", f.read(1))[0]\n+        self.version = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<?\", self.announce)\n+        r += struct.pack(\"<Q\", self.version)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n+\n+class msg_cmpctblock():\n+    command = b\"cmpctblock\"\n+\n+    def __init__(self, header_and_shortids = None):\n+        self.header_and_shortids = header_and_shortids\n+\n+    def deserialize(self, f):\n+        self.header_and_shortids = P2PHeaderAndShortIDs()\n+        self.header_and_shortids.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.header_and_shortids.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n+\n+class msg_getblocktxn():\n+    command = b\"getblocktxn\"\n+\n+    def __init__(self):\n+        self.block_txn_request = None\n+\n+    def deserialize(self, f):\n+        self.block_txn_request = BlockTransactionsRequest()\n+        self.block_txn_request.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_txn_request.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n+\n+class msg_blocktxn():\n+    command = b\"blocktxn\"\n+\n+    def __init__(self):\n+        self.block_transactions = BlockTransactions()\n+\n+    def deserialize(self, f):\n+        self.block_transactions.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n+\n+class msg_witness_blocktxn(msg_blocktxn):\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize(with_witness=True)\n+        return r"
      },
      {
        "sha": "2a1ac2d7055d967ae5e1399e40faecfdb5b0e6cc",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1305,
        "changes": 1306,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
        "patch": "@@ -12,47 +12,18 @@\n NodeConn: an object which manages p2p connectivity to a bitcoin node\n NodeConnCB: a base class that describes the interface for receiving\n             callbacks with network messages from a NodeConn\n-CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n-    data structures that should map to corresponding structures in\n-    bitcoin/primitives\n-msg_block, msg_tx, msg_headers, etc.:\n-    data structures that represent network messages\n-ser_*, deser_*: functions that handle serialization/deserialization\n \"\"\"\n-\n import asyncore\n-from codecs import encode\n from collections import defaultdict\n-import copy\n-import hashlib\n from io import BytesIO\n import logging\n-import random\n import socket\n import struct\n import sys\n import time\n from threading import RLock, Thread\n \n-from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n-\n-MIN_VERSION_SUPPORTED = 60001\n-MY_VERSION = 70014  # past bip-31 for ping/pong\n-MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n-MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n-\n-MAX_INV_SZ = 50000\n-MAX_BLOCK_BASE_SIZE = 1000000\n-\n-COIN = 100000000 # 1 btc in satoshis\n-\n-NODE_NETWORK = (1 << 0)\n-# NODE_GETUTXO = (1 << 1)\n-# NODE_BLOOM = (1 << 2)\n-NODE_WITNESS = (1 << 3)\n-NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n-NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n+from test_framework.messages import *\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n \n@@ -69,1281 +40,6 @@\n # access to any data shared with the NodeConnCB or NodeConn.\n mininode_lock = RLock()\n \n-# Serialization/deserialization tools\n-def sha256(s):\n-    return hashlib.new('sha256', s).digest()\n-\n-def ripemd160(s):\n-    return hashlib.new('ripemd160', s).digest()\n-\n-def hash256(s):\n-    return sha256(sha256(s))\n-\n-def ser_compact_size(l):\n-    r = b\"\"\n-    if l < 253:\n-        r = struct.pack(\"B\", l)\n-    elif l < 0x10000:\n-        r = struct.pack(\"<BH\", 253, l)\n-    elif l < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, l)\n-    else:\n-        r = struct.pack(\"<BQ\", 255, l)\n-    return r\n-\n-def deser_compact_size(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n-    return nit\n-\n-def deser_string(f):\n-    nit = deser_compact_size(f)\n-    return f.read(nit)\n-\n-def ser_string(s):\n-    return ser_compact_size(len(s)) + s\n-\n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = struct.unpack(\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-\n-def ser_uint256(u):\n-    rs = b\"\"\n-    for i in range(8):\n-        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n-        u >>= 32\n-    return rs\n-\n-\n-def uint256_from_str(s):\n-    r = 0\n-    t = struct.unpack(\"<IIIIIIII\", s[:32])\n-    for i in range(8):\n-        r += t[i] << (i * 32)\n-    return r\n-\n-\n-def uint256_from_compact(c):\n-    nbytes = (c >> 24) & 0xFF\n-    v = (c & 0xFFFFFF) << (8 * (nbytes - 3))\n-    return v\n-\n-\n-def deser_vector(f, c):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = c()\n-        t.deserialize(f)\n-        r.append(t)\n-    return r\n-\n-\n-# ser_function_name: Allow for an alternate serialization function on the\n-# entries in the vector (we use this for serializing the vector of transactions\n-# for a witness block).\n-def ser_vector(l, ser_function_name=None):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        if ser_function_name:\n-            r += getattr(i, ser_function_name)()\n-        else:\n-            r += i.serialize()\n-    return r\n-\n-\n-def deser_uint256_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = deser_uint256(f)\n-        r.append(t)\n-    return r\n-\n-\n-def ser_uint256_vector(l):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        r += ser_uint256(i)\n-    return r\n-\n-\n-def deser_string_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = deser_string(f)\n-        r.append(t)\n-    return r\n-\n-\n-def ser_string_vector(l):\n-    r = ser_compact_size(len(l))\n-    for sv in l:\n-        r += ser_string(sv)\n-    return r\n-\n-\n-def deser_int_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = struct.unpack(\"<i\", f.read(4))[0]\n-        r.append(t)\n-    return r\n-\n-\n-def ser_int_vector(l):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        r += struct.pack(\"<i\", i)\n-    return r\n-\n-# Deserialize from a hex string representation (eg from RPC)\n-def FromHex(obj, hex_string):\n-    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n-    return obj\n-\n-# Convert a binary-serializable object to hex (eg for submission via RPC)\n-def ToHex(obj):\n-    return bytes_to_hex_str(obj.serialize())\n-\n-# Objects that map to bitcoind objects, which can be serialized/deserialized\n-\n-class CAddress():\n-    def __init__(self):\n-        self.nServices = 1\n-        self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n-        self.ip = \"0.0.0.0\"\n-        self.port = 0\n-\n-    def deserialize(self, f):\n-        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n-        self.pchReserved = f.read(12)\n-        self.ip = socket.inet_ntoa(f.read(4))\n-        self.port = struct.unpack(\">H\", f.read(2))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.nServices)\n-        r += self.pchReserved\n-        r += socket.inet_aton(self.ip)\n-        r += struct.pack(\">H\", self.port)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n-                                                         self.ip, self.port)\n-\n-MSG_WITNESS_FLAG = 1<<30\n-\n-class CInv():\n-    typemap = {\n-        0: \"Error\",\n-        1: \"TX\",\n-        2: \"Block\",\n-        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n-        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n-        4: \"CompactBlock\"\n-    }\n-\n-    def __init__(self, t=0, h=0):\n-        self.type = t\n-        self.hash = h\n-\n-    def deserialize(self, f):\n-        self.type = struct.unpack(\"<i\", f.read(4))[0]\n-        self.hash = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.type)\n-        r += ser_uint256(self.hash)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CInv(type=%s hash=%064x)\" \\\n-            % (self.typemap[self.type], self.hash)\n-\n-\n-class CBlockLocator():\n-    def __init__(self):\n-        self.nVersion = MY_VERSION\n-        self.vHave = []\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.vHave = deser_uint256_vector(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += ser_uint256_vector(self.vHave)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n-            % (self.nVersion, repr(self.vHave))\n-\n-\n-class COutPoint():\n-    def __init__(self, hash=0, n=0):\n-        self.hash = hash\n-        self.n = n\n-\n-    def deserialize(self, f):\n-        self.hash = deser_uint256(f)\n-        self.n = struct.unpack(\"<I\", f.read(4))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += ser_uint256(self.hash)\n-        r += struct.pack(\"<I\", self.n)\n-        return r\n-\n-    def __repr__(self):\n-        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n-\n-\n-class CTxIn():\n-    def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n-        if outpoint is None:\n-            self.prevout = COutPoint()\n-        else:\n-            self.prevout = outpoint\n-        self.scriptSig = scriptSig\n-        self.nSequence = nSequence\n-\n-    def deserialize(self, f):\n-        self.prevout = COutPoint()\n-        self.prevout.deserialize(f)\n-        self.scriptSig = deser_string(f)\n-        self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.prevout.serialize()\n-        r += ser_string(self.scriptSig)\n-        r += struct.pack(\"<I\", self.nSequence)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), bytes_to_hex_str(self.scriptSig),\n-               self.nSequence)\n-\n-\n-class CTxOut():\n-    def __init__(self, nValue=0, scriptPubKey=b\"\"):\n-        self.nValue = nValue\n-        self.scriptPubKey = scriptPubKey\n-\n-    def deserialize(self, f):\n-        self.nValue = struct.unpack(\"<q\", f.read(8))[0]\n-        self.scriptPubKey = deser_string(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<q\", self.nValue)\n-        r += ser_string(self.scriptPubKey)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n-            % (self.nValue // COIN, self.nValue % COIN,\n-               bytes_to_hex_str(self.scriptPubKey))\n-\n-\n-class CScriptWitness():\n-    def __init__(self):\n-        # stack is a vector of strings\n-        self.stack = []\n-\n-    def __repr__(self):\n-        return \"CScriptWitness(%s)\" % \\\n-               (\",\".join([bytes_to_hex_str(x) for x in self.stack]))\n-\n-    def is_null(self):\n-        if self.stack:\n-            return False\n-        return True\n-\n-\n-class CTxInWitness():\n-    def __init__(self):\n-        self.scriptWitness = CScriptWitness()\n-\n-    def deserialize(self, f):\n-        self.scriptWitness.stack = deser_string_vector(f)\n-\n-    def serialize(self):\n-        return ser_string_vector(self.scriptWitness.stack)\n-\n-    def __repr__(self):\n-        return repr(self.scriptWitness)\n-\n-    def is_null(self):\n-        return self.scriptWitness.is_null()\n-\n-\n-class CTxWitness():\n-    def __init__(self):\n-        self.vtxinwit = []\n-\n-    def deserialize(self, f):\n-        for i in range(len(self.vtxinwit)):\n-            self.vtxinwit[i].deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        # This is different than the usual vector serialization --\n-        # we omit the length of the vector, which is required to be\n-        # the same length as the transaction's vin vector.\n-        for x in self.vtxinwit:\n-            r += x.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"CTxWitness(%s)\" % \\\n-               (';'.join([repr(x) for x in self.vtxinwit]))\n-\n-    def is_null(self):\n-        for x in self.vtxinwit:\n-            if not x.is_null():\n-                return False\n-        return True\n-\n-\n-class CTransaction():\n-    def __init__(self, tx=None):\n-        if tx is None:\n-            self.nVersion = 1\n-            self.vin = []\n-            self.vout = []\n-            self.wit = CTxWitness()\n-            self.nLockTime = 0\n-            self.sha256 = None\n-            self.hash = None\n-        else:\n-            self.nVersion = tx.nVersion\n-            self.vin = copy.deepcopy(tx.vin)\n-            self.vout = copy.deepcopy(tx.vout)\n-            self.nLockTime = tx.nLockTime\n-            self.sha256 = tx.sha256\n-            self.hash = tx.hash\n-            self.wit = copy.deepcopy(tx.wit)\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.vin = deser_vector(f, CTxIn)\n-        flags = 0\n-        if len(self.vin) == 0:\n-            flags = struct.unpack(\"<B\", f.read(1))[0]\n-            # Not sure why flags can't be zero, but this\n-            # matches the implementation in bitcoind\n-            if (flags != 0):\n-                self.vin = deser_vector(f, CTxIn)\n-                self.vout = deser_vector(f, CTxOut)\n-        else:\n-            self.vout = deser_vector(f, CTxOut)\n-        if flags != 0:\n-            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n-            self.wit.deserialize(f)\n-        self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n-        self.sha256 = None\n-        self.hash = None\n-\n-    def serialize_without_witness(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += ser_vector(self.vin)\n-        r += ser_vector(self.vout)\n-        r += struct.pack(\"<I\", self.nLockTime)\n-        return r\n-\n-    # Only serialize with witness when explicitly called for\n-    def serialize_with_witness(self):\n-        flags = 0\n-        if not self.wit.is_null():\n-            flags |= 1\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        if flags:\n-            dummy = []\n-            r += ser_vector(dummy)\n-            r += struct.pack(\"<B\", flags)\n-        r += ser_vector(self.vin)\n-        r += ser_vector(self.vout)\n-        if flags & 1:\n-            if (len(self.wit.vtxinwit) != len(self.vin)):\n-                # vtxinwit must have the same length as vin\n-                self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n-                for i in range(len(self.wit.vtxinwit), len(self.vin)):\n-                    self.wit.vtxinwit.append(CTxInWitness())\n-            r += self.wit.serialize()\n-        r += struct.pack(\"<I\", self.nLockTime)\n-        return r\n-\n-    # Regular serialization is without witness -- must explicitly\n-    # call serialize_with_witness to include witness data.\n-    def serialize(self):\n-        return self.serialize_without_witness()\n-\n-    # Recalculate the txid (transaction hash without witness)\n-    def rehash(self):\n-        self.sha256 = None\n-        self.calc_sha256()\n-\n-    # We will only cache the serialization without witness in\n-    # self.sha256 and self.hash -- those are expected to be the txid.\n-    def calc_sha256(self, with_witness=False):\n-        if with_witness:\n-            # Don't cache the result, just return it\n-            return uint256_from_str(hash256(self.serialize_with_witness()))\n-\n-        if self.sha256 is None:\n-            self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n-        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n-\n-    def is_valid(self):\n-        self.calc_sha256()\n-        for tout in self.vout:\n-            if tout.nValue < 0 or tout.nValue > 21000000 * COIN:\n-                return False\n-        return True\n-\n-    def __repr__(self):\n-        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n-            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n-\n-\n-class CBlockHeader():\n-    def __init__(self, header=None):\n-        if header is None:\n-            self.set_null()\n-        else:\n-            self.nVersion = header.nVersion\n-            self.hashPrevBlock = header.hashPrevBlock\n-            self.hashMerkleRoot = header.hashMerkleRoot\n-            self.nTime = header.nTime\n-            self.nBits = header.nBits\n-            self.nNonce = header.nNonce\n-            self.sha256 = header.sha256\n-            self.hash = header.hash\n-            self.calc_sha256()\n-\n-    def set_null(self):\n-        self.nVersion = 1\n-        self.hashPrevBlock = 0\n-        self.hashMerkleRoot = 0\n-        self.nTime = 0\n-        self.nBits = 0\n-        self.nNonce = 0\n-        self.sha256 = None\n-        self.hash = None\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.hashPrevBlock = deser_uint256(f)\n-        self.hashMerkleRoot = deser_uint256(f)\n-        self.nTime = struct.unpack(\"<I\", f.read(4))[0]\n-        self.nBits = struct.unpack(\"<I\", f.read(4))[0]\n-        self.nNonce = struct.unpack(\"<I\", f.read(4))[0]\n-        self.sha256 = None\n-        self.hash = None\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += ser_uint256(self.hashPrevBlock)\n-        r += ser_uint256(self.hashMerkleRoot)\n-        r += struct.pack(\"<I\", self.nTime)\n-        r += struct.pack(\"<I\", self.nBits)\n-        r += struct.pack(\"<I\", self.nNonce)\n-        return r\n-\n-    def calc_sha256(self):\n-        if self.sha256 is None:\n-            r = b\"\"\n-            r += struct.pack(\"<i\", self.nVersion)\n-            r += ser_uint256(self.hashPrevBlock)\n-            r += ser_uint256(self.hashMerkleRoot)\n-            r += struct.pack(\"<I\", self.nTime)\n-            r += struct.pack(\"<I\", self.nBits)\n-            r += struct.pack(\"<I\", self.nNonce)\n-            self.sha256 = uint256_from_str(hash256(r))\n-            self.hash = encode(hash256(r)[::-1], 'hex_codec').decode('ascii')\n-\n-    def rehash(self):\n-        self.sha256 = None\n-        self.calc_sha256()\n-        return self.sha256\n-\n-    def __repr__(self):\n-        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n-            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n-               time.ctime(self.nTime), self.nBits, self.nNonce)\n-\n-\n-class CBlock(CBlockHeader):\n-    def __init__(self, header=None):\n-        super(CBlock, self).__init__(header)\n-        self.vtx = []\n-\n-    def deserialize(self, f):\n-        super(CBlock, self).deserialize(f)\n-        self.vtx = deser_vector(f, CTransaction)\n-\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += super(CBlock, self).serialize()\n-        if with_witness:\n-            r += ser_vector(self.vtx, \"serialize_with_witness\")\n-        else:\n-            r += ser_vector(self.vtx)\n-        return r\n-\n-    # Calculate the merkle root given a vector of transaction hashes\n-    @classmethod\n-    def get_merkle_root(cls, hashes):\n-        while len(hashes) > 1:\n-            newhashes = []\n-            for i in range(0, len(hashes), 2):\n-                i2 = min(i+1, len(hashes)-1)\n-                newhashes.append(hash256(hashes[i] + hashes[i2]))\n-            hashes = newhashes\n-        return uint256_from_str(hashes[0])\n-\n-    def calc_merkle_root(self):\n-        hashes = []\n-        for tx in self.vtx:\n-            tx.calc_sha256()\n-            hashes.append(ser_uint256(tx.sha256))\n-        return self.get_merkle_root(hashes)\n-\n-    def calc_witness_merkle_root(self):\n-        # For witness root purposes, the hash of the\n-        # coinbase, with witness, is defined to be 0...0\n-        hashes = [ser_uint256(0)]\n-\n-        for tx in self.vtx[1:]:\n-            # Calculate the hashes with witness data\n-            hashes.append(ser_uint256(tx.calc_sha256(True)))\n-\n-        return self.get_merkle_root(hashes)\n-\n-    def is_valid(self):\n-        self.calc_sha256()\n-        target = uint256_from_compact(self.nBits)\n-        if self.sha256 > target:\n-            return False\n-        for tx in self.vtx:\n-            if not tx.is_valid():\n-                return False\n-        if self.calc_merkle_root() != self.hashMerkleRoot:\n-            return False\n-        return True\n-\n-    def solve(self):\n-        self.rehash()\n-        target = uint256_from_compact(self.nBits)\n-        while self.sha256 > target:\n-            self.nNonce += 1\n-            self.rehash()\n-\n-    def __repr__(self):\n-        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n-            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n-               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n-\n-\n-class PrefilledTransaction():\n-    def __init__(self, index=0, tx = None):\n-        self.index = index\n-        self.tx = tx\n-\n-    def deserialize(self, f):\n-        self.index = deser_compact_size(f)\n-        self.tx = CTransaction()\n-        self.tx.deserialize(f)\n-\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += ser_compact_size(self.index)\n-        if with_witness:\n-            r += self.tx.serialize_with_witness()\n-        else:\n-            r += self.tx.serialize_without_witness()\n-        return r\n-\n-    def serialize_with_witness(self):\n-        return self.serialize(with_witness=True)\n-\n-    def __repr__(self):\n-        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n-\n-# This is what we send on the wire, in a cmpctblock message.\n-class P2PHeaderAndShortIDs():\n-    def __init__(self):\n-        self.header = CBlockHeader()\n-        self.nonce = 0\n-        self.shortids_length = 0\n-        self.shortids = []\n-        self.prefilled_txn_length = 0\n-        self.prefilled_txn = []\n-\n-    def deserialize(self, f):\n-        self.header.deserialize(f)\n-        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n-        self.shortids_length = deser_compact_size(f)\n-        for i in range(self.shortids_length):\n-            # shortids are defined to be 6 bytes in the spec, so append\n-            # two zero bytes and read it in as an 8-byte number\n-            self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n-        self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n-        self.prefilled_txn_length = len(self.prefilled_txn)\n-\n-    # When using version 2 compact blocks, we must serialize with_witness.\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += self.header.serialize()\n-        r += struct.pack(\"<Q\", self.nonce)\n-        r += ser_compact_size(self.shortids_length)\n-        for x in self.shortids:\n-            # We only want the first 6 bytes\n-            r += struct.pack(\"<Q\", x)[0:6]\n-        if with_witness:\n-            r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n-        else:\n-            r += ser_vector(self.prefilled_txn)\n-        return r\n-\n-    def __repr__(self):\n-        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n-\n-# P2P version of the above that will use witness serialization (for compact\n-# block version 2)\n-class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n-    def serialize(self):\n-        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n-\n-# Calculate the BIP 152-compact blocks shortid for a given transaction hash\n-def calculate_shortid(k0, k1, tx_hash):\n-    expected_shortid = siphash256(k0, k1, tx_hash)\n-    expected_shortid &= 0x0000ffffffffffff\n-    return expected_shortid\n-\n-# This version gets rid of the array lengths, and reinterprets the differential\n-# encoding into indices that can be used for lookup.\n-class HeaderAndShortIDs():\n-    def __init__(self, p2pheaders_and_shortids = None):\n-        self.header = CBlockHeader()\n-        self.nonce = 0\n-        self.shortids = []\n-        self.prefilled_txn = []\n-        self.use_witness = False\n-\n-        if p2pheaders_and_shortids != None:\n-            self.header = p2pheaders_and_shortids.header\n-            self.nonce = p2pheaders_and_shortids.nonce\n-            self.shortids = p2pheaders_and_shortids.shortids\n-            last_index = -1\n-            for x in p2pheaders_and_shortids.prefilled_txn:\n-                self.prefilled_txn.append(PrefilledTransaction(x.index + last_index + 1, x.tx))\n-                last_index = self.prefilled_txn[-1].index\n-\n-    def to_p2p(self):\n-        if self.use_witness:\n-            ret = P2PHeaderAndShortWitnessIDs()\n-        else:\n-            ret = P2PHeaderAndShortIDs()\n-        ret.header = self.header\n-        ret.nonce = self.nonce\n-        ret.shortids_length = len(self.shortids)\n-        ret.shortids = self.shortids\n-        ret.prefilled_txn_length = len(self.prefilled_txn)\n-        ret.prefilled_txn = []\n-        last_index = -1\n-        for x in self.prefilled_txn:\n-            ret.prefilled_txn.append(PrefilledTransaction(x.index - last_index - 1, x.tx))\n-            last_index = x.index\n-        return ret\n-\n-    def get_siphash_keys(self):\n-        header_nonce = self.header.serialize()\n-        header_nonce += struct.pack(\"<Q\", self.nonce)\n-        hash_header_nonce_as_str = sha256(header_nonce)\n-        key0 = struct.unpack(\"<Q\", hash_header_nonce_as_str[0:8])[0]\n-        key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n-        return [ key0, key1 ]\n-\n-    # Version 2 compact blocks use wtxid in shortids (rather than txid)\n-    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n-        self.header = CBlockHeader(block)\n-        self.nonce = nonce\n-        self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n-        self.shortids = []\n-        self.use_witness = use_witness\n-        [k0, k1] = self.get_siphash_keys()\n-        for i in range(len(block.vtx)):\n-            if i not in prefill_list:\n-                tx_hash = block.vtx[i].sha256\n-                if use_witness:\n-                    tx_hash = block.vtx[i].calc_sha256(with_witness=True)\n-                self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n-\n-    def __repr__(self):\n-        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n-\n-\n-class BlockTransactionsRequest():\n-\n-    def __init__(self, blockhash=0, indexes = None):\n-        self.blockhash = blockhash\n-        self.indexes = indexes if indexes != None else []\n-\n-    def deserialize(self, f):\n-        self.blockhash = deser_uint256(f)\n-        indexes_length = deser_compact_size(f)\n-        for i in range(indexes_length):\n-            self.indexes.append(deser_compact_size(f))\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += ser_uint256(self.blockhash)\n-        r += ser_compact_size(len(self.indexes))\n-        for x in self.indexes:\n-            r += ser_compact_size(x)\n-        return r\n-\n-    # helper to set the differentially encoded indexes from absolute ones\n-    def from_absolute(self, absolute_indexes):\n-        self.indexes = []\n-        last_index = -1\n-        for x in absolute_indexes:\n-            self.indexes.append(x-last_index-1)\n-            last_index = x\n-\n-    def to_absolute(self):\n-        absolute_indexes = []\n-        last_index = -1\n-        for x in self.indexes:\n-            absolute_indexes.append(x+last_index+1)\n-            last_index = absolute_indexes[-1]\n-        return absolute_indexes\n-\n-    def __repr__(self):\n-        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n-\n-\n-class BlockTransactions():\n-\n-    def __init__(self, blockhash=0, transactions = None):\n-        self.blockhash = blockhash\n-        self.transactions = transactions if transactions != None else []\n-\n-    def deserialize(self, f):\n-        self.blockhash = deser_uint256(f)\n-        self.transactions = deser_vector(f, CTransaction)\n-\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += ser_uint256(self.blockhash)\n-        if with_witness:\n-            r += ser_vector(self.transactions, \"serialize_with_witness\")\n-        else:\n-            r += ser_vector(self.transactions)\n-        return r\n-\n-    def __repr__(self):\n-        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n-\n-\n-# Objects that correspond to messages on the wire\n-class msg_version():\n-    command = b\"version\"\n-\n-    def __init__(self):\n-        self.nVersion = MY_VERSION\n-        self.nServices = NODE_NETWORK | NODE_WITNESS\n-        self.nTime = int(time.time())\n-        self.addrTo = CAddress()\n-        self.addrFrom = CAddress()\n-        self.nNonce = random.getrandbits(64)\n-        self.strSubVer = MY_SUBVERSION\n-        self.nStartingHeight = -1\n-        self.nRelay = MY_RELAY\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        if self.nVersion == 10300:\n-            self.nVersion = 300\n-        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n-        self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n-        self.addrTo = CAddress()\n-        self.addrTo.deserialize(f)\n-\n-        if self.nVersion >= 106:\n-            self.addrFrom = CAddress()\n-            self.addrFrom.deserialize(f)\n-            self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n-            self.strSubVer = deser_string(f)\n-        else:\n-            self.addrFrom = None\n-            self.nNonce = None\n-            self.strSubVer = None\n-            self.nStartingHeight = None\n-\n-        if self.nVersion >= 209:\n-            self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n-        else:\n-            self.nStartingHeight = None\n-\n-        if self.nVersion >= 70001:\n-            # Relay field is optional for version 70001 onwards\n-            try:\n-                self.nRelay = struct.unpack(\"<b\", f.read(1))[0]\n-            except:\n-                self.nRelay = 0\n-        else:\n-            self.nRelay = 0\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += struct.pack(\"<Q\", self.nServices)\n-        r += struct.pack(\"<q\", self.nTime)\n-        r += self.addrTo.serialize()\n-        r += self.addrFrom.serialize()\n-        r += struct.pack(\"<Q\", self.nNonce)\n-        r += ser_string(self.strSubVer)\n-        r += struct.pack(\"<i\", self.nStartingHeight)\n-        r += struct.pack(\"<b\", self.nRelay)\n-        return r\n-\n-    def __repr__(self):\n-        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i nRelay=%i)' \\\n-            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n-               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n-               self.strSubVer, self.nStartingHeight, self.nRelay)\n-\n-\n-class msg_verack():\n-    command = b\"verack\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_verack()\"\n-\n-\n-class msg_addr():\n-    command = b\"addr\"\n-\n-    def __init__(self):\n-        self.addrs = []\n-\n-    def deserialize(self, f):\n-        self.addrs = deser_vector(f, CAddress)\n-\n-    def serialize(self):\n-        return ser_vector(self.addrs)\n-\n-    def __repr__(self):\n-        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n-\n-\n-class msg_inv():\n-    command = b\"inv\"\n-\n-    def __init__(self, inv=None):\n-        if inv is None:\n-            self.inv = []\n-        else:\n-            self.inv = inv\n-\n-    def deserialize(self, f):\n-        self.inv = deser_vector(f, CInv)\n-\n-    def serialize(self):\n-        return ser_vector(self.inv)\n-\n-    def __repr__(self):\n-        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n-\n-\n-class msg_getdata():\n-    command = b\"getdata\"\n-\n-    def __init__(self, inv=None):\n-        self.inv = inv if inv != None else []\n-\n-    def deserialize(self, f):\n-        self.inv = deser_vector(f, CInv)\n-\n-    def serialize(self):\n-        return ser_vector(self.inv)\n-\n-    def __repr__(self):\n-        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n-\n-\n-class msg_getblocks():\n-    command = b\"getblocks\"\n-\n-    def __init__(self):\n-        self.locator = CBlockLocator()\n-        self.hashstop = 0\n-\n-    def deserialize(self, f):\n-        self.locator = CBlockLocator()\n-        self.locator.deserialize(f)\n-        self.hashstop = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.locator.serialize()\n-        r += ser_uint256(self.hashstop)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n-            % (repr(self.locator), self.hashstop)\n-\n-\n-class msg_tx():\n-    command = b\"tx\"\n-\n-    def __init__(self, tx=CTransaction()):\n-        self.tx = tx\n-\n-    def deserialize(self, f):\n-        self.tx.deserialize(f)\n-\n-    def serialize(self):\n-        return self.tx.serialize_without_witness()\n-\n-    def __repr__(self):\n-        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n-\n-class msg_witness_tx(msg_tx):\n-\n-    def serialize(self):\n-        return self.tx.serialize_with_witness()\n-\n-\n-class msg_block():\n-    command = b\"block\"\n-\n-    def __init__(self, block=None):\n-        if block is None:\n-            self.block = CBlock()\n-        else:\n-            self.block = block\n-\n-    def deserialize(self, f):\n-        self.block.deserialize(f)\n-\n-    def serialize(self):\n-        return self.block.serialize()\n-\n-    def __repr__(self):\n-        return \"msg_block(block=%s)\" % (repr(self.block))\n-\n-# for cases where a user needs tighter control over what is sent over the wire\n-# note that the user must supply the name of the command, and the data\n-class msg_generic():\n-    def __init__(self, command, data=None):\n-        self.command = command\n-        self.data = data\n-\n-    def serialize(self):\n-        return self.data\n-\n-    def __repr__(self):\n-        return \"msg_generic()\"\n-\n-class msg_witness_block(msg_block):\n-\n-    def serialize(self):\n-        r = self.block.serialize(with_witness=True)\n-        return r\n-\n-class msg_getaddr():\n-    command = b\"getaddr\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_getaddr()\"\n-\n-\n-class msg_ping():\n-    command = b\"ping\"\n-\n-    def __init__(self, nonce=0):\n-        self.nonce = nonce\n-\n-    def deserialize(self, f):\n-        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.nonce)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_ping(nonce=%08x)\" % self.nonce\n-\n-\n-class msg_pong():\n-    command = b\"pong\"\n-\n-    def __init__(self, nonce=0):\n-        self.nonce = nonce\n-\n-    def deserialize(self, f):\n-        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.nonce)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_pong(nonce=%08x)\" % self.nonce\n-\n-\n-class msg_mempool():\n-    command = b\"mempool\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_mempool()\"\n-\n-class msg_sendheaders():\n-    command = b\"sendheaders\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_sendheaders()\"\n-\n-\n-# getheaders message has\n-# number of entries\n-# vector of hashes\n-# hash_stop (hash of last desired block header, 0 to get as many as possible)\n-class msg_getheaders():\n-    command = b\"getheaders\"\n-\n-    def __init__(self):\n-        self.locator = CBlockLocator()\n-        self.hashstop = 0\n-\n-    def deserialize(self, f):\n-        self.locator = CBlockLocator()\n-        self.locator.deserialize(f)\n-        self.hashstop = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.locator.serialize()\n-        r += ser_uint256(self.hashstop)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n-            % (repr(self.locator), self.hashstop)\n-\n-\n-# headers message has\n-# <count> <vector of block headers>\n-class msg_headers():\n-    command = b\"headers\"\n-\n-    def __init__(self, headers=None):\n-        self.headers = headers if headers is not None else []\n-\n-    def deserialize(self, f):\n-        # comment in bitcoind indicates these should be deserialized as blocks\n-        blocks = deser_vector(f, CBlock)\n-        for x in blocks:\n-            self.headers.append(CBlockHeader(x))\n-\n-    def serialize(self):\n-        blocks = [CBlock(x) for x in self.headers]\n-        return ser_vector(blocks)\n-\n-    def __repr__(self):\n-        return \"msg_headers(headers=%s)\" % repr(self.headers)\n-\n-\n-class msg_reject():\n-    command = b\"reject\"\n-    REJECT_MALFORMED = 1\n-\n-    def __init__(self):\n-        self.message = b\"\"\n-        self.code = 0\n-        self.reason = b\"\"\n-        self.data = 0\n-\n-    def deserialize(self, f):\n-        self.message = deser_string(f)\n-        self.code = struct.unpack(\"<B\", f.read(1))[0]\n-        self.reason = deser_string(f)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n-            self.data = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = ser_string(self.message)\n-        r += struct.pack(\"<B\", self.code)\n-        r += ser_string(self.reason)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n-            r += ser_uint256(self.data)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_reject: %s %d %s [%064x]\" \\\n-            % (self.message, self.code, self.reason, self.data)\n-\n-class msg_feefilter():\n-    command = b\"feefilter\"\n-\n-    def __init__(self, feerate=0):\n-        self.feerate = feerate\n-\n-    def deserialize(self, f):\n-        self.feerate = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.feerate)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_feefilter(feerate=%08x)\" % self.feerate\n-\n-class msg_sendcmpct():\n-    command = b\"sendcmpct\"\n-\n-    def __init__(self):\n-        self.announce = False\n-        self.version = 1\n-\n-    def deserialize(self, f):\n-        self.announce = struct.unpack(\"<?\", f.read(1))[0]\n-        self.version = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<?\", self.announce)\n-        r += struct.pack(\"<Q\", self.version)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n-\n-class msg_cmpctblock():\n-    command = b\"cmpctblock\"\n-\n-    def __init__(self, header_and_shortids = None):\n-        self.header_and_shortids = header_and_shortids\n-\n-    def deserialize(self, f):\n-        self.header_and_shortids = P2PHeaderAndShortIDs()\n-        self.header_and_shortids.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.header_and_shortids.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n-\n-class msg_getblocktxn():\n-    command = b\"getblocktxn\"\n-\n-    def __init__(self):\n-        self.block_txn_request = None\n-\n-    def deserialize(self, f):\n-        self.block_txn_request = BlockTransactionsRequest()\n-        self.block_txn_request.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.block_txn_request.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n-\n-class msg_blocktxn():\n-    command = b\"blocktxn\"\n-\n-    def __init__(self):\n-        self.block_transactions = BlockTransactions()\n-\n-    def deserialize(self, f):\n-        self.block_transactions.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.block_transactions.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n-\n-class msg_witness_blocktxn(msg_blocktxn):\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.block_transactions.serialize(with_witness=True)\n-        return r\n-\n class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n "
      }
    ]
  },
  {
    "sha": "1135c796a0e1151b03933f2cd36ce95a8e136b7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTM1Yzc5NmEwZTExNTFiMDM5MzNmMmNkMzZjZTk1YThlMTM2Yjdh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T11:51:50Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T16:56:59Z"
      },
      "message": "[tests] Tidy up mininode.py module\n\nMostly move only. Adds a few extra comments.",
      "tree": {
        "sha": "8322a5157f92f7ca281d469a5253766e42380146",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8322a5157f92f7ca281d469a5253766e42380146"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1135c796a0e1151b03933f2cd36ce95a8e136b7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1135c796a0e1151b03933f2cd36ce95a8e136b7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1135c796a0e1151b03933f2cd36ce95a8e136b7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1135c796a0e1151b03933f2cd36ce95a8e136b7a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cd9b1bfaf65b4e24c1eb9ca8268513e78cc458"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 92,
      "deletions": 78
    },
    "files": [
      {
        "sha": "91badc72ce79c4c071e205ef26396643a37cd7b8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 92,
        "deletions": 78,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1135c796a0e1151b03933f2cd36ce95a8e136b7a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1135c796a0e1151b03933f2cd36ce95a8e136b7a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=1135c796a0e1151b03933f2cd36ce95a8e136b7a",
        "patch": "@@ -27,18 +27,35 @@\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n \n-# Keep our own socket map for asyncore, so that we can track disconnects\n-# ourselves (to workaround an issue with closing an asyncore socket when\n-# using select)\n-mininode_socket_map = dict()\n-\n-# One lock for synchronizing all data access between the networking thread (see\n-# NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n-# and whenever adding anything to the send buffer (in send_message()).  This\n-# lock should be acquired in the thread running the test logic to synchronize\n-# access to any data shared with the NodeConnCB or NodeConn.\n-mininode_lock = RLock()\n+MESSAGEMAP = {\n+    b\"addr\": msg_addr,\n+    b\"block\": msg_block,\n+    b\"blocktxn\": msg_blocktxn,\n+    b\"cmpctblock\": msg_cmpctblock,\n+    b\"feefilter\": msg_feefilter,\n+    b\"getaddr\": msg_getaddr,\n+    b\"getblocks\": msg_getblocks,\n+    b\"getblocktxn\": msg_getblocktxn,\n+    b\"getdata\": msg_getdata,\n+    b\"getheaders\": msg_getheaders,\n+    b\"headers\": msg_headers,\n+    b\"inv\": msg_inv,\n+    b\"mempool\": msg_mempool,\n+    b\"ping\": msg_ping,\n+    b\"pong\": msg_pong,\n+    b\"reject\": msg_reject,\n+    b\"sendcmpct\": msg_sendcmpct,\n+    b\"sendheaders\": msg_sendheaders,\n+    b\"tx\": msg_tx,\n+    b\"verack\": msg_verack,\n+    b\"version\": msg_version,\n+}\n+\n+MAGIC_BYTES = {\n+    \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+    \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n+    \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+}\n \n class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n@@ -183,34 +200,6 @@ class NodeConn(asyncore.dispatcher):\n     \"\"\"The actual NodeConn class\n \n     This class provides an interface for a p2p connection to a specified node.\"\"\"\n-    messagemap = {\n-        b\"version\": msg_version,\n-        b\"verack\": msg_verack,\n-        b\"addr\": msg_addr,\n-        b\"inv\": msg_inv,\n-        b\"getdata\": msg_getdata,\n-        b\"getblocks\": msg_getblocks,\n-        b\"tx\": msg_tx,\n-        b\"block\": msg_block,\n-        b\"getaddr\": msg_getaddr,\n-        b\"ping\": msg_ping,\n-        b\"pong\": msg_pong,\n-        b\"headers\": msg_headers,\n-        b\"getheaders\": msg_getheaders,\n-        b\"reject\": msg_reject,\n-        b\"mempool\": msg_mempool,\n-        b\"feefilter\": msg_feefilter,\n-        b\"sendheaders\": msg_sendheaders,\n-        b\"sendcmpct\": msg_sendcmpct,\n-        b\"cmpctblock\": msg_cmpctblock,\n-        b\"getblocktxn\": msg_getblocktxn,\n-        b\"blocktxn\": msg_blocktxn\n-    }\n-    MAGIC_BYTES = {\n-        \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n-        \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n-    }\n \n     def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n@@ -247,6 +236,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n             self.handle_close()\n         self.rpc = rpc\n \n+    # Connection and disconnection methods\n+\n     def handle_connect(self):\n         if self.state != \"connected\":\n             logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n@@ -264,44 +255,30 @@ def handle_close(self):\n             pass\n         self.cb.on_close(self)\n \n+    def disconnect_node(self):\n+        \"\"\" Disconnect the p2p connection.\n+\n+        Called by the test logic thread. Causes the p2p connection\n+        to be disconnected on the next iteration of the asyncore loop.\"\"\"\n+        self.disconnect = True\n+\n+    # Socket read methods\n+\n+    def readable(self):\n+        return True\n+\n     def handle_read(self):\n         t = self.recv(8192)\n         if len(t) > 0:\n             self.recvbuf += t\n             self.got_data()\n \n-    def readable(self):\n-        return True\n-\n-    def writable(self):\n-        with mininode_lock:\n-            pre_connection = self.state == \"connecting\"\n-            length = len(self.sendbuf)\n-        return (length > 0 or pre_connection)\n-\n-    def handle_write(self):\n-        with mininode_lock:\n-            # asyncore does not expose socket connection, only the first read/write\n-            # event, thus we must check connection manually here to know when we\n-            # actually connect\n-            if self.state == \"connecting\":\n-                self.handle_connect()\n-            if not self.writable():\n-                return\n-\n-            try:\n-                sent = self.send(self.sendbuf)\n-            except:\n-                self.handle_close()\n-                return\n-            self.sendbuf = self.sendbuf[sent:]\n-\n     def got_data(self):\n         try:\n             while True:\n                 if len(self.recvbuf) < 4:\n                     return\n-                if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n+                if self.recvbuf[:4] != MAGIC_BYTES[self.network]:\n                     raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n                 if len(self.recvbuf) < 4 + 12 + 4 + 4:\n                     return\n@@ -316,23 +293,54 @@ def got_data(self):\n                 if checksum != h[:4]:\n                     raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n                 self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n-                if command not in self.messagemap:\n+                if command not in MESSAGEMAP:\n                     raise ValueError(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n                 f = BytesIO(msg)\n-                t = self.messagemap[command]()\n+                t = MESSAGEMAP[command]()\n                 t.deserialize(f)\n                 self.got_message(t)\n         except Exception as e:\n             logger.exception('Error reading message:', repr(e))\n             raise\n \n+    def got_message(self, message):\n+        if self.last_sent + 30 * 60 < time.time():\n+            self.send_message(MESSAGEMAP[b'ping']())\n+        self._log_message(\"receive\", message)\n+        self.cb.deliver(self, message)\n+\n+    # Socket write methods\n+\n+    def writable(self):\n+        with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n+            length = len(self.sendbuf)\n+        return (length > 0 or pre_connection)\n+\n+    def handle_write(self):\n+        with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n+            try:\n+                sent = self.send(self.sendbuf)\n+            except:\n+                self.handle_close()\n+                return\n+            self.sendbuf = self.sendbuf[sent:]\n+\n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n         self._log_message(\"send\", message)\n         command = message.command\n         data = message.serialize()\n-        tmsg = self.MAGIC_BYTES[self.network]\n+        tmsg = MAGIC_BYTES[self.network]\n         tmsg += command\n         tmsg += b\"\\x00\" * (12 - len(command))\n         tmsg += struct.pack(\"<I\", len(data))\n@@ -351,11 +359,7 @@ def send_message(self, message, pushbuf=False):\n                 self.sendbuf += tmsg\n             self.last_sent = time.time()\n \n-    def got_message(self, message):\n-        if self.last_sent + 30 * 60 < time.time():\n-            self.send_message(self.messagemap[b'ping']())\n-        self._log_message(\"receive\", message)\n-        self.cb.deliver(self, message)\n+    # Class utility methods\n \n     def _log_message(self, direction, msg):\n         if direction == \"send\":\n@@ -367,9 +371,19 @@ def _log_message(self, direction, msg):\n             log_message += \"... (msg truncated)\"\n         logger.debug(log_message)\n \n-    def disconnect_node(self):\n-        self.disconnect = True\n \n+# Keep our own socket map for asyncore, so that we can track disconnects\n+# ourselves (to workaround an issue with closing an asyncore socket when\n+# using select)\n+mininode_socket_map = dict()\n+\n+# One lock for synchronizing all data access between the networking thread (see\n+# NetworkThread below) and the thread running the test logic.  For simplicity,\n+# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n+# and whenever adding anything to the send buffer (in send_message()).  This\n+# lock should be acquired in the thread running the test logic to synchronize\n+# access to any data shared with the NodeConnCB or NodeConn.\n+mininode_lock = RLock()\n \n class NetworkThread(Thread):\n     def run(self):\n@@ -381,6 +395,6 @@ def run(self):\n             for fd, obj in mininode_socket_map.items():\n                 if obj.disconnect:\n                     disconnected.append(obj)\n-            [ obj.handle_close() for obj in disconnected ]\n+            [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")"
      }
    ]
  },
  {
    "sha": "05a761932edd05cf94ffe938908baf058f38632a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWE3NjE5MzJlZGQwNWNmOTRmZmU5Mzg5MDhiYWYwNThmMzg2MzJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T19:22:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T19:22:45Z"
      },
      "message": "Merge #11353: Small refactor of CCoinsViewCache::BatchWrite()\n\n5b9748f97 Small refactor of CCoinsViewCache::BatchWrite() (Dan Raviv)\n\nPull request description:\n\n  `std::unordered_map::erase( const_iterator pos )` returns an iterator to the element following the removed one. Use that to optimize (probably minor-performance-wise, and definitely code-structure-wise) the implementation of `CCoinsViewCache::BatchWrite()`.\n\nTree-SHA512: 00abc838ad91771cfcddd45688841c9414869b75289d09b483a7f0ba835614fe189e9c8aca8a80e3de78ee397ec14083ae52e2e92b7863b3b6eb0d0cb892c9dd",
      "tree": {
        "sha": "793cc2adc18abbda31ebb43a3d9974d7bc24d415",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/793cc2adc18abbda31ebb43a3d9974d7bc24d415"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05a761932edd05cf94ffe938908baf058f38632a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBfyFAAoJENLqSFDnUoslxJ4QAInJobrnrvRFG+2x8d4SQDVB\ng3YZNwPa24sdFdc/FVDYzMr2EJzymTKg/7crkaZwmRCkOG7rjt+EOwH6tgjj40mC\nle3dBY4U4JZbfU6d4pT+WaFsp//iXPbUMofswL4BdgdWnCbXhlimqlKoTIu9RPlg\n+JVJ229PeNMfv0jsf/OPHskZXo2dAa2tdHBRWQMmULpyLQHGQ/V4AJFXy7/eqg0V\nEO8Ym9b4OTRTWmV7raU2lroJyUljAfZ9JmTAyGEV7LcAF1N+C0fPkp8C0C4RkBKU\nWaNgCSWPOkWEFEsZm31Lv3xDOSbL/c9+W5zoBaRL5e2zKglRD/STaUhINWxxZMfg\nD6tDJeyIurdwiD0kJ/jVbVGfgYNJC0R3IlvlzX7EMiO0zoneSSnMKQ2nL2GJPLPD\nIGr6ru3ZmlyzAAOjfc6rBELonek9zm6nApwGpjhzzZNd2uw9L0jlqmXDjjPkXx7c\nu/u6r0aBpuBTi61UpykwLmF1OmaxXVDqZFdPFkATbaKM4uJM2kKLP+WAj5a6gaZB\nA9ncmXYYMT2yOOQSpxgBJZ2CF1hDPyaDamPzOk7QQQIeN7dyhR6/sb0Y1HGMBamP\nsWs+5xddaSrAwkwF9KMcnuIrzcwzGjpdi906hQFz3aevLiA8CW0uavExnHmcjINv\nGsE20KsaLZZoT9YsPg0U\n=rDGG\n-----END PGP SIGNATURE-----",
        "payload": "tree 793cc2adc18abbda31ebb43a3d9974d7bc24d415\nparent ee92243e66f2df03b3a759a8ffb75dc06f0cea0d\nparent 5b9748f979dd65b229e2882e670794c46e2e720b\nauthor MarcoFalke <falke.marco@gmail.com> 1510341756 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510341765 -0500\n\nMerge #11353: Small refactor of CCoinsViewCache::BatchWrite()\n\n5b9748f97 Small refactor of CCoinsViewCache::BatchWrite() (Dan Raviv)\n\nPull request description:\n\n  `std::unordered_map::erase( const_iterator pos )` returns an iterator to the element following the removed one. Use that to optimize (probably minor-performance-wise, and definitely code-structure-wise) the implementation of `CCoinsViewCache::BatchWrite()`.\n\nTree-SHA512: 00abc838ad91771cfcddd45688841c9414869b75289d09b483a7f0ba835614fe189e9c8aca8a80e3de78ee397ec14083ae52e2e92b7863b3b6eb0d0cb892c9dd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a761932edd05cf94ffe938908baf058f38632a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05a761932edd05cf94ffe938908baf058f38632a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a761932edd05cf94ffe938908baf058f38632a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee92243e66f2df03b3a759a8ffb75dc06f0cea0d"
      },
      {
        "sha": "5b9748f979dd65b229e2882e670794c46e2e720b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9748f979dd65b229e2882e670794c46e2e720b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9748f979dd65b229e2882e670794c46e2e720b"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 48,
      "deletions": 46
    },
    "files": [
      {
        "sha": "8fdde72eded13efd6f6ee412d6d93bf7d20a0314",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 46,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05a761932edd05cf94ffe938908baf058f38632a/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05a761932edd05cf94ffe938908baf058f38632a/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=05a761932edd05cf94ffe938908baf058f38632a",
        "patch": "@@ -146,56 +146,58 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n-            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n-            if (itUs == cacheCoins.end()) {\n-                // The parent cache does not have an entry, while the child does\n-                // We can ignore it if it's both FRESH and pruned in the child\n-                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                    // Otherwise we will need to create it in the parent\n-                    // and move the data up and mark it as dirty\n-                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                    entry.coin = std::move(it->second.coin);\n-                    cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n-                    entry.flags = CCoinsCacheEntry::DIRTY;\n-                    // We can mark it FRESH in the parent if it was FRESH in the child\n-                    // Otherwise it might have just been flushed from the parent's cache\n-                    // and already exist in the grandparent\n-                    if (it->second.flags & CCoinsCacheEntry::FRESH)\n-                        entry.flags |= CCoinsCacheEntry::FRESH;\n+    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = mapCoins.erase(it)) {\n+        // Ignore non-dirty entries (optimization).\n+        if (!(it->second.flags & CCoinsCacheEntry::DIRTY)) {\n+            continue;\n+        }\n+        CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+        if (itUs == cacheCoins.end()) {\n+            // The parent cache does not have an entry, while the child does\n+            // We can ignore it if it's both FRESH and pruned in the child\n+            if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n+                // Otherwise we will need to create it in the parent\n+                // and move the data up and mark it as dirty\n+                CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                entry.coin = std::move(it->second.coin);\n+                cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n+                entry.flags = CCoinsCacheEntry::DIRTY;\n+                // We can mark it FRESH in the parent if it was FRESH in the child\n+                // Otherwise it might have just been flushed from the parent's cache\n+                // and already exist in the grandparent\n+                if (it->second.flags & CCoinsCacheEntry::FRESH) {\n+                    entry.flags |= CCoinsCacheEntry::FRESH;\n                 }\n-            } else {\n-                // Assert that the child cache entry was not marked FRESH if the\n-                // parent cache entry has unspent outputs. If this ever happens,\n-                // it means the FRESH flag was misapplied and there is a logic\n-                // error in the calling code.\n-                if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent())\n-                    throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+            }\n+        } else {\n+            // Assert that the child cache entry was not marked FRESH if the\n+            // parent cache entry has unspent outputs. If this ever happens,\n+            // it means the FRESH flag was misapplied and there is a logic\n+            // error in the calling code.\n+            if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent()) {\n+                throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+            }\n \n-                // Found the entry in the parent cache\n-                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n-                    // The grandparent does not have an entry, and the child is\n-                    // modified and being pruned. This means we can just delete\n-                    // it from the parent.\n-                    cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                    cacheCoins.erase(itUs);\n-                } else {\n-                    // A normal modification.\n-                    cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                    itUs->second.coin = std::move(it->second.coin);\n-                    cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n-                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                    // NOTE: It is possible the child has a FRESH flag here in\n-                    // the event the entry we found in the parent is pruned. But\n-                    // we must not copy that FRESH flag to the parent as that\n-                    // pruned state likely still needs to be communicated to the\n-                    // grandparent.\n-                }\n+            // Found the entry in the parent cache\n+            if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n+                // The grandparent does not have an entry, and the child is\n+                // modified and being pruned. This means we can just delete\n+                // it from the parent.\n+                cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n+                cacheCoins.erase(itUs);\n+            } else {\n+                // A normal modification.\n+                cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n+                itUs->second.coin = std::move(it->second.coin);\n+                cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n+                itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                // NOTE: It is possible the child has a FRESH flag here in\n+                // the event the entry we found in the parent is pruned. But\n+                // we must not copy that FRESH flag to the parent as that\n+                // pruned state likely still needs to be communicated to the\n+                // grandparent.\n             }\n         }\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n     }\n     hashBlock = hashBlockIn;\n     return true;"
      }
    ]
  },
  {
    "sha": "ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTBjZDI0ZjdkMDFmMjNmZDUzNDBjMmFmYzY0NGM3NjBmZjUxOGE5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-15T15:39:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T20:23:17Z"
      },
      "message": "[tests] Tidy up receivedby.py\n\n- Fix flake8 warnings\n- Remove the useless get_sub_array_from_array() function\n- Reduce runtime for receivedby.py by about half by only using two nodes",
      "tree": {
        "sha": "80aafc968b6934703e782507f2dc0ade7ef0dcb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80aafc968b6934703e782507f2dc0ade7ef0dcb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05a761932edd05cf94ffe938908baf058f38632a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a761932edd05cf94ffe938908baf058f38632a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05a761932edd05cf94ffe938908baf058f38632a"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 46,
      "deletions": 72
    },
    "files": [
      {
        "sha": "c40572f57771dc01907fc28fda3e8ecab4ee0049",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 46,
        "deletions": 72,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0cd24f7d01f23fd5340c2afc644c760ff518a9/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0cd24f7d01f23fd5340c2afc644c760ff518a9/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
        "patch": "@@ -3,138 +3,112 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-def get_sub_array_from_array(object_array, to_match):\n-    '''\n-        Finds and returns a sub array from an array of arrays.\n-        to_match should be a unique idetifier of a sub array\n-    '''\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        return item\n-    return []\n+from test_framework.util import assert_array_result, assert_equal\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.enable_mocktime()\n \n     def run_test(self):\n-        '''\n-        listreceivedbyaddress Test\n-        '''\n+        # Generate block to get out of IBD\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"listreceivedbyaddress Test\")\n+\n         # Send from node 0 to 1\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n-        #Check not listed in listreceivedbyaddress because has 0 confirmations\n+        # Check not listed in listreceivedbyaddress because has 0 confirmations\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n-                           {\"address\":addr},\n-                           { },\n-                           True)\n-        #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n+                            {\"address\": addr},\n+                            {},\n+                            True)\n+        # Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-        #With min confidence < 10\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+        # With min confidence < 10\n         assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-        #With min confidence > 10, should not find Tx\n-        assert_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+        # With min confidence > 10, should not find Tx\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n-        #Empty Tx\n+        # Empty Tx\n         addr = self.nodes[1].getnewaddress()\n-        assert_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+\n+        self.log.info(\"getreceivedbyaddress Test\")\n \n-        '''\n-            getreceivedbyaddress Test\n-        '''\n         # Send from node 0 to 1\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n-        #Check balance is 0 because of 0 confirmations\n+        # Check balance is 0 because of 0 confirmations\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n-        if balance != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.0\"))\n \n-        #Check balance is 0.1\n-        balance = self.nodes[1].getreceivedbyaddress(addr,0)\n-        if balance != Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        # Check balance is 0.1\n+        balance = self.nodes[1].getreceivedbyaddress(addr, 0)\n+        assert_equal(balance, Decimal(\"0.1\"))\n \n-        #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n+        # Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n-        if balance != Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.1\"))\n+\n+        self.log.info(\"listreceivedbyaccount + getreceivedbyaccount Test\")\n \n-        '''\n-            listreceivedbyaccount + getreceivedbyaccount Test\n-        '''\n-        #set pre-state\n+        # set pre-state\n         addrArr = self.nodes[1].getnewaddress()\n         account = self.nodes[1].getaccount(addrArr)\n-        received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(),{\"account\":account})\n-        if len(received_by_account_json) == 0:\n-            raise AssertionError(\"No accounts found in node\")\n+        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount() if r[\"account\"] == account][0]\n         balance_by_account = self.nodes[1].getreceivedbyaccount(account)\n \n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n         # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n         assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                           {\"account\":account},\n-                           received_by_account_json)\n+                            {\"account\": account},\n+                            received_by_account_json)\n \n         # getreceivedbyaddress should return same balance because of 0 confirmations\n         balance = self.nodes[1].getreceivedbyaccount(account)\n-        if balance != balance_by_account:\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, balance_by_account)\n \n         self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n         assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                           {\"account\":account},\n-                           {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n+                            {\"account\": account},\n+                            {\"account\": received_by_account_json[\"account\"], \"amount\": (received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n \n         # getreceivedbyaddress should return updates balance\n         balance = self.nodes[1].getreceivedbyaccount(account)\n-        if balance != balance_by_account + Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, balance_by_account + Decimal(\"0.1\"))\n \n-        #Create a new account named \"mynewaccount\" that has a 0 balance\n+        # Create a new account named \"mynewaccount\" that has a 0 balance\n         self.nodes[1].getaccountaddress(\"mynewaccount\")\n-        received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(0,True),{\"account\":\"mynewaccount\"})\n-        if len(received_by_account_json) == 0:\n-            raise AssertionError(\"No accounts found in node\")\n+        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount(0, True) if r[\"account\"] == \"mynewaccount\"][0]\n \n         # Test includeempty of listreceivedbyaccount\n-        if received_by_account_json[\"amount\"] != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by listreceivedbyaccount, %0.2f\"%(received_by_account_json[\"amount\"]))\n+        assert_equal(received_by_account_json[\"amount\"], Decimal(\"0.0\"))\n \n         # Test getreceivedbyaccount for 0 amount accounts\n         balance = self.nodes[1].getreceivedbyaccount(\"mynewaccount\")\n-        if balance != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.0\"))\n \n if __name__ == '__main__':\n     ReceivedByTest().main()"
      }
    ]
  },
  {
    "sha": "61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWZiODA2NjBmNzNlNWFhNWI2OTMwMmVjYzdhYzMzZGEyMDZiYTVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T20:33:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-10T20:33:30Z"
      },
      "message": "Merge #11269: [Mempool] CTxMemPoolEntry::UpdateAncestorState: modifySiagOps param type\n\n203a4aa31 Fix CTxMemPoolEntry::UpdateAncestorState: modifySigOps param type int -> int64_t (donaloconnor)\n\nPull request description:\n\n  CTxMemPoolEntry::CTxMemPoolEntry's modifySigOps parameter is int while update_ancestor_state::modifySigOpsCost is int64_t. This issue was raised in #11165. It looks like the function paramaters were not changed in commit 72abd2c\n\n  This will avoid unexpected truncation of int64_t -> int\n\nTree-SHA512: 314c703f217e104336456859066d18fb0d12c4f9f32835e17490a6f29eb05951184095039e4e57edacef8ad35dd75c6d97d9af656a52209dd0c3779b4ffa0914",
      "tree": {
        "sha": "1b7b5b18cb3b7f989de87847ddaeb49e24f4fa29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b7b5b18cb3b7f989de87847ddaeb49e24f4fa29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBg0aAAoJENLqSFDnUosliW0QAJfHgyMG+4/00SCtRerXT/1p\nRazlI7WgrEymCaPwKc7bAfp9/lb9XckGL2PaTyDi5r+KgNYaRIuoHq4CvNPNdMfQ\nvY8OXZMulLhGyl0+TcddTyuLPyhrge6By8IfKaATNRjCzgAgS/pL2dnee4qGz226\nYTqO/nQbTm9FIZdtluF2ngPncApeBHosLzH9hHFZOtv0u3vxMGcR/D11Uw3A8W4n\nxiXH30Evd5N6HoJUfqttY1OaECxOLuPhWq3wDy4oERDQrgeQ0cqdp0IhR9DjmFe7\nzFwx0I+qvlsMDOLaW9zNXXr6g06f2WAVK72NyO9IiCseqAV95fTxT1cRNCRp/QR0\nin+3dSLk5gN18KOVkELtwBlVTg1h3+1kgV9x1KyQu/hb7G3KKeNELfdPIzIyvpf9\nzkOm+Q+B0DEI1xXbOtRXbvp+O5jal4c7c6kPY7LTRBXhXlR/HIZjxyUBnCDFpLl3\nYAH5lawBf/UPqEKyzQC69bXNR7lWaWiNlQQq/Tnc2PpEUJ+sd5tKv2V2WoXQKnxJ\nAoW4Fbb671ERs0BFqYCrRHN/HQvc9pDdueMSavw6Kj/2vzbDALC38dzmixukfwgb\nTPEPBLHNVKwKx7HX1cSQIJTUfR/ByhNLLH6oSHC4IqQDFkIzM3Stn7YF6nbl+5c0\n6oB6DFoSNzowJe7D8YCy\n=t+ib\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b7b5b18cb3b7f989de87847ddaeb49e24f4fa29\nparent 05a761932edd05cf94ffe938908baf058f38632a\nparent 203a4aa31eee402755f7156593228ab55407cc47\nauthor MarcoFalke <falke.marco@gmail.com> 1510346008 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510346010 -0500\n\nMerge #11269: [Mempool] CTxMemPoolEntry::UpdateAncestorState: modifySiagOps param type\n\n203a4aa31 Fix CTxMemPoolEntry::UpdateAncestorState: modifySigOps param type int -> int64_t (donaloconnor)\n\nPull request description:\n\n  CTxMemPoolEntry::CTxMemPoolEntry's modifySigOps parameter is int while update_ancestor_state::modifySigOpsCost is int64_t. This issue was raised in #11165. It looks like the function paramaters were not changed in commit 72abd2c\n\n  This will avoid unexpected truncation of int64_t -> int\n\nTree-SHA512: 314c703f217e104336456859066d18fb0d12c4f9f32835e17490a6f29eb05951184095039e4e57edacef8ad35dd75c6d97d9af656a52209dd0c3779b4ffa0914\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61fb80660f73e5aa5b69302ecc7ac33da206ba5a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05a761932edd05cf94ffe938908baf058f38632a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a761932edd05cf94ffe938908baf058f38632a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05a761932edd05cf94ffe938908baf058f38632a"
      },
      {
        "sha": "203a4aa31eee402755f7156593228ab55407cc47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/203a4aa31eee402755f7156593228ab55407cc47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/203a4aa31eee402755f7156593228ab55407cc47"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c509e22a2e93a60a70739294d5873399765012af",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61fb80660f73e5aa5b69302ecc7ac33da206ba5a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61fb80660f73e5aa5b69302ecc7ac33da206ba5a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
        "patch": "@@ -317,7 +317,7 @@ void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFe\n     assert(int64_t(nCountWithDescendants) > 0);\n }\n \n-void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps)\n+void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n {\n     nSizeWithAncestors += modifySize;\n     assert(int64_t(nSizeWithAncestors) > 0);"
      },
      {
        "sha": "f112ee17758085cabc1e8651682a36b67047dc3c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61fb80660f73e5aa5b69302ecc7ac33da206ba5a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61fb80660f73e5aa5b69302ecc7ac33da206ba5a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
        "patch": "@@ -109,7 +109,7 @@ class CTxMemPoolEntry\n     // Adjusts the descendant state.\n     void UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n     // Adjusts the ancestor state\n-    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps);\n+    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps);\n     // Updates the fee delta used for mining priority score, and the\n     // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);"
      }
    ]
  },
  {
    "sha": "5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTBiYThmOGNkNTVhNWMyY2VhNGU0ZTIzNDNkN2RjZDUyYWE4ZmFk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-15T15:33:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T21:07:37Z"
      },
      "message": "[wallet] getreceivedbyaddress should return error if address is not mine",
      "tree": {
        "sha": "ded7c100a7df6cd9d06479e52243e33f93191e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ded7c100a7df6cd9d06479e52243e33f93191e2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea0cd24f7d01f23fd5340c2afc644c760ff518a9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8abb4c9a25746a51e2651b2154e61a04729978a9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
        "patch": "@@ -654,7 +654,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     }\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     if (!IsMine(*pwallet, scriptPubKey)) {\n-        return ValueFromAmount(0);\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n     }\n \n     // Minimum confirmations"
      },
      {
        "sha": "97da19546fca584ad1ff76f4951528bc1e99cdd1",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
        "patch": "@@ -6,7 +6,10 @@\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_array_result, assert_equal\n+from test_framework.util import (assert_array_result,\n+                                 assert_equal,\n+                                 assert_raises_rpc_error,\n+                                 )\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -68,6 +71,9 @@ def run_test(self):\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n         assert_equal(balance, Decimal(\"0.1\"))\n \n+        # Trying to getreceivedby for an address the wallet doesn't own should return an error\n+        assert_raises_rpc_error(-4, \"Address not found in wallet\", self.nodes[0].getreceivedbyaddress, addr)\n+\n         self.log.info(\"listreceivedbyaccount + getreceivedbyaccount Test\")\n \n         # set pre-state"
      }
    ]
  },
  {
    "sha": "7c4f0091957d305679546fde592ffa2de2d186fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzRmMDA5MTk1N2QzMDU2Nzk1NDZmZGU1OTJmZmEyZGUyZDE4NmZl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-20T20:04:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T22:01:41Z"
      },
      "message": "[trivial] Rename feebumper variables according to project code style\n\nFuture PRs will completely refactor this translation unit and touch all\nthis code so we rename the variables to follow project stlye guidelines\nin this preparation commit.\n\nDon't use m_ prefixes for member variables since we're going to remove\nthe class entirely in the next commits.",
      "tree": {
        "sha": "ad385520edd3d7ce8daf449d4d6e2558f6959997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad385520edd3d7ce8daf449d4d6e2558f6959997"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c4f0091957d305679546fde592ffa2de2d186fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4f0091957d305679546fde592ffa2de2d186fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4f0091957d305679546fde592ffa2de2d186fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4f0091957d305679546fde592ffa2de2d186fe/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05a761932edd05cf94ffe938908baf058f38632a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a761932edd05cf94ffe938908baf058f38632a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05a761932edd05cf94ffe938908baf058f38632a"
      }
    ],
    "stats": {
      "total": 204,
      "additions": 102,
      "deletions": 102
    },
    "files": [
      {
        "sha": "d850c5e55bbc3870148d44bba10e532b56f36ec3",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4f0091957d305679546fde592ffa2de2d186fe/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4f0091957d305679546fde592ffa2de2d186fe/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7c4f0091957d305679546fde592ffa2de2d186fe",
        "patch": "@@ -666,12 +666,12 @@ bool WalletModel::transactionCanBeBumped(uint256 hash) const\n \n bool WalletModel::bumpFee(uint256 hash)\n {\n-    std::unique_ptr<CFeeBumper> feeBump;\n+    std::unique_ptr<FeeBumper> feeBump;\n     {\n         CCoinControl coin_control;\n         coin_control.signalRbf = true;\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, coin_control, 0));\n+        feeBump.reset(new FeeBumper(wallet, hash, coin_control, 0));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "fa64c215459040c9aaa967d8ef1379aae5cb6083",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 83,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4f0091957d305679546fde592ffa2de2d186fe/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4f0091957d305679546fde592ffa2de2d186fe/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=7c4f0091957d305679546fde592ffa2de2d186fe",
        "patch": "@@ -23,123 +23,123 @@\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<CInputCoin> vCoins;\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n     // wallet, with a valid index into the vout array.\n     for (auto& input : tx.vin) {\n-        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n-        assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const auto mi = wallet->mapWallet.find(input.prevout.hash);\n+        assert(mi != wallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n         vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n     }\n-    if (!pWallet->DummySignTx(txNew, vCoins)) {\n+    if (!wallet->DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n         // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionSize(txNew);\n }\n \n-bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx) {\n-    if (pWallet->HasWalletSpend(wtx.GetHash())) {\n-        vErrors.push_back(\"Transaction has descendants in the wallet\");\n-        currentResult = BumpFeeResult::INVALID_PARAMETER;\n+bool FeeBumper::preconditionChecks(const CWallet *wallet, const CWalletTx& wtx) {\n+    if (wallet->HasWalletSpend(wtx.GetHash())) {\n+        errors.push_back(\"Transaction has descendants in the wallet\");\n+        current_result = BumpFeeResult::INVALID_PARAMETER;\n         return false;\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it_mp = mempool.mapTx.find(wtx.GetHash());\n         if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n-            vErrors.push_back(\"Transaction has descendants in the mempool\");\n-            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            errors.push_back(\"Transaction has descendants in the mempool\");\n+            current_result = BumpFeeResult::INVALID_PARAMETER;\n             return false;\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        vErrors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+        errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return false;\n     }\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee)\n+FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinControl& coin_control, CAmount total_fee)\n     :\n-    txid(std::move(txidIn)),\n-    nOldFee(0),\n-    nNewFee(0)\n+    txid(std::move(txid_in)),\n+    old_fee(0),\n+    new_fee(0)\n {\n-    vErrors.clear();\n-    bumpedTxid.SetNull();\n-    AssertLockHeld(pWallet->cs_wallet);\n-    auto it = pWallet->mapWallet.find(txid);\n-    if (it == pWallet->mapWallet.end()) {\n-        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n-        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+    errors.clear();\n+    bumped_txid.SetNull();\n+    AssertLockHeld(wallet->cs_wallet);\n+    auto it = wallet->mapWallet.find(txid);\n+    if (it == wallet->mapWallet.end()) {\n+        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        current_result = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n         return;\n     }\n     const CWalletTx& wtx = it->second;\n \n-    if (!preconditionChecks(pWallet, wtx)) {\n+    if (!preconditionChecks(wallet, wtx)) {\n         return;\n     }\n \n     if (!SignalsOptInRBF(*wtx.tx)) {\n-        vErrors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return;\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        vErrors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return;\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!pWallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n-        vErrors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return;\n     }\n \n     // figure out which output was change\n     // if there was no change output or multiple change outputs, fail\n     int nOutput = -1;\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (pWallet->IsChange(wtx.tx->vout[i])) {\n+        if (wallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                vErrors.push_back(\"Transaction has multiple change outputs\");\n-                currentResult = BumpFeeResult::WALLET_ERROR;\n+                errors.push_back(\"Transaction has multiple change outputs\");\n+                current_result = BumpFeeResult::WALLET_ERROR;\n                 return;\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        vErrors.push_back(\"Transaction does not have a change output\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+        errors.push_back(\"Transaction does not have a change output\");\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return;\n     }\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, pWallet);\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n     if (maxNewTxSize < 0) {\n-        vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n-        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        errors.push_back(\"Transaction contains inputs that cannot be signed\");\n+        current_result = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n         return;\n     }\n \n     // calculate the old fee and fee-rate\n-    nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n-    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(old_fee, txSize);\n     CFeeRate nNewFeeRate;\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n@@ -149,26 +149,26 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         walletIncrementalRelayFee = ::incrementalRelayFee;\n     }\n \n-    if (totalFee > 0) {\n+    if (total_fee > 0) {\n         CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n-        if (totalFee < minTotalFee) {\n-            vErrors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+        if (total_fee < minTotalFee) {\n+            errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            current_result = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n         CAmount requiredFee = GetRequiredFee(maxNewTxSize);\n-        if (totalFee < requiredFee) {\n-            vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+        if (total_fee < requiredFee) {\n+            errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n-            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            current_result = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n-        nNewFee = totalFee;\n-        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+        new_fee = total_fee;\n+        nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        nNewFee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n-        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n+        new_fee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n         // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n@@ -177,53 +177,53 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         // add 1 satoshi to the result, because it may have been rounded down.\n         if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n             nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+            new_fee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n-     if (nNewFee > maxTxFee) {\n-         vErrors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                               FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n-         currentResult = BumpFeeResult::WALLET_ERROR;\n+     if (new_fee > maxTxFee) {\n+         errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                               FormatMoney(new_fee), FormatMoney(maxTxFee)));\n+         current_result = BumpFeeResult::WALLET_ERROR;\n          return;\n      }\n \n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    // moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        vErrors.push_back(strprintf(\n+        errors.push_back(strprintf(\n             \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \"\n             \"the totalFee value should be at least %s or the settxfee value should be at least %s to add transaction\",\n             FormatMoney(nNewFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)),\n             FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return;\n     }\n \n     // Now modify the output to increase the fee.\n     // If the output is not large enough to pay the fee, fail.\n-    CAmount nDelta = nNewFee - nOldFee;\n+    CAmount nDelta = new_fee - old_fee;\n     assert(nDelta > 0);\n     mtx =  *wtx.tx;\n     CTxOut* poutput = &(mtx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        vErrors.push_back(\"Change output is too small to bump the fee\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n+        errors.push_back(\"Change output is too small to bump the fee\");\n+        current_result = BumpFeeResult::WALLET_ERROR;\n         return;\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n     if (poutput->nValue <= GetDustThreshold(*poutput, ::dustRelayFee)) {\n         LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n-        nNewFee += poutput->nValue;\n+        new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);\n     }\n \n@@ -234,63 +234,63 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         }\n     }\n \n-    currentResult = BumpFeeResult::OK;\n+    current_result = BumpFeeResult::OK;\n }\n \n-bool CFeeBumper::signTransaction(CWallet *pWallet)\n+bool FeeBumper::signTransaction(CWallet *wallet)\n {\n-     return pWallet->SignTransaction(mtx);\n+     return wallet->SignTransaction(mtx);\n }\n \n-bool CFeeBumper::commit(CWallet *pWallet)\n+bool FeeBumper::commit(CWallet *wallet)\n {\n-    AssertLockHeld(pWallet->cs_wallet);\n-    if (!vErrors.empty() || currentResult != BumpFeeResult::OK) {\n+    AssertLockHeld(wallet->cs_wallet);\n+    if (!errors.empty() || current_result != BumpFeeResult::OK) {\n         return false;\n     }\n-    auto it = txid.IsNull() ? pWallet->mapWallet.end() : pWallet->mapWallet.find(txid);\n-    if (it == pWallet->mapWallet.end()) {\n-        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n-        currentResult = BumpFeeResult::MISC_ERROR;\n+    auto it = txid.IsNull() ? wallet->mapWallet.end() : wallet->mapWallet.find(txid);\n+    if (it == wallet->mapWallet.end()) {\n+        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        current_result = BumpFeeResult::MISC_ERROR;\n         return false;\n     }\n     CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n-    if (!preconditionChecks(pWallet, oldWtx)) {\n+    if (!preconditionChecks(wallet, oldWtx)) {\n         return false;\n     }\n \n-    CWalletTx wtxBumped(pWallet, MakeTransactionRef(std::move(mtx)));\n+    CWalletTx wtxBumped(wallet, MakeTransactionRef(std::move(mtx)));\n     // commit/broadcast the tx\n-    CReserveKey reservekey(pWallet);\n+    CReserveKey reservekey(wallet);\n     wtxBumped.mapValue = oldWtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n     wtxBumped.vOrderForm = oldWtx.vOrderForm;\n     wtxBumped.strFromAccount = oldWtx.strFromAccount;\n     wtxBumped.fTimeReceivedIsTxTime = true;\n     wtxBumped.fFromMe = true;\n     CValidationState state;\n-    if (!pWallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+    if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n-        vErrors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n         return false;\n     }\n \n-    bumpedTxid = wtxBumped.GetHash();\n+    bumped_txid = wtxBumped.GetHash();\n     if (state.IsInvalid()) {\n         // This can happen if the mempool rejected the transaction.  Report\n         // what happened in the \"errors\" response.\n-        vErrors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n     }\n \n     // mark the original tx as bumped\n-    if (!pWallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n+    if (!wallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        vErrors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n+        errors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n     }\n     return true;\n }"
      },
      {
        "sha": "8daf80367f212544efb59ce60d3b58d938397321",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4f0091957d305679546fde592ffa2de2d186fe/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4f0091957d305679546fde592ffa2de2d186fe/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=7c4f0091957d305679546fde592ffa2de2d186fe",
        "patch": "@@ -23,39 +23,39 @@ enum class BumpFeeResult\n     MISC_ERROR,\n };\n \n-class CFeeBumper\n+class FeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee);\n-    BumpFeeResult getResult() const { return currentResult; }\n-    const std::vector<std::string>& getErrors() const { return vErrors; }\n-    CAmount getOldFee() const { return nOldFee; }\n-    CAmount getNewFee() const { return nNewFee; }\n-    uint256 getBumpedTxId() const { return bumpedTxid; }\n+    FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinControl& coin_control, CAmount total_fee);\n+    BumpFeeResult getResult() const { return current_result; }\n+    const std::vector<std::string>& getErrors() const { return errors; }\n+    CAmount getOldFee() const { return old_fee; }\n+    CAmount getNewFee() const { return new_fee; }\n+    uint256 getBumpedTxId() const { return bumped_txid; }\n \n     /* signs the new transaction,\n      * returns false if the tx couldn't be found or if it was\n      * impossible to create the signature(s)\n      */\n-    bool signTransaction(CWallet *pWallet);\n+    bool signTransaction(CWallet *wallet);\n \n     /* commits the fee bump,\n      * returns true, in case of CWallet::CommitTransaction was successful\n-     * but, eventually sets vErrors if the tx could not be added to the mempool (will try later)\n+     * but, eventually sets errors if the tx could not be added to the mempool (will try later)\n      * or if the old transaction could not be marked as replaced\n      */\n-    bool commit(CWallet *pWalletNonConst);\n+    bool commit(CWallet *wallet);\n \n private:\n-    bool preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx);\n+    bool preconditionChecks(const CWallet *wallet, const CWalletTx& wtx);\n \n     const uint256 txid;\n-    uint256 bumpedTxid;\n+    uint256 bumped_txid;\n     CMutableTransaction mtx;\n-    std::vector<std::string> vErrors;\n-    BumpFeeResult currentResult;\n-    CAmount nOldFee;\n-    CAmount nNewFee;\n+    std::vector<std::string> errors;\n+    BumpFeeResult current_result;\n+    CAmount old_fee;\n+    CAmount new_fee;\n };\n \n #endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "e9fd15aa08397aa65cde0a7083d40f7147a8e4b5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4f0091957d305679546fde592ffa2de2d186fe/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4f0091957d305679546fde592ffa2de2d186fe/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7c4f0091957d305679546fde592ffa2de2d186fe",
        "patch": "@@ -3125,7 +3125,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n+    FeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {"
      }
    ]
  },
  {
    "sha": "37bdcca3c363cf08ad68e044b493e24e89f2d158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2JkY2NhM2MzNjNjZjA4YWQ2OGUwNDRiNDkzZTI0ZTg5ZjJkMTU4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-09-20T20:19:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T22:03:15Z"
      },
      "message": "[refactor] Make feebumper namespace\n\nFuture commit will remove the FeeBumper class. This commit simply places\neverything into a feebumper namespace, and changes the enum class name\nfrom BumpeFeeResult to feebumper::Result.",
      "tree": {
        "sha": "3cd231f87723acb010191a6b7581cb592672da13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cd231f87723acb010191a6b7581cb592672da13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37bdcca3c363cf08ad68e044b493e24e89f2d158",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37bdcca3c363cf08ad68e044b493e24e89f2d158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37bdcca3c363cf08ad68e044b493e24e89f2d158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37bdcca3c363cf08ad68e044b493e24e89f2d158/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c4f0091957d305679546fde592ffa2de2d186fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4f0091957d305679546fde592ffa2de2d186fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4f0091957d305679546fde592ffa2de2d186fe"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 40,
      "deletions": 32
    },
    "files": [
      {
        "sha": "50d375c8dc7abbcbc89ababd3b77ad8c03beb326",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=37bdcca3c363cf08ad68e044b493e24e89f2d158",
        "patch": "@@ -666,14 +666,14 @@ bool WalletModel::transactionCanBeBumped(uint256 hash) const\n \n bool WalletModel::bumpFee(uint256 hash)\n {\n-    std::unique_ptr<FeeBumper> feeBump;\n+    std::unique_ptr<feebumper::FeeBumper> feeBump;\n     {\n         CCoinControl coin_control;\n         coin_control.signalRbf = true;\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new FeeBumper(wallet, hash, coin_control, 0));\n+        feeBump.reset(new feebumper::FeeBumper(wallet, hash, coin_control, 0));\n     }\n-    if (feeBump->getResult() != BumpFeeResult::OK)\n+    if (feeBump->getResult() != feebumper::Result::OK)\n     {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n             (feeBump->getErrors().size() ? QString::fromStdString(feeBump->getErrors()[0]) : \"\") +\")\");"
      },
      {
        "sha": "1e6f8329fd745d739756e2b97a8c1df08d341dbb",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=37bdcca3c363cf08ad68e044b493e24e89f2d158",
        "patch": "@@ -23,7 +23,7 @@\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet)\n+static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<CInputCoin> vCoins;\n@@ -43,10 +43,12 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n     return GetVirtualTransactionSize(txNew);\n }\n \n+namespace feebumper {\n+\n bool FeeBumper::preconditionChecks(const CWallet *wallet, const CWalletTx& wtx) {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");\n-        current_result = BumpFeeResult::INVALID_PARAMETER;\n+        current_result = Result::INVALID_PARAMETER;\n         return false;\n     }\n \n@@ -55,14 +57,14 @@ bool FeeBumper::preconditionChecks(const CWallet *wallet, const CWalletTx& wtx)\n         auto it_mp = mempool.mapTx.find(wtx.GetHash());\n         if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n             errors.push_back(\"Transaction has descendants in the mempool\");\n-            current_result = BumpFeeResult::INVALID_PARAMETER;\n+            current_result = Result::INVALID_PARAMETER;\n             return false;\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return false;\n     }\n     return true;\n@@ -80,7 +82,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n     auto it = wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n         errors.push_back(\"Invalid or non-wallet transaction id\");\n-        current_result = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        current_result = Result::INVALID_ADDRESS_OR_KEY;\n         return;\n     }\n     const CWalletTx& wtx = it->second;\n@@ -91,21 +93,21 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n \n     if (!SignalsOptInRBF(*wtx.tx)) {\n         errors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return;\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n         errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return;\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n         errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return;\n     }\n \n@@ -116,15 +118,15 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n         if (wallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n                 errors.push_back(\"Transaction has multiple change outputs\");\n-                current_result = BumpFeeResult::WALLET_ERROR;\n+                current_result = Result::WALLET_ERROR;\n                 return;\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n         errors.push_back(\"Transaction does not have a change output\");\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return;\n     }\n \n@@ -133,7 +135,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n     if (maxNewTxSize < 0) {\n         errors.push_back(\"Transaction contains inputs that cannot be signed\");\n-        current_result = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        current_result = Result::INVALID_ADDRESS_OR_KEY;\n         return;\n     }\n \n@@ -154,14 +156,14 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n         if (total_fee < minTotalFee) {\n             errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-            current_result = BumpFeeResult::INVALID_PARAMETER;\n+            current_result = Result::INVALID_PARAMETER;\n             return;\n         }\n         CAmount requiredFee = GetRequiredFee(maxNewTxSize);\n         if (total_fee < requiredFee) {\n             errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n-            current_result = BumpFeeResult::INVALID_PARAMETER;\n+            current_result = Result::INVALID_PARAMETER;\n             return;\n         }\n         new_fee = total_fee;\n@@ -185,7 +187,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n      if (new_fee > maxTxFee) {\n          errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n                                FormatMoney(new_fee), FormatMoney(maxTxFee)));\n-         current_result = BumpFeeResult::WALLET_ERROR;\n+         current_result = Result::WALLET_ERROR;\n          return;\n      }\n \n@@ -203,7 +205,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n             FormatMoney(minMempoolFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)),\n             FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return;\n     }\n \n@@ -215,7 +217,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n     CTxOut* poutput = &(mtx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n         errors.push_back(\"Change output is too small to bump the fee\");\n-        current_result = BumpFeeResult::WALLET_ERROR;\n+        current_result = Result::WALLET_ERROR;\n         return;\n     }\n \n@@ -234,7 +236,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n         }\n     }\n \n-    current_result = BumpFeeResult::OK;\n+    current_result = Result::OK;\n }\n \n bool FeeBumper::signTransaction(CWallet *wallet)\n@@ -245,13 +247,13 @@ bool FeeBumper::signTransaction(CWallet *wallet)\n bool FeeBumper::commit(CWallet *wallet)\n {\n     AssertLockHeld(wallet->cs_wallet);\n-    if (!errors.empty() || current_result != BumpFeeResult::OK) {\n+    if (!errors.empty() || current_result != Result::OK) {\n         return false;\n     }\n     auto it = txid.IsNull() ? wallet->mapWallet.end() : wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n         errors.push_back(\"Invalid or non-wallet transaction id\");\n-        current_result = BumpFeeResult::MISC_ERROR;\n+        current_result = Result::MISC_ERROR;\n         return false;\n     }\n     CWalletTx& oldWtx = it->second;\n@@ -295,3 +297,5 @@ bool FeeBumper::commit(CWallet *wallet)\n     return true;\n }\n \n+} // namespace feebumper\n+"
      },
      {
        "sha": "046bd5600182df1bfde220bd02d80f0143485e4d",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=37bdcca3c363cf08ad68e044b493e24e89f2d158",
        "patch": "@@ -13,7 +13,9 @@ class uint256;\n class CCoinControl;\n enum class FeeEstimateMode;\n \n-enum class BumpFeeResult\n+namespace feebumper {\n+\n+enum class Result\n {\n     OK,\n     INVALID_ADDRESS_OR_KEY,\n@@ -27,7 +29,7 @@ class FeeBumper\n {\n public:\n     FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinControl& coin_control, CAmount total_fee);\n-    BumpFeeResult getResult() const { return current_result; }\n+    Result getResult() const { return current_result; }\n     const std::vector<std::string>& getErrors() const { return errors; }\n     CAmount getOldFee() const { return old_fee; }\n     CAmount getNewFee() const { return new_fee; }\n@@ -53,9 +55,11 @@ class FeeBumper\n     uint256 bumped_txid;\n     CMutableTransaction mtx;\n     std::vector<std::string> errors;\n-    BumpFeeResult current_result;\n+    Result current_result;\n     CAmount old_fee;\n     CAmount new_fee;\n };\n \n+} // namespace feebumper\n+\n #endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "8738952bf1dacbf5347f7ba2d43c880b70444a19",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37bdcca3c363cf08ad68e044b493e24e89f2d158/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=37bdcca3c363cf08ad68e044b493e24e89f2d158",
        "patch": "@@ -3125,21 +3125,21 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    FeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n-    BumpFeeResult res = feeBump.getResult();\n-    if (res != BumpFeeResult::OK)\n+    feebumper::FeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n+    feebumper::Result res = feeBump.getResult();\n+    if (res != feebumper::Result::OK)\n     {\n         switch(res) {\n-            case BumpFeeResult::INVALID_ADDRESS_OR_KEY:\n+            case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, feeBump.getErrors()[0]);\n                 break;\n-            case BumpFeeResult::INVALID_REQUEST:\n+            case feebumper::Result::INVALID_REQUEST:\n                 throw JSONRPCError(RPC_INVALID_REQUEST, feeBump.getErrors()[0]);\n                 break;\n-            case BumpFeeResult::INVALID_PARAMETER:\n+            case feebumper::Result::INVALID_PARAMETER:\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, feeBump.getErrors()[0]);\n                 break;\n-            case BumpFeeResult::WALLET_ERROR:\n+            case feebumper::Result::WALLET_ERROR:\n                 throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n                 break;\n             default:"
      }
    ]
  },
  {
    "sha": "aed1d90aca81c20c6e982ad567291f3812d47c8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWQxZDkwYWNhODFjMjBjNmU5ODJhZDU2NzI5MWYzODEyZDQ3Yzhm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-15T14:34:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T22:16:46Z"
      },
      "message": "[wallet] Change feebumper from class to functions\n\nChange feebumper from a stateful class into a namespace of stateless\nfunctions.\n\nHaving the results of feebumper calls persist in an object makes process\nseparation between Qt and wallet awkward, because it means the feebumper object\neither has to be serialized back and forth between Qt and wallet processes\nbetween fee bump calls, or that the feebumper object needs to stay alive in the\nwallet process with an object reference passed back to Qt. It's simpler just to\nhave fee bumper calls return their results immediately instead of storing them\nin an object with an extended lifetime.\n\nIn addition to making feebumper stateless, also:\n\n- Move LOCK calls from Qt code to feebumper\n- Move TransactionCanBeBumped implementation from Qt code to feebumper",
      "tree": {
        "sha": "ef3b76c918d57be87fa069cb01078b65b3cb191d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef3b76c918d57be87fa069cb01078b65b3cb191d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aed1d90aca81c20c6e982ad567291f3812d47c8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aed1d90aca81c20c6e982ad567291f3812d47c8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aed1d90aca81c20c6e982ad567291f3812d47c8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aed1d90aca81c20c6e982ad567291f3812d47c8f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37bdcca3c363cf08ad68e044b493e24e89f2d158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37bdcca3c363cf08ad68e044b493e24e89f2d158",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37bdcca3c363cf08ad68e044b493e24e89f2d158"
      }
    ],
    "stats": {
      "total": 258,
      "additions": 117,
      "deletions": 141
    },
    "files": [
      {
        "sha": "c5cca0bff286019ab0116d167347c8376d9e15b0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 30,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=aed1d90aca81c20c6e982ad567291f3812d47c8f",
        "patch": "@@ -659,45 +659,39 @@ bool WalletModel::abandonTransaction(uint256 hash) const\n \n bool WalletModel::transactionCanBeBumped(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    const CWalletTx *wtx = wallet->GetWalletTx(hash);\n-    return wtx && SignalsOptInRBF(*(wtx->tx)) && !wtx->mapValue.count(\"replaced_by_txid\");\n+    return feebumper::TransactionCanBeBumped(wallet, hash);\n }\n \n bool WalletModel::bumpFee(uint256 hash)\n {\n-    std::unique_ptr<feebumper::FeeBumper> feeBump;\n-    {\n-        CCoinControl coin_control;\n-        coin_control.signalRbf = true;\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new feebumper::FeeBumper(wallet, hash, coin_control, 0));\n-    }\n-    if (feeBump->getResult() != feebumper::Result::OK)\n-    {\n+    CCoinControl coin_control;\n+    coin_control.signalRbf = true;\n+    std::vector<std::string> errors;\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    if (feebumper::CreateTransaction(wallet, hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx) != feebumper::Result::OK) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n-            (feeBump->getErrors().size() ? QString::fromStdString(feeBump->getErrors()[0]) : \"\") +\")\");\n+            (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n          return false;\n     }\n \n     // allow a user based fee verification\n     QString questionString = tr(\"Do you want to increase the fee?\");\n     questionString.append(\"<br />\");\n-    CAmount oldFee = feeBump->getOldFee();\n-    CAmount newFee = feeBump->getNewFee();\n     questionString.append(\"<table style=\\\"text-align: left;\\\">\");\n     questionString.append(\"<tr><td>\");\n     questionString.append(tr(\"Current fee:\"));\n     questionString.append(\"</td><td>\");\n-    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), oldFee));\n+    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), old_fee));\n     questionString.append(\"</td></tr><tr><td>\");\n     questionString.append(tr(\"Increase:\"));\n     questionString.append(\"</td><td>\");\n-    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), newFee - oldFee));\n+    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), new_fee - old_fee));\n     questionString.append(\"</td></tr><tr><td>\");\n     questionString.append(tr(\"New fee:\"));\n     questionString.append(\"</td><td>\");\n-    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), newFee));\n+    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), new_fee));\n     questionString.append(\"</td></tr></table>\");\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm fee bump\"), questionString);\n     confirmationDialog.exec();\n@@ -715,23 +709,15 @@ bool WalletModel::bumpFee(uint256 hash)\n     }\n \n     // sign bumped transaction\n-    bool res = false;\n-    {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        res = feeBump->signTransaction(wallet);\n-    }\n-    if (!res) {\n+    if (!feebumper::SignTransaction(wallet, mtx)) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Can't sign transaction.\"));\n         return false;\n     }\n     // commit the bumped transaction\n-    {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        res = feeBump->commit(wallet);\n-    }\n-    if(!res) {\n+    uint256 txid;\n+    if (feebumper::CommitTransaction(wallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Could not commit transaction\") + \"<br />(\" +\n-            QString::fromStdString(feeBump->getErrors()[0])+\")\");\n+            QString::fromStdString(errors[0])+\")\");\n          return false;\n     }\n     return true;"
      },
      {
        "sha": "aaddd47de8b031daaa9eb05046f390ff4982f217",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 58,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=aed1d90aca81c20c6e982ad567291f3812d47c8f",
        "patch": "@@ -43,72 +43,72 @@ static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWalle\n     return GetVirtualTransactionSize(txNew);\n }\n \n-namespace feebumper {\n-\n-bool FeeBumper::preconditionChecks(const CWallet *wallet, const CWalletTx& wtx) {\n+//! Check whether transaction has descendant in wallet or mempool, or has been\n+//! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n+{\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");\n-        current_result = Result::INVALID_PARAMETER;\n-        return false;\n+        return feebumper::Result::INVALID_PARAMETER;\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it_mp = mempool.mapTx.find(wtx.GetHash());\n         if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n             errors.push_back(\"Transaction has descendants in the mempool\");\n-            current_result = Result::INVALID_PARAMETER;\n-            return false;\n+            return feebumper::Result::INVALID_PARAMETER;\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n-        current_result = Result::WALLET_ERROR;\n-        return false;\n+        return feebumper::Result::WALLET_ERROR;\n     }\n-    return true;\n+    return feebumper::Result::OK;\n }\n \n-FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinControl& coin_control, CAmount total_fee)\n-    :\n-    txid(std::move(txid_in)),\n-    old_fee(0),\n-    new_fee(0)\n+namespace feebumper {\n+\n+bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid)\n {\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    const CWalletTx* wtx = wallet->GetWalletTx(txid);\n+    return wtx && SignalsOptInRBF(*wtx->tx) && !wtx->mapValue.count(\"replaced_by_txid\");\n+}\n+\n+Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n+                         CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+{\n+    LOCK2(cs_main, wallet->cs_wallet);\n     errors.clear();\n-    bumped_txid.SetNull();\n-    AssertLockHeld(wallet->cs_wallet);\n     auto it = wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n         errors.push_back(\"Invalid or non-wallet transaction id\");\n-        current_result = Result::INVALID_ADDRESS_OR_KEY;\n-        return;\n+        return Result::INVALID_ADDRESS_OR_KEY;\n     }\n     const CWalletTx& wtx = it->second;\n \n-    if (!preconditionChecks(wallet, wtx)) {\n-        return;\n+    Result result = PreconditionChecks(wallet, wtx, errors);\n+    if (result != Result::OK) {\n+        return result;\n     }\n \n     if (!SignalsOptInRBF(*wtx.tx)) {\n         errors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        current_result = Result::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n         errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        current_result = Result::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n         errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        current_result = Result::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     // figure out which output was change\n@@ -118,25 +118,22 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n         if (wallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n                 errors.push_back(\"Transaction has multiple change outputs\");\n-                current_result = Result::WALLET_ERROR;\n-                return;\n+                return Result::WALLET_ERROR;\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n         errors.push_back(\"Transaction does not have a change output\");\n-        current_result = Result::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n     if (maxNewTxSize < 0) {\n         errors.push_back(\"Transaction contains inputs that cannot be signed\");\n-        current_result = Result::INVALID_ADDRESS_OR_KEY;\n-        return;\n+        return Result::INVALID_ADDRESS_OR_KEY;\n     }\n \n     // calculate the old fee and fee-rate\n@@ -156,15 +153,13 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n         if (total_fee < minTotalFee) {\n             errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-            current_result = Result::INVALID_PARAMETER;\n-            return;\n+            return Result::INVALID_PARAMETER;\n         }\n         CAmount requiredFee = GetRequiredFee(maxNewTxSize);\n         if (total_fee < requiredFee) {\n             errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n-            current_result = Result::INVALID_PARAMETER;\n-            return;\n+            return Result::INVALID_PARAMETER;\n         }\n         new_fee = total_fee;\n         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n@@ -187,8 +182,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n      if (new_fee > maxTxFee) {\n          errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n                                FormatMoney(new_fee), FormatMoney(maxTxFee)));\n-         current_result = Result::WALLET_ERROR;\n-         return;\n+         return Result::WALLET_ERROR;\n      }\n \n     // check that fee rate is higher than mempool's minimum fee\n@@ -205,8 +199,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n             FormatMoney(minMempoolFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)),\n             FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-        current_result = Result::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     // Now modify the output to increase the fee.\n@@ -217,8 +210,7 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n     CTxOut* poutput = &(mtx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n         errors.push_back(\"Change output is too small to bump the fee\");\n-        current_result = Result::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)\n@@ -236,31 +228,31 @@ FeeBumper::FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinCo\n         }\n     }\n \n-    current_result = Result::OK;\n+    return Result::OK;\n }\n \n-bool FeeBumper::signTransaction(CWallet *wallet)\n-{\n-     return wallet->SignTransaction(mtx);\n+bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx) {\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    return wallet->SignTransaction(mtx);\n }\n \n-bool FeeBumper::commit(CWallet *wallet)\n+Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<std::string>& errors, uint256& bumped_txid)\n {\n-    AssertLockHeld(wallet->cs_wallet);\n-    if (!errors.empty() || current_result != Result::OK) {\n-        return false;\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    if (!errors.empty()) {\n+        return Result::MISC_ERROR;\n     }\n     auto it = txid.IsNull() ? wallet->mapWallet.end() : wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n         errors.push_back(\"Invalid or non-wallet transaction id\");\n-        current_result = Result::MISC_ERROR;\n-        return false;\n+        return Result::MISC_ERROR;\n     }\n     CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n-    if (!preconditionChecks(wallet, oldWtx)) {\n-        return false;\n+    Result result = PreconditionChecks(wallet, oldWtx, errors);\n+    if (result != Result::OK) {\n+        return result;\n     }\n \n     CWalletTx wtxBumped(wallet, MakeTransactionRef(std::move(mtx)));\n@@ -276,14 +268,14 @@ bool FeeBumper::commit(CWallet *wallet)\n     if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n-        return false;\n+        return Result::WALLET_ERROR;\n     }\n \n     bumped_txid = wtxBumped.GetHash();\n     if (state.IsInvalid()) {\n         // This can happen if the mempool rejected the transaction.  Report\n         // what happened in the \"errors\" response.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n+        errors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n     }\n \n     // mark the original tx as bumped\n@@ -294,7 +286,7 @@ bool FeeBumper::commit(CWallet *wallet)\n         // replaced does not succeed for some reason.\n         errors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n     }\n-    return true;\n+    return Result::OK;\n }\n \n } // namespace feebumper"
      },
      {
        "sha": "8eec30440cc7d5b83364ef3e39216c0483f853f6",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 27,
        "deletions": 34,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=aed1d90aca81c20c6e982ad567291f3812d47c8f",
        "patch": "@@ -25,40 +25,33 @@ enum class Result\n     MISC_ERROR,\n };\n \n-class FeeBumper\n-{\n-public:\n-    FeeBumper(const CWallet *wallet, const uint256 txid_in, const CCoinControl& coin_control, CAmount total_fee);\n-    Result getResult() const { return current_result; }\n-    const std::vector<std::string>& getErrors() const { return errors; }\n-    CAmount getOldFee() const { return old_fee; }\n-    CAmount getNewFee() const { return new_fee; }\n-    uint256 getBumpedTxId() const { return bumped_txid; }\n-\n-    /* signs the new transaction,\n-     * returns false if the tx couldn't be found or if it was\n-     * impossible to create the signature(s)\n-     */\n-    bool signTransaction(CWallet *wallet);\n-\n-    /* commits the fee bump,\n-     * returns true, in case of CWallet::CommitTransaction was successful\n-     * but, eventually sets errors if the tx could not be added to the mempool (will try later)\n-     * or if the old transaction could not be marked as replaced\n-     */\n-    bool commit(CWallet *wallet);\n-\n-private:\n-    bool preconditionChecks(const CWallet *wallet, const CWalletTx& wtx);\n-\n-    const uint256 txid;\n-    uint256 bumped_txid;\n-    CMutableTransaction mtx;\n-    std::vector<std::string> errors;\n-    Result current_result;\n-    CAmount old_fee;\n-    CAmount new_fee;\n-};\n+//! Return whether transaction can be bumped.\n+bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid);\n+\n+//! Create bumpfee transaction.\n+Result CreateTransaction(const CWallet* wallet,\n+                         const uint256& txid,\n+                         const CCoinControl& coin_control,\n+                         CAmount total_fee,\n+                         std::vector<std::string>& errors,\n+                         CAmount& old_fee,\n+                         CAmount& new_fee,\n+                         CMutableTransaction& mtx);\n+\n+//! Sign the new transaction,\n+//! @return false if the tx couldn't be found or if it was\n+//! impossible to create the signature(s)\n+bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx);\n+\n+//! Commit the bumpfee transaction.\n+//! @return success in case of CWallet::CommitTransaction was successful,\n+//! but sets errors if the tx could not be added to the mempool (will try later)\n+//! or if the old transaction could not be marked as replaced.\n+Result CommitTransaction(CWallet* wallet,\n+                         const uint256& txid,\n+                         CMutableTransaction&& mtx,\n+                         std::vector<std::string>& errors,\n+                         uint256& bumped_txid);\n \n } // namespace feebumper\n "
      },
      {
        "sha": "2d2eb4b6d3864075c0bc89bc9011c2c1da6513e1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 19,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aed1d90aca81c20c6e982ad567291f3812d47c8f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=aed1d90aca81c20c6e982ad567291f3812d47c8f",
        "patch": "@@ -3125,45 +3125,50 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    feebumper::FeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n-    feebumper::Result res = feeBump.getResult();\n-    if (res != feebumper::Result::OK)\n-    {\n+\n+    std::vector<std::string> errors;\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    feebumper::Result res = feebumper::CreateTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, feeBump.getErrors()[0]);\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0]);\n                 break;\n             case feebumper::Result::INVALID_REQUEST:\n-                throw JSONRPCError(RPC_INVALID_REQUEST, feeBump.getErrors()[0]);\n+                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0]);\n                 break;\n             case feebumper::Result::INVALID_PARAMETER:\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, feeBump.getErrors()[0]);\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0]);\n                 break;\n             case feebumper::Result::WALLET_ERROR:\n-                throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+                throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n                 break;\n             default:\n-                throw JSONRPCError(RPC_MISC_ERROR, feeBump.getErrors()[0]);\n+                throw JSONRPCError(RPC_MISC_ERROR, errors[0]);\n                 break;\n         }\n     }\n \n     // sign bumped transaction\n-    if (!feeBump.signTransaction(pwallet)) {\n+    if (!feebumper::SignTransaction(pwallet, mtx)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n     // commit the bumped transaction\n-    if(!feeBump.commit(pwallet)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+    uint256 txid;\n+    if (feebumper::CommitTransaction(pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", feeBump.getBumpedTxId().GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(feeBump.getOldFee())));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(feeBump.getNewFee())));\n-    UniValue errors(UniValue::VARR);\n-    for (const std::string& err: feeBump.getErrors())\n-        errors.push_back(err);\n-    result.push_back(Pair(\"errors\", errors));\n+    result.push_back(Pair(\"txid\", txid.GetHex()));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(old_fee)));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(new_fee)));\n+    UniValue result_errors(UniValue::VARR);\n+    for (const std::string& error : errors) {\n+        result_errors.push_back(error);\n+    }\n+    result.push_back(Pair(\"errors\", result_errors));\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "033c78671b91b12d589ebff6c5ede8d94d7500f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzNjNzg2NzFiOTFiMTJkNTg5ZWJmZjZjNWVkZThkOTRkNzUwMGY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-10T20:48:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-11T00:12:22Z"
      },
      "message": "Merge #11258: [rpc] Add initialblockdownload to getblockchaininfo\n\n11413646b [trivial] (whitespace only) fix getblockchaininfo alignment (John Newbery)\nbd9c18171 [rpc] Add initialblockdownload to getblockchaininfo (John Newbery)\n\nPull request description:\n\n  Exposing whether the node is in IBD would help for testing, and may be useful in general, particularly for developers.\n\n  First discussed in #10357 here: https://github.com/bitcoin/bitcoin/pull/10357#pullrequestreview-59963870\n\n  > ... we could simplify this (and possibly other) tests by just adding a way to know if a node is in IBD. I'd like to do that, but I'm not sure it makes sense to complicate this PR with discussion over how that information should be made available. Eg it's not clear to me that the notion of being in IBD is worth exposing to the casual user, versus a hidden rpc call or something, since the definition has changed over time, and may continue to change in the future. But I still do agree that at least for testing purposes it would be far simpler to expose the field somehow...\n\n   This PR currently implements the simplest way of doing this: adding an `initialblockdownload` field to `getblockchaininfo`. Other approaches we could take:\n\n  1. add a new debug RPC method that exposes `IBD` and potentially other information.\n  2. add a parameter to `getblockchaininfo`, eg `debug_info`, which would cause it to return debug information including IBD\n  3. add a query string to the url `?debug=true` which would cause RPCs to return additional debug information.\n\n  I quite like the idea of (3). Feedback on these and other approaches very much welcomed!\n\n  @sdaftuar @laanwj\n\nTree-SHA512: a6dedd47f8c9bd38769cc597524466250041136feb33500644b9c48d0ffe4e3eeeb2587b5bbc6420364ebdd2667df807fbb50416f9a7913bbf11a14ea86dc0d4",
      "tree": {
        "sha": "1955e6f06a668a588e3ab4cea248ed19f258ddaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1955e6f06a668a588e3ab4cea248ed19f258ddaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/033c78671b91b12d589ebff6c5ede8d94d7500f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBkBmAAoJEKY26XYx92fghNwQAIt4WhcQSf+F76wP95sL7IGv\nJpIXtOuxVkG2FGYXQH9kFIVks2dv2HVtMk59zfDZQWP1JffqoxdDT+jW5dvvpmsl\nmU/xo2h4Z7f90AfWuHvKtOs3lrWzTKu0iCOnTxV4O3NyFwgMmrPgdHjed71ghYHD\nO7P3LpogaczlmKR2BXHxtkPqo2ALO+fWUqIXeBCbfQCNlP8UnH1yqKDAFEW1kgaA\n0CTyGDZIBsUpS7DnuRlbJUqviRJEBWYJzqF12dA8MN1Dsgr4v7XYDRw6+bOae15R\nTPttoqWhLqf/sc5e0fOeHw3Kc+17GcPycCFlJAMAOClzVGua2tpz13+G1U6o+UCc\nCyL4XmV5ax2kWiNA+HQ8gVLdD2rliG5hKRXWk5BaApxhfMtzVLmD37l5ehRiH3yJ\nyEii4/rDkLU4sr9uUUAYG+jGAwtdB37ezWXgT9frbezqSxkkaNpzaovW7gTiI/cG\ndCb3i+wO+oCVqCKE9jya1fkYfMq6Jez8OD5axIDJoWhqtEttoo0UmOJHANV29pOa\nZBluWpcwZClFN7qWYogEOpMCEWNZEbaCB2LRDEa8y6iLZeDFAMMkNp70p7kGZ83Z\n8h6Y1IIYF4Hi6id4M7z3l8vGI/8A+AwHAYIqEXYDP75DxCOsqsltlhPQ3su4Fx38\nifj0/N8qht5SH6FGXNYh\n=VKQ4\n-----END PGP SIGNATURE-----",
        "payload": "tree 1955e6f06a668a588e3ab4cea248ed19f258ddaf\nparent 61fb80660f73e5aa5b69302ecc7ac33da206ba5a\nparent 11413646be2a6d0bf1c857753bfcec0af60c72b8\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1510346880 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1510359142 -0800\n\nMerge #11258: [rpc] Add initialblockdownload to getblockchaininfo\n\n11413646b [trivial] (whitespace only) fix getblockchaininfo alignment (John Newbery)\nbd9c18171 [rpc] Add initialblockdownload to getblockchaininfo (John Newbery)\n\nPull request description:\n\n  Exposing whether the node is in IBD would help for testing, and may be useful in general, particularly for developers.\n\n  First discussed in #10357 here: https://github.com/bitcoin/bitcoin/pull/10357#pullrequestreview-59963870\n\n  > ... we could simplify this (and possibly other) tests by just adding a way to know if a node is in IBD. I'd like to do that, but I'm not sure it makes sense to complicate this PR with discussion over how that information should be made available. Eg it's not clear to me that the notion of being in IBD is worth exposing to the casual user, versus a hidden rpc call or something, since the definition has changed over time, and may continue to change in the future. But I still do agree that at least for testing purposes it would be far simpler to expose the field somehow...\n\n   This PR currently implements the simplest way of doing this: adding an `initialblockdownload` field to `getblockchaininfo`. Other approaches we could take:\n\n  1. add a new debug RPC method that exposes `IBD` and potentially other information.\n  2. add a parameter to `getblockchaininfo`, eg `debug_info`, which would cause it to return debug information including IBD\n  3. add a query string to the url `?debug=true` which would cause RPCs to return additional debug information.\n\n  I quite like the idea of (3). Feedback on these and other approaches very much welcomed!\n\n  @sdaftuar @laanwj\n\nTree-SHA512: a6dedd47f8c9bd38769cc597524466250041136feb33500644b9c48d0ffe4e3eeeb2587b5bbc6420364ebdd2667df807fbb50416f9a7913bbf11a14ea86dc0d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/033c78671b91b12d589ebff6c5ede8d94d7500f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/033c78671b91b12d589ebff6c5ede8d94d7500f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/033c78671b91b12d589ebff6c5ede8d94d7500f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61fb80660f73e5aa5b69302ecc7ac33da206ba5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61fb80660f73e5aa5b69302ecc7ac33da206ba5a"
      },
      {
        "sha": "11413646be2a6d0bf1c857753bfcec0af60c72b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11413646be2a6d0bf1c857753bfcec0af60c72b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11413646be2a6d0bf1c857753bfcec0af60c72b8"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 34,
      "deletions": 30
    },
    "files": [
      {
        "sha": "8fff937d829028df93210f199ef46dc9ff232a44",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 30,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/033c78671b91b12d589ebff6c5ede8d94d7500f8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/033c78671b91b12d589ebff6c5ede8d94d7500f8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=033c78671b91b12d589ebff6c5ede8d94d7500f8",
        "patch": "@@ -1130,45 +1130,46 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"Returns an object containing various state info regarding blockchain processing.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",        (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,         (numeric) the current number of blocks processed in the server\\n\"\n-            \"  \\\"headers\\\": xxxxxx,        (numeric) the current number of headers we have validated\\n\"\n-            \"  \\\"bestblockhash\\\": \\\"...\\\", (string) the hash of the currently best block\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n-            \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n+            \"  \\\"chain\\\": \\\"xxxx\\\",              (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n+            \"  \\\"blocks\\\": xxxxxx,             (numeric) the current number of blocks processed in the server\\n\"\n+            \"  \\\"headers\\\": xxxxxx,            (numeric) the current number of headers we have validated\\n\"\n+            \"  \\\"bestblockhash\\\": \\\"...\\\",       (string) the hash of the currently best block\\n\"\n+            \"  \\\"difficulty\\\": xxxxxx,         (numeric) the current difficulty\\n\"\n+            \"  \\\"mediantime\\\": xxxxxx,         (numeric) median time for the current best block\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n-            \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n-            \"  \\\"size_on_disk\\\": xxxxxx,   (numeric) the estimated size of the block and undo files on disk\\n\"\n-            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n-            \"  \\\"automatic_pruning\\\": xx,  (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n+            \"  \\\"initialblockdownload\\\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.\\n\"\n+            \"  \\\"chainwork\\\": \\\"xxxx\\\"           (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"size_on_disk\\\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\\n\"\n+            \"  \\\"pruned\\\": xx,                 (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n+            \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n             \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n+            \"  \\\"softforks\\\": [                (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n+            \"        \\\"id\\\": \\\"xxxx\\\",           (string) name of softfork\\n\"\n+            \"        \\\"version\\\": xx,          (numeric) block version\\n\"\n+            \"        \\\"reject\\\": {             (object) progress toward rejecting pre-softfork blocks\\n\"\n+            \"           \\\"status\\\": xx,        (boolean) true if threshold reached\\n\"\n             \"        },\\n\"\n             \"     }, ...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\"\n-            \"     \\\"xxxx\\\" : {                (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,           (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {        (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,       (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,    (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,      (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,        (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"  \\\"bip9_softforks\\\": {           (object) status of BIP9 softforks in progress\\n\"\n+            \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n+            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n+            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n             \"        }\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n-            \"  \\\"warnings\\\" : \\\"...\\\",         (string) any network and blockchain warnings.\\n\"\n+            \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n@@ -1185,6 +1186,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n     obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n     obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n+    obj.push_back(Pair(\"initialblockdownload\",  IsInitialBlockDownload()));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));"
      },
      {
        "sha": "49fafbc9aa5de1aead0936a68fdf2cc4152688bb",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/033c78671b91b12d589ebff6c5ede8d94d7500f8/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/033c78671b91b12d589ebff6c5ede8d94d7500f8/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=033c78671b91b12d589ebff6c5ede8d94d7500f8",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test RPCs related to blockchainstate.\n \n Test the following RPCs:\n+    - getblockchaininfo\n     - gettxoutsetinfo\n     - getdifficulty\n     - getbestblockhash\n@@ -58,6 +59,7 @@ def _test_getblockchaininfo(self):\n             'chainwork',\n             'difficulty',\n             'headers',\n+            'initialblockdownload',\n             'mediantime',\n             'pruned',\n             'size_on_disk',"
      }
    ]
  },
  {
    "sha": "927f4ff5a2baebe8fbd8226266875618768e8f23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjdmNGZmNWEyYmFlYmU4ZmJkODIyNjI2Njg3NTYxODc2OGU4ZjIz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-02-21T04:43:29Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-11T07:51:08Z"
      },
      "message": "GUI: Receive: Remove option to reuse a previous address\n\nThis was justified by the need to \"resent\" an invoice, but now that we have the request history, that need should be gone.",
      "tree": {
        "sha": "9e20e29bab183f0deb7635a347490a662680d936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e20e29bab183f0deb7635a347490a662680d936"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/927f4ff5a2baebe8fbd8226266875618768e8f23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927f4ff5a2baebe8fbd8226266875618768e8f23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/927f4ff5a2baebe8fbd8226266875618768e8f23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927f4ff5a2baebe8fbd8226266875618768e8f23/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 4,
      "deletions": 40
    },
    "files": [
      {
        "sha": "2ca296bc2251b24d0168443f105d3f16154d9fd5",
        "filename": "src/qt/forms/receivecoinsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 20,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927f4ff5a2baebe8fbd8226266875618768e8f23/src/qt/forms/receivecoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927f4ff5a2baebe8fbd8226266875618768e8f23/src/qt/forms/receivecoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receivecoinsdialog.ui?ref=927f4ff5a2baebe8fbd8226266875618768e8f23",
        "patch": "@@ -28,23 +28,6 @@\n      <layout class=\"QVBoxLayout\" name=\"verticalLayout_3\">\n       <item>\n        <layout class=\"QGridLayout\" name=\"gridLayout\">\n-        <item row=\"7\" column=\"2\">\n-         <widget class=\"QCheckBox\" name=\"reuseAddress\">\n-          <property name=\"toolTip\">\n-           <string>Reuse one of the previously used receiving addresses. Reusing addresses has security and privacy issues. Do not use this unless re-generating a payment request made before.</string>\n-          </property>\n-          <property name=\"text\">\n-           <string>R&amp;euse an existing receiving address (not recommended)</string>\n-          </property>\n-         </widget>\n-        </item>\n-        <item row=\"7\" column=\"0\">\n-         <widget class=\"QLabel\" name=\"label_4\">\n-          <property name=\"text\">\n-           <string/>\n-          </property>\n-         </widget>\n-        </item>\n         <item row=\"6\" column=\"0\">\n          <widget class=\"QLabel\" name=\"label_3\">\n           <property name=\"toolTip\">\n@@ -127,7 +110,7 @@\n           </property>\n          </widget>\n         </item>\n-        <item row=\"8\" column=\"2\">\n+        <item row=\"7\" column=\"2\">\n          <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n           <item>\n            <widget class=\"QPushButton\" name=\"receiveButton\">\n@@ -184,7 +167,7 @@\n           </item>\n          </layout>\n         </item>\n-        <item row=\"8\" column=\"0\">\n+        <item row=\"7\" column=\"0\">\n          <widget class=\"QLabel\" name=\"label_7\">\n           <property name=\"text\">\n            <string/>\n@@ -324,7 +307,6 @@\n   <tabstop>reqLabel</tabstop>\n   <tabstop>reqAmount</tabstop>\n   <tabstop>reqMessage</tabstop>\n-  <tabstop>reuseAddress</tabstop>\n   <tabstop>receiveButton</tabstop>\n   <tabstop>clearButton</tabstop>\n   <tabstop>recentRequestsView</tabstop>"
      },
      {
        "sha": "766625b7116e075afd04853e0633a69a08e771dd",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 20,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927f4ff5a2baebe8fbd8226266875618768e8f23/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927f4ff5a2baebe8fbd8226266875618768e8f23/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=927f4ff5a2baebe8fbd8226266875618768e8f23",
        "patch": "@@ -101,7 +101,6 @@ void ReceiveCoinsDialog::clear()\n     ui->reqAmount->clear();\n     ui->reqLabel->setText(\"\");\n     ui->reqMessage->setText(\"\");\n-    ui->reuseAddress->setChecked(false);\n     updateDisplayUnit();\n }\n \n@@ -130,25 +129,8 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n \n     QString address;\n     QString label = ui->reqLabel->text();\n-    if(ui->reuseAddress->isChecked())\n-    {\n-        /* Choose existing receiving address */\n-        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n-        dlg.setModel(model->getAddressTableModel());\n-        if(dlg.exec())\n-        {\n-            address = dlg.getReturnValue();\n-            if(label.isEmpty()) /* If no label provided, use the previously used label */\n-            {\n-                label = model->getAddressTableModel()->labelForAddress(address);\n-            }\n-        } else {\n-            return;\n-        }\n-    } else {\n-        /* Generate new receiving address */\n-        address = model->getAddressTableModel()->addRow(AddressTableModel::Receive, label, \"\");\n-    }\n+    /* Generate new receiving address */\n+    address = model->getAddressTableModel()->addRow(AddressTableModel::Receive, label, \"\");\n     SendCoinsRecipient info(address, label,\n         ui->reqAmount->value(), ui->reqMessage->text());\n     ReceiveRequestDialog *dialog = new ReceiveRequestDialog(this);"
      }
    ]
  },
  {
    "sha": "6de3203cdce2d8532f39f9f9428c33b0dd53f623",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGUzMjAzY2RjZTJkODUzMmYzOWY5Zjk0MjhjMzNiMGRkNTNmNjIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-11T13:39:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-11T13:40:43Z"
      },
      "message": "doc: Add historical release notes for 0.15.1\n\nTree-SHA512: 83d1b5c392ada61c846ece98e5060ead8b79989a024d241ade20b607af3651a832f59adc73d34771b4e9ec573315cb19ea20743d7d7d88dbbec0e60b2ca81729",
      "tree": {
        "sha": "649f40a6dd791add0f9ed29f27697b1049d77cda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/649f40a6dd791add0f9ed29f27697b1049d77cda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6de3203cdce2d8532f39f9f9428c33b0dd53f623",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaBv3bAAoJEB5K7WKYbNJdC2QIAMbAUf0MRgeD3adlXJs2Umur\np73WTm3nudpfQlqqeJ48NJvwVkfZAjuvIoeCS+8Tqgv3myP0Pj5noSG4SRK8COED\nNRLR5QanZVG1DIE3HpejHl3U1ZOyEEkgf7hYwbmVgDnOGR9fAXQ3/zc/CwmZ2/Q+\nwqQ12Z4Ij8eZvi+txnbFnSpQGKhyWzUfN/ZCyZCA/hGcx3I/ZMZrz+sowutm28W0\nw6PqYuuWyiDXAEjQnn1FidWzDRT/pYcLxaR6Jz2Lh96S7VS+Dq9zd9w1NLFKqxz3\nm2gTkCik+GVPmR+OL1m+It4eG6MmQrk8n5al3GjI4lpbuMrPgiXSVrsApmmpLpE=\n=82Od\n-----END PGP SIGNATURE-----",
        "payload": "tree 649f40a6dd791add0f9ed29f27697b1049d77cda\nparent 033c78671b91b12d589ebff6c5ede8d94d7500f8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510407593 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510407643 +0100\n\ndoc: Add historical release notes for 0.15.1\n\nTree-SHA512: 83d1b5c392ada61c846ece98e5060ead8b79989a024d241ade20b607af3651a832f59adc73d34771b4e9ec573315cb19ea20743d7d7d88dbbec0e60b2ca81729\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de3203cdce2d8532f39f9f9428c33b0dd53f623",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6de3203cdce2d8532f39f9f9428c33b0dd53f623",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de3203cdce2d8532f39f9f9428c33b0dd53f623/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "033c78671b91b12d589ebff6c5ede8d94d7500f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/033c78671b91b12d589ebff6c5ede8d94d7500f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/033c78671b91b12d589ebff6c5ede8d94d7500f8"
      }
    ],
    "stats": {
      "total": 277,
      "additions": 277,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75d2e097142499137a07a65bd35c2a4b91d9cd33",
        "filename": "doc/release-notes/release-notes-0.15.1.md",
        "status": "added",
        "additions": 277,
        "deletions": 0,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de3203cdce2d8532f39f9f9428c33b0dd53f623/doc/release-notes/release-notes-0.15.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de3203cdce2d8532f39f9f9428c33b0dd53f623/doc/release-notes/release-notes-0.15.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.1.md?ref=6de3203cdce2d8532f39f9f9428c33b0dd53f623",
        "patch": "@@ -0,0 +1,277 @@\n+Bitcoin Core version *0.15.1* is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.15.1/>\n+\n+or\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n+\n+This is a new minor version release, including various bugfixes and\n+performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the \n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or higher, your chainstate database will\n+be converted to a new format, which will take anywhere from a few minutes to\n+half an hour, depending on the speed of your machine.\n+\n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15 or upgrade to version 0.15 will cause all fee\n+estimates to be discarded.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+\n+Notable changes\n+===============\n+\n+Network fork safety enhancements\n+--------------------------------\n+\n+A number of changes to the way Bitcoin Core deals with peer connections and invalid blocks\n+have been made, as a safety precaution against blockchain forks and misbehaving peers.\n+\n+- Unrequested blocks with less work than the minimum-chain-work are now no longer processed even\n+if they have more work than the tip (a potential issue during IBD where the tip may have low-work).\n+This prevents peers wasting the resources of a node. \n+\n+- Peers which provide a chain with less work than the minimum-chain-work during IBD will now be disconnected.\n+\n+- For a given outbound peer, we now check whether their best known block has at least as much work as our tip. If it\n+doesn't, and if we still haven't heard about a block with sufficient work after a 20 minute timeout, then we send\n+a single getheaders message, and wait 2 more minutes. If after two minutes their best known block has insufficient\n+work, we disconnect that peer. We protect 4 of our outbound peers from being disconnected by this logic to prevent\n+excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable\n+number of nodes not known to be on bogus chains.\n+\n+- Outbound (non-manual) peers that serve us block headers that are already known to be invalid (other than compact\n+block announcements, because BIP 152 explicitly permits nodes to relay compact blocks before fully validating them)\n+will now be disconnected.\n+\n+- If the chain tip has not been advanced for over 30 minutes, we now assume the tip may be stale and will try to connect\n+to an additional outbound peer. A periodic check ensures that if this extra peer connection is in use, we will disconnect\n+the peer that least recently announced a new block.\n+\n+- The set of all known invalid-themselves blocks (i.e. blocks which we attempted to connect but which were found to be\n+invalid) are now tracked and used to check if new headers build on an invalid chain. This ensures that everything that\n+descends from an invalid block is marked as such.\n+\n+\n+Miner block size limiting deprecated\n+------------------------------------\n+\n+Though blockmaxweight has been preferred for limiting the size of blocks returned by\n+getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n+to limit their block size directly. Using this option resulted in a few UI issues as\n+well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n+now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n+implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n+to limit their blocks by size, instead of by weight, will have to do so manually by\n+removing transactions from their block template directly.\n+\n+\n+GUI settings backed up on reset\n+-------------------------------\n+\n+The GUI settings will now be written to `guisettings.ini.bak` in the data directory before wiping them when\n+the `-resetguisettings` argument is used. This can be used to retroactively troubleshoot issues due to the\n+GUI settings.\n+\n+\n+Duplicate wallets disallowed\n+----------------------------\n+\n+Previously, it was possible to open the same wallet twice by manually copying the wallet file, causing\n+issues when both were opened simultaneously. It is no longer possible to open copies of the same wallet.\n+\n+\n+Debug `-minimumchainwork` argument added\n+----------------------------------------\n+\n+A hidden debug argument `-minimumchainwork` has been added to allow a custom minimum work value to be used\n+when validating a chain.\n+\n+\n+Low-level RPC changes\n+----------------------\n+\n+- The \"currentblocksize\" value in getmininginfo has been removed.\n+\n+- `dumpwallet` no longer allows overwriting files. This is a security measure\n+  as well as prevents dangerous user mistakes.\n+\n+- `backupwallet` will now fail when attempting to backup to source file, rather than\n+  destroying the wallet.\n+\n+- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n+  value is passed, instead of returning a list of all wallet transactions since\n+  the genesis block. The behaviour is unchanged when an empty string is provided.\n+\n+0.15.1 Change log\n+=================\n+\n+### Mining\n+- #11100 `7871a7d` Fix confusing blockmax{size,weight} options, dont default to throwing away money (TheBlueMatt)\n+\n+### RPC and other APIs\n+- #10859 `2a5d099` gettxout: Slightly improve doc and tests (jtimon)\n+- #11267 `b1a6c94` update cli for estimate\\*fee argument rename (laanwj)\n+- #11483 `20cdc2b` Fix importmulti bug when importing an already imported key (pedrobranco)\n+- #9937 `a43be5b` Prevent `dumpwallet` from overwriting files (laanwj)\n+- #11465 `405e069` Update named args documentation for importprivkey (dusty-wil)\n+- #11131 `b278a43` Write authcookie atomically (laanwj)\n+- #11565 `7d4546f` Make listsinceblock refuse unknown block hash (ryanofsky)\n+- #11593 `8195cb0` Work-around an upstream libevent bug (theuni)\n+\n+### P2P protocol and network code\n+- #11397 `27e861a` Improve and document SOCKS code (laanwj)\n+- #11252 `0fe2a9a` When clearing addrman clear mapInfo and mapAddr (instagibbs)\n+- #11527 `a2bd86a` Remove my testnet DNS seed (schildbach)\n+- #10756 `0a5477c` net processing: swap out signals for an interface class (theuni)\n+- #11531 `55b7abf` Check that new headers are not a descendant of an invalid block (more effeciently) (TheBlueMatt)\n+- #11560 `49bf090` Connect to a new outbound peer if our tip is stale (sdaftuar)\n+- #11568 `fc966bb` Disconnect outbound peers on invalid chains (sdaftuar)\n+- #11578 `ec8dedf` Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n+- #11456 `6f27965` Replace relevant services logic with a function suite (TheBlueMatt)\n+- #11490 `bf191a7` Disconnect from outbound peers with bad headers chains (sdaftuar)\n+\n+### Validation\n+- #10357 `da4908c` Allow setting nMinimumChainWork on command line (sdaftuar)\n+- #11458 `2df65ee` Don't process unrequested, low-work blocks (sdaftuar)\n+\n+### Build system\n+- #11440 `b6c0209` Fix validationinterface build on super old boost/clang (TheBlueMatt)\n+- #11530 `265bb21` Add share/rpcuser to dist. source code archive (MarcoFalke)\n+\n+### GUI\n+- #11334 `19d63e8` Remove custom fee radio group and remove nCustomFeeRadio setting (achow101)\n+- #11198 `7310f1f` Fix display of package name on 'open config file' tooltip (esotericnonsense)\n+- #11015 `6642558` Add delay before filtering transactions (lclc)\n+- #11338 `6a62c74` Backup former GUI settings on `-resetguisettings` (laanwj)\n+- #11335 `8d13b42` Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n+- #11237 `2e31b1d` Fixing division by zero in time remaining (MeshCollider)\n+- #11247 `47c02a8` Use IsMine to validate custom change address (MarcoFalke)\n+\n+### Wallet\n+- #11017 `9e8aae3` Close DB on error (kallewoof)\n+- #11225 `6b4d9f2` Update stored witness in AddToWallet (sdaftuar)\n+- #11126 `2cb720a` Acquire cs_main lock before cs_wallet during wallet initialization (ryanofsky)\n+- #11476 `9c8006d` Avoid opening copied wallet databases simultaneously (ryanofsky)\n+- #11492 `de7053f` Fix leak in CDB constructor (promag)\n+- #11376 `fd79ed6` Ensure backupwallet fails when attempting to backup to source file (tomasvdw)\n+- #11326 `d570aa4` Fix crash on shutdown with invalid wallet (MeshCollider)\n+\n+### Tests and QA\n+- #11399 `a825d4a` Fix bip68-sequence rpc test (jl2012)\n+- #11150 `847c75e` Add getmininginfo test (mess110)\n+- #11407 `806c78f` add functional test for mempoolreplacement command line arg (instagibbs)\n+- #11433 `e169349` Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n+- #11308 `2e1ac70` zapwallettxes: Wait up to 3s for mempool reload (MarcoFalke)\n+- #10798 `716066d` test bitcoin-cli (jnewbery)\n+- #11443 `019c492` Allow \"make cov\" out-of-tree; Fix rpc mapping check (MarcoFalke)\n+- #11445 `51bad91` 0.15.1 Backports (MarcoFalke)\n+- #11319 `2f0b30a` Fix error introduced into p2p-segwit.py, and prevent future similar errors (sdaftuar)\n+- #10552 `e4605d9` Tests for zmqpubrawtx and zmqpubrawblock (achow101)\n+- #11067 `eeb24a3` TestNode: Add wait_until_stopped helper method (MarcoFalke)\n+- #11068 `5398f20` Move wait_until to util (MarcoFalke)\n+- #11125 `812c870` Add bitcoin-cli -stdin and -stdinrpcpass functional tests (promag)\n+- #11077 `1d80d1e` fix timeout issues from TestNode (jnewbery)\n+- #11078 `f1ced0d` Make p2p-leaktests.py more robust (jnewbery)\n+- #11210 `f3f7891` Stop test_bitcoin-qt touching ~/.bitcoin (MeshCollider)\n+- #11234 `f0b6795` Remove redundant testutil.cpp|h files (MeshCollider)\n+- #11215 `cef0319` fixups from set_test_params() (jnewbery)\n+- #11345 `f9cf7b5` Check connectivity before sending in assumevalid.py (jnewbery)\n+- #11091 `c276c1e` Increase initial RPC timeout to 60 seconds (laanwj)\n+- #10711 `fc2aa09` Introduce TestNode (jnewbery)\n+- #11230 `d8dd8e7` Fixup dbcrash interaction with add_nodes() (jnewbery)\n+- #11241 `4424176` Improve signmessages functional test (mess110)\n+- #11116 `2c4ff35` Unit tests for script/standard and IsMine functions (jimpo)\n+- #11422 `a36f332` Verify DBWrapper iterators are taking snapshots (TheBlueMatt)\n+- #11121 `bb5e7cb` TestNode tidyups (jnewbery)\n+- #11521 `ca0f3f7` travis: move back to the minimal image (theuni)\n+- #11538 `adbc9d1` Fix race condition failures in replace-by-fee.py, sendheaders.py (sdaftuar)\n+- #11472 `4108879` Make tmpdir option an absolute path, misc cleanup (MarcoFalke)\n+- #10853 `5b728c8` Fix RPC failure testing (again) (jnewbery)\n+- #11310 `b6468d3` Test listwallets RPC (mess110)\n+\n+### Miscellaneous\n+- #11377 `75997c3` Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (TheBlueMatt)\n+- #11437 `dea3b87` [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n+- #11318 `8b61aee` Put back inadvertently removed copyright notices (gmaxwell)\n+- #11442 `cf18f42` [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2 (fanquake)\n+- #10957 `50bd3f6` Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n+- #11539 `01223a0` [verify-commits] Allow revoked keys to expire (TheBlueMatt)\n+\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Andreas Schildbach\n+- Andrew Chow\n+- Chris Moore\n+- Cory Fields\n+- Cristian Mircea Messel\n+- Daniel Edgecumbe\n+- Donal OConnor\n+- Dusty Williams\n+- fanquake\n+- Gregory Sanders\n+- Jim Posen\n+- John Newbery\n+- Johnson Lau\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Karl-Johan Alm\n+- Lucas Betschart\n+- MarcoFalke\n+- Matt Corallo\n+- Paul Berg\n+- Pedro Branco\n+- Pieter Wuille\n+- practicalswift\n+- Russell Yanofsky\n+- Samuel Dobson\n+- Suhas Daftuar\n+- Tomas van der Wansem\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWUxNGRjODFkZDMwZWUwZDM5NmFkMDhkY2E5YTY5ODBkMTZlZWUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T17:35:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T17:35:44Z"
      },
      "message": "Merge #11055: [wallet] [rpc] getreceivedbyaddress should return error if called with address not owned by the wallet\n\n5e0ba8f8c [wallet] getreceivedbyaddress should return error if address is not mine (John Newbery)\nea0cd24f7 [tests] Tidy up receivedby.py (John Newbery)\n\nPull request description:\n\n  Two commits:\n\n  - First commit tidies up the `receivedby.py` test (and speeds it up by factor of two)\n  - Second commit changes getreceivedbyaddress to return error if the address is not found in wallet, and adds test to `receivedby.py`\n\nTree-SHA512: e41342dcbd037a6b440cbe4ecd3b8ed589e18e477333f0d866f3564e948e0f5231e497d5ffb66da4e6680eb772d9f0cf839125098bb68b92d04a5ee35c6c0a81",
      "tree": {
        "sha": "a2329611f570a2ed4b1c63d73ddd781b320afc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2329611f570a2ed4b1c63d73ddd781b320afc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaBzTwAAoJENLqSFDnUoslmwMP/RUvIbiFuLjOodFhtDRpsopW\ncKXJR3PduMpPRAlp9aDCFHbliBR8gAJhVihTkV1VrbeXIS6JuaYeHFlgDertj/O2\no4FZNAcxPKSprMN4blbVUhMdc07+iOGtyrsjVnxhPQXbErXBhju1MbdhSEqK3Zj4\ncbc5nfnG4ixcoi6W1pZ7YJ/smUEVd2b5E7DxJNA/44rzt8oGu08lLIrLa1+TyY4X\n6cynMTe//9ATUoigoAF0wYBo2IEj/BJm2gDSRDxOfD/MiMBErVGF/JmB2J5VvUvR\nEqkGYGQjLmb5bAAIgzw2KCUSlNDiBq5d+wszBZM6BtHhLvv4RqGTjjk737cF7/GZ\ncteFZSCqaSyo58cYkydQS8F3Op7UIRLOdbboAox+1DGt9wx/vty7xKPjQDUJM4Q2\npcLceIXTwrzgqJt+wnFkKnZko5kSbDT316bPFg6D5vTk1waNaOzGzcIFk8D3g5jU\nQZYRfIoiQ0u6NjQBKE3sAMBoGLzO/fDIzjRpV0EgwNPUhtcBsw1n9TTxD7M9xUEj\n3TjHFfjZF2oLc68tB33jMUccH/oezBGTOL8ltD0dQkgCLjgIO1U+GkyAVRkynXq3\nqzGJMnhhUUTOEJ+ca97HvR2bx8CaC9e4KtIT2EAsbaoe1fkP2kOAZvUKHmDfKMyn\nDEnQiPCH3lnO+2ZbHo5I\n=kG6H\n-----END PGP SIGNATURE-----",
        "payload": "tree a2329611f570a2ed4b1c63d73ddd781b320afc38\nparent 6de3203cdce2d8532f39f9f9428c33b0dd53f623\nparent 5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad\nauthor MarcoFalke <falke.marco@gmail.com> 1510421732 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510421744 -0500\n\nMerge #11055: [wallet] [rpc] getreceivedbyaddress should return error if called with address not owned by the wallet\n\n5e0ba8f8c [wallet] getreceivedbyaddress should return error if address is not mine (John Newbery)\nea0cd24f7 [tests] Tidy up receivedby.py (John Newbery)\n\nPull request description:\n\n  Two commits:\n\n  - First commit tidies up the `receivedby.py` test (and speeds it up by factor of two)\n  - Second commit changes getreceivedbyaddress to return error if the address is not found in wallet, and adds test to `receivedby.py`\n\nTree-SHA512: e41342dcbd037a6b440cbe4ecd3b8ed589e18e477333f0d866f3564e948e0f5231e497d5ffb66da4e6680eb772d9f0cf839125098bb68b92d04a5ee35c6c0a81\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e14dc81dd30ee0d396ad08dca9a6980d16eee1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6de3203cdce2d8532f39f9f9428c33b0dd53f623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de3203cdce2d8532f39f9f9428c33b0dd53f623",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6de3203cdce2d8532f39f9f9428c33b0dd53f623"
      },
      {
        "sha": "5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 53,
      "deletions": 73
    },
    "files": [
      {
        "sha": "8abb4c9a25746a51e2651b2154e61a04729978a9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e14dc81dd30ee0d396ad08dca9a6980d16eee1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e14dc81dd30ee0d396ad08dca9a6980d16eee1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
        "patch": "@@ -654,7 +654,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     }\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     if (!IsMine(*pwallet, scriptPubKey)) {\n-        return ValueFromAmount(0);\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n     }\n \n     // Minimum confirmations"
      },
      {
        "sha": "97da19546fca584ad1ff76f4951528bc1e99cdd1",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 52,
        "deletions": 72,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e14dc81dd30ee0d396ad08dca9a6980d16eee1/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e14dc81dd30ee0d396ad08dca9a6980d16eee1/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
        "patch": "@@ -3,138 +3,118 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-def get_sub_array_from_array(object_array, to_match):\n-    '''\n-        Finds and returns a sub array from an array of arrays.\n-        to_match should be a unique idetifier of a sub array\n-    '''\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        return item\n-    return []\n+from test_framework.util import (assert_array_result,\n+                                 assert_equal,\n+                                 assert_raises_rpc_error,\n+                                 )\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.enable_mocktime()\n \n     def run_test(self):\n-        '''\n-        listreceivedbyaddress Test\n-        '''\n+        # Generate block to get out of IBD\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"listreceivedbyaddress Test\")\n+\n         # Send from node 0 to 1\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n-        #Check not listed in listreceivedbyaddress because has 0 confirmations\n+        # Check not listed in listreceivedbyaddress because has 0 confirmations\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n-                           {\"address\":addr},\n-                           { },\n-                           True)\n-        #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n+                            {\"address\": addr},\n+                            {},\n+                            True)\n+        # Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-        #With min confidence < 10\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+        # With min confidence < 10\n         assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-        #With min confidence > 10, should not find Tx\n-        assert_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+        # With min confidence > 10, should not find Tx\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n-        #Empty Tx\n+        # Empty Tx\n         addr = self.nodes[1].getnewaddress()\n-        assert_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+\n+        self.log.info(\"getreceivedbyaddress Test\")\n \n-        '''\n-            getreceivedbyaddress Test\n-        '''\n         # Send from node 0 to 1\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n-        #Check balance is 0 because of 0 confirmations\n+        # Check balance is 0 because of 0 confirmations\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n-        if balance != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.0\"))\n \n-        #Check balance is 0.1\n-        balance = self.nodes[1].getreceivedbyaddress(addr,0)\n-        if balance != Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        # Check balance is 0.1\n+        balance = self.nodes[1].getreceivedbyaddress(addr, 0)\n+        assert_equal(balance, Decimal(\"0.1\"))\n \n-        #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n+        # Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n-        if balance != Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.1\"))\n+\n+        # Trying to getreceivedby for an address the wallet doesn't own should return an error\n+        assert_raises_rpc_error(-4, \"Address not found in wallet\", self.nodes[0].getreceivedbyaddress, addr)\n+\n+        self.log.info(\"listreceivedbyaccount + getreceivedbyaccount Test\")\n \n-        '''\n-            listreceivedbyaccount + getreceivedbyaccount Test\n-        '''\n-        #set pre-state\n+        # set pre-state\n         addrArr = self.nodes[1].getnewaddress()\n         account = self.nodes[1].getaccount(addrArr)\n-        received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(),{\"account\":account})\n-        if len(received_by_account_json) == 0:\n-            raise AssertionError(\"No accounts found in node\")\n+        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount() if r[\"account\"] == account][0]\n         balance_by_account = self.nodes[1].getreceivedbyaccount(account)\n \n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n         # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n         assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                           {\"account\":account},\n-                           received_by_account_json)\n+                            {\"account\": account},\n+                            received_by_account_json)\n \n         # getreceivedbyaddress should return same balance because of 0 confirmations\n         balance = self.nodes[1].getreceivedbyaccount(account)\n-        if balance != balance_by_account:\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, balance_by_account)\n \n         self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n         assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                           {\"account\":account},\n-                           {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n+                            {\"account\": account},\n+                            {\"account\": received_by_account_json[\"account\"], \"amount\": (received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n \n         # getreceivedbyaddress should return updates balance\n         balance = self.nodes[1].getreceivedbyaccount(account)\n-        if balance != balance_by_account + Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, balance_by_account + Decimal(\"0.1\"))\n \n-        #Create a new account named \"mynewaccount\" that has a 0 balance\n+        # Create a new account named \"mynewaccount\" that has a 0 balance\n         self.nodes[1].getaccountaddress(\"mynewaccount\")\n-        received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(0,True),{\"account\":\"mynewaccount\"})\n-        if len(received_by_account_json) == 0:\n-            raise AssertionError(\"No accounts found in node\")\n+        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount(0, True) if r[\"account\"] == \"mynewaccount\"][0]\n \n         # Test includeempty of listreceivedbyaccount\n-        if received_by_account_json[\"amount\"] != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by listreceivedbyaccount, %0.2f\"%(received_by_account_json[\"amount\"]))\n+        assert_equal(received_by_account_json[\"amount\"], Decimal(\"0.0\"))\n \n         # Test getreceivedbyaccount for 0 amount accounts\n         balance = self.nodes[1].getreceivedbyaccount(\"mynewaccount\")\n-        if balance != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.0\"))\n \n if __name__ == '__main__':\n     ReceivedByTest().main()"
      }
    ]
  },
  {
    "sha": "fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBjN2M3Zjg2ODU0Njk2NzEzNGVlOWIyYWEzZWI4ZTgzZWY3ZTMw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T18:05:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T17:55:45Z"
      },
      "message": "doc: Add getreceivedbyaddress release notes\n\nAlso, remove release note snippets of previous versions.",
      "tree": {
        "sha": "93d72371fd30309ff36168f28817c64a305483c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93d72371fd30309ff36168f28817c64a305483c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e14dc81dd30ee0d396ad08dca9a6980d16eee1"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 1,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6e4fed0a2d8483fad9ca802ef352b95ab3cc5e62",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
        "patch": "@@ -56,18 +56,6 @@ frequently tested on them.\n Notable changes\n ===============\n \n-Miner block size limiting deprecated\n-------------------------------------\n-\n-Though blockmaxweight has been preferred for limiting the size of blocks returned by\n-getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n-to limit their block size directly. Using this option resulted in a few UI issues as\n-well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n-now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n-implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n-to limit their blocks by size, instead of by weight, will have to do so manually by\n-removing transactions from their block template directly.\n-\n HD-wallets by default\n ---------------------\n Due to a backward-incompatible change in the wallet database, wallets created\n@@ -76,18 +64,13 @@ will only create hierarchical deterministic (HD) wallets.\n \n Low-level RPC changes\n ----------------------\n-- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n-  value is passed, instead of returning a list of all wallet transactions since\n-  the genesis block.\n-- The \"currentblocksize\" value in getmininginfo has been removed.\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n   * `getblockchaininfo`\n   * `getnetworkinfo`\n   * `getwalletinfo`\n   * `getmininginfo`\n+- The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n \n-- `dumpwallet` no longer allows overwriting files. This is a security measure\n-  as well as prevents dangerous user mistakes.\n \n Credits\n ======="
      }
    ]
  },
  {
    "sha": "13e352dc53dec0127c5f94a60055d0ca829420dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2UzNTJkYzUzZGVjMDEyN2M1Zjk0YTYwMDU1ZDBjYTgyOTQyMGRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T18:29:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T18:29:52Z"
      },
      "message": "Merge #3716: GUI: Receive: Remove option to reuse a previous address\n\n927f4ff5a GUI: Receive: Remove option to reuse a previous address (Luke Dashjr)\n\nPull request description:\n\n  This was justified by the need to \"resent\" an invoice, but now that we have the request history, that need should be gone.\n\nTree-SHA512: 4ade4eb84a21bbbd8dcc3a2c9580d416e113284b5bdf350c22051c233101fe0ee31659c54a7a46e7136f9c999acb61efbbb3f97aeb2fa7b2b1e1daec02ca0837",
      "tree": {
        "sha": "e124525d659c2eefa179dbc8f3915c0496373f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e124525d659c2eefa179dbc8f3915c0496373f2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13e352dc53dec0127c5f94a60055d0ca829420dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaB0GgAAoJENLqSFDnUoslODQP/2y7Fp7iilBo89sCWAw0Z6O1\n/o4ruUU7sics5dZ/Zoe/c3DLmeuKYsu3LAR/O9xkx/qepNIH0VTf7Aal3DdSwDEA\npI6zYhBhToboVrMZOFjj2NRCVvcayuLwCNvRA7pR2MVGl0qRyz86MHjlFU4jY7rs\nVIdHKBMa2z9RDA6CRRxWTFnmsC8evCYPWWowLNPah/x87kI9wMPG4nSF0VV3dwh+\nYhn0IvqfZhU+TrtOhsgLegRMjpRXLn5MAbgBPDvgrfb39k5Yr3LVnjRUUbUUMCyn\nr4ADbkKJz96+3dVs5EFHKwwEyTNZMxyG1XT/+HS8xIK7FHzVqf4WQjKco8JJWD3r\n/lsiCuX5i9HC9H/gLDfjM9lIFluAOsIPjcMFEcvkwlgWeLPzRdOAX65gRtQXvim/\nN9rSdLS92D7b6soaeBVsU00/fHieHcxDbCCkQ5smB6E1laI7fVFuOFcZeudjmv/Z\nyRasZdRRokykUmDNDy3D6TJYnAajkiFtEYaYMIRM8+qQlp+wtYiF4eTOh6CYzl8Y\nwqmCfRw1mAkWMPCRPvcX6Feh/tQF/SHSRzuhGQuqWsFTdONzF2QU46hsYE3f1y7k\n45a7RY+y1p0Jl3Pbqfi0prmSSf1ynZk8RYteKkv3sJUclE+1ucUVYA7PPVwDFLgS\nX5a5umhOtkoeYLYzAlvT\n=r6+I\n-----END PGP SIGNATURE-----",
        "payload": "tree e124525d659c2eefa179dbc8f3915c0496373f2b\nparent 95e14dc81dd30ee0d396ad08dca9a6980d16eee1\nparent 927f4ff5a2baebe8fbd8226266875618768e8f23\nauthor MarcoFalke <falke.marco@gmail.com> 1510424986 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510424992 -0500\n\nMerge #3716: GUI: Receive: Remove option to reuse a previous address\n\n927f4ff5a GUI: Receive: Remove option to reuse a previous address (Luke Dashjr)\n\nPull request description:\n\n  This was justified by the need to \"resent\" an invoice, but now that we have the request history, that need should be gone.\n\nTree-SHA512: 4ade4eb84a21bbbd8dcc3a2c9580d416e113284b5bdf350c22051c233101fe0ee31659c54a7a46e7136f9c999acb61efbbb3f97aeb2fa7b2b1e1daec02ca0837\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e352dc53dec0127c5f94a60055d0ca829420dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13e352dc53dec0127c5f94a60055d0ca829420dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e352dc53dec0127c5f94a60055d0ca829420dc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e14dc81dd30ee0d396ad08dca9a6980d16eee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e14dc81dd30ee0d396ad08dca9a6980d16eee1"
      },
      {
        "sha": "927f4ff5a2baebe8fbd8226266875618768e8f23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927f4ff5a2baebe8fbd8226266875618768e8f23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/927f4ff5a2baebe8fbd8226266875618768e8f23"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 4,
      "deletions": 40
    },
    "files": [
      {
        "sha": "2ca296bc2251b24d0168443f105d3f16154d9fd5",
        "filename": "src/qt/forms/receivecoinsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 20,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e352dc53dec0127c5f94a60055d0ca829420dc/src/qt/forms/receivecoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e352dc53dec0127c5f94a60055d0ca829420dc/src/qt/forms/receivecoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receivecoinsdialog.ui?ref=13e352dc53dec0127c5f94a60055d0ca829420dc",
        "patch": "@@ -28,23 +28,6 @@\n      <layout class=\"QVBoxLayout\" name=\"verticalLayout_3\">\n       <item>\n        <layout class=\"QGridLayout\" name=\"gridLayout\">\n-        <item row=\"7\" column=\"2\">\n-         <widget class=\"QCheckBox\" name=\"reuseAddress\">\n-          <property name=\"toolTip\">\n-           <string>Reuse one of the previously used receiving addresses. Reusing addresses has security and privacy issues. Do not use this unless re-generating a payment request made before.</string>\n-          </property>\n-          <property name=\"text\">\n-           <string>R&amp;euse an existing receiving address (not recommended)</string>\n-          </property>\n-         </widget>\n-        </item>\n-        <item row=\"7\" column=\"0\">\n-         <widget class=\"QLabel\" name=\"label_4\">\n-          <property name=\"text\">\n-           <string/>\n-          </property>\n-         </widget>\n-        </item>\n         <item row=\"6\" column=\"0\">\n          <widget class=\"QLabel\" name=\"label_3\">\n           <property name=\"toolTip\">\n@@ -127,7 +110,7 @@\n           </property>\n          </widget>\n         </item>\n-        <item row=\"8\" column=\"2\">\n+        <item row=\"7\" column=\"2\">\n          <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n           <item>\n            <widget class=\"QPushButton\" name=\"receiveButton\">\n@@ -184,7 +167,7 @@\n           </item>\n          </layout>\n         </item>\n-        <item row=\"8\" column=\"0\">\n+        <item row=\"7\" column=\"0\">\n          <widget class=\"QLabel\" name=\"label_7\">\n           <property name=\"text\">\n            <string/>\n@@ -324,7 +307,6 @@\n   <tabstop>reqLabel</tabstop>\n   <tabstop>reqAmount</tabstop>\n   <tabstop>reqMessage</tabstop>\n-  <tabstop>reuseAddress</tabstop>\n   <tabstop>receiveButton</tabstop>\n   <tabstop>clearButton</tabstop>\n   <tabstop>recentRequestsView</tabstop>"
      },
      {
        "sha": "4e1a9b172f4d9b28d14e3f3182a05b8936477aff",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 20,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e352dc53dec0127c5f94a60055d0ca829420dc/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e352dc53dec0127c5f94a60055d0ca829420dc/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=13e352dc53dec0127c5f94a60055d0ca829420dc",
        "patch": "@@ -106,7 +106,6 @@ void ReceiveCoinsDialog::clear()\n     ui->reqAmount->clear();\n     ui->reqLabel->setText(\"\");\n     ui->reqMessage->setText(\"\");\n-    ui->reuseAddress->setChecked(false);\n     updateDisplayUnit();\n }\n \n@@ -135,25 +134,8 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n \n     QString address;\n     QString label = ui->reqLabel->text();\n-    if(ui->reuseAddress->isChecked())\n-    {\n-        /* Choose existing receiving address */\n-        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n-        dlg.setModel(model->getAddressTableModel());\n-        if(dlg.exec())\n-        {\n-            address = dlg.getReturnValue();\n-            if(label.isEmpty()) /* If no label provided, use the previously used label */\n-            {\n-                label = model->getAddressTableModel()->labelForAddress(address);\n-            }\n-        } else {\n-            return;\n-        }\n-    } else {\n-        /* Generate new receiving address */\n-        address = model->getAddressTableModel()->addRow(AddressTableModel::Receive, label, \"\");\n-    }\n+    /* Generate new receiving address */\n+    address = model->getAddressTableModel()->addRow(AddressTableModel::Receive, label, \"\");\n     SendCoinsRecipient info(address, label,\n         ui->reqAmount->value(), ui->reqMessage->text());\n     ReceiveRequestDialog *dialog = new ReceiveRequestDialog(this);"
      }
    ]
  },
  {
    "sha": "2adbddb03840ad71e843c6c4a207a13e871cd1d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWRiZGRiMDM4NDBhZDcxZTg0M2M2YzRhMjA3YTEzZTg3MWNkMWQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T23:07:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-11T23:07:28Z"
      },
      "message": "Merge #10749: Use compile-time constants instead of unnamed enumerations (remove \"enum hack\")\n\n1e65f0f33 Use compile-time constants instead of unnamed enumerations (remove \"enum hack\") (practicalswift)\n\nPull request description:\n\n  Use compile-time constants instead of unnamed enumerations (remove \"enum hack\").\n\nTree-SHA512: 1b6ebb2755398c5ebab6cce125b1dfc39cbd1504d98d55136b32703fe935c4070360ab3b2f52b1da48ba9f3b01082d204f3d87c92ccb5c8c333731f7f972e128",
      "tree": {
        "sha": "e3ef2bbc3bd775e1e7ab36c2538ab5b248288eaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3ef2bbc3bd775e1e7ab36c2538ab5b248288eaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2adbddb03840ad71e843c6c4a207a13e871cd1d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaB4KwAAoJENLqSFDnUoslyRUP/12OJ9/Okq9SOJKQZpi8j00Q\ndwYOVenO+bj+sKBbkZoygzm2i9ZBN2jWp+4/sLpcqix+TOicd35OcMr+C6eH+3ny\n96l4UjAaS5d5oygr7T4OBecEDqIUu+hzEGJcF87Cj7UO7Os+sw2b260onP0x/jwN\nxB6XoucjAfUynDaoRnWqdzj6DKbdPewzJNhGV/amKaAHaV86NjDNgPXjhi5Xubai\n1r324uUjMbbtglOX4snnvU3NS7Scjr1Rx/Q03O7kKJqXFjaVsBwhsNWzGIX/ujN9\nYYeuxy+lhESNurpL+Oh1xYRSwuM5nZ5Ii+/eVYdHoEEHhi/h+7C59GBJPXIZG1S6\nEECPcqyflb30uaP1abCuUyfcDaD/ekXDZ7R2PPgnwbxJioNNcDY+DGqxyS1RYvhB\nQ7BNYbJwPCJP8Miu7XrJ5d4U4hFpW7qbXnBg5oVBuZl++MJ/ACVeSjpcqGH7AFVO\nBDanJ7fa56a0BWJ+lAjBou8SoOE+1BUjKGdu6PMBHv+WlWpV5lsE5mDMxhiMvYPN\nqh5AvnnD5ZtQWeRI8pz7seg27amX1khjKHLWGWSXLWW5KfrN2z2pY6BSMlcBdrjG\nMHG6u2BI09qcI5neAHkjZL0ZuD00W0yyYpeRQS5BzYBBjE9T8WFpgnVQPKQLZByE\n7JGDPvhQvu74zaI6C7B9\n=0r+S\n-----END PGP SIGNATURE-----",
        "payload": "tree e3ef2bbc3bd775e1e7ab36c2538ab5b248288eaa\nparent 13e352dc53dec0127c5f94a60055d0ca829420dc\nparent 1e65f0f3396d5d7eaa8e8dd3668dfa180b541c18\nauthor MarcoFalke <falke.marco@gmail.com> 1510441643 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510441648 -0500\n\nMerge #10749: Use compile-time constants instead of unnamed enumerations (remove \"enum hack\")\n\n1e65f0f33 Use compile-time constants instead of unnamed enumerations (remove \"enum hack\") (practicalswift)\n\nPull request description:\n\n  Use compile-time constants instead of unnamed enumerations (remove \"enum hack\").\n\nTree-SHA512: 1b6ebb2755398c5ebab6cce125b1dfc39cbd1504d98d55136b32703fe935c4070360ab3b2f52b1da48ba9f3b01082d204f3d87c92ccb5c8c333731f7f972e128\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2adbddb03840ad71e843c6c4a207a13e871cd1d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2adbddb03840ad71e843c6c4a207a13e871cd1d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2adbddb03840ad71e843c6c4a207a13e871cd1d4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13e352dc53dec0127c5f94a60055d0ca829420dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e352dc53dec0127c5f94a60055d0ca829420dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13e352dc53dec0127c5f94a60055d0ca829420dc"
      },
      {
        "sha": "1e65f0f3396d5d7eaa8e8dd3668dfa180b541c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e65f0f3396d5d7eaa8e8dd3668dfa180b541c18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e65f0f3396d5d7eaa8e8dd3668dfa180b541c18"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 14,
      "deletions": 20
    },
    "files": [
      {
        "sha": "1009fe1cc88f8a091a4365b5fe481847e170a3a6",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "patch": "@@ -25,7 +25,7 @@ template<unsigned int BITS>\n class base_uint\n {\n protected:\n-    enum { WIDTH=BITS/32 };\n+    static constexpr int WIDTH = BITS / 32;\n     uint32_t pn[WIDTH];\n public:\n "
      },
      {
        "sha": "0667e0121fc66b1357a411dad52619782aea7dae",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "patch": "@@ -304,7 +304,7 @@ class CBlockIndex\n         return (int64_t)nTimeMax;\n     }\n \n-    enum { nMedianTimeSpan=11 };\n+    static constexpr int nMedianTimeSpan = 11;\n \n     int64_t GetMedianTimePast() const\n     {"
      },
      {
        "sha": "6e3bac2d0e7a68af854e68c76baaa42002b55cf0",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "patch": "@@ -24,12 +24,9 @@ static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is\n static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n \n /** Flags for nSequence and nLockTime locks */\n-enum {\n-    /* Interpret sequence numbers as relative lock-time constraints. */\n-    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n-\n-    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n-    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n-};\n+/** Interpret sequence numbers as relative lock-time constraints. */\n+static constexpr unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);\n+/** Use GetMedianTimePast() instead of nTime for end point timestamp. */\n+static constexpr unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "558616eaf88aa5c41e56d8ab958a16cb3047aaab",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "patch": "@@ -27,16 +27,13 @@\n class CMessageHeader\n {\n public:\n-    enum {\n-        MESSAGE_START_SIZE = 4,\n-        COMMAND_SIZE = 12,\n-        MESSAGE_SIZE_SIZE = 4,\n-        CHECKSUM_SIZE = 4,\n-\n-        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n-        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n-        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n-    };\n+    static constexpr size_t MESSAGE_START_SIZE = 4;\n+    static constexpr size_t COMMAND_SIZE = 12;\n+    static constexpr size_t MESSAGE_SIZE_SIZE = 4;\n+    static constexpr size_t CHECKSUM_SIZE = 4;\n+    static constexpr size_t MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE;\n+    static constexpr size_t CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE;\n+    static constexpr size_t HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE;\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n     explicit CMessageHeader(const MessageStartChars& pchMessageStartIn);"
      },
      {
        "sha": "259161ce0aacb6a7eb222751e1ed39d38e3e901a",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2adbddb03840ad71e843c6c4a207a13e871cd1d4/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "patch": "@@ -19,7 +19,7 @@ template<unsigned int BITS>\n class base_blob\n {\n protected:\n-    enum { WIDTH=BITS/8 };\n+    static constexpr int WIDTH = BITS / 8;\n     uint8_t data[WIDTH];\n public:\n     base_blob()"
      }
    ]
  },
  {
    "sha": "4a426d89002034ed1c127624cae95b4a7f540dd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTQyNmQ4OTAwMjAzNGVkMWMxMjc2MjRjYWU5NWI0YTdmNTQwZGQx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-12T16:07:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-12T16:11:47Z"
      },
      "message": "Add note about Valgrind suppressions file in developer-notes.md",
      "tree": {
        "sha": "049e310c82e9ca462c8a44c6d17a15f58e20c723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/049e310c82e9ca462c8a44c6d17a15f58e20c723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a426d89002034ed1c127624cae95b4a7f540dd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a426d89002034ed1c127624cae95b4a7f540dd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a426d89002034ed1c127624cae95b4a7f540dd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a426d89002034ed1c127624cae95b4a7f540dd1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84e2462ccf0af7e48c8ac7cbea6a37a077af0e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84e2462ccf0af7e48c8ac7cbea6a37a077af0e11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84e2462ccf0af7e48c8ac7cbea6a37a077af0e11"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "de0026a0a50750b0f5959167858d9b1c87554187",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a426d89002034ed1c127624cae95b4a7f540dd1/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a426d89002034ed1c127624cae95b4a7f540dd1/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=4a426d89002034ed1c127624cae95b4a7f540dd1",
        "patch": "@@ -165,6 +165,21 @@ can be very difficult to track down. Compiling with -DDEBUG_LOCKORDER (configure\n CXXFLAGS=\"-DDEBUG_LOCKORDER -g\") inserts run-time checks to keep track of which locks\n are held, and adds warnings to the debug.log file if inconsistencies are detected.\n \n+**Valgrind suppressions file**\n+\n+Valgrind is a programming tool for memory debugging, memory leak detection, and\n+profiling. The repo contains a Valgrind suppressions file\n+([`valgrind.supp`](https://github.com/bitcoin/bitcoin/blob/master/contrib/valgrind.supp))\n+which includes known Valgrind warnings in our dependencies that cannot be fixed\n+in-tree. Example use:\n+\n+```shell\n+$ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n+$ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n+      --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite\n+$ valgrind -v --leak-check=full src/bitcoind -printtoconsole\n+```\n+\n Locking/mutex usage notes\n -------------------------\n "
      }
    ]
  },
  {
    "sha": "7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmJmM2M2MzhmM2ZlNWQxZGFjMzc3NzlmN2RmOWMxN2IwMjgwNzky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-13T11:48:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-13T11:48:55Z"
      },
      "message": "Merge #11438: Updated Windows build doc for WSL/Xenial workaround\n\n7383d77 Updated instructions for Windows 10 Fall Creators Update. (Aaron Clauson)\ne0fc4a7 Updated Windows build doc for WSL/Xenial workarounds. (Aaron Clauson)\n\nPull request description:\n\n  An update to the Windows build document that provides workarounds for the broken 64 bit mingw32 cross compiler on WSL/Xenial.\n\n  This update is an alternative to pull request #11437. While that pull request takes a valid approach by stating building on WSL should be avoided I think it is more useful to give Windows developers a workaround option.\n\n  The instructions have been tested on:\n  - Ubuntu 14.04 and 64 bit mingw32 tool chain\n  - Ubuntu 16.04 and 64 bit mingw32 tool chain\n  - Ubuntu 17.04 and 64 bit mingw32 tool chain\n  - Windows Subsystem for Linux (Windows 10 OS Build 15063.608) and 32 bit mingw32 tool chain\n  - Windows Subsystem for Linux (Windows 10 OS Build 15063.608) and 64 bit mingw32 tool chain\n\n  Related items:\n  - Serious incompatibility problems w/ newer mingw-64 on Ubuntu #8653\n  - `-fstack-protector-all` triggers crashes in mingw-w64 5.3.1 #8732\n  - Windows build appears broken on WSL (buntu okay) #10269\n  - Compilation error for windows target #11437\n\nTree-SHA512: 7c937e37ed7120ae5dcf61aba50e5228a7ed6f729647c724b8f48e7cbbd81366c1a83a818618766a8fe0418425e05ba2eba2b14f2616621c58606585444f45fc",
      "tree": {
        "sha": "790f00f70e46b06dc7bc5f7786a793858489124c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/790f00f70e46b06dc7bc5f7786a793858489124c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaCYanAAoJEB5K7WKYbNJdj3AH/3TvmSn+nhkmlszRFqIDiWKc\nS42i9aP+MmgmVbjpEnHdTbDggCTicjUTx9e31u565G/NaGfp4SIAXCTNP3NyXC1j\nKraXoTvvgo9Q4OUDZhxV624SMefVo/qb4mNNIGHX23ov8zxEPQEhX3APG4Zfvqzm\nnPXJWrRXfPhG6mrxQqa9ni59tzXmJo2EBsiHDW6x5DyV7HNYqzjQKE7sDoODpGnI\nAxJwQKzmCSpeUw8DvC/ZnUcdg/hHh96ZbWMycg3eO4DAqYzJXe778f4coieEcivH\nUB+TcGQOKbAlCZo0xasLeqkjv97GFm+XwbGYoXHRVKrFc8Xx1nOfwuCqdc4BgJs=\n=U82o\n-----END PGP SIGNATURE-----",
        "payload": "tree 790f00f70e46b06dc7bc5f7786a793858489124c\nparent 2adbddb03840ad71e843c6c4a207a13e871cd1d4\nparent 7383d772644c965e4af8596cb425fff289af409c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510573725 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510573735 +0100\n\nMerge #11438: Updated Windows build doc for WSL/Xenial workaround\n\n7383d77 Updated instructions for Windows 10 Fall Creators Update. (Aaron Clauson)\ne0fc4a7 Updated Windows build doc for WSL/Xenial workarounds. (Aaron Clauson)\n\nPull request description:\n\n  An update to the Windows build document that provides workarounds for the broken 64 bit mingw32 cross compiler on WSL/Xenial.\n\n  This update is an alternative to pull request #11437. While that pull request takes a valid approach by stating building on WSL should be avoided I think it is more useful to give Windows developers a workaround option.\n\n  The instructions have been tested on:\n  - Ubuntu 14.04 and 64 bit mingw32 tool chain\n  - Ubuntu 16.04 and 64 bit mingw32 tool chain\n  - Ubuntu 17.04 and 64 bit mingw32 tool chain\n  - Windows Subsystem for Linux (Windows 10 OS Build 15063.608) and 32 bit mingw32 tool chain\n  - Windows Subsystem for Linux (Windows 10 OS Build 15063.608) and 64 bit mingw32 tool chain\n\n  Related items:\n  - Serious incompatibility problems w/ newer mingw-64 on Ubuntu #8653\n  - `-fstack-protector-all` triggers crashes in mingw-w64 5.3.1 #8732\n  - Windows build appears broken on WSL (buntu okay) #10269\n  - Compilation error for windows target #11437\n\nTree-SHA512: 7c937e37ed7120ae5dcf61aba50e5228a7ed6f729647c724b8f48e7cbbd81366c1a83a818618766a8fe0418425e05ba2eba2b14f2616621c58606585444f45fc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fbf3c638f3fe5d1dac37779f7df9c17b0280792/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2adbddb03840ad71e843c6c4a207a13e871cd1d4"
      },
      {
        "sha": "7383d772644c965e4af8596cb425fff289af409c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7383d772644c965e4af8596cb425fff289af409c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7383d772644c965e4af8596cb425fff289af409c"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 57,
      "deletions": 17
    },
    "files": [
      {
        "sha": "c415595e439561aaab7ca48dea059232715d2890",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 57,
        "deletions": 17,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fbf3c638f3fe5d1dac37779f7df9c17b0280792/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fbf3c638f3fe5d1dac37779f7df9c17b0280792/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
        "patch": "@@ -4,11 +4,14 @@ WINDOWS BUILD NOTES\n Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. Cross-compilation is also used to build the release binaries.\n+Windows. This is also used to build the release binaries.\n \n-Currently only building on Ubuntu Trusty 14.04 or Ubuntu Zesty 17.04 or later is supported.\n-Building on Ubuntu Xenial 16.04 is known to be broken, see extensive discussion in issue [8732](https://github.com/bitcoin/bitcoin/issues/8732).\n-While it may be possible to do so with work arounds, it's potentially dangerous and not recommended.\n+Building on Ubuntu Trusty 14.04 is recommended.\n+At the time of writing the Windows Subsystem for Linux installs Ubuntu Xenial 16.04. The default cross\n+compiler package for Ubuntu Xenial does not produce working executables for some of the bitcoin applications.\n+It is possible to build on Ubuntu Xenial by installing the cross compiler packages from\n+Ubuntu Zesty, see the steps below.\n+Building on Ubuntu Zesty 17.04 up to 17.10 has been verified to work.\n \n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n using the Windows Subsystem For Linux is the most straightforward. If you are building with\n@@ -19,7 +22,7 @@ Compiling with Windows Subsystem For Linux\n -------------------------------------------\n \n With Windows 10, Microsoft has released a new feature named the [Windows\n-Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about). This\n+Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about). This\n feature allows you to run a bash shell directly on Windows in an Ubuntu-based\n environment. Within this environment you can cross compile for Windows without\n the need for a separate Linux VM or server.\n@@ -28,6 +31,10 @@ This feature is not supported in versions of Windows prior to Windows 10 or on\n Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n Windows](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide).\n \n+For Windows 10 systems with the Fall Creators Update applied (version >= 16215.0) use the Windows Store\n+to install Ubuntu. Search for \"Linux\" in the Windows Store and install the free \"Ubuntu\" application.\n+Full instructions are available on the above link.\n+\n To get the bash shell, you must first activate the feature in Windows.\n \n 1. Turn on Developer Mode\n@@ -57,28 +64,40 @@ installing the toolchain will be different.\n \n First, install the general dependencies:\n \n-    sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl\n+    sudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git\n \n A host toolchain (`build-essential`) is necessary because some dependency\n packages (such as `protobuf`) need to build host utilities that are used in the\n build process.\n \n See also: [dependencies.md](dependencies.md).\n \n-If you're building on Ubuntu 17.04 or later, run these two commands, selecting the 'posix' variant for both,\n-to work around issues with mingw-w64. See issue [8732](https://github.com/bitcoin/bitcoin/issues/8732) for more information.\n-```\n-sudo update-alternatives --config x86_64-w64-mingw32-g++\n-sudo update-alternatives --config x86_64-w64-mingw32-gcc\n-```\n-\n ## Building for 64-bit Windows\n \n-To build executables for Windows 64-bit, install the following dependencies:\n+The first step is to install the mingw-w64 cross-compilation tool chain. Due to different Ubuntu\n+packages for each distribution and problems with the Xenial packages the steps for each are different.\n \n-    sudo apt-get install g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n+Common steps to install mingw32 cross compiler tool chain:\n \n-Then build using:\n+    sudo apt install g++-mingw-w64-x86-64\n+\n+Ubuntu Trusty 14.04:\n+\n+    No further steps required\n+\n+Ubuntu Xenial 16.04 and Windows Subsystem for Linux <sup>[1](#footnote1),[2](#footnote2)</sup>:\n+\n+    sudo apt install software-properties-common\n+    sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu zesty universe\"\n+    sudo apt update\n+    sudo apt upgrade\n+    sudo update-alternatives --config x86_64-w64-mingw32-g++ # Set the default mingw32 g++ compiler option to posix.\n+\n+Ubuntu Zesty 17.04 <sup>[2](#footnote2)</sup>:\n+\n+    sudo update-alternatives --config x86_64-w64-mingw32-g++ # Set the default mingw32 g++ compiler option to posix.\n+\n+Once the tool chain is installed the build steps are common:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n@@ -92,7 +111,11 @@ Then build using:\n \n To build executables for Windows 32-bit, install the following dependencies:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev\n+    sudo apt install g++-mingw-w64-i686 mingw-w64-i686-dev\n+\n+For Ubuntu Xenial 16.04, Ubuntu Zesty 17.04 and Windows Subsystem for Linux <sup>[2](#footnote2)</sup>:\n+\n+    sudo update-alternatives --config i686-w64-mingw32-g++  # Set the default mingw32 g++ compiler option to posix.\n \n Then build using:\n \n@@ -117,3 +140,20 @@ as they appear in the release `.zip` archive. This can be done in the following\n way. This will install to `c:\\workspace\\bitcoin`, for example:\n \n     make install DESTDIR=/mnt/c/workspace/bitcoin\n+\n+Footnotes\n+---------\n+\n+<a name=\"footnote1\">1</a>: There is currently a bug in the 64 bit mingw-w64 cross compiler packaged for WSL/Ubuntu Xenial 16.04 that\n+causes two of the bitcoin executables to crash shortly after start up. The bug is related to the\n+-fstack-protector-all g++ compiler flag which is used to mitigate buffer overflows.\n+Installing the mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n+an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubutntu should\n+something break.\n+\n+<a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit mingw-w64 packages install two different\n+compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n+efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n+required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n+It's not possible to build the bitcoin code using the win32 version of the mingw-w64 cross compilers (at least not without\n+modifying headers in the bitcoin source code)."
      }
    ]
  },
  {
    "sha": "927e5280bdba1cf9303218c6f3e34a63556e8d39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjdlNTI4MGJkYmExY2Y5MzAzMjE4YzZmM2UzNGE2MzU1NmU4ZDM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-13T13:59:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-13T14:00:45Z"
      },
      "message": "Merge #11035: [contrib] Add Valgrind suppressions file\n\n4a426d8 Add note about Valgrind suppressions file in developer-notes.md (practicalswift)\n84e2462 contrib: Add Valgrind suppressions file (practicalswift)\n\nPull request description:\n\n  Includes known Valgrind warnings in our dependencies that cannot be fixed in-tree.\n\n  Example use:\n\n  ```\n  $ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n  $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n        --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite\n  ```\n\n  Running with the suppressions file under Ubuntu 16.04:\n\n  ```\n  $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite --run_test=wallet_crypto\n  \u2026\n  ==10769== LEAK SUMMARY:\n  ==10769==    definitely lost: 0 bytes in 0 blocks\n  ==10769==    indirectly lost: 0 bytes in 0 blocks\n  ==10769==      possibly lost: 0 bytes in 0 blocks\n  ==10769==    still reachable: 0 bytes in 0 blocks\n  ==10769==         suppressed: 72,704 bytes in 1 blocks\n  ```\n\n  Running without the suppressions file under Ubuntu 16.04:\n\n  ```\n  $ valgrind --leak-check=full --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite --run_test=wallet_crypto\n  \u2026\n  ==10724== 72,704 bytes in 1 blocks are still reachable in loss record 1 of 1\n  ==10724==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)\n  ==10724==    by 0x6F74EFF: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n  ==10724==    by 0x40106B9: call_init.part.0 (dl-init.c:72)\n  ==10724==    by 0x40107CA: call_init (dl-init.c:30)\n  ==10724==    by 0x40107CA: _dl_init (dl-init.c:120)\n  ==10724==    by 0x4000C69: ??? (in /lib/x86_64-linux-gnu/ld-2.23.so)\n  ==10724==    by 0x2: ???\n  ==10724==    by 0x1FFF0006D2: ???\n  ==10724==    by 0x1FFF0006E8: ???\n  ==10724==    by 0x1FFF0006FF: ???\n  ==10724==\n  ==10724== LEAK SUMMARY:\n  ==10724==    definitely lost: 0 bytes in 0 blocks\n  ==10724==    indirectly lost: 0 bytes in 0 blocks\n  ==10724==      possibly lost: 0 bytes in 0 blocks\n  ==10724==    still reachable: 72,704 bytes in 1 blocks\n  ==10724==         suppressed: 0 bytes in 0 blocks\n  ```\n\nTree-SHA512: 9c92079fc61313ea678deb6aaa16a3a71c3154c757459793eb9ca0d90a9a74c6faebfb04c9135e1b398ca34224fb7f03bd9c488ea0e8debf6894f69f030a31d3",
      "tree": {
        "sha": "e9903607c35ebcec395403dba678d0ac3899162e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9903607c35ebcec395403dba678d0ac3899162e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/927e5280bdba1cf9303218c6f3e34a63556e8d39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaCaWNAAoJEB5K7WKYbNJdHzUH/0HPoCzqvRmYOunYBISn6E9/\nacDz45e0Zj+o8fUdZa2hRQlY1n5ON45gOOf09wkvkT2K/bQbrjqy6S7bEYtjkNmf\nlq9bOQsPmS1HZoTOS07CTLgXeZVrVjFOkep+qjBNXJW5u+rwLnEyN6WyW3JhOdkt\n0AUqaRdULgNX5cGP0M5CV7UyWglg1ZFoHpvDdU70dX7CJHrvv5Bn4fJWdwgvhud7\n1EFyPo/eUOcF3S/qoymd9QK2R/g0cDz8MnrdRcqYsaxbI/mxzjWLCtELnlNe3beD\nMi0k/9fAO/YY0U/pzF0fsuMMOdWy/Tdd15Q4Rj9WjceS/h4IMxCcXWqheMMt3M4=\n=c96V\n-----END PGP SIGNATURE-----",
        "payload": "tree e9903607c35ebcec395403dba678d0ac3899162e\nparent 7fbf3c638f3fe5d1dac37779f7df9c17b0280792\nparent 4a426d89002034ed1c127624cae95b4a7f540dd1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510581569 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510581645 +0100\n\nMerge #11035: [contrib] Add Valgrind suppressions file\n\n4a426d8 Add note about Valgrind suppressions file in developer-notes.md (practicalswift)\n84e2462 contrib: Add Valgrind suppressions file (practicalswift)\n\nPull request description:\n\n  Includes known Valgrind warnings in our dependencies that cannot be fixed in-tree.\n\n  Example use:\n\n  ```\n  $ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n  $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n        --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite\n  ```\n\n  Running with the suppressions file under Ubuntu 16.04:\n\n  ```\n  $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite --run_test=wallet_crypto\n  \u2026\n  ==10769== LEAK SUMMARY:\n  ==10769==    definitely lost: 0 bytes in 0 blocks\n  ==10769==    indirectly lost: 0 bytes in 0 blocks\n  ==10769==      possibly lost: 0 bytes in 0 blocks\n  ==10769==    still reachable: 0 bytes in 0 blocks\n  ==10769==         suppressed: 72,704 bytes in 1 blocks\n  ```\n\n  Running without the suppressions file under Ubuntu 16.04:\n\n  ```\n  $ valgrind --leak-check=full --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite --run_test=wallet_crypto\n  \u2026\n  ==10724== 72,704 bytes in 1 blocks are still reachable in loss record 1 of 1\n  ==10724==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)\n  ==10724==    by 0x6F74EFF: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n  ==10724==    by 0x40106B9: call_init.part.0 (dl-init.c:72)\n  ==10724==    by 0x40107CA: call_init (dl-init.c:30)\n  ==10724==    by 0x40107CA: _dl_init (dl-init.c:120)\n  ==10724==    by 0x4000C69: ??? (in /lib/x86_64-linux-gnu/ld-2.23.so)\n  ==10724==    by 0x2: ???\n  ==10724==    by 0x1FFF0006D2: ???\n  ==10724==    by 0x1FFF0006E8: ???\n  ==10724==    by 0x1FFF0006FF: ???\n  ==10724==\n  ==10724== LEAK SUMMARY:\n  ==10724==    definitely lost: 0 bytes in 0 blocks\n  ==10724==    indirectly lost: 0 bytes in 0 blocks\n  ==10724==      possibly lost: 0 bytes in 0 blocks\n  ==10724==    still reachable: 72,704 bytes in 1 blocks\n  ==10724==         suppressed: 0 bytes in 0 blocks\n  ```\n\nTree-SHA512: 9c92079fc61313ea678deb6aaa16a3a71c3154c757459793eb9ca0d90a9a74c6faebfb04c9135e1b398ca34224fb7f03bd9c488ea0e8debf6894f69f030a31d3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927e5280bdba1cf9303218c6f3e34a63556e8d39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/927e5280bdba1cf9303218c6f3e34a63556e8d39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927e5280bdba1cf9303218c6f3e34a63556e8d39/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fbf3c638f3fe5d1dac37779f7df9c17b0280792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fbf3c638f3fe5d1dac37779f7df9c17b0280792"
      },
      {
        "sha": "4a426d89002034ed1c127624cae95b4a7f540dd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a426d89002034ed1c127624cae95b4a7f540dd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a426d89002034ed1c127624cae95b4a7f540dd1"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 58,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f6d993fd2b4ad45ec10b9324d40edfb96afa9d8",
        "filename": "contrib/valgrind.supp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927e5280bdba1cf9303218c6f3e34a63556e8d39/contrib/valgrind.supp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927e5280bdba1cf9303218c6f3e34a63556e8d39/contrib/valgrind.supp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/valgrind.supp?ref=927e5280bdba1cf9303218c6f3e34a63556e8d39",
        "patch": "@@ -0,0 +1,43 @@\n+# Valgrind suppressions file for Bitcoin.\n+#\n+# Includes known Valgrind warnings in our dependencies that cannot be fixed\n+# in-tree.\n+#\n+# Example use:\n+# $ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n+# $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n+#       --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite\n+{\n+   Suppress libstdc++ warning - https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65434\n+   Memcheck:Leak\n+   match-leak-kinds: reachable\n+   fun:malloc\n+   obj:*/libstdc++.*\n+   fun:call_init.part.0\n+   fun:call_init\n+   fun:_dl_init\n+   obj:*/ld-*.so\n+}\n+{\n+   Suppress libdb warning - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=662917\n+   Memcheck:Cond\n+   obj:*/libdb_cxx-*.so\n+   fun:__log_put\n+   obj:*/libdb_cxx-*.so\n+   fun:__log_put_record\n+}\n+{\n+   Suppress leveldb warning (leveldb::InitModule()) - https://github.com/google/leveldb/issues/113\n+   Memcheck:Leak\n+   match-leak-kinds: reachable\n+   fun:_Znwm\n+   fun:_ZN7leveldbL10InitModuleEv\n+}\n+{\n+   Suppress leveldb warning (leveldb::Env::Default()) - https://github.com/google/leveldb/issues/113\n+   Memcheck:Leak\n+   match-leak-kinds: reachable\n+   fun:_Znwm\n+   ...\n+   fun:_ZN7leveldbL14InitDefaultEnvEv\n+}"
      },
      {
        "sha": "763ab054caea96f9cf7dc5210dbfb11b65dae68c",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927e5280bdba1cf9303218c6f3e34a63556e8d39/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927e5280bdba1cf9303218c6f3e34a63556e8d39/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=927e5280bdba1cf9303218c6f3e34a63556e8d39",
        "patch": "@@ -167,6 +167,21 @@ can be very difficult to track down. Compiling with -DDEBUG_LOCKORDER (configure\n CXXFLAGS=\"-DDEBUG_LOCKORDER -g\") inserts run-time checks to keep track of which locks\n are held, and adds warnings to the debug.log file if inconsistencies are detected.\n \n+**Valgrind suppressions file**\n+\n+Valgrind is a programming tool for memory debugging, memory leak detection, and\n+profiling. The repo contains a Valgrind suppressions file\n+([`valgrind.supp`](https://github.com/bitcoin/bitcoin/blob/master/contrib/valgrind.supp))\n+which includes known Valgrind warnings in our dependencies that cannot be fixed\n+in-tree. Example use:\n+\n+```shell\n+$ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n+$ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n+      --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite\n+$ valgrind -v --leak-check=full src/bitcoind -printtoconsole\n+```\n+\n Locking/mutex usage notes\n -------------------------\n "
      }
    ]
  },
  {
    "sha": "2f041f0e7d272459b49d784a1649d5b6cd77480e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjA0MWYwZTdkMjcyNDU5YjQ5ZDc4NGExNjQ5ZDViNmNkNzc0ODBl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-13T15:42:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-11-13T15:46:25Z"
      },
      "message": "contrib/init: Update openrc-run filename\n\nOpenRC changed their program binary names in 2014 (3 years ago), and using the old names has loud warnings now",
      "tree": {
        "sha": "e10121e13c127467e9fd23824a28c7e55554d14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e10121e13c127467e9fd23824a28c7e55554d14e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f041f0e7d272459b49d784a1649d5b6cd77480e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f041f0e7d272459b49d784a1649d5b6cd77480e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f041f0e7d272459b49d784a1649d5b6cd77480e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f041f0e7d272459b49d784a1649d5b6cd77480e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234bfbf6a5fcba37e510e9cb6c1f2a629cd0290e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234bfbf6a5fcba37e510e9cb6c1f2a629cd0290e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234bfbf6a5fcba37e510e9cb6c1f2a629cd0290e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7b330c44f4c77c4a52661a48aad46b113a2fbf4",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f041f0e7d272459b49d784a1649d5b6cd77480e/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f041f0e7d272459b49d784a1649d5b6cd77480e/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=2f041f0e7d272459b49d784a1649d5b6cd77480e",
        "patch": "@@ -1,4 +1,4 @@\n-#!/sbin/runscript\n+#!/sbin/openrc-run\n \n # backward compatibility for existing gentoo layout \n #"
      }
    ]
  },
  {
    "sha": "41aa9c4a801a01eca1fad22a7095372d23dace60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWFhOWM0YTgwMWEwMWVjYTFmYWQyMmE3MDk1MzcyZDIzZGFjZTYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T19:56:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T19:57:26Z"
      },
      "message": "Merge #11663: [trivial] doc: Add getreceivedbyaddress release notes\n\nfa0c7c7f8 doc: Add getreceivedbyaddress release notes (MarcoFalke)\n\nPull request description:\n\n  C.f. #11055\n\n  Also, remove release note snippets of previous versions.\n\nTree-SHA512: 3ec0722d2f69b24fdaddb65e3a602ffb79b986ae6910425d6c3639e250b88432885ac4cc738ec395ac80551e73dfc2cd59b2d2b6645c3986b97c4046ead27cbc",
      "tree": {
        "sha": "630be8b8515871637e2495ce0e21b1d14bee5e3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630be8b8515871637e2495ce0e21b1d14bee5e3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41aa9c4a801a01eca1fad22a7095372d23dace60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaCfkmAAoJENLqSFDnUoslqmYP/iynuqZiy+VVapBlH+zRIPWt\noYAlxqVT9TpZw6OL5yWu0Ee2Ia1kQ3Bwsa6KKDtl1rTIFR/t2YsShieU4rD7DMBt\nImZhZQyX8zvk7IfPCUXpn6bDDCTjdReyY3ScLBDCIFzOdTNdmihS9u6wUUsaF6NW\nk0CIlQ3vU+yYj+USXoFqd3CYwC/ZEdVvEIhV32/se6Z1AES/FkawM2o5T0q/e6pc\nvZDsBW3BiQyW0SYR7P69hLbGYBVtMkupXcdES/+sDOjSSg0zowsmOYrA+p9/PEXO\nGl50smliYXQwcFG2/Mq8hGPrpfVTs6ctjrVMlXEjY3UmG9z61fsrYk6EQ2K0sc+w\nGcMmTuqrVr6V8ExxB1xfWNA9+UmvFTKXDelByaMrfBwxUn6VCQ2pjoE6VkVc9766\n/ed8ZjqV5s27IbPxKNPZNlW+BrIvMoieKzi0B/b7rv7z2PwraAjsVKN6UISIrcEa\nJprF2UhxZWnRU4dClJAyDZ+aKb6ww0e7nqZSNoxR6wjKq0Z1vhMhsDDVuAKEgilD\nC7yIhhz9CiOiO4kVG32VYA4n71AzPAKCmwbtHMEI0aSkrKVf4HuGmQWyxhxAuztl\nvpSGlPjnEzG3aNXLmzzUMU33arHhpv27YCfvJf5mnzkFJjVsYNfTo9AlFw0U0YpG\n4+5zSqFgtntApdxqrpe0\n=vSMe\n-----END PGP SIGNATURE-----",
        "payload": "tree 630be8b8515871637e2495ce0e21b1d14bee5e3d\nparent 927e5280bdba1cf9303218c6f3e34a63556e8d39\nparent fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30\nauthor MarcoFalke <falke.marco@gmail.com> 1510602990 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510603046 -0500\n\nMerge #11663: [trivial] doc: Add getreceivedbyaddress release notes\n\nfa0c7c7f8 doc: Add getreceivedbyaddress release notes (MarcoFalke)\n\nPull request description:\n\n  C.f. #11055\n\n  Also, remove release note snippets of previous versions.\n\nTree-SHA512: 3ec0722d2f69b24fdaddb65e3a602ffb79b986ae6910425d6c3639e250b88432885ac4cc738ec395ac80551e73dfc2cd59b2d2b6645c3986b97c4046ead27cbc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41aa9c4a801a01eca1fad22a7095372d23dace60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41aa9c4a801a01eca1fad22a7095372d23dace60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41aa9c4a801a01eca1fad22a7095372d23dace60/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "927e5280bdba1cf9303218c6f3e34a63556e8d39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927e5280bdba1cf9303218c6f3e34a63556e8d39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/927e5280bdba1cf9303218c6f3e34a63556e8d39"
      },
      {
        "sha": "fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c7c7f868546967134ee9b2aa3eb8e83ef7e30"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 1,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6e4fed0a2d8483fad9ca802ef352b95ab3cc5e62",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41aa9c4a801a01eca1fad22a7095372d23dace60/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41aa9c4a801a01eca1fad22a7095372d23dace60/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=41aa9c4a801a01eca1fad22a7095372d23dace60",
        "patch": "@@ -56,18 +56,6 @@ frequently tested on them.\n Notable changes\n ===============\n \n-Miner block size limiting deprecated\n-------------------------------------\n-\n-Though blockmaxweight has been preferred for limiting the size of blocks returned by\n-getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n-to limit their block size directly. Using this option resulted in a few UI issues as\n-well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n-now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n-implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n-to limit their blocks by size, instead of by weight, will have to do so manually by\n-removing transactions from their block template directly.\n-\n HD-wallets by default\n ---------------------\n Due to a backward-incompatible change in the wallet database, wallets created\n@@ -76,18 +64,13 @@ will only create hierarchical deterministic (HD) wallets.\n \n Low-level RPC changes\n ----------------------\n-- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n-  value is passed, instead of returning a list of all wallet transactions since\n-  the genesis block.\n-- The \"currentblocksize\" value in getmininginfo has been removed.\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n   * `getblockchaininfo`\n   * `getnetworkinfo`\n   * `getwalletinfo`\n   * `getmininginfo`\n+- The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n \n-- `dumpwallet` no longer allows overwriting files. This is a security measure\n-  as well as prevents dangerous user mistakes.\n \n Credits\n ======="
      }
    ]
  },
  {
    "sha": "faaa7db25e94cf02818865e3d27707d6acaa1e25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFhN2RiMjVlOTRjZjAyODE4ODY1ZTNkMjc3MDdkNmFjYWExZTI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-08T21:28:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T20:27:10Z"
      },
      "message": "qa: Only allow disconnecting all NodeConns",
      "tree": {
        "sha": "9756d0680de4fc9bda2394a24ff28fc3f09e1401",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9756d0680de4fc9bda2394a24ff28fc3f09e1401"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaa7db25e94cf02818865e3d27707d6acaa1e25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa7db25e94cf02818865e3d27707d6acaa1e25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa7db25e94cf02818865e3d27707d6acaa1e25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa7db25e94cf02818865e3d27707d6acaa1e25/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7388e93d3dd91a90239aedac4ec58404f103a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7388e93d3dd91a90239aedac4ec58404f103a2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7388e93d3dd91a90239aedac4ec58404f103a2e"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "88e2ff2e1614c5cf6d84fe5244d4bc35e1b9f273",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=faaa7db25e94cf02818865e3d27707d6acaa1e25",
        "patch": "@@ -54,7 +54,7 @@ def run_test(self):\n         # p2p_conns[2] will test resetting the counters\n         p2p_conns = []\n \n-        for i in range(3):\n+        for _ in range(3):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n \n         NetworkThread().start() # Start up network handling in another thread\n@@ -139,8 +139,7 @@ def run_test(self):\n \n         self.log.info(\"Peer 2 able to download old block\")\n \n-        for i in range(3):\n-            self.nodes[0].disconnect_p2p()\n+        self.nodes[0].disconnect_p2ps()\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")"
      },
      {
        "sha": "ca0e0080a1e36ea8859a678257382a29f9fb4f00",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=faaa7db25e94cf02818865e3d27707d6acaa1e25",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         # The node should have requested the blocks at some point, so\n         # disconnect/reconnect first\n \n-        self.nodes[0].disconnect_p2p()\n+        self.nodes[0].disconnect_p2ps()\n         test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n \n         test_node.wait_for_verack()\n@@ -291,7 +291,7 @@ def run_test(self):\n         except AssertionError:\n             test_node.wait_for_disconnect()\n \n-            self.nodes[0].disconnect_p2p()\n+            self.nodes[0].disconnect_p2ps()\n             test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n \n             NetworkThread().start() # Start up network handling in another thread"
      },
      {
        "sha": "0a03095b1a86952e3dd2a794c431013a1f5eeb1b",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=faaa7db25e94cf02818865e3d27707d6acaa1e25",
        "patch": "@@ -126,8 +126,7 @@ def run_test(self):\n         assert not unsupported_service_bit5_node.connected\n         assert not unsupported_service_bit7_node.connected\n \n-        for _ in range(5):\n-            self.nodes[0].disconnect_p2p()\n+        self.nodes[0].disconnect_p2ps()\n \n         # Wait until all connections are closed\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)"
      },
      {
        "sha": "73018ee5da79431a66de918ce4c8d434e4fabaff",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa7db25e94cf02818865e3d27707d6acaa1e25/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faaa7db25e94cf02818865e3d27707d6acaa1e25",
        "patch": "@@ -182,13 +182,14 @@ def p2p(self):\n         assert self.p2ps, \"No p2p connection\"\n         return self.p2ps[0]\n \n-    def disconnect_p2p(self, index=0):\n-        \"\"\"Close the p2p connection to the node.\"\"\"\n-        # Connection could have already been closed by other end. Calling disconnect_p2p()\n-        # on an already disconnected p2p connection is not an error.\n-        if self.p2ps[index].connection is not None:\n-            self.p2ps[index].connection.disconnect_node()\n-        del self.p2ps[index]\n+    def disconnect_p2ps(self):\n+        \"\"\"Close all p2p connections to the node.\"\"\"\n+        for p in self.p2ps:\n+            # Connection could have already been closed by other end.\n+            if p.connection is not None:\n+                p.connection.disconnect_node()\n+        self.p2ps = []\n+\n \n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\""
      }
    ]
  },
  {
    "sha": "069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjkyMTVlYmUyZDljN2NjZTdjZWU3NGIxZjEzZjZlMGRhZjU1MmU5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T13:43:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-13T21:37:13Z"
      },
      "message": "Initialize recently introduced non-static class member lastCycles to zero in constructor\n\nlastCycles was introduced in 35328187463a7078b4206e394c21d5515929c7de which was merged into master yesterday.\n\nAlso initialize beginCycles to zero for consistency and completeness.",
      "tree": {
        "sha": "24b161b44008071f40281c836101c421cac677a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24b161b44008071f40281c836101c421cac677a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2adbddb03840ad71e843c6c4a207a13e871cd1d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2adbddb03840ad71e843c6c4a207a13e871cd1d4"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "071a5dc9c7ae991b7df957bfd458a94f1105d8f2",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
        "patch": "@@ -59,12 +59,17 @@ namespace benchmark {\n         uint64_t minCycles;\n         uint64_t maxCycles;\n     public:\n-        State(std::string _name, duration _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n-            minTime = duration::max();\n-            maxTime = duration::zero();\n-            minCycles = std::numeric_limits<uint64_t>::max();\n-            maxCycles = std::numeric_limits<uint64_t>::min();\n-            countMask = 1;\n+        State(std::string _name, duration _maxElapsed) :\n+            name(_name),\n+            maxElapsed(_maxElapsed),\n+            minTime(duration::max()),\n+            maxTime(duration::zero()),\n+            count(0),\n+            countMask(1),\n+            beginCycles(0),\n+            lastCycles(0),\n+            minCycles(std::numeric_limits<uint64_t>::max()),\n+            maxCycles(std::numeric_limits<uint64_t>::min()) {\n         }\n         bool KeepRunning();\n     };"
      }
    ]
  },
  {
    "sha": "5e468994fbb349e8eefc996954a31a67a34aaa15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTQ2ODk5NGZiYjM0OWU4ZWVmYzk5Njk1NGEzMWE2N2EzNGFhYTE1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T22:01:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T22:01:46Z"
      },
      "message": "Merge #11676: contrib/init: Update openrc-run filename\n\n2f041f0e7 contrib/init: Update openrc-run filename (Luke Dashjr)\n\nPull request description:\n\n  OpenRC changed their program binary names in 2014 (3 years ago), and using the old names has loud warnings now\n\nTree-SHA512: 2b81802b21c32b8df6010142f9593c0b6cc814a052f83b7f5654f6885566e8dbcaf4da772145fa2cf5d94c16c2fb488c5d4879f71021407c4d7b3a3b7e7ed21e",
      "tree": {
        "sha": "c97922be2f4c8f845dd6691dab616d2dcf948f0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c97922be2f4c8f845dd6691dab616d2dcf948f0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaChZKAAoJENLqSFDnUoslAcEP/A+tEsv3boVqqdTUzANvmGEi\nldcjatF4M/vjUWzGEgZ3AQ8nW7eRGK+kBaoEK0S9n8Js5nGsuWOLOdcB6h6m8KKQ\n5IId8NH8Vv6JRmsOz/X6mk43Qs8vPZU6Sov7LqDTHjioBJ/hlZlY+8+oSk3evk6u\nodcy38bART8D0+NkFYkzzxYgFnFkYylGLDaYy3N+08MtIZwQ0dkDrvqjDrGc/NM7\nqnd+bBpjy3KhGrcTFMJ/fVL0Y/+NrVKP1FA8F+KPyoZoOrcREX2nEMo1du4M4JrM\nsWKtBvbn0iYZ9Jcbw4OcvXXC/vps2Hw2pzpCP2JScOkhB49iyq6HO4Q9GtMvRR7R\nHVeUCe15ymjUyYiWZWmJ7PfUVGGPFbrcrj0s0Qirkxfr9xshKLS4GneVxjNAv/H0\n4HCF7Uo4zZu5eTBD5zVS4gBYKSmogWHBEdnY+8o3Hzx3yInMuUM/OmuVmonJUjaJ\nJKg6k0txQPvR5dvTh18cAxwOvYxllmENsfZ1M456p2JALeQN9qYbaCtBJQUBGNI5\nJtZUlWjQVrDBdOXfHfgaPJkdbtyaUmRfyasJpKcTFkIGaf29zgq2HY8CkGgJyZBd\nbumbZrtoRXr8JSvYmFVgWnKbzMC03L44ytw1JiK89oHg2xUH7VVzW0qXK9fqDrw8\nvO3XXHFbofNR3O6OnRAK\n=R/kQ\n-----END PGP SIGNATURE-----",
        "payload": "tree c97922be2f4c8f845dd6691dab616d2dcf948f0e\nparent 41aa9c4a801a01eca1fad22a7095372d23dace60\nparent 2f041f0e7d272459b49d784a1649d5b6cd77480e\nauthor MarcoFalke <falke.marco@gmail.com> 1510610504 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510610506 -0500\n\nMerge #11676: contrib/init: Update openrc-run filename\n\n2f041f0e7 contrib/init: Update openrc-run filename (Luke Dashjr)\n\nPull request description:\n\n  OpenRC changed their program binary names in 2014 (3 years ago), and using the old names has loud warnings now\n\nTree-SHA512: 2b81802b21c32b8df6010142f9593c0b6cc814a052f83b7f5654f6885566e8dbcaf4da772145fa2cf5d94c16c2fb488c5d4879f71021407c4d7b3a3b7e7ed21e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e468994fbb349e8eefc996954a31a67a34aaa15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41aa9c4a801a01eca1fad22a7095372d23dace60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41aa9c4a801a01eca1fad22a7095372d23dace60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41aa9c4a801a01eca1fad22a7095372d23dace60"
      },
      {
        "sha": "2f041f0e7d272459b49d784a1649d5b6cd77480e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f041f0e7d272459b49d784a1649d5b6cd77480e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f041f0e7d272459b49d784a1649d5b6cd77480e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "86222295dbe052a5c6455e80dcf830161dccc05f",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e468994fbb349e8eefc996954a31a67a34aaa15/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e468994fbb349e8eefc996954a31a67a34aaa15/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=5e468994fbb349e8eefc996954a31a67a34aaa15",
        "patch": "@@ -1,4 +1,4 @@\n-#!/sbin/runscript\n+#!/sbin/openrc-run\n \n # backward compatibility for existing gentoo layout \n #"
      }
    ]
  },
  {
    "sha": "fafdad0d461330aee7a17db57a9d8f25906203cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZkYWQwZDQ2MTMzMGFlZTdhMTdkYjU3YTlkOGYyNTkwNjIwM2Nj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T22:28:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T22:43:39Z"
      },
      "message": "qa: Remove unused NodeConn members",
      "tree": {
        "sha": "d55171e131d45c0740c22e3f864aba0c26051bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d55171e131d45c0740c22e3f864aba0c26051bd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafdad0d461330aee7a17db57a9d8f25906203cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafdad0d461330aee7a17db57a9d8f25906203cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafdad0d461330aee7a17db57a9d8f25906203cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafdad0d461330aee7a17db57a9d8f25906203cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e468994fbb349e8eefc996954a31a67a34aaa15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e468994fbb349e8eefc996954a31a67a34aaa15"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b940bc40966a8a54011db4204a08992b612ebb62",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -32,9 +32,10 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def __init__(self):\n+    def __init__(self, rpc):\n         super().__init__()\n         self.getdataset = set()\n+        self.rpc = rpc\n \n     def on_getdata(self, conn, message):\n         for inv in message.inv:\n@@ -73,7 +74,7 @@ def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n             tx_message = msg_witness_tx(tx)\n         self.send_message(tx_message)\n         self.sync_with_ping()\n-        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+        assert_equal(tx.hash in self.rpc.getrawmempool(), accepted)\n         if (reason != None and not accepted):\n             # Check the rejection reason as well.\n             with mininode_lock:\n@@ -86,7 +87,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n         else:\n             self.send_message(msg_block(block))\n         self.sync_with_ping()\n-        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+        assert_equal(self.rpc.getbestblockhash() == block.hash, accepted)\n \n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n class UTXO():\n@@ -1869,11 +1870,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestNode(self.nodes[1].rpc), services=NODE_NETWORK|NODE_WITNESS)\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "723826bae4c7008d24fb7e9d459983f0b42e1dff",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -177,7 +177,7 @@ def add_all_connections(self, nodes):\n             # Create a p2p connection to each node\n             test_node = TestNode(self.block_store, self.tx_store)\n             self.test_nodes.append(test_node)\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), test_node))\n             # Make sure the TestNode (callback class) has a reference to its\n             # associated NodeConn\n             test_node.add_connection(self.connections[-1])"
      },
      {
        "sha": "24ee09b81c272cee2fc608e01da7da42a5332a9e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -1420,7 +1420,6 @@ def on_ping(self, conn, message):\n         conn.send_message(msg_pong(message.nonce))\n \n     def on_verack(self, conn, message):\n-        conn.ver_recv = conn.ver_send\n         self.verack_received = True\n \n     def on_version(self, conn, message):\n@@ -1516,16 +1515,14 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n+    def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n         self.sendbuf = b\"\"\n         self.recvbuf = b\"\"\n-        self.ver_send = 209\n-        self.ver_recv = 209\n         self.last_sent = 0\n         self.state = \"connecting\"\n         self.network = net\n@@ -1549,7 +1546,6 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n             self.connect((dstaddr, dstport))\n         except:\n             self.handle_close()\n-        self.rpc = rpc\n \n     def handle_connect(self):\n         if self.state != \"connected\":"
      },
      {
        "sha": "9c6ea9a83bbab1e4a73aa2c54afedf3d8a1178dc",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -168,7 +168,7 @@ def add_p2p_connection(self, p2p_conn, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n         self.p2ps.append(p2p_conn)\n-        kwargs.update({'rpc': self.rpc, 'callback': p2p_conn})\n+        kwargs.update({'callback': p2p_conn})\n         p2p_conn.add_connection(NodeConn(**kwargs))\n \n         return p2p_conn"
      }
    ]
  },
  {
    "sha": "73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2E3ZTZkMTg2YWM3ZTNlNTQ5OTRmNzU2YjJkNjNhMDA3NmY3M2I3",
    "commit": {
      "author": {
        "name": "Thoragh",
        "email": "larssonvictor93@gmail.com",
        "date": "2017-11-14T02:04:25Z"
      },
      "committer": {
        "name": "Thoragh",
        "email": "larssonvictor93@gmail.com",
        "date": "2017-11-14T02:18:31Z"
      },
      "message": "Update WSL installation for Fall Creators update",
      "tree": {
        "sha": "c5e96a6bc4d70036ef0ad241dc40fc3151ae5634",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e96a6bc4d70036ef0ad241dc40fc3151ae5634"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73a7e6d186ac7e3e54994f756b2d63a0076f73b7/comments",
    "author": {
      "login": "Thoragh",
      "id": 12678227,
      "node_id": "MDQ6VXNlcjEyNjc4MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/12678227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Thoragh",
      "html_url": "https://github.com/Thoragh",
      "followers_url": "https://api.github.com/users/Thoragh/followers",
      "following_url": "https://api.github.com/users/Thoragh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Thoragh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Thoragh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Thoragh/subscriptions",
      "organizations_url": "https://api.github.com/users/Thoragh/orgs",
      "repos_url": "https://api.github.com/users/Thoragh/repos",
      "events_url": "https://api.github.com/users/Thoragh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Thoragh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Thoragh",
      "id": 12678227,
      "node_id": "MDQ6VXNlcjEyNjc4MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/12678227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Thoragh",
      "html_url": "https://github.com/Thoragh",
      "followers_url": "https://api.github.com/users/Thoragh/followers",
      "following_url": "https://api.github.com/users/Thoragh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Thoragh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Thoragh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Thoragh/subscriptions",
      "organizations_url": "https://api.github.com/users/Thoragh/orgs",
      "repos_url": "https://api.github.com/users/Thoragh/repos",
      "events_url": "https://api.github.com/users/Thoragh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Thoragh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e468994fbb349e8eefc996954a31a67a34aaa15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e468994fbb349e8eefc996954a31a67a34aaa15"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 8,
      "deletions": 13
    },
    "files": [
      {
        "sha": "608087e0d1c9407eecbe246add9491338c387689",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73a7e6d186ac7e3e54994f756b2d63a0076f73b7/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73a7e6d186ac7e3e54994f756b2d63a0076f73b7/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
        "patch": "@@ -31,24 +31,19 @@ This feature is not supported in versions of Windows prior to Windows 10 or on\n Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n Windows](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide).\n \n-For Windows 10 systems with the Fall Creators Update applied (version >= 16215.0) use the Windows Store\n-to install Ubuntu. Search for \"Linux\" in the Windows Store and install the free \"Ubuntu\" application.\n-Full instructions are available on the above link.\n+Full instructions to install WSL are available on the above link.\n+To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n-To get the bash shell, you must first activate the feature in Windows.\n-\n-1. Turn on Developer Mode\n-  * Open Settings -> Update and Security -> For developers\n-  * Select the Developer Mode radio button\n-  * Restart if necessary\n-2. Enable the Windows Subsystem for Linux feature\n+1. Enable the Windows Subsystem for Linux feature\n   * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n-  * Select Windows Subsystem for Linux (beta)\n+  * Select Windows Subsystem for Linux\n   * Click OK\n   * Restart if necessary\n+2. Install Ubuntu\n+  * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n+  * Click Install\n 3. Complete Installation\n-  * Open a cmd prompt and type \"bash\"\n-  * Accept the license\n+  * Open a cmd prompt and type \"Ubuntu\"\n   * Create a new UNIX user account (this is a separate account from your Windows account)\n \n After the bash shell is active, you can follow the instructions below, starting"
      }
    ]
  },
  {
    "sha": "cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmI1NGU3N2ExMjBhNjlmYzZmYWFlY2JkYzRjZjkzOTE1YWZiODlj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-14T07:49:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-14T07:49:41Z"
      },
      "message": "Merge #11533: Docs: Update WSL installation notes for Fall Creators update\n\n73a7e6d Update WSL installation for Fall Creators update (Thoragh)\n\nPull request description:\n\n  Fall Creators update (RS3) was released 17 October and it has made some changes to the installation of WSL (no longer requires Developer Mode, out of beta and Ubuntu has to be installed from the Store).\n\nTree-SHA512: 65073dc787e249959ae6374bfb448fceb17fb2b85ddaaf198e37f7af5ecd905a896294a0acb0a16fe13a78e3fc4c0a3f8ae2637c01912d50ba8f8ece7e897208",
      "tree": {
        "sha": "c5e96a6bc4d70036ef0ad241dc40fc3151ae5634",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e96a6bc4d70036ef0ad241dc40fc3151ae5634"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaCqAVAAoJEB5K7WKYbNJdZJkH/RNlF1oTJ7UQZoVrnco5/KhM\nDehmdBiAfMswYogXujzZC6nGvxcQ8EEzGORut7JTnUFjHjuo5J1/NVhssZ4LoNoX\nw3dIrPBvovt3f0++4FADx7BrRyPzksdUZehO+iODlvR9EBmpABm3sAk9atFqz9Fd\ntcXrqA334caKvn1wWu8wTPVHhFQ0zkpnNRaabxbI0dKhJLP4VllLmbFfHFrjtCj+\nyib61OpBCiM7WyiLqM0Bxq0g9FDAhjLUn+hek9jxdA+94Q6y6n4dGPHh23Giw5ZR\ns5VuaNPjEdrw2bjBtDtzQukrXldxtLB+vhLJGZdqlkb2NVzVK7qBym4XBI8j9bM=\n=3RvL\n-----END PGP SIGNATURE-----",
        "payload": "tree c5e96a6bc4d70036ef0ad241dc40fc3151ae5634\nparent 5e468994fbb349e8eefc996954a31a67a34aaa15\nparent 73a7e6d186ac7e3e54994f756b2d63a0076f73b7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510645765 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510645781 +0100\n\nMerge #11533: Docs: Update WSL installation notes for Fall Creators update\n\n73a7e6d Update WSL installation for Fall Creators update (Thoragh)\n\nPull request description:\n\n  Fall Creators update (RS3) was released 17 October and it has made some changes to the installation of WSL (no longer requires Developer Mode, out of beta and Ubuntu has to be installed from the Store).\n\nTree-SHA512: 65073dc787e249959ae6374bfb448fceb17fb2b85ddaaf198e37f7af5ecd905a896294a0acb0a16fe13a78e3fc4c0a3f8ae2637c01912d50ba8f8ece7e897208\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb54e77a120a69fc6faaecbdc4cf93915afb89c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e468994fbb349e8eefc996954a31a67a34aaa15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e468994fbb349e8eefc996954a31a67a34aaa15"
      },
      {
        "sha": "73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73a7e6d186ac7e3e54994f756b2d63a0076f73b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73a7e6d186ac7e3e54994f756b2d63a0076f73b7"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 8,
      "deletions": 13
    },
    "files": [
      {
        "sha": "608087e0d1c9407eecbe246add9491338c387689",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbb54e77a120a69fc6faaecbdc4cf93915afb89c/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbb54e77a120a69fc6faaecbdc4cf93915afb89c/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
        "patch": "@@ -31,24 +31,19 @@ This feature is not supported in versions of Windows prior to Windows 10 or on\n Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n Windows](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide).\n \n-For Windows 10 systems with the Fall Creators Update applied (version >= 16215.0) use the Windows Store\n-to install Ubuntu. Search for \"Linux\" in the Windows Store and install the free \"Ubuntu\" application.\n-Full instructions are available on the above link.\n+Full instructions to install WSL are available on the above link.\n+To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n-To get the bash shell, you must first activate the feature in Windows.\n-\n-1. Turn on Developer Mode\n-  * Open Settings -> Update and Security -> For developers\n-  * Select the Developer Mode radio button\n-  * Restart if necessary\n-2. Enable the Windows Subsystem for Linux feature\n+1. Enable the Windows Subsystem for Linux feature\n   * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n-  * Select Windows Subsystem for Linux (beta)\n+  * Select Windows Subsystem for Linux\n   * Click OK\n   * Restart if necessary\n+2. Install Ubuntu\n+  * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n+  * Click Install\n 3. Complete Installation\n-  * Open a cmd prompt and type \"bash\"\n-  * Accept the license\n+  * Open a cmd prompt and type \"Ubuntu\"\n   * Create a new UNIX user account (this is a separate account from your Windows account)\n \n After the bash shell is active, you can follow the instructions below, starting"
      }
    ]
  },
  {
    "sha": "7adeea3b0fc26025c06590125a48ce2651c66373",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWRlZWEzYjBmYzI2MDI1YzA2NTkwMTI1YTQ4Y2UyNjUxYzY2Mzcz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-14T07:56:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-14T07:56:37Z"
      },
      "message": "Merge #11641: qa: Only allow disconnecting all NodeConns\n\nfaaa7db qa: Only allow disconnecting all NodeConns (MarcoFalke)\n\nPull request description:\n\n  Disconnecting the connection with `index=0` makes no sense when there are more than one connections, as the list \"rotates around\" and populates index 0 after `del`.\n\n  Just disconnect all NodeConns in any case.\n\nTree-SHA512: e5cf540823fccb31634b5a11501f54222be89862e80ccafc28bc06726480f8d2153b8c1b6f859fa6a6d087876251d48a6c6035bccdaaf16831e300bc17ff613d",
      "tree": {
        "sha": "e05cb13e84c54ec6ab71d2ffb754feeb2e5c585a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e05cb13e84c54ec6ab71d2ffb754feeb2e5c585a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7adeea3b0fc26025c06590125a48ce2651c66373",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaCqG1AAoJEB5K7WKYbNJdcREIAJS3CUnmP1hKRyT0jCG0HAY3\nFmZDjcQWjXGbIN5AosjEtZKK+k/9W665kNlRVdjES+LAvc9C51Fo6Ml+7XaDMa06\n/nNmCvyHOsdG33/i5tTCvZ/HybxijGFJQJpuslVyHczG8KZlfKdMa5EUpqF20gca\nU/avooJCJYJNCEdB0xNRqk+/APNfFZdVkUm4Qxeo+UMfDIOSfCvZM/jXGo0v1tTJ\n2RHybiE5U6iJZ8W4bGqD8qUUtvgLQQ+whDS/fGrl6eqiUX83/JENEQK/Tu03yXXx\nqsH1bHIgIqH/uwj58FiyttyjQ0Pvh3bjCOBtA+XWerPmGUjctx7ETz34p3OjmRg=\n=sX2j\n-----END PGP SIGNATURE-----",
        "payload": "tree e05cb13e84c54ec6ab71d2ffb754feeb2e5c585a\nparent cbb54e77a120a69fc6faaecbdc4cf93915afb89c\nparent faaa7db25e94cf02818865e3d27707d6acaa1e25\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510646164 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510646197 +0100\n\nMerge #11641: qa: Only allow disconnecting all NodeConns\n\nfaaa7db qa: Only allow disconnecting all NodeConns (MarcoFalke)\n\nPull request description:\n\n  Disconnecting the connection with `index=0` makes no sense when there are more than one connections, as the list \"rotates around\" and populates index 0 after `del`.\n\n  Just disconnect all NodeConns in any case.\n\nTree-SHA512: e5cf540823fccb31634b5a11501f54222be89862e80ccafc28bc06726480f8d2153b8c1b6f859fa6a6d087876251d48a6c6035bccdaaf16831e300bc17ff613d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adeea3b0fc26025c06590125a48ce2651c66373",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7adeea3b0fc26025c06590125a48ce2651c66373",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adeea3b0fc26025c06590125a48ce2651c66373/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb54e77a120a69fc6faaecbdc4cf93915afb89c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb54e77a120a69fc6faaecbdc4cf93915afb89c"
      },
      {
        "sha": "faaa7db25e94cf02818865e3d27707d6acaa1e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa7db25e94cf02818865e3d27707d6acaa1e25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa7db25e94cf02818865e3d27707d6acaa1e25"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "88e2ff2e1614c5cf6d84fe5244d4bc35e1b9f273",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=7adeea3b0fc26025c06590125a48ce2651c66373",
        "patch": "@@ -54,7 +54,7 @@ def run_test(self):\n         # p2p_conns[2] will test resetting the counters\n         p2p_conns = []\n \n-        for i in range(3):\n+        for _ in range(3):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n \n         NetworkThread().start() # Start up network handling in another thread\n@@ -139,8 +139,7 @@ def run_test(self):\n \n         self.log.info(\"Peer 2 able to download old block\")\n \n-        for i in range(3):\n-            self.nodes[0].disconnect_p2p()\n+        self.nodes[0].disconnect_p2ps()\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")"
      },
      {
        "sha": "ca0e0080a1e36ea8859a678257382a29f9fb4f00",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=7adeea3b0fc26025c06590125a48ce2651c66373",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         # The node should have requested the blocks at some point, so\n         # disconnect/reconnect first\n \n-        self.nodes[0].disconnect_p2p()\n+        self.nodes[0].disconnect_p2ps()\n         test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n \n         test_node.wait_for_verack()\n@@ -291,7 +291,7 @@ def run_test(self):\n         except AssertionError:\n             test_node.wait_for_disconnect()\n \n-            self.nodes[0].disconnect_p2p()\n+            self.nodes[0].disconnect_p2ps()\n             test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n \n             NetworkThread().start() # Start up network handling in another thread"
      },
      {
        "sha": "719a03914d08625079bdb7e6cce8bd67280b2e51",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=7adeea3b0fc26025c06590125a48ce2651c66373",
        "patch": "@@ -125,8 +125,7 @@ def run_test(self):\n         assert not unsupported_service_bit5_node.connected\n         assert not unsupported_service_bit7_node.connected\n \n-        for _ in range(5):\n-            self.nodes[0].disconnect_p2p()\n+        self.nodes[0].disconnect_p2ps()\n \n         # Wait until all connections are closed\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)"
      },
      {
        "sha": "73018ee5da79431a66de918ce4c8d434e4fabaff",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7adeea3b0fc26025c06590125a48ce2651c66373/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=7adeea3b0fc26025c06590125a48ce2651c66373",
        "patch": "@@ -182,13 +182,14 @@ def p2p(self):\n         assert self.p2ps, \"No p2p connection\"\n         return self.p2ps[0]\n \n-    def disconnect_p2p(self, index=0):\n-        \"\"\"Close the p2p connection to the node.\"\"\"\n-        # Connection could have already been closed by other end. Calling disconnect_p2p()\n-        # on an already disconnected p2p connection is not an error.\n-        if self.p2ps[index].connection is not None:\n-            self.p2ps[index].connection.disconnect_node()\n-        del self.p2ps[index]\n+    def disconnect_p2ps(self):\n+        \"\"\"Close all p2p connections to the node.\"\"\"\n+        for p in self.p2ps:\n+            # Connection could have already been closed by other end.\n+            if p.connection is not None:\n+                p.connection.disconnect_node()\n+        self.p2ps = []\n+\n \n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\""
      }
    ]
  },
  {
    "sha": "d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGFjODkzMjY4M2Q5ZGNhMmE3OWEzM2FlMTEwNzE3Y2NiZDg1ZmEz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T09:23:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T09:23:41Z"
      },
      "message": "trivial: Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\"",
      "tree": {
        "sha": "86b690ed4eff8a51c80a65ac293ef58132fab3b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86b690ed4eff8a51c80a65ac293ef58132fab3b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ac8932683d9dca2a79a33ae110717ccbd85fa3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7adeea3b0fc26025c06590125a48ce2651c66373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adeea3b0fc26025c06590125a48ce2651c66373",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7adeea3b0fc26025c06590125a48ce2651c66373"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9e3e38d188bed0dad2b964775fbc54b6e7960b76",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8ac8932683d9dca2a79a33ae110717ccbd85fa3/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8ac8932683d9dca2a79a33ae110717ccbd85fa3/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
        "patch": "@@ -143,7 +143,7 @@ Footnotes\n causes two of the bitcoin executables to crash shortly after start up. The bug is related to the\n -fstack-protector-all g++ compiler flag which is used to mitigate buffer overflows.\n Installing the mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n-an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubutntu should\n+an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubuntu should\n something break.\n \n <a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit mingw-w64 packages install two different"
      }
    ]
  },
  {
    "sha": "6d4821b693b2dc0aca285ae8b33ff388282bceb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDQ4MjFiNjkzYjJkYzBhY2EyODVhZThiMzNmZjM4ODI4MmJjZWI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-14T11:58:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-14T11:59:27Z"
      },
      "message": "Merge #11684: trivial: Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\"\n\nd8ac893 trivial: Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\" (practicalswift)\n\nPull request description:\n\n  Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\".\n\nTree-SHA512: 80441cc5bf8b3547c8e5d923cac24af6869d12a626c59f2e7573dd0652e540f8bdb32def318523d84e2856a3c8a32797f761092bfdcdc2600b30d603cdfa2ce7",
      "tree": {
        "sha": "86b690ed4eff8a51c80a65ac293ef58132fab3b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86b690ed4eff8a51c80a65ac293ef58132fab3b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d4821b693b2dc0aca285ae8b33ff388282bceb6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaCtqfAAoJEB5K7WKYbNJdThMH/21lrLDr5gJm+YLHswKspj+B\nxobvtrJW3E7PITPZoOuqxnFjpE37gUlu1beQbqnVsU/RhLoKD9tmgE1J8b6IUcrV\noZpquv2v2jAwN9LuAsfKmBPCm4clhNkBwU4RG6G++kIPNCWB3OJcI2MYBub+LtRd\n171o7z3TG8Kq7cthPmtTxxIyhuNlcqfR4635IogF0oFPUC9YN0rpBwSjJI7iqp+a\nCviPzuIQ11C96Eao7szrs8PR3UGQ18dddiLqKLpPrs5rYvYJfUpgKZ2BoWmYuLOy\nAUO85kkdK+6g0rJtlZ1O587C3jpbieDh0OLMuhcNuATSmvzPxsc4EOk4KXMg1pY=\n=+CsA\n-----END PGP SIGNATURE-----",
        "payload": "tree 86b690ed4eff8a51c80a65ac293ef58132fab3b8\nparent 7adeea3b0fc26025c06590125a48ce2651c66373\nparent d8ac8932683d9dca2a79a33ae110717ccbd85fa3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510660703 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510660767 +0100\n\nMerge #11684: trivial: Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\"\n\nd8ac893 trivial: Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\" (practicalswift)\n\nPull request description:\n\n  Fix typo \u2013 \"Ubutntu\" \u2192 \"Ubuntu\".\n\nTree-SHA512: 80441cc5bf8b3547c8e5d923cac24af6869d12a626c59f2e7573dd0652e540f8bdb32def318523d84e2856a3c8a32797f761092bfdcdc2600b30d603cdfa2ce7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d4821b693b2dc0aca285ae8b33ff388282bceb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d4821b693b2dc0aca285ae8b33ff388282bceb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d4821b693b2dc0aca285ae8b33ff388282bceb6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7adeea3b0fc26025c06590125a48ce2651c66373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adeea3b0fc26025c06590125a48ce2651c66373",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7adeea3b0fc26025c06590125a48ce2651c66373"
      },
      {
        "sha": "d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ac8932683d9dca2a79a33ae110717ccbd85fa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ac8932683d9dca2a79a33ae110717ccbd85fa3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9e3e38d188bed0dad2b964775fbc54b6e7960b76",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d4821b693b2dc0aca285ae8b33ff388282bceb6/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d4821b693b2dc0aca285ae8b33ff388282bceb6/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=6d4821b693b2dc0aca285ae8b33ff388282bceb6",
        "patch": "@@ -143,7 +143,7 @@ Footnotes\n causes two of the bitcoin executables to crash shortly after start up. The bug is related to the\n -fstack-protector-all g++ compiler flag which is used to mitigate buffer overflows.\n Installing the mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n-an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubutntu should\n+an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubuntu should\n something break.\n \n <a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit mingw-w64 packages install two different"
      }
    ]
  },
  {
    "sha": "ea3f363aa0900fe97aeb22b160314272eb4a8067",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTNmMzYzYWEwOTAwZmU5N2FlYjIyYjE2MDMxNDI3MmViNGE4MDY3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-14T17:45:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-14T17:50:55Z"
      },
      "message": "Make ISSUE_TEMPLATE a bit shorter, mention hardware tests",
      "tree": {
        "sha": "ff2c8fb872491d1e648bb3e1c16b4ea515ccae98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff2c8fb872491d1e648bb3e1c16b4ea515ccae98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea3f363aa0900fe97aeb22b160314272eb4a8067",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea3f363aa0900fe97aeb22b160314272eb4a8067",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea3f363aa0900fe97aeb22b160314272eb4a8067",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea3f363aa0900fe97aeb22b160314272eb4a8067/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d4821b693b2dc0aca285ae8b33ff388282bceb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d4821b693b2dc0aca285ae8b33ff388282bceb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d4821b693b2dc0aca285ae8b33ff388282bceb6"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 9,
      "deletions": 23
    },
    "files": [
      {
        "sha": "811a246df1adde4271e5f51e0d247cb74e36516d",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 9,
        "deletions": 23,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea3f363aa0900fe97aeb22b160314272eb4a8067/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea3f363aa0900fe97aeb22b160314272eb4a8067/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=ea3f363aa0900fe97aeb22b160314272eb4a8067",
        "patch": "@@ -1,37 +1,23 @@\n <!--- Remove sections that do not apply -->\n \n-This issue tracker is only for technical issues related to bitcoin-core.\n+This issue tracker is only for technical issues related to Bitcoin Core.\n \n-General bitcoin questions and/or support requests and are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+General bitcoin questions and/or support requests are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n \n For reporting security issues, please read instructions at [https://bitcoincore.org/en/contact/](https://bitcoincore.org/en/contact/).\n \n-### Describe the issue\n-\n-### Can you reliably reproduce the issue?\n-#### If so, please list the steps to reproduce below:\n-1.\n-2.\n-3.\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue!\n \n-### Expected behaviour\n-Tell us what should happen\n+### Describe the issue\n+#### What behavior did you expect?\n \n-### Actual behaviour\n-Tell us what happens instead\n+#### What was the actual behavior (provide screenshots if the issue is GUI-related)?\n \n-### Screenshots.\n-If the issue is related to the GUI, screenshots can be added to this issue via drag & drop.\n+#### How reliably can you reproduce the issue, what are the steps to do so?\n \n-### What version of bitcoin-core are you using?\n-List the version number/commit ID, and if it is an official binary, self compiled or a distribution package such as PPA.\n+### What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)?\n \n-### Machine specs:\n-- OS:\n-- CPU:\n-- RAM:\n-- Disk size:\n-- Disk Type (HD/SDD):\n+### What type of machine are you observing the error on (OS/CPU and disk type)?\n \n ### Any extra information that might be useful in the debugging process.\n This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred."
      }
    ]
  },
  {
    "sha": "3bdf242fc68a8d767932c6214455d4d413effbc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmRmMjQyZmM2OGE4ZDc2NzkzMmM2MjE0NDU1ZDRkNDEzZWZmYmM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-14T22:44:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-14T22:44:09Z"
      },
      "message": "Merge #11677: qa: Remove unused NodeConn members\n\nfafdad0d4 qa: Remove unused NodeConn members (MarcoFalke)\n\nPull request description:\n\n  * `ver_send` and `ver_recv` were completely unused\n  * `rpc` was only used once, in p2p-segwit. Imo better only pass it to the constructor in that single test\n\nTree-SHA512: 7f85554d6d0fd2096516ca3c608811d5370da66cde35d8031bdc921607a7a4efdb26355896012f75f713f8df09e28d46ba46be69fd96a5898fabb1a25cbcb8ad",
      "tree": {
        "sha": "ae7a4761d770435c300f9996f6b40ad98d0f539d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae7a4761d770435c300f9996f6b40ad98d0f539d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bdf242fc68a8d767932c6214455d4d413effbc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaC3G5AAoJENLqSFDnUoslN8kP/2YK/XFFZrgVTJAxuDDVEUGB\nTXwKG/1alrwS0gFf7X/fPI/+6QEzXq59xanTzHFh8R0N7c3zqMgDydZARCFv0v38\ne0o9cw3LSL4ZO5MokYVoLPh2y9VYdiG8DivjEyYX0x+vPTcJ+WDecNI6yGBnkfHW\neCjlOZtgrqNbzrp6ZlR9iIxEr5RSI5DOqllEfL3zjrO49HmF9wucAyqarrgj0zgc\nN+TPChvTvN2XGRp//2oXAApTvEz8qWRiLyjnOruQo09zY3iXprIE7+M9UGFkKIYB\n31MXdEmx4TERuZnlFWzMZt+O2gidWZS760WfDKbMFEEsgYDOWfjpDHqkobiLwCVi\nJtb0j1tBHad1VxJTodQa9t3wtPpPwbLTaOqlDMv3IHjlJ/3NYEIBiRJ6vHZdMVXT\nyh8kTRSmqljy4J2UbI1bkcWk6A416JK2lhPCx3uzjR0t0TTHEnFtpA7BKeZZF5wZ\nUhhyLLDBnNC6aSt3rqjEv3Ep5DEyRC/g0PvOaymA4F1HjUhENVAjSVROExChTbs4\nTVlI5s9mS/ykpkX0Tummy6XyA04Pexw2cUttpTX1k7Ca3dzsB0mB0XnyzK7H16t8\ndEq+f0XvP8NOiat2PPffcQtFGOMoOf4/sCNXAt0bvj85jDzowcgBUixhlhIKE+j5\nhHLkSRg0JAV0y3FD8MUP\n=SKiW\n-----END PGP SIGNATURE-----",
        "payload": "tree ae7a4761d770435c300f9996f6b40ad98d0f539d\nparent 6d4821b693b2dc0aca285ae8b33ff388282bceb6\nparent fafdad0d461330aee7a17db57a9d8f25906203cc\nauthor MarcoFalke <falke.marco@gmail.com> 1510699441 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510699449 -0500\n\nMerge #11677: qa: Remove unused NodeConn members\n\nfafdad0d4 qa: Remove unused NodeConn members (MarcoFalke)\n\nPull request description:\n\n  * `ver_send` and `ver_recv` were completely unused\n  * `rpc` was only used once, in p2p-segwit. Imo better only pass it to the constructor in that single test\n\nTree-SHA512: 7f85554d6d0fd2096516ca3c608811d5370da66cde35d8031bdc921607a7a4efdb26355896012f75f713f8df09e28d46ba46be69fd96a5898fabb1a25cbcb8ad\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdf242fc68a8d767932c6214455d4d413effbc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdf242fc68a8d767932c6214455d4d413effbc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdf242fc68a8d767932c6214455d4d413effbc9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d4821b693b2dc0aca285ae8b33ff388282bceb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d4821b693b2dc0aca285ae8b33ff388282bceb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d4821b693b2dc0aca285ae8b33ff388282bceb6"
      },
      {
        "sha": "fafdad0d461330aee7a17db57a9d8f25906203cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafdad0d461330aee7a17db57a9d8f25906203cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafdad0d461330aee7a17db57a9d8f25906203cc"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b940bc40966a8a54011db4204a08992b612ebb62",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=3bdf242fc68a8d767932c6214455d4d413effbc9",
        "patch": "@@ -32,9 +32,10 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def __init__(self):\n+    def __init__(self, rpc):\n         super().__init__()\n         self.getdataset = set()\n+        self.rpc = rpc\n \n     def on_getdata(self, conn, message):\n         for inv in message.inv:\n@@ -73,7 +74,7 @@ def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n             tx_message = msg_witness_tx(tx)\n         self.send_message(tx_message)\n         self.sync_with_ping()\n-        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+        assert_equal(tx.hash in self.rpc.getrawmempool(), accepted)\n         if (reason != None and not accepted):\n             # Check the rejection reason as well.\n             with mininode_lock:\n@@ -86,7 +87,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n         else:\n             self.send_message(msg_block(block))\n         self.sync_with_ping()\n-        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+        assert_equal(self.rpc.getbestblockhash() == block.hash, accepted)\n \n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n class UTXO():\n@@ -1869,11 +1870,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestNode(self.nodes[1].rpc), services=NODE_NETWORK|NODE_WITNESS)\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "723826bae4c7008d24fb7e9d459983f0b42e1dff",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=3bdf242fc68a8d767932c6214455d4d413effbc9",
        "patch": "@@ -177,7 +177,7 @@ def add_all_connections(self, nodes):\n             # Create a p2p connection to each node\n             test_node = TestNode(self.block_store, self.tx_store)\n             self.test_nodes.append(test_node)\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), test_node))\n             # Make sure the TestNode (callback class) has a reference to its\n             # associated NodeConn\n             test_node.add_connection(self.connections[-1])"
      },
      {
        "sha": "24ee09b81c272cee2fc608e01da7da42a5332a9e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=3bdf242fc68a8d767932c6214455d4d413effbc9",
        "patch": "@@ -1420,7 +1420,6 @@ def on_ping(self, conn, message):\n         conn.send_message(msg_pong(message.nonce))\n \n     def on_verack(self, conn, message):\n-        conn.ver_recv = conn.ver_send\n         self.verack_received = True\n \n     def on_version(self, conn, message):\n@@ -1516,16 +1515,14 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n+    def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n         self.sendbuf = b\"\"\n         self.recvbuf = b\"\"\n-        self.ver_send = 209\n-        self.ver_recv = 209\n         self.last_sent = 0\n         self.state = \"connecting\"\n         self.network = net\n@@ -1549,7 +1546,6 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n             self.connect((dstaddr, dstport))\n         except:\n             self.handle_close()\n-        self.rpc = rpc\n \n     def handle_connect(self):\n         if self.state != \"connected\":"
      },
      {
        "sha": "34b458482a86ae31396754c43aa5e09485b9d84c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bdf242fc68a8d767932c6214455d4d413effbc9/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=3bdf242fc68a8d767932c6214455d4d413effbc9",
        "patch": "@@ -168,7 +168,7 @@ def add_p2p_connection(self, p2p_conn, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n         self.p2ps.append(p2p_conn)\n-        kwargs.update({'rpc': self.rpc, 'callback': p2p_conn})\n+        kwargs.update({'callback': p2p_conn})\n         p2p_conn.add_connection(NodeConn(**kwargs))\n \n         return p2p_conn"
      }
    ]
  },
  {
    "sha": "5ff01c236384c25ece31eba69f3718444cc2c599",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmYwMWMyMzYzODRjMjVlY2UzMWViYTY5ZjM3MTg0NDRjYzJjNTk5",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-14T07:06:48Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-14T23:29:45Z"
      },
      "message": "[docs] Add instructions for lcov coverage report generation",
      "tree": {
        "sha": "c5b9a941ff86a93b3411d5df8e6b13dc12d7a8b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b9a941ff86a93b3411d5df8e6b13dc12d7a8b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ff01c236384c25ece31eba69f3718444cc2c599",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ff01c236384c25ece31eba69f3718444cc2c599",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ff01c236384c25ece31eba69f3718444cc2c599",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ff01c236384c25ece31eba69f3718444cc2c599/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e468994fbb349e8eefc996954a31a67a34aaa15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e468994fbb349e8eefc996954a31a67a34aaa15"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1904400c55d1b4d74ddbf53004ef93367dbb5593",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff01c236384c25ece31eba69f3718444cc2c599/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff01c236384c25ece31eba69f3718444cc2c599/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=5ff01c236384c25ece31eba69f3718444cc2c599",
        "patch": "@@ -182,6 +182,22 @@ $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n $ valgrind -v --leak-check=full src/bitcoind -printtoconsole\n ```\n \n+**compiling for test coverage**\n+\n+LCOV can be used to generate a test coverage report based upon `make check`\n+execution. LCOV must be installed on your system (e.g. the `lcov` package\n+on Debian/Ubuntu).\n+\n+To enable LCOV report generation during test runs:\n+\n+```shell\n+./configure --enable-lcov\n+make\n+make cov\n+\n+# A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n+```\n+\n Locking/mutex usage notes\n -------------------------\n "
      }
    ]
  },
  {
    "sha": "a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2M5NDlmNjQ0ZDgyYTViOTc2MTcyNTZmYTVlOGNjNTExYjhhYTVm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-06T14:25:22Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-15T00:00:53Z"
      },
      "message": "[build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck",
      "tree": {
        "sha": "f97dda190f82ab5c6f3ed1ab4e72917b9acd566b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f97dda190f82ab5c6f3ed1ab4e72917b9acd566b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAloLg8YACgkQLuufXMCV\nJsFSpg/7BGBm4I1P+2B1PYXd6lLkCBN/X8Je0W754++e8r2Pc5oJfVSsEUQsyGp4\n+ZG6CqkQZ4dRr6ZM+ehax+vGd7YYI4Sr5e1Nku8IiYCTUkMP5fwS5+SCDiE1PHFl\nPsEM/+9j/G7daFJdZlvKWXpKjgdV9Cm0W1HL16tPpotZLLLJyi4kFjTuyr5Jeqj8\nfXjeAANNW2PQrRbilW2QTXAezMRmPY/faXnGQ11iT2/QXdsfgi2yHU7j6zgoTDCn\nBgw/mdnUvxvQUgI1h7y3OpQzyWpfkNpFuE5Mv+/wvh68C9At4U0xv9f3n+W2OseJ\n7j9eaMmkBz0RBWxasL5mB1AeftPjJiEJ3CDryaDlO3YvlZkRurnLpUh3J2l5/Q4K\nrUEYiWB2OrxNhIrg8kLZj9VTi14qYhmD1KWZOu5hSpDTmm0HRG5exWkpUZg8emG8\nHKEANHMtRu33GJWQSlvNIHsw5OyO8TouVrkyuvTg/XgskImRdWbF8zqrbuxz0n9F\nuVrDzpWsAVYtl9IvWlZlmTZqJqOzXuW2USNBVnKOEQ3e1vKwwzEg9khW3qgoZTJU\nv368qAG201r9hU/D36aO82funOCMBTn0HJx4LMflNIZuVkHgkqjM5PUaUu+Q8Lkq\n3MXsLwYGPj1phxnpoMAwfyFuWDxUJpKM5UuVqC+F/Z9x1ZQ1s4c=\n=rGHm\n-----END PGP SIGNATURE-----",
        "payload": "tree f97dda190f82ab5c6f3ed1ab4e72917b9acd566b\nparent 3bdf242fc68a8d767932c6214455d4d413effbc9\nauthor fanquake <fanquake@gmail.com> 1509978322 +0800\ncommitter fanquake <fanquake@gmail.com> 1510704053 +0800\n\n[build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7c949f644d82a5b97617256fa5e8cc511b8aa5f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bdf242fc68a8d767932c6214455d4d413effbc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdf242fc68a8d767932c6214455d4d413effbc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdf242fc68a8d767932c6214455d4d413effbc9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca571130752f6832baf91367def603a8aa9469b4",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c949f644d82a5b97617256fa5e8cc511b8aa5f/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c949f644d82a5b97617256fa5e8cc511b8aa5f/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
        "patch": "@@ -439,7 +439,7 @@ $(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n-CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno\n+CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno qt/temp_bitcoin_locale.qrc\n \n CLEANFILES += $(CLEAN_QT)\n "
      }
    ]
  },
  {
    "sha": "4db82b7aab4ad64717f742a7318e3dc6811b41be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGI4MmI3YWFiNGFkNjQ3MTdmNzQyYTczMThlM2RjNjgxMWI0MWJl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-15T07:28:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-15T07:29:08Z"
      },
      "message": "Merge #11680: [docs] Add instructions for lcov report generation\n\n5ff01c236 [docs] Add instructions for lcov coverage report generation (James O'Beirne)\n\nPull request description:\n\n  After rediscovering the `lcov` report generation recipe one too many times, it seemed prudent to write some doc.\n\nTree-SHA512: 20e1b5f51ecd39e14bd67986a2c1578fb7da03a50625366eaca35b201db66aef99cd4a5456df3aaca5d2d66b18ed7d2e8eb8f3bd9c7aaf9af48164d9bac38931",
      "tree": {
        "sha": "d5847b498238ff5747a2466469e83e5bed9bd510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5847b498238ff5747a2466469e83e5bed9bd510"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4db82b7aab4ad64717f742a7318e3dc6811b41be",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAloL7MQACgkQHrd2uwPH\nki1gdA/+OkdRrIs7pf5/6aY0z+RrcneRx70HCoa4oR93wE6qVLy5XKUggNCULWRQ\nIsNRCWPMYcZi9FuCw9litKhr8ise5llqtOJGeb6etrNU9mcRomejuTROQdYSLSbL\np46+czoZmgMBn++H+f1biAag/2UvsqTgpMp/jg0odndj7r6k0Yo3o6z22vsctLXU\nchY8b1gr6nFGzeg6MVIBLAFwyaEGQrVYHG9tGxEeh0Ftd9/rJkSEvhY1jDc2Q3Dj\n+vCrVf2fG2eSnORzkPpwaBBbFXtj0GbHkK2xjPA1yDkuHYfmlzUD+m0WU8gi2KK8\nreuxJvkXPY8C/fNfOsBmg5CdHztRnLXh6IS+5JniQQzbWBmrHVbyLePQpDSn9zps\nvtJ9y9cA6XYoS7XSLDTYE2kWGVoppcrmHORViClnz33P8nKf74fkz2pN+uXLlLLf\nwTjnFv0Ut2ZB8ybjLlTMUht0w+iuLlejGIYx/nC7UyYEP4Swz7EfC2Ghq4KxgtFH\nGURSph/iM7dCta1TRfQlmOXzLy9b8vvQcoN4coMiErbQPb2RV2wZ8bl9ycVX/MQA\nrMjI/D1QboOYOruKTxuOcbFf/MKIkc8xB1ieXJjNBi/AuQ0i4zGEG03by/axgUlL\nNSp+d/jBydDIcMTz5bfm6qHsOXjPlKv7Ngp2kxb9YIMmWvvcx9E=\n=+NZe\n-----END PGP SIGNATURE-----",
        "payload": "tree d5847b498238ff5747a2466469e83e5bed9bd510\nparent 3bdf242fc68a8d767932c6214455d4d413effbc9\nparent 5ff01c236384c25ece31eba69f3718444cc2c599\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1510730916 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1510730948 -1000\n\nMerge #11680: [docs] Add instructions for lcov report generation\n\n5ff01c236 [docs] Add instructions for lcov coverage report generation (James O'Beirne)\n\nPull request description:\n\n  After rediscovering the `lcov` report generation recipe one too many times, it seemed prudent to write some doc.\n\nTree-SHA512: 20e1b5f51ecd39e14bd67986a2c1578fb7da03a50625366eaca35b201db66aef99cd4a5456df3aaca5d2d66b18ed7d2e8eb8f3bd9c7aaf9af48164d9bac38931\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db82b7aab4ad64717f742a7318e3dc6811b41be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4db82b7aab4ad64717f742a7318e3dc6811b41be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db82b7aab4ad64717f742a7318e3dc6811b41be/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bdf242fc68a8d767932c6214455d4d413effbc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdf242fc68a8d767932c6214455d4d413effbc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdf242fc68a8d767932c6214455d4d413effbc9"
      },
      {
        "sha": "5ff01c236384c25ece31eba69f3718444cc2c599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ff01c236384c25ece31eba69f3718444cc2c599",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ff01c236384c25ece31eba69f3718444cc2c599"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1904400c55d1b4d74ddbf53004ef93367dbb5593",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4db82b7aab4ad64717f742a7318e3dc6811b41be/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4db82b7aab4ad64717f742a7318e3dc6811b41be/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "patch": "@@ -182,6 +182,22 @@ $ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n $ valgrind -v --leak-check=full src/bitcoind -printtoconsole\n ```\n \n+**compiling for test coverage**\n+\n+LCOV can be used to generate a test coverage report based upon `make check`\n+execution. LCOV must be installed on your system (e.g. the `lcov` package\n+on Debian/Ubuntu).\n+\n+To enable LCOV report generation during test runs:\n+\n+```shell\n+./configure --enable-lcov\n+make\n+make cov\n+\n+# A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n+```\n+\n Locking/mutex usage notes\n -------------------------\n "
      }
    ]
  },
  {
    "sha": "b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDc3ZmU5MDhlOThkZGY5YmE4ZmNkMDFhNGMxYTFlYmIxYjQ5MWUx",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-11-15T08:07:52Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-11-15T08:07:52Z"
      },
      "message": "fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it",
      "tree": {
        "sha": "0fffb6135cb7d09b8be1a1c8ac121e5b5d60599b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fffb6135cb7d09b8be1a1c8ac121e5b5d60599b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4db82b7aab4ad64717f742a7318e3dc6811b41be"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "204cdf99d0562d14fed229ab7cd14c048bf15be5",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
        "patch": "@@ -1,5 +1,5 @@\n [Desktop Entry]\n-Encoding=UTF-8\n+Version=1.0\n Name=Bitcoin Core\n Comment=Connect to the Bitcoin P2P Network\n Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n@@ -11,3 +11,4 @@ Type=Application\n Icon=bitcoin128\n MimeType=x-scheme-handler/bitcoin;\n Categories=Office;Finance;\n+StartupWMClass=Bitcoin-qt"
      }
    ]
  },
  {
    "sha": "aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2E3N2E0ZDU4YzY4OWRkZTdjZGEzMGNmNGVhZjViZDMzMjM2Njhl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-15T12:55:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-15T12:55:40Z"
      },
      "message": "Merge #11655: net: Assert state.m_chain_sync.m_work_header in ConsiderEviction\n\n63c2d83 Explicitly state assumption that state.m_chain_sync.m_work_header != nullptr in ConsiderEviction (practicalswift)\n\nPull request description:\n\n  Explicitly state assumption that `state.m_chain_sync.m_work_header != nullptr` in `ConsiderEviction(\u2026)`.\n\n  Static analyzer (and humans!) will see the null-check in ...\n\n  ```\n  else if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && ...\n  ```\n\n  ... and infer that `state.m_chain_sync.m_work_header` might be set to `nullptr` when reaching `else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout)` and thus flag `state.m_chain_sync.m_work_header->GetBlockHash().ToString()` as a potential null pointer dereference.\n\n  This commit makes the tacit assumption of `state.m_chain_sync.m_work_header != nullptr` explicit.\n\n  Code introduced in 5a6d00c6defc587e22c93e63029fdd538ce8858d (\"Permit disconnection of outbound peers on bad/slow chains\") which was merged into master four days ago.\n\n  Friendly ping @sdaftuar :-)\n\nTree-SHA512: 32e5631025b7ba7556a02c89d040fbe339c482a03f28d0dbc9871c699e1f8ac867619b89c5fd41fdcfcf0dc4d7c859295b26ccd988572145cc244261aec18ce9",
      "tree": {
        "sha": "112a0d705682551fc50b7301fc77f2c276ea680a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/112a0d705682551fc50b7301fc77f2c276ea680a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDDlMAAoJEB5K7WKYbNJdjV0H/RHIqft1U5aglXylszp6eyIV\nf5LWSZn7iw/gbkICvLqcm5aOH4EA8so4w8irVXxio88OBd8qXZGvUIBajYrVbNbX\nOzKfz7hLKy/4GlZ9Lfy7iFDQBq07Zcmf/VVDYUFhBJ0bYMTYmePeNo5+tgETQ8NZ\nrjotdwsJzCmWvGMgMf0EJjYOr4aiFB2UqlH9LAuIsr9pd8wEpL4xq+7GMB6Ii+sG\nF9xJTUBjNgcCUl6tFAALslehvP7b9ZFkwyryqRYETUN6+LT7wxqYqK3MiXSXopk5\nen7EBlP++7iLocxANet5dM+yzj/LcFSMWRfWOjF9qvXXZiJzAyE7GDiVK6BDye4=\n=G/sU\n-----END PGP SIGNATURE-----",
        "payload": "tree 112a0d705682551fc50b7301fc77f2c276ea680a\nparent 4db82b7aab4ad64717f742a7318e3dc6811b41be\nparent 63c2d83e58c7506a1030e7fe4dcea84cdce97147\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510750503 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510750540 +0100\n\nMerge #11655: net: Assert state.m_chain_sync.m_work_header in ConsiderEviction\n\n63c2d83 Explicitly state assumption that state.m_chain_sync.m_work_header != nullptr in ConsiderEviction (practicalswift)\n\nPull request description:\n\n  Explicitly state assumption that `state.m_chain_sync.m_work_header != nullptr` in `ConsiderEviction(\u2026)`.\n\n  Static analyzer (and humans!) will see the null-check in ...\n\n  ```\n  else if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && ...\n  ```\n\n  ... and infer that `state.m_chain_sync.m_work_header` might be set to `nullptr` when reaching `else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout)` and thus flag `state.m_chain_sync.m_work_header->GetBlockHash().ToString()` as a potential null pointer dereference.\n\n  This commit makes the tacit assumption of `state.m_chain_sync.m_work_header != nullptr` explicit.\n\n  Code introduced in 5a6d00c6defc587e22c93e63029fdd538ce8858d (\"Permit disconnection of outbound peers on bad/slow chains\") which was merged into master four days ago.\n\n  Friendly ping @sdaftuar :-)\n\nTree-SHA512: 32e5631025b7ba7556a02c89d040fbe339c482a03f28d0dbc9871c699e1f8ac867619b89c5fd41fdcfcf0dc4d7c859295b26ccd988572145cc244261aec18ce9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca77a4d58c689dde7cda30cf4eaf5bd3323668e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4db82b7aab4ad64717f742a7318e3dc6811b41be"
      },
      {
        "sha": "63c2d83e58c7506a1030e7fe4dcea84cdce97147",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63c2d83e58c7506a1030e7fe4dcea84cdce97147"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38b9703d9105b56909461ed2578eef8d924659a6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca77a4d58c689dde7cda30cf4eaf5bd3323668e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca77a4d58c689dde7cda30cf4eaf5bd3323668e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
        "patch": "@@ -3006,6 +3006,7 @@ void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n                 LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n                 pto->fDisconnect = true;\n             } else {\n+                assert(state.m_chain_sync.m_work_header);\n                 LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n                 connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n                 state.m_chain_sync.m_sent_getheaders = true;"
      }
    ]
  },
  {
    "sha": "927a1d7d088e52aa079682e1d4f514222c0a2069",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjdhMWQ3ZDA4OGU1MmFhMDc5NjgyZTFkNGY1MTQyMjJjMGEyMDY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-15T13:14:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-15T15:25:40Z"
      },
      "message": "Merge #10286: Call wallet notify callbacks in scheduler thread (without cs_main)\n\n89f0312 Remove redundant pwallet nullptr check (Matt Corallo)\nc4784b5 Add a dev notes document describing the new wallet RPC blocking (Matt Corallo)\n3ea8b75 Give ZMQ consistent order with UpdatedBlockTip on scheduler thread (Matt Corallo)\ncb06edf Fix wallet RPC race by waiting for callbacks in sendrawtransaction (Matt Corallo)\ne545ded Also call other wallet notify callbacks in scheduler thread (Matt Corallo)\n17220d6 Use callbacks to cache whether wallet transactions are in mempool (Matt Corallo)\n5d67a78 Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs (Matt Corallo)\n5ee3172 Add CWallet::BlockUntilSyncedToCurrentChain() (Matt Corallo)\n0b2f42d Add CallFunctionInQueue to wait on validation interface queue drain (Matt Corallo)\n2b4b345 Add ability to assert a lock is not held in DEBUG_LOCKORDER (Matt Corallo)\n0343676 Call TransactionRemovedFromMempool in the CScheduler thread (Matt Corallo)\na7d3936 Add a CValidationInterface::TransactionRemovedFromMempool (Matt Corallo)\n\nPull request description:\n\n  Based on #10179, this effectively reverts #9583, regaining most of the original speedups of #7946.\n\n  This concludes the work of #9725, #10178, and #10179.\n\n  See individual commit messages for more information.\n\nTree-SHA512: eead4809b0a75d1fb33b0765174ff52c972e45040635e38cf3686cef310859c1e6b3c00e7186cbd17374c6ae547bfbd6c1718fe36f26c76ba8a8b052d6ed7bc9",
      "tree": {
        "sha": "ce8e41927b116fa73ba428708ac8e0d50fd06ae7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce8e41927b116fa73ba428708ac8e0d50fd06ae7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/927a1d7d088e52aa079682e1d4f514222c0a2069",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDFx0AAoJEB5K7WKYbNJdMVUIALUPfts8x7Ast9LvYi8BJwfh\nPlIFeViw84tv8C59QTlhFv1wNfJBgAhsUC7f+07poqbh+mBkSXK3qxOl7DFi7Zer\nDfLaigQfLLCjfPUBgkM+6fByY7h0CaX2KWW8YTXGHTA/R/gfVqJUkeyYCzEN1ot5\nkOICRadMSxPX8RlZUekaqeVlXO5suAo6rorkw7fJUMpAolT2Qexx+64emUXLnCeW\nEZuM6DTLwfCgcV7pHlUQwtuf4fxC+u/WGWuNpPkwBlcAxqzapU83c9BppM/dzG7i\nVUD5yi+OrqU/zQeW9ghBysSQ1vQ0DWUqst/rmMYW3Hp1bVpvxi/wiH+hUNm9664=\n=wNZK\n-----END PGP SIGNATURE-----",
        "payload": "tree ce8e41927b116fa73ba428708ac8e0d50fd06ae7\nparent aca77a4d58c689dde7cda30cf4eaf5bd3323668e\nparent 89f03120a02690cff8399d77c979169355bf9cae\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510751660 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510759540 +0100\n\nMerge #10286: Call wallet notify callbacks in scheduler thread (without cs_main)\n\n89f0312 Remove redundant pwallet nullptr check (Matt Corallo)\nc4784b5 Add a dev notes document describing the new wallet RPC blocking (Matt Corallo)\n3ea8b75 Give ZMQ consistent order with UpdatedBlockTip on scheduler thread (Matt Corallo)\ncb06edf Fix wallet RPC race by waiting for callbacks in sendrawtransaction (Matt Corallo)\ne545ded Also call other wallet notify callbacks in scheduler thread (Matt Corallo)\n17220d6 Use callbacks to cache whether wallet transactions are in mempool (Matt Corallo)\n5d67a78 Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs (Matt Corallo)\n5ee3172 Add CWallet::BlockUntilSyncedToCurrentChain() (Matt Corallo)\n0b2f42d Add CallFunctionInQueue to wait on validation interface queue drain (Matt Corallo)\n2b4b345 Add ability to assert a lock is not held in DEBUG_LOCKORDER (Matt Corallo)\n0343676 Call TransactionRemovedFromMempool in the CScheduler thread (Matt Corallo)\na7d3936 Add a CValidationInterface::TransactionRemovedFromMempool (Matt Corallo)\n\nPull request description:\n\n  Based on #10179, this effectively reverts #9583, regaining most of the original speedups of #7946.\n\n  This concludes the work of #9725, #10178, and #10179.\n\n  See individual commit messages for more information.\n\nTree-SHA512: eead4809b0a75d1fb33b0765174ff52c972e45040635e38cf3686cef310859c1e6b3c00e7186cbd17374c6ae547bfbd6c1718fe36f26c76ba8a8b052d6ed7bc9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927a1d7d088e52aa079682e1d4f514222c0a2069",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/927a1d7d088e52aa079682e1d4f514222c0a2069",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927a1d7d088e52aa079682e1d4f514222c0a2069/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca77a4d58c689dde7cda30cf4eaf5bd3323668e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aca77a4d58c689dde7cda30cf4eaf5bd3323668e"
      },
      {
        "sha": "89f03120a02690cff8399d77c979169355bf9cae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89f03120a02690cff8399d77c979169355bf9cae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89f03120a02690cff8399d77c979169355bf9cae"
      }
    ],
    "stats": {
      "total": 382,
      "additions": 354,
      "deletions": 28
    },
    "files": [
      {
        "sha": "35797da7aecef44af60598e0f88e36d1919b08fc",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -675,3 +675,16 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: If a RPC response is not a JSON object then it is harder to avoid API breakage if\n     new data in the response is needed.\n+\n+- Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with\n+  `getblockchaininfo`'s state immediately prior to the call's execution. Wallet\n+  RPCs whose behavior does *not* depend on the current chainstate may omit this\n+  call.\n+\n+  - *Rationale*: In previous versions of Bitcoin Core, the wallet was always\n+    in-sync with the chainstate (by virtue of them all being updated in the\n+    same cs_main lock). In order to maintain the behavior that wallet RPCs\n+    return results as of at least the highest best-known block an RPC\n+    client may be aware of prior to entering a wallet RPC call, we must block\n+    until the wallet is caught up to the chainstate as of the RPC call's entry.\n+    This also makes the API much easier for RPC clients to reason about."
      },
      {
        "sha": "9bdde005582ae1fcd21121b96d1f407f6e1fac2a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -261,6 +261,7 @@ void Shutdown()\n #endif\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    GetMainSignals().UnregisterWithMempoolSignals(mempool);\n #ifdef ENABLE_WALLET\n     CloseWallets();\n #endif\n@@ -1236,6 +1237,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+    GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections"
      },
      {
        "sha": "8f8cdf80ed8a0bd739be006ef854072648618802",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -11,6 +11,7 @@\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n+#include \"validationinterface.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n@@ -30,6 +31,7 @@\n #include \"wallet/wallet.h\"\n #endif\n \n+#include <future>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -917,7 +919,9 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n-    LOCK(cs_main);\n+\n+    std::promise<void> promise;\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     // parse hex string from parameter\n@@ -931,6 +935,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     if (!request.params[1].isNull() && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n \n+    { // cs_main scope\n+    LOCK(cs_main);\n     CCoinsViewCache &view = *pcoinsTip;\n     bool fHaveChain = false;\n     for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n@@ -952,10 +958,24 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 }\n                 throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n             }\n+        } else {\n+            // If wallet is enabled, ensure that the wallet has been made aware\n+            // of the new transaction prior to returning. This prevents a race\n+            // where a user might call sendrawtransaction with a transaction\n+            // to/from their wallet, immediately call some wallet RPC, and get\n+            // a stale result because callbacks have not yet been processed.\n+            CallFunctionInValidationInterfaceQueue([&promise] {\n+                promise.set_value();\n+            });\n         }\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n+\n+    } // cs_main\n+\n+    promise.get_future().wait();\n+\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -964,6 +984,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     {\n         pnode->PushInventory(inv);\n     });\n+\n     return hashTx.GetHex();\n }\n "
      },
      {
        "sha": "4ef419cd099de761afccad1afb2eb0c351ac18e1",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -155,6 +155,16 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n     abort();\n }\n \n+void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n+{\n+    for (const std::pair<void*, CLockLocation>& i : *lockstack) {\n+        if (i.first == cs) {\n+            fprintf(stderr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+            abort();\n+        }\n+    }\n+}\n+\n void DeleteLock(void* cs)\n {\n     if (!lockdata.available) {"
      },
      {
        "sha": "12160f8dc14c5d5487e75a53f646b3313032ae0b",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -77,14 +77,17 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n void LeaveCritical();\n std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n+void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n void DeleteLock(void* cs);\n #else\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n+void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n void static inline DeleteLock(void* cs) {}\n #endif\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n /**\n  * Wrapped mutex: supports recursive locking, but no waiting"
      },
      {
        "sha": "87f2297c04ddb8874f77c1cd10449aad8e1255f0",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -513,6 +513,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP outside of tests\n+    // and any other callers may break wallet's in-mempool tracking (due to\n+    // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n "
      },
      {
        "sha": "c5d73187b73317f4f19df1e2b817cf9be37078a3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -2494,7 +2494,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                 assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs);\n+                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      },
      {
        "sha": "d91707cf9fe09d97f412ed4228dcd1faf6278e3e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 7,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -9,6 +9,7 @@\n #include \"primitives/block.h\"\n #include \"scheduler.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n \n #include <list>\n@@ -21,6 +22,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n@@ -50,6 +52,14 @@ void CMainSignals::FlushBackgroundCallbacks() {\n     m_internals->m_schedulerClient.EmptyQueue();\n }\n \n+void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n+    pool.NotifyEntryRemoved.connect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n+}\n+\n+void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n+    pool.NotifyEntryRemoved.disconnect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n@@ -60,6 +70,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -75,6 +86,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n@@ -87,32 +99,57 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n     g_signals.m_internals->BlockConnected.disconnect_all_slots();\n     g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n+    g_signals.m_internals->TransactionRemovedFromMempool.disconnect_all_slots();\n     g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n     g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n }\n \n+void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {\n+    g_signals.m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\n+}\n+\n+void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx);\n+        });\n+    }\n+}\n+\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n-    m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+        m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+    });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->TransactionAddedToMempool(ptx);\n+    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        m_internals->TransactionAddedToMempool(ptx);\n+    });\n }\n \n-void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n-    m_internals->BlockConnected(pblock, pindex, vtxConflicted);\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+        m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n+    });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->BlockDisconnected(pblock);\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+        m_internals->BlockDisconnected(pblock);\n+    });\n }\n \n void CMainSignals::SetBestChain(const CBlockLocator &locator) {\n-    m_internals->SetBestChain(locator);\n+    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+        m_internals->SetBestChain(locator);\n+    });\n }\n \n void CMainSignals::Inventory(const uint256 &hash) {\n-    m_internals->Inventory(hash);\n+    m_internals->m_schedulerClient.AddToProcessQueue([hash, this] {\n+        m_internals->Inventory(hash);\n+    });\n }\n \n void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {"
      },
      {
        "sha": "1494c6dc21edcbedc27773e71128d62b6bca2a1d",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 62,
        "deletions": 8,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -6,10 +6,11 @@\n #ifndef BITCOIN_VALIDATIONINTERFACE_H\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n-#include <memory>\n-\n #include \"primitives/transaction.h\" // CTransaction(Ref)\n \n+#include <functional>\n+#include <memory>\n+\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n@@ -20,6 +21,8 @@ class CValidationInterface;\n class CValidationState;\n class uint256;\n class CScheduler;\n+class CTxMemPool;\n+enum class MemPoolRemovalReason;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -29,23 +32,66 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn);\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n+/**\n+ * Pushes a function to callback onto the notification queue, guaranteeing any\n+ * callbacks generated prior to now are finished when the function is called.\n+ *\n+ * Be very careful blocking on func to be called if any locks are held -\n+ * validation interface clients may not be able to make progress as they often\n+ * wait for things like cs_main, so blocking until func is called with cs_main\n+ * will result in a deadlock (that DEBUG_LOCKORDER will miss).\n+ */\n+void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n class CValidationInterface {\n protected:\n-    /** Notifies listeners of updated block chain tip */\n+    /**\n+     * Notifies listeners of updated block chain tip\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    /** Notifies listeners of a transaction having been added to mempool. */\n+    /**\n+     * Notifies listeners of a transaction having been added to mempool.\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n+    /**\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, reorg (changes in lock times/coinbase maturity), or\n+     * replacement. This does not include any transactions which are included\n+     * in BlockConnectedDisconnected either in block->vtx or in txnConflicted.\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n+     *\n+     * Called on a background thread.\n      */\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    /** Notifies listeners of a block being disconnected */\n+    /**\n+     * Notifies listeners of a block being disconnected\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    /** Notifies listeners of the new active block chain on-disk. */\n+    /**\n+     * Notifies listeners of the new active block chain on-disk.\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n-    /** Notifies listeners about an inventory item being seen on the network. */\n+    /**\n+     * Notifies listeners about an inventory item being seen on the network.\n+     *\n+     * Called on a background thread.\n+     */\n     virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n@@ -73,6 +119,9 @@ class CMainSignals {\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n+    friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n+\n+    void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n \n public:\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n@@ -82,9 +131,14 @@ class CMainSignals {\n     /** Call any remaining callbacks on the calling thread */\n     void FlushBackgroundCallbacks();\n \n+    /** Register with mempool to call TransactionRemovedFromMempool callbacks */\n+    void RegisterWithMempoolSignals(CTxMemPool& pool);\n+    /** Unregister with mempool */\n+    void UnregisterWithMempoolSignals(CTxMemPool& pool);\n+\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void SetBestChain(const CBlockLocator &);\n     void Inventory(const uint256 &);"
      },
      {
        "sha": "cba0538e7ed4343b40f5f12e8954de8ac17b3e5e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 1,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -455,6 +455,11 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n@@ -533,6 +538,11 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     UniValue jsonGroupings(UniValue::VARR);\n@@ -645,6 +655,11 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n        );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Bitcoin address\n@@ -707,6 +722,11 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Minimum confirmations\n@@ -780,6 +800,11 @@ UniValue getbalance(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     const UniValue& account_value = request.params[0];\n@@ -825,6 +850,11 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n                 \"Returns the server's total unconfirmed balance\\n\");\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     return ValueFromAmount(pwallet->GetUnconfirmedBalance());\n@@ -919,6 +949,11 @@ UniValue sendfrom(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = AccountFromValue(request.params[0]);\n@@ -1004,6 +1039,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (pwallet->GetBroadcastTransactions() && !g_connman) {\n@@ -1455,6 +1495,11 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, false);\n@@ -1495,6 +1540,11 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, true);\n@@ -1683,6 +1733,11 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = \"*\";\n@@ -1777,6 +1832,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     int nMinDepth = 1;\n@@ -1886,6 +1946,11 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n@@ -2019,6 +2084,11 @@ UniValue gettransaction(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n@@ -2081,6 +2151,11 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n@@ -2115,6 +2190,10 @@ UniValue backupwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strDest = request.params[0].get_str();\n@@ -2434,6 +2513,10 @@ UniValue lockunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n@@ -2593,6 +2676,11 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n         );\n \n     ObserveSafeMode();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2802,9 +2890,12 @@ UniValue listunspent(const JSONRPCRequest& request)\n             nMaximumCount = options[\"maximumCount\"].get_int64();\n     }\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n-    assert(pwallet != nullptr);\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     pwallet->AvailableCoins(vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n@@ -2912,6 +3003,10 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     ObserveSafeMode();\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     CCoinControl coinControl;\n     int changePosition = -1;\n     bool lockUnspents = false;\n@@ -3122,6 +3217,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n "
      },
      {
        "sha": "8eb84d397fe4f5d7ff821dbe699a021f3c90bb29",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 8,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -33,6 +33,7 @@\n #include \"wallet/fees.h\"\n \n #include <assert.h>\n+#include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n@@ -1217,6 +1218,19 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     LOCK2(cs_main, cs_wallet);\n     SyncTransaction(ptx);\n+\n+    auto it = mapWallet.find(ptx->GetHash());\n+    if (it != mapWallet.end()) {\n+        it->second.fInMempool = true;\n+    }\n+}\n+\n+void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+    LOCK(cs_wallet);\n+    auto it = mapWallet.find(ptx->GetHash());\n+    if (it != mapWallet.end()) {\n+        it->second.fInMempool = false;\n+    }\n }\n \n void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n@@ -1231,10 +1245,14 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n \n     for (const CTransactionRef& ptx : vtxConflicted) {\n         SyncTransaction(ptx);\n+        TransactionRemovedFromMempool(ptx);\n     }\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n+        TransactionRemovedFromMempool(pblock->vtx[i]);\n     }\n+\n+    m_last_block_processed = pindex;\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n@@ -1247,6 +1265,36 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        // We could also take cs_wallet here, and call m_last_block_processed\n+        // protected by cs_wallet instead of cs_main, but as long as we need\n+        // cs_main here anyway, its easier to just call it cs_main-protected.\n+        LOCK(cs_main);\n+        const CBlockIndex* initialChainTip = chainActive.Tip();\n+\n+        if (m_last_block_processed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+            return;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+}\n+\n+\n isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n@@ -1871,8 +1919,7 @@ CAmount CWalletTx::GetChange() const\n \n bool CWalletTx::InMempool() const\n {\n-    LOCK(mempool.cs);\n-    return mempool.exists(GetHash());\n+    return fInMempool;\n }\n \n bool CWalletTx::IsTrusted() const\n@@ -2980,14 +3027,18 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         // Track how many getdata requests our transaction gets\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n+        // Get the inserted-CWalletTx from mapWallet so that the\n+        // fInMempool flag is cached properly\n+        CWalletTx& wtx = mapWallet[wtxNew.GetHash()];\n+\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n+            if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n                 LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtxNew.RelayWalletTransaction(connman);\n+                wtx.RelayWalletTransaction(connman);\n             }\n         }\n     }\n@@ -3903,8 +3954,6 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n-    RegisterValidationInterface(walletInstance);\n-\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n@@ -3916,6 +3965,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         if (walletdb.ReadBestBlock(locator))\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n     }\n+\n+    walletInstance->m_last_block_processed = chainActive.Tip();\n+    RegisterValidationInterface(walletInstance);\n+\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n@@ -4059,8 +4112,15 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n+    // We must set fInMempool here - while it will be re-set to true by the\n+    // entered-mempool callback, if we did not there would be a race where a\n+    // user could call sendmoney in a loop and hit spurious out of funds errors\n+    // because we think that the transaction they just generated's change is\n+    // unavailable as we're not yet aware its in mempool.\n+    bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n+    fInMempool = ret;\n+    return ret;\n }"
      },
      {
        "sha": "c372f3ba19539a5b17dbec27a760e96451091a81",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/927a1d7d088e52aa079682e1d4f514222c0a2069/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/927a1d7d088e52aa079682e1d4f514222c0a2069/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=927a1d7d088e52aa079682e1d4f514222c0a2069",
        "patch": "@@ -248,8 +248,6 @@ class CMerkleTx\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -326,6 +324,7 @@ class CWalletTx : public CMerkleTx\n     mutable bool fImmatureWatchCreditCached;\n     mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n+    mutable bool fInMempool;\n     mutable CAmount nDebitCached;\n     mutable CAmount nCreditCached;\n     mutable CAmount nImmatureCreditCached;\n@@ -365,6 +364,7 @@ class CWalletTx : public CMerkleTx\n         fImmatureWatchCreditCached = false;\n         fAvailableWatchCreditCached = false;\n         fChangeCached = false;\n+        fInMempool = false;\n         nDebitCached = 0;\n         nCreditCached = 0;\n         nImmatureCreditCached = 0;\n@@ -469,6 +469,9 @@ class CWalletTx : public CMerkleTx\n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n     bool RelayWalletTransaction(CConnman* connman);\n \n+    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n+\n     std::set<uint256> GetConflicts() const;\n };\n \n@@ -718,6 +721,18 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::unique_ptr<CWalletDBWrapper> dbw;\n \n+    /**\n+     * The following is used to keep track of how far behind the wallet is\n+     * from the chain sync, and to allow clients to block on us being caught up.\n+     *\n+     * Note that this is *not* how far we've processed, we may need some rescan\n+     * to have seen all transactions in the chain, but is only used to track\n+     * live BlockConnected callbacks.\n+     *\n+     * Protected by cs_main (see BlockUntilSyncedToCurrentChain)\n+     */\n+    const CBlockIndex* m_last_block_processed;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -916,6 +931,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n+    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n@@ -1102,6 +1118,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause\n+     * deadlock\n+     */\n+    void BlockUntilSyncedToCurrentChain();\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYxYzZmNmE2ZmRhM2U2OGYzZjg0ZDI3YmNjOTk2YWY4NjFiY2Zk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T16:03:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T16:02:41Z"
      },
      "message": "qa: Add multiwallet prefix test",
      "tree": {
        "sha": "975975710373859c476857ee39ced8305ab29a87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/975975710373859c476857ee39ced8305ab29a87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "927a1d7d088e52aa079682e1d4f514222c0a2069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927a1d7d088e52aa079682e1d4f514222c0a2069",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/927a1d7d088e52aa079682e1d4f514222c0a2069"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b3a7b8d3b5823d8733e6e7acc1257ed385bd77e5",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
        "patch": "@@ -16,10 +16,10 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n+        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w']]\n \n     def run_test(self):\n-        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\"})\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n \n         self.stop_node(0)\n \n@@ -44,6 +44,7 @@ def run_test(self):\n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n         w2 = self.nodes[0].get_wallet_rpc(\"w2\")\n         w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n+        w4 = self.nodes[0].get_wallet_rpc(\"w\")\n         wallet_bad = self.nodes[0].get_wallet_rpc(\"bad\")\n \n         w1.generate(1)\n@@ -69,18 +70,22 @@ def run_test(self):\n         w3_name = w3.getwalletinfo()['walletname']\n         assert_equal(w3_name, \"w3\")\n \n-        assert_equal({\"w1\", \"w2\", \"w3\"}, {w1_name, w2_name, w3_name})\n+        w4_name = w4.getwalletinfo()['walletname']\n+        assert_equal(w4_name, \"w\")\n \n         w1.generate(101)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)\n         assert_equal(w3.getbalance(), 0)\n+        assert_equal(w4.getbalance(), 0)\n \n         w1.sendtoaddress(w2.getnewaddress(), 1)\n         w1.sendtoaddress(w3.getnewaddress(), 2)\n+        w1.sendtoaddress(w4.getnewaddress(), 3)\n         w1.generate(1)\n         assert_equal(w2.getbalance(), 1)\n         assert_equal(w3.getbalance(), 2)\n+        assert_equal(w4.getbalance(), 3)\n \n         batch = w1.batch([w1.getblockchaininfo.get_request(), w1.getwalletinfo.get_request()])\n         assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")"
      }
    ]
  },
  {
    "sha": "4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWQ4MTgwNjBlY2Y0YTM4YTAyYzhjYjQ4ZjZjYmM3OGQyZWU3NzA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T17:49:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T17:50:17Z"
      },
      "message": "Merge #10600: Make feebumper class stateless\n\naed1d90ac [wallet] Change feebumper from class to functions (Russell Yanofsky)\n37bdcca3c [refactor] Make feebumper namespace (Russell Yanofsky)\n7c4f00919 [trivial] Rename feebumper variables according to project code style (Russell Yanofsky)\n\nPull request description:\n\n  Make feebumper methods static and remove stored state in the class.\n\n  Having the results of feebumper calls persist in an object makes process\n  separation between Qt and wallet awkward, because it means the feebumper object\n  either has to be serialized back and forth between Qt and wallet processes\n  between fee bump calls, or that the feebumper object needs to stay alive in the\n  wallet process with an object reference passed back to Qt. It's simpler just to\n  have fee bumper calls return their results immediately instead of storing them\n  in an object with an extended lifetime.\n\n  In addition to making feebumper methods static, also:\n\n  - Move LOCK calls from Qt code to feebumper\n  - Move TransactionCanBeBumped implementation from Qt code to feebumper\n  - Rename CFeeBumper class to FeeBumper (every CFeeBumper reference had to be\n    updated in this PR anyway so this doesn't increase the size of the diff)\n\n  This change was originally part of https://github.com/bitcoin/bitcoin/pull/10244\n\nTree-SHA512: bf75e0c741b4e9c8912e66cc1dedf0ff715f77ea65fc33f7020d97d9099b0f6448f5852236dac63eea649de7d6fc03b0b21492e2c5140fb7560a39cf085506fd",
      "tree": {
        "sha": "bdf5346b3bbefe3792f221f8f5e4e838d9c87b0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdf5346b3bbefe3792f221f8f5e4e838d9c87b0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaDH5ZAAoJENLqSFDnUoslnJsP/17+H1hjnpUNff1oKmjjNaCq\nFoqSHHdDl3/YFP/h/BYh37RIEP6ehsFCm3Y1tJiAFcbl3mTqkgYj+2x4yzJTXQ8C\nSLOE5fCoPIFF/ugfI4PYLN3/HcYz4DEKVhyR2VoIwZp45NkefKjocOMjyoqQHQOa\npY9ncT1cP40TDs//tC/U8I0zOfbF6kIRYMljm4GjgYrmDqMlmi8Op3TBNRpn6bYt\nASVtLc4nAtXtcZZ2PSb9WNH7KuJMWQ1mctrGgJiGm8tQXquDtopaImJs7SClZ9pO\npriWtA45GL088mQuPTkBlH2ZeQyRJ6G7g5gezEaL6kpnYmGUxWVf6+so/+keZoJ0\nTOQnaSkOopXrrt2ak5imD3bQTrWALa+6nAdgCdyGiPpycwlTTH/fE9UIX/7jOtSf\nK1/wZnRg879rtrhdj46c+DmeL1vzlXUYPThtF+xCfPq2n7PT0xHBHbapQ4Sk+r8m\nM+3/B0R7CoPmASAUyNvuPa7SditeB44yGCvupsxsmRdCQQCbKml5iyZ6w4oRXIsa\n97ATnHHUdxe5WAkBvGNlvDzDDUxdcdsm+IDfERJaN4T3uOOz8LXdJ+XDQ4WCXKme\nrmN5x7K2TQzAsJgOn17EKfbVcGleHN/g04vgh7aVSNAWs7sk/TBYF+hmjDXCN544\nkcAoDr1nRB+4l+kffXqC\n=ws+l\n-----END PGP SIGNATURE-----",
        "payload": "tree bdf5346b3bbefe3792f221f8f5e4e838d9c87b0f\nparent 927a1d7d088e52aa079682e1d4f514222c0a2069\nparent aed1d90aca81c20c6e982ad567291f3812d47c8f\nauthor MarcoFalke <falke.marco@gmail.com> 1510768188 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510768217 -0500\n\nMerge #10600: Make feebumper class stateless\n\naed1d90ac [wallet] Change feebumper from class to functions (Russell Yanofsky)\n37bdcca3c [refactor] Make feebumper namespace (Russell Yanofsky)\n7c4f00919 [trivial] Rename feebumper variables according to project code style (Russell Yanofsky)\n\nPull request description:\n\n  Make feebumper methods static and remove stored state in the class.\n\n  Having the results of feebumper calls persist in an object makes process\n  separation between Qt and wallet awkward, because it means the feebumper object\n  either has to be serialized back and forth between Qt and wallet processes\n  between fee bump calls, or that the feebumper object needs to stay alive in the\n  wallet process with an object reference passed back to Qt. It's simpler just to\n  have fee bumper calls return their results immediately instead of storing them\n  in an object with an extended lifetime.\n\n  In addition to making feebumper methods static, also:\n\n  - Move LOCK calls from Qt code to feebumper\n  - Move TransactionCanBeBumped implementation from Qt code to feebumper\n  - Rename CFeeBumper class to FeeBumper (every CFeeBumper reference had to be\n    updated in this PR anyway so this doesn't increase the size of the diff)\n\n  This change was originally part of https://github.com/bitcoin/bitcoin/pull/10244\n\nTree-SHA512: bf75e0c741b4e9c8912e66cc1dedf0ff715f77ea65fc33f7020d97d9099b0f6448f5852236dac63eea649de7d6fc03b0b21492e2c5140fb7560a39cf085506fd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "927a1d7d088e52aa079682e1d4f514222c0a2069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927a1d7d088e52aa079682e1d4f514222c0a2069",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/927a1d7d088e52aa079682e1d4f514222c0a2069"
      },
      {
        "sha": "aed1d90aca81c20c6e982ad567291f3812d47c8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aed1d90aca81c20c6e982ad567291f3812d47c8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aed1d90aca81c20c6e982ad567291f3812d47c8f"
      }
    ],
    "stats": {
      "total": 374,
      "additions": 179,
      "deletions": 195
    },
    "files": [
      {
        "sha": "c5cca0bff286019ab0116d167347c8376d9e15b0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 30,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "patch": "@@ -659,45 +659,39 @@ bool WalletModel::abandonTransaction(uint256 hash) const\n \n bool WalletModel::transactionCanBeBumped(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    const CWalletTx *wtx = wallet->GetWalletTx(hash);\n-    return wtx && SignalsOptInRBF(*(wtx->tx)) && !wtx->mapValue.count(\"replaced_by_txid\");\n+    return feebumper::TransactionCanBeBumped(wallet, hash);\n }\n \n bool WalletModel::bumpFee(uint256 hash)\n {\n-    std::unique_ptr<CFeeBumper> feeBump;\n-    {\n-        CCoinControl coin_control;\n-        coin_control.signalRbf = true;\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, coin_control, 0));\n-    }\n-    if (feeBump->getResult() != BumpFeeResult::OK)\n-    {\n+    CCoinControl coin_control;\n+    coin_control.signalRbf = true;\n+    std::vector<std::string> errors;\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    if (feebumper::CreateTransaction(wallet, hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx) != feebumper::Result::OK) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n-            (feeBump->getErrors().size() ? QString::fromStdString(feeBump->getErrors()[0]) : \"\") +\")\");\n+            (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n          return false;\n     }\n \n     // allow a user based fee verification\n     QString questionString = tr(\"Do you want to increase the fee?\");\n     questionString.append(\"<br />\");\n-    CAmount oldFee = feeBump->getOldFee();\n-    CAmount newFee = feeBump->getNewFee();\n     questionString.append(\"<table style=\\\"text-align: left;\\\">\");\n     questionString.append(\"<tr><td>\");\n     questionString.append(tr(\"Current fee:\"));\n     questionString.append(\"</td><td>\");\n-    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), oldFee));\n+    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), old_fee));\n     questionString.append(\"</td></tr><tr><td>\");\n     questionString.append(tr(\"Increase:\"));\n     questionString.append(\"</td><td>\");\n-    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), newFee - oldFee));\n+    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), new_fee - old_fee));\n     questionString.append(\"</td></tr><tr><td>\");\n     questionString.append(tr(\"New fee:\"));\n     questionString.append(\"</td><td>\");\n-    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), newFee));\n+    questionString.append(BitcoinUnits::formatHtmlWithUnit(getOptionsModel()->getDisplayUnit(), new_fee));\n     questionString.append(\"</td></tr></table>\");\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm fee bump\"), questionString);\n     confirmationDialog.exec();\n@@ -715,23 +709,15 @@ bool WalletModel::bumpFee(uint256 hash)\n     }\n \n     // sign bumped transaction\n-    bool res = false;\n-    {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        res = feeBump->signTransaction(wallet);\n-    }\n-    if (!res) {\n+    if (!feebumper::SignTransaction(wallet, mtx)) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Can't sign transaction.\"));\n         return false;\n     }\n     // commit the bumped transaction\n-    {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        res = feeBump->commit(wallet);\n-    }\n-    if(!res) {\n+    uint256 txid;\n+    if (feebumper::CommitTransaction(wallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Could not commit transaction\") + \"<br />(\" +\n-            QString::fromStdString(feeBump->getErrors()[0])+\")\");\n+            QString::fromStdString(errors[0])+\")\");\n          return false;\n     }\n     return true;"
      },
      {
        "sha": "aaddd47de8b031daaa9eb05046f390ff4982f217",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 103,
        "deletions": 107,
        "changes": 210,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "patch": "@@ -23,123 +23,122 @@\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<CInputCoin> vCoins;\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n     // wallet, with a valid index into the vout array.\n     for (auto& input : tx.vin) {\n-        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n-        assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const auto mi = wallet->mapWallet.find(input.prevout.hash);\n+        assert(mi != wallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n         vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n     }\n-    if (!pWallet->DummySignTx(txNew, vCoins)) {\n+    if (!wallet->DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n         // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionSize(txNew);\n }\n \n-bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx) {\n-    if (pWallet->HasWalletSpend(wtx.GetHash())) {\n-        vErrors.push_back(\"Transaction has descendants in the wallet\");\n-        currentResult = BumpFeeResult::INVALID_PARAMETER;\n-        return false;\n+//! Check whether transaction has descendant in wallet or mempool, or has been\n+//! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n+{\n+    if (wallet->HasWalletSpend(wtx.GetHash())) {\n+        errors.push_back(\"Transaction has descendants in the wallet\");\n+        return feebumper::Result::INVALID_PARAMETER;\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it_mp = mempool.mapTx.find(wtx.GetHash());\n         if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n-            vErrors.push_back(\"Transaction has descendants in the mempool\");\n-            currentResult = BumpFeeResult::INVALID_PARAMETER;\n-            return false;\n+            errors.push_back(\"Transaction has descendants in the mempool\");\n+            return feebumper::Result::INVALID_PARAMETER;\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        vErrors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return false;\n+        errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        return feebumper::Result::WALLET_ERROR;\n     }\n-    return true;\n+    return feebumper::Result::OK;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee)\n-    :\n-    txid(std::move(txidIn)),\n-    nOldFee(0),\n-    nNewFee(0)\n+namespace feebumper {\n+\n+bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid)\n {\n-    vErrors.clear();\n-    bumpedTxid.SetNull();\n-    AssertLockHeld(pWallet->cs_wallet);\n-    auto it = pWallet->mapWallet.find(txid);\n-    if (it == pWallet->mapWallet.end()) {\n-        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n-        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n-        return;\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    const CWalletTx* wtx = wallet->GetWalletTx(txid);\n+    return wtx && SignalsOptInRBF(*wtx->tx) && !wtx->mapValue.count(\"replaced_by_txid\");\n+}\n+\n+Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n+                         CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+{\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    errors.clear();\n+    auto it = wallet->mapWallet.find(txid);\n+    if (it == wallet->mapWallet.end()) {\n+        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        return Result::INVALID_ADDRESS_OR_KEY;\n     }\n     const CWalletTx& wtx = it->second;\n \n-    if (!preconditionChecks(pWallet, wtx)) {\n-        return;\n+    Result result = PreconditionChecks(wallet, wtx, errors);\n+    if (result != Result::OK) {\n+        return result;\n     }\n \n     if (!SignalsOptInRBF(*wtx.tx)) {\n-        vErrors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return;\n+        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        return Result::WALLET_ERROR;\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        vErrors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return;\n+        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        return Result::WALLET_ERROR;\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!pWallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n-        vErrors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return;\n+    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        return Result::WALLET_ERROR;\n     }\n \n     // figure out which output was change\n     // if there was no change output or multiple change outputs, fail\n     int nOutput = -1;\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (pWallet->IsChange(wtx.tx->vout[i])) {\n+        if (wallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                vErrors.push_back(\"Transaction has multiple change outputs\");\n-                currentResult = BumpFeeResult::WALLET_ERROR;\n-                return;\n+                errors.push_back(\"Transaction has multiple change outputs\");\n+                return Result::WALLET_ERROR;\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        vErrors.push_back(\"Transaction does not have a change output\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return;\n+        errors.push_back(\"Transaction does not have a change output\");\n+        return Result::WALLET_ERROR;\n     }\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, pWallet);\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n     if (maxNewTxSize < 0) {\n-        vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n-        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n-        return;\n+        errors.push_back(\"Transaction contains inputs that cannot be signed\");\n+        return Result::INVALID_ADDRESS_OR_KEY;\n     }\n \n     // calculate the old fee and fee-rate\n-    nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n-    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(old_fee, txSize);\n     CFeeRate nNewFeeRate;\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n@@ -149,26 +148,24 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         walletIncrementalRelayFee = ::incrementalRelayFee;\n     }\n \n-    if (totalFee > 0) {\n+    if (total_fee > 0) {\n         CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n-        if (totalFee < minTotalFee) {\n-            vErrors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+        if (total_fee < minTotalFee) {\n+            errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-            currentResult = BumpFeeResult::INVALID_PARAMETER;\n-            return;\n+            return Result::INVALID_PARAMETER;\n         }\n         CAmount requiredFee = GetRequiredFee(maxNewTxSize);\n-        if (totalFee < requiredFee) {\n-            vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+        if (total_fee < requiredFee) {\n+            errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n-            currentResult = BumpFeeResult::INVALID_PARAMETER;\n-            return;\n+            return Result::INVALID_PARAMETER;\n         }\n-        nNewFee = totalFee;\n-        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+        new_fee = total_fee;\n+        nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        nNewFee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n-        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n+        new_fee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n         // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n@@ -177,53 +174,50 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         // add 1 satoshi to the result, because it may have been rounded down.\n         if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n             nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+            new_fee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n-     if (nNewFee > maxTxFee) {\n-         vErrors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                               FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n-         currentResult = BumpFeeResult::WALLET_ERROR;\n-         return;\n+     if (new_fee > maxTxFee) {\n+         errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                               FormatMoney(new_fee), FormatMoney(maxTxFee)));\n+         return Result::WALLET_ERROR;\n      }\n \n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    // moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        vErrors.push_back(strprintf(\n+        errors.push_back(strprintf(\n             \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \"\n             \"the totalFee value should be at least %s or the settxfee value should be at least %s to add transaction\",\n             FormatMoney(nNewFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)),\n             FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return;\n+        return Result::WALLET_ERROR;\n     }\n \n     // Now modify the output to increase the fee.\n     // If the output is not large enough to pay the fee, fail.\n-    CAmount nDelta = nNewFee - nOldFee;\n+    CAmount nDelta = new_fee - old_fee;\n     assert(nDelta > 0);\n     mtx =  *wtx.tx;\n     CTxOut* poutput = &(mtx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        vErrors.push_back(\"Change output is too small to bump the fee\");\n-        currentResult = BumpFeeResult::WALLET_ERROR;\n-        return;\n+        errors.push_back(\"Change output is too small to bump the fee\");\n+        return Result::WALLET_ERROR;\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n     if (poutput->nValue <= GetDustThreshold(*poutput, ::dustRelayFee)) {\n         LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n-        nNewFee += poutput->nValue;\n+        new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);\n     }\n \n@@ -234,64 +228,66 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         }\n     }\n \n-    currentResult = BumpFeeResult::OK;\n+    return Result::OK;\n }\n \n-bool CFeeBumper::signTransaction(CWallet *pWallet)\n-{\n-     return pWallet->SignTransaction(mtx);\n+bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx) {\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    return wallet->SignTransaction(mtx);\n }\n \n-bool CFeeBumper::commit(CWallet *pWallet)\n+Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<std::string>& errors, uint256& bumped_txid)\n {\n-    AssertLockHeld(pWallet->cs_wallet);\n-    if (!vErrors.empty() || currentResult != BumpFeeResult::OK) {\n-        return false;\n+    LOCK2(cs_main, wallet->cs_wallet);\n+    if (!errors.empty()) {\n+        return Result::MISC_ERROR;\n     }\n-    auto it = txid.IsNull() ? pWallet->mapWallet.end() : pWallet->mapWallet.find(txid);\n-    if (it == pWallet->mapWallet.end()) {\n-        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n-        currentResult = BumpFeeResult::MISC_ERROR;\n-        return false;\n+    auto it = txid.IsNull() ? wallet->mapWallet.end() : wallet->mapWallet.find(txid);\n+    if (it == wallet->mapWallet.end()) {\n+        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        return Result::MISC_ERROR;\n     }\n     CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n-    if (!preconditionChecks(pWallet, oldWtx)) {\n-        return false;\n+    Result result = PreconditionChecks(wallet, oldWtx, errors);\n+    if (result != Result::OK) {\n+        return result;\n     }\n \n-    CWalletTx wtxBumped(pWallet, MakeTransactionRef(std::move(mtx)));\n+    CWalletTx wtxBumped(wallet, MakeTransactionRef(std::move(mtx)));\n     // commit/broadcast the tx\n-    CReserveKey reservekey(pWallet);\n+    CReserveKey reservekey(wallet);\n     wtxBumped.mapValue = oldWtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n     wtxBumped.vOrderForm = oldWtx.vOrderForm;\n     wtxBumped.strFromAccount = oldWtx.strFromAccount;\n     wtxBumped.fTimeReceivedIsTxTime = true;\n     wtxBumped.fFromMe = true;\n     CValidationState state;\n-    if (!pWallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+    if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n-        vErrors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n-        return false;\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n+        return Result::WALLET_ERROR;\n     }\n \n-    bumpedTxid = wtxBumped.GetHash();\n+    bumped_txid = wtxBumped.GetHash();\n     if (state.IsInvalid()) {\n         // This can happen if the mempool rejected the transaction.  Report\n         // what happened in the \"errors\" response.\n-        vErrors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n+        errors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n     }\n \n     // mark the original tx as bumped\n-    if (!pWallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n+    if (!wallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        vErrors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n+        errors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n     }\n-    return true;\n+    return Result::OK;\n }\n \n+} // namespace feebumper\n+"
      },
      {
        "sha": "8eec30440cc7d5b83364ef3e39216c0483f853f6",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 32,
        "deletions": 35,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "patch": "@@ -13,7 +13,9 @@ class uint256;\n class CCoinControl;\n enum class FeeEstimateMode;\n \n-enum class BumpFeeResult\n+namespace feebumper {\n+\n+enum class Result\n {\n     OK,\n     INVALID_ADDRESS_OR_KEY,\n@@ -23,39 +25,34 @@ enum class BumpFeeResult\n     MISC_ERROR,\n };\n \n-class CFeeBumper\n-{\n-public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee);\n-    BumpFeeResult getResult() const { return currentResult; }\n-    const std::vector<std::string>& getErrors() const { return vErrors; }\n-    CAmount getOldFee() const { return nOldFee; }\n-    CAmount getNewFee() const { return nNewFee; }\n-    uint256 getBumpedTxId() const { return bumpedTxid; }\n-\n-    /* signs the new transaction,\n-     * returns false if the tx couldn't be found or if it was\n-     * impossible to create the signature(s)\n-     */\n-    bool signTransaction(CWallet *pWallet);\n-\n-    /* commits the fee bump,\n-     * returns true, in case of CWallet::CommitTransaction was successful\n-     * but, eventually sets vErrors if the tx could not be added to the mempool (will try later)\n-     * or if the old transaction could not be marked as replaced\n-     */\n-    bool commit(CWallet *pWalletNonConst);\n-\n-private:\n-    bool preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx);\n-\n-    const uint256 txid;\n-    uint256 bumpedTxid;\n-    CMutableTransaction mtx;\n-    std::vector<std::string> vErrors;\n-    BumpFeeResult currentResult;\n-    CAmount nOldFee;\n-    CAmount nNewFee;\n-};\n+//! Return whether transaction can be bumped.\n+bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid);\n+\n+//! Create bumpfee transaction.\n+Result CreateTransaction(const CWallet* wallet,\n+                         const uint256& txid,\n+                         const CCoinControl& coin_control,\n+                         CAmount total_fee,\n+                         std::vector<std::string>& errors,\n+                         CAmount& old_fee,\n+                         CAmount& new_fee,\n+                         CMutableTransaction& mtx);\n+\n+//! Sign the new transaction,\n+//! @return false if the tx couldn't be found or if it was\n+//! impossible to create the signature(s)\n+bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx);\n+\n+//! Commit the bumpfee transaction.\n+//! @return success in case of CWallet::CommitTransaction was successful,\n+//! but sets errors if the tx could not be added to the mempool (will try later)\n+//! or if the old transaction could not be marked as replaced.\n+Result CommitTransaction(CWallet* wallet,\n+                         const uint256& txid,\n+                         CMutableTransaction&& mtx,\n+                         std::vector<std::string>& errors,\n+                         uint256& bumped_txid);\n+\n+} // namespace feebumper\n \n #endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "b081803be6e762b489f3366242d3a2f95593a2b1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 23,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "patch": "@@ -3224,45 +3224,50 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n-    BumpFeeResult res = feeBump.getResult();\n-    if (res != BumpFeeResult::OK)\n-    {\n+\n+    std::vector<std::string> errors;\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    feebumper::Result res = feebumper::CreateTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    if (res != feebumper::Result::OK) {\n         switch(res) {\n-            case BumpFeeResult::INVALID_ADDRESS_OR_KEY:\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, feeBump.getErrors()[0]);\n+            case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0]);\n                 break;\n-            case BumpFeeResult::INVALID_REQUEST:\n-                throw JSONRPCError(RPC_INVALID_REQUEST, feeBump.getErrors()[0]);\n+            case feebumper::Result::INVALID_REQUEST:\n+                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0]);\n                 break;\n-            case BumpFeeResult::INVALID_PARAMETER:\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, feeBump.getErrors()[0]);\n+            case feebumper::Result::INVALID_PARAMETER:\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0]);\n                 break;\n-            case BumpFeeResult::WALLET_ERROR:\n-                throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+            case feebumper::Result::WALLET_ERROR:\n+                throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n                 break;\n             default:\n-                throw JSONRPCError(RPC_MISC_ERROR, feeBump.getErrors()[0]);\n+                throw JSONRPCError(RPC_MISC_ERROR, errors[0]);\n                 break;\n         }\n     }\n \n     // sign bumped transaction\n-    if (!feeBump.signTransaction(pwallet)) {\n+    if (!feebumper::SignTransaction(pwallet, mtx)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n     // commit the bumped transaction\n-    if(!feeBump.commit(pwallet)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+    uint256 txid;\n+    if (feebumper::CommitTransaction(pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", feeBump.getBumpedTxId().GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(feeBump.getOldFee())));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(feeBump.getNewFee())));\n-    UniValue errors(UniValue::VARR);\n-    for (const std::string& err: feeBump.getErrors())\n-        errors.push_back(err);\n-    result.push_back(Pair(\"errors\", errors));\n+    result.push_back(Pair(\"txid\", txid.GetHex()));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(old_fee)));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(new_fee)));\n+    UniValue result_errors(UniValue::VARR);\n+    for (const std::string& error : errors) {\n+        result_errors.push_back(error);\n+    }\n+    result.push_back(Pair(\"errors\", result_errors));\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "1a445343f6c045d0d24dd34fc957534cc487f7f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTQ0NTM0M2Y2YzA0NWQwZDI0ZGQzNGZjOTU3NTM0Y2M0ODdmN2Y4",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-10T00:57:53Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:01Z"
      },
      "message": "scripted-diff: Replace #include \"\" with #include <> (ryanofsky)\n\n-BEGIN VERIFY SCRIPT-\nfor f in \\\n  src/*.cpp \\\n  src/*.h \\\n  src/bench/*.cpp \\\n  src/bench/*.h \\\n  src/compat/*.cpp \\\n  src/compat/*.h \\\n  src/consensus/*.cpp \\\n  src/consensus/*.h \\\n  src/crypto/*.cpp \\\n  src/crypto/*.h \\\n  src/crypto/ctaes/*.h \\\n  src/policy/*.cpp \\\n  src/policy/*.h \\\n  src/primitives/*.cpp \\\n  src/primitives/*.h \\\n  src/qt/*.cpp \\\n  src/qt/*.h \\\n  src/qt/test/*.cpp \\\n  src/qt/test/*.h \\\n  src/rpc/*.cpp \\\n  src/rpc/*.h \\\n  src/script/*.cpp \\\n  src/script/*.h \\\n  src/support/*.cpp \\\n  src/support/*.h \\\n  src/support/allocators/*.h \\\n  src/test/*.cpp \\\n  src/test/*.h \\\n  src/wallet/*.cpp \\\n  src/wallet/*.h \\\n  src/wallet/test/*.cpp \\\n  src/wallet/test/*.h \\\n  src/zmq/*.cpp \\\n  src/zmq/*.h\ndo\n  base=${f%/*}/ relbase=${base#src/} sed -i \"s:#include \\\"\\(.*\\)\\\"\\(.*\\):if test -e \\$base'\\\\1'; then echo \\\"#include <\\\"\\$relbase\\\"\\\\1>\\\\2\\\"; else echo \\\"#include <\\\\1>\\\\2\\\"; fi:e\" $f\ndone\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e849875730260fd67809155737d3f1b7ca3b180f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e849875730260fd67809155737d3f1b7ca3b180f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a445343f6c045d0d24dd34fc957534cc487f7f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a445343f6c045d0d24dd34fc957534cc487f7f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a445343f6c045d0d24dd34fc957534cc487f7f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a445343f6c045d0d24dd34fc957534cc487f7f8/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708"
      }
    ],
    "stats": {
      "total": 4092,
      "additions": 2046,
      "deletions": 2046
    },
    "files": [
      {
        "sha": "0f9ccf1e9a1220293b5800a8d677fb578210fda6",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,17 +3,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"addrdb.h\"\n-\n-#include \"addrman.h\"\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"fs.h\"\n-#include \"hash.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n+#include <addrdb.h>\n+\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <tinyformat.h>\n+#include <util.h>\n \n namespace {\n "
      },
      {
        "sha": "098da4240e46ca7cf2194f978995201990567169",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_ADDRDB_H\n #define BITCOIN_ADDRDB_H\n \n-#include \"fs.h\"\n-#include \"serialize.h\"\n+#include <fs.h>\n+#include <serialize.h>\n \n #include <string>\n #include <map>"
      },
      {
        "sha": "ddcdf4c2f4ae8043426ec1d7ef3313928cef7484",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"addrman.h\"\n+#include <addrman.h>\n \n-#include \"hash.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <hash.h>\n+#include <serialize.h>\n+#include <streams.h>\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {"
      },
      {
        "sha": "b06b272962062d8009d298b8cf1d0d727e352c8f",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include \"netaddress.h\"\n-#include \"protocol.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n-#include \"timedata.h\"\n-#include \"util.h\"\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <sync.h>\n+#include <timedata.h>\n+#include <util.h>\n \n #include <map>\n #include <set>"
      },
      {
        "sha": "738224fb704049298dd4594e8cfe16714a56abd4",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"arith_uint256.h\"\n+#include <arith_uint256.h>\n \n-#include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n-#include \"crypto/common.h\"\n+#include <uint256.h>\n+#include <utilstrencodings.h>\n+#include <crypto/common.h>\n \n #include <stdio.h>\n #include <string.h>"
      },
      {
        "sha": "cd087e799787b453a4cbf9bdf166a630ee458f04",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n+#include <base58.h>\n \n-#include \"bech32.h\"\n-#include \"hash.h\"\n-#include \"script/script.h\"\n-#include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n+#include <bech32.h>\n+#include <hash.h>\n+#include <script/script.h>\n+#include <uint256.h>\n+#include <utilstrencodings.h>\n \n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>"
      },
      {
        "sha": "fee79f02bf6c8ba2a92cff54c75de6de25ca2711",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -14,11 +14,11 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include \"chainparams.h\"\n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"script/standard.h\"\n-#include \"support/allocators/zeroafterfree.h\"\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <support/allocators/zeroafterfree.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "274782e467c45aae58559981c5e9bdd3850df6fb",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bech32.h\"\n+#include <bech32.h>\n \n namespace\n {"
      },
      {
        "sha": "536e450940a503b1a268b483118a916f8080e651",
        "filename": "src/bench/Examples.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/Examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/Examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/Examples.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"validation.h\"\n-#include \"utiltime.h\"\n+#include <bench/bench.h>\n+#include <validation.h>\n+#include <utiltime.h>\n \n // Sanity test: this should loop ten times, and\n // min/max/average should be close to 100ms."
      },
      {
        "sha": "8f6d07ac166d44008ea8990a7b0365546a20fcc8",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"validation.h\"\n-#include \"base58.h\"\n+#include <validation.h>\n+#include <base58.h>\n \n #include <array>\n #include <vector>"
      },
      {
        "sha": "148245281469090a31e13f3e02fb66a57d0fe511",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"perf.h\"\n+#include <bench/bench.h>\n+#include <bench/perf.h>\n \n #include <assert.h>\n #include <iostream>"
      },
      {
        "sha": "84e51d809a2fcff509b2fdab718a84d1b77c05a4",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"crypto/sha256.h\"\n-#include \"key.h\"\n-#include \"validation.h\"\n-#include \"util.h\"\n-#include \"random.h\"\n+#include <crypto/sha256.h>\n+#include <key.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <random.h>\n \n int\n main(int argc, char** argv)"
      },
      {
        "sha": "89ba3d3d21f628d8beaa610313c9251fa6b8ac42",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"coins.h\"\n-#include \"policy/policy.h\"\n-#include \"wallet/crypter.h\"\n+#include <bench/bench.h>\n+#include <coins.h>\n+#include <policy/policy.h>\n+#include <wallet/crypter.h>\n \n #include <vector>\n "
      },
      {
        "sha": "9533b3c7114b71261ac9ec7d701374ae719773c7",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,15 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"chainparams.h\"\n-#include \"validation.h\"\n-#include \"streams.h\"\n-#include \"consensus/validation.h\"\n+#include <chainparams.h>\n+#include <validation.h>\n+#include <streams.h>\n+#include <consensus/validation.h>\n \n namespace block_bench {\n-#include \"bench/data/block413567.raw.h\"\n+#include <bench/data/block413567.raw.h>\n } // namespace block_bench\n \n // These are the two major time-sinks which happen after we have fully received"
      },
      {
        "sha": "7e63e820db1e7be6f89ef7b5f3957ee61b6f5519",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"util.h\"\n-#include \"validation.h\"\n-#include \"checkqueue.h\"\n-#include \"prevector.h\"\n+#include <bench/bench.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <checkqueue.h>\n+#include <prevector.h>\n #include <vector>\n #include <boost/thread/thread.hpp>\n-#include \"random.h\"\n+#include <random.h>\n \n \n // This Benchmark tests the CheckQueue with the lightest"
      },
      {
        "sha": "ff57f8817006d01b5c0eddb212914419d38ef4fe",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"wallet/wallet.h\"\n+#include <bench/bench.h>\n+#include <wallet/wallet.h>\n \n #include <set>\n "
      },
      {
        "sha": "b37b5cad6244d32fd4cd5b1c13718279a3a5c5b1",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,16 +4,16 @@\n \n #include <iostream>\n \n-#include \"bench.h\"\n-#include \"bloom.h\"\n-#include \"hash.h\"\n-#include \"random.h\"\n-#include \"uint256.h\"\n-#include \"utiltime.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha256.h\"\n-#include \"crypto/sha512.h\"\n+#include <bench/bench.h>\n+#include <bloom.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <utiltime.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <crypto/sha512.h>\n \n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;"
      },
      {
        "sha": "b0bfa9514462f3aefada2d34aa9024055dff05c5",
        "filename": "src/bench/lockedpool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"support/lockedpool.h\"\n+#include <support/lockedpool.h>\n \n #include <iostream>\n #include <vector>"
      },
      {
        "sha": "eda6edbb235004dea4a45bdccd9e1a928ad85ce6",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"policy/policy.h\"\n-#include \"txmempool.h\"\n+#include <bench/bench.h>\n+#include <policy/policy.h>\n+#include <txmempool.h>\n \n #include <list>\n #include <vector>"
      },
      {
        "sha": "4045670a3110038afca2a71fefdd13caf8738771",
        "filename": "src/bench/perf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"perf.h\"\n+#include <bench/perf.h>\n \n #if defined(__i386__) || defined(__x86_64__)\n "
      },
      {
        "sha": "de7ecab73758a3882143175758af46167d159855",
        "filename": "src/bench/prevector_destructor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/prevector_destructor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/prevector_destructor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector_destructor.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"prevector.h\"\n+#include <bench/bench.h>\n+#include <prevector.h>\n \n static void PrevectorDestructor(benchmark::State& state)\n {"
      },
      {
        "sha": "452099b80016eceb755123bcb4aeda95b29b6905",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <iostream>\n \n-#include \"bench.h\"\n-#include \"bloom.h\"\n+#include <bench/bench.h>\n+#include <bloom.h>\n \n static void RollingBloom(benchmark::State& state)\n {"
      },
      {
        "sha": "bfa5806c9d4d1a40cc6b9cffc40e520f2f4166a2",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"key.h\"\n+#include <bench/bench.h>\n+#include <key.h>\n #if defined(HAVE_CONSENSUS_LIB)\n-#include \"script/bitcoinconsensus.h\"\n+#include <script/bitcoinconsensus.h>\n #endif\n-#include \"script/script.h\"\n-#include \"script/sign.h\"\n-#include \"streams.h\"\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <streams.h>\n \n #include <array>\n "
      },
      {
        "sha": "5e3b76a295ea68b432ff96d56ed3770a788489a3",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,22 +4,22 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"chainparamsbase.h\"\n-#include \"clientversion.h\"\n-#include \"fs.h\"\n-#include \"rpc/client.h\"\n-#include \"rpc/protocol.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <chainparamsbase.h>\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <rpc/client.h>\n+#include <rpc/protocol.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <stdio.h>\n \n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n-#include \"support/events.h\"\n+#include <support/events.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "c9223dbf10b2bf16a8fb59cd8a22c02d4ee9bfda",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,24 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"base58.h\"\n-#include \"clientversion.h\"\n-#include \"coins.h\"\n-#include \"consensus/consensus.h\"\n-#include \"core_io.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"policy/rbf.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"script/sign.h\"\n+#include <base58.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n #include <univalue.h>\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n #include <stdio.h>\n "
      },
      {
        "sha": "bc23912d2b098e4b8fccca4e55857a201cbe81fd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,21 +4,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"compat.h\"\n-#include \"fs.h\"\n-#include \"rpc/server.h\"\n-#include \"init.h\"\n-#include \"noui.h\"\n-#include \"scheduler.h\"\n-#include \"util.h\"\n-#include \"httpserver.h\"\n-#include \"httprpc.h\"\n-#include \"utilstrencodings.h\"\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <compat.h>\n+#include <fs.h>\n+#include <rpc/server.h>\n+#include <init.h>\n+#include <noui.h>\n+#include <scheduler.h>\n+#include <util.h>\n+#include <httpserver.h>\n+#include <httprpc.h>\n+#include <utilstrencodings.h>\n \n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "6ff4d97bf433d33eb92bcc75973d846b01112000",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,16 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"blockencodings.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/validation.h\"\n-#include \"chainparams.h\"\n-#include \"hash.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"txmempool.h\"\n-#include \"validation.h\"\n-#include \"util.h\"\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <consensus/validation.h>\n+#include <chainparams.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <util.h>\n \n #include <unordered_map>\n "
      },
      {
        "sha": "d034bb3080fbbe6358aae892a96510de5b80870c",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_BLOCK_ENCODINGS_H\n #define BITCOIN_BLOCK_ENCODINGS_H\n \n-#include \"primitives/block.h\"\n+#include <primitives/block.h>\n \n #include <memory>\n "
      },
      {
        "sha": "11ea099637bebb53cef8687e9c25e29e3552bd5c",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bloom.h\"\n-\n-#include \"primitives/transaction.h\"\n-#include \"hash.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n+#include <bloom.h>\n+\n+#include <primitives/transaction.h>\n+#include <hash.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <random.h>\n+#include <streams.h>\n \n #include <math.h>\n #include <stdlib.h>"
      },
      {
        "sha": "d29a8dcd6f88d8ab622d43a545dac7790893dc1e",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_BLOOM_H\n #define BITCOIN_BLOOM_H\n \n-#include \"serialize.h\"\n+#include <serialize.h>\n \n #include <vector>\n "
      },
      {
        "sha": "9f40c41fde5d5ddac690a5950c99c8605568386d",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n+#include <chain.h>\n \n /**\n  * CChain implementation"
      },
      {
        "sha": "ca1900c22bd54ad30acc81645564ae8bb055ff6b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_CHAIN_H\n #define BITCOIN_CHAIN_H\n \n-#include \"arith_uint256.h\"\n-#include \"primitives/block.h\"\n-#include \"pow.h\"\n-#include \"tinyformat.h\"\n-#include \"uint256.h\"\n+#include <arith_uint256.h>\n+#include <primitives/block.h>\n+#include <pow.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n \n #include <vector>\n "
      },
      {
        "sha": "e753c5ccffe4f5d290f2f47b54d39b8506d20365",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"consensus/merkle.h\"\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n \n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <tinyformat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <assert.h>\n \n-#include \"chainparamsseeds.h\"\n+#include <chainparamsseeds.h>\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {"
      },
      {
        "sha": "0d82a998b199df7f74a872f3975eecea0ca6c8d9",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n-#include \"chainparamsbase.h\"\n-#include \"consensus/params.h\"\n-#include \"primitives/block.h\"\n-#include \"protocol.h\"\n+#include <chainparamsbase.h>\n+#include <consensus/params.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n \n #include <memory>\n #include <vector>"
      },
      {
        "sha": "a7e87faee32805638d9ea5a8688fb93d32cc832b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparamsbase.h\"\n+#include <chainparamsbase.h>\n \n-#include \"tinyformat.h\"\n-#include \"util.h\"\n+#include <tinyformat.h>\n+#include <util.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "2ef4dd833042f79a6dc596d0882323881696b8db",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"checkpoints.h\"\n+#include <checkpoints.h>\n \n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"reverse_iterator.h\"\n-#include \"validation.h\"\n-#include \"uint256.h\"\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <reverse_iterator.h>\n+#include <validation.h>\n+#include <uint256.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "df97a674a825f24c10fe155e057d27eaf2ec966d",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CHECKPOINTS_H\n #define BITCOIN_CHECKPOINTS_H\n \n-#include \"uint256.h\"\n+#include <uint256.h>\n \n #include <map>\n "
      },
      {
        "sha": "08de336079da0e3678fa48bcdd20002c34963f32",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CHECKQUEUE_H\n #define BITCOIN_CHECKQUEUE_H\n \n-#include \"sync.h\"\n+#include <sync.h>\n \n #include <algorithm>\n #include <vector>"
      },
      {
        "sha": "f964a5022767d1f22e6361d1854624cbd17c79c1",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"clientversion.h\"\n+#include <clientversion.h>\n \n-#include \"tinyformat.h\"\n+#include <tinyformat.h>\n \n #include <string>\n \n@@ -39,7 +39,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n //! First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n-#include \"build.h\"\n+#include <build.h>\n #endif\n \n //! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$"
      },
      {
        "sha": "3a3d117d53c4910fe6be6e61e494dd61bc3ac0a5",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_CLIENTVERSION_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif //HAVE_CONFIG_H\n \n // Check that required client information is defined"
      },
      {
        "sha": "03138ef878649b248b53f7cd37dd1096aa665344",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coins.h\"\n+#include <coins.h>\n \n-#include \"consensus/consensus.h\"\n-#include \"memusage.h\"\n-#include \"random.h\"\n+#include <consensus/consensus.h>\n+#include <memusage.h>\n+#include <random.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "0280abb56c03cc93bd05b0be3f80aaba1cd03c68",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,13 +6,13 @@\n #ifndef BITCOIN_COINS_H\n #define BITCOIN_COINS_H\n \n-#include \"primitives/transaction.h\"\n-#include \"compressor.h\"\n-#include \"core_memusage.h\"\n-#include \"hash.h\"\n-#include \"memusage.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <primitives/transaction.h>\n+#include <compressor.h>\n+#include <core_memusage.h>\n+#include <hash.h>\n+#include <memusage.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n #include <assert.h>\n #include <stdint.h>"
      },
      {
        "sha": "2d699159b780587aa7a78ad9fe8a13553a852fc4",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_COMPAT_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #ifdef WIN32\n@@ -49,7 +49,7 @@\n \n #ifndef WIN32\n typedef unsigned int SOCKET;\n-#include \"errno.h\"\n+#include <errno.h>\n #define WSAGetLastError()   errno\n #define WSAEINVAL           EINVAL\n #define WSAEALREADY         EALREADY"
      },
      {
        "sha": "89305347210d9a8b3d8be3451df5c1dfb55b4b6f",
        "filename": "src/compat/byteswap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_COMPAT_BYTESWAP_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "9fabbd0bfb7d14bfbbbe05689bd45d7c6c2507b4",
        "filename": "src/compat/endian.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,10 +6,10 @@\n #define BITCOIN_COMPAT_ENDIAN_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"compat/byteswap.h\"\n+#include <compat/byteswap.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "6633658c166a964a07b654358e37e8c299b34d26",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <cstddef>"
      },
      {
        "sha": "20d2ad3cb67c7bad7ba15c9a4f9da23bd478ae02",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <cstddef>"
      },
      {
        "sha": "313435a2225c94841a2e9089e03aefe5dbce7afa",
        "filename": "src/compat/strnlen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/strnlen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compat/strnlen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/strnlen.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <cstring>"
      },
      {
        "sha": "a729e28f079fac12ec241aaa26ef72927ac4fd3b",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compressor.h\"\n+#include <compressor.h>\n \n-#include \"hash.h\"\n-#include \"pubkey.h\"\n-#include \"script/standard.h\"\n+#include <hash.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n \n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n {"
      },
      {
        "sha": "8731eef9f735e6e47272f386c562783c8cbd4b33",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_COMPRESSOR_H\n #define BITCOIN_COMPRESSOR_H\n \n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <serialize.h>\n \n class CKeyID;\n class CPubKey;"
      },
      {
        "sha": "fef4a5d560cfc3343b64ef6675f28243b21894a1",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"merkle.h\"\n-#include \"hash.h\"\n-#include \"utilstrencodings.h\"\n+#include <consensus/merkle.h>\n+#include <hash.h>\n+#include <utilstrencodings.h>\n \n /*     WARNING! If you're reading this because you're learning about crypto\n        and/or designing a new system that will use merkle trees, keep in mind"
      },
      {
        "sha": "c1573cc214f1818488bcd4cad26991aaa227041b",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -8,9 +8,9 @@\n #include <stdint.h>\n #include <vector>\n \n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n+#include <primitives/transaction.h>\n+#include <primitives/block.h>\n+#include <uint256.h>\n \n uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated = nullptr);\n std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);"
      },
      {
        "sha": "c9fbba12a2aca0d78c56c1394612f8acb2d49bbb",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_CONSENSUS_PARAMS_H\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n-#include \"uint256.h\"\n+#include <uint256.h>\n #include <limits>\n #include <map>\n #include <string>"
      },
      {
        "sha": "be73d0a2f9f60305d20f8b91668a78271197f26c",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"tx_verify.h\"\n+#include <consensus/tx_verify.h>\n \n-#include \"consensus.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/interpreter.h\"\n-#include \"validation.h\"\n+#include <consensus/consensus.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <consensus/validation.h>\n \n // TODO remove the following dependencies\n-#include \"chain.h\"\n-#include \"coins.h\"\n-#include \"utilmoneystr.h\"\n+#include <chain.h>\n+#include <coins.h>\n+#include <utilmoneystr.h>\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {"
      },
      {
        "sha": "a4836ceda460d01418e2320181b58d365174ea33",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CONSENSUS_TX_VERIFY_H\n #define BITCOIN_CONSENSUS_TX_VERIFY_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "55f6c363fc7585a59a1fabc0a49ae44fc59bdd45",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -7,10 +7,10 @@\n #define BITCOIN_CONSENSUS_VALIDATION_H\n \n #include <string>\n-#include \"version.h\"\n-#include \"consensus/consensus.h\"\n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n+#include <version.h>\n+#include <consensus/consensus.h>\n+#include <primitives/transaction.h>\n+#include <primitives/block.h>\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;"
      },
      {
        "sha": "7ed84d6665d4bd1ba9a40e2aeff71e3b4707d9b3",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CORE_IO_H\n #define BITCOIN_CORE_IO_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "d234f0a9d0c12794e52d477a1d361bf5abc128d3",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_CORE_MEMUSAGE_H\n #define BITCOIN_CORE_MEMUSAGE_H\n \n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n-#include \"memusage.h\"\n+#include <primitives/transaction.h>\n+#include <primitives/block.h>\n+#include <memusage.h>\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n     return memusage::DynamicUsage(script);"
      },
      {
        "sha": "2f5b67b5c709d462756820430acc9d0113dd5cd9",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core_io.h\"\n+#include <core_io.h>\n \n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n #include <univalue.h>\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/predicate.hpp>"
      },
      {
        "sha": "e97876bef313c27a5073aad43f602f92d61dabed",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,19 +2,19 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core_io.h\"\n-\n-#include \"base58.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/validation.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <core_io.h>\n+\n+#include <base58.h>\n+#include <consensus/consensus.h>\n+#include <consensus/validation.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <streams.h>\n #include <univalue.h>\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n UniValue ValueFromAmount(const CAmount& amount)\n {"
      },
      {
        "sha": "baba8bcad01952c515187300a835c2367d5de4b6",
        "filename": "src/crypto/aes.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"aes.h\"\n-#include \"crypto/common.h\"\n+#include <crypto/aes.h>\n+#include <crypto/common.h>\n \n #include <assert.h>\n #include <string.h>\n \n extern \"C\" {\n-#include \"crypto/ctaes/ctaes.c\"\n+#include <crypto/ctaes/ctaes.c>\n }\n \n AES128Encrypt::AES128Encrypt(const unsigned char key[16])"
      },
      {
        "sha": "7dda94d291e0bcd86d5f17c2ba2057ea81d709de",
        "filename": "src/crypto/aes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -8,7 +8,7 @@\n #define BITCOIN_CRYPTO_AES_H\n \n extern \"C\" {\n-#include \"crypto/ctaes/ctaes.h\"\n+#include <crypto/ctaes/ctaes.h>\n }\n \n static const int AES_BLOCKSIZE = 16;"
      },
      {
        "sha": "ac4470f04f73e1b7baaac2f16da9af92993922a8",
        "filename": "src/crypto/chacha20.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha20.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,8 +5,8 @@\n // Based on the public domain implementation 'merged' by D. J. Bernstein\n // See https://cr.yp.to/chacha.html.\n \n-#include \"crypto/common.h\"\n-#include \"crypto/chacha20.h\"\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "5a193a4e6497b1d742ae3b9503f64731ea235774",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,13 +6,13 @@\n #define BITCOIN_CRYPTO_COMMON_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <stdint.h>\n #include <string.h>\n \n-#include \"compat/endian.h\"\n+#include <compat/endian.h>\n \n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {"
      },
      {
        "sha": "9366e216c2de729e43ed7c1b676c2d728a770d14",
        "filename": "src/crypto/hmac_sha256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/hmac_sha256.h\"\n+#include <crypto/hmac_sha256.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "40d40f9fb2ee9c9ed2f1ea9f4a2c579adc943a5a",
        "filename": "src/crypto/hmac_sha256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CRYPTO_HMAC_SHA256_H\n #define BITCOIN_CRYPTO_HMAC_SHA256_H\n \n-#include \"crypto/sha256.h\"\n+#include <crypto/sha256.h>\n \n #include <stdint.h>\n #include <stdlib.h>"
      },
      {
        "sha": "f984201f6a948b61f7a4fd19bb408bdb9ec0e6f6",
        "filename": "src/crypto/hmac_sha512.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/hmac_sha512.h\"\n+#include <crypto/hmac_sha512.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "6d3fd59f27e65d979d003d6b39048d6278f11ff0",
        "filename": "src/crypto/hmac_sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/hmac_sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CRYPTO_HMAC_SHA512_H\n #define BITCOIN_CRYPTO_HMAC_SHA512_H\n \n-#include \"crypto/sha512.h\"\n+#include <crypto/sha512.h>\n \n #include <stdint.h>\n #include <stdlib.h>"
      },
      {
        "sha": "4afa9abd1e615780fa28a94a80b069860a716530",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/ripemd160.h\"\n+#include <crypto/ripemd160.h>\n \n-#include \"crypto/common.h\"\n+#include <crypto/common.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "8ccc5e112aa69f5e9b9ccb32c4ca176faccb3c35",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha1.h\"\n+#include <crypto/sha1.h>\n \n-#include \"crypto/common.h\"\n+#include <crypto/common.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "9a21aec20e9d4e5e19a1f82b71cb42651ef195ca",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha256.h\"\n-#include \"crypto/common.h\"\n+#include <crypto/sha256.h>\n+#include <crypto/common.h>\n \n #include <assert.h>\n #include <string.h>"
      },
      {
        "sha": "aa46e7ba86392badc12d6ddb6300c15612589c5b",
        "filename": "src/crypto/sha512.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/crypto/sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha512.h\"\n+#include <crypto/sha512.h>\n \n-#include \"crypto/common.h\"\n+#include <crypto/common.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "92c4fe363ca4bc72cc88e71c4dd3bcd0ce57947d",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"dbwrapper.h\"\n+#include <dbwrapper.h>\n \n-#include \"fs.h\"\n-#include \"util.h\"\n-#include \"random.h\"\n+#include <fs.h>\n+#include <util.h>\n+#include <random.h>\n \n #include <leveldb/cache.h>\n #include <leveldb/env.h>"
      },
      {
        "sha": "9f4d4814eb0cb72ea654c1e2c781f43074e41a15",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,13 +5,13 @@\n #ifndef BITCOIN_DBWRAPPER_H\n #define BITCOIN_DBWRAPPER_H\n \n-#include \"clientversion.h\"\n-#include \"fs.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>"
      },
      {
        "sha": "570ed3e2ee2c6828475bae26bc44539f7e8e8567",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -1,4 +1,4 @@\n-#include \"fs.h\"\n+#include <fs.h>\n \n namespace fsbridge {\n "
      },
      {
        "sha": "1363d32cf463806d8f1c51d45ff5bae6f9e5efac",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"hash.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/hmac_sha512.h\"\n-#include \"pubkey.h\"\n+#include <hash.h>\n+#include <crypto/common.h>\n+#include <crypto/hmac_sha512.h>\n+#include <pubkey.h>\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)"
      },
      {
        "sha": "55724fb636a9a450a80909229e89a71dc4128234",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha256.h\"\n-#include \"prevector.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"version.h\"\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha256.h>\n+#include <prevector.h>\n+#include <serialize.h>\n+#include <uint256.h>\n+#include <version.h>\n \n #include <vector>\n "
      },
      {
        "sha": "6b6849e59bd44c2ce09e2cd83464ca653ea32abc",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,19 +2,19 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"httprpc.h\"\n-\n-#include \"base58.h\"\n-#include \"chainparams.h\"\n-#include \"httpserver.h\"\n-#include \"rpc/protocol.h\"\n-#include \"rpc/server.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"ui_interface.h\"\n-#include \"crypto/hmac_sha256.h\"\n+#include <httprpc.h>\n+\n+#include <base58.h>\n+#include <chainparams.h>\n+#include <httpserver.h>\n+#include <rpc/protocol.h>\n+#include <rpc/server.h>\n+#include <random.h>\n+#include <sync.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <ui_interface.h>\n+#include <crypto/hmac_sha256.h>\n #include <stdio.h>\n \n #include <boost/algorithm/string.hpp> // boost::trim"
      },
      {
        "sha": "7d590f8e1f7eb018e96f503455e6f3a1a29c4bbc",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,16 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"httpserver.h\"\n+#include <httpserver.h>\n \n-#include \"chainparamsbase.h\"\n-#include \"compat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"netbase.h\"\n-#include \"rpc/protocol.h\" // For HTTP status codes\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n+#include <chainparamsbase.h>\n+#include <compat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <netbase.h>\n+#include <rpc/protocol.h> // For HTTP status codes\n+#include <sync.h>\n+#include <ui_interface.h>\n \n #include <stdio.h>\n #include <stdlib.h>\n@@ -28,7 +28,7 @@\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n-#include \"support/events.h\"\n+#include <support/events.h>\n \n #ifdef EVENT__HAVE_NETINET_IN_H\n #include <netinet/in.h>"
      },
      {
        "sha": "439eaacfcc9445cb28e213fbf7164bdf893cf72c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,49 +4,49 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"init.h\"\n-\n-#include \"addrman.h\"\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"checkpoints.h\"\n-#include \"compat/sanity.h\"\n-#include \"consensus/validation.h\"\n-#include \"fs.h\"\n-#include \"httpserver.h\"\n-#include \"httprpc.h\"\n-#include \"key.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"netbase.h\"\n-#include \"net.h\"\n-#include \"net_processing.h\"\n-#include \"policy/feerate.h\"\n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-#include \"rpc/server.h\"\n-#include \"rpc/register.h\"\n-#include \"rpc/safemode.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"script/standard.h\"\n-#include \"script/sigcache.h\"\n-#include \"scheduler.h\"\n-#include \"timedata.h\"\n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n-#include \"torcontrol.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"validationinterface.h\"\n+#include <init.h>\n+\n+#include <addrman.h>\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <checkpoints.h>\n+#include <compat/sanity.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <httpserver.h>\n+#include <httprpc.h>\n+#include <key.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <netbase.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <policy/feerate.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <rpc/server.h>\n+#include <rpc/register.h>\n+#include <rpc/safemode.h>\n+#include <rpc/blockchain.h>\n+#include <script/standard.h>\n+#include <script/sigcache.h>\n+#include <scheduler.h>\n+#include <timedata.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <torcontrol.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <validationinterface.h>\n #ifdef ENABLE_WALLET\n-#include \"wallet/init.h\"\n+#include <wallet/init.h>\n #endif\n-#include \"warnings.h\"\n+#include <warnings.h>\n #include <stdint.h>\n #include <stdio.h>\n #include <memory>\n@@ -64,7 +64,7 @@\n #include <openssl/crypto.h>\n \n #if ENABLE_ZMQ\n-#include \"zmq/zmqnotificationinterface.h\"\n+#include <zmq/zmqnotificationinterface.h>\n #endif\n \n bool fFeeEstimatesInitialized = false;"
      },
      {
        "sha": "73983caf4127bbad05e12e3ded964580832a79df",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n+#include <key.h>\n \n-#include \"arith_uint256.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/hmac_sha512.h\"\n-#include \"pubkey.h\"\n-#include \"random.h\"\n+#include <arith_uint256.h>\n+#include <crypto/common.h>\n+#include <crypto/hmac_sha512.h>\n+#include <pubkey.h>\n+#include <random.h>\n \n #include <secp256k1.h>\n #include <secp256k1_recovery.h>"
      },
      {
        "sha": "c610e5e6cd3e7fb5415a73e58865971222f2a273",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n-#include \"pubkey.h\"\n-#include \"serialize.h\"\n-#include \"support/allocators/secure.h\"\n-#include \"uint256.h\"\n+#include <pubkey.h>\n+#include <serialize.h>\n+#include <support/allocators/secure.h>\n+#include <uint256.h>\n \n #include <stdexcept>\n #include <vector>"
      },
      {
        "sha": "5718a14ca237541afc3dead572b426fe669c0d93",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"keystore.h\"\n+#include <keystore.h>\n \n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"util.h\"\n+#include <key.h>\n+#include <pubkey.h>\n+#include <util.h>\n \n bool CKeyStore::AddKey(const CKey &key) {\n     return AddKeyPubKey(key, key.GetPubKey());"
      },
      {
        "sha": "4e6d8e8a2763162e28594dff68fbd990f57735d1",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_KEYSTORE_H\n #define BITCOIN_KEYSTORE_H\n \n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"sync.h\"\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <sync.h>\n \n #include <boost/signals2/signal.hpp>\n "
      },
      {
        "sha": "d931171d35bfebbc8733554b7ad9264bfc1b4fc4",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_MEMUSAGE_H\n #define BITCOIN_MEMUSAGE_H\n \n-#include \"indirectmap.h\"\n+#include <indirectmap.h>\n \n #include <stdlib.h>\n "
      },
      {
        "sha": "f4db9dd57e4f950eb69ba9c492b1216678b81774",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"merkleblock.h\"\n+#include <merkleblock.h>\n \n-#include \"hash.h\"\n-#include \"consensus/consensus.h\"\n-#include \"utilstrencodings.h\"\n+#include <hash.h>\n+#include <consensus/consensus.h>\n+#include <utilstrencodings.h>\n \n \n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)"
      },
      {
        "sha": "b64c34370e5fa8d48e30b13a0a924319a3e36264",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_MERKLEBLOCK_H\n #define BITCOIN_MERKLEBLOCK_H\n \n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"primitives/block.h\"\n-#include \"bloom.h\"\n+#include <serialize.h>\n+#include <uint256.h>\n+#include <primitives/block.h>\n+#include <bloom.h>\n \n #include <vector>\n "
      },
      {
        "sha": "397d99fc9a3d02d1af2d47845d61590a7c167140",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,29 +3,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"miner.h\"\n-\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"coins.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/merkle.h\"\n-#include \"consensus/validation.h\"\n-#include \"hash.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n-#include \"policy/feerate.h\"\n-#include \"policy/policy.h\"\n-#include \"pow.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/standard.h\"\n-#include \"timedata.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"validationinterface.h\"\n+#include <miner.h>\n+\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <validation.h>\n+#include <net.h>\n+#include <policy/feerate.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <timedata.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <validationinterface.h>\n \n #include <algorithm>\n #include <queue>"
      },
      {
        "sha": "36276dc362c57c5a37cb6474d19e701d3e1ee07f",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include \"primitives/block.h\"\n-#include \"txmempool.h\"\n+#include <primitives/block.h>\n+#include <txmempool.h>\n \n #include <stdint.h>\n #include <memory>"
      },
      {
        "sha": "a8e5143d5ee7ccb98eeea7ecf769dcddecb60d03",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,23 +4,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"net.h\"\n-\n-#include \"addrman.h\"\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"consensus/consensus.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/sha256.h\"\n-#include \"hash.h\"\n-#include \"primitives/transaction.h\"\n-#include \"netbase.h\"\n-#include \"scheduler.h\"\n-#include \"ui_interface.h\"\n-#include \"utilstrencodings.h\"\n+#include <net.h>\n+\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <consensus/consensus.h>\n+#include <crypto/common.h>\n+#include <crypto/sha256.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <netbase.h>\n+#include <scheduler.h>\n+#include <ui_interface.h>\n+#include <utilstrencodings.h>\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "a7223050e77436b5ce7a80f4281d6bb90e3e75bc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,21 +6,21 @@\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n-#include \"addrdb.h\"\n-#include \"addrman.h\"\n-#include \"amount.h\"\n-#include \"bloom.h\"\n-#include \"compat.h\"\n-#include \"hash.h\"\n-#include \"limitedmap.h\"\n-#include \"netaddress.h\"\n-#include \"policy/feerate.h\"\n-#include \"protocol.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"sync.h\"\n-#include \"uint256.h\"\n-#include \"threadinterrupt.h\"\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <amount.h>\n+#include <bloom.h>\n+#include <compat.h>\n+#include <hash.h>\n+#include <limitedmap.h>\n+#include <netaddress.h>\n+#include <policy/feerate.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <threadinterrupt.h>\n \n #include <atomic>\n #include <deque>"
      },
      {
        "sha": "442cd00c9bc172ae3d68941772470db1f33c94cb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,34 +3,34 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"net_processing.h\"\n-\n-#include \"addrman.h\"\n-#include \"arith_uint256.h\"\n-#include \"blockencodings.h\"\n-#include \"chainparams.h\"\n-#include \"consensus/validation.h\"\n-#include \"hash.h\"\n-#include \"init.h\"\n-#include \"validation.h\"\n-#include \"merkleblock.h\"\n-#include \"net.h\"\n-#include \"netmessagemaker.h\"\n-#include \"netbase.h\"\n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"random.h\"\n-#include \"reverse_iterator.h\"\n-#include \"scheduler.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n-#include \"validationinterface.h\"\n+#include <net_processing.h>\n+\n+#include <addrman.h>\n+#include <arith_uint256.h>\n+#include <blockencodings.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <init.h>\n+#include <validation.h>\n+#include <merkleblock.h>\n+#include <net.h>\n+#include <netmessagemaker.h>\n+#include <netbase.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <reverse_iterator.h>\n+#include <scheduler.h>\n+#include <tinyformat.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n+#include <validationinterface.h>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\""
      },
      {
        "sha": "3fc1e058354233dedf4e0c1b0199a5af52f97c81",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_NET_PROCESSING_H\n #define BITCOIN_NET_PROCESSING_H\n \n-#include \"net.h\"\n-#include \"validationinterface.h\"\n-#include \"consensus/params.h\"\n+#include <net.h>\n+#include <validationinterface.h>\n+#include <consensus/params.h>\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;"
      },
      {
        "sha": "3ef3c67ae4edc101c7f9b5b672c5c553db061d2c",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,13 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifdef HAVE_CONFIG_H\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"netaddress.h\"\n-#include \"hash.h\"\n-#include \"utilstrencodings.h\"\n-#include \"tinyformat.h\"\n+#include <netaddress.h>\n+#include <hash.h>\n+#include <utilstrencodings.h>\n+#include <tinyformat.h>\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};"
      },
      {
        "sha": "3b542b4748bcfc63d4ef467b42a44d6db813f2d5",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,11 +6,11 @@\n #define BITCOIN_NETADDRESS_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"compat.h\"\n-#include \"serialize.h\"\n+#include <compat.h>\n+#include <serialize.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "bd1eaf062f1e3b248fc30f41ca7fdb0ef5b8dece",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,17 +4,17 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifdef HAVE_CONFIG_H\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"netbase.h\"\n+#include <netbase.h>\n \n-#include \"hash.h\"\n-#include \"sync.h\"\n-#include \"uint256.h\"\n-#include \"random.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <hash.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <random.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <atomic>\n "
      },
      {
        "sha": "0a07be87b77b06867145784b04ec4f79539116a4",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,12 +6,12 @@\n #define BITCOIN_NETBASE_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"compat.h\"\n-#include \"netaddress.h\"\n-#include \"serialize.h\"\n+#include <compat.h>\n+#include <netaddress.h>\n+#include <serialize.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "ea7fccacb20b7fb34f0cf0d97bc7432973c49b56",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_NETMESSAGEMAKER_H\n #define BITCOIN_NETMESSAGEMAKER_H\n \n-#include \"net.h\"\n-#include \"serialize.h\"\n+#include <net.h>\n+#include <serialize.h>\n \n class CNetMsgMaker\n {"
      },
      {
        "sha": "feb3464a56988a78a7b9565de9ed93b4f5e39689",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"noui.h\"\n+#include <noui.h>\n \n-#include \"ui_interface.h\"\n-#include \"util.h\"\n+#include <ui_interface.h>\n+#include <util.h>\n \n #include <cstdio>\n #include <stdint.h>"
      },
      {
        "sha": "26c44ee0cf11a129e59ccc23a2b63c7eaba1ed0e",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"feerate.h\"\n+#include <policy/feerate.h>\n \n-#include \"tinyformat.h\"\n+#include <tinyformat.h>\n \n const std::string CURRENCY_UNIT = \"BTC\";\n "
      },
      {
        "sha": "35b1b23786d15b9ba0731902124d79956eb85605",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_POLICY_FEERATE_H\n #define BITCOIN_POLICY_FEERATE_H\n \n-#include \"amount.h\"\n-#include \"serialize.h\"\n+#include <amount.h>\n+#include <serialize.h>\n \n #include <string>\n "
      },
      {
        "sha": "013116318b1b67c6084d01753aacd30ed3c911f5",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-\n-#include \"amount.h\"\n-#include \"clientversion.h\"\n-#include \"primitives/transaction.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+\n+#include <amount.h>\n+#include <clientversion.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <txmempool.h>\n+#include <util.h>\n \n static constexpr double INF_FEERATE = 1e99;\n "
      },
      {
        "sha": "6528560f5265455907ecebf5129899d18ca0222a",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,11 +5,11 @@\n #ifndef BITCOIN_POLICYESTIMATOR_H\n #define BITCOIN_POLICYESTIMATOR_H\n \n-#include \"amount.h\"\n-#include \"feerate.h\"\n-#include \"uint256.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n+#include <amount.h>\n+#include <policy/feerate.h>\n+#include <uint256.h>\n+#include <random.h>\n+#include <sync.h>\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "b69bed5d6ff2b3a3c962642542016224731d8d89",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,14 +5,14 @@\n \n // NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n \n-#include \"policy/policy.h\"\n-\n-#include \"consensus/validation.h\"\n-#include \"validation.h\"\n-#include \"coins.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <policy/policy.h>\n+\n+#include <consensus/validation.h>\n+#include <validation.h>\n+#include <coins.h>\n+#include <tinyformat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)"
      },
      {
        "sha": "f3f8ebbbb4c40aa261a10407e6cc0193873d608e",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_POLICY_POLICY_H\n #define BITCOIN_POLICY_POLICY_H\n \n-#include \"consensus/consensus.h\"\n-#include \"feerate.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/standard.h\"\n+#include <consensus/consensus.h>\n+#include <policy/feerate.h>\n+#include <script/interpreter.h>\n+#include <script/standard.h>\n \n #include <string>\n "
      },
      {
        "sha": "e9692d4b482b2cb1bb9c0f31aa32583a0a7975dd",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/rbf.h\"\n+#include <policy/rbf.h>\n \n bool SignalsOptInRBF(const CTransaction &tx)\n {"
      },
      {
        "sha": "1a5218e120d02ee5b684a6d1a63f70cafaf397fd",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_POLICY_RBF_H\n #define BITCOIN_POLICY_RBF_H\n \n-#include \"txmempool.h\"\n+#include <txmempool.h>\n \n static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n "
      },
      {
        "sha": "cecb54ca7b038c2b576c2f8625567932fc42570d",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"pow.h\"\n+#include <pow.h>\n \n-#include \"arith_uint256.h\"\n-#include \"chain.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n+#include <arith_uint256.h>\n+#include <chain.h>\n+#include <primitives/block.h>\n+#include <uint256.h>\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {"
      },
      {
        "sha": "db2f5343b51f3ee30c2730d75d84e108146f0247",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n-#include \"consensus/params.h\"\n+#include <consensus/params.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "9e2056551192648491442235322df69ea1bdc1ee",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/block.h\"\n+#include <primitives/block.h>\n \n-#include \"hash.h\"\n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n-#include \"crypto/common.h\"\n+#include <hash.h>\n+#include <tinyformat.h>\n+#include <utilstrencodings.h>\n+#include <crypto/common.h>\n \n uint256 CBlockHeader::GetHash() const\n {"
      },
      {
        "sha": "4957958c6ad35121048bae5a35f07462fbc7ce35",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_PRIMITIVES_BLOCK_H\n #define BITCOIN_PRIMITIVES_BLOCK_H\n \n-#include \"primitives/transaction.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <primitives/transaction.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work"
      },
      {
        "sha": "d8230d14233d03bed8904252e305c3bc48623f5e",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/transaction.h\"\n+#include <primitives/transaction.h>\n \n-#include \"hash.h\"\n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n+#include <hash.h>\n+#include <tinyformat.h>\n+#include <utilstrencodings.h>\n \n std::string COutPoint::ToString() const\n {"
      },
      {
        "sha": "32f45e5748e7971e600b1c9a07e8f11138cba5a0",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -7,10 +7,10 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include <stdint.h>\n-#include \"amount.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <amount.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n "
      },
      {
        "sha": "8c34c4196e6460986e5c796ef521d1b1ff7fa934",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"protocol.h\"\n+#include <protocol.h>\n \n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #ifndef WIN32\n # include <arpa/inet.h>"
      },
      {
        "sha": "bc314345158512526f35718fe78dc8420e23015b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -10,10 +10,10 @@\n #ifndef BITCOIN_PROTOCOL_H\n #define BITCOIN_PROTOCOL_H\n \n-#include \"netaddress.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"version.h\"\n+#include <netaddress.h>\n+#include <serialize.h>\n+#include <uint256.h>\n+#include <version.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "7f5ec1e8de1cdf17290c1ab502b4e0792727cfc7",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"pubkey.h\"\n+#include <pubkey.h>\n \n #include <secp256k1.h>\n #include <secp256k1_recovery.h>"
      },
      {
        "sha": "c9f3c18eb33997960b254bbe7aa5a21b709f0494",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_PUBKEY_H\n #define BITCOIN_PUBKEY_H\n \n-#include \"hash.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <hash.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n #include <stdexcept>\n #include <vector>"
      },
      {
        "sha": "905ea877566947fcc1241d427a671daa388db693",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,18 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"addressbookpage.h\"\n-#include \"ui_addressbookpage.h\"\n+#include <qt/addressbookpage.h>\n+#include <ui_addressbookpage.h>\n \n-#include \"addresstablemodel.h\"\n-#include \"bitcoingui.h\"\n-#include \"csvmodelwriter.h\"\n-#include \"editaddressdialog.h\"\n-#include \"guiutil.h\"\n-#include \"platformstyle.h\"\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoingui.h>\n+#include <qt/csvmodelwriter.h>\n+#include <qt/editaddressdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/platformstyle.h>\n \n #include <QIcon>\n #include <QMenu>"
      },
      {
        "sha": "1d16940acb9f5cdf13b9fcafc430e49704e7146e",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"addresstablemodel.h\"\n+#include <qt/addresstablemodel.h>\n \n-#include \"guiutil.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/walletmodel.h>\n \n-#include \"base58.h\"\n-#include \"wallet/wallet.h\"\n+#include <base58.h>\n+#include <wallet/wallet.h>\n \n \n #include <QFont>"
      },
      {
        "sha": "b45f97dace8dac2026469c400381547ff5142c39",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,16 +3,16 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"askpassphrasedialog.h\"\n-#include \"ui_askpassphrasedialog.h\"\n+#include <qt/askpassphrasedialog.h>\n+#include <ui_askpassphrasedialog.h>\n \n-#include \"guiconstants.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiconstants.h>\n+#include <qt/walletmodel.h>\n \n-#include \"support/allocators/secure.h\"\n+#include <support/allocators/secure.h>\n \n #include <QKeyEvent>\n #include <QMessageBox>"
      },
      {
        "sha": "84807da65d141bc30014005c530ffae389813801",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bantablemodel.h\"\n+#include <qt/bantablemodel.h>\n \n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n \n-#include \"sync.h\"\n-#include \"utiltime.h\"\n+#include <sync.h>\n+#include <utiltime.h>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "dc69dee20a5572a56e62882d47b5b2ff2150a622",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BANTABLEMODEL_H\n #define BITCOIN_QT_BANTABLEMODEL_H\n \n-#include \"net.h\"\n+#include <net.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "57ea5fe5496884556a99216d1b1ca040f297dea3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,38 +3,38 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"bitcoingui.h\"\n-\n-#include \"chainparams.h\"\n-#include \"clientmodel.h\"\n-#include \"fs.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"intro.h\"\n-#include \"networkstyle.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"splashscreen.h\"\n-#include \"utilitydialog.h\"\n-#include \"winshutdownmonitor.h\"\n+#include <qt/bitcoingui.h>\n+\n+#include <chainparams.h>\n+#include <qt/clientmodel.h>\n+#include <fs.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/intro.h>\n+#include <qt/networkstyle.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/splashscreen.h>\n+#include <qt/utilitydialog.h>\n+#include <qt/winshutdownmonitor.h>\n \n #ifdef ENABLE_WALLET\n-#include \"paymentserver.h\"\n-#include \"walletmodel.h\"\n+#include <qt/paymentserver.h>\n+#include <qt/walletmodel.h>\n #endif\n \n-#include \"init.h\"\n-#include \"rpc/server.h\"\n-#include \"scheduler.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"warnings.h\"\n+#include <init.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <warnings.h>\n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n+#include <wallet/wallet.h>\n #endif\n \n #include <stdint.h>\n@@ -261,7 +261,7 @@ public Q_SLOTS:\n     void startThread();\n };\n \n-#include \"bitcoin.moc\"\n+#include <bitcoin.moc>\n \n BitcoinCore::BitcoinCore():\n     QObject()"
      },
      {
        "sha": "e8d174bf292157d02ff9b7bc73bdeea33c5dc30a",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinaddressvalidator.h\"\n+#include <qt/bitcoinaddressvalidator.h>\n \n-#include \"base58.h\"\n+#include <base58.h>\n \n /* Base58 characters are:\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\""
      },
      {
        "sha": "2ad99b3aabe43ba5817216be5a9b73ac5fc578b4",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinamountfield.h\"\n+#include <qt/bitcoinamountfield.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiconstants.h\"\n-#include \"qvaluecombobox.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiconstants.h>\n+#include <qt/qvaluecombobox.h>\n \n #include <QApplication>\n #include <QAbstractSpinBox>\n@@ -188,7 +188,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void valueChanged();\n };\n \n-#include \"bitcoinamountfield.moc\"\n+#include <bitcoinamountfield.moc>\n \n BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     QWidget(parent),"
      },
      {
        "sha": "659ecb416ba7c8149b82d29f1842667ff3f90922",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BITCOINAMOUNTFIELD_H\n #define BITCOIN_QT_BITCOINAMOUNTFIELD_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QWidget>\n "
      },
      {
        "sha": "cd3234c56493195932ab8e1ba7c26c7eb30dcc14",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,38 +3,38 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"bitcoingui.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"modaloverlay.h\"\n-#include \"networkstyle.h\"\n-#include \"notificator.h\"\n-#include \"openuridialog.h\"\n-#include \"optionsdialog.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"rpcconsole.h\"\n-#include \"utilitydialog.h\"\n+#include <qt/bitcoingui.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/modaloverlay.h>\n+#include <qt/networkstyle.h>\n+#include <qt/notificator.h>\n+#include <qt/openuridialog.h>\n+#include <qt/optionsdialog.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/rpcconsole.h>\n+#include <qt/utilitydialog.h>\n \n #ifdef ENABLE_WALLET\n-#include \"walletframe.h\"\n-#include \"walletmodel.h\"\n+#include <qt/walletframe.h>\n+#include <qt/walletmodel.h>\n #endif // ENABLE_WALLET\n \n #ifdef Q_OS_MAC\n-#include \"macdockiconhandler.h\"\n+#include <qt/macdockiconhandler.h>\n #endif\n \n-#include \"chainparams.h\"\n-#include \"init.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n+#include <chainparams.h>\n+#include <init.h>\n+#include <ui_interface.h>\n+#include <util.h>\n \n #include <iostream>\n "
      },
      {
        "sha": "1647975fec215122d68409b80f67af638ea2d919",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,10 +6,10 @@\n #define BITCOIN_QT_BITCOINGUI_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QLabel>\n #include <QMainWindow>"
      },
      {
        "sha": "c8614fdfe06613e5998b2b3c0f0d37c03b617dd9",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinunits.h\"\n+#include <qt/bitcoinunits.h>\n \n-#include \"primitives/transaction.h\"\n+#include <primitives/transaction.h>\n \n #include <QStringList>\n "
      },
      {
        "sha": "3f5a7fd32d1d01e37e668a51eb402c9f7905b470",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BITCOINUNITS_H\n #define BITCOIN_QT_BITCOINUNITS_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QAbstractListModel>\n #include <QString>"
      },
      {
        "sha": "78174b90a14b89791df9a9c13a3a8ea0d1e268f3",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"clientmodel.h\"\n-\n-#include \"bantablemodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"peertablemodel.h\"\n-\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"checkpoints.h\"\n-#include \"clientversion.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n-#include \"txmempool.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"warnings.h\"\n+#include <qt/clientmodel.h>\n+\n+#include <qt/bantablemodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/peertablemodel.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <checkpoints.h>\n+#include <clientversion.h>\n+#include <validation.h>\n+#include <net.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <warnings.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "7dfc38673ed56f02a683069af94ca3168f694078",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coincontroldialog.h\"\n-#include \"ui_coincontroldialog.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"txmempool.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"wallet/coincontrol.h\"\n-#include \"init.h\"\n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-#include \"validation.h\" // For mempool\n-#include \"wallet/fees.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/coincontroldialog.h>\n+#include <ui_coincontroldialog.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <txmempool.h>\n+#include <qt/walletmodel.h>\n+\n+#include <wallet/coincontrol.h>\n+#include <init.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <validation.h> // For mempool\n+#include <wallet/fees.h>\n+#include <wallet/wallet.h>\n \n #include <QApplication>\n #include <QCheckBox>"
      },
      {
        "sha": "51b0a42907ac8ec5b4d887ca16d280b5fc5f5c81",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_COINCONTROLDIALOG_H\n #define BITCOIN_QT_COINCONTROLDIALOG_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QAbstractButton>\n #include <QAction>"
      },
      {
        "sha": "b628824793de1de83bc28286f5d77b5774c0dc14",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coincontroltreewidget.h\"\n-#include \"coincontroldialog.h\"\n+#include <qt/coincontroltreewidget.h>\n+#include <qt/coincontroldialog.h>\n \n CoinControlTreeWidget::CoinControlTreeWidget(QWidget *parent) :\n     QTreeWidget(parent)"
      },
      {
        "sha": "702757147b8817504c781f457908d7083bc3518f",
        "filename": "src/qt/csvmodelwriter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/csvmodelwriter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/csvmodelwriter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"csvmodelwriter.h\"\n+#include <qt/csvmodelwriter.h>\n \n #include <QAbstractItemModel>\n #include <QFile>"
      },
      {
        "sha": "fed34318879767b37899b7d3f11a3118f130a1b2",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"editaddressdialog.h\"\n-#include \"ui_editaddressdialog.h\"\n+#include <qt/editaddressdialog.h>\n+#include <ui_editaddressdialog.h>\n \n-#include \"addresstablemodel.h\"\n-#include \"guiutil.h\"\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n \n #include <QDataWidgetMapper>\n #include <QMessageBox>"
      },
      {
        "sha": "80ee35a3415ab8f90fb2e2c7361fc3d305fc9887",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,21 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"guiutil.h\"\n-\n-#include \"bitcoinaddressvalidator.h\"\n-#include \"bitcoinunits.h\"\n-#include \"qvalidatedlineedit.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"fs.h\"\n-#include \"primitives/transaction.h\"\n-#include \"init.h\"\n-#include \"policy/policy.h\"\n-#include \"protocol.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"util.h\"\n+#include <qt/guiutil.h>\n+\n+#include <qt/bitcoinaddressvalidator.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/qvalidatedlineedit.h>\n+#include <qt/walletmodel.h>\n+\n+#include <fs.h>\n+#include <primitives/transaction.h>\n+#include <init.h>\n+#include <policy/policy.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <util.h>\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT\n@@ -31,9 +31,9 @@\n #ifndef NOMINMAX\n #define NOMINMAX\n #endif\n-#include \"shellapi.h\"\n-#include \"shlobj.h\"\n-#include \"shlwapi.h\"\n+#include <shellapi.h>\n+#include <shlobj.h>\n+#include <shlwapi.h>\n #endif\n \n #include <boost/scoped_array.hpp>"
      },
      {
        "sha": "d0ab491952f0dbc3cca431816c91c1ebecb89210",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_QT_GUIUTIL_H\n #define BITCOIN_QT_GUIUTIL_H\n \n-#include \"amount.h\"\n-#include \"fs.h\"\n+#include <amount.h>\n+#include <fs.h>\n \n #include <QEvent>\n #include <QHeaderView>"
      },
      {
        "sha": "8f8e93402b4bd9daca536d9c69ced84cdf441df8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,16 +3,16 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"fs.h\"\n-#include \"intro.h\"\n-#include \"ui_intro.h\"\n+#include <fs.h>\n+#include <qt/intro.h>\n+#include <ui_intro.h>\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n-#include \"util.h\"\n+#include <util.h>\n \n #include <QFileDialog>\n #include <QSettings>\n@@ -60,7 +60,7 @@ public Q_SLOTS:\n     Intro *intro;\n };\n \n-#include \"intro.moc\"\n+#include <intro.moc>\n \n FreespaceChecker::FreespaceChecker(Intro *_intro)\n {"
      },
      {
        "sha": "bb0090a73890e764e54146abf6c53b3567fcf770",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"modaloverlay.h\"\n-#include \"ui_modaloverlay.h\"\n+#include <qt/modaloverlay.h>\n+#include <ui_modaloverlay.h>\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n-#include \"chainparams.h\"\n+#include <chainparams.h>\n \n #include <QResizeEvent>\n #include <QPropertyAnimation>"
      },
      {
        "sha": "42ae3ae566e6f4b4dcf38d232c5d92e60bf5da6f",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"networkstyle.h\"\n+#include <qt/networkstyle.h>\n \n-#include \"guiconstants.h\"\n+#include <qt/guiconstants.h>\n \n #include <QApplication>\n "
      },
      {
        "sha": "4f8732a9ce080ce64912fa130768ab15aca3845b",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"notificator.h\"\n+#include <qt/notificator.h>\n \n #include <QApplication>\n #include <QByteArray>\n@@ -24,7 +24,7 @@\n // #define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0\n #ifdef Q_OS_MAC\n #include <ApplicationServices/ApplicationServices.h>\n-#include \"macnotificationhandler.h\"\n+#include <qt/macnotificationhandler.h>\n #endif\n \n "
      },
      {
        "sha": "ef6f5c7ec50abc15196bad317f2c42dfad4319de",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_QT_NOTIFICATOR_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <QIcon>"
      },
      {
        "sha": "d3ae16fc589d7e91195dfde85ba758457aa39d4e",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"openuridialog.h\"\n-#include \"ui_openuridialog.h\"\n+#include <qt/openuridialog.h>\n+#include <ui_openuridialog.h>\n \n-#include \"guiutil.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/walletmodel.h>\n \n #include <QUrl>\n "
      },
      {
        "sha": "095f25b3728012c089e2542bb670bf3ada23a041",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,19 +3,19 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"optionsdialog.h\"\n-#include \"ui_optionsdialog.h\"\n+#include <qt/optionsdialog.h>\n+#include <ui_optionsdialog.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n \n-#include \"validation.h\" // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n-#include \"netbase.h\"\n-#include \"txdb.h\" // for -dbcache defaults\n+#include <validation.h> // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n+#include <netbase.h>\n+#include <txdb.h> // for -dbcache defaults\n \n #include <QDataWidgetMapper>\n #include <QDir>"
      },
      {
        "sha": "6fcd6c295058cc0445a96736ad04d2b6467795f5",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,25 +3,25 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"optionsmodel.h\"\n+#include <qt/optionsmodel.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n \n-#include \"amount.h\"\n-#include \"init.h\"\n-#include \"validation.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n-#include \"net.h\"\n-#include \"netbase.h\"\n-#include \"txdb.h\" // for -dbcache defaults\n-#include \"intro.h\" \n+#include <amount.h>\n+#include <init.h>\n+#include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <net.h>\n+#include <netbase.h>\n+#include <txdb.h> // for -dbcache defaults\n+#include <qt/intro.h> \n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n #endif\n \n #include <QNetworkProxy>"
      },
      {
        "sha": "b6e8fdef688df52f16af832c47e2d3e17b10e61b",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_OPTIONSMODEL_H\n #define BITCOIN_QT_OPTIONSMODEL_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QAbstractListModel>\n "
      },
      {
        "sha": "880c51ce12566e2e2fe4284045a68bef98ad2268",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"overviewpage.h\"\n-#include \"ui_overviewpage.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"transactionfilterproxy.h\"\n-#include \"transactiontablemodel.h\"\n-#include \"walletmodel.h\"\n+#include <qt/overviewpage.h>\n+#include <ui_overviewpage.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/transactionfilterproxy.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QAbstractItemDelegate>\n #include <QPainter>\n@@ -106,7 +106,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n     const PlatformStyle *platformStyle;\n \n };\n-#include \"overviewpage.moc\"\n+#include <overviewpage.moc>\n \n OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),"
      },
      {
        "sha": "1e09d907b04efbfdbc87bf993a8e3e414ca07160",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_OVERVIEWPAGE_H\n #define BITCOIN_QT_OVERVIEWPAGE_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QWidget>\n #include <memory>"
      },
      {
        "sha": "4503728882ce2c892fdb37e768703ea54ffafa18",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -7,9 +7,9 @@\n // with some extra methods\n //\n \n-#include \"paymentrequestplus.h\"\n+#include <qt/paymentrequestplus.h>\n \n-#include \"util.h\"\n+#include <util.h>\n \n #include <stdexcept>\n "
      },
      {
        "sha": "f8a6a5168e48b539d22646488cc5a5d7cccee54b",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -7,10 +7,10 @@\n \n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n-#include \"paymentrequest.pb.h\"\n+#include <paymentrequest.pb.h>\n #pragma GCC diagnostic pop\n \n-#include \"base58.h\"\n+#include <base58.h>\n \n #include <openssl/x509.h>\n "
      },
      {
        "sha": "510a3783ae5a200102d6781f9cfb5a1c8c899154",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentserver.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-\n-#include \"base58.h\"\n-#include \"chainparams.h\"\n-#include \"policy/policy.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/paymentserver.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+\n+#include <base58.h>\n+#include <chainparams.h>\n+#include <policy/policy.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <wallet/wallet.h>\n \n #include <cstdlib>\n "
      },
      {
        "sha": "9adef9743d3bb4c25232297d3e3b6dcca2c502c3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -32,8 +32,8 @@\n // sends them to the server.\n //\n \n-#include \"paymentrequestplus.h\"\n-#include \"walletmodel.h\"\n+#include <qt/paymentrequestplus.h>\n+#include <qt/walletmodel.h>\n \n #include <QObject>\n #include <QString>"
      },
      {
        "sha": "cfafab2c8ab6ad3af33124fe58c85fdaea5c87f5",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"peertablemodel.h\"\n+#include <qt/peertablemodel.h>\n \n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n \n-#include \"validation.h\" // for cs_main\n-#include \"sync.h\"\n+#include <validation.h> // for cs_main\n+#include <sync.h>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "e41fe4bb03b95c73bbdcab7b6ae6a2e4fb61fe5c",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_QT_PEERTABLEMODEL_H\n #define BITCOIN_QT_PEERTABLEMODEL_H\n \n-#include \"net_processing.h\" // For CNodeStateStats\n-#include \"net.h\"\n+#include <net_processing.h> // For CNodeStateStats\n+#include <net.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "cc8ea3622b9fa67f653a66a60442305782603138",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"platformstyle.h\"\n+#include <qt/platformstyle.h>\n \n-#include \"guiconstants.h\"\n+#include <qt/guiconstants.h>\n \n #include <QApplication>\n #include <QColor>"
      },
      {
        "sha": "4d6d5891c98d4082de46b752a7288f8d827acbcc",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"qvalidatedlineedit.h\"\n+#include <qt/qvalidatedlineedit.h>\n \n-#include \"bitcoinaddressvalidator.h\"\n-#include \"guiconstants.h\"\n+#include <qt/bitcoinaddressvalidator.h>\n+#include <qt/guiconstants.h>\n \n QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :\n     QLineEdit(parent),"
      },
      {
        "sha": "af5f6f8fd087439eaf9bae687fd0d9ea9788f39a",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"qvaluecombobox.h\"\n+#include <qt/qvaluecombobox.h>\n \n QValueComboBox::QValueComboBox(QWidget *parent) :\n         QComboBox(parent), role(Qt::UserRole)"
      },
      {
        "sha": "7831d4191a3f544e670ee601c1f2a7e171134c42",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"receivecoinsdialog.h\"\n-#include \"ui_receivecoinsdialog.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"receiverequestdialog.h\"\n-#include \"recentrequeststablemodel.h\"\n-#include \"walletmodel.h\"\n+#include <qt/receivecoinsdialog.h>\n+#include <ui_receivecoinsdialog.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/receiverequestdialog.h>\n+#include <qt/recentrequeststablemodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QAction>\n #include <QCursor>"
      },
      {
        "sha": "3687cca87be5348e68fe3b888c14c5916015ec1f",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_RECEIVECOINSDIALOG_H\n #define BITCOIN_QT_RECEIVECOINSDIALOG_H\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n #include <QDialog>\n #include <QHeaderView>"
      },
      {
        "sha": "1c1707529034424bf936d8ba1a237c1df7e454e8",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"receiverequestdialog.h\"\n-#include \"ui_receiverequestdialog.h\"\n+#include <qt/receiverequestdialog.h>\n+#include <ui_receiverequestdialog.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"walletmodel.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QClipboard>\n #include <QDrag>\n@@ -22,7 +22,7 @@\n #endif\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\" /* for USE_QRCODE */\n+#include <config/bitcoin-config.h> /* for USE_QRCODE */\n #endif\n \n #ifdef USE_QRCODE"
      },
      {
        "sha": "23b81135e2669597e9f1877fbdf5c84e26de69ca",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_RECEIVEREQUESTDIALOG_H\n #define BITCOIN_QT_RECEIVEREQUESTDIALOG_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QDialog>\n #include <QImage>"
      },
      {
        "sha": "4d6e401d0d26bbc7bf1f813d140faada86e51177",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"recentrequeststablemodel.h\"\n+#include <qt/recentrequeststablemodel.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n \n-#include \"clientversion.h\"\n-#include \"streams.h\"\n+#include <clientversion.h>\n+#include <streams.h>\n \n \n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :"
      },
      {
        "sha": "c88b8c442654bf355938305fd1d7b10b8b33af33",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H\n #define BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "3d6f673c7dca0656eb4fdfde0605ed50755341d1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,21 +3,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"rpcconsole.h\"\n-#include \"ui_debugwindow.h\"\n+#include <qt/rpcconsole.h>\n+#include <ui_debugwindow.h>\n \n-#include \"bantablemodel.h\"\n-#include \"clientmodel.h\"\n-#include \"guiutil.h\"\n-#include \"platformstyle.h\"\n-#include \"chainparams.h\"\n-#include \"netbase.h\"\n-#include \"rpc/server.h\"\n-#include \"rpc/client.h\"\n-#include \"util.h\"\n+#include <qt/bantablemodel.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/platformstyle.h>\n+#include <chainparams.h>\n+#include <netbase.h>\n+#include <rpc/server.h>\n+#include <rpc/client.h>\n+#include <util.h>\n \n #include <openssl/crypto.h>\n \n@@ -125,7 +125,7 @@ class QtRPCTimerInterface: public RPCTimerInterface\n };\n \n \n-#include \"rpcconsole.moc\"\n+#include <rpcconsole.moc>\n \n /**\n  * Split shell command line into a list of arguments and optionally execute the command(s)."
      },
      {
        "sha": "5960410cdd0d56d7d8ef9af7a3105028a7fcfc0a",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,10 +5,10 @@\n #ifndef BITCOIN_QT_RPCCONSOLE_H\n #define BITCOIN_QT_RPCCONSOLE_H\n \n-#include \"guiutil.h\"\n-#include \"peertablemodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/peertablemodel.h>\n \n-#include \"net.h\"\n+#include <net.h>\n \n #include <QWidget>\n #include <QCompleter>"
      },
      {
        "sha": "da84a5fa2aee3bb3fb2ef843cd639ac87140be32",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,27 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sendcoinsdialog.h\"\n-#include \"ui_sendcoinsdialog.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"clientmodel.h\"\n-#include \"coincontroldialog.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"sendcoinsentry.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"base58.h\"\n-#include \"chainparams.h\"\n-#include \"wallet/coincontrol.h\"\n-#include \"validation.h\" // mempool and minRelayTxFee\n-#include \"ui_interface.h\"\n-#include \"txmempool.h\"\n-#include \"policy/fees.h\"\n-#include \"wallet/fees.h\"\n+#include <qt/sendcoinsdialog.h>\n+#include <ui_sendcoinsdialog.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/coincontroldialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/sendcoinsentry.h>\n+#include <qt/walletmodel.h>\n+\n+#include <base58.h>\n+#include <chainparams.h>\n+#include <wallet/coincontrol.h>\n+#include <validation.h> // mempool and minRelayTxFee\n+#include <ui_interface.h>\n+#include <txmempool.h>\n+#include <policy/fees.h>\n+#include <wallet/fees.h>\n \n #include <QFontMetrics>\n #include <QMessageBox>"
      },
      {
        "sha": "300116fd9f7901253edca6977151e0070c6da25f",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_SENDCOINSDIALOG_H\n #define BITCOIN_QT_SENDCOINSDIALOG_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QDialog>\n #include <QMessageBox>"
      },
      {
        "sha": "aad5665230fbea7e7a8f489bb3a08c5e9b8490e0",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,15 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sendcoinsentry.h\"\n-#include \"ui_sendcoinsentry.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"addresstablemodel.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"walletmodel.h\"\n+#include <qt/sendcoinsentry.h>\n+#include <ui_sendcoinsentry.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/walletmodel.h>\n \n #include <QApplication>\n #include <QClipboard>"
      },
      {
        "sha": "b470a0d72eb49dfda913bf5706f813921a2490cc",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_SENDCOINSENTRY_H\n #define BITCOIN_QT_SENDCOINSENTRY_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QStackedWidget>\n "
      },
      {
        "sha": "0030fce02695067d055f910758ab8e919a0902f0",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"signverifymessagedialog.h\"\n-#include \"ui_signverifymessagedialog.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"guiutil.h\"\n-#include \"platformstyle.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"base58.h\"\n-#include \"init.h\"\n-#include \"validation.h\" // For strMessageMagic\n-#include \"wallet/wallet.h\"\n+#include <qt/signverifymessagedialog.h>\n+#include <ui_signverifymessagedialog.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/guiutil.h>\n+#include <qt/platformstyle.h>\n+#include <qt/walletmodel.h>\n+\n+#include <base58.h>\n+#include <init.h>\n+#include <validation.h> // For strMessageMagic\n+#include <wallet/wallet.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "5aa1de5553f0fb44afd00c6dc5afd3dae9eacd0e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,21 +3,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"splashscreen.h\"\n+#include <qt/splashscreen.h>\n \n-#include \"networkstyle.h\"\n+#include <qt/networkstyle.h>\n \n-#include \"clientversion.h\"\n-#include \"init.h\"\n-#include \"util.h\"\n-#include \"ui_interface.h\"\n-#include \"version.h\"\n+#include <clientversion.h>\n+#include <init.h>\n+#include <util.h>\n+#include <ui_interface.h>\n+#include <version.h>\n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n+#include <wallet/wallet.h>\n #endif\n \n #include <QApplication>"
      },
      {
        "sha": "c22e1973a622393f032d875cd5e22b44c826e8a7",
        "filename": "src/qt/test/compattests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentrequestplus.h\" // this includes protobuf's port.h which defines its own bswap macos\n+#include <paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n \n-#include \"compattests.h\"\n+#include <qt/test/compattests.h>\n \n-#include \"compat/byteswap.h\"\n+#include <compat/byteswap.h>\n \n void CompatTests::bswapTests()\n {"
      },
      {
        "sha": "7aaaccaa9e379320ce07de5112735454e4050c89",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentservertests.h\"\n+#include <qt/test/paymentservertests.h>\n \n-#include \"optionsmodel.h\"\n-#include \"paymentrequestdata.h\"\n+#include <optionsmodel.h>\n+#include <qt/test/paymentrequestdata.h>\n \n-#include \"amount.h\"\n-#include \"random.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <amount.h>\n+#include <random.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>"
      },
      {
        "sha": "f1dbeae366117ae23a78317a1686280b1bc3f313",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n #define BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n \n-#include \"../paymentserver.h\"\n+#include <qt/test/../paymentserver.h>\n \n #include <QObject>\n #include <QTest>"
      },
      {
        "sha": "2f692af2d250ca7d32030a62e0bab2412a44e9cf",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpcnestedtests.h\"\n-\n-#include \"chainparams.h\"\n-#include \"consensus/validation.h\"\n-#include \"fs.h\"\n-#include \"validation.h\"\n-#include \"rpc/register.h\"\n-#include \"rpc/server.h\"\n-#include \"rpcconsole.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"univalue.h\"\n-#include \"util.h\"\n+#include <qt/test/rpcnestedtests.h>\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <validation.h>\n+#include <rpc/register.h>\n+#include <rpc/server.h>\n+#include <rpcconsole.h>\n+#include <test/test_bitcoin.h>\n+#include <univalue.h>\n+#include <util.h>\n \n #include <QDir>\n #include <QtGlobal>"
      },
      {
        "sha": "04a9d124aa298cecd90e20bcf7a6850661915e82",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -8,8 +8,8 @@\n #include <QObject>\n #include <QTest>\n \n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n+#include <txdb.h>\n+#include <txmempool.h>\n \n class RPCNestedTests : public QObject\n {"
      },
      {
        "sha": "2e11b4f4d68930eda0d2cf951dfd378924de479c",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,18 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"chainparams.h\"\n-#include \"rpcnestedtests.h\"\n-#include \"util.h\"\n-#include \"uritests.h\"\n-#include \"compattests.h\"\n+#include <chainparams.h>\n+#include <qt/test/rpcnestedtests.h>\n+#include <util.h>\n+#include <qt/test/uritests.h>\n+#include <qt/test/compattests.h>\n \n #ifdef ENABLE_WALLET\n-#include \"paymentservertests.h\"\n-#include \"wallettests.h\"\n+#include <qt/test/paymentservertests.h>\n+#include <qt/test/wallettests.h>\n #endif\n \n #include <QApplication>"
      },
      {
        "sha": "e11807d5518cb6dc9107597b70d7e5f12bd18a65",
        "filename": "src/qt/test/uritests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/uritests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/uritests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"uritests.h\"\n+#include <qt/test/uritests.h>\n \n-#include \"guiutil.h\"\n-#include \"walletmodel.h\"\n+#include <guiutil.h>\n+#include <walletmodel.h>\n \n #include <QUrl>\n "
      },
      {
        "sha": "4b7c3bd726a6de1301c4e8a929d4da659552521e",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -1,22 +1,22 @@\n-#include \"wallettests.h\"\n+#include <qt/test/wallettests.h>\n \n-#include \"qt/bitcoinamountfield.h\"\n-#include \"qt/callback.h\"\n-#include \"qt/optionsmodel.h\"\n-#include \"qt/platformstyle.h\"\n-#include \"qt/qvalidatedlineedit.h\"\n-#include \"qt/sendcoinsdialog.h\"\n-#include \"qt/sendcoinsentry.h\"\n-#include \"qt/transactiontablemodel.h\"\n-#include \"qt/transactionview.h\"\n-#include \"qt/walletmodel.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"validation.h\"\n-#include \"wallet/wallet.h\"\n-#include \"qt/overviewpage.h\"\n-#include \"qt/receivecoinsdialog.h\"\n-#include \"qt/recentrequeststablemodel.h\"\n-#include \"qt/receiverequestdialog.h\"\n+#include <qt/bitcoinamountfield.h>\n+#include <qt/callback.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/qvalidatedlineedit.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/sendcoinsentry.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/transactionview.h>\n+#include <qt/walletmodel.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <wallet/wallet.h>\n+#include <qt/overviewpage.h>\n+#include <qt/receivecoinsdialog.h>\n+#include <qt/recentrequeststablemodel.h>\n+#include <qt/receiverequestdialog.h>\n \n #include <QAbstractButton>\n #include <QAction>"
      },
      {
        "sha": "b5e4ccb4067de1906031eb90ef1de3327dcf5b8a",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"trafficgraphwidget.h\"\n-#include \"clientmodel.h\"\n+#include <qt/trafficgraphwidget.h>\n+#include <qt/clientmodel.h>\n \n #include <QPainter>\n #include <QColor>"
      },
      {
        "sha": "3f245e6c33d68a1c9012c03e474a39dd894644a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,21 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactiondesc.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"paymentserver.h\"\n-#include \"transactionrecord.h\"\n-\n-#include \"base58.h\"\n-#include \"consensus/consensus.h\"\n-#include \"validation.h\"\n-#include \"script/script.h\"\n-#include \"timedata.h\"\n-#include \"util.h\"\n-#include \"wallet/db.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/transactiondesc.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/paymentserver.h>\n+#include <qt/transactionrecord.h>\n+\n+#include <base58.h>\n+#include <consensus/consensus.h>\n+#include <validation.h>\n+#include <script/script.h>\n+#include <timedata.h>\n+#include <util.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "44bd19f9f535ca62f2ecaa3a367a3732d8ed74ac",
        "filename": "src/qt/transactiondescdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiondescdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiondescdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactiondescdialog.h\"\n-#include \"ui_transactiondescdialog.h\"\n+#include <qt/transactiondescdialog.h>\n+#include <ui_transactiondescdialog.h>\n \n-#include \"transactiontablemodel.h\"\n+#include <qt/transactiontablemodel.h>\n \n #include <QModelIndex>\n "
      },
      {
        "sha": "15859bf36d9bdbbc4f0eb25e0e34b5babc2b552c",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactionfilterproxy.h\"\n+#include <qt/transactionfilterproxy.h>\n \n-#include \"transactiontablemodel.h\"\n-#include \"transactionrecord.h\"\n+#include <qt/transactiontablemodel.h>\n+#include <qt/transactionrecord.h>\n \n #include <cstdlib>\n "
      },
      {
        "sha": "4bdd9ea6c75352996a4b0c48b75d42846b596432",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONFILTERPROXY_H\n #define BITCOIN_QT_TRANSACTIONFILTERPROXY_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QDateTime>\n #include <QSortFilterProxyModel>"
      },
      {
        "sha": "e3e8377cb90a06cc0ec3dde66eaf8dcf63d61e47",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactionrecord.h\"\n+#include <qt/transactionrecord.h>\n \n-#include \"base58.h\"\n-#include \"consensus/consensus.h\"\n-#include \"validation.h\"\n-#include \"timedata.h\"\n-#include \"wallet/wallet.h\"\n+#include <base58.h>\n+#include <consensus/consensus.h>\n+#include <validation.h>\n+#include <timedata.h>\n+#include <wallet/wallet.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "ee85acf4ac7377766500df4a9efa75fceb1b9edb",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_QT_TRANSACTIONRECORD_H\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n-#include \"amount.h\"\n-#include \"uint256.h\"\n+#include <amount.h>\n+#include <uint256.h>\n \n #include <QList>\n #include <QString>"
      },
      {
        "sha": "cc0dc5ef488f4817c4d6ff7e4124ba2291f8e7ad",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactiontablemodel.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"transactiondesc.h\"\n-#include \"transactionrecord.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"core_io.h\"\n-#include \"validation.h\"\n-#include \"sync.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/transactiontablemodel.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/transactiondesc.h>\n+#include <qt/transactionrecord.h>\n+#include <qt/walletmodel.h>\n+\n+#include <core_io.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <wallet/wallet.h>\n \n #include <QColor>\n #include <QDateTime>"
      },
      {
        "sha": "a7697071638dae7bef8d627a58ed2433f3cb6231",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONTABLEMODEL_H\n #define BITCOIN_QT_TRANSACTIONTABLEMODEL_H\n \n-#include \"bitcoinunits.h\"\n+#include <qt/bitcoinunits.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "92e8e916001c2160ad0f9d0d8f5eef218e330172",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactionview.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"csvmodelwriter.h\"\n-#include \"editaddressdialog.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"transactiondescdialog.h\"\n-#include \"transactionfilterproxy.h\"\n-#include \"transactionrecord.h\"\n-#include \"transactiontablemodel.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"ui_interface.h\"\n+#include <qt/transactionview.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/csvmodelwriter.h>\n+#include <qt/editaddressdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/transactiondescdialog.h>\n+#include <qt/transactionfilterproxy.h>\n+#include <qt/transactionrecord.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/walletmodel.h>\n+\n+#include <ui_interface.h>\n \n #include <QComboBox>\n #include <QDateTimeEdit>"
      },
      {
        "sha": "5b28b347233493da53dd2c3afa0c77f8120535e8",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONVIEW_H\n #define BITCOIN_QT_TRANSACTIONVIEW_H\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n #include <QWidget>\n #include <QKeyEvent>"
      },
      {
        "sha": "2a19a0afe5a9fe052e253ba14d284425291212d6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,23 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"utilitydialog.h\"\n+#include <qt/utilitydialog.h>\n \n-#include \"ui_helpmessagedialog.h\"\n+#include <ui_helpmessagedialog.h>\n \n-#include \"bitcoingui.h\"\n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"intro.h\"\n-#include \"paymentrequestplus.h\"\n-#include \"guiutil.h\"\n+#include <qt/bitcoingui.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/intro.h>\n+#include <qt/paymentrequestplus.h>\n+#include <qt/guiutil.h>\n \n-#include \"clientversion.h\"\n-#include \"init.h\"\n-#include \"util.h\"\n+#include <clientversion.h>\n+#include <init.h>\n+#include <util.h>\n \n #include <stdio.h>\n "
      },
      {
        "sha": "573b3f14128b98f9e5971243911f2c2910d6cd65",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletframe.h\"\n+#include <qt/walletframe.h>\n \n-#include \"bitcoingui.h\"\n-#include \"walletview.h\"\n+#include <qt/bitcoingui.h>\n+#include <qt/walletview.h>\n \n #include <cassert>\n #include <cstdio>"
      },
      {
        "sha": "a38e2336083e9d06960418b982a5623dc5d58409",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,32 +2,32 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletmodel.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"consensus/validation.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"paymentserver.h\"\n-#include \"recentrequeststablemodel.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"transactiontablemodel.h\"\n-\n-#include \"base58.h\"\n-#include \"chain.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"net.h\" // for g_connman\n-#include \"policy/fees.h\"\n-#include \"policy/rbf.h\"\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\" // for GetBoolArg\n-#include \"wallet/coincontrol.h\"\n-#include \"wallet/feebumper.h\"\n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\" // for BackupWallet\n+#include <qt/walletmodel.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <consensus/validation.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/paymentserver.h>\n+#include <qt/recentrequeststablemodel.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/transactiontablemodel.h>\n+\n+#include <base58.h>\n+#include <chain.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <net.h> // for g_connman\n+#include <policy/fees.h>\n+#include <policy/rbf.h>\n+#include <sync.h>\n+#include <ui_interface.h>\n+#include <util.h> // for GetBoolArg\n+#include <wallet/coincontrol.h>\n+#include <wallet/feebumper.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h> // for BackupWallet\n \n #include <stdint.h>\n "
      },
      {
        "sha": "028146c187d86495d2c869e498fee2a161b4dad2",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,10 +5,10 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n-#include \"paymentrequestplus.h\"\n-#include \"walletmodeltransaction.h\"\n+#include <qt/paymentrequestplus.h>\n+#include <qt/walletmodeltransaction.h>\n \n-#include \"support/allocators/secure.h\"\n+#include <support/allocators/secure.h>\n \n #include <map>\n #include <vector>"
      },
      {
        "sha": "3bf3e295ffc79065a18925188d2f4ae1dda87305",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletmodeltransaction.h\"\n+#include <qt/walletmodeltransaction.h>\n \n-#include \"policy/policy.h\"\n-#include \"wallet/wallet.h\"\n+#include <policy/policy.h>\n+#include <wallet/wallet.h>\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :\n     recipients(_recipients),"
      },
      {
        "sha": "d75875eefd684dfa875168a3bd77b91ab0c73ca6",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETMODELTRANSACTION_H\n #define BITCOIN_QT_WALLETMODELTRANSACTION_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QObject>\n "
      },
      {
        "sha": "a589fad9bd52592ca4bff36f60d861a05327a9b5",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletview.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"askpassphrasedialog.h\"\n-#include \"bitcoingui.h\"\n-#include \"clientmodel.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"overviewpage.h\"\n-#include \"platformstyle.h\"\n-#include \"receivecoinsdialog.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"signverifymessagedialog.h\"\n-#include \"transactiontablemodel.h\"\n-#include \"transactionview.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"ui_interface.h\"\n+#include <qt/walletview.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/askpassphrasedialog.h>\n+#include <qt/bitcoingui.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/overviewpage.h>\n+#include <qt/platformstyle.h>\n+#include <qt/receivecoinsdialog.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/signverifymessagedialog.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/transactionview.h>\n+#include <qt/walletmodel.h>\n+\n+#include <ui_interface.h>\n \n #include <QAction>\n #include <QActionGroup>"
      },
      {
        "sha": "4c908741356c6afa91af0ce15c1ba92b535e3579",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETVIEW_H\n #define BITCOIN_QT_WALLETVIEW_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QStackedWidget>\n "
      },
      {
        "sha": "aa6c27343144aff03190dbbaba74baeb1b312423",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"winshutdownmonitor.h\"\n+#include <qt/winshutdownmonitor.h>\n \n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-#include \"init.h\"\n-#include \"util.h\"\n+#include <init.h>\n+#include <util.h>\n \n #include <windows.h>\n "
      },
      {
        "sha": "3075a771829c8aec12fb8cab05b97032c0ae8fda",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include <random.h>\n \n-#include \"crypto/sha512.h\"\n-#include \"support/cleanse.h\"\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n #ifdef WIN32\n-#include \"compat.h\" // for Windows API\n+#include <compat.h> // for Windows API\n #include <wincrypt.h>\n #endif\n-#include \"util.h\"             // for LogPrint()\n-#include \"utilstrencodings.h\" // for GetTime()\n+#include <util.h>             // for LogPrint()\n+#include <utilstrencodings.h> // for GetTime()\n \n #include <stdlib.h>\n #include <limits>"
      },
      {
        "sha": "93099176896e88df6f9f74fe3dd742c1100611d4",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_RANDOM_H\n #define BITCOIN_RANDOM_H\n \n-#include \"crypto/chacha20.h\"\n-#include \"crypto/common.h\"\n-#include \"uint256.h\"\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <uint256.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "86ee7804a382bcf77fe6442293e38d213847a44f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,20 +3,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"core_io.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"validation.h\"\n-#include \"httpserver.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"rpc/server.h\"\n-#include \"streams.h\"\n-#include \"sync.h\"\n-#include \"txmempool.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <core_io.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <validation.h>\n+#include <httpserver.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <txmempool.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <boost/algorithm/string.hpp>\n "
      },
      {
        "sha": "601965d4c4c2164db15ea9e6b39755ad63598126",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,28 +3,28 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/blockchain.h\"\n-\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"checkpoints.h\"\n-#include \"coins.h\"\n-#include \"consensus/validation.h\"\n-#include \"validation.h\"\n-#include \"core_io.h\"\n-#include \"policy/feerate.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/transaction.h\"\n-#include \"rpc/server.h\"\n-#include \"streams.h\"\n-#include \"sync.h\"\n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"hash.h\"\n-#include \"warnings.h\"\n+#include <rpc/blockchain.h>\n+\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <checkpoints.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <validation.h>\n+#include <core_io.h>\n+#include <policy/feerate.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <hash.h>\n+#include <warnings.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a595b6ec27268ba5f4e00c084f6c5aba761cd54e",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/client.h\"\n-#include \"rpc/protocol.h\"\n-#include \"util.h\"\n+#include <rpc/client.h>\n+#include <rpc/protocol.h>\n+#include <util.h>\n \n #include <set>\n #include <stdint.h>"
      },
      {
        "sha": "1753ecd3fca4b784efb47ea4126e38eca5cfad31",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,28 +3,28 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/params.h\"\n-#include \"consensus/validation.h\"\n-#include \"core_io.h\"\n-#include \"init.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"net.h\"\n-#include \"policy/fees.h\"\n-#include \"pow.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"rpc/mining.h\"\n-#include \"rpc/server.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"validationinterface.h\"\n-#include \"warnings.h\"\n+#include <base58.h>\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <init.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <policy/fees.h>\n+#include <pow.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/mining.h>\n+#include <rpc/server.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <validationinterface.h>\n+#include <warnings.h>\n \n #include <memory>\n #include <stdint.h>"
      },
      {
        "sha": "8d4627315949f93e8d001b5fae7c16fad3abee47",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_RPC_MINING_H\n #define BITCOIN_RPC_MINING_H\n \n-#include \"script/script.h\"\n+#include <script/script.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "b3e22f5f106e9e7173d2aa4a0514a42a4165edc5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,27 +3,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-#include \"chain.h\"\n-#include \"clientversion.h\"\n-#include \"core_io.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"init.h\"\n-#include \"validation.h\"\n-#include \"httpserver.h\"\n-#include \"net.h\"\n-#include \"netbase.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"rpc/server.h\"\n-#include \"timedata.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <base58.h>\n+#include <chain.h>\n+#include <clientversion.h>\n+#include <core_io.h>\n+#include <crypto/ripemd160.h>\n+#include <init.h>\n+#include <validation.h>\n+#include <httpserver.h>\n+#include <net.h>\n+#include <netbase.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/server.h>\n+#include <timedata.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n-#include \"wallet/rpcwallet.h\"\n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n #endif\n-#include \"warnings.h\"\n+#include <warnings.h>\n \n #include <stdint.h>\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "322a3e0cbdeecd65db1df65d5d02d5be9ce4a5af",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/server.h\"\n-\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"core_io.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n-#include \"net_processing.h\"\n-#include \"netbase.h\"\n-#include \"policy/policy.h\"\n-#include \"protocol.h\"\n-#include \"sync.h\"\n-#include \"timedata.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n-#include \"warnings.h\"\n+#include <rpc/server.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <core_io.h>\n+#include <validation.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netbase.h>\n+#include <policy/policy.h>\n+#include <rpc/protocol.h>\n+#include <sync.h>\n+#include <timedata.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n+#include <warnings.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "4cb28c21042fe48515a66a0440e24403f9d05a4d",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,14 +3,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/protocol.h\"\n-\n-#include \"random.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"utiltime.h\"\n-#include \"version.h\"\n+#include <rpc/protocol.h>\n+\n+#include <random.h>\n+#include <tinyformat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+#include <version.h>\n \n #include <stdint.h>\n #include <fstream>"
      },
      {
        "sha": "4b9bd41994d17e5c32603e8f0ea38f83101d81bd",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_RPCPROTOCOL_H\n #define BITCOIN_RPCPROTOCOL_H\n \n-#include \"fs.h\"\n+#include <fs.h>\n \n #include <list>\n #include <map>"
      },
      {
        "sha": "e65959bf0e9efecd92e9c2ffb782bfcde48a6856",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,32 +3,32 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-#include \"chain.h\"\n-#include \"coins.h\"\n-#include \"consensus/validation.h\"\n-#include \"core_io.h\"\n-#include \"init.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"validationinterface.h\"\n-#include \"merkleblock.h\"\n-#include \"net.h\"\n-#include \"policy/policy.h\"\n-#include \"policy/rbf.h\"\n-#include \"primitives/transaction.h\"\n-#include \"rpc/safemode.h\"\n-#include \"rpc/server.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/sign.h\"\n-#include \"script/standard.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n+#include <base58.h>\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <init.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <merkleblock.h>\n+#include <net.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <rpc/safemode.h>\n+#include <rpc/server.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/sign.h>\n+#include <script/standard.h>\n+#include <txmempool.h>\n+#include <uint256.h>\n+#include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n-#include \"wallet/rpcwallet.h\"\n-#include \"wallet/wallet.h\"\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n #endif\n \n #include <future>"
      },
      {
        "sha": "9f3a9d30b8533a7ee58b9cc87f3b22671def247c",
        "filename": "src/rpc/safemode.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/safemode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/safemode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/safemode.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -1,8 +1,8 @@\n-#include \"safemode.h\"\n+#include <rpc/safemode.h>\n \n-#include \"rpc/protocol.h\"\n-#include \"util.h\"\n-#include \"warnings.h\"\n+#include <rpc/protocol.h>\n+#include <util.h>\n+#include <warnings.h>\n \n void ObserveSafeMode()\n {"
      },
      {
        "sha": "fa813982721c8d2811a9438628acb216b209de42",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/server.h\"\n-\n-#include \"base58.h\"\n-#include \"fs.h\"\n-#include \"init.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <rpc/server.h>\n+\n+#include <base58.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <random.h>\n+#include <sync.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "cd201bf31686fa81494c06890f99005eefca179e",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_RPCSERVER_H\n #define BITCOIN_RPCSERVER_H\n \n-#include \"amount.h\"\n-#include \"rpc/protocol.h\"\n-#include \"uint256.h\"\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n \n #include <list>\n #include <map>"
      },
      {
        "sha": "260f6fa60e7ce0908e730a7379819976844ec562",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"scheduler.h\"\n+#include <scheduler.h>\n \n-#include \"random.h\"\n-#include \"reverselock.h\"\n+#include <random.h>\n+#include <reverselock.h>\n \n #include <assert.h>\n #include <boost/bind.hpp>"
      },
      {
        "sha": "b99f1653434c0c01af6495a542d952baca5322ce",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/thread.hpp>\n #include <map>\n \n-#include \"sync.h\"\n+#include <sync.h>\n \n //\n // Simple class for background tasks that should be run"
      },
      {
        "sha": "77edc85b8ccfdda9e3fd71616c4a8083039915b2",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinconsensus.h\"\n+#include <script/bitcoinconsensus.h>\n \n-#include \"primitives/transaction.h\"\n-#include \"pubkey.h\"\n-#include \"script/interpreter.h\"\n-#include \"version.h\"\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/interpreter.h>\n+#include <version.h>\n \n namespace {\n "
      },
      {
        "sha": "f09cd59b9281bca9e4e5326d5ed035b7a489a795",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -9,7 +9,7 @@\n #include <stdint.h>\n \n #if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n   #if defined(_WIN32)\n     #if defined(DLL_EXPORT)\n       #if defined(HAVE_FUNC_ATTRIBUTE_DLLEXPORT)"
      },
      {
        "sha": "d6348f17d88e841e13f5158c91045d2a265e64fb",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"interpreter.h\"\n-\n-#include \"primitives/transaction.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha256.h\"\n-#include \"pubkey.h\"\n-#include \"script/script.h\"\n-#include \"uint256.h\"\n+#include <script/interpreter.h>\n+\n+#include <primitives/transaction.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <uint256.h>\n \n typedef std::vector<unsigned char> valtype;\n "
      },
      {
        "sha": "2eae68179e40fde8197773ea73d28cf1f0a31ed2",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n-#include \"script_error.h\"\n-#include \"primitives/transaction.h\"\n+#include <script/script_error.h>\n+#include <primitives/transaction.h>\n \n #include <vector>\n #include <stdint.h>"
      },
      {
        "sha": "60bef3b7019f1708e76e3c0b6593b742a6369247",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,13 +3,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"ismine.h\"\n+#include <script/ismine.h>\n \n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"script/sign.h\"\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <script/sign.h>\n \n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "77ffa824324a583a7501b9282dfbd5184d903225",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SCRIPT_ISMINE_H\n #define BITCOIN_SCRIPT_ISMINE_H\n \n-#include \"script/standard.h\"\n+#include <script/standard.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a7bfb170eb94503e91bfc2974e3e15624ea5ce08",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script.h\"\n+#include <script/script.h>\n \n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n+#include <tinyformat.h>\n+#include <utilstrencodings.h>\n \n const char* GetOpName(opcodetype opcode)\n {"
      },
      {
        "sha": "263db62edf3aa5d1b54e60c1a1ae3f7ed5fa9354",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"crypto/common.h\"\n-#include \"prevector.h\"\n-#include \"serialize.h\"\n+#include <crypto/common.h>\n+#include <prevector.h>\n+#include <serialize.h>\n \n #include <assert.h>\n #include <climits>"
      },
      {
        "sha": "32aa639ac421dc9580fd98c876b527a3675f55fd",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script_error.h\"\n+#include <script/script_error.h>\n \n const char* ScriptErrorString(const ScriptError serror)\n {"
      },
      {
        "sha": "88d1d675595652158a4d35b1ac5ccf3ee84af20b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sigcache.h\"\n+#include <script/sigcache.h>\n \n-#include \"memusage.h\"\n-#include \"pubkey.h\"\n-#include \"random.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n+#include <memusage.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <util.h>\n \n-#include \"cuckoocache.h\"\n+#include <cuckoocache.h>\n #include <boost/thread.hpp>\n \n namespace {"
      },
      {
        "sha": "1019061fbb5a90b4cb0d3fda470bfe6a89e538cc",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGCACHE_H\n #define BITCOIN_SCRIPT_SIGCACHE_H\n \n-#include \"script/interpreter.h\"\n+#include <script/interpreter.h>\n \n #include <vector>\n "
      },
      {
        "sha": "117a4d8a52aa0d2c61a58de7f3f3cb10df327fba",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,14 +3,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script/sign.h\"\n-\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/standard.h\"\n-#include \"uint256.h\"\n+#include <script/sign.h>\n+\n+#include <key.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <uint256.h>\n \n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "400c0c08658b45737d3a9ad2ce1b34c8cd8dffe9",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGN_H\n #define BITCOIN_SCRIPT_SIGN_H\n \n-#include \"script/interpreter.h\"\n+#include <script/interpreter.h>\n \n class CKeyID;\n class CKeyStore;"
      },
      {
        "sha": "b7b33fade6c35dfceffb381de55f28608cedffd5",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script/standard.h\"\n+#include <script/standard.h>\n \n-#include \"pubkey.h\"\n-#include \"script/script.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "3eeeabdc159bd7c026622e783af2b4c987c299a0",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_SCRIPT_STANDARD_H\n #define BITCOIN_SCRIPT_STANDARD_H\n \n-#include \"script/interpreter.h\"\n-#include \"uint256.h\"\n+#include <script/interpreter.h>\n+#include <uint256.h>\n \n #include <boost/variant.hpp>\n "
      },
      {
        "sha": "62ecde48237c1ea78c4a44673aec60d44a2e53d2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SERIALIZE_H\n #define BITCOIN_SERIALIZE_H\n \n-#include \"compat/endian.h\"\n+#include <compat/endian.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -21,7 +21,7 @@\n #include <utility>\n #include <vector>\n \n-#include \"prevector.h\"\n+#include <prevector.h>\n \n static const unsigned int MAX_SIZE = 0x02000000;\n "
      },
      {
        "sha": "a212691f6d8caf2dc0daf05023d00698eaded1fa",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_STREAMS_H\n #define BITCOIN_STREAMS_H\n \n-#include \"support/allocators/zeroafterfree.h\"\n-#include \"serialize.h\"\n+#include <support/allocators/zeroafterfree.h>\n+#include <serialize.h>\n \n #include <algorithm>\n #include <assert.h>"
      },
      {
        "sha": "7cd031bfe864e730abe4706502c49384e75034f9",
        "filename": "src/support/allocators/secure.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n #define BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n \n-#include \"support/lockedpool.h\"\n-#include \"support/cleanse.h\"\n+#include <support/lockedpool.h>\n+#include <support/cleanse.h>\n \n #include <string>\n "
      },
      {
        "sha": "23ef96c13f96a68aac61336ffb11eca961c9ca36",
        "filename": "src/support/allocators/zeroafterfree.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/allocators/zeroafterfree.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/allocators/zeroafterfree.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/zeroafterfree.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H\n #define BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H\n \n-#include \"support/cleanse.h\"\n+#include <support/cleanse.h>\n \n #include <memory>\n #include <vector>"
      },
      {
        "sha": "82cdfe707bb2a377263f956f00a8a404b4061ce1",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"cleanse.h\"\n+#include <support/cleanse.h>\n \n #include <cstring>\n "
      },
      {
        "sha": "98e8694181ea4d818681c66cf508f6c64349163e",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"support/lockedpool.h\"\n-#include \"support/cleanse.h\"\n+#include <support/lockedpool.h>\n+#include <support/cleanse.h>\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #ifdef WIN32"
      },
      {
        "sha": "fcc6ddc354e3836694c157d9ad5c66e18899f709",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sync.h\"\n+#include <sync.h>\n \n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <stdio.h>\n "
      },
      {
        "sha": "b0889be767546beedc1964e0b7fdc06bdf3929b3",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SYNC_H\n #define BITCOIN_SYNC_H\n \n-#include \"threadsafety.h\"\n+#include <threadsafety.h>\n \n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/mutex.hpp>"
      },
      {
        "sha": "6be176a1ad917682ba8dae78973ae5e48e456e65",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,17 +4,17 @@\n \n // Unit tests for denial-of-service detection/prevention code\n \n-#include \"chainparams.h\"\n-#include \"keystore.h\"\n-#include \"net.h\"\n-#include \"net_processing.h\"\n-#include \"pow.h\"\n-#include \"script/sign.h\"\n-#include \"serialize.h\"\n-#include \"util.h\"\n-#include \"validation.h\"\n-\n-#include \"test/test_bitcoin.h\"\n+#include <chainparams.h>\n+#include <keystore.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <pow.h>\n+#include <script/sign.h>\n+#include <serialize.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+#include <test/test_bitcoin.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "609b1a05d32191c269e8913b17d812b47c5ab821",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -1,14 +1,14 @@\n // Copyright (c) 2012-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include \"addrman.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <addrman.h>\n+#include <test/test_bitcoin.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n \n-#include \"hash.h\"\n-#include \"netbase.h\"\n-#include \"random.h\"\n+#include <hash.h>\n+#include <netbase.h>\n+#include <random.h>\n \n class CAddrManTest : public CAddrMan\n {"
      },
      {
        "sha": "83fa3b76be935c30e077360aabdfe1a4bdf9066f",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n+#include <util.h>\n \n-#include \"support/allocators/secure.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <support/allocators/secure.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "7ebbd22c5d4262175cdf9d3c8b08763f1a787478",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n-#include \"policy/feerate.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <amount.h>\n+#include <policy/feerate.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "eb3148a1deb2908a9db4c7af0b72f6e615215f98",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -8,11 +8,11 @@\n #include <iomanip>\n #include <limits>\n #include <cmath>\n-#include \"uint256.h\"\n-#include \"arith_uint256.h\"\n+#include <uint256.h>\n+#include <arith_uint256.h>\n #include <string>\n-#include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <version.h>\n+#include <test/test_bitcoin.h>\n \n BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n "
      },
      {
        "sha": "abf236b953a1a9bcf5d8890dc30ef669545075f8",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "78e85d04c6ac6177df13e199d6964fb0401783c8",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-\n-#include \"data/base58_encode_decode.json.h\"\n-#include \"data/base58_keys_invalid.json.h\"\n-#include \"data/base58_keys_valid.json.h\"\n-\n-#include \"key.h\"\n-#include \"script/script.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <base58.h>\n+\n+#include <data/base58_encode_decode.json.h>\n+#include <data/base58_keys_invalid.json.h>\n+#include <data/base58_keys_valid.json.h>\n+\n+#include <key.h>\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "46b3a04f35890b263604863bfe4d104026cc15ee",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "495290c8d963af451b9e58855cbc1cb76f76604f",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bech32.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <bech32.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "e3e727439b1d7d65e0906193f799610a23a8ffad",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,12 +4,12 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"base58.h\"\n-#include \"key.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <base58.h>\n+#include <key.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "718b5bdfb9ee215f8dc83e7da7af008d47b2cf59",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"blockencodings.h\"\n-#include \"consensus/merkle.h\"\n-#include \"chainparams.h\"\n-#include \"random.h\"\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <chainparams.h>\n+#include <random.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "fdd30be0b1ad8ed2af0b6ef41685543578d37489",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,20 +2,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bloom.h\"\n-\n-#include \"base58.h\"\n-#include \"clientversion.h\"\n-#include \"key.h\"\n-#include \"merkleblock.h\"\n-#include \"primitives/block.h\"\n-#include \"random.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <bloom.h>\n+\n+#include <base58.h>\n+#include <clientversion.h>\n+#include <key.h>\n+#include <merkleblock.h>\n+#include <primitives/block.h>\n+#include <random.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "ab4f08b999d76bf5cfb3faa292d03dfeda10f918",
        "filename": "src/test/bswap_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bswap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/bswap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bswap_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compat/byteswap.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <compat/byteswap.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "d8ad0d9165db4030ba43e8ceac439151d02f3e25",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n-#include \"utiltime.h\"\n-#include \"validation.h\"\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n \n-#include \"test/test_bitcoin.h\"\n-#include \"checkqueue.h\"\n+#include <test/test_bitcoin.h>\n+#include <checkqueue.h>\n #include <boost/test/unit_test.hpp>\n #include <boost/thread.hpp>\n #include <atomic>\n@@ -18,7 +18,7 @@\n \n #include <unordered_set>\n #include <memory>\n-#include \"random.h\"\n+#include <random.h>\n \n // BasicTestingSetup not sufficient because nScriptCheckThreads is not set\n // otherwise."
      },
      {
        "sha": "7c3d02ba63c3e94e930d2456f26c4ed9899a5ed3",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coins.h\"\n-#include \"script/standard.h\"\n-#include \"uint256.h\"\n-#include \"undo.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"validation.h\"\n-#include \"consensus/validation.h\"\n+#include <coins.h>\n+#include <script/standard.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <consensus/validation.h>\n \n #include <vector>\n #include <map>"
      },
      {
        "sha": "87e75d802096082475471f687659cea0bccb6ab1",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compressor.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <compressor.h>\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a63d62bb373ff3090cb71243fcf20f1caa1ed2e1",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/aes.h\"\n-#include \"crypto/chacha20.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha256.h\"\n-#include \"crypto/sha512.h\"\n-#include \"crypto/hmac_sha256.h\"\n-#include \"crypto/hmac_sha512.h\"\n-#include \"random.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <crypto/aes.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <crypto/sha512.h>\n+#include <crypto/hmac_sha256.h>\n+#include <crypto/hmac_sha512.h>\n+#include <random.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "32d46da984dad91a50eb429273e996e20d959bfa",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <boost/test/unit_test.hpp>\n-#include \"cuckoocache.h\"\n-#include \"script/sigcache.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"random.h\"\n+#include <cuckoocache.h>\n+#include <script/sigcache.h>\n+#include <test/test_bitcoin.h>\n+#include <random.h>\n #include <thread>\n \n /** Test Suite for CuckooCache"
      },
      {
        "sha": "2e1e4da72f32e2dc808a511fdccab887286c7526",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"dbwrapper.h\"\n-#include \"uint256.h\"\n-#include \"random.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <dbwrapper.h>\n+#include <uint256.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "3c3925869360ec70a9ec5874722ff1e69e06e713",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "68f445d1424ced44910834cd32c9798270dd29bb",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"hash.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <hash.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "7b9d7a63982465246d3b7f1830bba45a7dd70b68",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n-\n-#include \"base58.h\"\n-#include \"script/script.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <key.h>\n+\n+#include <base58.h>\n+#include <script/script.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "90730cd7b512ede01e77345275572999066485b6",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"limitedmap.h\"\n+#include <limitedmap.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "4be32f7628247198f4efbc65020bc49bd87ebc3f",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n+#include <chainparams.h>\n+#include <validation.h>\n+#include <net.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/signals2/signal.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "a694b870fed7d8255dee90e4e48cf443633c0de5",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/policy.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n+#include <policy/policy.h>\n+#include <txmempool.h>\n+#include <util.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n #include <list>"
      },
      {
        "sha": "ee48d96ad93745666c3584813013656c11136442",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/merkle.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/merkle.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "37a1a84136c603ca4ed332df6dd25ecca4362f6f",
        "filename": "src/test/merkleblock_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/merkleblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/merkleblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"merkleblock.h\"\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <merkleblock.h>\n+#include <uint256.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "b1a2032ea8afa8808583ab348fb02b93b4da6648",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"coins.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/merkle.h\"\n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/validation.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"policy/policy.h\"\n-#include \"pubkey.h\"\n-#include \"script/standard.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include \"test/test_bitcoin.h\"\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <txmempool.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+\n+#include <test/test_bitcoin.h>\n \n #include <memory>\n "
      },
      {
        "sha": "ffba7d6d221c88b2bf5f65b1e5fd77b7b5818353",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,16 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/sign.h\"\n-#include \"script/ismine.h\"\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <key.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/interpreter.h>\n+#include <script/sign.h>\n+#include <script/ismine.h>\n+#include <uint256.h>\n+#include <test/test_bitcoin.h>\n \n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "b4176a2b854974f44eede52c9400417550f15806",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -1,17 +1,17 @@\n // Copyright (c) 2012-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include \"addrman.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <addrman.h>\n+#include <test/test_bitcoin.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n-#include \"hash.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"net.h\"\n-#include \"netbase.h\"\n-#include \"chainparams.h\"\n-#include \"util.h\"\n+#include <hash.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <net.h>\n+#include <netbase.h>\n+#include <chainparams.h>\n+#include <util.h>\n \n class CAddrManSerializationMock : public CAddrMan\n {"
      },
      {
        "sha": "f3a9b1fc65f516a69eb2d0438e05dfb3eff0fdc7",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"netbase.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"utilstrencodings.h\"\n+#include <netbase.h>\n+#include <test/test_bitcoin.h>\n+#include <utilstrencodings.h>\n \n #include <string>\n "
      },
      {
        "sha": "b7b632be3af7b9e38b96a2c42a76b9a49f8300b8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/merkle.h\"\n-#include \"merkleblock.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"uint256.h\"\n-#include \"arith_uint256.h\"\n-#include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/merkle.h>\n+#include <merkleblock.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <arith_uint256.h>\n+#include <version.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "d8026e4468eebddf87734de081fd5581b72a12ac",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/policy.h\"\n-#include \"policy/fees.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n+#include <policy/policy.h>\n+#include <policy/fees.h>\n+#include <txmempool.h>\n+#include <uint256.h>\n+#include <util.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "2837537c9ad8da9f918f6d72772ec9ce7118a49b",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"pow.h\"\n-#include \"random.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <pow.h>\n+#include <random.h>\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "1327d676506e5be4c7c5d476eeb56c2b3a4c555a",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,13 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <vector>\n-#include \"prevector.h\"\n+#include <prevector.h>\n \n-#include \"reverse_iterator.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "781b1e242d63920858d3ad08c878ec53f8192a59",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -10,9 +10,9 @@\n #include <map>\n #include <stdlib.h>\n \n-#include \"support/events.h\"\n+#include <support/events.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "1ca5a53d72feb35f73ef55490ae3661c6d5cd193",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include <random.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "86d6161e208e4bea3eea62a1b8020b88694e7a89",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"reverselock.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <reverselock.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "710d09ead6594971d0a2c821a7a66f619d17bb3e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/server.h\"\n-#include \"rpc/client.h\"\n+#include <rpc/server.h>\n+#include <rpc/client.h>\n \n-#include \"base58.h\"\n-#include \"core_io.h\"\n-#include \"netbase.h\"\n+#include <base58.h>\n+#include <core_io.h>\n+#include <netbase.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "b3ec6d34c73584c7d25ff7954b0db2dfb10c0bb8",
        "filename": "src/test/sanity_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compat/sanity.h\"\n-#include \"key.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <compat/sanity.h>\n+#include <key.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "7e86eed1c59455f6661ced38ce68a717fc2b9bcd",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n-#include \"scheduler.h\"\n+#include <random.h>\n+#include <scheduler.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/bind.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "5a64aa39593e5f12646319f2173e47aeae290cba",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/tx_verify.h\"\n-#include \"core_io.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"policy/policy.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/sign.h\"\n-#include \"script/ismine.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/tx_verify.h>\n+#include <core_io.h>\n+#include <key.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/sign.h>\n+#include <script/ismine.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "19060eccc939572e4bd8794ca1254efc04455007",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"script/ismine.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/standard.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/ismine.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "7a92889a6b8c2191dac66376e442a5778b0b44ca",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,21 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"data/script_tests.json.h\"\n-\n-#include \"core_io.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/sign.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"rpc/server.h\"\n+#include <data/script_tests.json.h>\n+\n+#include <core_io.h>\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/sign.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+#include <rpc/server.h>\n \n #if defined(HAVE_CONSENSUS_LIB)\n-#include \"script/bitcoinconsensus.h\"\n+#include <script/bitcoinconsensus.h>\n #endif\n \n #include <fstream>"
      },
      {
        "sha": "ad15427a9be9cf3d4564c2161de5d4d2e8ab31e3",
        "filename": "src/test/scriptnum10.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/scriptnum10.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/scriptnum10.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum10.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -12,7 +12,7 @@\n #include <stdint.h>\n #include <string>\n #include <vector>\n-#include \"assert.h\"\n+#include <assert.h>\n \n class scriptnum10_error : public std::runtime_error\n {"
      },
      {
        "sha": "aef500174a7e23e0ac16339eb1f7959aa28d0537",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"scriptnum10.h\"\n-#include \"script/script.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <test/scriptnum10.h>\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n #include <limits.h>"
      },
      {
        "sha": "28ed2bfeb0369ba0953daec6b8586eddc00f3a08",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"hash.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <serialize.h>\n+#include <streams.h>\n+#include <hash.h>\n+#include <test/test_bitcoin.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "c2d7b768e91770f9fe3e6193ef431dd48799c272",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/validation.h\"\n-#include \"data/sighash.json.h\"\n-#include \"hash.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <data/sighash.json.h>\n+#include <hash.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <iostream>\n "
      },
      {
        "sha": "891cd1e1d899c45906b94dcc490a2cb5de7e4279",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/validation.h\"\n-#include \"pubkey.h\"\n-#include \"key.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <pubkey.h>\n+#include <key.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <uint256.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "1ffd9f2b429b4ae3a040bc850b67f0015112b509",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <chain.h>\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "3636e6c33278008d063f5eac1a7b20e5bf948f75",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"streams.h\"\n-#include \"support/allocators/zeroafterfree.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <streams.h>\n+#include <support/allocators/zeroafterfree.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/assign/std/vector.hpp> // for 'operator+=()'\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "419106194e5684beee0342c2ba79f7e2669241f8",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,26 +2,26 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"test_bitcoin.h\"\n-\n-#include \"chainparams.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/validation.h\"\n-#include \"crypto/sha256.h\"\n-#include \"fs.h\"\n-#include \"key.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"net_processing.h\"\n-#include \"pubkey.h\"\n-#include \"random.h\"\n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n-#include \"ui_interface.h\"\n-#include \"streams.h\"\n-#include \"rpc/server.h\"\n-#include \"rpc/register.h\"\n-#include \"script/sigcache.h\"\n+#include <test/test_bitcoin.h>\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/validation.h>\n+#include <crypto/sha256.h>\n+#include <fs.h>\n+#include <key.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <net_processing.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <streams.h>\n+#include <rpc/server.h>\n+#include <rpc/register.h>\n+#include <script/sigcache.h>\n \n #include <memory>\n "
      },
      {
        "sha": "80a9cbaeea3be5c332030e680ec831ee81d6ace4",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -5,14 +5,14 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n-#include \"chainparamsbase.h\"\n-#include \"fs.h\"\n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"random.h\"\n-#include \"scheduler.h\"\n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n+#include <chainparamsbase.h>\n+#include <fs.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n \n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "319d81187abf60facd2363f85b362e6773574dd8",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -3,23 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"consensus/merkle.h\"\n-#include \"primitives/block.h\"\n-#include \"script/script.h\"\n-#include \"addrman.h\"\n-#include \"chain.h\"\n-#include \"coins.h\"\n-#include \"compressor.h\"\n-#include \"net.h\"\n-#include \"protocol.h\"\n-#include \"streams.h\"\n-#include \"undo.h\"\n-#include \"version.h\"\n-#include \"pubkey.h\"\n-#include \"blockencodings.h\"\n+#include <consensus/merkle.h>\n+#include <primitives/block.h>\n+#include <script/script.h>\n+#include <addrman.h>\n+#include <chain.h>\n+#include <coins.h>\n+#include <compressor.h>\n+#include <net.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <undo.h>\n+#include <version.h>\n+#include <pubkey.h>\n+#include <blockencodings.h>\n \n #include <stdint.h>\n #include <unistd.h>"
      },
      {
        "sha": "8d81ff6fc65c49f058f80b5d686e9bd3c3102a24",
        "filename": "src/test/test_bitcoin_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/test_bitcoin_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_main.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -4,7 +4,7 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n-#include \"net.h\"\n+#include <net.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "9ff95bd2b0840fc40a333ad278af50d19d087ddc",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n-#include \"timedata.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <timedata.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "d0aa8659c278824d6047fa6eba5e4fb811f0cacd",
        "filename": "src/test/torcontrol_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/torcontrol_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/torcontrol_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/torcontrol_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n-#include \"test/test_bitcoin.h\"\n-#include \"torcontrol.cpp\"\n+#include <test/test_bitcoin.h>\n+#include <torcontrol.cpp>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "8ebd54499fd7170605bac1e2f414b83bdc8b1f47",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"data/tx_invalid.json.h\"\n-#include \"data/tx_valid.json.h\"\n-#include \"test/test_bitcoin.h\"\n-\n-#include \"clientversion.h\"\n-#include \"checkqueue.h\"\n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/validation.h\"\n-#include \"core_io.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"policy/policy.h\"\n-#include \"script/script.h\"\n-#include \"script/sign.h\"\n-#include \"script/script_error.h\"\n-#include \"script/standard.h\"\n-#include \"utilstrencodings.h\"\n+#include <data/tx_invalid.json.h>\n+#include <data/tx_valid.json.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <clientversion.h>\n+#include <checkqueue.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <key.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/script_error.h>\n+#include <script/standard.h>\n+#include <utilstrencodings.h>\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "fa49b9c33b5fa5d2316cb439e7271c4f61d15cfc",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -2,20 +2,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/validation.h\"\n-#include \"key.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"pubkey.h\"\n-#include \"txmempool.h\"\n-#include \"random.h\"\n-#include \"script/standard.h\"\n-#include \"script/sign.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"utiltime.h\"\n-#include \"core_io.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <pubkey.h>\n+#include <txmempool.h>\n+#include <random.h>\n+#include <script/standard.h>\n+#include <script/sign.h>\n+#include <test/test_bitcoin.h>\n+#include <utiltime.h>\n+#include <core_io.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "40ef9adb2e9bdc0dc1e0276d07cf06e085047351",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445343f6c045d0d24dd34fc957534cc487f7f8/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "patch": "@@ -1,10 +1,10 @@\n // Copyright (c) 2011-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include \"arith_uint256.h\"\n-#include \"uint256.h\"\n-#include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <arith_uint256.h>\n+#include <uint256.h>\n+#include <version.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjU2ZWM5NjlmY2JlZGQ4N2ViMGNmNDNjMTZlYjk5MWFjYTMwMGQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-15T15:18:36Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:02Z"
      },
      "message": "qt: refactor: Use absolute include paths in .ui files",
      "tree": {
        "sha": "4cfdd1708635061dc0a50ef241135984b95721f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cfdd1708635061dc0a50ef241135984b95721f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a445343f6c045d0d24dd34fc957534cc487f7f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a445343f6c045d0d24dd34fc957534cc487f7f8"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "d1237ad283e8b12646c2864c6e53d0e4a0cda516",
        "filename": "src/qt/forms/coincontroldialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/coincontroldialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/coincontroldialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/coincontroldialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -487,7 +487,7 @@\n   <customwidget>\n    <class>CoinControlTreeWidget</class>\n    <extends>QTreeWidget</extends>\n-   <header>coincontroltreewidget.h</header>\n+   <header>qt/coincontroltreewidget.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "bba822882e3f0cd11a4d8e6aa54e0639ec1fb8a8",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -1424,7 +1424,7 @@\n   <customwidget>\n    <class>TrafficGraphWidget</class>\n    <extends>QWidget</extends>\n-   <header>trafficgraphwidget.h</header>\n+   <header>qt/trafficgraphwidget.h</header>\n    <container>1</container>\n    <slots>\n     <slot>clear()</slot>"
      },
      {
        "sha": "e968271107fe934c46cc1c1cf1ee632b6e667d98",
        "filename": "src/qt/forms/editaddressdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/editaddressdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/editaddressdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/editaddressdialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -71,7 +71,7 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "fdc52dc455d88b79ce6424645574c7817ca634e9",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -367,7 +367,7 @@ QLabel { color: rgb(40,40,40);  }</string>\n   <customwidget>\n    <class>ModalOverlay</class>\n    <extends>QWidget</extends>\n-   <header>modaloverlay.h</header>\n+   <header>qt/modaloverlay.h</header>\n    <container>1</container>\n   </customwidget>\n  </customwidgets>"
      },
      {
        "sha": "0e1048bc070cba6a964dcc8a81772827038ca904",
        "filename": "src/qt/forms/openuridialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/openuridialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/openuridialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/openuridialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -77,7 +77,7 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "a3721991ee2fdea1866360da37d0c55378efa997",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -824,12 +824,12 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n   <customwidget>\n    <class>QValueComboBox</class>\n    <extends>QComboBox</extends>\n-   <header>qvaluecombobox.h</header>\n+   <header>qt/qvaluecombobox.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "58f030ebf08bc2b71394ea84e8c2f538f90a6e5f",
        "filename": "src/qt/forms/receivecoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/receivecoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/receivecoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receivecoinsdialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -299,7 +299,7 @@\n   <customwidget>\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n-   <header>bitcoinamountfield.h</header>\n+   <header>qt/bitcoinamountfield.h</header>\n    <container>1</container>\n   </customwidget>\n  </customwidgets>"
      },
      {
        "sha": "dbe966b24193782e006f09b622747425e42b51f7",
        "filename": "src/qt/forms/receiverequestdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/receiverequestdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/receiverequestdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receiverequestdialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -127,7 +127,7 @@\n   <customwidget>\n    <class>QRImageWidget</class>\n    <extends>QLabel</extends>\n-   <header>receiverequestdialog.h</header>\n+   <header>qt/receiverequestdialog.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "9c89741afe25de75f855437e4fa2eb67053a0a75",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -1264,12 +1264,12 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n   <customwidget>\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n-   <header>bitcoinamountfield.h</header>\n+   <header>qt/bitcoinamountfield.h</header>\n    <container>1</container>\n   </customwidget>\n  </customwidgets>"
      },
      {
        "sha": "3c699abc6a04e0ef7d54b36a37233fc209ad7fa5",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -1255,12 +1255,12 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n   <customwidget>\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n-   <header>bitcoinamountfield.h</header>\n+   <header>qt/bitcoinamountfield.h</header>\n   </customwidget>\n  </customwidgets>\n  <tabstops>"
      },
      {
        "sha": "c9ddd757c1ddf29bb88fe96a7a58df8e887d2d7c",
        "filename": "src/qt/forms/signverifymessagedialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/signverifymessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b56ec969fcbedd87eb0cf43c16eb991aca300d0/src/qt/forms/signverifymessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/signverifymessagedialog.ui?ref=5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "patch": "@@ -380,7 +380,7 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources>"
      }
    ]
  },
  {
    "sha": "0c715214dd2d03b66a366a87bf6d2c576c0176c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzcxNTIxNGRkMmQwM2I2NmEzNjZhODdiZjZkMmM1NzZjMDE3NmMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-15T14:40:30Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:02Z"
      },
      "message": "build: Remove -I for everything but project root\n\nRemove -I from build system for everything but the project root,\nand built-in dependencies.",
      "tree": {
        "sha": "500f71856f69159aa896c86be997a1f8a9eaad9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/500f71856f69159aa896c86be997a1f8a9eaad9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c715214dd2d03b66a366a87bf6d2c576c0176c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c715214dd2d03b66a366a87bf6d2c576c0176c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c715214dd2d03b66a366a87bf6d2c576c0176c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c715214dd2d03b66a366a87bf6d2c576c0176c2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b56ec969fcbedd87eb0cf43c16eb991aca300d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b56ec969fcbedd87eb0cf43c16eb991aca300d0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "29e4ae56d025ccc50d348e76bf8a02df8e144318",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c715214dd2d03b66a366a87bf6d2c576c0176c2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c715214dd2d03b66a366a87bf6d2c576c0176c2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0c715214dd2d03b66a366a87bf6d2c576c0176c2",
        "patch": "@@ -18,7 +18,7 @@ else\n LIBUNIVALUE = $(UNIVALUE_LIBS)\n endif\n \n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)"
      },
      {
        "sha": "cbf3960cc7591a1b1b6a13767f18738d7edb275b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c715214dd2d03b66a366a87bf6d2c576c0176c2/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c715214dd2d03b66a366a87bf6d2c576c0176c2/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=0c715214dd2d03b66a366a87bf6d2c576c0176c2",
        "patch": "@@ -362,8 +362,7 @@ RES_MOVIES = $(wildcard $(srcdir)/qt/res/movies/spinner-*.png)\n \n BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n \n-BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n-  -I$(builddir)/qt/forms -DQT_NO_KEYWORDS\n+BITCOIN_QT_INCLUDES = -DQT_NO_KEYWORDS\n \n qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)"
      },
      {
        "sha": "f037705aaf9470af5d7c69909aa784978a6ce0eb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c715214dd2d03b66a366a87bf6d2c576c0176c2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c715214dd2d03b66a366a87bf6d2c576c0176c2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0c715214dd2d03b66a366a87bf6d2c576c0176c2",
        "patch": "@@ -96,7 +96,7 @@ BITCOIN_TESTS += \\\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n-test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)\n+test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)\n test_test_bitcoin_LDADD =\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)"
      }
    ]
  },
  {
    "sha": "e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2IzMTYzMWM3OGE4ZmMwMjEzMzZjN2VjZGE0NGY2YmM0YjRiMWYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-15T15:31:26Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:02Z"
      },
      "message": "qt: refactor: Changes to make include paths absolute\n\nThis makes all include paths in the GUI absolute.\n\nMany changes are involved as every single source file in\nsrc/qt/ assumes to be able to use relative includes.",
      "tree": {
        "sha": "9a6311c49c6fb23c7dc2f0622b0b3b65cd336374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a6311c49c6fb23c7dc2f0622b0b3b65cd336374"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c715214dd2d03b66a366a87bf6d2c576c0176c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c715214dd2d03b66a366a87bf6d2c576c0176c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c715214dd2d03b66a366a87bf6d2c576c0176c2"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "dda8dce391bec90afa4d5121495cad8c59ddbf6b",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -7,7 +7,7 @@\n #endif\n \n #include <qt/addressbookpage.h>\n-#include <ui_addressbookpage.h>\n+#include <qt/forms/ui_addressbookpage.h>\n \n #include <qt/addresstablemodel.h>\n #include <qt/bitcoingui.h>"
      },
      {
        "sha": "a720ac956bd177325ed3b26ea8be84bd405821e6",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -7,7 +7,7 @@\n #endif\n \n #include <qt/askpassphrasedialog.h>\n-#include <ui_askpassphrasedialog.h>\n+#include <qt/forms/ui_askpassphrasedialog.h>\n \n #include <qt/guiconstants.h>\n #include <qt/walletmodel.h>"
      },
      {
        "sha": "557d7efcec14edba55b6b3eab212a084f61b78a4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -261,7 +261,7 @@ public Q_SLOTS:\n     void startThread();\n };\n \n-#include <bitcoin.moc>\n+#include <qt/bitcoin.moc>\n \n BitcoinCore::BitcoinCore():\n     QObject()"
      },
      {
        "sha": "0b21349c54847f015a8dcf898e91da8c9b3ec21e",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -188,7 +188,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void valueChanged();\n };\n \n-#include <bitcoinamountfield.moc>\n+#include <qt/bitcoinamountfield.moc>\n \n BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     QWidget(parent),"
      },
      {
        "sha": "03e633e375fb0971117a46ef77063e4524de416f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/coincontroldialog.h>\n-#include <ui_coincontroldialog.h>\n+#include <qt/forms/ui_coincontroldialog.h>\n \n #include <qt/addresstablemodel.h>\n #include <qt/bitcoinunits.h>"
      },
      {
        "sha": "0437f81a7e36a29ca4ab8f70a6d34209aade8be6",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/editaddressdialog.h>\n-#include <ui_editaddressdialog.h>\n+#include <qt/forms/ui_editaddressdialog.h>\n \n #include <qt/addresstablemodel.h>\n #include <qt/guiutil.h>"
      },
      {
        "sha": "9e4c765101bc0011ddf1c17fa61c0123294ed207",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -8,7 +8,7 @@\n \n #include <fs.h>\n #include <qt/intro.h>\n-#include <ui_intro.h>\n+#include <qt/forms/ui_intro.h>\n \n #include <qt/guiutil.h>\n \n@@ -60,7 +60,7 @@ public Q_SLOTS:\n     Intro *intro;\n };\n \n-#include <intro.moc>\n+#include <qt/intro.moc>\n \n FreespaceChecker::FreespaceChecker(Intro *_intro)\n {"
      },
      {
        "sha": "b707b0dda9f982504e7d18b1c03dcb0d2ece6845",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/modaloverlay.h>\n-#include <ui_modaloverlay.h>\n+#include <qt/forms/ui_modaloverlay.h>\n \n #include <qt/guiutil.h>\n "
      },
      {
        "sha": "40671922f4c97a68e2ae81aaf312b5df0582c615",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/openuridialog.h>\n-#include <ui_openuridialog.h>\n+#include <qt/forms/ui_openuridialog.h>\n \n #include <qt/guiutil.h>\n #include <qt/walletmodel.h>"
      },
      {
        "sha": "d7aa8bc38bf75cb185bfe5f755d13df706cd243b",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -7,7 +7,7 @@\n #endif\n \n #include <qt/optionsdialog.h>\n-#include <ui_optionsdialog.h>\n+#include <qt/forms/ui_optionsdialog.h>\n \n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>"
      },
      {
        "sha": "a0645d9a742662f6b38f46e83deae4d77f778ba2",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -17,7 +17,7 @@\n #include <net.h>\n #include <netbase.h>\n #include <txdb.h> // for -dbcache defaults\n-#include <qt/intro.h> \n+#include <qt/intro.h>\n \n #ifdef ENABLE_WALLET\n #include <wallet/wallet.h>"
      },
      {
        "sha": "7818607d30a68b021152bce635b12a507b3968fb",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/overviewpage.h>\n-#include <ui_overviewpage.h>\n+#include <qt/forms/ui_overviewpage.h>\n \n #include <qt/bitcoinunits.h>\n #include <qt/clientmodel.h>\n@@ -106,7 +106,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n     const PlatformStyle *platformStyle;\n \n };\n-#include <overviewpage.moc>\n+#include <qt/overviewpage.moc>\n \n OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),"
      },
      {
        "sha": "e1388f2b5d8f9eaa4b10e339d5699464aa85acef",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -7,7 +7,7 @@\n \n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n-#include <paymentrequest.pb.h>\n+#include <qt/paymentrequest.pb.h>\n #pragma GCC diagnostic pop\n \n #include <base58.h>"
      },
      {
        "sha": "d6e2beb3121befc4cfae6a327cbcde8e11bd86af",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/receivecoinsdialog.h>\n-#include <ui_receivecoinsdialog.h>\n+#include <qt/forms/ui_receivecoinsdialog.h>\n \n #include <qt/addressbookpage.h>\n #include <qt/addresstablemodel.h>"
      },
      {
        "sha": "c69fea1c93a672c6140c9a886decab4472df087f",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/receiverequestdialog.h>\n-#include <ui_receiverequestdialog.h>\n+#include <qt/forms/ui_receiverequestdialog.h>\n \n #include <qt/bitcoinunits.h>\n #include <qt/guiconstants.h>"
      },
      {
        "sha": "6687d62baa59793d9a0f29604d6023e05fab1145",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -7,7 +7,7 @@\n #endif\n \n #include <qt/rpcconsole.h>\n-#include <ui_debugwindow.h>\n+#include <qt/forms/ui_debugwindow.h>\n \n #include <qt/bantablemodel.h>\n #include <qt/clientmodel.h>\n@@ -125,7 +125,7 @@ class QtRPCTimerInterface: public RPCTimerInterface\n };\n \n \n-#include <rpcconsole.moc>\n+#include <qt/rpcconsole.moc>\n \n /**\n  * Split shell command line into a list of arguments and optionally execute the command(s)."
      },
      {
        "sha": "036b6ebcc0f8aa9038675756031303fb7ee55b78",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/sendcoinsdialog.h>\n-#include <ui_sendcoinsdialog.h>\n+#include <qt/forms/ui_sendcoinsdialog.h>\n \n #include <qt/addresstablemodel.h>\n #include <qt/bitcoinunits.h>"
      },
      {
        "sha": "20e39bdeba685b4daa5cb8a191bfa0060d8c1356",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/sendcoinsentry.h>\n-#include <ui_sendcoinsentry.h>\n+#include <qt/forms/ui_sendcoinsentry.h>\n \n #include <qt/addressbookpage.h>\n #include <qt/addresstablemodel.h>"
      },
      {
        "sha": "4cd0c76b166c3bc255b68408bd19e126f0e7839b",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/signverifymessagedialog.h>\n-#include <ui_signverifymessagedialog.h>\n+#include <qt/forms/ui_signverifymessagedialog.h>\n \n #include <qt/addressbookpage.h>\n #include <qt/guiutil.h>"
      },
      {
        "sha": "7a4388e940e2f444b8b106b3f012acbed4b06d29",
        "filename": "src/qt/test/compattests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n+#include <qt/paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n \n #include <qt/test/compattests.h>\n "
      },
      {
        "sha": "1864604372a4e17655ebee46ef8a3ab288efe88d",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <qt/test/paymentservertests.h>\n \n-#include <optionsmodel.h>\n+#include <qt/optionsmodel.h>\n #include <qt/test/paymentrequestdata.h>\n \n #include <amount.h>"
      },
      {
        "sha": "6d84c382874aa5c37c9fca2a69870e6bfc283f11",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n #define BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n \n-#include <qt/test/../paymentserver.h>\n+#include <qt/paymentserver.h>\n \n #include <QObject>\n #include <QTest>"
      },
      {
        "sha": "0596ccf90eb4f9bfa2f6ebc1782c6c89b8132d3b",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -10,7 +10,7 @@\n #include <validation.h>\n #include <rpc/register.h>\n #include <rpc/server.h>\n-#include <rpcconsole.h>\n+#include <qt/rpcconsole.h>\n #include <test/test_bitcoin.h>\n #include <univalue.h>\n #include <util.h>"
      },
      {
        "sha": "e47aa8b54691f9f608f6a8508c3ec99f5fff18ce",
        "filename": "src/qt/test/uritests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/uritests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/test/uritests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <qt/test/uritests.h>\n \n-#include <guiutil.h>\n-#include <walletmodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/walletmodel.h>\n \n #include <QUrl>\n "
      },
      {
        "sha": "74d7a8f525c827a552f93b4c0bd968f0112cfde0",
        "filename": "src/qt/transactiondescdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/transactiondescdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/transactiondescdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/transactiondescdialog.h>\n-#include <ui_transactiondescdialog.h>\n+#include <qt/forms/ui_transactiondescdialog.h>\n \n #include <qt/transactiontablemodel.h>\n "
      },
      {
        "sha": "6d5a2f310157d8640f352e68d53171074b466b87",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "patch": "@@ -8,7 +8,7 @@\n \n #include <qt/utilitydialog.h>\n \n-#include <ui_helpmessagedialog.h>\n+#include <qt/forms/ui_helpmessagedialog.h>\n \n #include <qt/bitcoingui.h>\n #include <qt/clientmodel.h>"
      }
    ]
  },
  {
    "sha": "138016bf9275692995d37f707e5b83e0d7fed1a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzgwMTZiZjkyNzU2OTI5OTVkMzdmNzA3ZTViODNlMGQ3ZmVkMWE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-15T19:22:09Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:02Z"
      },
      "message": "test: refactor: Use absolute include paths for test data files",
      "tree": {
        "sha": "8d76fe48cd560663526f21d77d93063678927b07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d76fe48cd560663526f21d77d93063678927b07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/138016bf9275692995d37f707e5b83e0d7fed1a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/138016bf9275692995d37f707e5b83e0d7fed1a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/138016bf9275692995d37f707e5b83e0d7fed1a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/138016bf9275692995d37f707e5b83e0d7fed1a9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7b31631c78a8fc021336c7ecda44f6bc4b4b1f1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3156cc53d003c76e5b6b39d484885ec102e68686",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=138016bf9275692995d37f707e5b83e0d7fed1a9",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <base58.h>\n \n-#include <data/base58_encode_decode.json.h>\n-#include <data/base58_keys_invalid.json.h>\n-#include <data/base58_keys_valid.json.h>\n+#include <test/data/base58_encode_decode.json.h>\n+#include <test/data/base58_keys_invalid.json.h>\n+#include <test/data/base58_keys_valid.json.h>\n \n #include <key.h>\n #include <script/script.h>"
      },
      {
        "sha": "57b3e501af49b587cc8243979af0a81ddb8a12d0",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=138016bf9275692995d37f707e5b83e0d7fed1a9",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <data/script_tests.json.h>\n+#include <test/data/script_tests.json.h>\n \n #include <core_io.h>\n #include <key.h>"
      },
      {
        "sha": "d97e10628753a67cd1a014c604464a30bbe3f281",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=138016bf9275692995d37f707e5b83e0d7fed1a9",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <data/sighash.json.h>\n+#include <test/data/sighash.json.h>\n #include <hash.h>\n #include <script/interpreter.h>\n #include <script/script.h>"
      },
      {
        "sha": "34a182722dc4f34ac39bde438ec5efb2c96a5cb9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/138016bf9275692995d37f707e5b83e0d7fed1a9/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=138016bf9275692995d37f707e5b83e0d7fed1a9",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <data/tx_invalid.json.h>\n-#include <data/tx_valid.json.h>\n+#include <test/data/tx_invalid.json.h>\n+#include <test/data/tx_valid.json.h>\n #include <test/test_bitcoin.h>\n \n #include <clientversion.h>"
      }
    ]
  },
  {
    "sha": "96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmI5MjgxMGE2YTk3MTllMDNmZTcwMDRkNWQ1YzJkNmY3YjdhNWZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-15T19:22:54Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:03Z"
      },
      "message": "refactor: Include obj/build.h instead of build.h",
      "tree": {
        "sha": "ae33694715982a90d21ca519535ed8db78229572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae33694715982a90d21ca519535ed8db78229572"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "138016bf9275692995d37f707e5b83e0d7fed1a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/138016bf9275692995d37f707e5b83e0d7fed1a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/138016bf9275692995d37f707e5b83e0d7fed1a9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f7ded63e6a55e5f2eb890737915a4ce5e57b5c0a",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
        "patch": "@@ -39,7 +39,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n //! First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n-#include <build.h>\n+#include <obj/build.h>\n #endif\n \n //! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$"
      }
    ]
  },
  {
    "sha": "434f5a2506e982210226cfd24421f381e20173f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzRmNWEyNTA2ZTk4MjIxMDIyNmNmZDI0NDIxZjM4MWUyMDE3M2Yz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-15T17:45:16Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:03Z"
      },
      "message": "Recommend #include<> syntax in developer notes",
      "tree": {
        "sha": "e0c40e9b75206e3c58700dfb1c1f2376e36c05a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0c40e9b75206e3c58700dfb1c1f2376e36c05a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/434f5a2506e982210226cfd24421f381e20173f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434f5a2506e982210226cfd24421f381e20173f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/434f5a2506e982210226cfd24421f381e20173f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434f5a2506e982210226cfd24421f381e20173f3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96b92810a6a9719e03fe7004d5d5c2d6f7b7a5ff"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7f34b07d151a009574a2d3cc1e170069cfa03366",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434f5a2506e982210226cfd24421f381e20173f3/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434f5a2506e982210226cfd24421f381e20173f3/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=434f5a2506e982210226cfd24421f381e20173f3",
        "patch": "@@ -492,6 +492,14 @@ namespace {\n \n   - *Rationale*: Avoids confusion about the namespace context\n \n+- Prefer `#include <primitives/transaction.h>` bracket syntax instead of\n+  `#include \"primitives/transactions.h\"`` quote syntax when possible.\n+\n+  - *Rationale*: Bracket syntax is less ambiguous because the preprocessor\n+    searches a fixed list of include directories without taking location of the\n+    source file into account. This allows quoted includes to stand out more when\n+    the location of the source file actually is relevant.\n+\n GUI\n -----\n "
      }
    ]
  },
  {
    "sha": "7b91b5f8a4417da1940956c1ab32dba94dc104e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjkxYjVmOGE0NDE3ZGExOTQwOTU2YzFhYjMyZGJhOTRkYzEwNGUx",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-10T01:15:51Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-15T19:23:03Z"
      },
      "message": "Remove trailing whitespace causing travis failure",
      "tree": {
        "sha": "63507194cfa963e58b48fe8fb29d763a272c56ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63507194cfa963e58b48fe8fb29d763a272c56ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b91b5f8a4417da1940956c1ab32dba94dc104e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b91b5f8a4417da1940956c1ab32dba94dc104e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b91b5f8a4417da1940956c1ab32dba94dc104e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b91b5f8a4417da1940956c1ab32dba94dc104e1/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "434f5a2506e982210226cfd24421f381e20173f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434f5a2506e982210226cfd24421f381e20173f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/434f5a2506e982210226cfd24421f381e20173f3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b482fd3089a35243fa74df2c483093ecb01b89ee",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b91b5f8a4417da1940956c1ab32dba94dc104e1/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b91b5f8a4417da1940956c1ab32dba94dc104e1/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=7b91b5f8a4417da1940956c1ab32dba94dc104e1",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_UNDO_H\n #define BITCOIN_UNDO_H\n \n-#include <compressor.h> \n+#include <compressor.h>\n #include <consensus/consensus.h>\n #include <primitives/transaction.h>\n #include <serialize.h>"
      }
    ]
  },
  {
    "sha": "f0c1f8abb0182da557d07372b938f3a0a4bb906f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGMxZjhhYmIwMTgyZGE1NTdkMDczNzJiOTM4ZjNhMGE0YmI5MDZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T21:39:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T21:39:23Z"
      },
      "message": "Merge #11690: [trivial] Fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it\n\nb077fe908 fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it (Evan Klitzke)\n\nPull request description:\n\n  I spent some time trying to figure out how to get the provided `.desktop` file to work correctly in GNOME. When a non-absolute path is used in the desktop file, you need to specify `StartupWMClass` in order for gnome-shell to know that a running application matches one in its desktop database. I also set a version and removed the deprecated `Encoding` field. With these changes, the desktop file passes `desktop-file-validate` cleanly.\n\n  P.S. I found this while working on a new spec file for Bitcoin, which you can find here: https://github.com/eklitzke/bitcoin-copr/blob/master/bitcoin.spec . I plan to contribute this work back upstream as well, once I've figured out more of these packaging issues (desktop files being one of them!).\n\nTree-SHA512: cb290dd2c2fbcf7f08d838cf911d516d09a4e978d939e719a21a84db7232d1f534043616d7fbb52edd2b7d12389e5f0f8e53d29ac59d7282bdebde8224a2db7f",
      "tree": {
        "sha": "0924f912da7a294ebde02a2710f51548ca7a87a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0924f912da7a294ebde02a2710f51548ca7a87a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0c1f8abb0182da557d07372b938f3a0a4bb906f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaDLQLAAoJENLqSFDnUoslK1cQAJ+lDBfW+9EDpjCQAUy05vtn\nFc8c1Zv1TArG8D2SxsP3YJE3SFYiFRU2EzEbVNWLQOXAFBwsBmJotXoOnlNljKDS\nKy7LoVYfWzJ/qxmWtOa8YczV0yNU1VTAQVbvSCx7y9gKeeqYObDOSV+Krl9+1eiX\nSfGHvmTCG64KLo4iloXbufdMu0t8bn/f0UEPxUiVCClPi2OCZEjrfe0lG548jPmo\nDQxaXnXMnPC9RyKwW1IubH7/Zp1T7jda31TmrQ0PsgyMxzui+RC7zCowQliDPt10\nq8gmNe24jf2hldO3IFk2fozpx/hTlfbB4BknueyCTO8jsOV+EMXr70hRUvSgD/Or\nXz0FcuknRSCIsKZkVzPRjCfMHvAzp2cE/uvfSNpqeiD546bJ1RgP2qm4PQf48FVc\nZRnzMXtrh3ZWS5WaRLHz8gUie8mc3PA2VBfbXFvcf8THHtFlKs9MqSvK6aF70GEC\nyXm2N8NF4tp5g9kS3d746xio/XI4rpeoYJI39a5xh4pAwuIvXC+f6e4NYNfyCFQf\nt+dHSYJvvhP2/LNlIjgRqR0Fq2xUcMmm3SxuoapF6QkA7fI92EngNK0AEI8b3zbG\nryFy28HIbST0jTpQHEjWHZkbz7+88ttFZopwq6kuxhyrzm160K/6th0bImGNcp1m\niK2VNxxokp8Owb5RG4a3\n=+MLW\n-----END PGP SIGNATURE-----",
        "payload": "tree 0924f912da7a294ebde02a2710f51548ca7a87a5\nparent 4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708\nparent b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1\nauthor MarcoFalke <falke.marco@gmail.com> 1510781962 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510781963 -0500\n\nMerge #11690: [trivial] Fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it\n\nb077fe908 fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it (Evan Klitzke)\n\nPull request description:\n\n  I spent some time trying to figure out how to get the provided `.desktop` file to work correctly in GNOME. When a non-absolute path is used in the desktop file, you need to specify `StartupWMClass` in order for gnome-shell to know that a running application matches one in its desktop database. I also set a version and removed the deprecated `Encoding` field. With these changes, the desktop file passes `desktop-file-validate` cleanly.\n\n  P.S. I found this while working on a new spec file for Bitcoin, which you can find here: https://github.com/eklitzke/bitcoin-copr/blob/master/bitcoin.spec . I plan to contribute this work back upstream as well, once I've figured out more of these packaging issues (desktop files being one of them!).\n\nTree-SHA512: cb290dd2c2fbcf7f08d838cf911d516d09a4e978d939e719a21a84db7232d1f534043616d7fbb52edd2b7d12389e5f0f8e53d29ac59d7282bdebde8224a2db7f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c1f8abb0182da557d07372b938f3a0a4bb906f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c1f8abb0182da557d07372b938f3a0a4bb906f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c1f8abb0182da557d07372b938f3a0a4bb906f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708"
      },
      {
        "sha": "b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b077fe908e98ddf9ba8fcd01a4c1a1ebb1b491e1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "204cdf99d0562d14fed229ab7cd14c048bf15be5",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0c1f8abb0182da557d07372b938f3a0a4bb906f/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0c1f8abb0182da557d07372b938f3a0a4bb906f/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "patch": "@@ -1,5 +1,5 @@\n [Desktop Entry]\n-Encoding=UTF-8\n+Version=1.0\n Name=Bitcoin Core\n Comment=Connect to the Bitcoin P2P Network\n Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n@@ -11,3 +11,4 @@ Type=Application\n Icon=bitcoin128\n MimeType=x-scheme-handler/bitcoin;\n Categories=Office;Finance;\n+StartupWMClass=Bitcoin-qt"
      }
    ]
  },
  {
    "sha": "ec85248c4877c273bf51c4e76fab85cbc26013bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzg1MjQ4YzQ4NzdjMjczYmY1MWM0ZTc2ZmFiODVjYmMyNjAxM2Jm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-15T22:20:07Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-15T22:20:07Z"
      },
      "message": "[travis-ci] Only run linters on Pull Requests\n\nLinters should only be run on pull request builds. Once bad code style\nhas been merged into master, it's too late. Master and other branches\nshould not fail to build because of linter warnings.",
      "tree": {
        "sha": "63a3a4b1e3624479a7d883da5e4c36c19ccbd07f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63a3a4b1e3624479a7d883da5e4c36c19ccbd07f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec85248c4877c273bf51c4e76fab85cbc26013bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec85248c4877c273bf51c4e76fab85cbc26013bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec85248c4877c273bf51c4e76fab85cbc26013bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec85248c4877c273bf51c4e76fab85cbc26013bf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed818060ecf4a38a02c8cb48f6cbc78d2ee7708"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a643d2ff5d8bb26ad73637bd861948b5186ca03c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec85248c4877c273bf51c4e76fab85cbc26013bf/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec85248c4877c273bf51c4e76fab85cbc26013bf/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ec85248c4877c273bf51c4e76fab85cbc26013bf",
        "patch": "@@ -52,7 +52,7 @@ before_script:\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/leveldb; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-doc.py; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-rpc-mappings.py .; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/lint-all.sh; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/lint-all.sh; fi\n     - unset CC; unset CXX\n     - mkdir -p depends/SDKs depends/sdk-sources\n     - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi"
      }
    ]
  },
  {
    "sha": "54aedc013744c86b11157423fa3cffc9a51eef02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGFlZGMwMTM3NDRjODZiMTExNTc0MjNmYTNjZmZjOWE1MWVlZjAy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T22:41:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-15T22:41:20Z"
      },
      "message": "Merge #11686: Make ISSUE_TEMPLATE a bit shorter, mention hardware tests\n\nea3f363aa Make ISSUE_TEMPLATE a bit shorter, mention hardware tests (Matt Corallo)\n\nPull request description:\n\n  Kinda getting tired of \"block checksum mismatch error\" issues on RPis that dont even have heatsinks...Also a shorter issue template might encourage people to actually read it.\n\nTree-SHA512: 943a286f6ea5c4f837a8dc3906342e1e428cf788d05ba9110f8005400d9775ae6f9cf3ce31ada201f5f7b95a6101314f2cb93f49dd92e242fbcea00aaae9e6e6",
      "tree": {
        "sha": "3a0c323083e11e82eebc8f28361e48a690bdac4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a0c323083e11e82eebc8f28361e48a690bdac4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54aedc013744c86b11157423fa3cffc9a51eef02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaDMKQAAoJENLqSFDnUosl6i4P/A79yhChPuLDiLB05Je+CEhM\nLVBkygpaClmaF9zUg5FOFQNcaDfgVf1B2GxCj7qwwDQ9/6b+99GTLQ3oCpQm5qfl\nqnShd/6oDgrE3A1Km0sIM2FTqoeFXYfKQpxG4kWiYZ1eeuI4TPnn9u1dzaUpuG4+\nYRUENoeZyX+xgKbfP3SG7n0Wb4t+gIp5xYADUCe6QcpOvODUsZmDjvPfzQger1Mh\nCHRQZQeI9kTlAqsS+KoMgi3034GFkrYvH2mYHxk5M8hrcyKcqq1g6fNEnp1vR35t\n/gubXRLrWHBOUcHQTZvS4kU6qZb+74sX9pyUroJXzUh52TktultcmU0CgnamhBcQ\nBnYYNrA+Ntwr69Tuh+b4vpT1CTsQMskRSCl0p+oHtU0s+iSw2FFCeYmjMoh7PhVT\niXl6pvCEVzuGloot/Dr6zXQzGGVcAuLwiCEcG/RzRxIuAwznz9x1i6m6L6zZOf7U\nzdH2Tm+i6Be+Tnm7t7Fqy2qsXsijFXHwVlNVcpUVOJYdkxgo/+OM1jVzOG3chZpU\nIlVRRWDmq9QmMeRsIrx5kMxaIhiVwcSvYaLWbcwDBRCW59hlS1snsan4PUDSn+/T\n0mBdh39GSH6pG2aNqM1gTFbIyFGHcQ/1D4K3hDYl3MZA/J7HJd2aDCfoj23WiR+P\nSevm1fIR8DeQRm0OEhM3\n=PpFQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a0c323083e11e82eebc8f28361e48a690bdac4d\nparent f0c1f8abb0182da557d07372b938f3a0a4bb906f\nparent ea3f363aa0900fe97aeb22b160314272eb4a8067\nauthor MarcoFalke <falke.marco@gmail.com> 1510785676 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1510785680 -0500\n\nMerge #11686: Make ISSUE_TEMPLATE a bit shorter, mention hardware tests\n\nea3f363aa Make ISSUE_TEMPLATE a bit shorter, mention hardware tests (Matt Corallo)\n\nPull request description:\n\n  Kinda getting tired of \"block checksum mismatch error\" issues on RPis that dont even have heatsinks...Also a shorter issue template might encourage people to actually read it.\n\nTree-SHA512: 943a286f6ea5c4f837a8dc3906342e1e428cf788d05ba9110f8005400d9775ae6f9cf3ce31ada201f5f7b95a6101314f2cb93f49dd92e242fbcea00aaae9e6e6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aedc013744c86b11157423fa3cffc9a51eef02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54aedc013744c86b11157423fa3cffc9a51eef02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aedc013744c86b11157423fa3cffc9a51eef02/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c1f8abb0182da557d07372b938f3a0a4bb906f"
      },
      {
        "sha": "ea3f363aa0900fe97aeb22b160314272eb4a8067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea3f363aa0900fe97aeb22b160314272eb4a8067",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea3f363aa0900fe97aeb22b160314272eb4a8067"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 9,
      "deletions": 23
    },
    "files": [
      {
        "sha": "811a246df1adde4271e5f51e0d247cb74e36516d",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 9,
        "deletions": 23,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54aedc013744c86b11157423fa3cffc9a51eef02/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54aedc013744c86b11157423fa3cffc9a51eef02/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=54aedc013744c86b11157423fa3cffc9a51eef02",
        "patch": "@@ -1,37 +1,23 @@\n <!--- Remove sections that do not apply -->\n \n-This issue tracker is only for technical issues related to bitcoin-core.\n+This issue tracker is only for technical issues related to Bitcoin Core.\n \n-General bitcoin questions and/or support requests and are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+General bitcoin questions and/or support requests are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n \n For reporting security issues, please read instructions at [https://bitcoincore.org/en/contact/](https://bitcoincore.org/en/contact/).\n \n-### Describe the issue\n-\n-### Can you reliably reproduce the issue?\n-#### If so, please list the steps to reproduce below:\n-1.\n-2.\n-3.\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue!\n \n-### Expected behaviour\n-Tell us what should happen\n+### Describe the issue\n+#### What behavior did you expect?\n \n-### Actual behaviour\n-Tell us what happens instead\n+#### What was the actual behavior (provide screenshots if the issue is GUI-related)?\n \n-### Screenshots.\n-If the issue is related to the GUI, screenshots can be added to this issue via drag & drop.\n+#### How reliably can you reproduce the issue, what are the steps to do so?\n \n-### What version of bitcoin-core are you using?\n-List the version number/commit ID, and if it is an official binary, self compiled or a distribution package such as PPA.\n+### What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)?\n \n-### Machine specs:\n-- OS:\n-- CPU:\n-- RAM:\n-- Disk size:\n-- Disk Type (HD/SDD):\n+### What type of machine are you observing the error on (OS/CPU and disk type)?\n \n ### Any extra information that might be useful in the debugging process.\n This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred."
      }
    ]
  },
  {
    "sha": "f88d9003546607763810024faad3bbc3b8cf1def",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODhkOTAwMzU0NjYwNzc2MzgxMDAyNGZhYWQzYmJjM2I4Y2YxZGVm",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "k.o.willy@gmail.com",
        "date": "2017-11-16T00:28:26Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "k.o.willy@gmail.com",
        "date": "2017-11-16T00:28:26Z"
      },
      "message": "Add gitian PGP key: willyko",
      "tree": {
        "sha": "7d3d82766b6e2b1d70994bc39b8c335b88555ace",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d3d82766b6e2b1d70994bc39b8c335b88555ace"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f88d9003546607763810024faad3bbc3b8cf1def",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f88d9003546607763810024faad3bbc3b8cf1def",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f88d9003546607763810024faad3bbc3b8cf1def",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f88d9003546607763810024faad3bbc3b8cf1def/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54aedc013744c86b11157423fa3cffc9a51eef02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aedc013744c86b11157423fa3cffc9a51eef02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54aedc013744c86b11157423fa3cffc9a51eef02"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a3b58ad9940200a4f9157a5b4dc10357b284dc29",
        "filename": "contrib/gitian-keys/willyko-key.pgp",
        "status": "added",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f88d9003546607763810024faad3bbc3b8cf1def/contrib/gitian-keys/willyko-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f88d9003546607763810024faad3bbc3b8cf1def/contrib/gitian-keys/willyko-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/willyko-key.pgp?ref=f88d9003546607763810024faad3bbc3b8cf1def",
        "patch": "@@ -0,0 +1,85 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1\n+\n+mQINBFgs/RoBEADFxycJTUvwqzBZZ0aBZXbmr8Ppd3EPrgBRd47k7uwanf7UFmvY\n+Xt4gMEI+EdV0GuoQ0SeoAmQqc5Fxu3AQe2XFbiF+ZNNYT3+V/5GAzWsAH22ncQr0\n+AuK95pPi+PZ+M2h669cq/RzFUXZDew0NobR2oBS5h6g3rgmmejVLRqnUpWkkSrqi\n+aNgD2GSn8g820wM6LpdxcjTqmMpHHT5owAbv0UP3IcdtpBaS5McoUXK+OAdKK/Zw\n+JQ0J1kx4vIyNwuPD3klziGQw8Izb/gFpWg8XaJmMhD5BxNuXJC58Bj9/sFTc0GDQ\n+VKMFpYpNi8a6hLPFb4hMjYF77awoz57HtyOOsS03KO/57QE1htx+2NeDm4XkZSBk\n++wrU3zgbtmOBcfzEHS/HrROksYDi+Qw3HZL98nfDEWNfsDzfhMZ9wHdM3NsR2xk6\n+oNtX0CprS1n2Xr2AY9X1oNgiZCJaSftU67j3lr+9gHOH61ktxt3cUCDodUFjkpKn\n+r1CQ2LB63AoUbwGMAeozdXZWzbXJAJbcH9G77zEi9rW0WA2yMSxTXHlpE9MS0UcE\n+BVkIMv2b9iQzlhiS8jh8AiKFO1PuT26Cw52N/lSPhA81zw79pZfSYwKFICGHYfvw\n+ozZeN9Q+PPl5tqi/3SExxlZKe8EmaveTrUfKMBS4lQO2gWe0bCFgLOIzIwARAQAB\n+tB1XaWxseSBLbyA8d2lsbHlrQHN5c2NvaW4ub3JnPokCOAQTAQIAIgUCWCz9GgIb\n+AwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQjjqPMkfby7+0wA//cX7Tc3Nz\n+19ApwSbGfC8pJA/nSybcVivroJRftpzeOmYrVM084T9REvYwugl89djvxn6m96iQ\n+kqoUGWhBVBtDReVCL7z53G42lHjemaFcxBhIazKxO0qvcc/UXUVOs2OdUbzObDFL\n+dHO5xBVqEnW3sq+r4blsXR8U79B9IIri4+2hy4OoEjYv9DzBaaoaqU+F3mudXbmo\n+R+hsWc+mklV++TX/kuw6EWT8tusFjXrfqqKcKPRPhbn48OSGWsEPc7yELf7pYFR8\n+uDU40faJqkvQ83h5WMTDAhLxd/918ZitqBhjSP+7Humf2YhSto7YmtEWlbeAW+qy\n+TcBYkK6SJh8Do3xZd/prFBKEu395n5VQKuLjXaOjqMc1oDHQyPJJjXSN5thLHvan\n+z7nNLt2QZO/kxXITDdbWlktVe/WSoive7TuY4dGuX4Si2z9wyhFYxtZDsqE0qmqN\n+jIDAZ7u8Qq/LGqpdjOmYr2fEwHe1yVIS+BtVGvtShkX+J+QPb8qBl1d7Ii5i5Afl\n+GJoLLIUFkPcIRTYPZpppGSuqfyWdNnaasbLH44lxJisSMMw+fxZabt2bykYN/ZXa\n+RP/ItDj81vklg+n6r4f/nZTF1r0UUy4LbSbBY15B4Xm0Tdvh1PMfj/w2q10l7bZB\n+XLi9Z/QPaW7TyzaBuLkVckbVFn2nYnXfzHG5Ag0EWCz9GgEQALCgTibFnw+Q3PEL\n+G5/peQcQqHxrPAB37HV39B1DedGhVUa6aGSUaLoNMyUjUX1HWN3mWFKTYVB4CH5Y\n+xjaXUwxdwCZgBNe4TDglKFPuc+frlSTZxDVE9/fjArmrUP6TPU447ujspyngGLa5\n+et5Uig/LxIX/+Mm0ZiYJxb1rMJwK998U1Ev1aHxgNjwTI2ehcKu8CAGOyflzh6a2\n+iTBUmLfnQMv5248P2d4P8WDiPq61CWTYTMCFqHqkYKy7h9BYIuMajw3KsgOUNfL2\n+1e9Ue8yv5UchZ+GDlBjidIkoK1nd2uJ0kPJkafLGWbcliJfvXxKliZnSbz1Cd4A0\n+HDKKCwiuwSLy2aYbs7IRtAOyDER4+fjBcqtf0QTIvoAdNZ9gL64DKVaB58vuSixj\n+K1i83XbTOt3q821HxxBrX9u6HP2E5kFdxT2KHDbisAWNP0rFnHVpjugehKFfZb6q\n+jbDt3nQL5uCQ8gTNCd4fsoSK6KhCDjamDXlKmaGlxqwOV4W8ZwihoeGt690h7NIH\n+h4eiSmMOej3or32lcDETEwrjA2PxvcFsikFc56hRkTaSyyBEH2xhkRrjXMqiQfH0\n+j7iOY2PWpFEuu2HVzqe5dBXzn9sMIwxeNCxR/P+xHMqPUlgD1SXEYCNLvvzD6p0+\n+kqSe7PiJoEIv351T3hnBhQ6rK0ChABEBAAGJAh8EGAECAAkFAlgs/RoCGwwACgkQ\n+jjqPMkfby7/mQA//YsAOdDBl0GscB1PBNXi8VMlI7yG9cqiGrYnZX7h4wUoGEbPI\n+jap/PixIsxBCf1BqBRDJdFyvzH9amLlcaVNdCyh6Yt1Pi8kassmz/kbIYgpbFkIL\n+ES9N24N7BZ94P77OQy5wic+B4WqJnVrtKr9JBalgBSOMqtccYCma5Ew00mqp+FXM\n+suDyBk2HXyl+u6/rRmqZ+BoU8iRpus9F80LFKGEsAgjLjKv68KmApzjunzsBotKk\n+g9AsBk4ygbp+nECAtsxpbLMo4hPr4qWm7G4mU5g4xOK2chpAPeqyf0857RWgsXaO\n+kjrUu/M5Hme2eIlXwBF14ac4QPnY1rlAIaulvXzmQnMYQFZiw9vaTOdqBFHjkh7T\n+XYRAr589Woo25PfMJCbC+Rop6ku6sCFMorbBwojyRhFJnk9xsy5kP5D9IhkPAKu/\n+/ABlei0xPOl/gCUUJP7aIikZgS5lAk1TSe/R+yV6ExNwudtLw1G0K2/sY3B4Xo3X\n+Q1lTAQPlnAIeK/vlbttLZNIBWquw4cPAkPpIyjmE1dd6jGQdUyZE22uPBx+gpq1w\n+AacmVLwvPMe1De0ilJOzj6KpXWBCwt0DWXWztovpBVcAC+qbTrZF9H5dllpqyzKt\n+OvxzGssjrX4rDkOx7MyVa2tnXmeCuSN/RvlOUwPvf5zYM8Wh9g7fc6jcDQu5Ag0E\n+WfkOfAEQAMNkzAQqSenpXtHsnuCqM1oMMF2kRzny/Jqh3q3BxZ8MHLDhoRRaTENu\n+lA4APRXMNM/wlZJUSLX8wWBhufnsPtMf6OOVMZ4AVbXHjUgyJ7lO1zHdj0u6PpYP\n+9gmHthIz7FF+cxHj4ziC4CmtRctrn+/U4MwYtNPhxkTnS26oOZes/HXMYSvQBMgT\n+AP27GNOBiJRthjIEITvSvS0YZOxgLtWgGiks/pGUw5wm1rguuQVyZ1/LfXBooYJo\n+u/v21AEjpuTg7JlwbqXr2k5LojAGq7AxDyWy21IW0E45Gog38zg/hwNll+hjRbSu\n+pipf74WXR6xMMlW6A+XWUvElkicfDx8e9LJUnqWbZ+FL7X4SB54ZHNCvfo/8Ug1V\n+2tiY9WbUZL9n5ZQHNlk3J+UK/KDvwey1VzKPFjpQNlfahhnppDGiCey+mERjI+75\n+gPbk0ctOAEYXgLJjoonGX+iByAfY0YyJF281CtaK/sXQU+TzLLT15WET+gYGsJdY\n+xh1PdPscNdSgYudvbKZoFnqUwEGEfD8dT5bjOphfY5+LvGUR2GuLNZpMidcduTYf\n+SWAY/vQHQIJArXu29BKscm3tg6tzXu3l9p/bGIQUQB7obN91y3xD3BLICIPRGhKE\n+924wxxCuH1vLKmxWDdAAxKo+rEdLJ/rbZnjWQENEFiJ114fBk2NVABEBAAGJBEQE\n+GAEIAA8FAln5DnwCGwIFCQPCZwACKQkQjjqPMkfby7/BXSAEGQEIAAYFAln5DnwA\n+CgkQYFGSo/6YSmANoQ//SbcKxkop2zA2HrWS4THcEJQwSJ0KGAN/VB83JQhoWThX\n+CWxsFNJjBy7+rsoXd3wQG1/aN42nTuj+eh+R6WJJaqqnMqd52l4Kc1kJA6z4DGsy\n+3azCDvyzibM0AkJyMJyYi6HRKjzA4M+xKR1HoT/NdQUP5CBUVfvMblSaOWiw4rja\n+IhWcbgbQ+Zam/VaV5l1O90eaD9tL3twSfPLYZ/wkeO63jJKHBpI8fpMql/bLg9WD\n+Au3h/lU63NWe5lZO1z/jIdfiTSvg8nu162vcOgmUCWo9spkybjJd0Mx6ZId79rVo\n+58lwZ4QoaMgPGoVP67LyLOxJTIXeyG5xr1LxhMPMGbnBhlnMQrboLV9kPEL3raHE\n+EEKDTtZimVK3ZxmfyBd6MDmwcL/K73xu/R8be9TgdwD8/BZJSOTkO87qZ82G9T7E\n+oY5IHU+qd41/Yjbut7AVtAlCr5Lor31EYvZh3gI/H8uZFddOu37Ij7e9Fw2ywv3A\n+wPks89tfOvahkfCOJ29znB+uQYpJ461jjhdkB7EHG4ae07M5rRtkNbIc3dqbnMhz\n+VA3JpRJN77xPXV7uITHo1s+b50RvWmfYW91zvipaSZxbMLuGBMhn/1QaM1djLOYN\n+JordDBwEr2bi5a063yUbZrk6ddECuyxndDHWDNr+Tqx6o7lmAT48UJ199zA4scbf\n+2g/9EiRPGcRovsn1tUdjzfmWDxhrRV6F3rYJB1+i6Mqeg2iHHYxxiNDXcuWYXHQ/\n+WPWLk5+lgh0rQbrE7InzEejoM0FIHzLTm0lSQpau50/PT2FiH6sOEEDyT2IhBtXX\n+eOnKAi1IfGNMzEaPEY8PXH78dEGv0iXIgy4l8Bc57q09Z9R/OUi+Yb1p+S5F/aOi\n+7Jd53GGE1bfBIlsMos092XoiMdvKmAczyCUIempKHUBPoqfJge77qk7zJKkyM3Dk\n+VX0lXLdhj0PfslFrNf2uRF4uZkmfUV7peeD023c0/SVp3ILUAVds52yawi6Exv4a\n+bbvhIw72fc31frCRBqc9HVsBraoozzE9bksG1MdNI3GgKxecOu9lldedlIqi4lO4\n+7kTVDLEmcsQO+sSxkXQz2sMSD01CQndpPuhFNlqvVnfK+Kv8pSG37VzSSQz1nt5K\n+w/fJBo4T/ztR7D9RzbSDxBP8Jjaa+UYabjab5HcE0JI4CpgmzIOB7qPVbYCn+LNX\n+c8Xw5/9iTw+ayawl7PCGRfd14/OPRzI8vS0I9bF8AG84XM46yxAtYieH/9RI3b6/\n+GiQYDkBNi6Kb1LfSzx8oKAkbMgiy4y3vWxLQnE34bAoXjGiYdAMliOsyGcvmnObD\n+GmSTIlIqunq60CyhaUSIkl2VRhjzz0igfS9751XEvnjeXDc=\n+=PVBi\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "3c098a8aa0780009c11b66b1a5d488a928629ebf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzA5OGE4YWEwNzgwMDA5YzExYjY2YjFhNWQ0ODhhOTI4NjI5ZWJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T08:01:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T08:33:10Z"
      },
      "message": "Merge #11651: refactor: Make all #includes relative to project root (laanwj, MeshCollider, ryanofsky)\n\n7b91b5f Remove trailing whitespace causing travis failure (MeshCollider)\n434f5a2 Recommend #include<> syntax in developer notes (Russell Yanofsky)\n96b9281 refactor: Include obj/build.h instead of build.h (Wladimir J. van der Laan)\n138016b test: refactor: Use absolute include paths for test data files (Wladimir J. van der Laan)\ne7b3163 qt: refactor: Changes to make include paths absolute (Wladimir J. van der Laan)\n0c71521 build: Remove -I for everything but project root (Wladimir J. van der Laan)\n5b56ec9 qt: refactor: Use absolute include paths in .ui files (Wladimir J. van der Laan)\n1a44534 scripted-diff: Replace #include \"\" with #include <> (ryanofsky) (MeshCollider)\n\nPull request description:\n\n  Rebase of #11053\n\n  Previously started by @laanwj, ACK'ed by promag, ryanofsky, jonasschnelli, and concept-ACK'ed by practicalswift and jnewbery. Thus should be almost RTM :)\n\nTree-SHA512: d8d25248309deb06a54686c4a6bafd290ba69dcd0df391a50d1caed2c22ff2659be442459bdd9d1fc3b6a1360ba0804a907b1402d206df3e1cb6e8924e3c7f3e",
      "tree": {
        "sha": "9199f290ff331a5f8bc1d2ba1a29e9fd236eefe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9199f290ff331a5f8bc1d2ba1a29e9fd236eefe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c098a8aa0780009c11b66b1a5d488a928629ebf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDU1GAAoJEB5K7WKYbNJd4WsIAJIzGIYGoKefMkNZwnRx41Bl\n+vfBJiwAhEsKBGCniwyXrl+hChQrB8jOi4v2PHsGyK2oUAjYebTjC4zU2jhad/oc\nz4qqUn5IWQaAym0QLowGYAfmO591aXVvvTlj9KosBLb+Rkp1sFbXTvGCryyWR4Cg\nrW7mAnGACDatp465n0/FEGUV59nfPDwWfSENnD9fdSFLZVMgNoXZmGz7lCgeICHa\ngfTCDcze0DVWPRvDx1w8NTziIVNS1kMlmxwgltTvYMrKhVFJ+e6a40HTHGYu2KuL\nqv9bjpgqu00s9W6NzZcmr+WMrFzkCmCohz/9jnDarqVZqML6Lkv3xthTzTCPKuc=\n=P3A6\n-----END PGP SIGNATURE-----",
        "payload": "tree 9199f290ff331a5f8bc1d2ba1a29e9fd236eefe3\nparent 54aedc013744c86b11157423fa3cffc9a51eef02\nparent 7b91b5f8a4417da1940956c1ab32dba94dc104e1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510819279 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510821190 +0100\n\nMerge #11651: refactor: Make all #includes relative to project root (laanwj, MeshCollider, ryanofsky)\n\n7b91b5f Remove trailing whitespace causing travis failure (MeshCollider)\n434f5a2 Recommend #include<> syntax in developer notes (Russell Yanofsky)\n96b9281 refactor: Include obj/build.h instead of build.h (Wladimir J. van der Laan)\n138016b test: refactor: Use absolute include paths for test data files (Wladimir J. van der Laan)\ne7b3163 qt: refactor: Changes to make include paths absolute (Wladimir J. van der Laan)\n0c71521 build: Remove -I for everything but project root (Wladimir J. van der Laan)\n5b56ec9 qt: refactor: Use absolute include paths in .ui files (Wladimir J. van der Laan)\n1a44534 scripted-diff: Replace #include \"\" with #include <> (ryanofsky) (MeshCollider)\n\nPull request description:\n\n  Rebase of #11053\n\n  Previously started by @laanwj, ACK'ed by promag, ryanofsky, jonasschnelli, and concept-ACK'ed by practicalswift and jnewbery. Thus should be almost RTM :)\n\nTree-SHA512: d8d25248309deb06a54686c4a6bafd290ba69dcd0df391a50d1caed2c22ff2659be442459bdd9d1fc3b6a1360ba0804a907b1402d206df3e1cb6e8924e3c7f3e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c098a8aa0780009c11b66b1a5d488a928629ebf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c098a8aa0780009c11b66b1a5d488a928629ebf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c098a8aa0780009c11b66b1a5d488a928629ebf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54aedc013744c86b11157423fa3cffc9a51eef02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aedc013744c86b11157423fa3cffc9a51eef02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54aedc013744c86b11157423fa3cffc9a51eef02"
      },
      {
        "sha": "7b91b5f8a4417da1940956c1ab32dba94dc104e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b91b5f8a4417da1940956c1ab32dba94dc104e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b91b5f8a4417da1940956c1ab32dba94dc104e1"
      }
    ],
    "stats": {
      "total": 4135,
      "additions": 2071,
      "deletions": 2064
    },
    "files": [
      {
        "sha": "7f34b07d151a009574a2d3cc1e170069cfa03366",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -492,6 +492,14 @@ namespace {\n \n   - *Rationale*: Avoids confusion about the namespace context\n \n+- Prefer `#include <primitives/transaction.h>` bracket syntax instead of\n+  `#include \"primitives/transactions.h\"`` quote syntax when possible.\n+\n+  - *Rationale*: Bracket syntax is less ambiguous because the preprocessor\n+    searches a fixed list of include directories without taking location of the\n+    source file into account. This allows quoted includes to stand out more when\n+    the location of the source file actually is relevant.\n+\n GUI\n -----\n "
      },
      {
        "sha": "29e4ae56d025ccc50d348e76bf8a02df8e144318",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -18,7 +18,7 @@ else\n LIBUNIVALUE = $(UNIVALUE_LIBS)\n endif\n \n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)"
      },
      {
        "sha": "cbf3960cc7591a1b1b6a13767f18738d7edb275b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -362,8 +362,7 @@ RES_MOVIES = $(wildcard $(srcdir)/qt/res/movies/spinner-*.png)\n \n BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n \n-BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n-  -I$(builddir)/qt/forms -DQT_NO_KEYWORDS\n+BITCOIN_QT_INCLUDES = -DQT_NO_KEYWORDS\n \n qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)"
      },
      {
        "sha": "f037705aaf9470af5d7c69909aa784978a6ce0eb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -96,7 +96,7 @@ BITCOIN_TESTS += \\\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n-test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)\n+test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)\n test_test_bitcoin_LDADD =\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)"
      },
      {
        "sha": "0f9ccf1e9a1220293b5800a8d677fb578210fda6",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,17 +3,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"addrdb.h\"\n-\n-#include \"addrman.h\"\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"fs.h\"\n-#include \"hash.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n+#include <addrdb.h>\n+\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <tinyformat.h>\n+#include <util.h>\n \n namespace {\n "
      },
      {
        "sha": "098da4240e46ca7cf2194f978995201990567169",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_ADDRDB_H\n #define BITCOIN_ADDRDB_H\n \n-#include \"fs.h\"\n-#include \"serialize.h\"\n+#include <fs.h>\n+#include <serialize.h>\n \n #include <string>\n #include <map>"
      },
      {
        "sha": "ddcdf4c2f4ae8043426ec1d7ef3313928cef7484",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"addrman.h\"\n+#include <addrman.h>\n \n-#include \"hash.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <hash.h>\n+#include <serialize.h>\n+#include <streams.h>\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {"
      },
      {
        "sha": "b06b272962062d8009d298b8cf1d0d727e352c8f",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include \"netaddress.h\"\n-#include \"protocol.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n-#include \"timedata.h\"\n-#include \"util.h\"\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <sync.h>\n+#include <timedata.h>\n+#include <util.h>\n \n #include <map>\n #include <set>"
      },
      {
        "sha": "738224fb704049298dd4594e8cfe16714a56abd4",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"arith_uint256.h\"\n+#include <arith_uint256.h>\n \n-#include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n-#include \"crypto/common.h\"\n+#include <uint256.h>\n+#include <utilstrencodings.h>\n+#include <crypto/common.h>\n \n #include <stdio.h>\n #include <string.h>"
      },
      {
        "sha": "cd087e799787b453a4cbf9bdf166a630ee458f04",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n+#include <base58.h>\n \n-#include \"bech32.h\"\n-#include \"hash.h\"\n-#include \"script/script.h\"\n-#include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n+#include <bech32.h>\n+#include <hash.h>\n+#include <script/script.h>\n+#include <uint256.h>\n+#include <utilstrencodings.h>\n \n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>"
      },
      {
        "sha": "fee79f02bf6c8ba2a92cff54c75de6de25ca2711",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -14,11 +14,11 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include \"chainparams.h\"\n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"script/standard.h\"\n-#include \"support/allocators/zeroafterfree.h\"\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <support/allocators/zeroafterfree.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "274782e467c45aae58559981c5e9bdd3850df6fb",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bech32.h\"\n+#include <bech32.h>\n \n namespace\n {"
      },
      {
        "sha": "536e450940a503b1a268b483118a916f8080e651",
        "filename": "src/bench/Examples.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/Examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/Examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/Examples.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"validation.h\"\n-#include \"utiltime.h\"\n+#include <bench/bench.h>\n+#include <validation.h>\n+#include <utiltime.h>\n \n // Sanity test: this should loop ten times, and\n // min/max/average should be close to 100ms."
      },
      {
        "sha": "8f6d07ac166d44008ea8990a7b0365546a20fcc8",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"validation.h\"\n-#include \"base58.h\"\n+#include <validation.h>\n+#include <base58.h>\n \n #include <array>\n #include <vector>"
      },
      {
        "sha": "148245281469090a31e13f3e02fb66a57d0fe511",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"perf.h\"\n+#include <bench/bench.h>\n+#include <bench/perf.h>\n \n #include <assert.h>\n #include <iostream>"
      },
      {
        "sha": "84e51d809a2fcff509b2fdab718a84d1b77c05a4",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"crypto/sha256.h\"\n-#include \"key.h\"\n-#include \"validation.h\"\n-#include \"util.h\"\n-#include \"random.h\"\n+#include <crypto/sha256.h>\n+#include <key.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <random.h>\n \n int\n main(int argc, char** argv)"
      },
      {
        "sha": "89ba3d3d21f628d8beaa610313c9251fa6b8ac42",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"coins.h\"\n-#include \"policy/policy.h\"\n-#include \"wallet/crypter.h\"\n+#include <bench/bench.h>\n+#include <coins.h>\n+#include <policy/policy.h>\n+#include <wallet/crypter.h>\n \n #include <vector>\n "
      },
      {
        "sha": "9533b3c7114b71261ac9ec7d701374ae719773c7",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,15 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"chainparams.h\"\n-#include \"validation.h\"\n-#include \"streams.h\"\n-#include \"consensus/validation.h\"\n+#include <chainparams.h>\n+#include <validation.h>\n+#include <streams.h>\n+#include <consensus/validation.h>\n \n namespace block_bench {\n-#include \"bench/data/block413567.raw.h\"\n+#include <bench/data/block413567.raw.h>\n } // namespace block_bench\n \n // These are the two major time-sinks which happen after we have fully received"
      },
      {
        "sha": "7e63e820db1e7be6f89ef7b5f3957ee61b6f5519",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"util.h\"\n-#include \"validation.h\"\n-#include \"checkqueue.h\"\n-#include \"prevector.h\"\n+#include <bench/bench.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <checkqueue.h>\n+#include <prevector.h>\n #include <vector>\n #include <boost/thread/thread.hpp>\n-#include \"random.h\"\n+#include <random.h>\n \n \n // This Benchmark tests the CheckQueue with the lightest"
      },
      {
        "sha": "ff57f8817006d01b5c0eddb212914419d38ef4fe",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"wallet/wallet.h\"\n+#include <bench/bench.h>\n+#include <wallet/wallet.h>\n \n #include <set>\n "
      },
      {
        "sha": "b37b5cad6244d32fd4cd5b1c13718279a3a5c5b1",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,16 +4,16 @@\n \n #include <iostream>\n \n-#include \"bench.h\"\n-#include \"bloom.h\"\n-#include \"hash.h\"\n-#include \"random.h\"\n-#include \"uint256.h\"\n-#include \"utiltime.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha256.h\"\n-#include \"crypto/sha512.h\"\n+#include <bench/bench.h>\n+#include <bloom.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <utiltime.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <crypto/sha512.h>\n \n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;"
      },
      {
        "sha": "b0bfa9514462f3aefada2d34aa9024055dff05c5",
        "filename": "src/bench/lockedpool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n+#include <bench/bench.h>\n \n-#include \"support/lockedpool.h\"\n+#include <support/lockedpool.h>\n \n #include <iostream>\n #include <vector>"
      },
      {
        "sha": "eda6edbb235004dea4a45bdccd9e1a928ad85ce6",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"policy/policy.h\"\n-#include \"txmempool.h\"\n+#include <bench/bench.h>\n+#include <policy/policy.h>\n+#include <txmempool.h>\n \n #include <list>\n #include <vector>"
      },
      {
        "sha": "4045670a3110038afca2a71fefdd13caf8738771",
        "filename": "src/bench/perf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"perf.h\"\n+#include <bench/perf.h>\n \n #if defined(__i386__) || defined(__x86_64__)\n "
      },
      {
        "sha": "de7ecab73758a3882143175758af46167d159855",
        "filename": "src/bench/prevector_destructor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/prevector_destructor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/prevector_destructor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector_destructor.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"prevector.h\"\n+#include <bench/bench.h>\n+#include <prevector.h>\n \n static void PrevectorDestructor(benchmark::State& state)\n {"
      },
      {
        "sha": "452099b80016eceb755123bcb4aeda95b29b6905",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <iostream>\n \n-#include \"bench.h\"\n-#include \"bloom.h\"\n+#include <bench/bench.h>\n+#include <bloom.h>\n \n static void RollingBloom(benchmark::State& state)\n {"
      },
      {
        "sha": "bfa5806c9d4d1a40cc6b9cffc40e520f2f4166a2",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bench.h\"\n-#include \"key.h\"\n+#include <bench/bench.h>\n+#include <key.h>\n #if defined(HAVE_CONSENSUS_LIB)\n-#include \"script/bitcoinconsensus.h\"\n+#include <script/bitcoinconsensus.h>\n #endif\n-#include \"script/script.h\"\n-#include \"script/sign.h\"\n-#include \"streams.h\"\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <streams.h>\n \n #include <array>\n "
      },
      {
        "sha": "5e3b76a295ea68b432ff96d56ed3770a788489a3",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,22 +4,22 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"chainparamsbase.h\"\n-#include \"clientversion.h\"\n-#include \"fs.h\"\n-#include \"rpc/client.h\"\n-#include \"rpc/protocol.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <chainparamsbase.h>\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <rpc/client.h>\n+#include <rpc/protocol.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <stdio.h>\n \n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n-#include \"support/events.h\"\n+#include <support/events.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "c9223dbf10b2bf16a8fb59cd8a22c02d4ee9bfda",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,24 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"base58.h\"\n-#include \"clientversion.h\"\n-#include \"coins.h\"\n-#include \"consensus/consensus.h\"\n-#include \"core_io.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"policy/rbf.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"script/sign.h\"\n+#include <base58.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n #include <univalue.h>\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n #include <stdio.h>\n "
      },
      {
        "sha": "bc23912d2b098e4b8fccca4e55857a201cbe81fd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,21 +4,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"compat.h\"\n-#include \"fs.h\"\n-#include \"rpc/server.h\"\n-#include \"init.h\"\n-#include \"noui.h\"\n-#include \"scheduler.h\"\n-#include \"util.h\"\n-#include \"httpserver.h\"\n-#include \"httprpc.h\"\n-#include \"utilstrencodings.h\"\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <compat.h>\n+#include <fs.h>\n+#include <rpc/server.h>\n+#include <init.h>\n+#include <noui.h>\n+#include <scheduler.h>\n+#include <util.h>\n+#include <httpserver.h>\n+#include <httprpc.h>\n+#include <utilstrencodings.h>\n \n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "6ff4d97bf433d33eb92bcc75973d846b01112000",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,16 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"blockencodings.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/validation.h\"\n-#include \"chainparams.h\"\n-#include \"hash.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"txmempool.h\"\n-#include \"validation.h\"\n-#include \"util.h\"\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <consensus/validation.h>\n+#include <chainparams.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <util.h>\n \n #include <unordered_map>\n "
      },
      {
        "sha": "d034bb3080fbbe6358aae892a96510de5b80870c",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_BLOCK_ENCODINGS_H\n #define BITCOIN_BLOCK_ENCODINGS_H\n \n-#include \"primitives/block.h\"\n+#include <primitives/block.h>\n \n #include <memory>\n "
      },
      {
        "sha": "11ea099637bebb53cef8687e9c25e29e3552bd5c",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bloom.h\"\n-\n-#include \"primitives/transaction.h\"\n-#include \"hash.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n+#include <bloom.h>\n+\n+#include <primitives/transaction.h>\n+#include <hash.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <random.h>\n+#include <streams.h>\n \n #include <math.h>\n #include <stdlib.h>"
      },
      {
        "sha": "d29a8dcd6f88d8ab622d43a545dac7790893dc1e",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_BLOOM_H\n #define BITCOIN_BLOOM_H\n \n-#include \"serialize.h\"\n+#include <serialize.h>\n \n #include <vector>\n "
      },
      {
        "sha": "9f40c41fde5d5ddac690a5950c99c8605568386d",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n+#include <chain.h>\n \n /**\n  * CChain implementation"
      },
      {
        "sha": "ca1900c22bd54ad30acc81645564ae8bb055ff6b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_CHAIN_H\n #define BITCOIN_CHAIN_H\n \n-#include \"arith_uint256.h\"\n-#include \"primitives/block.h\"\n-#include \"pow.h\"\n-#include \"tinyformat.h\"\n-#include \"uint256.h\"\n+#include <arith_uint256.h>\n+#include <primitives/block.h>\n+#include <pow.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n \n #include <vector>\n "
      },
      {
        "sha": "e753c5ccffe4f5d290f2f47b54d39b8506d20365",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"consensus/merkle.h\"\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n \n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <tinyformat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <assert.h>\n \n-#include \"chainparamsseeds.h\"\n+#include <chainparamsseeds.h>\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {"
      },
      {
        "sha": "0d82a998b199df7f74a872f3975eecea0ca6c8d9",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n-#include \"chainparamsbase.h\"\n-#include \"consensus/params.h\"\n-#include \"primitives/block.h\"\n-#include \"protocol.h\"\n+#include <chainparamsbase.h>\n+#include <consensus/params.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n \n #include <memory>\n #include <vector>"
      },
      {
        "sha": "a7e87faee32805638d9ea5a8688fb93d32cc832b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparamsbase.h\"\n+#include <chainparamsbase.h>\n \n-#include \"tinyformat.h\"\n-#include \"util.h\"\n+#include <tinyformat.h>\n+#include <util.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "2ef4dd833042f79a6dc596d0882323881696b8db",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"checkpoints.h\"\n+#include <checkpoints.h>\n \n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"reverse_iterator.h\"\n-#include \"validation.h\"\n-#include \"uint256.h\"\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <reverse_iterator.h>\n+#include <validation.h>\n+#include <uint256.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "df97a674a825f24c10fe155e057d27eaf2ec966d",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CHECKPOINTS_H\n #define BITCOIN_CHECKPOINTS_H\n \n-#include \"uint256.h\"\n+#include <uint256.h>\n \n #include <map>\n "
      },
      {
        "sha": "08de336079da0e3678fa48bcdd20002c34963f32",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CHECKQUEUE_H\n #define BITCOIN_CHECKQUEUE_H\n \n-#include \"sync.h\"\n+#include <sync.h>\n \n #include <algorithm>\n #include <vector>"
      },
      {
        "sha": "f7ded63e6a55e5f2eb890737915a4ce5e57b5c0a",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"clientversion.h\"\n+#include <clientversion.h>\n \n-#include \"tinyformat.h\"\n+#include <tinyformat.h>\n \n #include <string>\n \n@@ -39,7 +39,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n //! First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n-#include \"build.h\"\n+#include <obj/build.h>\n #endif\n \n //! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$"
      },
      {
        "sha": "3a3d117d53c4910fe6be6e61e494dd61bc3ac0a5",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_CLIENTVERSION_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif //HAVE_CONFIG_H\n \n // Check that required client information is defined"
      },
      {
        "sha": "03138ef878649b248b53f7cd37dd1096aa665344",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coins.h\"\n+#include <coins.h>\n \n-#include \"consensus/consensus.h\"\n-#include \"memusage.h\"\n-#include \"random.h\"\n+#include <consensus/consensus.h>\n+#include <memusage.h>\n+#include <random.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "0280abb56c03cc93bd05b0be3f80aaba1cd03c68",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,13 +6,13 @@\n #ifndef BITCOIN_COINS_H\n #define BITCOIN_COINS_H\n \n-#include \"primitives/transaction.h\"\n-#include \"compressor.h\"\n-#include \"core_memusage.h\"\n-#include \"hash.h\"\n-#include \"memusage.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <primitives/transaction.h>\n+#include <compressor.h>\n+#include <core_memusage.h>\n+#include <hash.h>\n+#include <memusage.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n #include <assert.h>\n #include <stdint.h>"
      },
      {
        "sha": "2d699159b780587aa7a78ad9fe8a13553a852fc4",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_COMPAT_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #ifdef WIN32\n@@ -49,7 +49,7 @@\n \n #ifndef WIN32\n typedef unsigned int SOCKET;\n-#include \"errno.h\"\n+#include <errno.h>\n #define WSAGetLastError()   errno\n #define WSAEINVAL           EINVAL\n #define WSAEALREADY         EALREADY"
      },
      {
        "sha": "89305347210d9a8b3d8be3451df5c1dfb55b4b6f",
        "filename": "src/compat/byteswap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_COMPAT_BYTESWAP_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "9fabbd0bfb7d14bfbbbe05689bd45d7c6c2507b4",
        "filename": "src/compat/endian.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,10 +6,10 @@\n #define BITCOIN_COMPAT_ENDIAN_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"compat/byteswap.h\"\n+#include <compat/byteswap.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "6633658c166a964a07b654358e37e8c299b34d26",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <cstddef>"
      },
      {
        "sha": "20d2ad3cb67c7bad7ba15c9a4f9da23bd478ae02",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <cstddef>"
      },
      {
        "sha": "313435a2225c94841a2e9089e03aefe5dbce7afa",
        "filename": "src/compat/strnlen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/strnlen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compat/strnlen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/strnlen.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <cstring>"
      },
      {
        "sha": "a729e28f079fac12ec241aaa26ef72927ac4fd3b",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compressor.h\"\n+#include <compressor.h>\n \n-#include \"hash.h\"\n-#include \"pubkey.h\"\n-#include \"script/standard.h\"\n+#include <hash.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n \n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n {"
      },
      {
        "sha": "8731eef9f735e6e47272f386c562783c8cbd4b33",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_COMPRESSOR_H\n #define BITCOIN_COMPRESSOR_H\n \n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <serialize.h>\n \n class CKeyID;\n class CPubKey;"
      },
      {
        "sha": "fef4a5d560cfc3343b64ef6675f28243b21894a1",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"merkle.h\"\n-#include \"hash.h\"\n-#include \"utilstrencodings.h\"\n+#include <consensus/merkle.h>\n+#include <hash.h>\n+#include <utilstrencodings.h>\n \n /*     WARNING! If you're reading this because you're learning about crypto\n        and/or designing a new system that will use merkle trees, keep in mind"
      },
      {
        "sha": "c1573cc214f1818488bcd4cad26991aaa227041b",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -8,9 +8,9 @@\n #include <stdint.h>\n #include <vector>\n \n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n+#include <primitives/transaction.h>\n+#include <primitives/block.h>\n+#include <uint256.h>\n \n uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated = nullptr);\n std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);"
      },
      {
        "sha": "c9fbba12a2aca0d78c56c1394612f8acb2d49bbb",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_CONSENSUS_PARAMS_H\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n-#include \"uint256.h\"\n+#include <uint256.h>\n #include <limits>\n #include <map>\n #include <string>"
      },
      {
        "sha": "be73d0a2f9f60305d20f8b91668a78271197f26c",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"tx_verify.h\"\n+#include <consensus/tx_verify.h>\n \n-#include \"consensus.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/interpreter.h\"\n-#include \"validation.h\"\n+#include <consensus/consensus.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <consensus/validation.h>\n \n // TODO remove the following dependencies\n-#include \"chain.h\"\n-#include \"coins.h\"\n-#include \"utilmoneystr.h\"\n+#include <chain.h>\n+#include <coins.h>\n+#include <utilmoneystr.h>\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {"
      },
      {
        "sha": "a4836ceda460d01418e2320181b58d365174ea33",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CONSENSUS_TX_VERIFY_H\n #define BITCOIN_CONSENSUS_TX_VERIFY_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "55f6c363fc7585a59a1fabc0a49ae44fc59bdd45",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -7,10 +7,10 @@\n #define BITCOIN_CONSENSUS_VALIDATION_H\n \n #include <string>\n-#include \"version.h\"\n-#include \"consensus/consensus.h\"\n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n+#include <version.h>\n+#include <consensus/consensus.h>\n+#include <primitives/transaction.h>\n+#include <primitives/block.h>\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;"
      },
      {
        "sha": "7ed84d6665d4bd1ba9a40e2aeff71e3b4707d9b3",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CORE_IO_H\n #define BITCOIN_CORE_IO_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "d234f0a9d0c12794e52d477a1d361bf5abc128d3",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_CORE_MEMUSAGE_H\n #define BITCOIN_CORE_MEMUSAGE_H\n \n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n-#include \"memusage.h\"\n+#include <primitives/transaction.h>\n+#include <primitives/block.h>\n+#include <memusage.h>\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n     return memusage::DynamicUsage(script);"
      },
      {
        "sha": "2f5b67b5c709d462756820430acc9d0113dd5cd9",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core_io.h\"\n+#include <core_io.h>\n \n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n #include <univalue.h>\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/predicate.hpp>"
      },
      {
        "sha": "e97876bef313c27a5073aad43f602f92d61dabed",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,19 +2,19 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core_io.h\"\n-\n-#include \"base58.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/validation.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <core_io.h>\n+\n+#include <base58.h>\n+#include <consensus/consensus.h>\n+#include <consensus/validation.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <streams.h>\n #include <univalue.h>\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n UniValue ValueFromAmount(const CAmount& amount)\n {"
      },
      {
        "sha": "baba8bcad01952c515187300a835c2367d5de4b6",
        "filename": "src/crypto/aes.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"aes.h\"\n-#include \"crypto/common.h\"\n+#include <crypto/aes.h>\n+#include <crypto/common.h>\n \n #include <assert.h>\n #include <string.h>\n \n extern \"C\" {\n-#include \"crypto/ctaes/ctaes.c\"\n+#include <crypto/ctaes/ctaes.c>\n }\n \n AES128Encrypt::AES128Encrypt(const unsigned char key[16])"
      },
      {
        "sha": "7dda94d291e0bcd86d5f17c2ba2057ea81d709de",
        "filename": "src/crypto/aes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -8,7 +8,7 @@\n #define BITCOIN_CRYPTO_AES_H\n \n extern \"C\" {\n-#include \"crypto/ctaes/ctaes.h\"\n+#include <crypto/ctaes/ctaes.h>\n }\n \n static const int AES_BLOCKSIZE = 16;"
      },
      {
        "sha": "ac4470f04f73e1b7baaac2f16da9af92993922a8",
        "filename": "src/crypto/chacha20.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha20.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,8 +5,8 @@\n // Based on the public domain implementation 'merged' by D. J. Bernstein\n // See https://cr.yp.to/chacha.html.\n \n-#include \"crypto/common.h\"\n-#include \"crypto/chacha20.h\"\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "5a193a4e6497b1d742ae3b9503f64731ea235774",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,13 +6,13 @@\n #define BITCOIN_CRYPTO_COMMON_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <stdint.h>\n #include <string.h>\n \n-#include \"compat/endian.h\"\n+#include <compat/endian.h>\n \n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {"
      },
      {
        "sha": "9366e216c2de729e43ed7c1b676c2d728a770d14",
        "filename": "src/crypto/hmac_sha256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/hmac_sha256.h\"\n+#include <crypto/hmac_sha256.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "40d40f9fb2ee9c9ed2f1ea9f4a2c579adc943a5a",
        "filename": "src/crypto/hmac_sha256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CRYPTO_HMAC_SHA256_H\n #define BITCOIN_CRYPTO_HMAC_SHA256_H\n \n-#include \"crypto/sha256.h\"\n+#include <crypto/sha256.h>\n \n #include <stdint.h>\n #include <stdlib.h>"
      },
      {
        "sha": "f984201f6a948b61f7a4fd19bb408bdb9ec0e6f6",
        "filename": "src/crypto/hmac_sha512.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/hmac_sha512.h\"\n+#include <crypto/hmac_sha512.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "6d3fd59f27e65d979d003d6b39048d6278f11ff0",
        "filename": "src/crypto/hmac_sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/hmac_sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CRYPTO_HMAC_SHA512_H\n #define BITCOIN_CRYPTO_HMAC_SHA512_H\n \n-#include \"crypto/sha512.h\"\n+#include <crypto/sha512.h>\n \n #include <stdint.h>\n #include <stdlib.h>"
      },
      {
        "sha": "4afa9abd1e615780fa28a94a80b069860a716530",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/ripemd160.h\"\n+#include <crypto/ripemd160.h>\n \n-#include \"crypto/common.h\"\n+#include <crypto/common.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "8ccc5e112aa69f5e9b9ccb32c4ca176faccb3c35",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha1.h\"\n+#include <crypto/sha1.h>\n \n-#include \"crypto/common.h\"\n+#include <crypto/common.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "9a21aec20e9d4e5e19a1f82b71cb42651ef195ca",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha256.h\"\n-#include \"crypto/common.h\"\n+#include <crypto/sha256.h>\n+#include <crypto/common.h>\n \n #include <assert.h>\n #include <string.h>"
      },
      {
        "sha": "aa46e7ba86392badc12d6ddb6300c15612589c5b",
        "filename": "src/crypto/sha512.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/crypto/sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha512.h\"\n+#include <crypto/sha512.h>\n \n-#include \"crypto/common.h\"\n+#include <crypto/common.h>\n \n #include <string.h>\n "
      },
      {
        "sha": "92c4fe363ca4bc72cc88e71c4dd3bcd0ce57947d",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"dbwrapper.h\"\n+#include <dbwrapper.h>\n \n-#include \"fs.h\"\n-#include \"util.h\"\n-#include \"random.h\"\n+#include <fs.h>\n+#include <util.h>\n+#include <random.h>\n \n #include <leveldb/cache.h>\n #include <leveldb/env.h>"
      },
      {
        "sha": "9f4d4814eb0cb72ea654c1e2c781f43074e41a15",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,13 +5,13 @@\n #ifndef BITCOIN_DBWRAPPER_H\n #define BITCOIN_DBWRAPPER_H\n \n-#include \"clientversion.h\"\n-#include \"fs.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <clientversion.h>\n+#include <fs.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>"
      },
      {
        "sha": "570ed3e2ee2c6828475bae26bc44539f7e8e8567",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1,4 +1,4 @@\n-#include \"fs.h\"\n+#include <fs.h>\n \n namespace fsbridge {\n "
      },
      {
        "sha": "1363d32cf463806d8f1c51d45ff5bae6f9e5efac",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"hash.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/hmac_sha512.h\"\n-#include \"pubkey.h\"\n+#include <hash.h>\n+#include <crypto/common.h>\n+#include <crypto/hmac_sha512.h>\n+#include <pubkey.h>\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)"
      },
      {
        "sha": "55724fb636a9a450a80909229e89a71dc4128234",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha256.h\"\n-#include \"prevector.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"version.h\"\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha256.h>\n+#include <prevector.h>\n+#include <serialize.h>\n+#include <uint256.h>\n+#include <version.h>\n \n #include <vector>\n "
      },
      {
        "sha": "6b6849e59bd44c2ce09e2cd83464ca653ea32abc",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,19 +2,19 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"httprpc.h\"\n-\n-#include \"base58.h\"\n-#include \"chainparams.h\"\n-#include \"httpserver.h\"\n-#include \"rpc/protocol.h\"\n-#include \"rpc/server.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"ui_interface.h\"\n-#include \"crypto/hmac_sha256.h\"\n+#include <httprpc.h>\n+\n+#include <base58.h>\n+#include <chainparams.h>\n+#include <httpserver.h>\n+#include <rpc/protocol.h>\n+#include <rpc/server.h>\n+#include <random.h>\n+#include <sync.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <ui_interface.h>\n+#include <crypto/hmac_sha256.h>\n #include <stdio.h>\n \n #include <boost/algorithm/string.hpp> // boost::trim"
      },
      {
        "sha": "7d590f8e1f7eb018e96f503455e6f3a1a29c4bbc",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,16 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"httpserver.h\"\n+#include <httpserver.h>\n \n-#include \"chainparamsbase.h\"\n-#include \"compat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"netbase.h\"\n-#include \"rpc/protocol.h\" // For HTTP status codes\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n+#include <chainparamsbase.h>\n+#include <compat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <netbase.h>\n+#include <rpc/protocol.h> // For HTTP status codes\n+#include <sync.h>\n+#include <ui_interface.h>\n \n #include <stdio.h>\n #include <stdlib.h>\n@@ -28,7 +28,7 @@\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n-#include \"support/events.h\"\n+#include <support/events.h>\n \n #ifdef EVENT__HAVE_NETINET_IN_H\n #include <netinet/in.h>"
      },
      {
        "sha": "439eaacfcc9445cb28e213fbf7164bdf893cf72c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,49 +4,49 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"init.h\"\n-\n-#include \"addrman.h\"\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"checkpoints.h\"\n-#include \"compat/sanity.h\"\n-#include \"consensus/validation.h\"\n-#include \"fs.h\"\n-#include \"httpserver.h\"\n-#include \"httprpc.h\"\n-#include \"key.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"netbase.h\"\n-#include \"net.h\"\n-#include \"net_processing.h\"\n-#include \"policy/feerate.h\"\n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-#include \"rpc/server.h\"\n-#include \"rpc/register.h\"\n-#include \"rpc/safemode.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"script/standard.h\"\n-#include \"script/sigcache.h\"\n-#include \"scheduler.h\"\n-#include \"timedata.h\"\n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n-#include \"torcontrol.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"validationinterface.h\"\n+#include <init.h>\n+\n+#include <addrman.h>\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <checkpoints.h>\n+#include <compat/sanity.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <httpserver.h>\n+#include <httprpc.h>\n+#include <key.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <netbase.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <policy/feerate.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <rpc/server.h>\n+#include <rpc/register.h>\n+#include <rpc/safemode.h>\n+#include <rpc/blockchain.h>\n+#include <script/standard.h>\n+#include <script/sigcache.h>\n+#include <scheduler.h>\n+#include <timedata.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <torcontrol.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <validationinterface.h>\n #ifdef ENABLE_WALLET\n-#include \"wallet/init.h\"\n+#include <wallet/init.h>\n #endif\n-#include \"warnings.h\"\n+#include <warnings.h>\n #include <stdint.h>\n #include <stdio.h>\n #include <memory>\n@@ -64,7 +64,7 @@\n #include <openssl/crypto.h>\n \n #if ENABLE_ZMQ\n-#include \"zmq/zmqnotificationinterface.h\"\n+#include <zmq/zmqnotificationinterface.h>\n #endif\n \n bool fFeeEstimatesInitialized = false;"
      },
      {
        "sha": "73983caf4127bbad05e12e3ded964580832a79df",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n+#include <key.h>\n \n-#include \"arith_uint256.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/hmac_sha512.h\"\n-#include \"pubkey.h\"\n-#include \"random.h\"\n+#include <arith_uint256.h>\n+#include <crypto/common.h>\n+#include <crypto/hmac_sha512.h>\n+#include <pubkey.h>\n+#include <random.h>\n \n #include <secp256k1.h>\n #include <secp256k1_recovery.h>"
      },
      {
        "sha": "c610e5e6cd3e7fb5415a73e58865971222f2a273",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n-#include \"pubkey.h\"\n-#include \"serialize.h\"\n-#include \"support/allocators/secure.h\"\n-#include \"uint256.h\"\n+#include <pubkey.h>\n+#include <serialize.h>\n+#include <support/allocators/secure.h>\n+#include <uint256.h>\n \n #include <stdexcept>\n #include <vector>"
      },
      {
        "sha": "5718a14ca237541afc3dead572b426fe669c0d93",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"keystore.h\"\n+#include <keystore.h>\n \n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"util.h\"\n+#include <key.h>\n+#include <pubkey.h>\n+#include <util.h>\n \n bool CKeyStore::AddKey(const CKey &key) {\n     return AddKeyPubKey(key, key.GetPubKey());"
      },
      {
        "sha": "4e6d8e8a2763162e28594dff68fbd990f57735d1",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_KEYSTORE_H\n #define BITCOIN_KEYSTORE_H\n \n-#include \"key.h\"\n-#include \"pubkey.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"sync.h\"\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <sync.h>\n \n #include <boost/signals2/signal.hpp>\n "
      },
      {
        "sha": "d931171d35bfebbc8733554b7ad9264bfc1b4fc4",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_MEMUSAGE_H\n #define BITCOIN_MEMUSAGE_H\n \n-#include \"indirectmap.h\"\n+#include <indirectmap.h>\n \n #include <stdlib.h>\n "
      },
      {
        "sha": "f4db9dd57e4f950eb69ba9c492b1216678b81774",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"merkleblock.h\"\n+#include <merkleblock.h>\n \n-#include \"hash.h\"\n-#include \"consensus/consensus.h\"\n-#include \"utilstrencodings.h\"\n+#include <hash.h>\n+#include <consensus/consensus.h>\n+#include <utilstrencodings.h>\n \n \n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)"
      },
      {
        "sha": "b64c34370e5fa8d48e30b13a0a924319a3e36264",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_MERKLEBLOCK_H\n #define BITCOIN_MERKLEBLOCK_H\n \n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"primitives/block.h\"\n-#include \"bloom.h\"\n+#include <serialize.h>\n+#include <uint256.h>\n+#include <primitives/block.h>\n+#include <bloom.h>\n \n #include <vector>\n "
      },
      {
        "sha": "397d99fc9a3d02d1af2d47845d61590a7c167140",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,29 +3,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"miner.h\"\n-\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"coins.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/merkle.h\"\n-#include \"consensus/validation.h\"\n-#include \"hash.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n-#include \"policy/feerate.h\"\n-#include \"policy/policy.h\"\n-#include \"pow.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/standard.h\"\n-#include \"timedata.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"validationinterface.h\"\n+#include <miner.h>\n+\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <validation.h>\n+#include <net.h>\n+#include <policy/feerate.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <timedata.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <validationinterface.h>\n \n #include <algorithm>\n #include <queue>"
      },
      {
        "sha": "36276dc362c57c5a37cb6474d19e701d3e1ee07f",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include \"primitives/block.h\"\n-#include \"txmempool.h\"\n+#include <primitives/block.h>\n+#include <txmempool.h>\n \n #include <stdint.h>\n #include <memory>"
      },
      {
        "sha": "a8e5143d5ee7ccb98eeea7ecf769dcddecb60d03",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,23 +4,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"net.h\"\n-\n-#include \"addrman.h\"\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"consensus/consensus.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/sha256.h\"\n-#include \"hash.h\"\n-#include \"primitives/transaction.h\"\n-#include \"netbase.h\"\n-#include \"scheduler.h\"\n-#include \"ui_interface.h\"\n-#include \"utilstrencodings.h\"\n+#include <net.h>\n+\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <consensus/consensus.h>\n+#include <crypto/common.h>\n+#include <crypto/sha256.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <netbase.h>\n+#include <scheduler.h>\n+#include <ui_interface.h>\n+#include <utilstrencodings.h>\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "a7223050e77436b5ce7a80f4281d6bb90e3e75bc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,21 +6,21 @@\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n-#include \"addrdb.h\"\n-#include \"addrman.h\"\n-#include \"amount.h\"\n-#include \"bloom.h\"\n-#include \"compat.h\"\n-#include \"hash.h\"\n-#include \"limitedmap.h\"\n-#include \"netaddress.h\"\n-#include \"policy/feerate.h\"\n-#include \"protocol.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"sync.h\"\n-#include \"uint256.h\"\n-#include \"threadinterrupt.h\"\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <amount.h>\n+#include <bloom.h>\n+#include <compat.h>\n+#include <hash.h>\n+#include <limitedmap.h>\n+#include <netaddress.h>\n+#include <policy/feerate.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <threadinterrupt.h>\n \n #include <atomic>\n #include <deque>"
      },
      {
        "sha": "442cd00c9bc172ae3d68941772470db1f33c94cb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,34 +3,34 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"net_processing.h\"\n-\n-#include \"addrman.h\"\n-#include \"arith_uint256.h\"\n-#include \"blockencodings.h\"\n-#include \"chainparams.h\"\n-#include \"consensus/validation.h\"\n-#include \"hash.h\"\n-#include \"init.h\"\n-#include \"validation.h\"\n-#include \"merkleblock.h\"\n-#include \"net.h\"\n-#include \"netmessagemaker.h\"\n-#include \"netbase.h\"\n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"random.h\"\n-#include \"reverse_iterator.h\"\n-#include \"scheduler.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n-#include \"validationinterface.h\"\n+#include <net_processing.h>\n+\n+#include <addrman.h>\n+#include <arith_uint256.h>\n+#include <blockencodings.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <init.h>\n+#include <validation.h>\n+#include <merkleblock.h>\n+#include <net.h>\n+#include <netmessagemaker.h>\n+#include <netbase.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <reverse_iterator.h>\n+#include <scheduler.h>\n+#include <tinyformat.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n+#include <validationinterface.h>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\""
      },
      {
        "sha": "3fc1e058354233dedf4e0c1b0199a5af52f97c81",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_NET_PROCESSING_H\n #define BITCOIN_NET_PROCESSING_H\n \n-#include \"net.h\"\n-#include \"validationinterface.h\"\n-#include \"consensus/params.h\"\n+#include <net.h>\n+#include <validationinterface.h>\n+#include <consensus/params.h>\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;"
      },
      {
        "sha": "3ef3c67ae4edc101c7f9b5b672c5c553db061d2c",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,13 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifdef HAVE_CONFIG_H\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"netaddress.h\"\n-#include \"hash.h\"\n-#include \"utilstrencodings.h\"\n-#include \"tinyformat.h\"\n+#include <netaddress.h>\n+#include <hash.h>\n+#include <utilstrencodings.h>\n+#include <tinyformat.h>\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};"
      },
      {
        "sha": "3b542b4748bcfc63d4ef467b42a44d6db813f2d5",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,11 +6,11 @@\n #define BITCOIN_NETADDRESS_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"compat.h\"\n-#include \"serialize.h\"\n+#include <compat.h>\n+#include <serialize.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "bd1eaf062f1e3b248fc30f41ca7fdb0ef5b8dece",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,17 +4,17 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifdef HAVE_CONFIG_H\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"netbase.h\"\n+#include <netbase.h>\n \n-#include \"hash.h\"\n-#include \"sync.h\"\n-#include \"uint256.h\"\n-#include \"random.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <hash.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <random.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <atomic>\n "
      },
      {
        "sha": "0a07be87b77b06867145784b04ec4f79539116a4",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,12 +6,12 @@\n #define BITCOIN_NETBASE_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"compat.h\"\n-#include \"netaddress.h\"\n-#include \"serialize.h\"\n+#include <compat.h>\n+#include <netaddress.h>\n+#include <serialize.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "ea7fccacb20b7fb34f0cf0d97bc7432973c49b56",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_NETMESSAGEMAKER_H\n #define BITCOIN_NETMESSAGEMAKER_H\n \n-#include \"net.h\"\n-#include \"serialize.h\"\n+#include <net.h>\n+#include <serialize.h>\n \n class CNetMsgMaker\n {"
      },
      {
        "sha": "feb3464a56988a78a7b9565de9ed93b4f5e39689",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"noui.h\"\n+#include <noui.h>\n \n-#include \"ui_interface.h\"\n-#include \"util.h\"\n+#include <ui_interface.h>\n+#include <util.h>\n \n #include <cstdio>\n #include <stdint.h>"
      },
      {
        "sha": "26c44ee0cf11a129e59ccc23a2b63c7eaba1ed0e",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"feerate.h\"\n+#include <policy/feerate.h>\n \n-#include \"tinyformat.h\"\n+#include <tinyformat.h>\n \n const std::string CURRENCY_UNIT = \"BTC\";\n "
      },
      {
        "sha": "35b1b23786d15b9ba0731902124d79956eb85605",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_POLICY_FEERATE_H\n #define BITCOIN_POLICY_FEERATE_H\n \n-#include \"amount.h\"\n-#include \"serialize.h\"\n+#include <amount.h>\n+#include <serialize.h>\n \n #include <string>\n "
      },
      {
        "sha": "013116318b1b67c6084d01753aacd30ed3c911f5",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-\n-#include \"amount.h\"\n-#include \"clientversion.h\"\n-#include \"primitives/transaction.h\"\n-#include \"random.h\"\n-#include \"streams.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+\n+#include <amount.h>\n+#include <clientversion.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <txmempool.h>\n+#include <util.h>\n \n static constexpr double INF_FEERATE = 1e99;\n "
      },
      {
        "sha": "6528560f5265455907ecebf5129899d18ca0222a",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,11 +5,11 @@\n #ifndef BITCOIN_POLICYESTIMATOR_H\n #define BITCOIN_POLICYESTIMATOR_H\n \n-#include \"amount.h\"\n-#include \"feerate.h\"\n-#include \"uint256.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n+#include <amount.h>\n+#include <policy/feerate.h>\n+#include <uint256.h>\n+#include <random.h>\n+#include <sync.h>\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "b69bed5d6ff2b3a3c962642542016224731d8d89",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,14 +5,14 @@\n \n // NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n \n-#include \"policy/policy.h\"\n-\n-#include \"consensus/validation.h\"\n-#include \"validation.h\"\n-#include \"coins.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <policy/policy.h>\n+\n+#include <consensus/validation.h>\n+#include <validation.h>\n+#include <coins.h>\n+#include <tinyformat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)"
      },
      {
        "sha": "f3f8ebbbb4c40aa261a10407e6cc0193873d608e",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,10 +6,10 @@\n #ifndef BITCOIN_POLICY_POLICY_H\n #define BITCOIN_POLICY_POLICY_H\n \n-#include \"consensus/consensus.h\"\n-#include \"feerate.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/standard.h\"\n+#include <consensus/consensus.h>\n+#include <policy/feerate.h>\n+#include <script/interpreter.h>\n+#include <script/standard.h>\n \n #include <string>\n "
      },
      {
        "sha": "e9692d4b482b2cb1bb9c0f31aa32583a0a7975dd",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/rbf.h\"\n+#include <policy/rbf.h>\n \n bool SignalsOptInRBF(const CTransaction &tx)\n {"
      },
      {
        "sha": "1a5218e120d02ee5b684a6d1a63f70cafaf397fd",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_POLICY_RBF_H\n #define BITCOIN_POLICY_RBF_H\n \n-#include \"txmempool.h\"\n+#include <txmempool.h>\n \n static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n "
      },
      {
        "sha": "cecb54ca7b038c2b576c2f8625567932fc42570d",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"pow.h\"\n+#include <pow.h>\n \n-#include \"arith_uint256.h\"\n-#include \"chain.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n+#include <arith_uint256.h>\n+#include <chain.h>\n+#include <primitives/block.h>\n+#include <uint256.h>\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {"
      },
      {
        "sha": "db2f5343b51f3ee30c2730d75d84e108146f0247",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n-#include \"consensus/params.h\"\n+#include <consensus/params.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "9e2056551192648491442235322df69ea1bdc1ee",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/block.h\"\n+#include <primitives/block.h>\n \n-#include \"hash.h\"\n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n-#include \"crypto/common.h\"\n+#include <hash.h>\n+#include <tinyformat.h>\n+#include <utilstrencodings.h>\n+#include <crypto/common.h>\n \n uint256 CBlockHeader::GetHash() const\n {"
      },
      {
        "sha": "4957958c6ad35121048bae5a35f07462fbc7ce35",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_PRIMITIVES_BLOCK_H\n #define BITCOIN_PRIMITIVES_BLOCK_H\n \n-#include \"primitives/transaction.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <primitives/transaction.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work"
      },
      {
        "sha": "d8230d14233d03bed8904252e305c3bc48623f5e",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/transaction.h\"\n+#include <primitives/transaction.h>\n \n-#include \"hash.h\"\n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n+#include <hash.h>\n+#include <tinyformat.h>\n+#include <utilstrencodings.h>\n \n std::string COutPoint::ToString() const\n {"
      },
      {
        "sha": "32f45e5748e7971e600b1c9a07e8f11138cba5a0",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -7,10 +7,10 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include <stdint.h>\n-#include \"amount.h\"\n-#include \"script/script.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <amount.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n "
      },
      {
        "sha": "8c34c4196e6460986e5c796ef521d1b1ff7fa934",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"protocol.h\"\n+#include <protocol.h>\n \n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #ifndef WIN32\n # include <arpa/inet.h>"
      },
      {
        "sha": "bc314345158512526f35718fe78dc8420e23015b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -10,10 +10,10 @@\n #ifndef BITCOIN_PROTOCOL_H\n #define BITCOIN_PROTOCOL_H\n \n-#include \"netaddress.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"version.h\"\n+#include <netaddress.h>\n+#include <serialize.h>\n+#include <uint256.h>\n+#include <version.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "7f5ec1e8de1cdf17290c1ab502b4e0792727cfc7",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"pubkey.h\"\n+#include <pubkey.h>\n \n #include <secp256k1.h>\n #include <secp256k1_recovery.h>"
      },
      {
        "sha": "c9f3c18eb33997960b254bbe7aa5a21b709f0494",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_PUBKEY_H\n #define BITCOIN_PUBKEY_H\n \n-#include \"hash.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <hash.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n #include <stdexcept>\n #include <vector>"
      },
      {
        "sha": "dda8dce391bec90afa4d5121495cad8c59ddbf6b",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,18 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"addressbookpage.h\"\n-#include \"ui_addressbookpage.h\"\n+#include <qt/addressbookpage.h>\n+#include <qt/forms/ui_addressbookpage.h>\n \n-#include \"addresstablemodel.h\"\n-#include \"bitcoingui.h\"\n-#include \"csvmodelwriter.h\"\n-#include \"editaddressdialog.h\"\n-#include \"guiutil.h\"\n-#include \"platformstyle.h\"\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoingui.h>\n+#include <qt/csvmodelwriter.h>\n+#include <qt/editaddressdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/platformstyle.h>\n \n #include <QIcon>\n #include <QMenu>"
      },
      {
        "sha": "1d16940acb9f5cdf13b9fcafc430e49704e7146e",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"addresstablemodel.h\"\n+#include <qt/addresstablemodel.h>\n \n-#include \"guiutil.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/walletmodel.h>\n \n-#include \"base58.h\"\n-#include \"wallet/wallet.h\"\n+#include <base58.h>\n+#include <wallet/wallet.h>\n \n \n #include <QFont>"
      },
      {
        "sha": "a720ac956bd177325ed3b26ea8be84bd405821e6",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,16 +3,16 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"askpassphrasedialog.h\"\n-#include \"ui_askpassphrasedialog.h\"\n+#include <qt/askpassphrasedialog.h>\n+#include <qt/forms/ui_askpassphrasedialog.h>\n \n-#include \"guiconstants.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiconstants.h>\n+#include <qt/walletmodel.h>\n \n-#include \"support/allocators/secure.h\"\n+#include <support/allocators/secure.h>\n \n #include <QKeyEvent>\n #include <QMessageBox>"
      },
      {
        "sha": "84807da65d141bc30014005c530ffae389813801",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bantablemodel.h\"\n+#include <qt/bantablemodel.h>\n \n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n \n-#include \"sync.h\"\n-#include \"utiltime.h\"\n+#include <sync.h>\n+#include <utiltime.h>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "dc69dee20a5572a56e62882d47b5b2ff2150a622",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BANTABLEMODEL_H\n #define BITCOIN_QT_BANTABLEMODEL_H\n \n-#include \"net.h\"\n+#include <net.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "557d7efcec14edba55b6b3eab212a084f61b78a4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,38 +3,38 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"bitcoingui.h\"\n-\n-#include \"chainparams.h\"\n-#include \"clientmodel.h\"\n-#include \"fs.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"intro.h\"\n-#include \"networkstyle.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"splashscreen.h\"\n-#include \"utilitydialog.h\"\n-#include \"winshutdownmonitor.h\"\n+#include <qt/bitcoingui.h>\n+\n+#include <chainparams.h>\n+#include <qt/clientmodel.h>\n+#include <fs.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/intro.h>\n+#include <qt/networkstyle.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/splashscreen.h>\n+#include <qt/utilitydialog.h>\n+#include <qt/winshutdownmonitor.h>\n \n #ifdef ENABLE_WALLET\n-#include \"paymentserver.h\"\n-#include \"walletmodel.h\"\n+#include <qt/paymentserver.h>\n+#include <qt/walletmodel.h>\n #endif\n \n-#include \"init.h\"\n-#include \"rpc/server.h\"\n-#include \"scheduler.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"warnings.h\"\n+#include <init.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <warnings.h>\n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n+#include <wallet/wallet.h>\n #endif\n \n #include <stdint.h>\n@@ -261,7 +261,7 @@ public Q_SLOTS:\n     void startThread();\n };\n \n-#include \"bitcoin.moc\"\n+#include <qt/bitcoin.moc>\n \n BitcoinCore::BitcoinCore():\n     QObject()"
      },
      {
        "sha": "e8d174bf292157d02ff9b7bc73bdeea33c5dc30a",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinaddressvalidator.h\"\n+#include <qt/bitcoinaddressvalidator.h>\n \n-#include \"base58.h\"\n+#include <base58.h>\n \n /* Base58 characters are:\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\""
      },
      {
        "sha": "0b21349c54847f015a8dcf898e91da8c9b3ec21e",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinamountfield.h\"\n+#include <qt/bitcoinamountfield.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiconstants.h\"\n-#include \"qvaluecombobox.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiconstants.h>\n+#include <qt/qvaluecombobox.h>\n \n #include <QApplication>\n #include <QAbstractSpinBox>\n@@ -188,7 +188,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void valueChanged();\n };\n \n-#include \"bitcoinamountfield.moc\"\n+#include <qt/bitcoinamountfield.moc>\n \n BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     QWidget(parent),"
      },
      {
        "sha": "659ecb416ba7c8149b82d29f1842667ff3f90922",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BITCOINAMOUNTFIELD_H\n #define BITCOIN_QT_BITCOINAMOUNTFIELD_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QWidget>\n "
      },
      {
        "sha": "cd3234c56493195932ab8e1ba7c26c7eb30dcc14",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,38 +3,38 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"bitcoingui.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"modaloverlay.h\"\n-#include \"networkstyle.h\"\n-#include \"notificator.h\"\n-#include \"openuridialog.h\"\n-#include \"optionsdialog.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"rpcconsole.h\"\n-#include \"utilitydialog.h\"\n+#include <qt/bitcoingui.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/modaloverlay.h>\n+#include <qt/networkstyle.h>\n+#include <qt/notificator.h>\n+#include <qt/openuridialog.h>\n+#include <qt/optionsdialog.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/rpcconsole.h>\n+#include <qt/utilitydialog.h>\n \n #ifdef ENABLE_WALLET\n-#include \"walletframe.h\"\n-#include \"walletmodel.h\"\n+#include <qt/walletframe.h>\n+#include <qt/walletmodel.h>\n #endif // ENABLE_WALLET\n \n #ifdef Q_OS_MAC\n-#include \"macdockiconhandler.h\"\n+#include <qt/macdockiconhandler.h>\n #endif\n \n-#include \"chainparams.h\"\n-#include \"init.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n+#include <chainparams.h>\n+#include <init.h>\n+#include <ui_interface.h>\n+#include <util.h>\n \n #include <iostream>\n "
      },
      {
        "sha": "1647975fec215122d68409b80f67af638ea2d919",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,10 +6,10 @@\n #define BITCOIN_QT_BITCOINGUI_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QLabel>\n #include <QMainWindow>"
      },
      {
        "sha": "c8614fdfe06613e5998b2b3c0f0d37c03b617dd9",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinunits.h\"\n+#include <qt/bitcoinunits.h>\n \n-#include \"primitives/transaction.h\"\n+#include <primitives/transaction.h>\n \n #include <QStringList>\n "
      },
      {
        "sha": "3f5a7fd32d1d01e37e668a51eb402c9f7905b470",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_BITCOINUNITS_H\n #define BITCOIN_QT_BITCOINUNITS_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QAbstractListModel>\n #include <QString>"
      },
      {
        "sha": "78174b90a14b89791df9a9c13a3a8ea0d1e268f3",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"clientmodel.h\"\n-\n-#include \"bantablemodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"peertablemodel.h\"\n-\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"checkpoints.h\"\n-#include \"clientversion.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n-#include \"txmempool.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"warnings.h\"\n+#include <qt/clientmodel.h>\n+\n+#include <qt/bantablemodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/peertablemodel.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <checkpoints.h>\n+#include <clientversion.h>\n+#include <validation.h>\n+#include <net.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <warnings.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "03e633e375fb0971117a46ef77063e4524de416f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coincontroldialog.h\"\n-#include \"ui_coincontroldialog.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"txmempool.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"wallet/coincontrol.h\"\n-#include \"init.h\"\n-#include \"policy/fees.h\"\n-#include \"policy/policy.h\"\n-#include \"validation.h\" // For mempool\n-#include \"wallet/fees.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/coincontroldialog.h>\n+#include <qt/forms/ui_coincontroldialog.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <txmempool.h>\n+#include <qt/walletmodel.h>\n+\n+#include <wallet/coincontrol.h>\n+#include <init.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <validation.h> // For mempool\n+#include <wallet/fees.h>\n+#include <wallet/wallet.h>\n \n #include <QApplication>\n #include <QCheckBox>"
      },
      {
        "sha": "51b0a42907ac8ec5b4d887ca16d280b5fc5f5c81",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_COINCONTROLDIALOG_H\n #define BITCOIN_QT_COINCONTROLDIALOG_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QAbstractButton>\n #include <QAction>"
      },
      {
        "sha": "b628824793de1de83bc28286f5d77b5774c0dc14",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coincontroltreewidget.h\"\n-#include \"coincontroldialog.h\"\n+#include <qt/coincontroltreewidget.h>\n+#include <qt/coincontroldialog.h>\n \n CoinControlTreeWidget::CoinControlTreeWidget(QWidget *parent) :\n     QTreeWidget(parent)"
      },
      {
        "sha": "702757147b8817504c781f457908d7083bc3518f",
        "filename": "src/qt/csvmodelwriter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/csvmodelwriter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/csvmodelwriter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"csvmodelwriter.h\"\n+#include <qt/csvmodelwriter.h>\n \n #include <QAbstractItemModel>\n #include <QFile>"
      },
      {
        "sha": "0437f81a7e36a29ca4ab8f70a6d34209aade8be6",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"editaddressdialog.h\"\n-#include \"ui_editaddressdialog.h\"\n+#include <qt/editaddressdialog.h>\n+#include <qt/forms/ui_editaddressdialog.h>\n \n-#include \"addresstablemodel.h\"\n-#include \"guiutil.h\"\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n \n #include <QDataWidgetMapper>\n #include <QMessageBox>"
      },
      {
        "sha": "d1237ad283e8b12646c2864c6e53d0e4a0cda516",
        "filename": "src/qt/forms/coincontroldialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/coincontroldialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/coincontroldialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/coincontroldialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -487,7 +487,7 @@\n   <customwidget>\n    <class>CoinControlTreeWidget</class>\n    <extends>QTreeWidget</extends>\n-   <header>coincontroltreewidget.h</header>\n+   <header>qt/coincontroltreewidget.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "bba822882e3f0cd11a4d8e6aa54e0639ec1fb8a8",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1424,7 +1424,7 @@\n   <customwidget>\n    <class>TrafficGraphWidget</class>\n    <extends>QWidget</extends>\n-   <header>trafficgraphwidget.h</header>\n+   <header>qt/trafficgraphwidget.h</header>\n    <container>1</container>\n    <slots>\n     <slot>clear()</slot>"
      },
      {
        "sha": "e968271107fe934c46cc1c1cf1ee632b6e667d98",
        "filename": "src/qt/forms/editaddressdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/editaddressdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/editaddressdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/editaddressdialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -71,7 +71,7 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "fdc52dc455d88b79ce6424645574c7817ca634e9",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -367,7 +367,7 @@ QLabel { color: rgb(40,40,40);  }</string>\n   <customwidget>\n    <class>ModalOverlay</class>\n    <extends>QWidget</extends>\n-   <header>modaloverlay.h</header>\n+   <header>qt/modaloverlay.h</header>\n    <container>1</container>\n   </customwidget>\n  </customwidgets>"
      },
      {
        "sha": "0e1048bc070cba6a964dcc8a81772827038ca904",
        "filename": "src/qt/forms/openuridialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/openuridialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/openuridialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/openuridialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -77,7 +77,7 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "a3721991ee2fdea1866360da37d0c55378efa997",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -824,12 +824,12 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n   <customwidget>\n    <class>QValueComboBox</class>\n    <extends>QComboBox</extends>\n-   <header>qvaluecombobox.h</header>\n+   <header>qt/qvaluecombobox.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "58f030ebf08bc2b71394ea84e8c2f538f90a6e5f",
        "filename": "src/qt/forms/receivecoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/receivecoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/receivecoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receivecoinsdialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -299,7 +299,7 @@\n   <customwidget>\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n-   <header>bitcoinamountfield.h</header>\n+   <header>qt/bitcoinamountfield.h</header>\n    <container>1</container>\n   </customwidget>\n  </customwidgets>"
      },
      {
        "sha": "dbe966b24193782e006f09b622747425e42b51f7",
        "filename": "src/qt/forms/receiverequestdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/receiverequestdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/receiverequestdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receiverequestdialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -127,7 +127,7 @@\n   <customwidget>\n    <class>QRImageWidget</class>\n    <extends>QLabel</extends>\n-   <header>receiverequestdialog.h</header>\n+   <header>qt/receiverequestdialog.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources/>"
      },
      {
        "sha": "9c89741afe25de75f855437e4fa2eb67053a0a75",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1264,12 +1264,12 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n   <customwidget>\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n-   <header>bitcoinamountfield.h</header>\n+   <header>qt/bitcoinamountfield.h</header>\n    <container>1</container>\n   </customwidget>\n  </customwidgets>"
      },
      {
        "sha": "3c699abc6a04e0ef7d54b36a37233fc209ad7fa5",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1255,12 +1255,12 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n   <customwidget>\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n-   <header>bitcoinamountfield.h</header>\n+   <header>qt/bitcoinamountfield.h</header>\n   </customwidget>\n  </customwidgets>\n  <tabstops>"
      },
      {
        "sha": "c9ddd757c1ddf29bb88fe96a7a58df8e887d2d7c",
        "filename": "src/qt/forms/signverifymessagedialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/signverifymessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/forms/signverifymessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/signverifymessagedialog.ui?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -380,7 +380,7 @@\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n-   <header>qvalidatedlineedit.h</header>\n+   <header>qt/qvalidatedlineedit.h</header>\n   </customwidget>\n  </customwidgets>\n  <resources>"
      },
      {
        "sha": "80ee35a3415ab8f90fb2e2c7361fc3d305fc9887",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,21 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"guiutil.h\"\n-\n-#include \"bitcoinaddressvalidator.h\"\n-#include \"bitcoinunits.h\"\n-#include \"qvalidatedlineedit.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"fs.h\"\n-#include \"primitives/transaction.h\"\n-#include \"init.h\"\n-#include \"policy/policy.h\"\n-#include \"protocol.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"util.h\"\n+#include <qt/guiutil.h>\n+\n+#include <qt/bitcoinaddressvalidator.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/qvalidatedlineedit.h>\n+#include <qt/walletmodel.h>\n+\n+#include <fs.h>\n+#include <primitives/transaction.h>\n+#include <init.h>\n+#include <policy/policy.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <util.h>\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT\n@@ -31,9 +31,9 @@\n #ifndef NOMINMAX\n #define NOMINMAX\n #endif\n-#include \"shellapi.h\"\n-#include \"shlobj.h\"\n-#include \"shlwapi.h\"\n+#include <shellapi.h>\n+#include <shlobj.h>\n+#include <shlwapi.h>\n #endif\n \n #include <boost/scoped_array.hpp>"
      },
      {
        "sha": "d0ab491952f0dbc3cca431816c91c1ebecb89210",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_QT_GUIUTIL_H\n #define BITCOIN_QT_GUIUTIL_H\n \n-#include \"amount.h\"\n-#include \"fs.h\"\n+#include <amount.h>\n+#include <fs.h>\n \n #include <QEvent>\n #include <QHeaderView>"
      },
      {
        "sha": "9e4c765101bc0011ddf1c17fa61c0123294ed207",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,16 +3,16 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"fs.h\"\n-#include \"intro.h\"\n-#include \"ui_intro.h\"\n+#include <fs.h>\n+#include <qt/intro.h>\n+#include <qt/forms/ui_intro.h>\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n-#include \"util.h\"\n+#include <util.h>\n \n #include <QFileDialog>\n #include <QSettings>\n@@ -60,7 +60,7 @@ public Q_SLOTS:\n     Intro *intro;\n };\n \n-#include \"intro.moc\"\n+#include <qt/intro.moc>\n \n FreespaceChecker::FreespaceChecker(Intro *_intro)\n {"
      },
      {
        "sha": "b707b0dda9f982504e7d18b1c03dcb0d2ece6845",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"modaloverlay.h\"\n-#include \"ui_modaloverlay.h\"\n+#include <qt/modaloverlay.h>\n+#include <qt/forms/ui_modaloverlay.h>\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n-#include \"chainparams.h\"\n+#include <chainparams.h>\n \n #include <QResizeEvent>\n #include <QPropertyAnimation>"
      },
      {
        "sha": "42ae3ae566e6f4b4dcf38d232c5d92e60bf5da6f",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"networkstyle.h\"\n+#include <qt/networkstyle.h>\n \n-#include \"guiconstants.h\"\n+#include <qt/guiconstants.h>\n \n #include <QApplication>\n "
      },
      {
        "sha": "4f8732a9ce080ce64912fa130768ab15aca3845b",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"notificator.h\"\n+#include <qt/notificator.h>\n \n #include <QApplication>\n #include <QByteArray>\n@@ -24,7 +24,7 @@\n // #define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0\n #ifdef Q_OS_MAC\n #include <ApplicationServices/ApplicationServices.h>\n-#include \"macnotificationhandler.h\"\n+#include <qt/macnotificationhandler.h>\n #endif\n \n "
      },
      {
        "sha": "ef6f5c7ec50abc15196bad317f2c42dfad4319de",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_QT_NOTIFICATOR_H\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #include <QIcon>"
      },
      {
        "sha": "40671922f4c97a68e2ae81aaf312b5df0582c615",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"openuridialog.h\"\n-#include \"ui_openuridialog.h\"\n+#include <qt/openuridialog.h>\n+#include <qt/forms/ui_openuridialog.h>\n \n-#include \"guiutil.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/walletmodel.h>\n \n #include <QUrl>\n "
      },
      {
        "sha": "d7aa8bc38bf75cb185bfe5f755d13df706cd243b",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,19 +3,19 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"optionsdialog.h\"\n-#include \"ui_optionsdialog.h\"\n+#include <qt/optionsdialog.h>\n+#include <qt/forms/ui_optionsdialog.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n \n-#include \"validation.h\" // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n-#include \"netbase.h\"\n-#include \"txdb.h\" // for -dbcache defaults\n+#include <validation.h> // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n+#include <netbase.h>\n+#include <txdb.h> // for -dbcache defaults\n \n #include <QDataWidgetMapper>\n #include <QDir>"
      },
      {
        "sha": "a0645d9a742662f6b38f46e83deae4d77f778ba2",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,25 +3,25 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"optionsmodel.h\"\n+#include <qt/optionsmodel.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n \n-#include \"amount.h\"\n-#include \"init.h\"\n-#include \"validation.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n-#include \"net.h\"\n-#include \"netbase.h\"\n-#include \"txdb.h\" // for -dbcache defaults\n-#include \"intro.h\" \n+#include <amount.h>\n+#include <init.h>\n+#include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <net.h>\n+#include <netbase.h>\n+#include <txdb.h> // for -dbcache defaults\n+#include <qt/intro.h>\n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n #endif\n \n #include <QNetworkProxy>"
      },
      {
        "sha": "b6e8fdef688df52f16af832c47e2d3e17b10e61b",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_OPTIONSMODEL_H\n #define BITCOIN_QT_OPTIONSMODEL_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QAbstractListModel>\n "
      },
      {
        "sha": "7818607d30a68b021152bce635b12a507b3968fb",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"overviewpage.h\"\n-#include \"ui_overviewpage.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"transactionfilterproxy.h\"\n-#include \"transactiontablemodel.h\"\n-#include \"walletmodel.h\"\n+#include <qt/overviewpage.h>\n+#include <qt/forms/ui_overviewpage.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/transactionfilterproxy.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QAbstractItemDelegate>\n #include <QPainter>\n@@ -106,7 +106,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n     const PlatformStyle *platformStyle;\n \n };\n-#include \"overviewpage.moc\"\n+#include <qt/overviewpage.moc>\n \n OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),"
      },
      {
        "sha": "1e09d907b04efbfdbc87bf993a8e3e414ca07160",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_OVERVIEWPAGE_H\n #define BITCOIN_QT_OVERVIEWPAGE_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QWidget>\n #include <memory>"
      },
      {
        "sha": "4503728882ce2c892fdb37e768703ea54ffafa18",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -7,9 +7,9 @@\n // with some extra methods\n //\n \n-#include \"paymentrequestplus.h\"\n+#include <qt/paymentrequestplus.h>\n \n-#include \"util.h\"\n+#include <util.h>\n \n #include <stdexcept>\n "
      },
      {
        "sha": "e1388f2b5d8f9eaa4b10e339d5699464aa85acef",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -7,10 +7,10 @@\n \n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n-#include \"paymentrequest.pb.h\"\n+#include <qt/paymentrequest.pb.h>\n #pragma GCC diagnostic pop\n \n-#include \"base58.h\"\n+#include <base58.h>\n \n #include <openssl/x509.h>\n "
      },
      {
        "sha": "510a3783ae5a200102d6781f9cfb5a1c8c899154",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentserver.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-\n-#include \"base58.h\"\n-#include \"chainparams.h\"\n-#include \"policy/policy.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/paymentserver.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+\n+#include <base58.h>\n+#include <chainparams.h>\n+#include <policy/policy.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <wallet/wallet.h>\n \n #include <cstdlib>\n "
      },
      {
        "sha": "9adef9743d3bb4c25232297d3e3b6dcca2c502c3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -32,8 +32,8 @@\n // sends them to the server.\n //\n \n-#include \"paymentrequestplus.h\"\n-#include \"walletmodel.h\"\n+#include <qt/paymentrequestplus.h>\n+#include <qt/walletmodel.h>\n \n #include <QObject>\n #include <QString>"
      },
      {
        "sha": "cfafab2c8ab6ad3af33124fe58c85fdaea5c87f5",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"peertablemodel.h\"\n+#include <qt/peertablemodel.h>\n \n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n \n-#include \"validation.h\" // for cs_main\n-#include \"sync.h\"\n+#include <validation.h> // for cs_main\n+#include <sync.h>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "e41fe4bb03b95c73bbdcab7b6ae6a2e4fb61fe5c",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_QT_PEERTABLEMODEL_H\n #define BITCOIN_QT_PEERTABLEMODEL_H\n \n-#include \"net_processing.h\" // For CNodeStateStats\n-#include \"net.h\"\n+#include <net_processing.h> // For CNodeStateStats\n+#include <net.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "cc8ea3622b9fa67f653a66a60442305782603138",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"platformstyle.h\"\n+#include <qt/platformstyle.h>\n \n-#include \"guiconstants.h\"\n+#include <qt/guiconstants.h>\n \n #include <QApplication>\n #include <QColor>"
      },
      {
        "sha": "4d6d5891c98d4082de46b752a7288f8d827acbcc",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"qvalidatedlineedit.h\"\n+#include <qt/qvalidatedlineedit.h>\n \n-#include \"bitcoinaddressvalidator.h\"\n-#include \"guiconstants.h\"\n+#include <qt/bitcoinaddressvalidator.h>\n+#include <qt/guiconstants.h>\n \n QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :\n     QLineEdit(parent),"
      },
      {
        "sha": "af5f6f8fd087439eaf9bae687fd0d9ea9788f39a",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"qvaluecombobox.h\"\n+#include <qt/qvaluecombobox.h>\n \n QValueComboBox::QValueComboBox(QWidget *parent) :\n         QComboBox(parent), role(Qt::UserRole)"
      },
      {
        "sha": "d6e2beb3121befc4cfae6a327cbcde8e11bd86af",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"receivecoinsdialog.h\"\n-#include \"ui_receivecoinsdialog.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"receiverequestdialog.h\"\n-#include \"recentrequeststablemodel.h\"\n-#include \"walletmodel.h\"\n+#include <qt/receivecoinsdialog.h>\n+#include <qt/forms/ui_receivecoinsdialog.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/receiverequestdialog.h>\n+#include <qt/recentrequeststablemodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QAction>\n #include <QCursor>"
      },
      {
        "sha": "3687cca87be5348e68fe3b888c14c5916015ec1f",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_RECEIVECOINSDIALOG_H\n #define BITCOIN_QT_RECEIVECOINSDIALOG_H\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n #include <QDialog>\n #include <QHeaderView>"
      },
      {
        "sha": "c69fea1c93a672c6140c9a886decab4472df087f",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"receiverequestdialog.h\"\n-#include \"ui_receiverequestdialog.h\"\n+#include <qt/receiverequestdialog.h>\n+#include <qt/forms/ui_receiverequestdialog.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"walletmodel.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QClipboard>\n #include <QDrag>\n@@ -22,7 +22,7 @@\n #endif\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\" /* for USE_QRCODE */\n+#include <config/bitcoin-config.h> /* for USE_QRCODE */\n #endif\n \n #ifdef USE_QRCODE"
      },
      {
        "sha": "23b81135e2669597e9f1877fbdf5c84e26de69ca",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_RECEIVEREQUESTDIALOG_H\n #define BITCOIN_QT_RECEIVEREQUESTDIALOG_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QDialog>\n #include <QImage>"
      },
      {
        "sha": "4d6e401d0d26bbc7bf1f813d140faada86e51177",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"recentrequeststablemodel.h\"\n+#include <qt/recentrequeststablemodel.h>\n \n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n \n-#include \"clientversion.h\"\n-#include \"streams.h\"\n+#include <clientversion.h>\n+#include <streams.h>\n \n \n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :"
      },
      {
        "sha": "c88b8c442654bf355938305fd1d7b10b8b33af33",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H\n #define BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "6687d62baa59793d9a0f29604d6023e05fab1145",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,21 +3,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"rpcconsole.h\"\n-#include \"ui_debugwindow.h\"\n+#include <qt/rpcconsole.h>\n+#include <qt/forms/ui_debugwindow.h>\n \n-#include \"bantablemodel.h\"\n-#include \"clientmodel.h\"\n-#include \"guiutil.h\"\n-#include \"platformstyle.h\"\n-#include \"chainparams.h\"\n-#include \"netbase.h\"\n-#include \"rpc/server.h\"\n-#include \"rpc/client.h\"\n-#include \"util.h\"\n+#include <qt/bantablemodel.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/platformstyle.h>\n+#include <chainparams.h>\n+#include <netbase.h>\n+#include <rpc/server.h>\n+#include <rpc/client.h>\n+#include <util.h>\n \n #include <openssl/crypto.h>\n \n@@ -125,7 +125,7 @@ class QtRPCTimerInterface: public RPCTimerInterface\n };\n \n \n-#include \"rpcconsole.moc\"\n+#include <qt/rpcconsole.moc>\n \n /**\n  * Split shell command line into a list of arguments and optionally execute the command(s)."
      },
      {
        "sha": "5960410cdd0d56d7d8ef9af7a3105028a7fcfc0a",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,10 +5,10 @@\n #ifndef BITCOIN_QT_RPCCONSOLE_H\n #define BITCOIN_QT_RPCCONSOLE_H\n \n-#include \"guiutil.h\"\n-#include \"peertablemodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/peertablemodel.h>\n \n-#include \"net.h\"\n+#include <net.h>\n \n #include <QWidget>\n #include <QCompleter>"
      },
      {
        "sha": "036b6ebcc0f8aa9038675756031303fb7ee55b78",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,27 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sendcoinsdialog.h\"\n-#include \"ui_sendcoinsdialog.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"clientmodel.h\"\n-#include \"coincontroldialog.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"sendcoinsentry.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"base58.h\"\n-#include \"chainparams.h\"\n-#include \"wallet/coincontrol.h\"\n-#include \"validation.h\" // mempool and minRelayTxFee\n-#include \"ui_interface.h\"\n-#include \"txmempool.h\"\n-#include \"policy/fees.h\"\n-#include \"wallet/fees.h\"\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/forms/ui_sendcoinsdialog.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/coincontroldialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/sendcoinsentry.h>\n+#include <qt/walletmodel.h>\n+\n+#include <base58.h>\n+#include <chainparams.h>\n+#include <wallet/coincontrol.h>\n+#include <validation.h> // mempool and minRelayTxFee\n+#include <ui_interface.h>\n+#include <txmempool.h>\n+#include <policy/fees.h>\n+#include <wallet/fees.h>\n \n #include <QFontMetrics>\n #include <QMessageBox>"
      },
      {
        "sha": "300116fd9f7901253edca6977151e0070c6da25f",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_SENDCOINSDIALOG_H\n #define BITCOIN_QT_SENDCOINSDIALOG_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QDialog>\n #include <QMessageBox>"
      },
      {
        "sha": "20e39bdeba685b4daa5cb8a191bfa0060d8c1356",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,15 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sendcoinsentry.h\"\n-#include \"ui_sendcoinsentry.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"addresstablemodel.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"walletmodel.h\"\n+#include <qt/sendcoinsentry.h>\n+#include <qt/forms/ui_sendcoinsentry.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/walletmodel.h>\n \n #include <QApplication>\n #include <QClipboard>"
      },
      {
        "sha": "b470a0d72eb49dfda913bf5706f813921a2490cc",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_SENDCOINSENTRY_H\n #define BITCOIN_QT_SENDCOINSENTRY_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QStackedWidget>\n "
      },
      {
        "sha": "4cd0c76b166c3bc255b68408bd19e126f0e7839b",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"signverifymessagedialog.h\"\n-#include \"ui_signverifymessagedialog.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"guiutil.h\"\n-#include \"platformstyle.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"base58.h\"\n-#include \"init.h\"\n-#include \"validation.h\" // For strMessageMagic\n-#include \"wallet/wallet.h\"\n+#include <qt/signverifymessagedialog.h>\n+#include <qt/forms/ui_signverifymessagedialog.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/guiutil.h>\n+#include <qt/platformstyle.h>\n+#include <qt/walletmodel.h>\n+\n+#include <base58.h>\n+#include <init.h>\n+#include <validation.h> // For strMessageMagic\n+#include <wallet/wallet.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "5aa1de5553f0fb44afd00c6dc5afd3dae9eacd0e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,21 +3,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"splashscreen.h\"\n+#include <qt/splashscreen.h>\n \n-#include \"networkstyle.h\"\n+#include <qt/networkstyle.h>\n \n-#include \"clientversion.h\"\n-#include \"init.h\"\n-#include \"util.h\"\n-#include \"ui_interface.h\"\n-#include \"version.h\"\n+#include <clientversion.h>\n+#include <init.h>\n+#include <util.h>\n+#include <ui_interface.h>\n+#include <version.h>\n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n+#include <wallet/wallet.h>\n #endif\n \n #include <QApplication>"
      },
      {
        "sha": "7a4388e940e2f444b8b106b3f012acbed4b06d29",
        "filename": "src/qt/test/compattests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentrequestplus.h\" // this includes protobuf's port.h which defines its own bswap macos\n+#include <qt/paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n \n-#include \"compattests.h\"\n+#include <qt/test/compattests.h>\n \n-#include \"compat/byteswap.h\"\n+#include <compat/byteswap.h>\n \n void CompatTests::bswapTests()\n {"
      },
      {
        "sha": "1864604372a4e17655ebee46ef8a3ab288efe88d",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentservertests.h\"\n+#include <qt/test/paymentservertests.h>\n \n-#include \"optionsmodel.h\"\n-#include \"paymentrequestdata.h\"\n+#include <qt/optionsmodel.h>\n+#include <qt/test/paymentrequestdata.h>\n \n-#include \"amount.h\"\n-#include \"random.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <amount.h>\n+#include <random.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>"
      },
      {
        "sha": "6d84c382874aa5c37c9fca2a69870e6bfc283f11",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n #define BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n \n-#include \"../paymentserver.h\"\n+#include <qt/paymentserver.h>\n \n #include <QObject>\n #include <QTest>"
      },
      {
        "sha": "0596ccf90eb4f9bfa2f6ebc1782c6c89b8132d3b",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpcnestedtests.h\"\n-\n-#include \"chainparams.h\"\n-#include \"consensus/validation.h\"\n-#include \"fs.h\"\n-#include \"validation.h\"\n-#include \"rpc/register.h\"\n-#include \"rpc/server.h\"\n-#include \"rpcconsole.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"univalue.h\"\n-#include \"util.h\"\n+#include <qt/test/rpcnestedtests.h>\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <validation.h>\n+#include <rpc/register.h>\n+#include <rpc/server.h>\n+#include <qt/rpcconsole.h>\n+#include <test/test_bitcoin.h>\n+#include <univalue.h>\n+#include <util.h>\n \n #include <QDir>\n #include <QtGlobal>"
      },
      {
        "sha": "04a9d124aa298cecd90e20bcf7a6850661915e82",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -8,8 +8,8 @@\n #include <QObject>\n #include <QTest>\n \n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n+#include <txdb.h>\n+#include <txmempool.h>\n \n class RPCNestedTests : public QObject\n {"
      },
      {
        "sha": "2e11b4f4d68930eda0d2cf951dfd378924de479c",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,18 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"chainparams.h\"\n-#include \"rpcnestedtests.h\"\n-#include \"util.h\"\n-#include \"uritests.h\"\n-#include \"compattests.h\"\n+#include <chainparams.h>\n+#include <qt/test/rpcnestedtests.h>\n+#include <util.h>\n+#include <qt/test/uritests.h>\n+#include <qt/test/compattests.h>\n \n #ifdef ENABLE_WALLET\n-#include \"paymentservertests.h\"\n-#include \"wallettests.h\"\n+#include <qt/test/paymentservertests.h>\n+#include <qt/test/wallettests.h>\n #endif\n \n #include <QApplication>"
      },
      {
        "sha": "e47aa8b54691f9f608f6a8508c3ec99f5fff18ce",
        "filename": "src/qt/test/uritests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/uritests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/uritests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"uritests.h\"\n+#include <qt/test/uritests.h>\n \n-#include \"guiutil.h\"\n-#include \"walletmodel.h\"\n+#include <qt/guiutil.h>\n+#include <qt/walletmodel.h>\n \n #include <QUrl>\n "
      },
      {
        "sha": "4b7c3bd726a6de1301c4e8a929d4da659552521e",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1,22 +1,22 @@\n-#include \"wallettests.h\"\n+#include <qt/test/wallettests.h>\n \n-#include \"qt/bitcoinamountfield.h\"\n-#include \"qt/callback.h\"\n-#include \"qt/optionsmodel.h\"\n-#include \"qt/platformstyle.h\"\n-#include \"qt/qvalidatedlineedit.h\"\n-#include \"qt/sendcoinsdialog.h\"\n-#include \"qt/sendcoinsentry.h\"\n-#include \"qt/transactiontablemodel.h\"\n-#include \"qt/transactionview.h\"\n-#include \"qt/walletmodel.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"validation.h\"\n-#include \"wallet/wallet.h\"\n-#include \"qt/overviewpage.h\"\n-#include \"qt/receivecoinsdialog.h\"\n-#include \"qt/recentrequeststablemodel.h\"\n-#include \"qt/receiverequestdialog.h\"\n+#include <qt/bitcoinamountfield.h>\n+#include <qt/callback.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/qvalidatedlineedit.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/sendcoinsentry.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/transactionview.h>\n+#include <qt/walletmodel.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <wallet/wallet.h>\n+#include <qt/overviewpage.h>\n+#include <qt/receivecoinsdialog.h>\n+#include <qt/recentrequeststablemodel.h>\n+#include <qt/receiverequestdialog.h>\n \n #include <QAbstractButton>\n #include <QAction>"
      },
      {
        "sha": "b5e4ccb4067de1906031eb90ef1de3327dcf5b8a",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"trafficgraphwidget.h\"\n-#include \"clientmodel.h\"\n+#include <qt/trafficgraphwidget.h>\n+#include <qt/clientmodel.h>\n \n #include <QPainter>\n #include <QColor>"
      },
      {
        "sha": "3f245e6c33d68a1c9012c03e474a39dd894644a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,21 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactiondesc.h\"\n-\n-#include \"bitcoinunits.h\"\n-#include \"guiutil.h\"\n-#include \"paymentserver.h\"\n-#include \"transactionrecord.h\"\n-\n-#include \"base58.h\"\n-#include \"consensus/consensus.h\"\n-#include \"validation.h\"\n-#include \"script/script.h\"\n-#include \"timedata.h\"\n-#include \"util.h\"\n-#include \"wallet/db.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/transactiondesc.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/guiutil.h>\n+#include <qt/paymentserver.h>\n+#include <qt/transactionrecord.h>\n+\n+#include <base58.h>\n+#include <consensus/consensus.h>\n+#include <validation.h>\n+#include <script/script.h>\n+#include <timedata.h>\n+#include <util.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "74d7a8f525c827a552f93b4c0bd968f0112cfde0",
        "filename": "src/qt/transactiondescdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiondescdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiondescdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactiondescdialog.h\"\n-#include \"ui_transactiondescdialog.h\"\n+#include <qt/transactiondescdialog.h>\n+#include <qt/forms/ui_transactiondescdialog.h>\n \n-#include \"transactiontablemodel.h\"\n+#include <qt/transactiontablemodel.h>\n \n #include <QModelIndex>\n "
      },
      {
        "sha": "15859bf36d9bdbbc4f0eb25e0e34b5babc2b552c",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactionfilterproxy.h\"\n+#include <qt/transactionfilterproxy.h>\n \n-#include \"transactiontablemodel.h\"\n-#include \"transactionrecord.h\"\n+#include <qt/transactiontablemodel.h>\n+#include <qt/transactionrecord.h>\n \n #include <cstdlib>\n "
      },
      {
        "sha": "4bdd9ea6c75352996a4b0c48b75d42846b596432",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONFILTERPROXY_H\n #define BITCOIN_QT_TRANSACTIONFILTERPROXY_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QDateTime>\n #include <QSortFilterProxyModel>"
      },
      {
        "sha": "e3e8377cb90a06cc0ec3dde66eaf8dcf63d61e47",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactionrecord.h\"\n+#include <qt/transactionrecord.h>\n \n-#include \"base58.h\"\n-#include \"consensus/consensus.h\"\n-#include \"validation.h\"\n-#include \"timedata.h\"\n-#include \"wallet/wallet.h\"\n+#include <base58.h>\n+#include <consensus/consensus.h>\n+#include <validation.h>\n+#include <timedata.h>\n+#include <wallet/wallet.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "ee85acf4ac7377766500df4a9efa75fceb1b9edb",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_QT_TRANSACTIONRECORD_H\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n-#include \"amount.h\"\n-#include \"uint256.h\"\n+#include <amount.h>\n+#include <uint256.h>\n \n #include <QList>\n #include <QString>"
      },
      {
        "sha": "cc0dc5ef488f4817c4d6ff7e4124ba2291f8e7ad",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactiontablemodel.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"transactiondesc.h\"\n-#include \"transactionrecord.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"core_io.h\"\n-#include \"validation.h\"\n-#include \"sync.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"wallet/wallet.h\"\n+#include <qt/transactiontablemodel.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/transactiondesc.h>\n+#include <qt/transactionrecord.h>\n+#include <qt/walletmodel.h>\n+\n+#include <core_io.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <wallet/wallet.h>\n \n #include <QColor>\n #include <QDateTime>"
      },
      {
        "sha": "a7697071638dae7bef8d627a58ed2433f3cb6231",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONTABLEMODEL_H\n #define BITCOIN_QT_TRANSACTIONTABLEMODEL_H\n \n-#include \"bitcoinunits.h\"\n+#include <qt/bitcoinunits.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>"
      },
      {
        "sha": "92e8e916001c2160ad0f9d0d8f5eef218e330172",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"transactionview.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n-#include \"csvmodelwriter.h\"\n-#include \"editaddressdialog.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"platformstyle.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"transactiondescdialog.h\"\n-#include \"transactionfilterproxy.h\"\n-#include \"transactionrecord.h\"\n-#include \"transactiontablemodel.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"ui_interface.h\"\n+#include <qt/transactionview.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/csvmodelwriter.h>\n+#include <qt/editaddressdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/transactiondescdialog.h>\n+#include <qt/transactionfilterproxy.h>\n+#include <qt/transactionrecord.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/walletmodel.h>\n+\n+#include <ui_interface.h>\n \n #include <QComboBox>\n #include <QDateTimeEdit>"
      },
      {
        "sha": "5b28b347233493da53dd2c3afa0c77f8120535e8",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_TRANSACTIONVIEW_H\n #define BITCOIN_QT_TRANSACTIONVIEW_H\n \n-#include \"guiutil.h\"\n+#include <qt/guiutil.h>\n \n #include <QWidget>\n #include <QKeyEvent>"
      },
      {
        "sha": "6d5a2f310157d8640f352e68d53171074b466b87",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,23 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n-#include \"utilitydialog.h\"\n+#include <qt/utilitydialog.h>\n \n-#include \"ui_helpmessagedialog.h\"\n+#include <qt/forms/ui_helpmessagedialog.h>\n \n-#include \"bitcoingui.h\"\n-#include \"clientmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"intro.h\"\n-#include \"paymentrequestplus.h\"\n-#include \"guiutil.h\"\n+#include <qt/bitcoingui.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/intro.h>\n+#include <qt/paymentrequestplus.h>\n+#include <qt/guiutil.h>\n \n-#include \"clientversion.h\"\n-#include \"init.h\"\n-#include \"util.h\"\n+#include <clientversion.h>\n+#include <init.h>\n+#include <util.h>\n \n #include <stdio.h>\n "
      },
      {
        "sha": "573b3f14128b98f9e5971243911f2c2910d6cd65",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletframe.h\"\n+#include <qt/walletframe.h>\n \n-#include \"bitcoingui.h\"\n-#include \"walletview.h\"\n+#include <qt/bitcoingui.h>\n+#include <qt/walletview.h>\n \n #include <cassert>\n #include <cstdio>"
      },
      {
        "sha": "a38e2336083e9d06960418b982a5623dc5d58409",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,32 +2,32 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletmodel.h\"\n-\n-#include \"addresstablemodel.h\"\n-#include \"consensus/validation.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"paymentserver.h\"\n-#include \"recentrequeststablemodel.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"transactiontablemodel.h\"\n-\n-#include \"base58.h\"\n-#include \"chain.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"net.h\" // for g_connman\n-#include \"policy/fees.h\"\n-#include \"policy/rbf.h\"\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\" // for GetBoolArg\n-#include \"wallet/coincontrol.h\"\n-#include \"wallet/feebumper.h\"\n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\" // for BackupWallet\n+#include <qt/walletmodel.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <consensus/validation.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/paymentserver.h>\n+#include <qt/recentrequeststablemodel.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/transactiontablemodel.h>\n+\n+#include <base58.h>\n+#include <chain.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <net.h> // for g_connman\n+#include <policy/fees.h>\n+#include <policy/rbf.h>\n+#include <sync.h>\n+#include <ui_interface.h>\n+#include <util.h> // for GetBoolArg\n+#include <wallet/coincontrol.h>\n+#include <wallet/feebumper.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h> // for BackupWallet\n \n #include <stdint.h>\n "
      },
      {
        "sha": "028146c187d86495d2c869e498fee2a161b4dad2",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,10 +5,10 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n-#include \"paymentrequestplus.h\"\n-#include \"walletmodeltransaction.h\"\n+#include <qt/paymentrequestplus.h>\n+#include <qt/walletmodeltransaction.h>\n \n-#include \"support/allocators/secure.h\"\n+#include <support/allocators/secure.h>\n \n #include <map>\n #include <vector>"
      },
      {
        "sha": "3bf3e295ffc79065a18925188d2f4ae1dda87305",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletmodeltransaction.h\"\n+#include <qt/walletmodeltransaction.h>\n \n-#include \"policy/policy.h\"\n-#include \"wallet/wallet.h\"\n+#include <policy/policy.h>\n+#include <wallet/wallet.h>\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :\n     recipients(_recipients),"
      },
      {
        "sha": "d75875eefd684dfa875168a3bd77b91ab0c73ca6",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETMODELTRANSACTION_H\n #define BITCOIN_QT_WALLETMODELTRANSACTION_H\n \n-#include \"walletmodel.h\"\n+#include <qt/walletmodel.h>\n \n #include <QObject>\n "
      },
      {
        "sha": "a589fad9bd52592ca4bff36f60d861a05327a9b5",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletview.h\"\n-\n-#include \"addressbookpage.h\"\n-#include \"askpassphrasedialog.h\"\n-#include \"bitcoingui.h\"\n-#include \"clientmodel.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"overviewpage.h\"\n-#include \"platformstyle.h\"\n-#include \"receivecoinsdialog.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"signverifymessagedialog.h\"\n-#include \"transactiontablemodel.h\"\n-#include \"transactionview.h\"\n-#include \"walletmodel.h\"\n-\n-#include \"ui_interface.h\"\n+#include <qt/walletview.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/askpassphrasedialog.h>\n+#include <qt/bitcoingui.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/overviewpage.h>\n+#include <qt/platformstyle.h>\n+#include <qt/receivecoinsdialog.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/signverifymessagedialog.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/transactionview.h>\n+#include <qt/walletmodel.h>\n+\n+#include <ui_interface.h>\n \n #include <QAction>\n #include <QActionGroup>"
      },
      {
        "sha": "4c908741356c6afa91af0ce15c1ba92b535e3579",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETVIEW_H\n #define BITCOIN_QT_WALLETVIEW_H\n \n-#include \"amount.h\"\n+#include <amount.h>\n \n #include <QStackedWidget>\n "
      },
      {
        "sha": "aa6c27343144aff03190dbbaba74baeb1b312423",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"winshutdownmonitor.h\"\n+#include <qt/winshutdownmonitor.h>\n \n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-#include \"init.h\"\n-#include \"util.h\"\n+#include <init.h>\n+#include <util.h>\n \n #include <windows.h>\n "
      },
      {
        "sha": "3075a771829c8aec12fb8cab05b97032c0ae8fda",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include <random.h>\n \n-#include \"crypto/sha512.h\"\n-#include \"support/cleanse.h\"\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n #ifdef WIN32\n-#include \"compat.h\" // for Windows API\n+#include <compat.h> // for Windows API\n #include <wincrypt.h>\n #endif\n-#include \"util.h\"             // for LogPrint()\n-#include \"utilstrencodings.h\" // for GetTime()\n+#include <util.h>             // for LogPrint()\n+#include <utilstrencodings.h> // for GetTime()\n \n #include <stdlib.h>\n #include <limits>"
      },
      {
        "sha": "93099176896e88df6f9f74fe3dd742c1100611d4",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_RANDOM_H\n #define BITCOIN_RANDOM_H\n \n-#include \"crypto/chacha20.h\"\n-#include \"crypto/common.h\"\n-#include \"uint256.h\"\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <uint256.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "86ee7804a382bcf77fe6442293e38d213847a44f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,20 +3,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"core_io.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"validation.h\"\n-#include \"httpserver.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"rpc/server.h\"\n-#include \"streams.h\"\n-#include \"sync.h\"\n-#include \"txmempool.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <core_io.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <validation.h>\n+#include <httpserver.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <txmempool.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n \n #include <boost/algorithm/string.hpp>\n "
      },
      {
        "sha": "601965d4c4c2164db15ea9e6b39755ad63598126",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,28 +3,28 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/blockchain.h\"\n-\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"checkpoints.h\"\n-#include \"coins.h\"\n-#include \"consensus/validation.h\"\n-#include \"validation.h\"\n-#include \"core_io.h\"\n-#include \"policy/feerate.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/transaction.h\"\n-#include \"rpc/server.h\"\n-#include \"streams.h\"\n-#include \"sync.h\"\n-#include \"txdb.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"hash.h\"\n-#include \"warnings.h\"\n+#include <rpc/blockchain.h>\n+\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <checkpoints.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <validation.h>\n+#include <core_io.h>\n+#include <policy/feerate.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <hash.h>\n+#include <warnings.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a595b6ec27268ba5f4e00c084f6c5aba761cd54e",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/client.h\"\n-#include \"rpc/protocol.h\"\n-#include \"util.h\"\n+#include <rpc/client.h>\n+#include <rpc/protocol.h>\n+#include <util.h>\n \n #include <set>\n #include <stdint.h>"
      },
      {
        "sha": "1753ecd3fca4b784efb47ea4126e38eca5cfad31",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,28 +3,28 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-#include \"amount.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/params.h\"\n-#include \"consensus/validation.h\"\n-#include \"core_io.h\"\n-#include \"init.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"net.h\"\n-#include \"policy/fees.h\"\n-#include \"pow.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"rpc/mining.h\"\n-#include \"rpc/server.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"validationinterface.h\"\n-#include \"warnings.h\"\n+#include <base58.h>\n+#include <amount.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <init.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <policy/fees.h>\n+#include <pow.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/mining.h>\n+#include <rpc/server.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <validationinterface.h>\n+#include <warnings.h>\n \n #include <memory>\n #include <stdint.h>"
      },
      {
        "sha": "8d4627315949f93e8d001b5fae7c16fad3abee47",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_RPC_MINING_H\n #define BITCOIN_RPC_MINING_H\n \n-#include \"script/script.h\"\n+#include <script/script.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "b3e22f5f106e9e7173d2aa4a0514a42a4165edc5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,27 +3,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-#include \"chain.h\"\n-#include \"clientversion.h\"\n-#include \"core_io.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"init.h\"\n-#include \"validation.h\"\n-#include \"httpserver.h\"\n-#include \"net.h\"\n-#include \"netbase.h\"\n-#include \"rpc/blockchain.h\"\n-#include \"rpc/server.h\"\n-#include \"timedata.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <base58.h>\n+#include <chain.h>\n+#include <clientversion.h>\n+#include <core_io.h>\n+#include <crypto/ripemd160.h>\n+#include <init.h>\n+#include <validation.h>\n+#include <httpserver.h>\n+#include <net.h>\n+#include <netbase.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/server.h>\n+#include <timedata.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n-#include \"wallet/rpcwallet.h\"\n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n #endif\n-#include \"warnings.h\"\n+#include <warnings.h>\n \n #include <stdint.h>\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "322a3e0cbdeecd65db1df65d5d02d5be9ce4a5af",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,24 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/server.h\"\n-\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"core_io.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n-#include \"net_processing.h\"\n-#include \"netbase.h\"\n-#include \"policy/policy.h\"\n-#include \"protocol.h\"\n-#include \"sync.h\"\n-#include \"timedata.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"version.h\"\n-#include \"warnings.h\"\n+#include <rpc/server.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <core_io.h>\n+#include <validation.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netbase.h>\n+#include <policy/policy.h>\n+#include <rpc/protocol.h>\n+#include <sync.h>\n+#include <timedata.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <version.h>\n+#include <warnings.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "4cb28c21042fe48515a66a0440e24403f9d05a4d",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,14 +3,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/protocol.h\"\n-\n-#include \"random.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"utiltime.h\"\n-#include \"version.h\"\n+#include <rpc/protocol.h>\n+\n+#include <random.h>\n+#include <tinyformat.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+#include <version.h>\n \n #include <stdint.h>\n #include <fstream>"
      },
      {
        "sha": "4b9bd41994d17e5c32603e8f0ea38f83101d81bd",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_RPCPROTOCOL_H\n #define BITCOIN_RPCPROTOCOL_H\n \n-#include \"fs.h\"\n+#include <fs.h>\n \n #include <list>\n #include <map>"
      },
      {
        "sha": "e65959bf0e9efecd92e9c2ffb782bfcde48a6856",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,32 +3,32 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-#include \"chain.h\"\n-#include \"coins.h\"\n-#include \"consensus/validation.h\"\n-#include \"core_io.h\"\n-#include \"init.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"validationinterface.h\"\n-#include \"merkleblock.h\"\n-#include \"net.h\"\n-#include \"policy/policy.h\"\n-#include \"policy/rbf.h\"\n-#include \"primitives/transaction.h\"\n-#include \"rpc/safemode.h\"\n-#include \"rpc/server.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/sign.h\"\n-#include \"script/standard.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n+#include <base58.h>\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <init.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <merkleblock.h>\n+#include <net.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <rpc/safemode.h>\n+#include <rpc/server.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/sign.h>\n+#include <script/standard.h>\n+#include <txmempool.h>\n+#include <uint256.h>\n+#include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n-#include \"wallet/rpcwallet.h\"\n-#include \"wallet/wallet.h\"\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n #endif\n \n #include <future>"
      },
      {
        "sha": "9f3a9d30b8533a7ee58b9cc87f3b22671def247c",
        "filename": "src/rpc/safemode.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/safemode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/safemode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/safemode.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1,8 +1,8 @@\n-#include \"safemode.h\"\n+#include <rpc/safemode.h>\n \n-#include \"rpc/protocol.h\"\n-#include \"util.h\"\n-#include \"warnings.h\"\n+#include <rpc/protocol.h>\n+#include <util.h>\n+#include <warnings.h>\n \n void ObserveSafeMode()\n {"
      },
      {
        "sha": "fa813982721c8d2811a9438628acb216b209de42",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,16 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/server.h\"\n-\n-#include \"base58.h\"\n-#include \"fs.h\"\n-#include \"init.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <rpc/server.h>\n+\n+#include <base58.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <random.h>\n+#include <sync.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "cd201bf31686fa81494c06890f99005eefca179e",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_RPCSERVER_H\n #define BITCOIN_RPCSERVER_H\n \n-#include \"amount.h\"\n-#include \"rpc/protocol.h\"\n-#include \"uint256.h\"\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n \n #include <list>\n #include <map>"
      },
      {
        "sha": "260f6fa60e7ce0908e730a7379819976844ec562",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"scheduler.h\"\n+#include <scheduler.h>\n \n-#include \"random.h\"\n-#include \"reverselock.h\"\n+#include <random.h>\n+#include <reverselock.h>\n \n #include <assert.h>\n #include <boost/bind.hpp>"
      },
      {
        "sha": "b99f1653434c0c01af6495a542d952baca5322ce",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/thread.hpp>\n #include <map>\n \n-#include \"sync.h\"\n+#include <sync.h>\n \n //\n // Simple class for background tasks that should be run"
      },
      {
        "sha": "77edc85b8ccfdda9e3fd71616c4a8083039915b2",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinconsensus.h\"\n+#include <script/bitcoinconsensus.h>\n \n-#include \"primitives/transaction.h\"\n-#include \"pubkey.h\"\n-#include \"script/interpreter.h\"\n-#include \"version.h\"\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/interpreter.h>\n+#include <version.h>\n \n namespace {\n "
      },
      {
        "sha": "f09cd59b9281bca9e4e5326d5ed035b7a489a795",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -9,7 +9,7 @@\n #include <stdint.h>\n \n #if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n   #if defined(_WIN32)\n     #if defined(DLL_EXPORT)\n       #if defined(HAVE_FUNC_ATTRIBUTE_DLLEXPORT)"
      },
      {
        "sha": "d6348f17d88e841e13f5158c91045d2a265e64fb",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"interpreter.h\"\n-\n-#include \"primitives/transaction.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha256.h\"\n-#include \"pubkey.h\"\n-#include \"script/script.h\"\n-#include \"uint256.h\"\n+#include <script/interpreter.h>\n+\n+#include <primitives/transaction.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <uint256.h>\n \n typedef std::vector<unsigned char> valtype;\n "
      },
      {
        "sha": "2eae68179e40fde8197773ea73d28cf1f0a31ed2",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n-#include \"script_error.h\"\n-#include \"primitives/transaction.h\"\n+#include <script/script_error.h>\n+#include <primitives/transaction.h>\n \n #include <vector>\n #include <stdint.h>"
      },
      {
        "sha": "60bef3b7019f1708e76e3c0b6593b742a6369247",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,13 +3,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"ismine.h\"\n+#include <script/ismine.h>\n \n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"script/sign.h\"\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <script/sign.h>\n \n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "77ffa824324a583a7501b9282dfbd5184d903225",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SCRIPT_ISMINE_H\n #define BITCOIN_SCRIPT_ISMINE_H\n \n-#include \"script/standard.h\"\n+#include <script/standard.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a7bfb170eb94503e91bfc2974e3e15624ea5ce08",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script.h\"\n+#include <script/script.h>\n \n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n+#include <tinyformat.h>\n+#include <utilstrencodings.h>\n \n const char* GetOpName(opcodetype opcode)\n {"
      },
      {
        "sha": "263db62edf3aa5d1b54e60c1a1ae3f7ed5fa9354",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"crypto/common.h\"\n-#include \"prevector.h\"\n-#include \"serialize.h\"\n+#include <crypto/common.h>\n+#include <prevector.h>\n+#include <serialize.h>\n \n #include <assert.h>\n #include <climits>"
      },
      {
        "sha": "32aa639ac421dc9580fd98c876b527a3675f55fd",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script_error.h\"\n+#include <script/script_error.h>\n \n const char* ScriptErrorString(const ScriptError serror)\n {"
      },
      {
        "sha": "88d1d675595652158a4d35b1ac5ccf3ee84af20b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sigcache.h\"\n+#include <script/sigcache.h>\n \n-#include \"memusage.h\"\n-#include \"pubkey.h\"\n-#include \"random.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n+#include <memusage.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <util.h>\n \n-#include \"cuckoocache.h\"\n+#include <cuckoocache.h>\n #include <boost/thread.hpp>\n \n namespace {"
      },
      {
        "sha": "1019061fbb5a90b4cb0d3fda470bfe6a89e538cc",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGCACHE_H\n #define BITCOIN_SCRIPT_SIGCACHE_H\n \n-#include \"script/interpreter.h\"\n+#include <script/interpreter.h>\n \n #include <vector>\n "
      },
      {
        "sha": "117a4d8a52aa0d2c61a58de7f3f3cb10df327fba",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,14 +3,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script/sign.h\"\n-\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/standard.h\"\n-#include \"uint256.h\"\n+#include <script/sign.h>\n+\n+#include <key.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <uint256.h>\n \n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "400c0c08658b45737d3a9ad2ce1b34c8cd8dffe9",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGN_H\n #define BITCOIN_SCRIPT_SIGN_H\n \n-#include \"script/interpreter.h\"\n+#include <script/interpreter.h>\n \n class CKeyID;\n class CKeyStore;"
      },
      {
        "sha": "b7b33fade6c35dfceffb381de55f28608cedffd5",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script/standard.h\"\n+#include <script/standard.h>\n \n-#include \"pubkey.h\"\n-#include \"script/script.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "3eeeabdc159bd7c026622e783af2b4c987c299a0",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_SCRIPT_STANDARD_H\n #define BITCOIN_SCRIPT_STANDARD_H\n \n-#include \"script/interpreter.h\"\n-#include \"uint256.h\"\n+#include <script/interpreter.h>\n+#include <uint256.h>\n \n #include <boost/variant.hpp>\n "
      },
      {
        "sha": "62ecde48237c1ea78c4a44673aec60d44a2e53d2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SERIALIZE_H\n #define BITCOIN_SERIALIZE_H\n \n-#include \"compat/endian.h\"\n+#include <compat/endian.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -21,7 +21,7 @@\n #include <utility>\n #include <vector>\n \n-#include \"prevector.h\"\n+#include <prevector.h>\n \n static const unsigned int MAX_SIZE = 0x02000000;\n "
      },
      {
        "sha": "a212691f6d8caf2dc0daf05023d00698eaded1fa",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_STREAMS_H\n #define BITCOIN_STREAMS_H\n \n-#include \"support/allocators/zeroafterfree.h\"\n-#include \"serialize.h\"\n+#include <support/allocators/zeroafterfree.h>\n+#include <serialize.h>\n \n #include <algorithm>\n #include <assert.h>"
      },
      {
        "sha": "7cd031bfe864e730abe4706502c49384e75034f9",
        "filename": "src/support/allocators/secure.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n #define BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n \n-#include \"support/lockedpool.h\"\n-#include \"support/cleanse.h\"\n+#include <support/lockedpool.h>\n+#include <support/cleanse.h>\n \n #include <string>\n "
      },
      {
        "sha": "23ef96c13f96a68aac61336ffb11eca961c9ca36",
        "filename": "src/support/allocators/zeroafterfree.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/allocators/zeroafterfree.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/allocators/zeroafterfree.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/zeroafterfree.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H\n #define BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H\n \n-#include \"support/cleanse.h\"\n+#include <support/cleanse.h>\n \n #include <memory>\n #include <vector>"
      },
      {
        "sha": "82cdfe707bb2a377263f956f00a8a404b4061ce1",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"cleanse.h\"\n+#include <support/cleanse.h>\n \n #include <cstring>\n "
      },
      {
        "sha": "98e8694181ea4d818681c66cf508f6c64349163e",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"support/lockedpool.h\"\n-#include \"support/cleanse.h\"\n+#include <support/lockedpool.h>\n+#include <support/cleanse.h>\n \n #if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n+#include <config/bitcoin-config.h>\n #endif\n \n #ifdef WIN32"
      },
      {
        "sha": "fcc6ddc354e3836694c157d9ad5c66e18899f709",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sync.h\"\n+#include <sync.h>\n \n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <stdio.h>\n "
      },
      {
        "sha": "b0889be767546beedc1964e0b7fdc06bdf3929b3",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_SYNC_H\n #define BITCOIN_SYNC_H\n \n-#include \"threadsafety.h\"\n+#include <threadsafety.h>\n \n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/mutex.hpp>"
      },
      {
        "sha": "6be176a1ad917682ba8dae78973ae5e48e456e65",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,17 +4,17 @@\n \n // Unit tests for denial-of-service detection/prevention code\n \n-#include \"chainparams.h\"\n-#include \"keystore.h\"\n-#include \"net.h\"\n-#include \"net_processing.h\"\n-#include \"pow.h\"\n-#include \"script/sign.h\"\n-#include \"serialize.h\"\n-#include \"util.h\"\n-#include \"validation.h\"\n-\n-#include \"test/test_bitcoin.h\"\n+#include <chainparams.h>\n+#include <keystore.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <pow.h>\n+#include <script/sign.h>\n+#include <serialize.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+#include <test/test_bitcoin.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "609b1a05d32191c269e8913b17d812b47c5ab821",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1,14 +1,14 @@\n // Copyright (c) 2012-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include \"addrman.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <addrman.h>\n+#include <test/test_bitcoin.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n \n-#include \"hash.h\"\n-#include \"netbase.h\"\n-#include \"random.h\"\n+#include <hash.h>\n+#include <netbase.h>\n+#include <random.h>\n \n class CAddrManTest : public CAddrMan\n {"
      },
      {
        "sha": "83fa3b76be935c30e077360aabdfe1a4bdf9066f",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n+#include <util.h>\n \n-#include \"support/allocators/secure.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <support/allocators/secure.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "7ebbd22c5d4262175cdf9d3c8b08763f1a787478",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n-#include \"policy/feerate.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <amount.h>\n+#include <policy/feerate.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "eb3148a1deb2908a9db4c7af0b72f6e615215f98",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -8,11 +8,11 @@\n #include <iomanip>\n #include <limits>\n #include <cmath>\n-#include \"uint256.h\"\n-#include \"arith_uint256.h\"\n+#include <uint256.h>\n+#include <arith_uint256.h>\n #include <string>\n-#include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <version.h>\n+#include <test/test_bitcoin.h>\n \n BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n "
      },
      {
        "sha": "abf236b953a1a9bcf5d8890dc30ef669545075f8",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "3156cc53d003c76e5b6b39d484885ec102e68686",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,18 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"base58.h\"\n-\n-#include \"data/base58_encode_decode.json.h\"\n-#include \"data/base58_keys_invalid.json.h\"\n-#include \"data/base58_keys_valid.json.h\"\n-\n-#include \"key.h\"\n-#include \"script/script.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <base58.h>\n+\n+#include <test/data/base58_encode_decode.json.h>\n+#include <test/data/base58_keys_invalid.json.h>\n+#include <test/data/base58_keys_valid.json.h>\n+\n+#include <key.h>\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "46b3a04f35890b263604863bfe4d104026cc15ee",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "495290c8d963af451b9e58855cbc1cb76f76604f",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bech32.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <bech32.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "e3e727439b1d7d65e0906193f799610a23a8ffad",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -4,12 +4,12 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"base58.h\"\n-#include \"key.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <base58.h>\n+#include <key.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "718b5bdfb9ee215f8dc83e7da7af008d47b2cf59",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"blockencodings.h\"\n-#include \"consensus/merkle.h\"\n-#include \"chainparams.h\"\n-#include \"random.h\"\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <chainparams.h>\n+#include <random.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "fdd30be0b1ad8ed2af0b6ef41685543578d37489",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,20 +2,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bloom.h\"\n-\n-#include \"base58.h\"\n-#include \"clientversion.h\"\n-#include \"key.h\"\n-#include \"merkleblock.h\"\n-#include \"primitives/block.h\"\n-#include \"random.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <bloom.h>\n+\n+#include <base58.h>\n+#include <clientversion.h>\n+#include <key.h>\n+#include <merkleblock.h>\n+#include <primitives/block.h>\n+#include <random.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "ab4f08b999d76bf5cfb3faa292d03dfeda10f918",
        "filename": "src/test/bswap_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bswap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/bswap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bswap_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compat/byteswap.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <compat/byteswap.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "d8ad0d9165db4030ba43e8ceac439151d02f3e25",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n-#include \"utiltime.h\"\n-#include \"validation.h\"\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n \n-#include \"test/test_bitcoin.h\"\n-#include \"checkqueue.h\"\n+#include <test/test_bitcoin.h>\n+#include <checkqueue.h>\n #include <boost/test/unit_test.hpp>\n #include <boost/thread.hpp>\n #include <atomic>\n@@ -18,7 +18,7 @@\n \n #include <unordered_set>\n #include <memory>\n-#include \"random.h\"\n+#include <random.h>\n \n // BasicTestingSetup not sufficient because nScriptCheckThreads is not set\n // otherwise."
      },
      {
        "sha": "7c3d02ba63c3e94e930d2456f26c4ed9899a5ed3",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"coins.h\"\n-#include \"script/standard.h\"\n-#include \"uint256.h\"\n-#include \"undo.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"validation.h\"\n-#include \"consensus/validation.h\"\n+#include <coins.h>\n+#include <script/standard.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <consensus/validation.h>\n \n #include <vector>\n #include <map>"
      },
      {
        "sha": "87e75d802096082475471f687659cea0bccb6ab1",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compressor.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <compressor.h>\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a63d62bb373ff3090cb71243fcf20f1caa1ed2e1",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/aes.h\"\n-#include \"crypto/chacha20.h\"\n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha256.h\"\n-#include \"crypto/sha512.h\"\n-#include \"crypto/hmac_sha256.h\"\n-#include \"crypto/hmac_sha512.h\"\n-#include \"random.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <crypto/aes.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <crypto/sha512.h>\n+#include <crypto/hmac_sha256.h>\n+#include <crypto/hmac_sha512.h>\n+#include <random.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "32d46da984dad91a50eb429273e996e20d959bfa",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <boost/test/unit_test.hpp>\n-#include \"cuckoocache.h\"\n-#include \"script/sigcache.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"random.h\"\n+#include <cuckoocache.h>\n+#include <script/sigcache.h>\n+#include <test/test_bitcoin.h>\n+#include <random.h>\n #include <thread>\n \n /** Test Suite for CuckooCache"
      },
      {
        "sha": "2e1e4da72f32e2dc808a511fdccab887286c7526",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"dbwrapper.h\"\n-#include \"uint256.h\"\n-#include \"random.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <dbwrapper.h>\n+#include <uint256.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "3c3925869360ec70a9ec5874722ff1e69e06e713",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "68f445d1424ced44910834cd32c9798270dd29bb",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"hash.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <hash.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "7b9d7a63982465246d3b7f1830bba45a7dd70b68",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n-\n-#include \"base58.h\"\n-#include \"script/script.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <key.h>\n+\n+#include <base58.h>\n+#include <script/script.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "90730cd7b512ede01e77345275572999066485b6",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"limitedmap.h\"\n+#include <limitedmap.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "4be32f7628247198f4efbc65020bc49bd87ebc3f",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"validation.h\"\n-#include \"net.h\"\n+#include <chainparams.h>\n+#include <validation.h>\n+#include <net.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/signals2/signal.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "a694b870fed7d8255dee90e4e48cf443633c0de5",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,11 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/policy.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n+#include <policy/policy.h>\n+#include <txmempool.h>\n+#include <util.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n #include <list>"
      },
      {
        "sha": "ee48d96ad93745666c3584813013656c11136442",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/merkle.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/merkle.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "37a1a84136c603ca4ed332df6dd25ecca4362f6f",
        "filename": "src/test/merkleblock_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/merkleblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/merkleblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"merkleblock.h\"\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <merkleblock.h>\n+#include <uint256.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "b1a2032ea8afa8808583ab348fb02b93b4da6648",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,23 +2,23 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"coins.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/merkle.h\"\n-#include \"consensus/tx_verify.h\"\n-#include \"consensus/validation.h\"\n-#include \"validation.h\"\n-#include \"miner.h\"\n-#include \"policy/policy.h\"\n-#include \"pubkey.h\"\n-#include \"script/standard.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include \"test/test_bitcoin.h\"\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <txmempool.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+\n+#include <test/test_bitcoin.h>\n \n #include <memory>\n "
      },
      {
        "sha": "ffba7d6d221c88b2bf5f65b1e5fd77b7b5818353",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,16 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/sign.h\"\n-#include \"script/ismine.h\"\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <key.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/interpreter.h>\n+#include <script/sign.h>\n+#include <script/ismine.h>\n+#include <uint256.h>\n+#include <test/test_bitcoin.h>\n \n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "b4176a2b854974f44eede52c9400417550f15806",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -1,17 +1,17 @@\n // Copyright (c) 2012-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include \"addrman.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <addrman.h>\n+#include <test/test_bitcoin.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n-#include \"hash.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"net.h\"\n-#include \"netbase.h\"\n-#include \"chainparams.h\"\n-#include \"util.h\"\n+#include <hash.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <net.h>\n+#include <netbase.h>\n+#include <chainparams.h>\n+#include <util.h>\n \n class CAddrManSerializationMock : public CAddrMan\n {"
      },
      {
        "sha": "f3a9b1fc65f516a69eb2d0438e05dfb3eff0fdc7",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"netbase.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"utilstrencodings.h\"\n+#include <netbase.h>\n+#include <test/test_bitcoin.h>\n+#include <utilstrencodings.h>\n \n #include <string>\n "
      },
      {
        "sha": "b7b632be3af7b9e38b96a2c42a76b9a49f8300b8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/merkle.h\"\n-#include \"merkleblock.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"uint256.h\"\n-#include \"arith_uint256.h\"\n-#include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/merkle.h>\n+#include <merkleblock.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <arith_uint256.h>\n+#include <version.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "d8026e4468eebddf87734de081fd5581b72a12ac",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"policy/policy.h\"\n-#include \"policy/fees.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n+#include <policy/policy.h>\n+#include <policy/fees.h>\n+#include <txmempool.h>\n+#include <uint256.h>\n+#include <util.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "2837537c9ad8da9f918f6d72772ec9ce7118a49b",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"pow.h\"\n-#include \"random.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <pow.h>\n+#include <random.h>\n+#include <util.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "1327d676506e5be4c7c5d476eeb56c2b3a4c555a",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -3,13 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <vector>\n-#include \"prevector.h\"\n+#include <prevector.h>\n \n-#include \"reverse_iterator.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "781b1e242d63920858d3ad08c878ec53f8192a59",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -10,9 +10,9 @@\n #include <map>\n #include <stdlib.h>\n \n-#include \"support/events.h\"\n+#include <support/events.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "1ca5a53d72feb35f73ef55490ae3661c6d5cd193",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include <random.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "86d6161e208e4bea3eea62a1b8020b88694e7a89",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"reverselock.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <reverselock.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "710d09ead6594971d0a2c821a7a66f619d17bb3e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"rpc/server.h\"\n-#include \"rpc/client.h\"\n+#include <rpc/server.h>\n+#include <rpc/client.h>\n \n-#include \"base58.h\"\n-#include \"core_io.h\"\n-#include \"netbase.h\"\n+#include <base58.h>\n+#include <core_io.h>\n+#include <netbase.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "b3ec6d34c73584c7d25ff7954b0db2dfb10c0bb8",
        "filename": "src/test/sanity_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"compat/sanity.h\"\n-#include \"key.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <compat/sanity.h>\n+#include <key.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "7e86eed1c59455f6661ced38ce68a717fc2b9bcd",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n-#include \"scheduler.h\"\n+#include <random.h>\n+#include <scheduler.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/test_bitcoin.h>\n \n #include <boost/bind.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "5a64aa39593e5f12646319f2173e47aeae290cba",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/tx_verify.h\"\n-#include \"core_io.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"validation.h\"\n-#include \"policy/policy.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/sign.h\"\n-#include \"script/ismine.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <consensus/tx_verify.h>\n+#include <core_io.h>\n+#include <key.h>\n+#include <keystore.h>\n+#include <validation.h>\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/sign.h>\n+#include <script/ismine.h>\n+#include <test/test_bitcoin.h>\n \n #include <vector>\n "
      },
      {
        "sha": "19060eccc939572e4bd8794ca1254efc04455007",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"script/ismine.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/standard.h\"\n-#include \"test/test_bitcoin.h\"\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/ismine.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "57b3e501af49b587cc8243979af0a81ddb8a12d0",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -2,21 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"data/script_tests.json.h\"\n-\n-#include \"core_io.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"script/script.h\"\n-#include \"script/script_error.h\"\n-#include \"script/sign.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"rpc/server.h\"\n+#include <test/data/script_tests.json.h>\n+\n+#include <core_io.h>\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/sign.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+#include <rpc/server.h>\n \n #if defined(HAVE_CONSENSUS_LIB)\n-#include \"script/bitcoinconsensus.h\"\n+#include <script/bitcoinconsensus.h>\n #endif\n \n #include <fstream>"
      },
      {
        "sha": "ad15427a9be9cf3d4564c2161de5d4d2e8ab31e3",
        "filename": "src/test/scriptnum10.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/scriptnum10.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c098a8aa0780009c11b66b1a5d488a928629ebf/src/test/scriptnum10.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum10.h?ref=3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "patch": "@@ -12,7 +12,7 @@\n #include <stdint.h>\n #include <string>\n #include <vector>\n-#include \"assert.h\"\n+#include <assert.h>\n \n class scriptnum10_error : public std::runtime_error\n {"
      }
    ]
  },
  {
    "sha": "66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmQ0NmM3OTAxYjdhOWIxOGQxYWIwY2U3YzY0YWRhOWI0NmMxMjM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T10:48:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T10:48:44Z"
      },
      "message": "Merge #11699: [travis-ci] Only run linters on Pull Requests\n\nec85248 [travis-ci] Only run linters on Pull Requests (John Newbery)\n\nPull request description:\n\n  Linters should only be run on pull request builds. Once bad code style\n  has been merged into master, it's too late. Master and other branches\n  should not fail to build because of linter warnings.\n\nTree-SHA512: f8e56e0c338db60110a67bdd39a5837b42e156180349a81a68a383a5adef07ecf7b4946c1565333b47edd2b1a70e52caf0600bdf448f6eb01fa47595e8df82c9",
      "tree": {
        "sha": "a95b544b6d0dfc3a82072c97e44465c7e1995187",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a95b544b6d0dfc3a82072c97e44465c7e1995187"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDW0MAAoJEB5K7WKYbNJd7VkH/jn+X+Z18jSy1di07eR1Co4E\nLsIMcEWyq+QSOIjui+o20oMuLwp++QF9YnGxL86uO1s0rQJmcBk4Vi46W8+zdq9s\nTNFmMtiomrunbk8XRrXeVKA/Hr3Pb9EUPraLa+Mks4ktBuwkBRDTrAYTVNdAz/a+\n7aA2iEVawTAQBqSL4DeKwLPfZxD58jf27dML75SZ8fJai/qQvzNAZw73BOJTwcUh\n4FNTv33SIxmJMtw1NT4DyESwjgxfic7NopJ0UMo205HJnDpN5gPDMdXLnJWuemX1\nsg2styKZLMyMaM6jLjeY1aftH1nfIvlVuEKhxsPoTvo0ldsBqCjgrNaUkch3RP4=\n=41wm\n-----END PGP SIGNATURE-----",
        "payload": "tree a95b544b6d0dfc3a82072c97e44465c7e1995187\nparent 3c098a8aa0780009c11b66b1a5d488a928629ebf\nparent ec85248c4877c273bf51c4e76fab85cbc26013bf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510829313 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510829324 +0100\n\nMerge #11699: [travis-ci] Only run linters on Pull Requests\n\nec85248 [travis-ci] Only run linters on Pull Requests (John Newbery)\n\nPull request description:\n\n  Linters should only be run on pull request builds. Once bad code style\n  has been merged into master, it's too late. Master and other branches\n  should not fail to build because of linter warnings.\n\nTree-SHA512: f8e56e0c338db60110a67bdd39a5837b42e156180349a81a68a383a5adef07ecf7b4946c1565333b47edd2b1a70e52caf0600bdf448f6eb01fa47595e8df82c9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c098a8aa0780009c11b66b1a5d488a928629ebf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c098a8aa0780009c11b66b1a5d488a928629ebf"
      },
      {
        "sha": "ec85248c4877c273bf51c4e76fab85cbc26013bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec85248c4877c273bf51c4e76fab85cbc26013bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec85248c4877c273bf51c4e76fab85cbc26013bf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a643d2ff5d8bb26ad73637bd861948b5186ca03c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
        "patch": "@@ -52,7 +52,7 @@ before_script:\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/leveldb; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-doc.py; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-rpc-mappings.py .; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/lint-all.sh; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/lint-all.sh; fi\n     - unset CC; unset CXX\n     - mkdir -p depends/SDKs depends/sdk-sources\n     - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi"
      }
    ]
  },
  {
    "sha": "084f52f38dc2f08d7ee067d376af66858d010ccf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODRmNTJmMzhkYzJmMDhkN2VlMDY3ZDM3NmFmNjY4NThkMDEwY2Nm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T10:49:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T10:49:42Z"
      },
      "message": "Merge #11654: tests: Initialize recently introduced non-static class member lastCycles to zero in constructor\n\n069215e Initialize recently introduced non-static class member lastCycles to zero in constructor (practicalswift)\n\nPull request description:\n\n  Initialize recently introduced non-static class member `lastCycles` to zero in constructor.\n\n  `lastCycles` was introduced in 35328187463a7078b4206e394c21d5515929c7de which was merged into master yesterday.\n\n  Friendly ping  @laanwj :-)\n\nTree-SHA512: cb93b6a8f6e2e3b06cd05a635da95c84f3df64c21fc23fe82f98306ea571badc32040315b563e46ddb5203128226bc334269acd497beead5a5777c434060fd85",
      "tree": {
        "sha": "39438feef10073add01f39fa8e792b516a8b53b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39438feef10073add01f39fa8e792b516a8b53b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/084f52f38dc2f08d7ee067d376af66858d010ccf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDW1GAAoJEB5K7WKYbNJdX5MIAICJVPGwLhYuPFRAf22eZRUt\nJ288YgdvjhN7dZqvTfGJrohMfVujJ7Cr3BW996S5qUBLlYjnxq/Eo3hZbblu4xea\n84jmaR/zEKKon+Lx7IrczybtcUEZ33+vDw49EQ7cYHUkRYW1urU6yU1+HuyOsDBm\nmEsX9vxXrsAE3d6KarOIKUj8vxwl/1MpJsleF7eb09vNhG0Pnt6/lVTVSazX42LC\nRHA6XfvJD3BVAIeD/U/O/jpuuL45Ll2QYVFGi+Y7IABZ0xQ9m/Hlw0MDQpW3oq3y\n6v8qPGaC3bJ8WENgyLxCt8HbOyrzWofKO8Jr8ulNYLBbrO6e5QL4g9Vk3RXuZnA=\n=usN7\n-----END PGP SIGNATURE-----",
        "payload": "tree 39438feef10073add01f39fa8e792b516a8b53b2\nparent 66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236\nparent 069215ebe2d9c7cce7cee74b1f13f6e0daf552e9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510829377 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510829382 +0100\n\nMerge #11654: tests: Initialize recently introduced non-static class member lastCycles to zero in constructor\n\n069215e Initialize recently introduced non-static class member lastCycles to zero in constructor (practicalswift)\n\nPull request description:\n\n  Initialize recently introduced non-static class member `lastCycles` to zero in constructor.\n\n  `lastCycles` was introduced in 35328187463a7078b4206e394c21d5515929c7de which was merged into master yesterday.\n\n  Friendly ping  @laanwj :-)\n\nTree-SHA512: cb93b6a8f6e2e3b06cd05a635da95c84f3df64c21fc23fe82f98306ea571badc32040315b563e46ddb5203128226bc334269acd497beead5a5777c434060fd85\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/084f52f38dc2f08d7ee067d376af66858d010ccf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/084f52f38dc2f08d7ee067d376af66858d010ccf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/084f52f38dc2f08d7ee067d376af66858d010ccf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66d46c7901b7a9b18d1ab0ce7c64ada9b46c1236"
      },
      {
        "sha": "069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/069215ebe2d9c7cce7cee74b1f13f6e0daf552e9"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "071a5dc9c7ae991b7df957bfd458a94f1105d8f2",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/084f52f38dc2f08d7ee067d376af66858d010ccf/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/084f52f38dc2f08d7ee067d376af66858d010ccf/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=084f52f38dc2f08d7ee067d376af66858d010ccf",
        "patch": "@@ -59,12 +59,17 @@ namespace benchmark {\n         uint64_t minCycles;\n         uint64_t maxCycles;\n     public:\n-        State(std::string _name, duration _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n-            minTime = duration::max();\n-            maxTime = duration::zero();\n-            minCycles = std::numeric_limits<uint64_t>::max();\n-            maxCycles = std::numeric_limits<uint64_t>::min();\n-            countMask = 1;\n+        State(std::string _name, duration _maxElapsed) :\n+            name(_name),\n+            maxElapsed(_maxElapsed),\n+            minTime(duration::max()),\n+            maxTime(duration::zero()),\n+            count(0),\n+            countMask(1),\n+            beginCycles(0),\n+            lastCycles(0),\n+            minCycles(std::numeric_limits<uint64_t>::max()),\n+            maxCycles(std::numeric_limits<uint64_t>::min()) {\n         }\n         bool KeepRunning();\n     };"
      }
    ]
  },
  {
    "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWJjMGI0MjhiMDNiNTcxYWZiYzMxMWI3ZjE4ZmQzYTcwN2FjNWFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T11:23:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-16T11:24:05Z"
      },
      "message": "Merge #11087: Diagnose unsuitable outputs in lockunspent().\n\n28f8b66 Diagnose unsuitable outputs in lockunspent(). (Eelis)\n\nPull request description:\n\n  Fixes #2667.\n\n  This is a simplified version of pull request #3574, which was abandoned by its author.\n\n  I added some tests as well.\n\nTree-SHA512: e63e00dec8b1b232079380183805cb0b0b18c78ea6bea769837949aab984689d7f68b2ccfe66b1873517b040b9e616ce0eb058575c3d4382aa8c26eebcf1f14e",
      "tree": {
        "sha": "747f53d269f9acddd5082e8da52023fe434b4419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/747f53d269f9acddd5082e8da52023fe434b4419"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDXVVAAoJEB5K7WKYbNJdQ+kIAJlugUhMFGbJ4PqOdZvKxYvT\nS0+zNRmelKoRwE3A12GTGIzBNORJglNnLP5hgzZ9L96D/ssppMivDIMDGFC8PxJE\nJfynVdEQjRS8ePpwKveQp+iQov2vTQAyxzeotcitDN08lKgb3WA6ve/akAP4Up7y\nUB8ZDI5Jf9LTSH69iqSkM9TSHyon1JHK5LjIEzkNVLA7Du8R+zL3YydBA++CA6xt\n9wUXcvv0nNL/vx+e1CacMn7ybLyq8oBHxhXQVY/n0d98IvEcN1wXYk4o8HwS/8RW\nFNkFwE14UAp6FFwefNb0A0Wg9+oowu47KJZ/yd/Lx5cfdFXN+HKt6knJhTTV8/I=\n=OTyr\n-----END PGP SIGNATURE-----",
        "payload": "tree 747f53d269f9acddd5082e8da52023fe434b4419\nparent 084f52f38dc2f08d7ee067d376af66858d010ccf\nparent 28f8b6657764c7746645a6e75dfb09ffc0597322\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510831435 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510831445 +0100\n\nMerge #11087: Diagnose unsuitable outputs in lockunspent().\n\n28f8b66 Diagnose unsuitable outputs in lockunspent(). (Eelis)\n\nPull request description:\n\n  Fixes #2667.\n\n  This is a simplified version of pull request #3574, which was abandoned by its author.\n\n  I added some tests as well.\n\nTree-SHA512: e63e00dec8b1b232079380183805cb0b0b18c78ea6bea769837949aab984689d7f68b2ccfe66b1873517b040b9e616ce0eb058575c3d4382aa8c26eebcf1f14e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "084f52f38dc2f08d7ee067d376af66858d010ccf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/084f52f38dc2f08d7ee067d376af66858d010ccf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/084f52f38dc2f08d7ee067d376af66858d010ccf"
      },
      {
        "sha": "28f8b6657764c7746645a6e75dfb09ffc0597322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f8b6657764c7746645a6e75dfb09ffc0597322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28f8b6657764c7746645a6e75dfb09ffc0597322"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 60,
      "deletions": 15
    },
    "files": [
      {
        "sha": "23559eb35080734201f77f2b970347e90024de18",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 15,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99bc0b428b03b571afbc311b7f18fd3a707ac5af/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99bc0b428b03b571afbc311b7f18fd3a707ac5af/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "patch": "@@ -2531,33 +2531,66 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n     RPCTypeCheckArgument(request.params[1], UniValue::VARR);\n \n-    UniValue outputs = request.params[1].get_array();\n-    for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n-        const UniValue& output = outputs[idx];\n-        if (!output.isObject())\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n-        const UniValue& o = output.get_obj();\n+    const UniValue& output_params = request.params[1];\n+\n+    // Create and validate the COutPoints first.\n+\n+    std::vector<COutPoint> outputs;\n+    outputs.reserve(output_params.size());\n+\n+    for (unsigned int idx = 0; idx < output_params.size(); idx++) {\n+        const UniValue& o = output_params[idx].get_obj();\n \n         RPCTypeCheckObj(o,\n             {\n                 {\"txid\", UniValueType(UniValue::VSTR)},\n                 {\"vout\", UniValueType(UniValue::VNUM)},\n             });\n \n-        std::string txid = find_value(o, \"txid\").get_str();\n-        if (!IsHex(txid))\n+        const std::string& txid = find_value(o, \"txid\").get_str();\n+        if (!IsHex(txid)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n+        }\n \n-        int nOutput = find_value(o, \"vout\").get_int();\n-        if (nOutput < 0)\n+        const int nOutput = find_value(o, \"vout\").get_int();\n+        if (nOutput < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n+        }\n \n-        COutPoint outpt(uint256S(txid), nOutput);\n+        const COutPoint outpt(uint256S(txid), nOutput);\n \n-        if (fUnlock)\n-            pwallet->UnlockCoin(outpt);\n-        else\n-            pwallet->LockCoin(outpt);\n+        const auto it = pwallet->mapWallet.find(outpt.hash);\n+        if (it == pwallet->mapWallet.end()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, unknown transaction\");\n+        }\n+\n+        const CWalletTx& trans = it->second;\n+\n+        if (outpt.n >= trans.tx->vout.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n+        }\n+\n+        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n+        }\n+\n+        const bool is_locked = pwallet->IsLockedCoin(outpt.hash, outpt.n);\n+\n+        if (fUnlock && !is_locked) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n+        }\n+\n+        if (!fUnlock && is_locked) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output already locked\");\n+        }\n+\n+        outputs.push_back(outpt);\n+    }\n+\n+    // Atomically set (un)locked status for the outputs.\n+    for (const COutPoint& outpt : outputs) {\n+        if (fUnlock) pwallet->UnlockCoin(outpt);\n+        else pwallet->LockCoin(outpt);\n     }\n \n     return true;"
      },
      {
        "sha": "db60df18ede0089fd36ccc851c288550bf0c6bfa",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99bc0b428b03b571afbc311b7f18fd3a707ac5af/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99bc0b428b03b571afbc311b7f18fd3a707ac5af/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "patch": "@@ -100,11 +100,19 @@ def run_test(self):\n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n+        assert_raises_rpc_error(-8, \"Invalid parameter, expected locked output\", self.nodes[2].lockunspent, True, [unspent_0])\n         self.nodes[2].lockunspent(False, [unspent_0])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n         assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, unknown transaction\",\n+                              self.nodes[2].lockunspent, False,\n+                              [{\"txid\": \"0000000000000000000000000000000000\", \"vout\": 0}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout index out of bounds\",\n+                              self.nodes[2].lockunspent, False,\n+                              [{\"txid\": unspent_0[\"txid\"], \"vout\": 999}])\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n@@ -143,6 +151,10 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), 94)\n         assert_equal(self.nodes[2].getbalance(\"from1\"), 94-21)\n \n+        # Verify that a spent output cannot be locked anymore\n+        spent_0 = {\"txid\": node0utxos[0][\"txid\"], \"vout\": node0utxos[0][\"vout\"]}\n+        assert_raises_rpc_error(-8, \"Invalid parameter, expected unspent output\", self.nodes[0].lockunspent, False, [spent_0])\n+\n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n         fee_per_byte = Decimal('0.001') / 1000"
      }
    ]
  },
  {
    "sha": "2613c545f529f7c91462c12831d41dcb164bd0e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjEzYzU0NWY1MjlmN2M5MTQ2MmMxMjgzMWQ0MWRjYjE2NGJkMGUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T14:53:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T14:53:35Z"
      },
      "message": "[tests] fix flake8 warnings in sendheaders.py",
      "tree": {
        "sha": "1f4540717c9513f9da59c85dd6847e13ce64cebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f4540717c9513f9da59c85dd6847e13ce64cebf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2613c545f529f7c91462c12831d41dcb164bd0e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2613c545f529f7c91462c12831d41dcb164bd0e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2613c545f529f7c91462c12831d41dcb164bd0e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2613c545f529f7c91462c12831d41dcb164bd0e2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 54,
      "deletions": 38
    },
    "files": [
      {
        "sha": "8fdbcc6c0f9eeb578da7b550ec6f654633424cdb",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 54,
        "deletions": 38,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2613c545f529f7c91462c12831d41dcb164bd0e2/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2613c545f529f7c91462c12831d41dcb164bd0e2/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=2613c545f529f7c91462c12831d41dcb164bd0e2",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test behavior of headers messages to announce blocks.\n \n-Setup: \n+Setup:\n \n - Two nodes, two p2p connections to node0. One p2p connection should only ever\n   receive inv's (omitted from testing description below, this is our control).\n@@ -83,16 +83,32 @@\n e. Announce one more that doesn't connect.\n    Expect: disconnect.\n \"\"\"\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import (\n+    CBlockHeader,\n+    CInv,\n+    NODE_WITNESS,\n+    NetworkThread,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_getblocks,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_sendheaders,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    sync_blocks,\n+    wait_until,\n+)\n \n+DIRECT_FETCH_RESPONSE_TIME = 0.05\n \n-direct_fetch_response_time = 0.05\n-\n-class TestNode(NodeConnCB):\n+class BaseNode(NodeConnCB):\n     def __init__(self):\n         super().__init__()\n         self.block_announced = False\n@@ -136,8 +152,8 @@ def on_headers(self, conn, message):\n     # right header or the right inv\n     # inv and headers should be lists of block hashes\n     def check_last_announcement(self, headers=None, inv=None):\n-        expect_headers = headers if headers != None else []\n-        expect_inv = inv if inv != None else []\n+        expect_headers = headers if headers is not None else []\n+        expect_inv = inv if inv is not None else []\n         test_function = lambda: self.block_announced\n         wait_until(test_function, timeout=60, lock=mininode_lock)\n         with mininode_lock:\n@@ -153,7 +169,7 @@ def check_last_announcement(self, headers=None, inv=None):\n             hash_headers = []\n             if \"headers\" in self.last_message:\n                 # treat headers as a list of block hashes\n-                hash_headers = [ x.sha256 for x in self.last_message[\"headers\"].headers ]\n+                hash_headers = [x.sha256 for x in self.last_message[\"headers\"].headers]\n             if hash_headers != expect_headers:\n                 success = False\n \n@@ -176,7 +192,7 @@ def wait_for_block_announcement(self, block_hash, timeout=60):\n \n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n-        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n+        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n         self.send_message(headers_message)\n \n     def send_getblocks(self, locator):\n@@ -202,27 +218,27 @@ def mine_blocks(self, count):\n     # to-be-reorged-out blocks are mined, so that we don't break later tests.\n     # return the list of block hashes newly mined\n     def mine_reorg(self, length):\n-        self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n+        self.nodes[0].generate(length)  # make sure all invalidated blocks are node0's\n         sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n             x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n             x.clear_last_announcement()\n \n         tip_height = self.nodes[1].getblockcount()\n-        hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n+        hash_to_invalidate = self.nodes[1].getblockhash(tip_height - (length - 1))\n         self.nodes[1].invalidateblock(hash_to_invalidate)\n-        all_hashes = self.nodes[1].generate(length+1) # Must be longer than the orig chain\n+        all_hashes = self.nodes[1].generate(length + 1)  # Must be longer than the orig chain\n         sync_blocks(self.nodes, wait=0.1)\n         return [int(x, 16) for x in all_hashes]\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        inv_node = self.nodes[0].add_p2p_connection(TestNode())\n+        inv_node = self.nodes[0].add_p2p_connection(BaseNode())\n         # Set nServices to 0 for test_node, so no block download will occur outside of\n         # direct fetching\n-        test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_WITNESS)\n+        test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        NetworkThread().start()  # Start up network handling in another thread\n \n         # Test logic begins here\n         inv_node.wait_for_verack()\n@@ -275,18 +291,18 @@ def test_nonnull_locators(self, test_node, inv_node):\n                 test_node.get_headers(locator=[old_tip], hashstop=tip)\n                 test_node.get_data([tip])\n                 test_node.wait_for_block(tip)\n-                test_node.clear_last_announcement() # since we requested headers...\n+                test_node.clear_last_announcement()  # since we requested headers...\n             elif i == 2:\n                 # this time announce own block via headers\n                 height = self.nodes[0].getblockcount()\n                 last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n                 block_time = last_time + 1\n-                new_block = create_block(tip, create_coinbase(height+1), block_time)\n+                new_block = create_block(tip, create_coinbase(height + 1), block_time)\n                 new_block.solve()\n                 test_node.send_header_for_blocks([new_block])\n                 test_node.wait_for_getdata([new_block.sha256])\n                 test_node.send_message(msg_block(new_block))\n-                test_node.sync_with_ping() # make sure this block is processed\n+                test_node.sync_with_ping()  # make sure this block is processed\n                 inv_node.clear_last_announcement()\n                 test_node.clear_last_announcement()\n \n@@ -305,7 +321,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n         assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n \n-        height = self.nodes[0].getblockcount()+1\n+        height = self.nodes[0].getblockcount() + 1\n         block_time += 10  # Advance far enough ahead\n         for i in range(10):\n             # Mine i blocks, and alternate announcing either via\n@@ -314,7 +330,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             # with block header, even though the blocks are never requested\n             for j in range(2):\n                 blocks = []\n-                for b in range(i+1):\n+                for b in range(i + 1):\n                     blocks.append(create_block(tip, create_coinbase(height), block_time))\n                     blocks[-1].solve()\n                     tip = blocks[-1].sha256\n@@ -328,7 +344,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n                     test_node.send_header_for_blocks(blocks)\n                     # Test that duplicate inv's won't result in duplicate\n                     # getdata requests, or duplicate headers announcements\n-                    [ inv_node.send_block_inv(x.sha256) for x in blocks ]\n+                    [inv_node.send_block_inv(x.sha256) for x in blocks]\n                     test_node.wait_for_getdata([x.sha256 for x in blocks])\n                     inv_node.sync_with_ping()\n                 else:\n@@ -339,7 +355,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n                     # getdata requests (the check is further down)\n                     inv_node.send_header_for_blocks(blocks)\n                     inv_node.sync_with_ping()\n-                [ test_node.send_message(msg_block(x)) for x in blocks ]\n+                [test_node.send_message(msg_block(x)) for x in blocks]\n                 test_node.sync_with_ping()\n                 inv_node.sync_with_ping()\n                 # This block should not be announced to the inv node (since it also\n@@ -365,7 +381,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(headers=new_block_hashes), True)\n \n-            block_time += 8 \n+            block_time += 8\n \n             # Mine a too-large reorg, which should be announced with a single inv\n             new_block_hashes = self.mine_reorg(length=8)\n@@ -379,7 +395,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             fork_point = int(fork_point, 16)\n \n             # Use getblocks/getdata\n-            test_node.send_getblocks(locator = [fork_point])\n+            test_node.send_getblocks(locator=[fork_point])\n             assert_equal(test_node.check_last_announcement(inv=new_block_hashes), True)\n             test_node.get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n@@ -403,7 +419,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n                     test_node.get_data([tip])\n                     test_node.wait_for_block(tip)\n                     # This time, try sending either a getheaders to trigger resumption\n-                    # of headers announcements, or mine a new block and inv it, also \n+                    # of headers announcements, or mine a new block and inv it, also\n                     # triggering resumption of headers announcements.\n                     if j == 0:\n                         test_node.get_headers(locator=[tip], hashstop=0)\n@@ -434,7 +450,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             height += 1\n             inv_node.send_message(msg_block(blocks[-1]))\n \n-        inv_node.sync_with_ping() # Make sure blocks are processed\n+        inv_node.sync_with_ping()  # Make sure blocks are processed\n         test_node.last_message.pop(\"getdata\", None)\n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n@@ -453,9 +469,9 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=direct_fetch_response_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=DIRECT_FETCH_RESPONSE_TIME)\n \n-        [ test_node.send_message(msg_block(x)) for x in blocks ]\n+        [test_node.send_message(msg_block(x)) for x in blocks]\n \n         test_node.sync_with_ping()\n \n@@ -484,13 +500,13 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # both blocks (same work as tip)\n         test_node.send_header_for_blocks(blocks[1:2])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=direct_fetch_response_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=DIRECT_FETCH_RESPONSE_TIME)\n \n         # Announcing 16 more headers should trigger direct fetch for 14 more\n         # blocks\n         test_node.send_header_for_blocks(blocks[2:18])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=direct_fetch_response_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=DIRECT_FETCH_RESPONSE_TIME)\n \n         # Announcing 1 more header should not trigger any response\n         test_node.last_message.pop(\"getdata\", None)\n@@ -502,7 +518,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         self.log.info(\"Part 4: success!\")\n \n         # Now deliver all those blocks we announced.\n-        [ test_node.send_message(msg_block(x)) for x in blocks ]\n+        [test_node.send_message(msg_block(x)) for x in blocks]\n \n         self.log.info(\"Part 5: Testing handling of unconnecting headers\")\n         # First we test that receipt of an unconnecting header doesn't prevent\n@@ -524,15 +540,15 @@ def test_nonnull_locators(self, test_node, inv_node):\n             test_node.wait_for_getheaders()\n             test_node.send_header_for_blocks(blocks)\n             test_node.wait_for_getdata([x.sha256 for x in blocks])\n-            [ test_node.send_message(msg_block(x)) for x in blocks ]\n+            [test_node.send_message(msg_block(x)) for x in blocks]\n             test_node.sync_with_ping()\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), blocks[1].sha256)\n \n         blocks = []\n         # Now we test that if we repeatedly don't send connecting headers, we\n         # don't go into an infinite loop trying to get them to connect.\n         MAX_UNCONNECTING_HEADERS = 10\n-        for j in range(MAX_UNCONNECTING_HEADERS+1):\n+        for j in range(MAX_UNCONNECTING_HEADERS + 1):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -554,11 +570,11 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         # Now try to see how many unconnecting headers we can send\n         # before we get disconnected.  Should be 5*MAX_UNCONNECTING_HEADERS\n-        for i in range(5*MAX_UNCONNECTING_HEADERS - 1):\n+        for i in range(5 * MAX_UNCONNECTING_HEADERS - 1):\n             # Send a header that doesn't connect, check that we get a getheaders.\n             with mininode_lock:\n                 test_node.last_message.pop(\"getheaders\", None)\n-            test_node.send_header_for_blocks([blocks[i%len(blocks)]])\n+            test_node.send_header_for_blocks([blocks[i % len(blocks)]])\n             test_node.wait_for_getheaders()\n \n         # Eventually this stops working."
      }
    ]
  },
  {
    "sha": "e89adbac9344d4c11162cc89928c62221ff8b237",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODlhZGJhYzkzNDRkNGMxMTE2MmNjODk5MjhjNjIyMjFmZjhiMjM3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-16T16:50:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-16T16:50:56Z"
      },
      "message": "Make default issue text all comments to make issues more readable",
      "tree": {
        "sha": "069a67710bf408e446f05ed51d1b0cb23b615c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/069a67710bf408e446f05ed51d1b0cb23b615c40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e89adbac9344d4c11162cc89928c62221ff8b237",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e89adbac9344d4c11162cc89928c62221ff8b237",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e89adbac9344d4c11162cc89928c62221ff8b237",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e89adbac9344d4c11162cc89928c62221ff8b237/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "55cebc008f5aa761847f4b701bc35abcc3956c48",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e89adbac9344d4c11162cc89928c62221ff8b237/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e89adbac9344d4c11162cc89928c62221ff8b237/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=e89adbac9344d4c11162cc89928c62221ff8b237",
        "patch": "@@ -1,23 +1,21 @@\n-<!--- Remove sections that do not apply -->\n+<!-- This issue tracker is only for technical issues related to Bitcoin Core.\n \n-This issue tracker is only for technical issues related to Bitcoin Core.\n+General bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\n \n-General bitcoin questions and/or support requests are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+For reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\n \n-For reporting security issues, please read instructions at [https://bitcoincore.org/en/contact/](https://bitcoincore.org/en/contact/).\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\n \n-If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue!\n+<!-- Describe the issue -->\n+<!--- What behavior did you expect? -->\n \n-### Describe the issue\n-#### What behavior did you expect?\n+<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\n \n-#### What was the actual behavior (provide screenshots if the issue is GUI-related)?\n+<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\n \n-#### How reliably can you reproduce the issue, what are the steps to do so?\n+<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\n \n-### What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)?\n+<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\n \n-### What type of machine are you observing the error on (OS/CPU and disk type)?\n-\n-### Any extra information that might be useful in the debugging process.\n-This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred.\n+<!-- Any extra information that might be useful in the debugging process. -->\n+<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->"
      }
    ]
  },
  {
    "sha": "f39d4bbd1e328cb04a6ddb133511385491a90d84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzlkNGJiZDFlMzI4Y2IwNGE2ZGRiMTMzNTExMzg1NDkxYTkwZDg0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T16:07:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T16:58:01Z"
      },
      "message": "[tests] tidy up BaseNode in sendheaders.py",
      "tree": {
        "sha": "dacb8c7114200277158ae1b68e092a7f5fe05ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dacb8c7114200277158ae1b68e092a7f5fe05ccb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f39d4bbd1e328cb04a6ddb133511385491a90d84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f39d4bbd1e328cb04a6ddb133511385491a90d84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f39d4bbd1e328cb04a6ddb133511385491a90d84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f39d4bbd1e328cb04a6ddb133511385491a90d84/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2613c545f529f7c91462c12831d41dcb164bd0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2613c545f529f7c91462c12831d41dcb164bd0e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2613c545f529f7c91462c12831d41dcb164bd0e2"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 51,
      "deletions": 53
    },
    "files": [
      {
        "sha": "5c8b70a707d349c6982ef0da3b3588067e0c32d0",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 51,
        "deletions": 53,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f39d4bbd1e328cb04a6ddb133511385491a90d84/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f39d4bbd1e328cb04a6ddb133511385491a90d84/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=f39d4bbd1e328cb04a6ddb133511385491a90d84",
        "patch": "@@ -114,20 +114,14 @@ def __init__(self):\n         self.block_announced = False\n         self.last_blockhash_announced = None\n \n-    def clear_last_announcement(self):\n-        with mininode_lock:\n-            self.block_announced = False\n-            self.last_message.pop(\"inv\", None)\n-            self.last_message.pop(\"headers\", None)\n-\n-    # Request data for a list of block hashes\n-    def get_data(self, block_hashes):\n+    def send_get_data(self, block_hashes):\n+        \"\"\"Request data for a list of block hashes.\"\"\"\n         msg = msg_getdata()\n         for x in block_hashes:\n             msg.inv.append(CInv(2, x))\n         self.connection.send_message(msg)\n \n-    def get_headers(self, locator, hashstop):\n+    def send_get_headers(self, locator, hashstop):\n         msg = msg_getheaders()\n         msg.locator.vHave = locator\n         msg.hashstop = hashstop\n@@ -138,6 +132,25 @@ def send_block_inv(self, blockhash):\n         msg.inv = [CInv(2, blockhash)]\n         self.connection.send_message(msg)\n \n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n+        self.send_message(headers_message)\n+\n+    def send_getblocks(self, locator):\n+        getblocks_message = msg_getblocks()\n+        getblocks_message.locator.vHave = locator\n+        self.send_message(getblocks_message)\n+\n+    def wait_for_getdata(self, hash_list, timeout=60):\n+        if hash_list != []:\n+            test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n+            wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_block_announcement(self, block_hash, timeout=60):\n+        test_function = lambda: self.last_blockhash_announced == block_hash\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n     def on_inv(self, conn, message):\n         self.block_announced = True\n         self.last_blockhash_announced = message.inv[-1].hash\n@@ -148,10 +161,16 @@ def on_headers(self, conn, message):\n             message.headers[-1].calc_sha256()\n             self.last_blockhash_announced = message.headers[-1].sha256\n \n-    # Test whether the last announcement we received had the\n-    # right header or the right inv\n-    # inv and headers should be lists of block hashes\n+    def clear_last_announcement(self):\n+        with mininode_lock:\n+            self.block_announced = False\n+            self.last_message.pop(\"inv\", None)\n+            self.last_message.pop(\"headers\", None)\n+\n     def check_last_announcement(self, headers=None, inv=None):\n+        \"\"\"Test whether the last announcement received had the right header or the right inv.\n+\n+        inv and headers should be lists of block hashes.\"\"\"\n         expect_headers = headers if headers is not None else []\n         expect_inv = inv if inv is not None else []\n         test_function = lambda: self.block_announced\n@@ -177,47 +196,26 @@ def check_last_announcement(self, headers=None, inv=None):\n             self.last_message.pop(\"headers\", None)\n         return success\n \n-    def wait_for_getdata(self, hash_list, timeout=60):\n-        if hash_list == []:\n-            return\n-\n-        test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-        return\n-\n-    def wait_for_block_announcement(self, block_hash, timeout=60):\n-        test_function = lambda: self.last_blockhash_announced == block_hash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-        return\n-\n-    def send_header_for_blocks(self, new_blocks):\n-        headers_message = msg_headers()\n-        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n-        self.send_message(headers_message)\n-\n-    def send_getblocks(self, locator):\n-        getblocks_message = msg_getblocks()\n-        getblocks_message.locator.vHave = locator\n-        self.send_message(getblocks_message)\n-\n class SendHeadersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    # mine count blocks and return the new tip\n     def mine_blocks(self, count):\n+        \"\"\"Mine count blocks and return the new tip.\"\"\"\n+\n         # Clear out last block announcement from each p2p listener\n         [x.clear_last_announcement() for x in self.nodes[0].p2ps]\n         self.nodes[0].generate(count)\n         return int(self.nodes[0].getbestblockhash(), 16)\n \n-    # mine a reorg that invalidates length blocks (replacing them with\n-    # length+1 blocks).\n-    # Note: we clear the state of our p2p connections after the\n-    # to-be-reorged-out blocks are mined, so that we don't break later tests.\n-    # return the list of block hashes newly mined\n     def mine_reorg(self, length):\n+        \"\"\"Mine a reorg that invalidates length blocks (replacing them with # length+1 blocks).\n+\n+        Note: we clear the state of our p2p connections after the\n+        to-be-reorged-out blocks are mined, so that we don't break later tests.\n+        return the list of block hashes newly mined.\"\"\"\n+\n         self.nodes[0].generate(length)  # make sure all invalidated blocks are node0's\n         sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n@@ -257,15 +255,15 @@ def test_null_locators(self, test_node):\n \n         self.log.info(\"Verify getheaders with null locator and valid hashstop returns headers.\")\n         test_node.clear_last_announcement()\n-        test_node.get_headers(locator=[], hashstop=tip_hash)\n+        test_node.send_get_headers(locator=[], hashstop=tip_hash)\n         assert_equal(test_node.check_last_announcement(headers=[tip_hash]), True)\n \n         self.log.info(\"Verify getheaders with null locator and invalid hashstop does not return headers.\")\n         block = create_block(int(tip[\"hash\"], 16), create_coinbase(tip[\"height\"] + 1), tip[\"mediantime\"] + 1)\n         block.solve()\n         test_node.send_header_for_blocks([block])\n         test_node.clear_last_announcement()\n-        test_node.get_headers(locator=[], hashstop=int(block.hash, 16))\n+        test_node.send_get_headers(locator=[], hashstop=int(block.hash, 16))\n         test_node.sync_with_ping()\n         assert_equal(test_node.block_announced, False)\n         test_node.send_message(msg_block(block))\n@@ -284,12 +282,12 @@ def test_nonnull_locators(self, test_node, inv_node):\n             # Try a few different responses; none should affect next announcement\n             if i == 0:\n                 # first request the block\n-                test_node.get_data([tip])\n+                test_node.send_get_data([tip])\n                 test_node.wait_for_block(tip)\n             elif i == 1:\n                 # next try requesting header and block\n-                test_node.get_headers(locator=[old_tip], hashstop=tip)\n-                test_node.get_data([tip])\n+                test_node.send_get_headers(locator=[old_tip], hashstop=tip)\n+                test_node.send_get_data([tip])\n                 test_node.wait_for_block(tip)\n                 test_node.clear_last_announcement()  # since we requested headers...\n             elif i == 2:\n@@ -313,7 +311,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # commence and keep working.\n         test_node.send_message(msg_sendheaders())\n         prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n-        test_node.get_headers(locator=[prev_tip], hashstop=0)\n+        test_node.send_get_headers(locator=[prev_tip], hashstop=0)\n         test_node.sync_with_ping()\n \n         # Now that we've synced headers, headers announcements should work\n@@ -397,7 +395,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             # Use getblocks/getdata\n             test_node.send_getblocks(locator=[fork_point])\n             assert_equal(test_node.check_last_announcement(inv=new_block_hashes), True)\n-            test_node.get_data(new_block_hashes)\n+            test_node.send_get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n \n             for i in range(3):\n@@ -407,22 +405,22 @@ def test_nonnull_locators(self, test_node, inv_node):\n                 assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n                 if i == 0:\n                     # Just get the data -- shouldn't cause headers announcements to resume\n-                    test_node.get_data([tip])\n+                    test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                 elif i == 1:\n                     # Send a getheaders message that shouldn't trigger headers announcements\n                     # to resume (best header sent will be too old)\n-                    test_node.get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n-                    test_node.get_data([tip])\n+                    test_node.send_get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n+                    test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                 elif i == 2:\n-                    test_node.get_data([tip])\n+                    test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                     # This time, try sending either a getheaders to trigger resumption\n                     # of headers announcements, or mine a new block and inv it, also\n                     # triggering resumption of headers announcements.\n                     if j == 0:\n-                        test_node.get_headers(locator=[tip], hashstop=0)\n+                        test_node.send_get_headers(locator=[tip], hashstop=0)\n                         test_node.sync_with_ping()\n                     else:\n                         test_node.send_block_inv(tip)"
      }
    ]
  },
  {
    "sha": "25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWZkNmUyYzIwMmMxMTNhMjQxM2JhOWRmNzZmZTBlYTBlNGNiZTVj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T16:52:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T17:05:27Z"
      },
      "message": "[tests] refactor check_last_announcement() in sendheaders.py\n\nAll calls of check_last_announcement() asserted that the return\nvalue was True. Just assert inside the function instead. This\ngives better debug information if the assert fails.\n\nAlso only check the contents of the most recent inv and header if\ncheck_last_announcement() is called with the relevant argument.",
      "tree": {
        "sha": "d6fc572fef926c3bdfa74365ebf4bd0c9e92da49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6fc572fef926c3bdfa74365ebf4bd0c9e92da49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f39d4bbd1e328cb04a6ddb133511385491a90d84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f39d4bbd1e328cb04a6ddb133511385491a90d84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f39d4bbd1e328cb04a6ddb133511385491a90d84"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 24,
      "deletions": 27
    },
    "files": [
      {
        "sha": "1a585dd111f0d7caaf0fb5f3afb124c71c8ca191",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 24,
        "deletions": 27,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
        "patch": "@@ -171,30 +171,27 @@ def check_last_announcement(self, headers=None, inv=None):\n         \"\"\"Test whether the last announcement received had the right header or the right inv.\n \n         inv and headers should be lists of block hashes.\"\"\"\n-        expect_headers = headers if headers is not None else []\n-        expect_inv = inv if inv is not None else []\n+\n         test_function = lambda: self.block_announced\n         wait_until(test_function, timeout=60, lock=mininode_lock)\n+\n         with mininode_lock:\n             self.block_announced = False\n \n-            success = True\n             compare_inv = []\n             if \"inv\" in self.last_message:\n                 compare_inv = [x.hash for x in self.last_message[\"inv\"].inv]\n-            if compare_inv != expect_inv:\n-                success = False\n+            if inv is not None:\n+                assert_equal(compare_inv, inv)\n \n-            hash_headers = []\n+            compare_headers = []\n             if \"headers\" in self.last_message:\n-                # treat headers as a list of block hashes\n-                hash_headers = [x.sha256 for x in self.last_message[\"headers\"].headers]\n-            if hash_headers != expect_headers:\n-                success = False\n+                compare_headers = [x.sha256 for x in self.last_message[\"headers\"].headers]\n+            if headers is not None:\n+                assert_equal(compare_headers, headers)\n \n             self.last_message.pop(\"inv\", None)\n             self.last_message.pop(\"headers\", None)\n-        return success\n \n class SendHeadersTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -256,7 +253,7 @@ def test_null_locators(self, test_node):\n         self.log.info(\"Verify getheaders with null locator and valid hashstop returns headers.\")\n         test_node.clear_last_announcement()\n         test_node.send_get_headers(locator=[], hashstop=tip_hash)\n-        assert_equal(test_node.check_last_announcement(headers=[tip_hash]), True)\n+        test_node.check_last_announcement(headers=[tip_hash])\n \n         self.log.info(\"Verify getheaders with null locator and invalid hashstop does not return headers.\")\n         block = create_block(int(tip[\"hash\"], 16), create_coinbase(tip[\"height\"] + 1), tip[\"mediantime\"] + 1)\n@@ -277,8 +274,8 @@ def test_nonnull_locators(self, test_node, inv_node):\n         for i in range(4):\n             old_tip = tip\n             tip = self.mine_blocks(1)\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(inv=[tip], headers=[])\n             # Try a few different responses; none should affect next announcement\n             if i == 0:\n                 # first request the block\n@@ -316,8 +313,8 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         # Now that we've synced headers, headers announcements should work\n         tip = self.mine_blocks(1)\n-        assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-        assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+        inv_node.check_last_announcement(inv=[tip], headers=[])\n+        test_node.check_last_announcement(headers=[tip])\n \n         height = self.nodes[0].getblockcount() + 1\n         block_time += 10  # Advance far enough ahead\n@@ -361,8 +358,8 @@ def test_nonnull_locators(self, test_node, inv_node):\n                 assert \"inv\" not in inv_node.last_message\n                 assert \"headers\" not in inv_node.last_message\n                 tip = self.mine_blocks(1)\n-                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-                assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+                inv_node.check_last_announcement(inv=[tip], headers=[])\n+                test_node.check_last_announcement(headers=[tip])\n                 height += 1\n                 block_time += 1\n \n@@ -376,16 +373,16 @@ def test_nonnull_locators(self, test_node, inv_node):\n             # First try mining a reorg that can propagate with header announcement\n             new_block_hashes = self.mine_reorg(length=7)\n             tip = new_block_hashes[-1]\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(headers=new_block_hashes), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(headers=new_block_hashes)\n \n             block_time += 8\n \n             # Mine a too-large reorg, which should be announced with a single inv\n             new_block_hashes = self.mine_reorg(length=8)\n             tip = new_block_hashes[-1]\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(inv=[tip], headers=[])\n \n             block_time += 9\n \n@@ -394,15 +391,15 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n             # Use getblocks/getdata\n             test_node.send_getblocks(locator=[fork_point])\n-            assert_equal(test_node.check_last_announcement(inv=new_block_hashes), True)\n+            test_node.check_last_announcement(inv=new_block_hashes, headers=[])\n             test_node.send_get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n \n             for i in range(3):\n                 # Mine another block, still should get only an inv\n                 tip = self.mine_blocks(1)\n-                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-                assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+                inv_node.check_last_announcement(inv=[tip], headers=[])\n+                test_node.check_last_announcement(inv=[tip], headers=[])\n                 if i == 0:\n                     # Just get the data -- shouldn't cause headers announcements to resume\n                     test_node.send_get_data([tip])\n@@ -427,8 +424,8 @@ def test_nonnull_locators(self, test_node, inv_node):\n                         test_node.sync_with_ping()\n             # New blocks should now be announced with header\n             tip = self.mine_blocks(1)\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(headers=[tip])\n \n         self.log.info(\"Part 3: success!\")\n "
      }
    ]
  },
  {
    "sha": "f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGM0YWI5YTcwMzRhY2E2YmU4M2ZjYjZjZDg0NzljZDE5YTE5NmEy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T16:52:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-16T18:45:46Z"
      },
      "message": "[tests] fix flakiness in sendheaders.py\n\nFixes to sources of intermittent failure in sendheaders.py\n\n- at the start of test_null_locators(), a new block is generated and\nthen a getheaders is sent. check_last_accouncement() is called to assert\nthat the headers message is received. However, the new block triggers an\ninv to be sent over both P2P connections, so there's a race. If the inv\nis received at the wrong time, the test fails.\n\n- test_null_locators() ends by sending a block to the node under test.\nAt the start of test_nonnull_locators(), a block is mined and\ncheck_last_announcement() is called to assert that the inv received is\nfor the same block. That means there's a race: if the inv from the block\nsent in test_null_locators() is received at the wrong time, the test\nfails.",
      "tree": {
        "sha": "9094a4b07d53ccb34a14475ea43f5617af96fef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9094a4b07d53ccb34a14475ea43f5617af96fef4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25fd6e2c202c113a2413ba9df76fe0ea0e4cbe5c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "056471370b3ba5f6f2c3ca2a0fcb1374471b41b9",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
        "patch": "@@ -243,13 +243,16 @@ def run_test(self):\n         inv_node.sync_with_ping()\n         test_node.sync_with_ping()\n \n-        self.test_null_locators(test_node)\n+        self.test_null_locators(test_node, inv_node)\n         self.test_nonnull_locators(test_node, inv_node)\n \n-    def test_null_locators(self, test_node):\n+    def test_null_locators(self, test_node, inv_node):\n         tip = self.nodes[0].getblockheader(self.nodes[0].generate(1)[0])\n         tip_hash = int(tip[\"hash\"], 16)\n \n+        inv_node.check_last_announcement(inv=[tip_hash], headers=[])\n+        test_node.check_last_announcement(inv=[tip_hash], headers=[])\n+\n         self.log.info(\"Verify getheaders with null locator and valid hashstop returns headers.\")\n         test_node.clear_last_announcement()\n         test_node.send_get_headers(locator=[], hashstop=tip_hash)\n@@ -263,7 +266,10 @@ def test_null_locators(self, test_node):\n         test_node.send_get_headers(locator=[], hashstop=int(block.hash, 16))\n         test_node.sync_with_ping()\n         assert_equal(test_node.block_announced, False)\n+        inv_node.clear_last_announcement()\n         test_node.send_message(msg_block(block))\n+        inv_node.check_last_announcement(inv=[int(block.hash, 16)], headers=[])\n+        inv_node.clear_last_announcement()\n \n     def test_nonnull_locators(self, test_node, inv_node):\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      }
    ]
  },
  {
    "sha": "af9103eb75182f51a987e7c35fa3eae61c58d010",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjkxMDNlYjc1MTgyZjUxYTk4N2U3YzM1ZmEzZWFlNjFjNThkMDEw",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-16T04:26:02Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-16T19:49:19Z"
      },
      "message": "[build] Add a script for installing db4\n\nInstead of maintaining not-easily-tested instructions for building BerkeleyDB\nin doc/build-unix.md, package the installation as a script in contrib/. This\nallows shared usage from a number of contexts, e.g. Docker.\n\nThanks to @jonasschnelli, @laanwj for feedback.",
      "tree": {
        "sha": "40fb61193f97221548bcff4de0121772583aa614",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40fb61193f97221548bcff4de0121772583aa614"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af9103eb75182f51a987e7c35fa3eae61c58d010",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9103eb75182f51a987e7c35fa3eae61c58d010",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af9103eb75182f51a987e7c35fa3eae61c58d010",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9103eb75182f51a987e7c35fa3eae61c58d010/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54aedc013744c86b11157423fa3cffc9a51eef02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aedc013744c86b11157423fa3cffc9a51eef02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54aedc013744c86b11157423fa3cffc9a51eef02"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 103,
      "deletions": 43
    },
    "files": [
      {
        "sha": "9b791cc0e80ce29c64bc11d21fb32a89c337488d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9103eb75182f51a987e7c35fa3eae61c58d010/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9103eb75182f51a987e7c35fa3eae61c58d010/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=af9103eb75182f51a987e7c35fa3eae61c58d010",
        "patch": "@@ -42,6 +42,7 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoin-tx.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n \t       $(top_srcdir)/contrib/init \\\n+\t       $(top_srcdir)/contrib/install_db4.sh \\\n \t       $(top_srcdir)/contrib/rpm\n DIST_SHARE = \\\n   $(top_srcdir)/share/genbuild.sh \\"
      },
      {
        "sha": "1d33e8d3baf181dcfbe6b0f393eee5bf3d8bb3d8",
        "filename": "contrib/install_db4.sh",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9103eb75182f51a987e7c35fa3eae61c58d010/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9103eb75182f51a987e7c35fa3eae61c58d010/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=af9103eb75182f51a987e7c35fa3eae61c58d010",
        "patch": "@@ -0,0 +1,87 @@\n+#!/bin/sh\n+\n+# Install libdb4.8 (Berkeley DB).\n+\n+set -e\n+\n+if [ -z \"${1}\" ]; then\n+  echo \"Usage: ./install_db4.sh <base-dir> [<extra-bdb-configure-flag> ...]\"\n+  echo\n+  echo \"Must specify a single argument: the directory in which db5 will be built.\"\n+  echo \"This is probably \\`pwd\\` if you're at the root of the bitcoin repository.\"\n+  exit 1\n+fi\n+\n+expand_path() {\n+  echo \"$(cd \"${1}\" && pwd -P)\"\n+}\n+\n+BDB_PREFIX=\"$(expand_path ${1})/db4\"; shift;\n+BDB_EXTRA_CONFIGURE_FLAGS=\"${@}\"\n+BDB_VERSION='db-4.8.30.NC'\n+BDB_HASH='12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef'\n+BDB_URL=\"https://download.oracle.com/berkeley-db/${BDB_VERSION}.tar.gz\"\n+\n+check_exists() {\n+  which \"$1\" >/dev/null 2>&1\n+}\n+\n+sha256_check() {\n+  # Args: <sha256_hash> <filename>\n+  #\n+  if check_exists sha256sum; then\n+    echo \"${1}  ${2}\" | sha256sum -c\n+  elif check_exists sha256; then\n+    echo \"${1}  ${2}\" | sha256 -c\n+  else\n+    echo \"${1}  ${2}\" | shasum -a 256 -c\n+  fi\n+}\n+\n+http_get() {\n+  # Args: <url> <filename> <sha256_hash>\n+  #\n+  # It's acceptable that we don't require SSL here because we manually verify\n+  # content hashes below.\n+  #\n+  if [ -f \"${2}\" ]; then\n+    echo \"File ${2} already exists; not downloading again\"\n+  elif check_exists curl; then\n+    curl --insecure \"${1}\" -o \"${2}\"\n+  else\n+    wget --no-check-certificate \"${1}\" -O \"${2}\"\n+  fi\n+\n+  sha256_check \"${3}\" \"${2}\"\n+}\n+\n+mkdir -p \"${BDB_PREFIX}\"\n+http_get \"${BDB_URL}\" \"${BDB_VERSION}.tar.gz\" \"${BDB_HASH}\"\n+tar -xzvf ${BDB_VERSION}.tar.gz -C \"$BDB_PREFIX\"\n+cd \"${BDB_PREFIX}/${BDB_VERSION}/\"\n+\n+# Apply a patch when building on OS X to make the build work with Xcode.\n+#\n+if [ \"$(uname)\" = \"Darwin\" ]; then\n+  BDB_OSX_ATOMIC_PATCH_URL='https://raw.githubusercontent.com/narkoleptik/os-x-berkeleydb-patch/0007e2846ae3fc9757849f5277018f4179ad17ef/atomic.patch'\n+  BDB_OSX_ATOMIC_PATCH_HASH='ba0e2b4f53e9cb0ec58f60a979b53b8567b4565f0384886196f1fc1ef111d151'\n+\n+  http_get \"${BDB_OSX_ATOMIC_PATCH_URL}\" atomic.patch \"${BDB_OSX_ATOMIC_PATCH_HASH}\"\n+  patch -p1 < atomic.patch\n+fi\n+\n+cd build_unix/\n+\n+\"${BDB_PREFIX}/${BDB_VERSION}/dist/configure\" \\\n+  --enable-cxx --disable-shared --with-pic --prefix=\"${BDB_PREFIX}\" \\\n+  \"${BDB_EXTRA_CONFIGURE_FLAGS}\"\n+\n+make install\n+\n+echo\n+echo \"db4 build complete.\"\n+echo\n+echo 'When compiling bitcoind, run `./configure` in the following way:'\n+echo\n+echo \"  export BDB_PREFIX='${BDB_PREFIX}'\"\n+echo '  ./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" ...'"
      },
      {
        "sha": "cd1d217b47a79148c571826eb74ac26296d796b2",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 8,
        "deletions": 19,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9103eb75182f51a987e7c35fa3eae61c58d010/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9103eb75182f51a987e7c35fa3eae61c58d010/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=af9103eb75182f51a987e7c35fa3eae61c58d010",
        "patch": "@@ -38,28 +38,17 @@ The default C++ compiler that comes with OpenBSD 6.2 is g++ 4.2.1. This version\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n \n-See \"Berkeley DB\" in [build-unix.md](build-unix.md#berkeley-db) for instructions on how to build BerkeleyDB 4.8.\n-You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n+from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+If you have to build it yourself, you can use [the installation script included\n+in contrib/](contrib/install_db4.sh) like so\n \n-```bash\n-# Pick some path to install BDB to, here we create a directory within the bitcoin directory\n-BITCOIN_ROOT=$(pwd)\n-BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n-mkdir -p $BDB_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-curl -o db-4.8.30.NC.tar.gz 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n-echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256 -c\n-# MUST output: (SHA256) db-4.8.30.NC.tar.gz: OK\n-tar -xzf db-4.8.30.NC.tar.gz\n-\n-# Build the library and install to specified prefix\n-cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n-make install # do NOT use -jX, this is broken\n+```shell\n+./contrib/install_db4.sh `pwd` CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n+from the root of the repository.\n+\n ### Resource limits\n \n The standard ulimit restrictions in OpenBSD are very strict:"
      },
      {
        "sha": "5d3329e2cfe89395546f65edd267acd1c7431a83",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 7,
        "deletions": 24,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9103eb75182f51a987e7c35fa3eae61c58d010/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9103eb75182f51a987e7c35fa3eae61c58d010/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=af9103eb75182f51a987e7c35fa3eae61c58d010",
        "patch": "@@ -165,33 +165,16 @@ turned off by default.  See the configure options for upnp behavior desired:\n \n Berkeley DB\n -----------\n-It is recommended to use Berkeley DB 4.8. If you have to build it yourself:\n+It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n+you can use [the installation script included in contrib/](contrib/install_db4.sh)\n+like so\n \n-```bash\n-BITCOIN_ROOT=$(pwd)\n-\n-# Pick some path to install BDB to, here we create a directory within the bitcoin directory\n-BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n-mkdir -p $BDB_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n-echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256sum -c\n-# -> db-4.8.30.NC.tar.gz: OK\n-tar -xzvf db-4.8.30.NC.tar.gz\n-\n-# Build the library and install to our prefix\n-cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n-make install\n-\n-# Configure Bitcoin Core to use our own-built instance of BDB\n-cd $BITCOIN_ROOT\n-./autogen.sh\n-./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" # (other args...)\n+```shell\n+./contrib/install_db4.sh `pwd`\n ```\n \n+from the root of the repository.\n+\n **Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n \n Boost"
      }
    ]
  },
  {
    "sha": "6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTRjZGQ2N2IxZjJiMzkyN2E1MjVlYmJhODQzYzI3ZWYzYzYzZTFj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-16T07:36:08Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-16T19:49:34Z"
      },
      "message": "[docs] Add reference to install_db4.sh in OS X build instructions",
      "tree": {
        "sha": "63b0c5c4b76eb0d3a426f214e8092dacdc125f91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b0c5c4b76eb0d3a426f214e8092dacdc125f91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af9103eb75182f51a987e7c35fa3eae61c58d010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9103eb75182f51a987e7c35fa3eae61c58d010",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af9103eb75182f51a987e7c35fa3eae61c58d010"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f08562ff8f5f5ef694c043567ec60cf41e849b9",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
        "patch": "@@ -26,6 +26,20 @@ If you want to build the disk image with `make deploy` (.dmg / optional), you ne\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.\n \n+Berkeley DB\n+-----------\n+It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n+you can use [the installation script included in contrib/](contrib/install_db4.sh)\n+like so\n+\n+```shell\n+./contrib/install_db4.sh .\n+```\n+\n+from the root of the repository.\n+\n+**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n+\n Build Bitcoin Core\n ------------------------\n "
      }
    ]
  },
  {
    "sha": "a720b928c80f18d340173f39f63e7ef9cfb367c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzIwYjkyOGM4MGYxOGQzNDAxNzNmMzlmNjNlN2VmOWNmYjM2N2Mx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-16T21:26:34Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-16T21:26:34Z"
      },
      "message": "Remove includes in .cpp files for things the corresponding .h file already included",
      "tree": {
        "sha": "05b9a3a0f1822ca807e3bdcf0dcd4aefdb46268c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05b9a3a0f1822ca807e3bdcf0dcd4aefdb46268c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a720b928c80f18d340173f39f63e7ef9cfb367c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a720b928c80f18d340173f39f63e7ef9cfb367c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a720b928c80f18d340173f39f63e7ef9cfb367c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a720b928c80f18d340173f39f63e7ef9cfb367c1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 0,
      "deletions": 76
    },
    "files": [
      {
        "sha": "7d7f34863dae1b1babaf8fc8706c726ccfe7231f",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,7 +8,6 @@\n #include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n-#include <fs.h>\n #include <hash.h>\n #include <random.h>\n #include <streams.h>"
      },
      {
        "sha": "929d86458854d77ba5f2f91af8f364c27ac09dd4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,7 +8,6 @@\n #include <chainparams.h>\n #include <reverse_iterator.h>\n #include <validation.h>\n-#include <uint256.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "1934e71bbcf9e9de2dc56d1efd56dd2345fff7d2",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <tinyformat.h>\n \n-#include <string>\n \n /**\n  * Name of client reported in the 'version' message. Report the same name"
      },
      {
        "sha": "afaf5ccc133be5bd9c5b6bb51f96cb396a5cf9dc",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -5,11 +5,8 @@\n #include <coins.h>\n \n #include <consensus/consensus.h>\n-#include <memusage.h>\n #include <random.h>\n \n-#include <assert.h>\n-\n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }"
      },
      {
        "sha": "d2d46099f3b302ec767480427158c630f8567460",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -4,8 +4,6 @@\n \n #include <dbwrapper.h>\n \n-#include <fs.h>\n-#include <util.h>\n #include <random.h>\n \n #include <leveldb/cache.h>"
      },
      {
        "sha": "9d4c4498d891b3de6aab0c34d83633f0abb61761",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -7,7 +7,6 @@\n #include <arith_uint256.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n-#include <pubkey.h>\n #include <random.h>\n \n #include <secp256k1.h>"
      },
      {
        "sha": "4ab089e03275971be9250d36c80e1345afafc46e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -5,8 +5,6 @@\n \n #include <keystore.h>\n \n-#include <key.h>\n-#include <pubkey.h>\n #include <util.h>\n \n bool CKeyStore::AddKey(const CKey &key) {"
      },
      {
        "sha": "0fb9b774d39aeb539ab53839cbe2394148601ef6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -22,7 +22,6 @@\n #include <primitives/transaction.h>\n #include <script/standard.h>\n #include <timedata.h>\n-#include <txmempool.h>\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "cec88783a886f14857ec4aef1cc95ebfd05b9779",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -9,13 +9,11 @@\n \n #include <net.h>\n \n-#include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n #include <consensus/consensus.h>\n #include <crypto/common.h>\n #include <crypto/sha256.h>\n-#include <hash.h>\n #include <primitives/transaction.h>\n #include <netbase.h>\n #include <scheduler.h>"
      },
      {
        "sha": "d30d730629b1952e14671b9ed058ebb611275b0a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -14,7 +14,6 @@\n #include <init.h>\n #include <validation.h>\n #include <merkleblock.h>\n-#include <net.h>\n #include <netmessagemaker.h>\n #include <netbase.h>\n #include <policy/fees.h>\n@@ -30,7 +29,6 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <utilstrencodings.h>\n-#include <validationinterface.h>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\""
      },
      {
        "sha": "fa1c191559fe51232ad87274b43100eff65bf63b",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -3,10 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifdef HAVE_CONFIG_H\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <netaddress.h>\n #include <hash.h>\n #include <utilstrencodings.h>"
      },
      {
        "sha": "da3729b286cb349fdfa44aaa323ec52f4b8902f0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -3,10 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifdef HAVE_CONFIG_H\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <netbase.h>\n \n #include <hash.h>"
      },
      {
        "sha": "dc88c4f91ada59dbacefcf16c13a33619b91e0ac",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -6,10 +6,8 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n \n-#include <amount.h>\n #include <clientversion.h>\n #include <primitives/transaction.h>\n-#include <random.h>\n #include <streams.h>\n #include <txmempool.h>\n #include <util.h>"
      },
      {
        "sha": "f925ec53599db541053e23b69d2d6978a800a072",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -2,10 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <qt/bitcoingui.h>\n \n #include <qt/bitcoinunits.h>"
      },
      {
        "sha": "49f4e74a9f93b83b829573b876f93cef007d1c6c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -28,9 +28,7 @@\n #include <QFlags>\n #include <QIcon>\n #include <QSettings>\n-#include <QString>\n #include <QTreeWidget>\n-#include <QTreeWidgetItem>\n \n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();"
      },
      {
        "sha": "eb5d3304af90826c39316cba27932fd32b6ba3a4",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -9,7 +9,6 @@\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n \n-#include <fs.h>\n #include <primitives/transaction.h>\n #include <init.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "f4383bf679955a80c6ec2aa52bdbf73aa0fffa83",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <QApplication>\n #include <QByteArray>\n-#include <QIcon>\n #include <QImageWriter>\n #include <QMessageBox>\n #include <QMetaType>"
      },
      {
        "sha": "caf514d8dc032df4c81416a6a0dd8f025f41c815",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -11,7 +11,6 @@\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n \n-#include <amount.h>\n #include <init.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n #include <net.h>"
      },
      {
        "sha": "0e1bd59adaa49f99c580ac4e1b6036747f6190c5",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,10 +8,8 @@\n \n #include <QApplication>\n #include <QColor>\n-#include <QIcon>\n #include <QImage>\n #include <QPalette>\n-#include <QPixmap>\n \n static const struct {\n     const char *platformId;"
      },
      {
        "sha": "e9dcbc0a7210b508562054c66998b4d87ee5d9b6",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,7 +8,6 @@\n #include <qt/addressbookpage.h>\n #include <qt/addresstablemodel.h>\n #include <qt/bitcoinunits.h>\n-#include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/receiverequestdialog.h>\n@@ -17,7 +16,6 @@\n \n #include <QAction>\n #include <QCursor>\n-#include <QItemSelection>\n #include <QMessageBox>\n #include <QScrollBar>\n #include <QTextDocument>"
      },
      {
        "sha": "d30e9b2dca8b8657089385818947b132d78338c3",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -9,7 +9,6 @@\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n-#include <qt/walletmodel.h>\n \n #include <QClipboard>\n #include <QDrag>"
      },
      {
        "sha": "3bb85730dab79066fc967a84376069c039aa6b2a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -11,7 +11,6 @@\n \n #include <qt/bantablemodel.h>\n #include <qt/clientmodel.h>\n-#include <qt/guiutil.h>\n #include <qt/platformstyle.h>\n #include <chainparams.h>\n #include <netbase.h>\n@@ -35,7 +34,6 @@\n #include <QScrollBar>\n #include <QSettings>\n #include <QSignalMapper>\n-#include <QThread>\n #include <QTime>\n #include <QTimer>\n #include <QStringList>"
      },
      {
        "sha": "152860568152055fd80520c1532e31cf982acfc7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -13,7 +13,6 @@\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsentry.h>\n-#include <qt/walletmodel.h>\n \n #include <base58.h>\n #include <chainparams.h>\n@@ -25,11 +24,9 @@\n #include <wallet/fees.h>\n \n #include <QFontMetrics>\n-#include <QMessageBox>\n #include <QScrollBar>\n #include <QSettings>\n #include <QTextDocument>\n-#include <QTimer>\n \n static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };\n int getConfTargetForIndex(int index) {"
      },
      {
        "sha": "4cf4bb9ef7a0690abafcccc7bcf22e8d8781203f",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -10,7 +10,6 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n-#include <qt/walletmodel.h>\n \n #include <QApplication>\n #include <QClipboard>"
      },
      {
        "sha": "bc4504a93b94b4f6f8572add349acbcc93d25532",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -9,8 +9,6 @@\n \n #include <cstdlib>\n \n-#include <QDateTime>\n-\n // Earliest date that can be represented (far in the past)\n const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);\n // Last date that can be represented (far in the future)"
      },
      {
        "sha": "8fb55a93dfc799f23ea9edfd8c5c7d085b175ba1",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,7 +8,6 @@\n #include <qt/bitcoinunits.h>\n #include <qt/csvmodelwriter.h>\n #include <qt/editaddressdialog.h>\n-#include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsdialog.h>"
      },
      {
        "sha": "f2fa114313585a7ed54458ba231321ff64e6af81",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -10,8 +10,6 @@\n #include <set>\n #include <stdint.h>\n \n-#include <univalue.h>\n-\n class CRPCConvertParam\n {\n public:"
      },
      {
        "sha": "d003be4954b8a214235c5fabc65ba590d616c281",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -29,8 +29,6 @@\n #include <memory>\n #include <stdint.h>\n \n-#include <univalue.h>\n-\n unsigned int ParseConfirmTarget(const UniValue& value)\n {\n     int target = value.get_int();"
      },
      {
        "sha": "d999a08d74b5a90191e4184c9cbb4cb334149f19",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -12,7 +12,6 @@\n #include <utiltime.h>\n #include <version.h>\n \n-#include <stdint.h>\n #include <fstream>\n \n /**"
      },
      {
        "sha": "239d4b4cfe18194cce053503d21bcbf12f9be431",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -14,8 +14,6 @@\n #include <util.h>\n #include <utilstrencodings.h>\n \n-#include <univalue.h>\n-\n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_upper()"
      },
      {
        "sha": "c9a00d13c279c6e446007118834f2a05ce0c1875",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <script/interpreter.h>\n \n-#include <primitives/transaction.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>"
      },
      {
        "sha": "5849f55651b3d6367b4edf46ecd10e8d5098c624",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,7 +8,6 @@\n #include <key.h>\n #include <keystore.h>\n #include <script/script.h>\n-#include <script/standard.h>\n #include <script/sign.h>\n \n "
      },
      {
        "sha": "f52c8ccc21b54c42afb7530bc41362a820037239",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -8,15 +8,9 @@\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n-#include <fs.h>\n-#include <key.h>\n #include <validation.h>\n #include <miner.h>\n #include <net_processing.h>\n-#include <pubkey.h>\n-#include <random.h>\n-#include <txdb.h>\n-#include <txmempool.h>\n #include <ui_interface.h>\n #include <streams.h>\n #include <rpc/server.h>"
      },
      {
        "sha": "4141ffeb14fd3671fcdf25a9f3c983d72d230de6",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -3,18 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <util.h>\n \n #include <chainparamsbase.h>\n-#include <fs.h>\n #include <random.h>\n #include <serialize.h>\n #include <utilstrencodings.h>\n-#include <utiltime.h>\n \n #include <stdarg.h>\n "
      },
      {
        "sha": "50fdb6e6b9ddd15f26681a02dc57c7b9f5234b0b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -15,7 +15,6 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n-#include <fs.h>\n #include <hash.h>\n #include <init.h>\n #include <policy/fees.h>\n@@ -39,10 +38,8 @@\n #include <utilmoneystr.h>\n #include <utilstrencodings.h>\n #include <validationinterface.h>\n-#include <versionbits.h>\n #include <warnings.h>\n \n-#include <atomic>\n #include <sstream>\n \n #include <boost/algorithm/string/replace.hpp>"
      },
      {
        "sha": "47b9517df2fbe34655e7915abd2afc3cfec7aec6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -6,7 +6,6 @@\n #include <wallet/db.h>\n \n #include <addrman.h>\n-#include <fs.h>\n #include <hash.h>\n #include <protocol.h>\n #include <util.h>"
      },
      {
        "sha": "1a031a262484925c0ffc7ae2622231a541fcf363",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720b928c80f18d340173f39f63e7ef9cfb367c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "patch": "@@ -23,12 +23,10 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n-#include <script/sign.h>\n #include <scheduler.h>\n #include <timedata.h>\n #include <txmempool.h>\n #include <util.h>\n-#include <ui_interface.h>\n #include <utilmoneystr.h>\n #include <wallet/fees.h>\n "
      }
    ]
  },
  {
    "sha": "41221126c85524a6dec34a4f44cb5b74b1f12e64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTIyMTEyNmM4NTUyNGE2ZGVjMzRhNGY0NGNiNWI3NGIxZjEyZTY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T11:44:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T11:45:00Z"
      },
      "message": "Merge #11702: [build] Add a script for installing db4\n\n6e4cdd6 [docs] Add reference to install_db4.sh in OS X build instructions (James O'Beirne)\naf9103e [build] Add a script for installing db4 (James O'Beirne)\n\nPull request description:\n\n  Instead of maintaining rote instructions for building BerkeleyDB in `doc/build-{unix,openbsd}.md`, reference a script that does the same thing and can be called from unanticipated contexts, e.g. Docker builds.\n\n  The script was written with portability in mind, though I haven't tested it on openbsd.\n\n  I wasn't sure if we wanted to create a separate directory for this sort of thing (e.g. `contrib/install`) so I just stuck it in `contrib/`; happy to move it around if anyone has another preference.\n\nTree-SHA512: d2fc83c065d083458c448e6041e5e9ef67f8165974925560a83881d22d1e9448ea3dd4f7a38196800a8cd6dcf206208a2d6d12417bfe094902d4754e4ca67f18",
      "tree": {
        "sha": "5e5c17c074ffab4f34bdc25383afedd659a15866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e5c17c074ffab4f34bdc25383afedd659a15866"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41221126c85524a6dec34a4f44cb5b74b1f12e64",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDsu8AAoJEB5K7WKYbNJd9c0IAMgnbEkzcyvEZSZB0pqcYW5O\nvfRRFDpSuA+7VxVUNk/9CTmqzOOEm69ee/6Jg+vLPV2qGObB6yrRpffAcc9FhfM8\nXV0L81y9T81IZC33WderJYPB+M7ND30pLYlvrvloVlh/Upg9NVMF7zAoY/FeNrzZ\nyOZ2jUM38oZMVBk3zLLx75LqCqDSnEcHwI2nxdqDrNSosBgba++GzGZVk+BWhdET\n1GN5IiBJ1W+/OSX/AlqhnSraqXee/HzuoskD2oBB2RUZ7sC9IdZq0OrSPWPX2kYZ\nuJBziBP+Lb7jDdWbZvtyeudC9ZzJNa48EUb7uoEou83Jcv6TKZIF8JLHP8YQfTk=\n=Gdky\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e5c17c074ffab4f34bdc25383afedd659a15866\nparent 99bc0b428b03b571afbc311b7f18fd3a707ac5af\nparent 6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510919095 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510919100 +0100\n\nMerge #11702: [build] Add a script for installing db4\n\n6e4cdd6 [docs] Add reference to install_db4.sh in OS X build instructions (James O'Beirne)\naf9103e [build] Add a script for installing db4 (James O'Beirne)\n\nPull request description:\n\n  Instead of maintaining rote instructions for building BerkeleyDB in `doc/build-{unix,openbsd}.md`, reference a script that does the same thing and can be called from unanticipated contexts, e.g. Docker builds.\n\n  The script was written with portability in mind, though I haven't tested it on openbsd.\n\n  I wasn't sure if we wanted to create a separate directory for this sort of thing (e.g. `contrib/install`) so I just stuck it in `contrib/`; happy to move it around if anyone has another preference.\n\nTree-SHA512: d2fc83c065d083458c448e6041e5e9ef67f8165974925560a83881d22d1e9448ea3dd4f7a38196800a8cd6dcf206208a2d6d12417bfe094902d4754e4ca67f18\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41221126c85524a6dec34a4f44cb5b74b1f12e64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41221126c85524a6dec34a4f44cb5b74b1f12e64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41221126c85524a6dec34a4f44cb5b74b1f12e64/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      },
      {
        "sha": "6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4cdd67b1f2b3927a525ebba843c27ef3c63e1c"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 117,
      "deletions": 43
    },
    "files": [
      {
        "sha": "9b791cc0e80ce29c64bc11d21fb32a89c337488d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41221126c85524a6dec34a4f44cb5b74b1f12e64/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41221126c85524a6dec34a4f44cb5b74b1f12e64/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "patch": "@@ -42,6 +42,7 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoin-tx.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n \t       $(top_srcdir)/contrib/init \\\n+\t       $(top_srcdir)/contrib/install_db4.sh \\\n \t       $(top_srcdir)/contrib/rpm\n DIST_SHARE = \\\n   $(top_srcdir)/share/genbuild.sh \\"
      },
      {
        "sha": "1d33e8d3baf181dcfbe6b0f393eee5bf3d8bb3d8",
        "filename": "contrib/install_db4.sh",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41221126c85524a6dec34a4f44cb5b74b1f12e64/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41221126c85524a6dec34a4f44cb5b74b1f12e64/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "patch": "@@ -0,0 +1,87 @@\n+#!/bin/sh\n+\n+# Install libdb4.8 (Berkeley DB).\n+\n+set -e\n+\n+if [ -z \"${1}\" ]; then\n+  echo \"Usage: ./install_db4.sh <base-dir> [<extra-bdb-configure-flag> ...]\"\n+  echo\n+  echo \"Must specify a single argument: the directory in which db5 will be built.\"\n+  echo \"This is probably \\`pwd\\` if you're at the root of the bitcoin repository.\"\n+  exit 1\n+fi\n+\n+expand_path() {\n+  echo \"$(cd \"${1}\" && pwd -P)\"\n+}\n+\n+BDB_PREFIX=\"$(expand_path ${1})/db4\"; shift;\n+BDB_EXTRA_CONFIGURE_FLAGS=\"${@}\"\n+BDB_VERSION='db-4.8.30.NC'\n+BDB_HASH='12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef'\n+BDB_URL=\"https://download.oracle.com/berkeley-db/${BDB_VERSION}.tar.gz\"\n+\n+check_exists() {\n+  which \"$1\" >/dev/null 2>&1\n+}\n+\n+sha256_check() {\n+  # Args: <sha256_hash> <filename>\n+  #\n+  if check_exists sha256sum; then\n+    echo \"${1}  ${2}\" | sha256sum -c\n+  elif check_exists sha256; then\n+    echo \"${1}  ${2}\" | sha256 -c\n+  else\n+    echo \"${1}  ${2}\" | shasum -a 256 -c\n+  fi\n+}\n+\n+http_get() {\n+  # Args: <url> <filename> <sha256_hash>\n+  #\n+  # It's acceptable that we don't require SSL here because we manually verify\n+  # content hashes below.\n+  #\n+  if [ -f \"${2}\" ]; then\n+    echo \"File ${2} already exists; not downloading again\"\n+  elif check_exists curl; then\n+    curl --insecure \"${1}\" -o \"${2}\"\n+  else\n+    wget --no-check-certificate \"${1}\" -O \"${2}\"\n+  fi\n+\n+  sha256_check \"${3}\" \"${2}\"\n+}\n+\n+mkdir -p \"${BDB_PREFIX}\"\n+http_get \"${BDB_URL}\" \"${BDB_VERSION}.tar.gz\" \"${BDB_HASH}\"\n+tar -xzvf ${BDB_VERSION}.tar.gz -C \"$BDB_PREFIX\"\n+cd \"${BDB_PREFIX}/${BDB_VERSION}/\"\n+\n+# Apply a patch when building on OS X to make the build work with Xcode.\n+#\n+if [ \"$(uname)\" = \"Darwin\" ]; then\n+  BDB_OSX_ATOMIC_PATCH_URL='https://raw.githubusercontent.com/narkoleptik/os-x-berkeleydb-patch/0007e2846ae3fc9757849f5277018f4179ad17ef/atomic.patch'\n+  BDB_OSX_ATOMIC_PATCH_HASH='ba0e2b4f53e9cb0ec58f60a979b53b8567b4565f0384886196f1fc1ef111d151'\n+\n+  http_get \"${BDB_OSX_ATOMIC_PATCH_URL}\" atomic.patch \"${BDB_OSX_ATOMIC_PATCH_HASH}\"\n+  patch -p1 < atomic.patch\n+fi\n+\n+cd build_unix/\n+\n+\"${BDB_PREFIX}/${BDB_VERSION}/dist/configure\" \\\n+  --enable-cxx --disable-shared --with-pic --prefix=\"${BDB_PREFIX}\" \\\n+  \"${BDB_EXTRA_CONFIGURE_FLAGS}\"\n+\n+make install\n+\n+echo\n+echo \"db4 build complete.\"\n+echo\n+echo 'When compiling bitcoind, run `./configure` in the following way:'\n+echo\n+echo \"  export BDB_PREFIX='${BDB_PREFIX}'\"\n+echo '  ./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" ...'"
      },
      {
        "sha": "cd1d217b47a79148c571826eb74ac26296d796b2",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 8,
        "deletions": 19,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41221126c85524a6dec34a4f44cb5b74b1f12e64/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41221126c85524a6dec34a4f44cb5b74b1f12e64/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "patch": "@@ -38,28 +38,17 @@ The default C++ compiler that comes with OpenBSD 6.2 is g++ 4.2.1. This version\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n \n-See \"Berkeley DB\" in [build-unix.md](build-unix.md#berkeley-db) for instructions on how to build BerkeleyDB 4.8.\n-You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n+from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+If you have to build it yourself, you can use [the installation script included\n+in contrib/](contrib/install_db4.sh) like so\n \n-```bash\n-# Pick some path to install BDB to, here we create a directory within the bitcoin directory\n-BITCOIN_ROOT=$(pwd)\n-BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n-mkdir -p $BDB_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-curl -o db-4.8.30.NC.tar.gz 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n-echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256 -c\n-# MUST output: (SHA256) db-4.8.30.NC.tar.gz: OK\n-tar -xzf db-4.8.30.NC.tar.gz\n-\n-# Build the library and install to specified prefix\n-cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n-make install # do NOT use -jX, this is broken\n+```shell\n+./contrib/install_db4.sh `pwd` CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n+from the root of the repository.\n+\n ### Resource limits\n \n The standard ulimit restrictions in OpenBSD are very strict:"
      },
      {
        "sha": "6f08562ff8f5f5ef694c043567ec60cf41e849b9",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41221126c85524a6dec34a4f44cb5b74b1f12e64/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41221126c85524a6dec34a4f44cb5b74b1f12e64/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "patch": "@@ -26,6 +26,20 @@ If you want to build the disk image with `make deploy` (.dmg / optional), you ne\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.\n \n+Berkeley DB\n+-----------\n+It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n+you can use [the installation script included in contrib/](contrib/install_db4.sh)\n+like so\n+\n+```shell\n+./contrib/install_db4.sh .\n+```\n+\n+from the root of the repository.\n+\n+**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n+\n Build Bitcoin Core\n ------------------------\n "
      },
      {
        "sha": "5d3329e2cfe89395546f65edd267acd1c7431a83",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 7,
        "deletions": 24,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41221126c85524a6dec34a4f44cb5b74b1f12e64/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41221126c85524a6dec34a4f44cb5b74b1f12e64/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "patch": "@@ -165,33 +165,16 @@ turned off by default.  See the configure options for upnp behavior desired:\n \n Berkeley DB\n -----------\n-It is recommended to use Berkeley DB 4.8. If you have to build it yourself:\n+It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n+you can use [the installation script included in contrib/](contrib/install_db4.sh)\n+like so\n \n-```bash\n-BITCOIN_ROOT=$(pwd)\n-\n-# Pick some path to install BDB to, here we create a directory within the bitcoin directory\n-BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n-mkdir -p $BDB_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n-echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256sum -c\n-# -> db-4.8.30.NC.tar.gz: OK\n-tar -xzvf db-4.8.30.NC.tar.gz\n-\n-# Build the library and install to our prefix\n-cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n-make install\n-\n-# Configure Bitcoin Core to use our own-built instance of BDB\n-cd $BITCOIN_ROOT\n-./autogen.sh\n-./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" # (other args...)\n+```shell\n+./contrib/install_db4.sh `pwd`\n ```\n \n+from the root of the repository.\n+\n **Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n \n Boost"
      }
    ]
  },
  {
    "sha": "0530ba0eae147563921b162ed05347234d8b53c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTMwYmEwZWFlMTQ3NTYzOTIxYjE2MmVkMDUzNDcyMzRkOGI1M2Mw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-08T20:48:07Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:58Z"
      },
      "message": "Add -walletdir parameter to specify custom wallet dir",
      "tree": {
        "sha": "40d494bbef4a50def396d325004aa69bc6ddda01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40d494bbef4a50def396d325004aa69bc6ddda01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0530ba0eae147563921b162ed05347234d8b53c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0530ba0eae147563921b162ed05347234d8b53c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0530ba0eae147563921b162ed05347234d8b53c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0530ba0eae147563921b162ed05347234d8b53c0/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 76,
      "deletions": 24
    },
    "files": [
      {
        "sha": "4b65774fc6f583e42a26a43687ec8777c845aa19",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -168,6 +168,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/walletutil.h \\\n   warnings.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n@@ -249,6 +250,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n+  wallet/walletutil.cpp \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library"
      },
      {
        "sha": "b1f1342aa05d3a061ef6c275c583da879de4635f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -101,6 +101,10 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n+        if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+            fprintf(stderr, \"Error: Specified wallet directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-walletdir\", \"\").c_str());\n+            return false;\n+        }\n         try\n         {\n             gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));"
      },
      {
        "sha": "93174a11ee46e9643c7018a16568f07b7fb94ae3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -1220,6 +1220,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n "
      },
      {
        "sha": "05af10a529d4b4e9d5152d1fe15aeb2d3fa1a853",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -626,6 +626,11 @@ int main(int argc, char *argv[])\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n+    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n+                              QObject::tr(\"Error: Specified wallet directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-walletdir\", \"\"))));\n+        return EXIT_FAILURE;\n+    }\n     try {\n         gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "79ff27279c185cbd72a3b1cb93483869296056dd",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -11,6 +11,7 @@\n #include <protocol.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <wallet/walletutil.h>\n \n #include <stdint.h>\n \n@@ -257,23 +258,23 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n-        errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n+        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.string());\n         return false;\n     }\n \n-    if (!bitdb.Open(dataDir))\n+    if (!bitdb.Open(walletDir))\n     {\n         // try moving the database env out of the way\n-        fs::path pathDatabase = dataDir / \"database\";\n-        fs::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        fs::path pathDatabase = walletDir / \"database\";\n+        fs::path pathDatabaseBak = walletDir / strprintf(\"database.%d.bak\", GetTime());\n         try {\n             fs::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n@@ -282,18 +283,18 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataD\n         }\n \n         // try again\n-        if (!bitdb.Open(dataDir)) {\n+        if (!bitdb.Open(walletDir)) {\n             // if it still fails, it probably means we can't even create the database env\n-            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n+            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n             return false;\n         }\n     }\n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n {\n-    if (fs::exists(dataDir / walletFile))\n+    if (fs::exists(walletDir / walletFile))\n     {\n         std::string backup_filename;\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc, backup_filename);\n@@ -303,7 +304,7 @@ bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& data\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\"),\n-                                   walletFile, backup_filename, dataDir);\n+                                   walletFile, backup_filename, walletDir);\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n         {\n@@ -407,7 +408,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n \n     {\n         LOCK(env->cs_db);\n-        if (!env->Open(GetDataDir()))\n+        if (!env->Open(GetWalletDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         pdb = env->mapDb[strFilename];\n@@ -695,7 +696,7 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                 env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n-                fs::path pathSrc = GetDataDir() / strFile;\n+                fs::path pathSrc = GetWalletDir() / strFile;\n                 fs::path pathDest(strDest);\n                 if (fs::is_directory(pathDest))\n                     pathDest /= strFile;"
      },
      {
        "sha": "ed2ee65cacc6d48ed32a1a0817ec46ad4896646a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -167,9 +167,9 @@ class CDB\n        ideal to be called periodically */\n     static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>"
      },
      {
        "sha": "754ed8a6701bd198b4cbaafb4b09819f5cfca56d",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -9,8 +9,9 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validation.h>\n-#include <wallet/wallet.h>\n #include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletutil.h>\n \n std::string GetWalletHelpString(bool showDebug)\n {\n@@ -34,6 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n+    strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n                                \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -205,7 +207,7 @@ bool VerifyWallets()\n             return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n         }\n \n-        fs::path wallet_path = fs::absolute(walletFile, GetDataDir());\n+        fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n \n         if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n             return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n@@ -216,7 +218,7 @@ bool VerifyWallets()\n         }\n \n         std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetDataDir().string(), strError)) {\n+        if (!CWalletDB::VerifyEnvironment(walletFile, GetWalletDir().string(), strError)) {\n             return InitError(strError);\n         }\n \n@@ -230,7 +232,7 @@ bool VerifyWallets()\n         }\n \n         std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetDataDir().string(), strWarning, strError);\n+        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetWalletDir().string(), strWarning, strError);\n         if (!strWarning.empty()) {\n             InitWarning(strWarning);\n         }"
      },
      {
        "sha": "9a7861f978ee092ab58dd665dfbe0b9328354837",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -26,6 +26,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n \n #include <init.h>  // For StartShutdown\n "
      },
      {
        "sha": "5116d6419e89813e8b6af53cf67892c3d46f2b2f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -814,14 +814,14 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n {\n-    return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n+    return CDB::VerifyEnvironment(walletFile, walletDir, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr)\n {\n-    return CDB::VerifyDatabaseFile(walletFile, dataDir, warningStr, errorStr, CWalletDB::Recover);\n+    return CDB::VerifyDatabaseFile(walletFile, walletDir, warningStr, errorStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "e815bcfeda61dc3d0a48512607d9d9738b4088bb",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -226,9 +226,9 @@ class CWalletDB\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "85ac428b25f2040ccab4e7105317345896d77939",
        "filename": "src/wallet/walletutil.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/walletutil.h\"\n+\n+fs::path GetWalletDir()\n+{\n+    fs::path path;\n+\n+    if (gArgs.IsArgSet(\"-walletdir\")) {\n+        path = fs::system_complete(gArgs.GetArg(\"-walletdir\", \"\"));\n+        if (!fs::is_directory(path)) {\n+            // If the path specified doesn't exist, we return the deliberately\n+            // invalid empty string.\n+            path = \"\";\n+        }\n+    } else {\n+        path = GetDataDir();\n+    }\n+\n+    return path;\n+}"
      },
      {
        "sha": "a94f286a44219d9b6aaada9ce9e1bef16f893ef5",
        "filename": "src/wallet/walletutil.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_UTIL_H\n+#define BITCOIN_WALLET_UTIL_H\n+\n+#include \"util.h\"\n+\n+//! Get the path of the wallet directory.\n+fs::path GetWalletDir();\n+\n+#endif // BITCOIN_WALLET_UTIL_H"
      }
    ]
  },
  {
    "sha": "80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGM1Y2JjMTRmZGZjYTk0YWZmMjRjZDU3ZGZmZDUxZDFkNGQxNGJj",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-09T08:32:07Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:58Z"
      },
      "message": "Add test for -walletdir",
      "tree": {
        "sha": "07ece6d6ffa03255bde535da058e0ccbe8a2087f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07ece6d6ffa03255bde535da058e0ccbe8a2087f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0530ba0eae147563921b162ed05347234d8b53c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0530ba0eae147563921b162ed05347234d8b53c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0530ba0eae147563921b162ed05347234d8b53c0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f30d9f1ad6f807eca325eaa85d0b17f061977d6",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
        "patch": "@@ -39,6 +39,19 @@ def run_test(self):\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n+        # should not initialize if the specified walletdir does not exist\n+        self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified wallet directory \"bad\" does not exist.')\n+\n+        # running the node with specified walletdir should only have the default wallet in it\n+        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir'))\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')])\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n+        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        w5_info = w5.getwalletinfo()\n+        assert_equal(w5_info['immature_balance'], 0)\n+\n+        self.stop_node(0)\n+\n         self.start_node(0, self.extra_args[0])\n \n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")"
      }
    ]
  },
  {
    "sha": "d9878890e4539d7113fae880f612e68640e69462",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTg3ODg5MGU0NTM5ZDcxMTNmYWU4ODBmNjEyZTY4NjQwZTY5NDYy",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-09T08:45:01Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:58Z"
      },
      "message": "Add release notes for -walletdir and wallets/ dir",
      "tree": {
        "sha": "cb14d16dc34625b45d514b9845bed7d3e7fcedaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb14d16dc34625b45d514b9845bed7d3e7fcedaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9878890e4539d7113fae880f612e68640e69462",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9878890e4539d7113fae880f612e68640e69462",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9878890e4539d7113fae880f612e68640e69462",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9878890e4539d7113fae880f612e68640e69462/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "32f1bef62cd9cc9b828b9d4b7551eafe107823db",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9878890e4539d7113fae880f612e68640e69462/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9878890e4539d7113fae880f612e68640e69462/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d9878890e4539d7113fae880f612e68640e69462",
        "patch": "@@ -20,7 +20,7 @@ How to Upgrade\n ==============\n \n If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the \n+shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n@@ -62,6 +62,20 @@ Due to a backward-incompatible change in the wallet database, wallets created\n with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0\n will only create hierarchical deterministic (HD) wallets.\n \n+Custom wallet directories\n+---------------------\n+The ability to specify a directory other than the default data directory in which to store\n+wallets has been added. An existing directory can be specified using the `-walletdir=<dir>`\n+argument. Wallets loaded via `-wallet` arguments must be in this wallet directory. Care should be taken\n+when choosing a wallet directory location, as if  it becomes unavailable during operation,\n+funds may be lost.\n+\n+Default wallet directory change\n+--------------------------\n+On new installations (if the data directory doesn't exist), wallets will now be stored in a\n+new `wallets/` subdirectory inside the data directory. If this `wallets/` subdirectory\n+doesn't exist (i.e. on existing nodes), the current datadir root is used instead, as it was.\n+\n Low-level RPC changes\n ----------------------\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:"
      }
    ]
  },
  {
    "sha": "9587a9c12b5d54263787a23c75f570db368318c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTg3YTljMTJiNWQ1NDI2Mzc4N2EyM2M3NWY1NzBkYjM2ODMxOGMx",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-27T02:15:40Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:59Z"
      },
      "message": "Default walletdir is wallets/ if it exists",
      "tree": {
        "sha": "8fe3ceaca77bd217c1b7b5adb982502467f5e5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fe3ceaca77bd217c1b7b5adb982502467f5e5c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9587a9c12b5d54263787a23c75f570db368318c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9587a9c12b5d54263787a23c75f570db368318c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9587a9c12b5d54263787a23c75f570db368318c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9587a9c12b5d54263787a23c75f570db368318c1/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9878890e4539d7113fae880f612e68640e69462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9878890e4539d7113fae880f612e68640e69462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9878890e4539d7113fae880f612e68640e69462"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fbb5215a51efdde112e90021e287e16eb49d0914",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9587a9c12b5d54263787a23c75f570db368318c1/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9587a9c12b5d54263787a23c75f570db368318c1/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=9587a9c12b5d54263787a23c75f570db368318c1",
        "patch": "@@ -17,6 +17,10 @@ fs::path GetWalletDir()\n         }\n     } else {\n         path = GetDataDir();\n+        // If a wallets directory exists, use that, otherwise default to GetDataDir\n+        if (fs::is_directory(path / \"wallets\")) {\n+            path /= \"wallets\";\n+        }\n     }\n \n     return path;"
      }
    ]
  },
  {
    "sha": "8263f6a5ac3f3af102a2819b7e179b00db7e0437",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjYzZjZhNWFjM2YzYWYxMDJhMjgxOWI3ZTE3OWIwMGRiN2UwNDM3",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-12T09:04:46Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:59Z"
      },
      "message": "Create walletdir if datadir doesn't exist and fix tests",
      "tree": {
        "sha": "2d08c4f8eeed52a2c1101d0fe1c16556d6da2b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d08c4f8eeed52a2c1101d0fe1c16556d6da2b73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9587a9c12b5d54263787a23c75f570db368318c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9587a9c12b5d54263787a23c75f570db368318c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9587a9c12b5d54263787a23c75f570db368318c1"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 45,
      "deletions": 34
    },
    "files": [
      {
        "sha": "bc23912d2b098e4b8fccca4e55857a201cbe81fd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -101,10 +101,6 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n-        if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n-            fprintf(stderr, \"Error: Specified wallet directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-walletdir\", \"\").c_str());\n-            return false;\n-        }\n         try\n         {\n             gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));"
      },
      {
        "sha": "439eaacfcc9445cb28e213fbf7164bdf893cf72c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -1220,7 +1220,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n "
      },
      {
        "sha": "557d7efcec14edba55b6b3eab212a084f61b78a4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -626,11 +626,6 @@ int main(int argc, char *argv[])\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n-    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n-        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n-                              QObject::tr(\"Error: Specified wallet directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-walletdir\", \"\"))));\n-        return EXIT_FAILURE;\n-    }\n     try {\n         gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "7f8a8394e691a63476906a8bb01170e235bd92e8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -214,7 +214,10 @@ bool Intro::pickDataDirectory()\n             }\n             dataDir = intro.getDataDirectory();\n             try {\n-                TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir));\n+                if (TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir))) {\n+                    // If a new data directory has been created, make wallets subdirectory too\n+                    TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir) / \"wallets\");\n+                }\n                 break;\n             } catch (const fs::filesystem_error&) {\n                 QMessageBox::critical(0, tr(PACKAGE_NAME),"
      },
      {
        "sha": "d58f39e969b3b070b40ceecee282e90c3b7cf208",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -574,7 +574,10 @@ const fs::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific)\n         path /= BaseParams().DataDir();\n \n-    fs::create_directories(path);\n+    if (fs::create_directories(path)) {\n+        // This is the first run, create wallets subdirectory too\n+        fs::create_directories(path / \"wallets\");\n+    }\n \n     return path;\n }"
      },
      {
        "sha": "67c46df87d69cae1ba2c6d4c2c78666011b17099",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -193,6 +193,12 @@ bool VerifyWallets()\n         return true;\n     }\n \n+    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+        return InitError(strprintf(_(\"Error: Specified wallet directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-walletdir\", \"\").c_str()));\n+    }\n+\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+\n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n \n     // Keep track of each wallet absolute path to detect duplicates."
      },
      {
        "sha": "e7af3c398718640a5a1a2655954e3fab9dd2644f",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -33,7 +33,7 @@ def run_test(self):\n \n         self.stop_node(1)\n \n-        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallets/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n         self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n@@ -56,7 +56,7 @@ def run_test(self):\n \n         self.stop_node(1)\n \n-        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n "
      },
      {
        "sha": "4a721d11099f62fbf373078781d45372a5cd9a85",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -27,28 +27,37 @@ def run_test(self):\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n-        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n+        wallet_dir = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'wallets')\n+        os.mkdir(os.path.join(wallet_dir, 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n-                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        shutil.copyfile(os.path.join(wallet_dir, 'w2'), os.path.join(wallet_dir, 'w22'))\n         self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n+        os.symlink(os.path.join(wallet_dir, 'w1'), os.path.join(wallet_dir, 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n         # should not initialize if the specified walletdir does not exist\n         self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified wallet directory \"bad\" does not exist.')\n \n-        # running the node with specified walletdir should only have the default wallet in it\n-        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir'))\n-        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')])\n+        # if wallets/ doesn't exist, datadir should be the default wallet dir\n+        wallet_dir2 = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')\n+        os.rename(wallet_dir, wallet_dir2)\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5'])\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n+        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        w5.generate(1)\n+        self.stop_node(0)\n+\n+        # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n+        os.rename(wallet_dir2, wallet_dir)\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest')])\n         assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n         w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n         w5_info = w5.getwalletinfo()\n-        assert_equal(w5_info['immature_balance'], 0)\n+        assert_equal(w5_info['immature_balance'], 50)\n \n         self.stop_node(0)\n "
      },
      {
        "sha": "4590b4c65091218c32870f990e2a0217c076edcc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -432,7 +432,7 @@ def _initialize_chain(self):\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"wallets/db.log\"))\n                 os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n                 os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n "
      },
      {
        "sha": "d21656a971656c20dfde84ce4ed6735c6f601d84",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -73,7 +73,7 @@ def run_test (self):\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n         shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n         shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n-        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallets/wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic"
      },
      {
        "sha": "8ef5620cd8cfc6158d1b6ccf1602adce1f288de0",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -90,9 +90,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -154,9 +154,9 @@ def run_test(self):\n         shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n \n         # Restore wallets from backup\n-        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -192,10 +192,10 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            tmpdir + \"/node0/regtest/wallet.dat\",\n-            tmpdir + \"/node0/./regtest/wallet.dat\",\n-            tmpdir + \"/node0/regtest/\",\n-            tmpdir + \"/node0/regtest\"]\n+            tmpdir + \"/node0/regtest/wallets/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallets/wallet.dat\",\n+            tmpdir + \"/node0/regtest/wallets/\",\n+            tmpdir + \"/node0/regtest/wallets\"]\n \n         for sourcePath in sourcePaths:\n             assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)"
      }
    ]
  },
  {
    "sha": "c1e5d40e166f0b9ad832c14747e77322ab439185",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWU1ZDQwZTE2NmYwYjlhZDgzMmMxNDc0N2U3NzMyMmFiNDM5MTg1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-13T10:19:20Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:51:00Z"
      },
      "message": "Make debugging test crash easier",
      "tree": {
        "sha": "5ba7abd8a5d011876e385c728e9dc409839a06cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ba7abd8a5d011876e385c728e9dc409839a06cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e5d40e166f0b9ad832c14747e77322ab439185",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e5d40e166f0b9ad832c14747e77322ab439185",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e5d40e166f0b9ad832c14747e77322ab439185",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e5d40e166f0b9ad832c14747e77322ab439185/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8263f6a5ac3f3af102a2819b7e179b00db7e0437"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d953e1585cb974a9ac2120559e1b0a95fddf88bd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e5d40e166f0b9ad832c14747e77322ab439185/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e5d40e166f0b9ad832c14747e77322ab439185/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c1e5d40e166f0b9ad832c14747e77322ab439185",
        "patch": "@@ -300,7 +300,11 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+        try:\n+            subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+        except Exception as e:\n+            print(e.output)\n+            raise e\n \n     #Run Tests\n     job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)"
      }
    ]
  },
  {
    "sha": "f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmY4ZDU0YWZmMzQ0NDkzZWU4YjY0MmY4YWRkM2NjZmNmOTE0YWU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T12:05:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T12:07:37Z"
      },
      "message": "Merge #10920: [qt] Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet)\n\n446e261 [qt] Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet) (practicalswift)\n\nPull request description:\n\n  Fix potential memory leak in `newPossibleKey(ChangeCWallet *wallet)`.\n\nTree-SHA512: 252d3828133a0d241cc649aed1280e14a5d5ea47b7b2989039cfa5061a8e35183c7f36d7320aa0ac1b4dcab31e584b358dbbb2fe645a412371d0a460878e2b58",
      "tree": {
        "sha": "995854f5406c51d650327726f43bdbf50919449f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/995854f5406c51d650327726f43bdbf50919449f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDtEJAAoJEB5K7WKYbNJdQtMH/AiD9GOdMuZzyddvvhjnxUtK\nDF6zRdPSxp3B7dmpyYRJRqzYSqwNInDTYpKV5bv2wHQp24QL0pqp0B66Q3NEiQUu\n85IIDZhkIUgRa+uDGCSw4SORDAvzhVqxJyXROGMZGSX002Q39LKpFVfRNrmiDerW\ny2/M9KoU3BC9ij7vhuFqqPkvuj0FgpgknRn+NtZMQh0PeKFJIZDuS2AOfH3zig9X\nCoiSZbNUR5v68zcjgMpVY/zEUxH44q4aCSaM5/RyTZpyb4BZPY8mW7NgDCeZMSKY\n0mSQHETjCkjnQWsz45FoLbSixm66fDxiGaAiMlGnrQNB37WrteQtscDVsENWOwg=\n=6oGU\n-----END PGP SIGNATURE-----",
        "payload": "tree 995854f5406c51d650327726f43bdbf50919449f\nparent 41221126c85524a6dec34a4f44cb5b74b1f12e64\nparent 446e2610b0cd6535e623952bf22ea09ce0ed8aaf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510920354 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510920457 +0100\n\nMerge #10920: [qt] Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet)\n\n446e261 [qt] Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet) (practicalswift)\n\nPull request description:\n\n  Fix potential memory leak in `newPossibleKey(ChangeCWallet *wallet)`.\n\nTree-SHA512: 252d3828133a0d241cc649aed1280e14a5d5ea47b7b2989039cfa5061a8e35183c7f36d7320aa0ac1b4dcab31e584b358dbbb2fe645a412371d0a460878e2b58\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f8d54aff344493ee8b642f8add3ccfcf914ae6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41221126c85524a6dec34a4f44cb5b74b1f12e64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41221126c85524a6dec34a4f44cb5b74b1f12e64"
      },
      {
        "sha": "446e2610b0cd6535e623952bf22ea09ce0ed8aaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/446e2610b0cd6535e623952bf22ea09ce0ed8aaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/446e2610b0cd6535e623952bf22ea09ce0ed8aaf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2188b39b92e016214cc9e66d53ad75ae3b0d03fc",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6f8d54aff344493ee8b642f8add3ccfcf914ae6/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6f8d54aff344493ee8b642f8add3ccfcf914ae6/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
        "patch": "@@ -10,15 +10,13 @@\n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :\n     recipients(_recipients),\n     walletTransaction(0),\n-    keyChange(0),\n     fee(0)\n {\n     walletTransaction = new CWalletTx();\n }\n \n WalletModelTransaction::~WalletModelTransaction()\n {\n-    delete keyChange;\n     delete walletTransaction;\n }\n \n@@ -91,10 +89,10 @@ CAmount WalletModelTransaction::getTotalTransactionAmount() const\n \n void WalletModelTransaction::newPossibleKeyChange(CWallet *wallet)\n {\n-    keyChange = new CReserveKey(wallet);\n+    keyChange.reset(new CReserveKey(wallet));\n }\n \n CReserveKey *WalletModelTransaction::getPossibleKeyChange()\n {\n-    return keyChange;\n+    return keyChange.get();\n }"
      },
      {
        "sha": "519cf9df996aef5612b043d2c47cba250c448e99",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6f8d54aff344493ee8b642f8add3ccfcf914ae6/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6f8d54aff344493ee8b642f8add3ccfcf914ae6/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
        "patch": "@@ -40,7 +40,7 @@ class WalletModelTransaction\n private:\n     QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n-    CReserveKey *keyChange;\n+    std::unique_ptr<CReserveKey> keyChange;\n     CAmount fee;\n };\n "
      }
    ]
  },
  {
    "sha": "ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2M3MGEyOTVmYzVhMDZlY2ExMmJjOTE2MjJiMzc5YTM4ZDZhMGM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T12:15:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T12:16:40Z"
      },
      "message": "Merge #11648: [tests] Add messages.py\n\n1135c79 [tests] Tidy up mininode.py module (John Newbery)\nf9cd9b1 [tests] Move test_framework Bitcoin primitives into separate module (John Newbery)\n\nPull request description:\n\n  Second part of #11518.\n\n  Moves the primitive Bitcoin datastructures and message classes into their own module, and tidies up the mininode.py module.\n\n  - First commit is almost entirely move-only\n  - Second commit is mostly move-only, but also does a little tidying.\n\nTree-SHA512: 5d74802677f1ab788e43188653106a96fffd9ab1fe3aa6a4eb94e5807de5dd5c8ee212296f45e8d16c7e3d95cfc4891677e812b7944bd3ab604e04b3b88aa06e",
      "tree": {
        "sha": "c028fe45d7ca4adc0791d16a2706afd923c16eaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c028fe45d7ca4adc0791d16a2706afd923c16eaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDtMoAAoJEB5K7WKYbNJdhIYH/RLJJBKqIOhMlLml5xls1miH\ni/bia4RqgakxwlxDi0nCa57MOxPK/kjuMCO6DdG2krelsnJ2FNfsnmhFLtc3VPue\nh4tCk7Aa9x7kcW8z3v/hE6+amVvTEt6DYYtG66tUGFbPb002a0jM+W0sXKhd9pNu\nNCrlx1gujFWyBvpGx6XVnUSL7hce0EtlO+Xw67MXx3rA4E4uwMEUsfRbvxJ7EBIq\nIiIGMnjmhdD+dxv43IA8x2t3v+9EdvWuIk0ahFnnhQIAWSY7S2zogZnpj4RUmQp2\nOT39SR0GJT82lJN6ufGz7b/PHG9DK4sshu4ucHV32dAEttaCUOnj3SWWGlL77M4=\n=aXC/\n-----END PGP SIGNATURE-----",
        "payload": "tree c028fe45d7ca4adc0791d16a2706afd923c16eaf\nparent f6f8d54aff344493ee8b642f8add3ccfcf914ae6\nparent 1135c796a0e1151b03933f2cd36ce95a8e136b7a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510920940 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510921000 +0100\n\nMerge #11648: [tests] Add messages.py\n\n1135c79 [tests] Tidy up mininode.py module (John Newbery)\nf9cd9b1 [tests] Move test_framework Bitcoin primitives into separate module (John Newbery)\n\nPull request description:\n\n  Second part of #11518.\n\n  Moves the primitive Bitcoin datastructures and message classes into their own module, and tidies up the mininode.py module.\n\n  - First commit is almost entirely move-only\n  - Second commit is mostly move-only, but also does a little tidying.\n\nTree-SHA512: 5d74802677f1ab788e43188653106a96fffd9ab1fe3aa6a4eb94e5807de5dd5c8ee212296f45e8d16c7e3d95cfc4891677e812b7944bd3ab604e04b3b88aa06e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc70a295fc5a06eca12bc91622b379a38d6a0c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f8d54aff344493ee8b642f8add3ccfcf914ae6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f8d54aff344493ee8b642f8add3ccfcf914ae6"
      },
      {
        "sha": "1135c796a0e1151b03933f2cd36ce95a8e136b7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1135c796a0e1151b03933f2cd36ce95a8e136b7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1135c796a0e1151b03933f2cd36ce95a8e136b7a"
      }
    ],
    "stats": {
      "total": 2795,
      "additions": 1412,
      "deletions": 1383
    },
    "files": [
      {
        "sha": "40d02f3ee0a63953dd7836816d257197d177a4ed",
        "filename": "test/functional/test_framework/messages.py",
        "status": "added",
        "additions": 1319,
        "deletions": 0,
        "changes": 1319,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc70a295fc5a06eca12bc91622b379a38d6a0c9/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc70a295fc5a06eca12bc91622b379a38d6a0c9/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
        "patch": "@@ -0,0 +1,1319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2010 ArtForz -- public domain half-a-node\n+# Copyright (c) 2012 Jeff Garzik\n+# Copyright (c) 2010-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Bitcoin test framework primitive and message strcutures\n+\n+CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n+    data structures that should map to corresponding structures in\n+    bitcoin/primitives\n+\n+msg_block, msg_tx, msg_headers, etc.:\n+    data structures that represent network messages\n+\n+ser_*, deser_*: functions that handle serialization/deserialization.\"\"\"\n+from codecs import encode\n+import copy\n+import hashlib\n+from io import BytesIO\n+import random\n+import socket\n+import struct\n+import time\n+\n+from test_framework.siphash import siphash256\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n+\n+MIN_VERSION_SUPPORTED = 60001\n+MY_VERSION = 70014  # past bip-31 for ping/pong\n+MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n+MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n+\n+MAX_INV_SZ = 50000\n+MAX_BLOCK_BASE_SIZE = 1000000\n+\n+COIN = 100000000 # 1 btc in satoshis\n+\n+NODE_NETWORK = (1 << 0)\n+# NODE_GETUTXO = (1 << 1)\n+# NODE_BLOOM = (1 << 2)\n+NODE_WITNESS = (1 << 3)\n+NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n+NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n+\n+# Serialization/deserialization tools\n+def sha256(s):\n+    return hashlib.new('sha256', s).digest()\n+\n+def ripemd160(s):\n+    return hashlib.new('ripemd160', s).digest()\n+\n+def hash256(s):\n+    return sha256(sha256(s))\n+\n+def ser_compact_size(l):\n+    r = b\"\"\n+    if l < 253:\n+        r = struct.pack(\"B\", l)\n+    elif l < 0x10000:\n+        r = struct.pack(\"<BH\", 253, l)\n+    elif l < 0x100000000:\n+        r = struct.pack(\"<BI\", 254, l)\n+    else:\n+        r = struct.pack(\"<BQ\", 255, l)\n+    return r\n+\n+def deser_compact_size(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    return nit\n+\n+def deser_string(f):\n+    nit = deser_compact_size(f)\n+    return f.read(nit)\n+\n+def ser_string(s):\n+    return ser_compact_size(len(s)) + s\n+\n+def deser_uint256(f):\n+    r = 0\n+    for i in range(8):\n+        t = struct.unpack(\"<I\", f.read(4))[0]\n+        r += t << (i * 32)\n+    return r\n+\n+\n+def ser_uint256(u):\n+    rs = b\"\"\n+    for i in range(8):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n+        u >>= 32\n+    return rs\n+\n+\n+def uint256_from_str(s):\n+    r = 0\n+    t = struct.unpack(\"<IIIIIIII\", s[:32])\n+    for i in range(8):\n+        r += t[i] << (i * 32)\n+    return r\n+\n+\n+def uint256_from_compact(c):\n+    nbytes = (c >> 24) & 0xFF\n+    v = (c & 0xFFFFFF) << (8 * (nbytes - 3))\n+    return v\n+\n+\n+def deser_vector(f, c):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = c()\n+        t.deserialize(f)\n+        r.append(t)\n+    return r\n+\n+\n+# ser_function_name: Allow for an alternate serialization function on the\n+# entries in the vector (we use this for serializing the vector of transactions\n+# for a witness block).\n+def ser_vector(l, ser_function_name=None):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        if ser_function_name:\n+            r += getattr(i, ser_function_name)()\n+        else:\n+            r += i.serialize()\n+    return r\n+\n+\n+def deser_uint256_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = deser_uint256(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_uint256_vector(l):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        r += ser_uint256(i)\n+    return r\n+\n+\n+def deser_string_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = deser_string(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_string_vector(l):\n+    r = ser_compact_size(len(l))\n+    for sv in l:\n+        r += ser_string(sv)\n+    return r\n+\n+\n+def deser_int_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = struct.unpack(\"<i\", f.read(4))[0]\n+        r.append(t)\n+    return r\n+\n+\n+def ser_int_vector(l):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        r += struct.pack(\"<i\", i)\n+    return r\n+\n+# Deserialize from a hex string representation (eg from RPC)\n+def FromHex(obj, hex_string):\n+    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n+    return obj\n+\n+# Convert a binary-serializable object to hex (eg for submission via RPC)\n+def ToHex(obj):\n+    return bytes_to_hex_str(obj.serialize())\n+\n+# Objects that map to bitcoind objects, which can be serialized/deserialized\n+\n+class CAddress():\n+    def __init__(self):\n+        self.nServices = 1\n+        self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n+        self.ip = \"0.0.0.0\"\n+        self.port = 0\n+\n+    def deserialize(self, f):\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.pchReserved = f.read(12)\n+        self.ip = socket.inet_ntoa(f.read(4))\n+        self.port = struct.unpack(\">H\", f.read(2))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += self.pchReserved\n+        r += socket.inet_aton(self.ip)\n+        r += struct.pack(\">H\", self.port)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n+                                                         self.ip, self.port)\n+\n+MSG_WITNESS_FLAG = 1<<30\n+\n+class CInv():\n+    typemap = {\n+        0: \"Error\",\n+        1: \"TX\",\n+        2: \"Block\",\n+        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n+        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n+        4: \"CompactBlock\"\n+    }\n+\n+    def __init__(self, t=0, h=0):\n+        self.type = t\n+        self.hash = h\n+\n+    def deserialize(self, f):\n+        self.type = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.type)\n+        r += ser_uint256(self.hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CInv(type=%s hash=%064x)\" \\\n+            % (self.typemap[self.type], self.hash)\n+\n+\n+class CBlockLocator():\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.vHave = []\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vHave = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256_vector(self.vHave)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n+            % (self.nVersion, repr(self.vHave))\n+\n+\n+class COutPoint():\n+    def __init__(self, hash=0, n=0):\n+        self.hash = hash\n+        self.n = n\n+\n+    def deserialize(self, f):\n+        self.hash = deser_uint256(f)\n+        self.n = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_uint256(self.hash)\n+        r += struct.pack(\"<I\", self.n)\n+        return r\n+\n+    def __repr__(self):\n+        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n+\n+\n+class CTxIn():\n+    def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n+        if outpoint is None:\n+            self.prevout = COutPoint()\n+        else:\n+            self.prevout = outpoint\n+        self.scriptSig = scriptSig\n+        self.nSequence = nSequence\n+\n+    def deserialize(self, f):\n+        self.prevout = COutPoint()\n+        self.prevout.deserialize(f)\n+        self.scriptSig = deser_string(f)\n+        self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.prevout.serialize()\n+        r += ser_string(self.scriptSig)\n+        r += struct.pack(\"<I\", self.nSequence)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n+            % (repr(self.prevout), bytes_to_hex_str(self.scriptSig),\n+               self.nSequence)\n+\n+\n+class CTxOut():\n+    def __init__(self, nValue=0, scriptPubKey=b\"\"):\n+        self.nValue = nValue\n+        self.scriptPubKey = scriptPubKey\n+\n+    def deserialize(self, f):\n+        self.nValue = struct.unpack(\"<q\", f.read(8))[0]\n+        self.scriptPubKey = deser_string(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<q\", self.nValue)\n+        r += ser_string(self.scriptPubKey)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n+            % (self.nValue // COIN, self.nValue % COIN,\n+               bytes_to_hex_str(self.scriptPubKey))\n+\n+\n+class CScriptWitness():\n+    def __init__(self):\n+        # stack is a vector of strings\n+        self.stack = []\n+\n+    def __repr__(self):\n+        return \"CScriptWitness(%s)\" % \\\n+               (\",\".join([bytes_to_hex_str(x) for x in self.stack]))\n+\n+    def is_null(self):\n+        if self.stack:\n+            return False\n+        return True\n+\n+\n+class CTxInWitness():\n+    def __init__(self):\n+        self.scriptWitness = CScriptWitness()\n+\n+    def deserialize(self, f):\n+        self.scriptWitness.stack = deser_string_vector(f)\n+\n+    def serialize(self):\n+        return ser_string_vector(self.scriptWitness.stack)\n+\n+    def __repr__(self):\n+        return repr(self.scriptWitness)\n+\n+    def is_null(self):\n+        return self.scriptWitness.is_null()\n+\n+\n+class CTxWitness():\n+    def __init__(self):\n+        self.vtxinwit = []\n+\n+    def deserialize(self, f):\n+        for i in range(len(self.vtxinwit)):\n+            self.vtxinwit[i].deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        # This is different than the usual vector serialization --\n+        # we omit the length of the vector, which is required to be\n+        # the same length as the transaction's vin vector.\n+        for x in self.vtxinwit:\n+            r += x.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxWitness(%s)\" % \\\n+               (';'.join([repr(x) for x in self.vtxinwit]))\n+\n+    def is_null(self):\n+        for x in self.vtxinwit:\n+            if not x.is_null():\n+                return False\n+        return True\n+\n+\n+class CTransaction():\n+    def __init__(self, tx=None):\n+        if tx is None:\n+            self.nVersion = 1\n+            self.vin = []\n+            self.vout = []\n+            self.wit = CTxWitness()\n+            self.nLockTime = 0\n+            self.sha256 = None\n+            self.hash = None\n+        else:\n+            self.nVersion = tx.nVersion\n+            self.vin = copy.deepcopy(tx.vin)\n+            self.vout = copy.deepcopy(tx.vout)\n+            self.nLockTime = tx.nLockTime\n+            self.sha256 = tx.sha256\n+            self.hash = tx.hash\n+            self.wit = copy.deepcopy(tx.wit)\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vin = deser_vector(f, CTxIn)\n+        flags = 0\n+        if len(self.vin) == 0:\n+            flags = struct.unpack(\"<B\", f.read(1))[0]\n+            # Not sure why flags can't be zero, but this\n+            # matches the implementation in bitcoind\n+            if (flags != 0):\n+                self.vin = deser_vector(f, CTxIn)\n+                self.vout = deser_vector(f, CTxOut)\n+        else:\n+            self.vout = deser_vector(f, CTxOut)\n+        if flags != 0:\n+            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n+            self.wit.deserialize(f)\n+        self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize_without_witness(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    # Only serialize with witness when explicitly called for\n+    def serialize_with_witness(self):\n+        flags = 0\n+        if not self.wit.is_null():\n+            flags |= 1\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        if flags:\n+            dummy = []\n+            r += ser_vector(dummy)\n+            r += struct.pack(\"<B\", flags)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        if flags & 1:\n+            if (len(self.wit.vtxinwit) != len(self.vin)):\n+                # vtxinwit must have the same length as vin\n+                self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n+                for i in range(len(self.wit.vtxinwit), len(self.vin)):\n+                    self.wit.vtxinwit.append(CTxInWitness())\n+            r += self.wit.serialize()\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    # Regular serialization is without witness -- must explicitly\n+    # call serialize_with_witness to include witness data.\n+    def serialize(self):\n+        return self.serialize_without_witness()\n+\n+    # Recalculate the txid (transaction hash without witness)\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+\n+    # We will only cache the serialization without witness in\n+    # self.sha256 and self.hash -- those are expected to be the txid.\n+    def calc_sha256(self, with_witness=False):\n+        if with_witness:\n+            # Don't cache the result, just return it\n+            return uint256_from_str(hash256(self.serialize_with_witness()))\n+\n+        if self.sha256 is None:\n+            self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n+        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        for tout in self.vout:\n+            if tout.nValue < 0 or tout.nValue > 21000000 * COIN:\n+                return False\n+        return True\n+\n+    def __repr__(self):\n+        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n+            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n+\n+\n+class CBlockHeader():\n+    def __init__(self, header=None):\n+        if header is None:\n+            self.set_null()\n+        else:\n+            self.nVersion = header.nVersion\n+            self.hashPrevBlock = header.hashPrevBlock\n+            self.hashMerkleRoot = header.hashMerkleRoot\n+            self.nTime = header.nTime\n+            self.nBits = header.nBits\n+            self.nNonce = header.nNonce\n+            self.sha256 = header.sha256\n+            self.hash = header.hash\n+            self.calc_sha256()\n+\n+    def set_null(self):\n+        self.nVersion = 1\n+        self.hashPrevBlock = 0\n+        self.hashMerkleRoot = 0\n+        self.nTime = 0\n+        self.nBits = 0\n+        self.nNonce = 0\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hashPrevBlock = deser_uint256(f)\n+        self.hashMerkleRoot = deser_uint256(f)\n+        self.nTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nBits = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nNonce = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256(self.hashPrevBlock)\n+        r += ser_uint256(self.hashMerkleRoot)\n+        r += struct.pack(\"<I\", self.nTime)\n+        r += struct.pack(\"<I\", self.nBits)\n+        r += struct.pack(\"<I\", self.nNonce)\n+        return r\n+\n+    def calc_sha256(self):\n+        if self.sha256 is None:\n+            r = b\"\"\n+            r += struct.pack(\"<i\", self.nVersion)\n+            r += ser_uint256(self.hashPrevBlock)\n+            r += ser_uint256(self.hashMerkleRoot)\n+            r += struct.pack(\"<I\", self.nTime)\n+            r += struct.pack(\"<I\", self.nBits)\n+            r += struct.pack(\"<I\", self.nNonce)\n+            self.sha256 = uint256_from_str(hash256(r))\n+            self.hash = encode(hash256(r)[::-1], 'hex_codec').decode('ascii')\n+\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+        return self.sha256\n+\n+    def __repr__(self):\n+        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce)\n+\n+\n+class CBlock(CBlockHeader):\n+    def __init__(self, header=None):\n+        super(CBlock, self).__init__(header)\n+        self.vtx = []\n+\n+    def deserialize(self, f):\n+        super(CBlock, self).deserialize(f)\n+        self.vtx = deser_vector(f, CTransaction)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += super(CBlock, self).serialize()\n+        if with_witness:\n+            r += ser_vector(self.vtx, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.vtx)\n+        return r\n+\n+    # Calculate the merkle root given a vector of transaction hashes\n+    @classmethod\n+    def get_merkle_root(cls, hashes):\n+        while len(hashes) > 1:\n+            newhashes = []\n+            for i in range(0, len(hashes), 2):\n+                i2 = min(i+1, len(hashes)-1)\n+                newhashes.append(hash256(hashes[i] + hashes[i2]))\n+            hashes = newhashes\n+        return uint256_from_str(hashes[0])\n+\n+    def calc_merkle_root(self):\n+        hashes = []\n+        for tx in self.vtx:\n+            tx.calc_sha256()\n+            hashes.append(ser_uint256(tx.sha256))\n+        return self.get_merkle_root(hashes)\n+\n+    def calc_witness_merkle_root(self):\n+        # For witness root purposes, the hash of the\n+        # coinbase, with witness, is defined to be 0...0\n+        hashes = [ser_uint256(0)]\n+\n+        for tx in self.vtx[1:]:\n+            # Calculate the hashes with witness data\n+            hashes.append(ser_uint256(tx.calc_sha256(True)))\n+\n+        return self.get_merkle_root(hashes)\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        target = uint256_from_compact(self.nBits)\n+        if self.sha256 > target:\n+            return False\n+        for tx in self.vtx:\n+            if not tx.is_valid():\n+                return False\n+        if self.calc_merkle_root() != self.hashMerkleRoot:\n+            return False\n+        return True\n+\n+    def solve(self):\n+        self.rehash()\n+        target = uint256_from_compact(self.nBits)\n+        while self.sha256 > target:\n+            self.nNonce += 1\n+            self.rehash()\n+\n+    def __repr__(self):\n+        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n+\n+\n+class PrefilledTransaction():\n+    def __init__(self, index=0, tx = None):\n+        self.index = index\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.index = deser_compact_size(f)\n+        self.tx = CTransaction()\n+        self.tx.deserialize(f)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_compact_size(self.index)\n+        if with_witness:\n+            r += self.tx.serialize_with_witness()\n+        else:\n+            r += self.tx.serialize_without_witness()\n+        return r\n+\n+    def serialize_with_witness(self):\n+        return self.serialize(with_witness=True)\n+\n+    def __repr__(self):\n+        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n+\n+# This is what we send on the wire, in a cmpctblock message.\n+class P2PHeaderAndShortIDs():\n+    def __init__(self):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids_length = 0\n+        self.shortids = []\n+        self.prefilled_txn_length = 0\n+        self.prefilled_txn = []\n+\n+    def deserialize(self, f):\n+        self.header.deserialize(f)\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.shortids_length = deser_compact_size(f)\n+        for i in range(self.shortids_length):\n+            # shortids are defined to be 6 bytes in the spec, so append\n+            # two zero bytes and read it in as an 8-byte number\n+            self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n+        self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n+        self.prefilled_txn_length = len(self.prefilled_txn)\n+\n+    # When using version 2 compact blocks, we must serialize with_witness.\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += self.header.serialize()\n+        r += struct.pack(\"<Q\", self.nonce)\n+        r += ser_compact_size(self.shortids_length)\n+        for x in self.shortids:\n+            # We only want the first 6 bytes\n+            r += struct.pack(\"<Q\", x)[0:6]\n+        if with_witness:\n+            r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.prefilled_txn)\n+        return r\n+\n+    def __repr__(self):\n+        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n+\n+# P2P version of the above that will use witness serialization (for compact\n+# block version 2)\n+class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n+    def serialize(self):\n+        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n+\n+# Calculate the BIP 152-compact blocks shortid for a given transaction hash\n+def calculate_shortid(k0, k1, tx_hash):\n+    expected_shortid = siphash256(k0, k1, tx_hash)\n+    expected_shortid &= 0x0000ffffffffffff\n+    return expected_shortid\n+\n+# This version gets rid of the array lengths, and reinterprets the differential\n+# encoding into indices that can be used for lookup.\n+class HeaderAndShortIDs():\n+    def __init__(self, p2pheaders_and_shortids = None):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids = []\n+        self.prefilled_txn = []\n+        self.use_witness = False\n+\n+        if p2pheaders_and_shortids != None:\n+            self.header = p2pheaders_and_shortids.header\n+            self.nonce = p2pheaders_and_shortids.nonce\n+            self.shortids = p2pheaders_and_shortids.shortids\n+            last_index = -1\n+            for x in p2pheaders_and_shortids.prefilled_txn:\n+                self.prefilled_txn.append(PrefilledTransaction(x.index + last_index + 1, x.tx))\n+                last_index = self.prefilled_txn[-1].index\n+\n+    def to_p2p(self):\n+        if self.use_witness:\n+            ret = P2PHeaderAndShortWitnessIDs()\n+        else:\n+            ret = P2PHeaderAndShortIDs()\n+        ret.header = self.header\n+        ret.nonce = self.nonce\n+        ret.shortids_length = len(self.shortids)\n+        ret.shortids = self.shortids\n+        ret.prefilled_txn_length = len(self.prefilled_txn)\n+        ret.prefilled_txn = []\n+        last_index = -1\n+        for x in self.prefilled_txn:\n+            ret.prefilled_txn.append(PrefilledTransaction(x.index - last_index - 1, x.tx))\n+            last_index = x.index\n+        return ret\n+\n+    def get_siphash_keys(self):\n+        header_nonce = self.header.serialize()\n+        header_nonce += struct.pack(\"<Q\", self.nonce)\n+        hash_header_nonce_as_str = sha256(header_nonce)\n+        key0 = struct.unpack(\"<Q\", hash_header_nonce_as_str[0:8])[0]\n+        key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n+        return [ key0, key1 ]\n+\n+    # Version 2 compact blocks use wtxid in shortids (rather than txid)\n+    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n+        self.header = CBlockHeader(block)\n+        self.nonce = nonce\n+        self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n+        self.shortids = []\n+        self.use_witness = use_witness\n+        [k0, k1] = self.get_siphash_keys()\n+        for i in range(len(block.vtx)):\n+            if i not in prefill_list:\n+                tx_hash = block.vtx[i].sha256\n+                if use_witness:\n+                    tx_hash = block.vtx[i].calc_sha256(with_witness=True)\n+                self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n+\n+    def __repr__(self):\n+        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n+\n+\n+class BlockTransactionsRequest():\n+\n+    def __init__(self, blockhash=0, indexes = None):\n+        self.blockhash = blockhash\n+        self.indexes = indexes if indexes != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        indexes_length = deser_compact_size(f)\n+        for i in range(indexes_length):\n+            self.indexes.append(deser_compact_size(f))\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        r += ser_compact_size(len(self.indexes))\n+        for x in self.indexes:\n+            r += ser_compact_size(x)\n+        return r\n+\n+    # helper to set the differentially encoded indexes from absolute ones\n+    def from_absolute(self, absolute_indexes):\n+        self.indexes = []\n+        last_index = -1\n+        for x in absolute_indexes:\n+            self.indexes.append(x-last_index-1)\n+            last_index = x\n+\n+    def to_absolute(self):\n+        absolute_indexes = []\n+        last_index = -1\n+        for x in self.indexes:\n+            absolute_indexes.append(x+last_index+1)\n+            last_index = absolute_indexes[-1]\n+        return absolute_indexes\n+\n+    def __repr__(self):\n+        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n+\n+\n+class BlockTransactions():\n+\n+    def __init__(self, blockhash=0, transactions = None):\n+        self.blockhash = blockhash\n+        self.transactions = transactions if transactions != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        self.transactions = deser_vector(f, CTransaction)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        if with_witness:\n+            r += ser_vector(self.transactions, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.transactions)\n+        return r\n+\n+    def __repr__(self):\n+        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n+\n+\n+# Objects that correspond to messages on the wire\n+class msg_version():\n+    command = b\"version\"\n+\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.nServices = NODE_NETWORK | NODE_WITNESS\n+        self.nTime = int(time.time())\n+        self.addrTo = CAddress()\n+        self.addrFrom = CAddress()\n+        self.nNonce = random.getrandbits(64)\n+        self.strSubVer = MY_SUBVERSION\n+        self.nStartingHeight = -1\n+        self.nRelay = MY_RELAY\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        if self.nVersion == 10300:\n+            self.nVersion = 300\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n+        self.addrTo = CAddress()\n+        self.addrTo.deserialize(f)\n+\n+        if self.nVersion >= 106:\n+            self.addrFrom = CAddress()\n+            self.addrFrom.deserialize(f)\n+            self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n+            self.strSubVer = deser_string(f)\n+        else:\n+            self.addrFrom = None\n+            self.nNonce = None\n+            self.strSubVer = None\n+            self.nStartingHeight = None\n+\n+        if self.nVersion >= 209:\n+            self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n+        else:\n+            self.nStartingHeight = None\n+\n+        if self.nVersion >= 70001:\n+            # Relay field is optional for version 70001 onwards\n+            try:\n+                self.nRelay = struct.unpack(\"<b\", f.read(1))[0]\n+            except:\n+                self.nRelay = 0\n+        else:\n+            self.nRelay = 0\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += struct.pack(\"<q\", self.nTime)\n+        r += self.addrTo.serialize()\n+        r += self.addrFrom.serialize()\n+        r += struct.pack(\"<Q\", self.nNonce)\n+        r += ser_string(self.strSubVer)\n+        r += struct.pack(\"<i\", self.nStartingHeight)\n+        r += struct.pack(\"<b\", self.nRelay)\n+        return r\n+\n+    def __repr__(self):\n+        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i nRelay=%i)' \\\n+            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n+               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n+               self.strSubVer, self.nStartingHeight, self.nRelay)\n+\n+\n+class msg_verack():\n+    command = b\"verack\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_verack()\"\n+\n+\n+class msg_addr():\n+    command = b\"addr\"\n+\n+    def __init__(self):\n+        self.addrs = []\n+\n+    def deserialize(self, f):\n+        self.addrs = deser_vector(f, CAddress)\n+\n+    def serialize(self):\n+        return ser_vector(self.addrs)\n+\n+    def __repr__(self):\n+        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n+\n+\n+class msg_inv():\n+    command = b\"inv\"\n+\n+    def __init__(self, inv=None):\n+        if inv is None:\n+            self.inv = []\n+        else:\n+            self.inv = inv\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getdata():\n+    command = b\"getdata\"\n+\n+    def __init__(self, inv=None):\n+        self.inv = inv if inv != None else []\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getblocks():\n+    command = b\"getblocks\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+class msg_tx():\n+    command = b\"tx\"\n+\n+    def __init__(self, tx=CTransaction()):\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.tx.deserialize(f)\n+\n+    def serialize(self):\n+        return self.tx.serialize_without_witness()\n+\n+    def __repr__(self):\n+        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n+\n+class msg_witness_tx(msg_tx):\n+\n+    def serialize(self):\n+        return self.tx.serialize_with_witness()\n+\n+\n+class msg_block():\n+    command = b\"block\"\n+\n+    def __init__(self, block=None):\n+        if block is None:\n+            self.block = CBlock()\n+        else:\n+            self.block = block\n+\n+    def deserialize(self, f):\n+        self.block.deserialize(f)\n+\n+    def serialize(self):\n+        return self.block.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_block(block=%s)\" % (repr(self.block))\n+\n+# for cases where a user needs tighter control over what is sent over the wire\n+# note that the user must supply the name of the command, and the data\n+class msg_generic():\n+    def __init__(self, command, data=None):\n+        self.command = command\n+        self.data = data\n+\n+    def serialize(self):\n+        return self.data\n+\n+    def __repr__(self):\n+        return \"msg_generic()\"\n+\n+class msg_witness_block(msg_block):\n+\n+    def serialize(self):\n+        r = self.block.serialize(with_witness=True)\n+        return r\n+\n+class msg_getaddr():\n+    command = b\"getaddr\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_getaddr()\"\n+\n+\n+class msg_ping():\n+    command = b\"ping\"\n+\n+    def __init__(self, nonce=0):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_ping(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_pong():\n+    command = b\"pong\"\n+\n+    def __init__(self, nonce=0):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_pong(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_mempool():\n+    command = b\"mempool\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_mempool()\"\n+\n+class msg_sendheaders():\n+    command = b\"sendheaders\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_sendheaders()\"\n+\n+\n+# getheaders message has\n+# number of entries\n+# vector of hashes\n+# hash_stop (hash of last desired block header, 0 to get as many as possible)\n+class msg_getheaders():\n+    command = b\"getheaders\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+# headers message has\n+# <count> <vector of block headers>\n+class msg_headers():\n+    command = b\"headers\"\n+\n+    def __init__(self, headers=None):\n+        self.headers = headers if headers is not None else []\n+\n+    def deserialize(self, f):\n+        # comment in bitcoind indicates these should be deserialized as blocks\n+        blocks = deser_vector(f, CBlock)\n+        for x in blocks:\n+            self.headers.append(CBlockHeader(x))\n+\n+    def serialize(self):\n+        blocks = [CBlock(x) for x in self.headers]\n+        return ser_vector(blocks)\n+\n+    def __repr__(self):\n+        return \"msg_headers(headers=%s)\" % repr(self.headers)\n+\n+\n+class msg_reject():\n+    command = b\"reject\"\n+    REJECT_MALFORMED = 1\n+\n+    def __init__(self):\n+        self.message = b\"\"\n+        self.code = 0\n+        self.reason = b\"\"\n+        self.data = 0\n+\n+    def deserialize(self, f):\n+        self.message = deser_string(f)\n+        self.code = struct.unpack(\"<B\", f.read(1))[0]\n+        self.reason = deser_string(f)\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n+            self.data = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = ser_string(self.message)\n+        r += struct.pack(\"<B\", self.code)\n+        r += ser_string(self.reason)\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n+            r += ser_uint256(self.data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_reject: %s %d %s [%064x]\" \\\n+            % (self.message, self.code, self.reason, self.data)\n+\n+class msg_feefilter():\n+    command = b\"feefilter\"\n+\n+    def __init__(self, feerate=0):\n+        self.feerate = feerate\n+\n+    def deserialize(self, f):\n+        self.feerate = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<Q\", self.feerate)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_feefilter(feerate=%08x)\" % self.feerate\n+\n+class msg_sendcmpct():\n+    command = b\"sendcmpct\"\n+\n+    def __init__(self):\n+        self.announce = False\n+        self.version = 1\n+\n+    def deserialize(self, f):\n+        self.announce = struct.unpack(\"<?\", f.read(1))[0]\n+        self.version = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<?\", self.announce)\n+        r += struct.pack(\"<Q\", self.version)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n+\n+class msg_cmpctblock():\n+    command = b\"cmpctblock\"\n+\n+    def __init__(self, header_and_shortids = None):\n+        self.header_and_shortids = header_and_shortids\n+\n+    def deserialize(self, f):\n+        self.header_and_shortids = P2PHeaderAndShortIDs()\n+        self.header_and_shortids.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.header_and_shortids.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n+\n+class msg_getblocktxn():\n+    command = b\"getblocktxn\"\n+\n+    def __init__(self):\n+        self.block_txn_request = None\n+\n+    def deserialize(self, f):\n+        self.block_txn_request = BlockTransactionsRequest()\n+        self.block_txn_request.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_txn_request.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n+\n+class msg_blocktxn():\n+    command = b\"blocktxn\"\n+\n+    def __init__(self):\n+        self.block_transactions = BlockTransactions()\n+\n+    def deserialize(self, f):\n+        self.block_transactions.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n+\n+class msg_witness_blocktxn(msg_blocktxn):\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize(with_witness=True)\n+        return r"
      },
      {
        "sha": "24c96b5681b5c503ab9fe0928280e79495f80202",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 93,
        "deletions": 1383,
        "changes": 1476,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc70a295fc5a06eca12bc91622b379a38d6a0c9/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc70a295fc5a06eca12bc91622b379a38d6a0c9/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
        "patch": "@@ -12,1337 +12,50 @@\n NodeConn: an object which manages p2p connectivity to a bitcoin node\n NodeConnCB: a base class that describes the interface for receiving\n             callbacks with network messages from a NodeConn\n-CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n-    data structures that should map to corresponding structures in\n-    bitcoin/primitives\n-msg_block, msg_tx, msg_headers, etc.:\n-    data structures that represent network messages\n-ser_*, deser_*: functions that handle serialization/deserialization\n \"\"\"\n-\n import asyncore\n-from codecs import encode\n from collections import defaultdict\n-import copy\n-import hashlib\n from io import BytesIO\n import logging\n-import random\n import socket\n import struct\n import sys\n import time\n from threading import RLock, Thread\n \n-from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n-\n-MIN_VERSION_SUPPORTED = 60001\n-MY_VERSION = 70014  # past bip-31 for ping/pong\n-MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n-MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n-\n-MAX_INV_SZ = 50000\n-MAX_BLOCK_BASE_SIZE = 1000000\n-\n-COIN = 100000000 # 1 btc in satoshis\n-\n-NODE_NETWORK = (1 << 0)\n-# NODE_GETUTXO = (1 << 1)\n-# NODE_BLOOM = (1 << 2)\n-NODE_WITNESS = (1 << 3)\n-NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n-NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n+from test_framework.messages import *\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n \n-# Keep our own socket map for asyncore, so that we can track disconnects\n-# ourselves (to workaround an issue with closing an asyncore socket when\n-# using select)\n-mininode_socket_map = dict()\n-\n-# One lock for synchronizing all data access between the networking thread (see\n-# NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n-# and whenever adding anything to the send buffer (in send_message()).  This\n-# lock should be acquired in the thread running the test logic to synchronize\n-# access to any data shared with the NodeConnCB or NodeConn.\n-mininode_lock = RLock()\n-\n-# Serialization/deserialization tools\n-def sha256(s):\n-    return hashlib.new('sha256', s).digest()\n-\n-def ripemd160(s):\n-    return hashlib.new('ripemd160', s).digest()\n-\n-def hash256(s):\n-    return sha256(sha256(s))\n-\n-def ser_compact_size(l):\n-    r = b\"\"\n-    if l < 253:\n-        r = struct.pack(\"B\", l)\n-    elif l < 0x10000:\n-        r = struct.pack(\"<BH\", 253, l)\n-    elif l < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, l)\n-    else:\n-        r = struct.pack(\"<BQ\", 255, l)\n-    return r\n-\n-def deser_compact_size(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n-    return nit\n-\n-def deser_string(f):\n-    nit = deser_compact_size(f)\n-    return f.read(nit)\n-\n-def ser_string(s):\n-    return ser_compact_size(len(s)) + s\n-\n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = struct.unpack(\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-\n-def ser_uint256(u):\n-    rs = b\"\"\n-    for i in range(8):\n-        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n-        u >>= 32\n-    return rs\n-\n-\n-def uint256_from_str(s):\n-    r = 0\n-    t = struct.unpack(\"<IIIIIIII\", s[:32])\n-    for i in range(8):\n-        r += t[i] << (i * 32)\n-    return r\n-\n-\n-def uint256_from_compact(c):\n-    nbytes = (c >> 24) & 0xFF\n-    v = (c & 0xFFFFFF) << (8 * (nbytes - 3))\n-    return v\n-\n-\n-def deser_vector(f, c):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = c()\n-        t.deserialize(f)\n-        r.append(t)\n-    return r\n-\n-\n-# ser_function_name: Allow for an alternate serialization function on the\n-# entries in the vector (we use this for serializing the vector of transactions\n-# for a witness block).\n-def ser_vector(l, ser_function_name=None):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        if ser_function_name:\n-            r += getattr(i, ser_function_name)()\n-        else:\n-            r += i.serialize()\n-    return r\n-\n-\n-def deser_uint256_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = deser_uint256(f)\n-        r.append(t)\n-    return r\n-\n-\n-def ser_uint256_vector(l):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        r += ser_uint256(i)\n-    return r\n-\n-\n-def deser_string_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = deser_string(f)\n-        r.append(t)\n-    return r\n-\n-\n-def ser_string_vector(l):\n-    r = ser_compact_size(len(l))\n-    for sv in l:\n-        r += ser_string(sv)\n-    return r\n-\n-\n-def deser_int_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = struct.unpack(\"<i\", f.read(4))[0]\n-        r.append(t)\n-    return r\n-\n-\n-def ser_int_vector(l):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        r += struct.pack(\"<i\", i)\n-    return r\n-\n-# Deserialize from a hex string representation (eg from RPC)\n-def FromHex(obj, hex_string):\n-    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n-    return obj\n-\n-# Convert a binary-serializable object to hex (eg for submission via RPC)\n-def ToHex(obj):\n-    return bytes_to_hex_str(obj.serialize())\n-\n-# Objects that map to bitcoind objects, which can be serialized/deserialized\n-\n-class CAddress():\n-    def __init__(self):\n-        self.nServices = 1\n-        self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n-        self.ip = \"0.0.0.0\"\n-        self.port = 0\n-\n-    def deserialize(self, f):\n-        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n-        self.pchReserved = f.read(12)\n-        self.ip = socket.inet_ntoa(f.read(4))\n-        self.port = struct.unpack(\">H\", f.read(2))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.nServices)\n-        r += self.pchReserved\n-        r += socket.inet_aton(self.ip)\n-        r += struct.pack(\">H\", self.port)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n-                                                         self.ip, self.port)\n-\n-MSG_WITNESS_FLAG = 1<<30\n-\n-class CInv():\n-    typemap = {\n-        0: \"Error\",\n-        1: \"TX\",\n-        2: \"Block\",\n-        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n-        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n-        4: \"CompactBlock\"\n-    }\n-\n-    def __init__(self, t=0, h=0):\n-        self.type = t\n-        self.hash = h\n-\n-    def deserialize(self, f):\n-        self.type = struct.unpack(\"<i\", f.read(4))[0]\n-        self.hash = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.type)\n-        r += ser_uint256(self.hash)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CInv(type=%s hash=%064x)\" \\\n-            % (self.typemap[self.type], self.hash)\n-\n-\n-class CBlockLocator():\n-    def __init__(self):\n-        self.nVersion = MY_VERSION\n-        self.vHave = []\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.vHave = deser_uint256_vector(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += ser_uint256_vector(self.vHave)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n-            % (self.nVersion, repr(self.vHave))\n-\n-\n-class COutPoint():\n-    def __init__(self, hash=0, n=0):\n-        self.hash = hash\n-        self.n = n\n-\n-    def deserialize(self, f):\n-        self.hash = deser_uint256(f)\n-        self.n = struct.unpack(\"<I\", f.read(4))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += ser_uint256(self.hash)\n-        r += struct.pack(\"<I\", self.n)\n-        return r\n-\n-    def __repr__(self):\n-        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n-\n-\n-class CTxIn():\n-    def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n-        if outpoint is None:\n-            self.prevout = COutPoint()\n-        else:\n-            self.prevout = outpoint\n-        self.scriptSig = scriptSig\n-        self.nSequence = nSequence\n-\n-    def deserialize(self, f):\n-        self.prevout = COutPoint()\n-        self.prevout.deserialize(f)\n-        self.scriptSig = deser_string(f)\n-        self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.prevout.serialize()\n-        r += ser_string(self.scriptSig)\n-        r += struct.pack(\"<I\", self.nSequence)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), bytes_to_hex_str(self.scriptSig),\n-               self.nSequence)\n-\n-\n-class CTxOut():\n-    def __init__(self, nValue=0, scriptPubKey=b\"\"):\n-        self.nValue = nValue\n-        self.scriptPubKey = scriptPubKey\n-\n-    def deserialize(self, f):\n-        self.nValue = struct.unpack(\"<q\", f.read(8))[0]\n-        self.scriptPubKey = deser_string(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<q\", self.nValue)\n-        r += ser_string(self.scriptPubKey)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n-            % (self.nValue // COIN, self.nValue % COIN,\n-               bytes_to_hex_str(self.scriptPubKey))\n-\n-\n-class CScriptWitness():\n-    def __init__(self):\n-        # stack is a vector of strings\n-        self.stack = []\n-\n-    def __repr__(self):\n-        return \"CScriptWitness(%s)\" % \\\n-               (\",\".join([bytes_to_hex_str(x) for x in self.stack]))\n-\n-    def is_null(self):\n-        if self.stack:\n-            return False\n-        return True\n-\n-\n-class CTxInWitness():\n-    def __init__(self):\n-        self.scriptWitness = CScriptWitness()\n-\n-    def deserialize(self, f):\n-        self.scriptWitness.stack = deser_string_vector(f)\n-\n-    def serialize(self):\n-        return ser_string_vector(self.scriptWitness.stack)\n-\n-    def __repr__(self):\n-        return repr(self.scriptWitness)\n-\n-    def is_null(self):\n-        return self.scriptWitness.is_null()\n-\n-\n-class CTxWitness():\n-    def __init__(self):\n-        self.vtxinwit = []\n-\n-    def deserialize(self, f):\n-        for i in range(len(self.vtxinwit)):\n-            self.vtxinwit[i].deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        # This is different than the usual vector serialization --\n-        # we omit the length of the vector, which is required to be\n-        # the same length as the transaction's vin vector.\n-        for x in self.vtxinwit:\n-            r += x.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"CTxWitness(%s)\" % \\\n-               (';'.join([repr(x) for x in self.vtxinwit]))\n-\n-    def is_null(self):\n-        for x in self.vtxinwit:\n-            if not x.is_null():\n-                return False\n-        return True\n-\n-\n-class CTransaction():\n-    def __init__(self, tx=None):\n-        if tx is None:\n-            self.nVersion = 1\n-            self.vin = []\n-            self.vout = []\n-            self.wit = CTxWitness()\n-            self.nLockTime = 0\n-            self.sha256 = None\n-            self.hash = None\n-        else:\n-            self.nVersion = tx.nVersion\n-            self.vin = copy.deepcopy(tx.vin)\n-            self.vout = copy.deepcopy(tx.vout)\n-            self.nLockTime = tx.nLockTime\n-            self.sha256 = tx.sha256\n-            self.hash = tx.hash\n-            self.wit = copy.deepcopy(tx.wit)\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.vin = deser_vector(f, CTxIn)\n-        flags = 0\n-        if len(self.vin) == 0:\n-            flags = struct.unpack(\"<B\", f.read(1))[0]\n-            # Not sure why flags can't be zero, but this\n-            # matches the implementation in bitcoind\n-            if (flags != 0):\n-                self.vin = deser_vector(f, CTxIn)\n-                self.vout = deser_vector(f, CTxOut)\n-        else:\n-            self.vout = deser_vector(f, CTxOut)\n-        if flags != 0:\n-            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n-            self.wit.deserialize(f)\n-        self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n-        self.sha256 = None\n-        self.hash = None\n-\n-    def serialize_without_witness(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += ser_vector(self.vin)\n-        r += ser_vector(self.vout)\n-        r += struct.pack(\"<I\", self.nLockTime)\n-        return r\n-\n-    # Only serialize with witness when explicitly called for\n-    def serialize_with_witness(self):\n-        flags = 0\n-        if not self.wit.is_null():\n-            flags |= 1\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        if flags:\n-            dummy = []\n-            r += ser_vector(dummy)\n-            r += struct.pack(\"<B\", flags)\n-        r += ser_vector(self.vin)\n-        r += ser_vector(self.vout)\n-        if flags & 1:\n-            if (len(self.wit.vtxinwit) != len(self.vin)):\n-                # vtxinwit must have the same length as vin\n-                self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n-                for i in range(len(self.wit.vtxinwit), len(self.vin)):\n-                    self.wit.vtxinwit.append(CTxInWitness())\n-            r += self.wit.serialize()\n-        r += struct.pack(\"<I\", self.nLockTime)\n-        return r\n-\n-    # Regular serialization is without witness -- must explicitly\n-    # call serialize_with_witness to include witness data.\n-    def serialize(self):\n-        return self.serialize_without_witness()\n-\n-    # Recalculate the txid (transaction hash without witness)\n-    def rehash(self):\n-        self.sha256 = None\n-        self.calc_sha256()\n-\n-    # We will only cache the serialization without witness in\n-    # self.sha256 and self.hash -- those are expected to be the txid.\n-    def calc_sha256(self, with_witness=False):\n-        if with_witness:\n-            # Don't cache the result, just return it\n-            return uint256_from_str(hash256(self.serialize_with_witness()))\n-\n-        if self.sha256 is None:\n-            self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n-        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n-\n-    def is_valid(self):\n-        self.calc_sha256()\n-        for tout in self.vout:\n-            if tout.nValue < 0 or tout.nValue > 21000000 * COIN:\n-                return False\n-        return True\n-\n-    def __repr__(self):\n-        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n-            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n-\n-\n-class CBlockHeader():\n-    def __init__(self, header=None):\n-        if header is None:\n-            self.set_null()\n-        else:\n-            self.nVersion = header.nVersion\n-            self.hashPrevBlock = header.hashPrevBlock\n-            self.hashMerkleRoot = header.hashMerkleRoot\n-            self.nTime = header.nTime\n-            self.nBits = header.nBits\n-            self.nNonce = header.nNonce\n-            self.sha256 = header.sha256\n-            self.hash = header.hash\n-            self.calc_sha256()\n-\n-    def set_null(self):\n-        self.nVersion = 1\n-        self.hashPrevBlock = 0\n-        self.hashMerkleRoot = 0\n-        self.nTime = 0\n-        self.nBits = 0\n-        self.nNonce = 0\n-        self.sha256 = None\n-        self.hash = None\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.hashPrevBlock = deser_uint256(f)\n-        self.hashMerkleRoot = deser_uint256(f)\n-        self.nTime = struct.unpack(\"<I\", f.read(4))[0]\n-        self.nBits = struct.unpack(\"<I\", f.read(4))[0]\n-        self.nNonce = struct.unpack(\"<I\", f.read(4))[0]\n-        self.sha256 = None\n-        self.hash = None\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += ser_uint256(self.hashPrevBlock)\n-        r += ser_uint256(self.hashMerkleRoot)\n-        r += struct.pack(\"<I\", self.nTime)\n-        r += struct.pack(\"<I\", self.nBits)\n-        r += struct.pack(\"<I\", self.nNonce)\n-        return r\n-\n-    def calc_sha256(self):\n-        if self.sha256 is None:\n-            r = b\"\"\n-            r += struct.pack(\"<i\", self.nVersion)\n-            r += ser_uint256(self.hashPrevBlock)\n-            r += ser_uint256(self.hashMerkleRoot)\n-            r += struct.pack(\"<I\", self.nTime)\n-            r += struct.pack(\"<I\", self.nBits)\n-            r += struct.pack(\"<I\", self.nNonce)\n-            self.sha256 = uint256_from_str(hash256(r))\n-            self.hash = encode(hash256(r)[::-1], 'hex_codec').decode('ascii')\n-\n-    def rehash(self):\n-        self.sha256 = None\n-        self.calc_sha256()\n-        return self.sha256\n-\n-    def __repr__(self):\n-        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n-            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n-               time.ctime(self.nTime), self.nBits, self.nNonce)\n-\n-\n-class CBlock(CBlockHeader):\n-    def __init__(self, header=None):\n-        super(CBlock, self).__init__(header)\n-        self.vtx = []\n-\n-    def deserialize(self, f):\n-        super(CBlock, self).deserialize(f)\n-        self.vtx = deser_vector(f, CTransaction)\n-\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += super(CBlock, self).serialize()\n-        if with_witness:\n-            r += ser_vector(self.vtx, \"serialize_with_witness\")\n-        else:\n-            r += ser_vector(self.vtx)\n-        return r\n-\n-    # Calculate the merkle root given a vector of transaction hashes\n-    @classmethod\n-    def get_merkle_root(cls, hashes):\n-        while len(hashes) > 1:\n-            newhashes = []\n-            for i in range(0, len(hashes), 2):\n-                i2 = min(i+1, len(hashes)-1)\n-                newhashes.append(hash256(hashes[i] + hashes[i2]))\n-            hashes = newhashes\n-        return uint256_from_str(hashes[0])\n-\n-    def calc_merkle_root(self):\n-        hashes = []\n-        for tx in self.vtx:\n-            tx.calc_sha256()\n-            hashes.append(ser_uint256(tx.sha256))\n-        return self.get_merkle_root(hashes)\n-\n-    def calc_witness_merkle_root(self):\n-        # For witness root purposes, the hash of the\n-        # coinbase, with witness, is defined to be 0...0\n-        hashes = [ser_uint256(0)]\n-\n-        for tx in self.vtx[1:]:\n-            # Calculate the hashes with witness data\n-            hashes.append(ser_uint256(tx.calc_sha256(True)))\n-\n-        return self.get_merkle_root(hashes)\n-\n-    def is_valid(self):\n-        self.calc_sha256()\n-        target = uint256_from_compact(self.nBits)\n-        if self.sha256 > target:\n-            return False\n-        for tx in self.vtx:\n-            if not tx.is_valid():\n-                return False\n-        if self.calc_merkle_root() != self.hashMerkleRoot:\n-            return False\n-        return True\n-\n-    def solve(self):\n-        self.rehash()\n-        target = uint256_from_compact(self.nBits)\n-        while self.sha256 > target:\n-            self.nNonce += 1\n-            self.rehash()\n-\n-    def __repr__(self):\n-        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n-            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n-               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n-\n-\n-class PrefilledTransaction():\n-    def __init__(self, index=0, tx = None):\n-        self.index = index\n-        self.tx = tx\n-\n-    def deserialize(self, f):\n-        self.index = deser_compact_size(f)\n-        self.tx = CTransaction()\n-        self.tx.deserialize(f)\n-\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += ser_compact_size(self.index)\n-        if with_witness:\n-            r += self.tx.serialize_with_witness()\n-        else:\n-            r += self.tx.serialize_without_witness()\n-        return r\n-\n-    def serialize_with_witness(self):\n-        return self.serialize(with_witness=True)\n-\n-    def __repr__(self):\n-        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n-\n-# This is what we send on the wire, in a cmpctblock message.\n-class P2PHeaderAndShortIDs():\n-    def __init__(self):\n-        self.header = CBlockHeader()\n-        self.nonce = 0\n-        self.shortids_length = 0\n-        self.shortids = []\n-        self.prefilled_txn_length = 0\n-        self.prefilled_txn = []\n-\n-    def deserialize(self, f):\n-        self.header.deserialize(f)\n-        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n-        self.shortids_length = deser_compact_size(f)\n-        for i in range(self.shortids_length):\n-            # shortids are defined to be 6 bytes in the spec, so append\n-            # two zero bytes and read it in as an 8-byte number\n-            self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n-        self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n-        self.prefilled_txn_length = len(self.prefilled_txn)\n-\n-    # When using version 2 compact blocks, we must serialize with_witness.\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += self.header.serialize()\n-        r += struct.pack(\"<Q\", self.nonce)\n-        r += ser_compact_size(self.shortids_length)\n-        for x in self.shortids:\n-            # We only want the first 6 bytes\n-            r += struct.pack(\"<Q\", x)[0:6]\n-        if with_witness:\n-            r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n-        else:\n-            r += ser_vector(self.prefilled_txn)\n-        return r\n-\n-    def __repr__(self):\n-        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n-\n-# P2P version of the above that will use witness serialization (for compact\n-# block version 2)\n-class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n-    def serialize(self):\n-        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n-\n-# Calculate the BIP 152-compact blocks shortid for a given transaction hash\n-def calculate_shortid(k0, k1, tx_hash):\n-    expected_shortid = siphash256(k0, k1, tx_hash)\n-    expected_shortid &= 0x0000ffffffffffff\n-    return expected_shortid\n-\n-# This version gets rid of the array lengths, and reinterprets the differential\n-# encoding into indices that can be used for lookup.\n-class HeaderAndShortIDs():\n-    def __init__(self, p2pheaders_and_shortids = None):\n-        self.header = CBlockHeader()\n-        self.nonce = 0\n-        self.shortids = []\n-        self.prefilled_txn = []\n-        self.use_witness = False\n-\n-        if p2pheaders_and_shortids != None:\n-            self.header = p2pheaders_and_shortids.header\n-            self.nonce = p2pheaders_and_shortids.nonce\n-            self.shortids = p2pheaders_and_shortids.shortids\n-            last_index = -1\n-            for x in p2pheaders_and_shortids.prefilled_txn:\n-                self.prefilled_txn.append(PrefilledTransaction(x.index + last_index + 1, x.tx))\n-                last_index = self.prefilled_txn[-1].index\n-\n-    def to_p2p(self):\n-        if self.use_witness:\n-            ret = P2PHeaderAndShortWitnessIDs()\n-        else:\n-            ret = P2PHeaderAndShortIDs()\n-        ret.header = self.header\n-        ret.nonce = self.nonce\n-        ret.shortids_length = len(self.shortids)\n-        ret.shortids = self.shortids\n-        ret.prefilled_txn_length = len(self.prefilled_txn)\n-        ret.prefilled_txn = []\n-        last_index = -1\n-        for x in self.prefilled_txn:\n-            ret.prefilled_txn.append(PrefilledTransaction(x.index - last_index - 1, x.tx))\n-            last_index = x.index\n-        return ret\n-\n-    def get_siphash_keys(self):\n-        header_nonce = self.header.serialize()\n-        header_nonce += struct.pack(\"<Q\", self.nonce)\n-        hash_header_nonce_as_str = sha256(header_nonce)\n-        key0 = struct.unpack(\"<Q\", hash_header_nonce_as_str[0:8])[0]\n-        key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n-        return [ key0, key1 ]\n-\n-    # Version 2 compact blocks use wtxid in shortids (rather than txid)\n-    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n-        self.header = CBlockHeader(block)\n-        self.nonce = nonce\n-        self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n-        self.shortids = []\n-        self.use_witness = use_witness\n-        [k0, k1] = self.get_siphash_keys()\n-        for i in range(len(block.vtx)):\n-            if i not in prefill_list:\n-                tx_hash = block.vtx[i].sha256\n-                if use_witness:\n-                    tx_hash = block.vtx[i].calc_sha256(with_witness=True)\n-                self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n-\n-    def __repr__(self):\n-        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n-\n-\n-class BlockTransactionsRequest():\n-\n-    def __init__(self, blockhash=0, indexes = None):\n-        self.blockhash = blockhash\n-        self.indexes = indexes if indexes != None else []\n-\n-    def deserialize(self, f):\n-        self.blockhash = deser_uint256(f)\n-        indexes_length = deser_compact_size(f)\n-        for i in range(indexes_length):\n-            self.indexes.append(deser_compact_size(f))\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += ser_uint256(self.blockhash)\n-        r += ser_compact_size(len(self.indexes))\n-        for x in self.indexes:\n-            r += ser_compact_size(x)\n-        return r\n-\n-    # helper to set the differentially encoded indexes from absolute ones\n-    def from_absolute(self, absolute_indexes):\n-        self.indexes = []\n-        last_index = -1\n-        for x in absolute_indexes:\n-            self.indexes.append(x-last_index-1)\n-            last_index = x\n-\n-    def to_absolute(self):\n-        absolute_indexes = []\n-        last_index = -1\n-        for x in self.indexes:\n-            absolute_indexes.append(x+last_index+1)\n-            last_index = absolute_indexes[-1]\n-        return absolute_indexes\n-\n-    def __repr__(self):\n-        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n-\n-\n-class BlockTransactions():\n-\n-    def __init__(self, blockhash=0, transactions = None):\n-        self.blockhash = blockhash\n-        self.transactions = transactions if transactions != None else []\n-\n-    def deserialize(self, f):\n-        self.blockhash = deser_uint256(f)\n-        self.transactions = deser_vector(f, CTransaction)\n-\n-    def serialize(self, with_witness=False):\n-        r = b\"\"\n-        r += ser_uint256(self.blockhash)\n-        if with_witness:\n-            r += ser_vector(self.transactions, \"serialize_with_witness\")\n-        else:\n-            r += ser_vector(self.transactions)\n-        return r\n-\n-    def __repr__(self):\n-        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n-\n-\n-# Objects that correspond to messages on the wire\n-class msg_version():\n-    command = b\"version\"\n-\n-    def __init__(self):\n-        self.nVersion = MY_VERSION\n-        self.nServices = NODE_NETWORK | NODE_WITNESS\n-        self.nTime = int(time.time())\n-        self.addrTo = CAddress()\n-        self.addrFrom = CAddress()\n-        self.nNonce = random.getrandbits(64)\n-        self.strSubVer = MY_SUBVERSION\n-        self.nStartingHeight = -1\n-        self.nRelay = MY_RELAY\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        if self.nVersion == 10300:\n-            self.nVersion = 300\n-        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n-        self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n-        self.addrTo = CAddress()\n-        self.addrTo.deserialize(f)\n-\n-        if self.nVersion >= 106:\n-            self.addrFrom = CAddress()\n-            self.addrFrom.deserialize(f)\n-            self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n-            self.strSubVer = deser_string(f)\n-        else:\n-            self.addrFrom = None\n-            self.nNonce = None\n-            self.strSubVer = None\n-            self.nStartingHeight = None\n-\n-        if self.nVersion >= 209:\n-            self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n-        else:\n-            self.nStartingHeight = None\n-\n-        if self.nVersion >= 70001:\n-            # Relay field is optional for version 70001 onwards\n-            try:\n-                self.nRelay = struct.unpack(\"<b\", f.read(1))[0]\n-            except:\n-                self.nRelay = 0\n-        else:\n-            self.nRelay = 0\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += struct.pack(\"<Q\", self.nServices)\n-        r += struct.pack(\"<q\", self.nTime)\n-        r += self.addrTo.serialize()\n-        r += self.addrFrom.serialize()\n-        r += struct.pack(\"<Q\", self.nNonce)\n-        r += ser_string(self.strSubVer)\n-        r += struct.pack(\"<i\", self.nStartingHeight)\n-        r += struct.pack(\"<b\", self.nRelay)\n-        return r\n-\n-    def __repr__(self):\n-        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i nRelay=%i)' \\\n-            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n-               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n-               self.strSubVer, self.nStartingHeight, self.nRelay)\n-\n-\n-class msg_verack():\n-    command = b\"verack\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_verack()\"\n-\n-\n-class msg_addr():\n-    command = b\"addr\"\n-\n-    def __init__(self):\n-        self.addrs = []\n-\n-    def deserialize(self, f):\n-        self.addrs = deser_vector(f, CAddress)\n-\n-    def serialize(self):\n-        return ser_vector(self.addrs)\n-\n-    def __repr__(self):\n-        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n-\n-\n-class msg_inv():\n-    command = b\"inv\"\n-\n-    def __init__(self, inv=None):\n-        if inv is None:\n-            self.inv = []\n-        else:\n-            self.inv = inv\n-\n-    def deserialize(self, f):\n-        self.inv = deser_vector(f, CInv)\n-\n-    def serialize(self):\n-        return ser_vector(self.inv)\n-\n-    def __repr__(self):\n-        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n-\n-\n-class msg_getdata():\n-    command = b\"getdata\"\n-\n-    def __init__(self, inv=None):\n-        self.inv = inv if inv != None else []\n-\n-    def deserialize(self, f):\n-        self.inv = deser_vector(f, CInv)\n-\n-    def serialize(self):\n-        return ser_vector(self.inv)\n-\n-    def __repr__(self):\n-        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n-\n-\n-class msg_getblocks():\n-    command = b\"getblocks\"\n-\n-    def __init__(self):\n-        self.locator = CBlockLocator()\n-        self.hashstop = 0\n-\n-    def deserialize(self, f):\n-        self.locator = CBlockLocator()\n-        self.locator.deserialize(f)\n-        self.hashstop = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.locator.serialize()\n-        r += ser_uint256(self.hashstop)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n-            % (repr(self.locator), self.hashstop)\n-\n-\n-class msg_tx():\n-    command = b\"tx\"\n-\n-    def __init__(self, tx=CTransaction()):\n-        self.tx = tx\n-\n-    def deserialize(self, f):\n-        self.tx.deserialize(f)\n-\n-    def serialize(self):\n-        return self.tx.serialize_without_witness()\n-\n-    def __repr__(self):\n-        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n-\n-class msg_witness_tx(msg_tx):\n-\n-    def serialize(self):\n-        return self.tx.serialize_with_witness()\n-\n-\n-class msg_block():\n-    command = b\"block\"\n-\n-    def __init__(self, block=None):\n-        if block is None:\n-            self.block = CBlock()\n-        else:\n-            self.block = block\n-\n-    def deserialize(self, f):\n-        self.block.deserialize(f)\n-\n-    def serialize(self):\n-        return self.block.serialize()\n-\n-    def __repr__(self):\n-        return \"msg_block(block=%s)\" % (repr(self.block))\n-\n-# for cases where a user needs tighter control over what is sent over the wire\n-# note that the user must supply the name of the command, and the data\n-class msg_generic():\n-    def __init__(self, command, data=None):\n-        self.command = command\n-        self.data = data\n-\n-    def serialize(self):\n-        return self.data\n-\n-    def __repr__(self):\n-        return \"msg_generic()\"\n-\n-class msg_witness_block(msg_block):\n-\n-    def serialize(self):\n-        r = self.block.serialize(with_witness=True)\n-        return r\n-\n-class msg_getaddr():\n-    command = b\"getaddr\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_getaddr()\"\n-\n-\n-class msg_ping():\n-    command = b\"ping\"\n-\n-    def __init__(self, nonce=0):\n-        self.nonce = nonce\n-\n-    def deserialize(self, f):\n-        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.nonce)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_ping(nonce=%08x)\" % self.nonce\n-\n-\n-class msg_pong():\n-    command = b\"pong\"\n-\n-    def __init__(self, nonce=0):\n-        self.nonce = nonce\n-\n-    def deserialize(self, f):\n-        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.nonce)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_pong(nonce=%08x)\" % self.nonce\n-\n-\n-class msg_mempool():\n-    command = b\"mempool\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_mempool()\"\n-\n-class msg_sendheaders():\n-    command = b\"sendheaders\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_sendheaders()\"\n-\n-\n-# getheaders message has\n-# number of entries\n-# vector of hashes\n-# hash_stop (hash of last desired block header, 0 to get as many as possible)\n-class msg_getheaders():\n-    command = b\"getheaders\"\n-\n-    def __init__(self):\n-        self.locator = CBlockLocator()\n-        self.hashstop = 0\n-\n-    def deserialize(self, f):\n-        self.locator = CBlockLocator()\n-        self.locator.deserialize(f)\n-        self.hashstop = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.locator.serialize()\n-        r += ser_uint256(self.hashstop)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n-            % (repr(self.locator), self.hashstop)\n-\n-\n-# headers message has\n-# <count> <vector of block headers>\n-class msg_headers():\n-    command = b\"headers\"\n-\n-    def __init__(self, headers=None):\n-        self.headers = headers if headers is not None else []\n-\n-    def deserialize(self, f):\n-        # comment in bitcoind indicates these should be deserialized as blocks\n-        blocks = deser_vector(f, CBlock)\n-        for x in blocks:\n-            self.headers.append(CBlockHeader(x))\n-\n-    def serialize(self):\n-        blocks = [CBlock(x) for x in self.headers]\n-        return ser_vector(blocks)\n-\n-    def __repr__(self):\n-        return \"msg_headers(headers=%s)\" % repr(self.headers)\n-\n-\n-class msg_reject():\n-    command = b\"reject\"\n-    REJECT_MALFORMED = 1\n-\n-    def __init__(self):\n-        self.message = b\"\"\n-        self.code = 0\n-        self.reason = b\"\"\n-        self.data = 0\n-\n-    def deserialize(self, f):\n-        self.message = deser_string(f)\n-        self.code = struct.unpack(\"<B\", f.read(1))[0]\n-        self.reason = deser_string(f)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n-            self.data = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = ser_string(self.message)\n-        r += struct.pack(\"<B\", self.code)\n-        r += ser_string(self.reason)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n-            r += ser_uint256(self.data)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_reject: %s %d %s [%064x]\" \\\n-            % (self.message, self.code, self.reason, self.data)\n-\n-class msg_feefilter():\n-    command = b\"feefilter\"\n-\n-    def __init__(self, feerate=0):\n-        self.feerate = feerate\n-\n-    def deserialize(self, f):\n-        self.feerate = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<Q\", self.feerate)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_feefilter(feerate=%08x)\" % self.feerate\n-\n-class msg_sendcmpct():\n-    command = b\"sendcmpct\"\n-\n-    def __init__(self):\n-        self.announce = False\n-        self.version = 1\n-\n-    def deserialize(self, f):\n-        self.announce = struct.unpack(\"<?\", f.read(1))[0]\n-        self.version = struct.unpack(\"<Q\", f.read(8))[0]\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<?\", self.announce)\n-        r += struct.pack(\"<Q\", self.version)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n-\n-class msg_cmpctblock():\n-    command = b\"cmpctblock\"\n-\n-    def __init__(self, header_and_shortids = None):\n-        self.header_and_shortids = header_and_shortids\n-\n-    def deserialize(self, f):\n-        self.header_and_shortids = P2PHeaderAndShortIDs()\n-        self.header_and_shortids.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.header_and_shortids.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n-\n-class msg_getblocktxn():\n-    command = b\"getblocktxn\"\n-\n-    def __init__(self):\n-        self.block_txn_request = None\n-\n-    def deserialize(self, f):\n-        self.block_txn_request = BlockTransactionsRequest()\n-        self.block_txn_request.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.block_txn_request.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n-\n-class msg_blocktxn():\n-    command = b\"blocktxn\"\n-\n-    def __init__(self):\n-        self.block_transactions = BlockTransactions()\n-\n-    def deserialize(self, f):\n-        self.block_transactions.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.block_transactions.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n-\n-class msg_witness_blocktxn(msg_blocktxn):\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.block_transactions.serialize(with_witness=True)\n-        return r\n+MESSAGEMAP = {\n+    b\"addr\": msg_addr,\n+    b\"block\": msg_block,\n+    b\"blocktxn\": msg_blocktxn,\n+    b\"cmpctblock\": msg_cmpctblock,\n+    b\"feefilter\": msg_feefilter,\n+    b\"getaddr\": msg_getaddr,\n+    b\"getblocks\": msg_getblocks,\n+    b\"getblocktxn\": msg_getblocktxn,\n+    b\"getdata\": msg_getdata,\n+    b\"getheaders\": msg_getheaders,\n+    b\"headers\": msg_headers,\n+    b\"inv\": msg_inv,\n+    b\"mempool\": msg_mempool,\n+    b\"ping\": msg_ping,\n+    b\"pong\": msg_pong,\n+    b\"reject\": msg_reject,\n+    b\"sendcmpct\": msg_sendcmpct,\n+    b\"sendheaders\": msg_sendheaders,\n+    b\"tx\": msg_tx,\n+    b\"verack\": msg_verack,\n+    b\"version\": msg_version,\n+}\n+\n+MAGIC_BYTES = {\n+    \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+    \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n+    \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+}\n \n class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n@@ -1486,34 +199,6 @@ class NodeConn(asyncore.dispatcher):\n     \"\"\"The actual NodeConn class\n \n     This class provides an interface for a p2p connection to a specified node.\"\"\"\n-    messagemap = {\n-        b\"version\": msg_version,\n-        b\"verack\": msg_verack,\n-        b\"addr\": msg_addr,\n-        b\"inv\": msg_inv,\n-        b\"getdata\": msg_getdata,\n-        b\"getblocks\": msg_getblocks,\n-        b\"tx\": msg_tx,\n-        b\"block\": msg_block,\n-        b\"getaddr\": msg_getaddr,\n-        b\"ping\": msg_ping,\n-        b\"pong\": msg_pong,\n-        b\"headers\": msg_headers,\n-        b\"getheaders\": msg_getheaders,\n-        b\"reject\": msg_reject,\n-        b\"mempool\": msg_mempool,\n-        b\"feefilter\": msg_feefilter,\n-        b\"sendheaders\": msg_sendheaders,\n-        b\"sendcmpct\": msg_sendcmpct,\n-        b\"cmpctblock\": msg_cmpctblock,\n-        b\"getblocktxn\": msg_getblocktxn,\n-        b\"blocktxn\": msg_blocktxn\n-    }\n-    MAGIC_BYTES = {\n-        \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n-        \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n-    }\n \n     def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n@@ -1547,6 +232,8 @@ def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETW\n         except:\n             self.handle_close()\n \n+    # Connection and disconnection methods\n+\n     def handle_connect(self):\n         if self.state != \"connected\":\n             logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n@@ -1564,44 +251,30 @@ def handle_close(self):\n             pass\n         self.cb.on_close(self)\n \n+    def disconnect_node(self):\n+        \"\"\" Disconnect the p2p connection.\n+\n+        Called by the test logic thread. Causes the p2p connection\n+        to be disconnected on the next iteration of the asyncore loop.\"\"\"\n+        self.disconnect = True\n+\n+    # Socket read methods\n+\n+    def readable(self):\n+        return True\n+\n     def handle_read(self):\n         t = self.recv(8192)\n         if len(t) > 0:\n             self.recvbuf += t\n             self.got_data()\n \n-    def readable(self):\n-        return True\n-\n-    def writable(self):\n-        with mininode_lock:\n-            pre_connection = self.state == \"connecting\"\n-            length = len(self.sendbuf)\n-        return (length > 0 or pre_connection)\n-\n-    def handle_write(self):\n-        with mininode_lock:\n-            # asyncore does not expose socket connection, only the first read/write\n-            # event, thus we must check connection manually here to know when we\n-            # actually connect\n-            if self.state == \"connecting\":\n-                self.handle_connect()\n-            if not self.writable():\n-                return\n-\n-            try:\n-                sent = self.send(self.sendbuf)\n-            except:\n-                self.handle_close()\n-                return\n-            self.sendbuf = self.sendbuf[sent:]\n-\n     def got_data(self):\n         try:\n             while True:\n                 if len(self.recvbuf) < 4:\n                     return\n-                if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n+                if self.recvbuf[:4] != MAGIC_BYTES[self.network]:\n                     raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n                 if len(self.recvbuf) < 4 + 12 + 4 + 4:\n                     return\n@@ -1616,23 +289,54 @@ def got_data(self):\n                 if checksum != h[:4]:\n                     raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n                 self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n-                if command not in self.messagemap:\n+                if command not in MESSAGEMAP:\n                     raise ValueError(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n                 f = BytesIO(msg)\n-                t = self.messagemap[command]()\n+                t = MESSAGEMAP[command]()\n                 t.deserialize(f)\n                 self.got_message(t)\n         except Exception as e:\n             logger.exception('Error reading message:', repr(e))\n             raise\n \n+    def got_message(self, message):\n+        if self.last_sent + 30 * 60 < time.time():\n+            self.send_message(MESSAGEMAP[b'ping']())\n+        self._log_message(\"receive\", message)\n+        self.cb.deliver(self, message)\n+\n+    # Socket write methods\n+\n+    def writable(self):\n+        with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n+            length = len(self.sendbuf)\n+        return (length > 0 or pre_connection)\n+\n+    def handle_write(self):\n+        with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n+            try:\n+                sent = self.send(self.sendbuf)\n+            except:\n+                self.handle_close()\n+                return\n+            self.sendbuf = self.sendbuf[sent:]\n+\n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n         self._log_message(\"send\", message)\n         command = message.command\n         data = message.serialize()\n-        tmsg = self.MAGIC_BYTES[self.network]\n+        tmsg = MAGIC_BYTES[self.network]\n         tmsg += command\n         tmsg += b\"\\x00\" * (12 - len(command))\n         tmsg += struct.pack(\"<I\", len(data))\n@@ -1651,11 +355,7 @@ def send_message(self, message, pushbuf=False):\n                 self.sendbuf += tmsg\n             self.last_sent = time.time()\n \n-    def got_message(self, message):\n-        if self.last_sent + 30 * 60 < time.time():\n-            self.send_message(self.messagemap[b'ping']())\n-        self._log_message(\"receive\", message)\n-        self.cb.deliver(self, message)\n+    # Class utility methods\n \n     def _log_message(self, direction, msg):\n         if direction == \"send\":\n@@ -1667,9 +367,19 @@ def _log_message(self, direction, msg):\n             log_message += \"... (msg truncated)\"\n         logger.debug(log_message)\n \n-    def disconnect_node(self):\n-        self.disconnect = True\n \n+# Keep our own socket map for asyncore, so that we can track disconnects\n+# ourselves (to workaround an issue with closing an asyncore socket when\n+# using select)\n+mininode_socket_map = dict()\n+\n+# One lock for synchronizing all data access between the networking thread (see\n+# NetworkThread below) and the thread running the test logic.  For simplicity,\n+# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n+# and whenever adding anything to the send buffer (in send_message()).  This\n+# lock should be acquired in the thread running the test logic to synchronize\n+# access to any data shared with the NodeConnCB or NodeConn.\n+mininode_lock = RLock()\n \n class NetworkThread(Thread):\n     def run(self):\n@@ -1681,6 +391,6 @@ def run(self):\n             for fd, obj in mininode_socket_map.items():\n                 if obj.disconnect:\n                     disconnected.append(obj)\n-            [ obj.handle_close() for obj in disconnected ]\n+            [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")"
      }
    ]
  },
  {
    "sha": "1f7695b4194bd1d3872c9e91ad9ee271670894ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjc2OTViNDE5NGJkMWQzODcyYzllOTFhZDllZTI3MTY3MDg5NGVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:03:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:04:02Z"
      },
      "message": "Merge #11621: [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck\n\na7c949f [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck (fanquake)\n\nPull request description:\n\n  Fixes #11302\n\n  Tested on OS X 10.12.6 with 0e707919f596c80056bca295abd71543ccae4956\n\n  Was failing like:\n  ```\n  make distclean\n  ....\n  rm -f config.status config.cache config.log configure.lineno config.status.lineno\n  rm -f Makefile\n  ERROR: files left in build directory after distclean:\n  ./src/qt/temp_bitcoin_locale.qrc\n  make[1]: *** [distcleancheck] Error 1\n  make: *** [distcheck] Error 1\n  ```\n\nTree-SHA512: 291c786f20a82e648fdee2bcbc654d93d9abeb7d996ae7706d304697d4952709a0ec5d3aa88d1214f22cfe81ced88f10c187929904eecd60f2165b696727dd88",
      "tree": {
        "sha": "3e4db8e0759d222123742b8ac760d7be34eae699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e4db8e0759d222123742b8ac760d7be34eae699"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f7695b4194bd1d3872c9e91ad9ee271670894ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDt5CAAoJEB5K7WKYbNJdW+IH/R3QxJ2uCnOh/eCv1CVmbA6A\nkn1DLvNRnhzyd2weSyleiwJxSWrpY5561+xxK/Hmu3mEYcXrV1UpnoaCPvTDI6Dr\nXsOHHGl60VvHrqfBs/2f3et/dc/E6yyNQUVDF6cHok9GauyQOSZDVfF6c3Xr4HOQ\nLJ5pCosgbPt9ryI3rvG0CB7SqcykC05OYPPQpNNP/cIu4lfmn+l6mDJmvIQFXM4M\nJwjc1v+iIyIqQAs2k3HjzHW00gBF1wHPkTts37ZhyLFzbfjH3bYOAsucO1+Nf8+8\nONSxyvx0nQLj1lHMYOsNpORKQEr1iNNnVFqNzb3y10T6+AEDkYhxS6RsEguTMFA=\n=lDlQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e4db8e0759d222123742b8ac760d7be34eae699\nparent ccc70a295fc5a06eca12bc91622b379a38d6a0c9\nparent a7c949f644d82a5b97617256fa5e8cc511b8aa5f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510923838 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510923842 +0100\n\nMerge #11621: [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck\n\na7c949f [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck (fanquake)\n\nPull request description:\n\n  Fixes #11302\n\n  Tested on OS X 10.12.6 with 0e707919f596c80056bca295abd71543ccae4956\n\n  Was failing like:\n  ```\n  make distclean\n  ....\n  rm -f config.status config.cache config.log configure.lineno config.status.lineno\n  rm -f Makefile\n  ERROR: files left in build directory after distclean:\n  ./src/qt/temp_bitcoin_locale.qrc\n  make[1]: *** [distcleancheck] Error 1\n  make: *** [distcheck] Error 1\n  ```\n\nTree-SHA512: 291c786f20a82e648fdee2bcbc654d93d9abeb7d996ae7706d304697d4952709a0ec5d3aa88d1214f22cfe81ced88f10c187929904eecd60f2165b696727dd88\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7695b4194bd1d3872c9e91ad9ee271670894ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7695b4194bd1d3872c9e91ad9ee271670894ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7695b4194bd1d3872c9e91ad9ee271670894ea/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc70a295fc5a06eca12bc91622b379a38d6a0c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc70a295fc5a06eca12bc91622b379a38d6a0c9"
      },
      {
        "sha": "a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7c949f644d82a5b97617256fa5e8cc511b8aa5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7c949f644d82a5b97617256fa5e8cc511b8aa5f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0bdde067721e0e479dbc488d573056280081162b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f7695b4194bd1d3872c9e91ad9ee271670894ea/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f7695b4194bd1d3872c9e91ad9ee271670894ea/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=1f7695b4194bd1d3872c9e91ad9ee271670894ea",
        "patch": "@@ -438,7 +438,7 @@ $(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n-CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno\n+CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno qt/temp_bitcoin_locale.qrc\n \n CLEANFILES += $(CLEAN_QT)\n "
      }
    ]
  },
  {
    "sha": "595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTVlYzExZDgwNGYxZjNhOTJjNDZmMTk1ODZjMjgzZjlhOWZmYjRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:19:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:19:41Z"
      },
      "message": "Merge #11700: Add gitian PGP key: willyko\n\nf88d900 Add gitian PGP key: willyko (Willy Ko)\n\nPull request description:\n\n  First gitian sig: [https://github.com/bitcoin-core/gitian.sigs/pull/619](url)\n\nTree-SHA512: 3e6b017bd982a05d9a966948292b2d9a95e1bff6f28139a6a7545d63d7320f77d257fa0628c4fe28b39b8ae844be521dfb6224b1611e1e9d0fa49e7bceacb27c",
      "tree": {
        "sha": "df5b794be7a30015c18a72826b4891a3c3433f5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df5b794be7a30015c18a72826b4891a3c3433f5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDuHtAAoJEB5K7WKYbNJdWF4H/i5NCRL3vKp5XqnQeesGK24q\n3fZfG/WVWckBk5hG6kj3AZHh2a6K4voGdcxpEUNb6Rkri3k0FSfNB0rK27zSgmup\n8nJvcEt+pRP/7ZtFWktwXdPrNA469cBCE3gs8L5i8vvor0yAj9nZ6Tlr5KA8fFr9\nTYY4W5Y4I6UIp7WUFQpp3snhCcM0EZmLq2fzt6AQeH2iBZU2uXQUMxbEP8oo1ecK\nlidKhnNHysFmJJpDA3negsh1DK7tUIsozYf2VM+00U6BbS0MQ50bxB8Un91wi/1C\nTi4v1sfvLf5Dz0cKJfsMKExCTF7s6uQzS0hcIoDeaVLdjDcXN8y5WpCKmhrpkNw=\n=fwhY\n-----END PGP SIGNATURE-----",
        "payload": "tree df5b794be7a30015c18a72826b4891a3c3433f5f\nparent 1f7695b4194bd1d3872c9e91ad9ee271670894ea\nparent f88d9003546607763810024faad3bbc3b8cf1def\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510924775 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510924781 +0100\n\nMerge #11700: Add gitian PGP key: willyko\n\nf88d900 Add gitian PGP key: willyko (Willy Ko)\n\nPull request description:\n\n  First gitian sig: [https://github.com/bitcoin-core/gitian.sigs/pull/619](url)\n\nTree-SHA512: 3e6b017bd982a05d9a966948292b2d9a95e1bff6f28139a6a7545d63d7320f77d257fa0628c4fe28b39b8ae844be521dfb6224b1611e1e9d0fa49e7bceacb27c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595ec11d804f1f3a92c46f19586c283f9a9ffb4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f7695b4194bd1d3872c9e91ad9ee271670894ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7695b4194bd1d3872c9e91ad9ee271670894ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7695b4194bd1d3872c9e91ad9ee271670894ea"
      },
      {
        "sha": "f88d9003546607763810024faad3bbc3b8cf1def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f88d9003546607763810024faad3bbc3b8cf1def",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f88d9003546607763810024faad3bbc3b8cf1def"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a3b58ad9940200a4f9157a5b4dc10357b284dc29",
        "filename": "contrib/gitian-keys/willyko-key.pgp",
        "status": "added",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/595ec11d804f1f3a92c46f19586c283f9a9ffb4c/contrib/gitian-keys/willyko-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/595ec11d804f1f3a92c46f19586c283f9a9ffb4c/contrib/gitian-keys/willyko-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/willyko-key.pgp?ref=595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
        "patch": "@@ -0,0 +1,85 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1\n+\n+mQINBFgs/RoBEADFxycJTUvwqzBZZ0aBZXbmr8Ppd3EPrgBRd47k7uwanf7UFmvY\n+Xt4gMEI+EdV0GuoQ0SeoAmQqc5Fxu3AQe2XFbiF+ZNNYT3+V/5GAzWsAH22ncQr0\n+AuK95pPi+PZ+M2h669cq/RzFUXZDew0NobR2oBS5h6g3rgmmejVLRqnUpWkkSrqi\n+aNgD2GSn8g820wM6LpdxcjTqmMpHHT5owAbv0UP3IcdtpBaS5McoUXK+OAdKK/Zw\n+JQ0J1kx4vIyNwuPD3klziGQw8Izb/gFpWg8XaJmMhD5BxNuXJC58Bj9/sFTc0GDQ\n+VKMFpYpNi8a6hLPFb4hMjYF77awoz57HtyOOsS03KO/57QE1htx+2NeDm4XkZSBk\n++wrU3zgbtmOBcfzEHS/HrROksYDi+Qw3HZL98nfDEWNfsDzfhMZ9wHdM3NsR2xk6\n+oNtX0CprS1n2Xr2AY9X1oNgiZCJaSftU67j3lr+9gHOH61ktxt3cUCDodUFjkpKn\n+r1CQ2LB63AoUbwGMAeozdXZWzbXJAJbcH9G77zEi9rW0WA2yMSxTXHlpE9MS0UcE\n+BVkIMv2b9iQzlhiS8jh8AiKFO1PuT26Cw52N/lSPhA81zw79pZfSYwKFICGHYfvw\n+ozZeN9Q+PPl5tqi/3SExxlZKe8EmaveTrUfKMBS4lQO2gWe0bCFgLOIzIwARAQAB\n+tB1XaWxseSBLbyA8d2lsbHlrQHN5c2NvaW4ub3JnPokCOAQTAQIAIgUCWCz9GgIb\n+AwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQjjqPMkfby7+0wA//cX7Tc3Nz\n+19ApwSbGfC8pJA/nSybcVivroJRftpzeOmYrVM084T9REvYwugl89djvxn6m96iQ\n+kqoUGWhBVBtDReVCL7z53G42lHjemaFcxBhIazKxO0qvcc/UXUVOs2OdUbzObDFL\n+dHO5xBVqEnW3sq+r4blsXR8U79B9IIri4+2hy4OoEjYv9DzBaaoaqU+F3mudXbmo\n+R+hsWc+mklV++TX/kuw6EWT8tusFjXrfqqKcKPRPhbn48OSGWsEPc7yELf7pYFR8\n+uDU40faJqkvQ83h5WMTDAhLxd/918ZitqBhjSP+7Humf2YhSto7YmtEWlbeAW+qy\n+TcBYkK6SJh8Do3xZd/prFBKEu395n5VQKuLjXaOjqMc1oDHQyPJJjXSN5thLHvan\n+z7nNLt2QZO/kxXITDdbWlktVe/WSoive7TuY4dGuX4Si2z9wyhFYxtZDsqE0qmqN\n+jIDAZ7u8Qq/LGqpdjOmYr2fEwHe1yVIS+BtVGvtShkX+J+QPb8qBl1d7Ii5i5Afl\n+GJoLLIUFkPcIRTYPZpppGSuqfyWdNnaasbLH44lxJisSMMw+fxZabt2bykYN/ZXa\n+RP/ItDj81vklg+n6r4f/nZTF1r0UUy4LbSbBY15B4Xm0Tdvh1PMfj/w2q10l7bZB\n+XLi9Z/QPaW7TyzaBuLkVckbVFn2nYnXfzHG5Ag0EWCz9GgEQALCgTibFnw+Q3PEL\n+G5/peQcQqHxrPAB37HV39B1DedGhVUa6aGSUaLoNMyUjUX1HWN3mWFKTYVB4CH5Y\n+xjaXUwxdwCZgBNe4TDglKFPuc+frlSTZxDVE9/fjArmrUP6TPU447ujspyngGLa5\n+et5Uig/LxIX/+Mm0ZiYJxb1rMJwK998U1Ev1aHxgNjwTI2ehcKu8CAGOyflzh6a2\n+iTBUmLfnQMv5248P2d4P8WDiPq61CWTYTMCFqHqkYKy7h9BYIuMajw3KsgOUNfL2\n+1e9Ue8yv5UchZ+GDlBjidIkoK1nd2uJ0kPJkafLGWbcliJfvXxKliZnSbz1Cd4A0\n+HDKKCwiuwSLy2aYbs7IRtAOyDER4+fjBcqtf0QTIvoAdNZ9gL64DKVaB58vuSixj\n+K1i83XbTOt3q821HxxBrX9u6HP2E5kFdxT2KHDbisAWNP0rFnHVpjugehKFfZb6q\n+jbDt3nQL5uCQ8gTNCd4fsoSK6KhCDjamDXlKmaGlxqwOV4W8ZwihoeGt690h7NIH\n+h4eiSmMOej3or32lcDETEwrjA2PxvcFsikFc56hRkTaSyyBEH2xhkRrjXMqiQfH0\n+j7iOY2PWpFEuu2HVzqe5dBXzn9sMIwxeNCxR/P+xHMqPUlgD1SXEYCNLvvzD6p0+\n+kqSe7PiJoEIv351T3hnBhQ6rK0ChABEBAAGJAh8EGAECAAkFAlgs/RoCGwwACgkQ\n+jjqPMkfby7/mQA//YsAOdDBl0GscB1PBNXi8VMlI7yG9cqiGrYnZX7h4wUoGEbPI\n+jap/PixIsxBCf1BqBRDJdFyvzH9amLlcaVNdCyh6Yt1Pi8kassmz/kbIYgpbFkIL\n+ES9N24N7BZ94P77OQy5wic+B4WqJnVrtKr9JBalgBSOMqtccYCma5Ew00mqp+FXM\n+suDyBk2HXyl+u6/rRmqZ+BoU8iRpus9F80LFKGEsAgjLjKv68KmApzjunzsBotKk\n+g9AsBk4ygbp+nECAtsxpbLMo4hPr4qWm7G4mU5g4xOK2chpAPeqyf0857RWgsXaO\n+kjrUu/M5Hme2eIlXwBF14ac4QPnY1rlAIaulvXzmQnMYQFZiw9vaTOdqBFHjkh7T\n+XYRAr589Woo25PfMJCbC+Rop6ku6sCFMorbBwojyRhFJnk9xsy5kP5D9IhkPAKu/\n+/ABlei0xPOl/gCUUJP7aIikZgS5lAk1TSe/R+yV6ExNwudtLw1G0K2/sY3B4Xo3X\n+Q1lTAQPlnAIeK/vlbttLZNIBWquw4cPAkPpIyjmE1dd6jGQdUyZE22uPBx+gpq1w\n+AacmVLwvPMe1De0ilJOzj6KpXWBCwt0DWXWztovpBVcAC+qbTrZF9H5dllpqyzKt\n+OvxzGssjrX4rDkOx7MyVa2tnXmeCuSN/RvlOUwPvf5zYM8Wh9g7fc6jcDQu5Ag0E\n+WfkOfAEQAMNkzAQqSenpXtHsnuCqM1oMMF2kRzny/Jqh3q3BxZ8MHLDhoRRaTENu\n+lA4APRXMNM/wlZJUSLX8wWBhufnsPtMf6OOVMZ4AVbXHjUgyJ7lO1zHdj0u6PpYP\n+9gmHthIz7FF+cxHj4ziC4CmtRctrn+/U4MwYtNPhxkTnS26oOZes/HXMYSvQBMgT\n+AP27GNOBiJRthjIEITvSvS0YZOxgLtWgGiks/pGUw5wm1rguuQVyZ1/LfXBooYJo\n+u/v21AEjpuTg7JlwbqXr2k5LojAGq7AxDyWy21IW0E45Gog38zg/hwNll+hjRbSu\n+pipf74WXR6xMMlW6A+XWUvElkicfDx8e9LJUnqWbZ+FL7X4SB54ZHNCvfo/8Ug1V\n+2tiY9WbUZL9n5ZQHNlk3J+UK/KDvwey1VzKPFjpQNlfahhnppDGiCey+mERjI+75\n+gPbk0ctOAEYXgLJjoonGX+iByAfY0YyJF281CtaK/sXQU+TzLLT15WET+gYGsJdY\n+xh1PdPscNdSgYudvbKZoFnqUwEGEfD8dT5bjOphfY5+LvGUR2GuLNZpMidcduTYf\n+SWAY/vQHQIJArXu29BKscm3tg6tzXu3l9p/bGIQUQB7obN91y3xD3BLICIPRGhKE\n+924wxxCuH1vLKmxWDdAAxKo+rEdLJ/rbZnjWQENEFiJ114fBk2NVABEBAAGJBEQE\n+GAEIAA8FAln5DnwCGwIFCQPCZwACKQkQjjqPMkfby7/BXSAEGQEIAAYFAln5DnwA\n+CgkQYFGSo/6YSmANoQ//SbcKxkop2zA2HrWS4THcEJQwSJ0KGAN/VB83JQhoWThX\n+CWxsFNJjBy7+rsoXd3wQG1/aN42nTuj+eh+R6WJJaqqnMqd52l4Kc1kJA6z4DGsy\n+3azCDvyzibM0AkJyMJyYi6HRKjzA4M+xKR1HoT/NdQUP5CBUVfvMblSaOWiw4rja\n+IhWcbgbQ+Zam/VaV5l1O90eaD9tL3twSfPLYZ/wkeO63jJKHBpI8fpMql/bLg9WD\n+Au3h/lU63NWe5lZO1z/jIdfiTSvg8nu162vcOgmUCWo9spkybjJd0Mx6ZId79rVo\n+58lwZ4QoaMgPGoVP67LyLOxJTIXeyG5xr1LxhMPMGbnBhlnMQrboLV9kPEL3raHE\n+EEKDTtZimVK3ZxmfyBd6MDmwcL/K73xu/R8be9TgdwD8/BZJSOTkO87qZ82G9T7E\n+oY5IHU+qd41/Yjbut7AVtAlCr5Lor31EYvZh3gI/H8uZFddOu37Ij7e9Fw2ywv3A\n+wPks89tfOvahkfCOJ29znB+uQYpJ461jjhdkB7EHG4ae07M5rRtkNbIc3dqbnMhz\n+VA3JpRJN77xPXV7uITHo1s+b50RvWmfYW91zvipaSZxbMLuGBMhn/1QaM1djLOYN\n+JordDBwEr2bi5a063yUbZrk6ddECuyxndDHWDNr+Tqx6o7lmAT48UJ199zA4scbf\n+2g/9EiRPGcRovsn1tUdjzfmWDxhrRV6F3rYJB1+i6Mqeg2iHHYxxiNDXcuWYXHQ/\n+WPWLk5+lgh0rQbrE7InzEejoM0FIHzLTm0lSQpau50/PT2FiH6sOEEDyT2IhBtXX\n+eOnKAi1IfGNMzEaPEY8PXH78dEGv0iXIgy4l8Bc57q09Z9R/OUi+Yb1p+S5F/aOi\n+7Jd53GGE1bfBIlsMos092XoiMdvKmAczyCUIempKHUBPoqfJge77qk7zJKkyM3Dk\n+VX0lXLdhj0PfslFrNf2uRF4uZkmfUV7peeD023c0/SVp3ILUAVds52yawi6Exv4a\n+bbvhIw72fc31frCRBqc9HVsBraoozzE9bksG1MdNI3GgKxecOu9lldedlIqi4lO4\n+7kTVDLEmcsQO+sSxkXQz2sMSD01CQndpPuhFNlqvVnfK+Kv8pSG37VzSSQz1nt5K\n+w/fJBo4T/ztR7D9RzbSDxBP8Jjaa+UYabjab5HcE0JI4CpgmzIOB7qPVbYCn+LNX\n+c8Xw5/9iTw+ayawl7PCGRfd14/OPRzI8vS0I9bF8AG84XM46yxAtYieH/9RI3b6/\n+GiQYDkBNi6Kb1LfSzx8oKAkbMgiy4y3vWxLQnE34bAoXjGiYdAMliOsyGcvmnObD\n+GmSTIlIqunq60CyhaUSIkl2VRhjzz0igfS9751XEvnjeXDc=\n+=PVBi\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "1cecea71ad0481edac1260a149eacbbaae8d5eb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2VjZWE3MWFkMDQ4MWVkYWMxMjYwYTE0OWVhY2JiYWFlOGQ1ZWI1",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-11-17T13:16:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:31:05Z"
      },
      "message": "doc: Specify required source location for Windows WSL builds\n\n- Added steps to specify required source location for Windows WSL\n  builds.\n- Attempted to make the introduction and options for building on Windows\n  clearer.",
      "tree": {
        "sha": "64327ff650181338d8f195a12816511293d64f51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64327ff650181338d8f195a12816511293d64f51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cecea71ad0481edac1260a149eacbbaae8d5eb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cecea71ad0481edac1260a149eacbbaae8d5eb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cecea71ad0481edac1260a149eacbbaae8d5eb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cecea71ad0481edac1260a149eacbbaae8d5eb5/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 49,
      "deletions": 23
    },
    "files": [
      {
        "sha": "9e0e66e522e49aaa8874499f38644d4337ad45c4",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 49,
        "deletions": 23,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cecea71ad0481edac1260a149eacbbaae8d5eb5/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cecea71ad0481edac1260a149eacbbaae8d5eb5/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=1cecea71ad0481edac1260a149eacbbaae8d5eb5",
        "patch": "@@ -3,29 +3,28 @@ WINDOWS BUILD NOTES\n \n Below are some notes on how to build Bitcoin Core for Windows.\n \n-Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n-\n-Building on Ubuntu Trusty 14.04 is recommended.\n-At the time of writing the Windows Subsystem for Linux installs Ubuntu Xenial 16.04. The default cross\n-compiler package for Ubuntu Xenial does not produce working executables for some of the bitcoin applications.\n-It is possible to build on Ubuntu Xenial by installing the cross compiler packages from\n-Ubuntu Zesty, see the steps below.\n-Building on Ubuntu Zesty 17.04 up to 17.10 has been verified to work.\n+The options known to work for building Bitcoin Core on Windows are:\n+\n+* On Linux using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Trusty 14.04 is recommended\n+and is the platform used to build the Bitcoin Core Windows release binaries.\n+* On Windows using [Windows\n+Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and the Mingw-w64 cross compiler tool chain.\n+\n+Other options which may work but which have not been extensively tested are (please contribute instructions):\n \n-While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n-using the Windows Subsystem For Linux is the most straightforward. If you are building with\n-another method, please contribute the instructions here for others who are running versions\n-of Windows that are not compatible with the Windows Subsystem for Linux.\n+* On Windows using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n+* On Windows using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n \n-Compiling with Windows Subsystem For Linux\n--------------------------------------------\n+Installing Windows Subsystem for Linux\n+---------------------------------------\n \n With Windows 10, Microsoft has released a new feature named the [Windows\n Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about). This\n feature allows you to run a bash shell directly on Windows in an Ubuntu-based\n environment. Within this environment you can cross compile for Windows without\n-the need for a separate Linux VM or server.\n+the need for a separate Linux VM or server. Note that while WSL can be installed with\n+other Linux variants, such as OpenSUSE, the following instructions have only been\n+tested with Ubuntu.\n \n This feature is not supported in versions of Windows prior to Windows 10 or on\n Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n@@ -50,10 +49,15 @@ After the bash shell is active, you can follow the instructions below, starting\n with the \"Cross-compilation\" section. Compiling the 64-bit version is\n recommended but it is possible to compile the 32-bit version.\n \n-Cross-compilation\n--------------------\n+Cross-compilation for Ubuntu and Windows Subsystem for Linux\n+------------------------------------------------------------\n \n-These steps can be performed on, for example, an Ubuntu VM. The depends system\n+At the time of writing the Windows Subsystem for Linux installs Ubuntu Xenial 16.04. The Mingw-w64 package\n+for Ubuntu Xenial does not produce working executables for some of the Bitcoin Core applications.\n+It is possible to build on Ubuntu Xenial by installing the cross compiler packages from Ubuntu Zesty, see the steps below.\n+Building on Ubuntu Zesty 17.04 up to 17.10 has been verified to work.\n+\n+The steps below can be performed on Ubuntu (including in a VM) or WSL. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n@@ -94,6 +98,18 @@ Ubuntu Zesty 17.04 <sup>[2](#footnote2)</sup>:\n \n Once the tool chain is installed the build steps are common:\n \n+Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n+example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+\n+The next three steps are an example of how to acquire the source in an appropriate way.\n+\n+    cd /usr/src\n+    sudo git clone https://github.com/bitcoin/bitcoin.git\n+    sudo chmod -R a+rw bitcoin\n+\n+Once the source code is ready the build steps are below.\n+\n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=x86_64-w64-mingw32\n@@ -112,6 +128,16 @@ For Ubuntu Xenial 16.04, Ubuntu Zesty 17.04 and Windows Subsystem for Linux <sup\n \n     sudo update-alternatives --config i686-w64-mingw32-g++  # Set the default mingw32 g++ compiler option to posix.\n \n+Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n+example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+\n+The next three steps are an example of how to acquire the source in an appropriate way.\n+\n+    cd /usr/src\n+    sudo git clone https://github.com/bitcoin/bitcoin.git\n+    sudo chmod -R a+rw bitcoin\n+\n Then build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n@@ -139,16 +165,16 @@ way. This will install to `c:\\workspace\\bitcoin`, for example:\n Footnotes\n ---------\n \n-<a name=\"footnote1\">1</a>: There is currently a bug in the 64 bit mingw-w64 cross compiler packaged for WSL/Ubuntu Xenial 16.04 that\n+<a name=\"footnote1\">1</a>: There is currently a bug in the 64 bit Mingw-w64 cross compiler packaged for WSL/Ubuntu Xenial 16.04 that\n causes two of the bitcoin executables to crash shortly after start up. The bug is related to the\n -fstack-protector-all g++ compiler flag which is used to mitigate buffer overflows.\n-Installing the mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n+Installing the Mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubuntu should\n something break.\n \n-<a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit mingw-w64 packages install two different\n+<a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit Mingw-w64 packages install two different\n compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n-It's not possible to build the bitcoin code using the win32 version of the mingw-w64 cross compilers (at least not without\n+It's not possible to build the bitcoin code using the win32 version of the Mingw-w64 cross compilers (at least not without\n modifying headers in the bitcoin source code)."
      }
    ]
  },
  {
    "sha": "ea68190132b241feebdccc7bac715d92b9bc71bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTY4MTkwMTMyYjI0MWZlZWJkY2NjN2JhYzcxNWQ5MmI5YmM3MWJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:31:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:32:00Z"
      },
      "message": "Merge #11704: Windows build doc update\n\n1cecea7 doc: Specify required source location for Windows WSL builds (Aaron Clauson)\n\nTree-SHA512: 6c5bb7f953a4399e1f99da865086a3d5196e7eb0df226f1ec08bde5b9a68bfe8934f45a5dc011623adb607aab7ac79fa8b48ed09f6fec4494179938d9951080e",
      "tree": {
        "sha": "3c455901f3e76eb5e99dcc5f175e6b12d907fdef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c455901f3e76eb5e99dcc5f175e6b12d907fdef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea68190132b241feebdccc7bac715d92b9bc71bc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDuTQAAoJEB5K7WKYbNJduBwH/33jKw+y1B5S4XYRMJJXWUwW\nRUWCnfO6qnXeOvYxnOpjajJYH7XjleluM/zhHrD4SsA7d3wYTmfQ2YLwSAKIOqrH\neKNEVoNBcKATfl58ZAZ6widmJcNE16vAAFJRXyet8d/G7R/UqDIKyts5lrZ29a7I\nqPo68gXtn3q2EtxFE0ywvB3JOPIYeJWpJV2jsqb58+U95BeurvqdXV4YdhVKrtah\nqosa+vfpdl6ZtqBPByN6IfwPVmUIA5BGsu4cKC8JOPnI3JVqh28Mn8p4RqN6U47K\nTh7KN0l/TDJZQLnQgk6Yf3zdY1lzvfPBh/wxKtz8LvgHMvkNw9qFRNF8krJ3oHk=\n=NBm6\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c455901f3e76eb5e99dcc5f175e6b12d907fdef\nparent 595ec11d804f1f3a92c46f19586c283f9a9ffb4c\nparent 1cecea71ad0481edac1260a149eacbbaae8d5eb5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510925494 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510925520 +0100\n\nMerge #11704: Windows build doc update\n\n1cecea7 doc: Specify required source location for Windows WSL builds (Aaron Clauson)\n\nTree-SHA512: 6c5bb7f953a4399e1f99da865086a3d5196e7eb0df226f1ec08bde5b9a68bfe8934f45a5dc011623adb607aab7ac79fa8b48ed09f6fec4494179938d9951080e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68190132b241feebdccc7bac715d92b9bc71bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea68190132b241feebdccc7bac715d92b9bc71bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68190132b241feebdccc7bac715d92b9bc71bc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595ec11d804f1f3a92c46f19586c283f9a9ffb4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/595ec11d804f1f3a92c46f19586c283f9a9ffb4c"
      },
      {
        "sha": "1cecea71ad0481edac1260a149eacbbaae8d5eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cecea71ad0481edac1260a149eacbbaae8d5eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cecea71ad0481edac1260a149eacbbaae8d5eb5"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 49,
      "deletions": 23
    },
    "files": [
      {
        "sha": "9e0e66e522e49aaa8874499f38644d4337ad45c4",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 49,
        "deletions": 23,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68190132b241feebdccc7bac715d92b9bc71bc/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68190132b241feebdccc7bac715d92b9bc71bc/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=ea68190132b241feebdccc7bac715d92b9bc71bc",
        "patch": "@@ -3,29 +3,28 @@ WINDOWS BUILD NOTES\n \n Below are some notes on how to build Bitcoin Core for Windows.\n \n-Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n-\n-Building on Ubuntu Trusty 14.04 is recommended.\n-At the time of writing the Windows Subsystem for Linux installs Ubuntu Xenial 16.04. The default cross\n-compiler package for Ubuntu Xenial does not produce working executables for some of the bitcoin applications.\n-It is possible to build on Ubuntu Xenial by installing the cross compiler packages from\n-Ubuntu Zesty, see the steps below.\n-Building on Ubuntu Zesty 17.04 up to 17.10 has been verified to work.\n+The options known to work for building Bitcoin Core on Windows are:\n+\n+* On Linux using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Trusty 14.04 is recommended\n+and is the platform used to build the Bitcoin Core Windows release binaries.\n+* On Windows using [Windows\n+Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and the Mingw-w64 cross compiler tool chain.\n+\n+Other options which may work but which have not been extensively tested are (please contribute instructions):\n \n-While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n-using the Windows Subsystem For Linux is the most straightforward. If you are building with\n-another method, please contribute the instructions here for others who are running versions\n-of Windows that are not compatible with the Windows Subsystem for Linux.\n+* On Windows using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n+* On Windows using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n \n-Compiling with Windows Subsystem For Linux\n--------------------------------------------\n+Installing Windows Subsystem for Linux\n+---------------------------------------\n \n With Windows 10, Microsoft has released a new feature named the [Windows\n Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about). This\n feature allows you to run a bash shell directly on Windows in an Ubuntu-based\n environment. Within this environment you can cross compile for Windows without\n-the need for a separate Linux VM or server.\n+the need for a separate Linux VM or server. Note that while WSL can be installed with\n+other Linux variants, such as OpenSUSE, the following instructions have only been\n+tested with Ubuntu.\n \n This feature is not supported in versions of Windows prior to Windows 10 or on\n Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n@@ -50,10 +49,15 @@ After the bash shell is active, you can follow the instructions below, starting\n with the \"Cross-compilation\" section. Compiling the 64-bit version is\n recommended but it is possible to compile the 32-bit version.\n \n-Cross-compilation\n--------------------\n+Cross-compilation for Ubuntu and Windows Subsystem for Linux\n+------------------------------------------------------------\n \n-These steps can be performed on, for example, an Ubuntu VM. The depends system\n+At the time of writing the Windows Subsystem for Linux installs Ubuntu Xenial 16.04. The Mingw-w64 package\n+for Ubuntu Xenial does not produce working executables for some of the Bitcoin Core applications.\n+It is possible to build on Ubuntu Xenial by installing the cross compiler packages from Ubuntu Zesty, see the steps below.\n+Building on Ubuntu Zesty 17.04 up to 17.10 has been verified to work.\n+\n+The steps below can be performed on Ubuntu (including in a VM) or WSL. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n@@ -94,6 +98,18 @@ Ubuntu Zesty 17.04 <sup>[2](#footnote2)</sup>:\n \n Once the tool chain is installed the build steps are common:\n \n+Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n+example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+\n+The next three steps are an example of how to acquire the source in an appropriate way.\n+\n+    cd /usr/src\n+    sudo git clone https://github.com/bitcoin/bitcoin.git\n+    sudo chmod -R a+rw bitcoin\n+\n+Once the source code is ready the build steps are below.\n+\n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=x86_64-w64-mingw32\n@@ -112,6 +128,16 @@ For Ubuntu Xenial 16.04, Ubuntu Zesty 17.04 and Windows Subsystem for Linux <sup\n \n     sudo update-alternatives --config i686-w64-mingw32-g++  # Set the default mingw32 g++ compiler option to posix.\n \n+Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n+example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+\n+The next three steps are an example of how to acquire the source in an appropriate way.\n+\n+    cd /usr/src\n+    sudo git clone https://github.com/bitcoin/bitcoin.git\n+    sudo chmod -R a+rw bitcoin\n+\n Then build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n@@ -139,16 +165,16 @@ way. This will install to `c:\\workspace\\bitcoin`, for example:\n Footnotes\n ---------\n \n-<a name=\"footnote1\">1</a>: There is currently a bug in the 64 bit mingw-w64 cross compiler packaged for WSL/Ubuntu Xenial 16.04 that\n+<a name=\"footnote1\">1</a>: There is currently a bug in the 64 bit Mingw-w64 cross compiler packaged for WSL/Ubuntu Xenial 16.04 that\n causes two of the bitcoin executables to crash shortly after start up. The bug is related to the\n -fstack-protector-all g++ compiler flag which is used to mitigate buffer overflows.\n-Installing the mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n+Installing the Mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubuntu should\n something break.\n \n-<a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit mingw-w64 packages install two different\n+<a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit Mingw-w64 packages install two different\n compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n-It's not possible to build the bitcoin code using the win32 version of the mingw-w64 cross compilers (at least not without\n+It's not possible to build the bitcoin code using the win32 version of the Mingw-w64 cross compilers (at least not without\n modifying headers in the bitcoin source code)."
      }
    ]
  },
  {
    "sha": "5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTk3MTAwNzA0Yjg3ZWU0MWMxNjA1YzBiZDlhZDg5YTJlZjUwYzVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T14:00:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T14:00:52Z"
      },
      "message": "Merge #11706: Make default issue text all comments to make issues more readable\n\ne89adba Make default issue text all comments to make issues more readable (Matt Corallo)\n\nPull request description:\n\nTree-SHA512: d0a657664e3defd9ace6ce167d593affce6f881f9ae547d53af36a90caa5cf206b00a2cc2e3622ba2c69c71302ec4a29b84612fc91d4ebd94907b4e4926de44d",
      "tree": {
        "sha": "db17567635111412afcd8e63cb6e965f346ba243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db17567635111412afcd8e63cb6e965f346ba243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDuuUAAoJEB5K7WKYbNJd4+EH/2uWg44JdzTbY0f8CNygSLIP\nJPOldPpj4s8RJ1nUTkh9+C8g8LupfVaQz5pi/LL7+fGD2l+3BPhfs0vXAEyiCFJC\nt1teJjCp+VM3U5grD99R2fpDM562hsKaBN5RvTy1LrBtghETUODYP9X2jIxZURjT\nFNg2F+sYELuv7lFVMA/USBs2X8HG5tdeZs3qn2L9QRWRfvfQC6s7WAvKgMHbedyZ\nhC//m0807Jwr7VUZem22zP0FAbnD4K9tw+2MpnPXGQSGYjLcBlpqmWNDQBy9TxZn\na0rqEtq6TXt1rqWoUWy/H+x4d2h03pTnfXTUshsbMGJGVoURTvNpNuDJpqOJh34=\n=aTJW\n-----END PGP SIGNATURE-----",
        "payload": "tree db17567635111412afcd8e63cb6e965f346ba243\nparent ea68190132b241feebdccc7bac715d92b9bc71bc\nparent e89adbac9344d4c11162cc89928c62221ff8b237\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510927249 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510927252 +0100\n\nMerge #11706: Make default issue text all comments to make issues more readable\n\ne89adba Make default issue text all comments to make issues more readable (Matt Corallo)\n\nPull request description:\n\nTree-SHA512: d0a657664e3defd9ace6ce167d593affce6f881f9ae547d53af36a90caa5cf206b00a2cc2e3622ba2c69c71302ec4a29b84612fc91d4ebd94907b4e4926de44d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5197100704b87ee41c1605c0bd9ad89a2ef50c5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea68190132b241feebdccc7bac715d92b9bc71bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68190132b241feebdccc7bac715d92b9bc71bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea68190132b241feebdccc7bac715d92b9bc71bc"
      },
      {
        "sha": "e89adbac9344d4c11162cc89928c62221ff8b237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e89adbac9344d4c11162cc89928c62221ff8b237",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e89adbac9344d4c11162cc89928c62221ff8b237"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "55cebc008f5aa761847f4b701bc35abcc3956c48",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5197100704b87ee41c1605c0bd9ad89a2ef50c5e/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5197100704b87ee41c1605c0bd9ad89a2ef50c5e/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "patch": "@@ -1,23 +1,21 @@\n-<!--- Remove sections that do not apply -->\n+<!-- This issue tracker is only for technical issues related to Bitcoin Core.\n \n-This issue tracker is only for technical issues related to Bitcoin Core.\n+General bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\n \n-General bitcoin questions and/or support requests are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+For reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\n \n-For reporting security issues, please read instructions at [https://bitcoincore.org/en/contact/](https://bitcoincore.org/en/contact/).\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\n \n-If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue!\n+<!-- Describe the issue -->\n+<!--- What behavior did you expect? -->\n \n-### Describe the issue\n-#### What behavior did you expect?\n+<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\n \n-#### What was the actual behavior (provide screenshots if the issue is GUI-related)?\n+<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\n \n-#### How reliably can you reproduce the issue, what are the steps to do so?\n+<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\n \n-### What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)?\n+<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\n \n-### What type of machine are you observing the error on (OS/CPU and disk type)?\n-\n-### Any extra information that might be useful in the debugging process.\n-This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred.\n+<!-- Any extra information that might be useful in the debugging process. -->\n+<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->"
      }
    ]
  },
  {
    "sha": "dcfef277b4920552f438c110390a5de93892a8de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2ZlZjI3N2I0OTIwNTUyZjQzOGMxMTAzOTBhNWRlOTM4OTJhOGRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T13:11:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T14:11:50Z"
      },
      "message": "cli: Reject arguments to -getinfo\n\nCurrently it's possible to accidentally type e.g.\n\n    bitcoin-cli -getinfo getbalance\n\nand get an answer which can be confusing; the trialing arguments are\njust ignored.\n\nTo avoid this, throw an error if the user provides arguments to\n`-getinfo`.",
      "tree": {
        "sha": "8083a2d49b45dbd081862a8fd0fad7318cd07ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8083a2d49b45dbd081862a8fd0fad7318cd07ecc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcfef277b4920552f438c110390a5de93892a8de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfef277b4920552f438c110390a5de93892a8de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfef277b4920552f438c110390a5de93892a8de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfef277b4920552f438c110390a5de93892a8de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f7695b4194bd1d3872c9e91ad9ee271670894ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7695b4194bd1d3872c9e91ad9ee271670894ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7695b4194bd1d3872c9e91ad9ee271670894ea"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "136981b70991c351492cd7d77731191f0359a45b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfef277b4920552f438c110390a5de93892a8de/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfef277b4920552f438c110390a5de93892a8de/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=dcfef277b4920552f438c110390a5de93892a8de",
        "patch": "@@ -213,6 +213,9 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     /** Create a simulated `getinfo` request. */\n     UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n     {\n+        if (!args.empty()) {\n+            throw std::runtime_error(\"-getinfo takes no arguments\");\n+        }\n         UniValue result(UniValue::VARR);\n         result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n         result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));"
      },
      {
        "sha": "d1cd3b3620abbce21fe155f78353425655c37e59",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfef277b4920552f438c110390a5de93892a8de/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfef277b4920552f438c110390a5de93892a8de/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=dcfef277b4920552f438c110390a5de93892a8de",
        "patch": "@@ -35,8 +35,11 @@ def run_test(self):\n         assert_equal([\"foo\", \"bar\"], self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=password + \"\\nfoo\\nbar\").echo())\n         assert_raises_process_error(1, \"incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=\"foo\").echo)\n \n+        self.log.info(\"Make sure that -getinfo with arguments fails\")\n+        assert_raises_process_error(1, \"-getinfo takes no arguments\", self.nodes[0].cli('-getinfo').help)\n+\n         self.log.info(\"Compare responses from `bitcoin-cli -getinfo` and the RPCs data is retrieved from.\")\n-        cli_get_info = self.nodes[0].cli('-getinfo').help()\n+        cli_get_info = self.nodes[0].cli().send_cli('-getinfo')\n         wallet_info = self.nodes[0].getwalletinfo()\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()"
      }
    ]
  },
  {
    "sha": "0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjNiNzUyZWM3OGU1MzA5OWFmMDI3N2QxNWZjMmJmOGUwYzkyZDA1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T09:21:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-17T14:34:28Z"
      },
      "message": "Remove unused imports",
      "tree": {
        "sha": "95d346f9e0493767ad916496d9932404d74c55eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95d346f9e0493767ad916496d9932404d74c55eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3b752ec78e53099af0277d15fc2bf8e0c92d05/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5197100704b87ee41c1605c0bd9ad89a2ef50c5e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "90a3de0e0d9d00c28eb975975b66888200553d3f",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f3b752ec78e53099af0277d15fc2bf8e0c92d05/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f3b752ec78e53099af0277d15fc2bf8e0c92d05/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
        "patch": "@@ -18,7 +18,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import sync_blocks, connect_nodes, assert_equal\n+from test_framework.util import connect_nodes, assert_equal\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2"
      },
      {
        "sha": "a8ce68374c817e4c07ba0acf25526ad4eec8ca6b",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f3b752ec78e53099af0277d15fc2bf8e0c92d05/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f3b752ec78e53099af0277d15fc2bf8e0c92d05/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
        "patch": "@@ -24,7 +24,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    p2p_port,\n )\n \n class P2PFingerprintTest(BitcoinTestFramework):"
      }
    ]
  },
  {
    "sha": "142913296f006650127b7a2ef03954e46bfd585c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDI5MTMyOTZmMDA2NjUwMTI3YjdhMmVmMDM5NTRlNDZiZmQ1ODVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T14:33:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-17T14:34:51Z"
      },
      "message": "Merge #11140: Trivial: Improve #endif comments\n\nac1cf8d Trivial: Improve #endif comments (danra)\n\nPull request description:\n\n  Improve the #endif comments for the '#if HAVE_DECL_BSWAP_XX == 0' preprocessor conditions, so each shows the full condition which it closes.\n\nTree-SHA512: f533311fa48cb2f46f6490b6c965ad5f8861dcfad70c56d70e31fa989b422880c78b2dd6f24f648b19d3a22f767606e0de5cf1cb71445012b42c97ac2149295e",
      "tree": {
        "sha": "d3d831b7302e07e5ac9fca593b48fe972803ca67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3d831b7302e07e5ac9fca593b48fe972803ca67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/142913296f006650127b7a2ef03954e46bfd585c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaDvOLAAoJEB5K7WKYbNJdX/sIAIZT0ZqQe1eyhNxVnzfkDljy\nS1sP0TjyTnurclf+9ORc7rALv+vjsQxxjzp2npTI7Zp0Z3gCEvN1pE7pNM6J/BwW\nb3Vcp4/t3zZ8rJRYPkXlcV7XeyU0/cBLVCR5jLzkfIYC1PR1oV+t94G1of9gsdxv\nImahjEbcyoQMebU9FcbLcy66yh+Glq9BFPl20Wd3JeGAxHvZY+mWQr3tqEgN6krR\nolxZWdigzw13uewioVMjwrMgMYgrAZcnpjUzCf9gfsp/prjwjzgKFxUor7hBfwp8\nnNN+IhqGak/YsjTqyhPV4N+LnAcxuPocoh/l2FtkCVb0FlnQuq2gZItm7cgjqHw=\n=q219\n-----END PGP SIGNATURE-----",
        "payload": "tree d3d831b7302e07e5ac9fca593b48fe972803ca67\nparent 5197100704b87ee41c1605c0bd9ad89a2ef50c5e\nparent ac1cf8d55db8fa9377a77581bfbb774a88e11dd1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510929236 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510929291 +0100\n\nMerge #11140: Trivial: Improve #endif comments\n\nac1cf8d Trivial: Improve #endif comments (danra)\n\nPull request description:\n\n  Improve the #endif comments for the '#if HAVE_DECL_BSWAP_XX == 0' preprocessor conditions, so each shows the full condition which it closes.\n\nTree-SHA512: f533311fa48cb2f46f6490b6c965ad5f8861dcfad70c56d70e31fa989b422880c78b2dd6f24f648b19d3a22f767606e0de5cf1cb71445012b42c97ac2149295e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142913296f006650127b7a2ef03954e46bfd585c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/142913296f006650127b7a2ef03954e46bfd585c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142913296f006650127b7a2ef03954e46bfd585c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5197100704b87ee41c1605c0bd9ad89a2ef50c5e"
      },
      {
        "sha": "ac1cf8d55db8fa9377a77581bfbb774a88e11dd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac1cf8d55db8fa9377a77581bfbb774a88e11dd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac1cf8d55db8fa9377a77581bfbb774a88e11dd1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a6df6ded7ae45e10a39e755fabd023f5c73f8677",
        "filename": "src/compat/byteswap.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/142913296f006650127b7a2ef03954e46bfd585c/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/142913296f006650127b7a2ef03954e46bfd585c/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=142913296f006650127b7a2ef03954e46bfd585c",
        "patch": "@@ -37,15 +37,15 @@ inline uint16_t bswap_16(uint16_t x)\n {\n     return (x >> 8) | (x << 8);\n }\n-#endif // HAVE_DECL_BSWAP16\n+#endif // HAVE_DECL_BSWAP16 == 0\n \n #if HAVE_DECL_BSWAP_32 == 0\n inline uint32_t bswap_32(uint32_t x)\n {\n     return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n             ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n }\n-#endif // HAVE_DECL_BSWAP32\n+#endif // HAVE_DECL_BSWAP32 == 0\n \n #if HAVE_DECL_BSWAP_64 == 0\n inline uint64_t bswap_64(uint64_t x)\n@@ -59,7 +59,7 @@ inline uint64_t bswap_64(uint64_t x)\n           | ((x & 0x000000000000ff00ull) << 40)\n           | ((x & 0x00000000000000ffull) << 56));\n }\n-#endif // HAVE_DECL_BSWAP64\n+#endif // HAVE_DECL_BSWAP64 == 0\n \n #endif // defined(__APPLE__)\n "
      }
    ]
  },
  {
    "sha": "f522fb7c9c121641ce552774e3993942106ec336",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTIyZmI3YzljMTIxNjQxY2U1NTI3NzRlMzk5Mzk0MjEwNmVjMzM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-17T14:35:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-17T14:35:15Z"
      },
      "message": "tests: Remove unused mininode functions deser_int_vector(f) and ser_int_vector(l)",
      "tree": {
        "sha": "74eb441227c4b0040126b451a1a1aaa068b843c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74eb441227c4b0040126b451a1a1aaa068b843c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f522fb7c9c121641ce552774e3993942106ec336",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f522fb7c9c121641ce552774e3993942106ec336",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f522fb7c9c121641ce552774e3993942106ec336",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f522fb7c9c121641ce552774e3993942106ec336/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3b752ec78e53099af0277d15fc2bf8e0c92d05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3b752ec78e53099af0277d15fc2bf8e0c92d05"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 0,
      "deletions": 15
    },
    "files": [
      {
        "sha": "eee24910cb67d2535efbf0802100cc443c7461da",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f522fb7c9c121641ce552774e3993942106ec336/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f522fb7c9c121641ce552774e3993942106ec336/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=f522fb7c9c121641ce552774e3993942106ec336",
        "patch": "@@ -167,21 +167,6 @@ def ser_string_vector(l):\n     return r\n \n \n-def deser_int_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = struct.unpack(\"<i\", f.read(4))[0]\n-        r.append(t)\n-    return r\n-\n-\n-def ser_int_vector(l):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        r += struct.pack(\"<i\", i)\n-    return r\n-\n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n     obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))"
      }
    ]
  },
  {
    "sha": "9d42cc333139d7101a9223421d9eabcddfd0b025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDQyY2MzMzMxMzlkNzEwMWE5MjIzNDIxZDllYWJjZGRmZDBiMDI1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-17T22:15:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-17T22:15:28Z"
      },
      "message": "[tests] address review comments",
      "tree": {
        "sha": "bb84891e5c9a5616f9fdd8dae710a46f2045d77f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb84891e5c9a5616f9fdd8dae710a46f2045d77f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d42cc333139d7101a9223421d9eabcddfd0b025",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d42cc333139d7101a9223421d9eabcddfd0b025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d42cc333139d7101a9223421d9eabcddfd0b025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d42cc333139d7101a9223421d9eabcddfd0b025/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c4ab9a7034aca6be83fcb6cd8479cd19a196a2"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "68c0d95b4f9912b6c11a3870423269ab453e103c",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d42cc333139d7101a9223421d9eabcddfd0b025/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d42cc333139d7101a9223421d9eabcddfd0b025/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=9d42cc333139d7101a9223421d9eabcddfd0b025",
        "patch": "@@ -6,9 +6,11 @@\n \n Setup:\n \n-- Two nodes, two p2p connections to node0. One p2p connection should only ever\n-  receive inv's (omitted from testing description below, this is our control).\n-  Second node is used for creating reorgs.\n+- Two nodes:\n+    - node0 is the node-under-test. We create two p2p connections to it. The\n+      first p2p connection is a control and should only ever receive inv's. The\n+      second p2p connection tests the headers sending logic.\n+    - node1 is used to create reorgs.\n \n test_null_locators\n ==================\n@@ -143,9 +145,11 @@ def send_getblocks(self, locator):\n         self.send_message(getblocks_message)\n \n     def wait_for_getdata(self, hash_list, timeout=60):\n-        if hash_list != []:\n-            test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-            wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        if hash_list == []:\n+            return\n+\n+        test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n@@ -229,8 +233,8 @@ def mine_reorg(self, length):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         inv_node = self.nodes[0].add_p2p_connection(BaseNode())\n-        # Set nServices to 0 for test_node, so no block download will occur outside of\n-        # direct fetching\n+        # Make sure NODE_NETWORK is not set for test_node, so no block download\n+        # will occur outside of direct fetching\n         test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n \n         NetworkThread().start()  # Start up network handling in another thread\n@@ -269,7 +273,6 @@ def test_null_locators(self, test_node, inv_node):\n         inv_node.clear_last_announcement()\n         test_node.send_message(msg_block(block))\n         inv_node.check_last_announcement(inv=[int(block.hash, 16)], headers=[])\n-        inv_node.clear_last_announcement()\n \n     def test_nonnull_locators(self, test_node, inv_node):\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      }
    ]
  },
  {
    "sha": "c3055bbea1255cd791564b855b6951a9f4c510f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzA1NWJiZWExMjU1Y2Q3OTE1NjRiODU1YjY5NTFhOWY0YzUxMGY5",
    "commit": {
      "author": {
        "name": "Luke Mlsna",
        "email": "luke@mlsna.net",
        "date": "2017-11-18T04:43:17Z"
      },
      "committer": {
        "name": "Luke Mlsna",
        "email": "luke@mlsna.net",
        "date": "2017-11-18T05:28:11Z"
      },
      "message": "Add help-console command to Qt debug console\n\n     - Added `help-console` to the list of autocompletion strings\n     - Implemented requested changes to help message:\n       - Added an example that uses access-by-index `getblock(getblockhash(0) true)[tx][0]`\n       - Replace \"bracketed syntax\" to \"parenthesized syntax\" where applicable\n       - Replace \"separate\" with \"delimit\"\n       - Removed `<br>` and `<b>help/help-console</b>` from translation strings, since these parts don't change between languages\n       - Changed examples to be based off `getblock 0` so they will work even with pruned/no blockchain and `disablewallet` if copied and pasted\n       - Clarified syntax for queries of named/unnamed result objects.",
      "tree": {
        "sha": "aa4995fdfc39f8ab6d04c291740236d0311e6c64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa4995fdfc39f8ab6d04c291740236d0311e6c64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3055bbea1255cd791564b855b6951a9f4c510f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJaD8TzAAoJENFt8wBGbgziqfoP/1Y86rtS1jzq5wUCSHC9vM3a\n+DY7e8XOEfxBGCXqDxCwUUkInjVAp5twQarJguQZ8n15aAclEy2sw0WaZdR/IF/b\nEOo6PGdCaMT7gqNBdjYs9+C+dIw8dMw4wpiItlBwSgFb2okzX9YhfQuH0+jvZoyu\nQIq6d+wWc3sRbIZoNffxzRFXk6BPBLjQnN85f7Pmo1026w8JO8rUSa9VZ1p0QCGw\nbriZbIJv/8iGme9n6LjiDAY4OyP1+C4F8YfPD5/0d3IeIdZOSAp5AXDo/9vaqdeG\nyv53IYEHJ2+hys85i+xyjgHudSMHuUqaIGcXOAIOqJwlQZ8iIInAZmuPva7uiqBl\ncnJNLDyWoBzjDCCYk6rmaDiFCT3Ap5yv6G4ttxY3iSrrtVemOnCt8pfGzYycwHAh\nT5TpjP5Y9bzChelFIrvB0L+TEH4NjWdEiuK6f1utHGLfFo/W5gRtW1Vuq+Ybq+3a\nH/UAk9a51pWX2x8G233xgu20KxOnTIypCEhbdF4bnJRK0TtDVZ+FqTJm1f9XDixP\nwzb397CZ9Njg37mMJUgZEi0miZxDKRYXnyJa7KuqiaHZIC+VQaSM9jgf8I2HpAIA\nAlA9AqICsDhq+ENJ8+qY+1RfRIR7b2nX8Fw3uXRr18SWZVMq/SHXafOdocTE0gRL\nw0Q0hWMkKvNYKNgtv3ed\n=eA1U\n-----END PGP SIGNATURE-----",
        "payload": "tree aa4995fdfc39f8ab6d04c291740236d0311e6c64\nparent f0c1f8abb0182da557d07372b938f3a0a4bb906f\nauthor Luke Mlsna <luke@mlsna.net> 1510980197 -0600\ncommitter Luke Mlsna <luke@mlsna.net> 1510982891 -0600\n\nAdd help-console command to Qt debug console\n\n     - Added `help-console` to the list of autocompletion strings\n     - Implemented requested changes to help message:\n       - Added an example that uses access-by-index `getblock(getblockhash(0) true)[tx][0]`\n       - Replace \"bracketed syntax\" to \"parenthesized syntax\" where applicable\n       - Replace \"separate\" with \"delimit\"\n       - Removed `<br>` and `<b>help/help-console</b>` from translation strings, since these parts don't change between languages\n       - Changed examples to be based off `getblock 0` so they will work even with pruned/no blockchain and `disablewallet` if copied and pasted\n       - Clarified syntax for queries of named/unnamed result objects.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3055bbea1255cd791564b855b6951a9f4c510f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3055bbea1255cd791564b855b6951a9f4c510f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3055bbea1255cd791564b855b6951a9f4c510f9/comments",
    "author": {
      "login": "lmlsna",
      "id": 30895125,
      "node_id": "MDQ6VXNlcjMwODk1MTI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/30895125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmlsna",
      "html_url": "https://github.com/lmlsna",
      "followers_url": "https://api.github.com/users/lmlsna/followers",
      "following_url": "https://api.github.com/users/lmlsna/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmlsna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmlsna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmlsna/subscriptions",
      "organizations_url": "https://api.github.com/users/lmlsna/orgs",
      "repos_url": "https://api.github.com/users/lmlsna/repos",
      "events_url": "https://api.github.com/users/lmlsna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmlsna/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lmlsna",
      "id": 30895125,
      "node_id": "MDQ6VXNlcjMwODk1MTI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/30895125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmlsna",
      "html_url": "https://github.com/lmlsna",
      "followers_url": "https://api.github.com/users/lmlsna/followers",
      "following_url": "https://api.github.com/users/lmlsna/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmlsna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmlsna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmlsna/subscriptions",
      "organizations_url": "https://api.github.com/users/lmlsna/orgs",
      "repos_url": "https://api.github.com/users/lmlsna/repos",
      "events_url": "https://api.github.com/users/lmlsna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmlsna/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c1f8abb0182da557d07372b938f3a0a4bb906f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 31,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5ac29b137693a650711e1e3bf57fe6dafe354c20",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3055bbea1255cd791564b855b6951a9f4c510f9/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3055bbea1255cd791564b855b6951a9f4c510f9/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c3055bbea1255cd791564b855b6951a9f4c510f9",
        "patch": "@@ -392,11 +392,37 @@ void RPCExecutor::request(const QString &command)\n     {\n         std::string result;\n         std::string executableCommand = command.toStdString() + \"\\n\";\n+\n+        // Catch the console-only-help command before RPC call is executed and reply with help text as-if a RPC reply.\n+        if(executableCommand == \"help-console\\n\")\n+        {\n+            Q_EMIT reply(RPCConsole::CMD_REPLY, QString((\"\\n\"\n+                \"This console accepts RPC commands using the standard syntax.\\n\"\n+                \"   example:    getblockhash 0\\n\\n\"\n+\n+                \"This console can also accept RPC commands using parenthesized syntax.\\n\"\n+                \"   example:    getblockhash(0)\\n\\n\"\n+\n+                \"Commands may be nested when specified with the parenthesized syntax.\\n\"\n+                \"   example:    getblock(getblockhash(0) 1)\\n\\n\"\n+\n+                \"A space or a comma can be used to delimit arguments for either syntax.\\n\"\n+                \"   example:    getblockhash 0\\n\"\n+                \"               getblockhash,0\\n\\n\"\n+\n+                \"Named results can be queried with a non-quoted key string in brackets.\\n\"\n+                \"   example:    getblock(getblockhash(0) true)[tx]\\n\\n\"\n+\n+                \"Results without keys can be queried using an integer in brackets.\\n\"\n+                \"   example:    getblock(getblockhash(0),true)[tx][0]\\n\\n\")));\n+            return;\n+        }\n         if(!RPCConsole::RPCExecuteCommandLine(result, executableCommand))\n         {\n             Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n             return;\n         }\n+\n         Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(result));\n     }\n     catch (UniValue& objError)\n@@ -645,6 +671,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n             wordList << (\"help \" + commandList[i]).c_str();\n         }\n \n+        wordList << \"help-console\";\n         wordList.sort();\n         autoCompleter = new QCompleter(wordList, this);\n         autoCompleter->setModelSorting(QCompleter::CaseSensitivelySortedModel);\n@@ -750,10 +777,11 @@ void RPCConsole::clear(bool clearHistory)\n \t \n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n-                        tr(\"Type <b>help</b> for an overview of available commands.\")) +\n-                        \"<br><span class=\\\"secwarning\\\">\" +\n+                        tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n+                        tr(\"For more information on using this console type %1.\").arg(\"<b>help-console</b>\") +\n+                        \"<br><span class=\\\"secwarning\\\"><br>\" +\n                         tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.\") +\n-                        \"</span>\",\n+                        \"</span>\"),\n                         true);\n }\n "
      }
    ]
  },
  {
    "sha": "f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTRjMmVjYjQ4ZjJiMzY1NmY3NDEyYTAxMDU2OWVhZjIxZmE4M2Y1",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-11-18T07:55:45Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-11-18T07:55:45Z"
      },
      "message": "Fix for mismatched extern definition in wallet test classes which was breaking msvc linking.",
      "tree": {
        "sha": "3d3743b1599217aa4bbc75ea2905920ba01aef50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d3743b1599217aa4bbc75ea2905920ba01aef50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94c2ecb48f2b3656f7412a010569eaf21fa83f5/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "142913296f006650127b7a2ef03954e46bfd585c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142913296f006650127b7a2ef03954e46bfd585c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/142913296f006650127b7a2ef03954e46bfd585c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "edbabcc921dffaec3a9e5b5a4c40b87a6010b817",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f94c2ecb48f2b3656f7412a010569eaf21fa83f5/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f94c2ecb48f2b3656f7412a010569eaf21fa83f5/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern CWallet* pwalletMain;\n+extern std::unique_ptr<CWallet> pwalletMain;\n \n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n "
      },
      {
        "sha": "31b75120b493c027f91d7d0757de9d52fad7c460",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f94c2ecb48f2b3656f7412a010569eaf21fa83f5/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f94c2ecb48f2b3656f7412a010569eaf21fa83f5/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
        "patch": "@@ -19,7 +19,7 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n-extern CWallet* pwalletMain;\n+extern std::unique_ptr<CWallet> pwalletMain;\n \n extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue dumpwallet(const JSONRPCRequest& request);"
      }
    ]
  },
  {
    "sha": "65e91f5edf555691d0e5809d441cff7fa63ba722",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWU5MWY1ZWRmNTU1NjkxZDBlNTgwOWQ0NDFjZmY3ZmE2M2JhNzIy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-18T08:48:34Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-11-18T08:48:34Z"
      },
      "message": "[tests] Test that mempool rejects coinbase transactions",
      "tree": {
        "sha": "9a725eebb6bc41e6208f1cf46a9167d2d861dd9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a725eebb6bc41e6208f1cf46a9167d2d861dd9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65e91f5edf555691d0e5809d441cff7fa63ba722",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e91f5edf555691d0e5809d441cff7fa63ba722",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65e91f5edf555691d0e5809d441cff7fa63ba722",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e91f5edf555691d0e5809d441cff7fa63ba722/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "142913296f006650127b7a2ef03954e46bfd585c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142913296f006650127b7a2ef03954e46bfd585c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/142913296f006650127b7a2ef03954e46bfd585c"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "06175be3fc77f73a3f1e4247db050c30f578e7be",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e91f5edf555691d0e5809d441cff7fa63ba722/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e91f5edf555691d0e5809d441cff7fa63ba722/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=65e91f5edf555691d0e5809d441cff7fa63ba722",
        "patch": "@@ -80,6 +80,7 @@ BITCOIN_TESTS =\\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "d6abe3e5a9973fcdc8ad6e1bc51529339df6dc29",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e91f5edf555691d0e5809d441cff7fa63ba722/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e91f5edf555691d0e5809d441cff7fa63ba722/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=65e91f5edf555691d0e5809d441cff7fa63ba722",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation.h>\n+#include <txmempool.h>\n+#include <amount.h>\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_AUTO_TEST_SUITE(txvalidation_tests)\n+\n+/**\n+ * Ensure that the mempool won't accept coinbase transactions.\n+ */\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n+{\n+    CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    CMutableTransaction coinbaseTx;\n+\n+    coinbaseTx.nVersion = 1;\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vin[0].scriptSig = CScript() << OP_11 << OP_EQUAL;\n+    coinbaseTx.vout[0].nValue = 1 * CENT;\n+    coinbaseTx.vout[0].scriptPubKey = scriptPubKey;\n+\n+    assert(CTransaction(coinbaseTx).IsCoinBase());\n+\n+    CValidationState state;\n+\n+    LOCK(cs_main);\n+\n+    unsigned int initialPoolSize = mempool.size();\n+\n+    BOOST_CHECK_EQUAL(\n+            false,\n+            AcceptToMemoryPool(mempool, state, MakeTransactionRef(coinbaseTx),\n+                nullptr /* pfMissingInputs */,\n+                nullptr /* plTxnReplaced */,\n+                true /* bypass_limits */,\n+                0 /* nAbsurdFee */));\n+\n+    // Check that the transaction hasn't been added to mempool.\n+    BOOST_CHECK_EQUAL(mempool.size(), initialPoolSize);\n+\n+    // Check that the validation state reflects the unsuccesful attempt.\n+    BOOST_CHECK(state.IsInvalid());\n+    BOOST_CHECK_EQUAL(state.GetRejectReason(), \"coinbase\");\n+\n+    int nDoS;\n+    BOOST_CHECK_EQUAL(state.IsInvalid(nDoS), true);\n+    BOOST_CHECK_EQUAL(nDoS, 100);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "938863965f14ce7ab0780dd9197c6e13f2093d87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Mzg4NjM5NjVmMTRjZTdhYjA3ODBkZDkxOTdjNmUxM2YyMDkzZDg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T11:05:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T11:05:31Z"
      },
      "message": "Merge #11710: cli: Reject arguments to -getinfo\n\ndcfef27 cli: Reject arguments to -getinfo (Wladimir J. van der Laan)\n\nPull request description:\n\n  Currently it's possible to accidentally type e.g.\n\n      bitcoin-cli -getinfo getbalance\n\n  and get an answer which can be confusing; the trailing arguments are just ignored.\n\n  To avoid this, throw an error if the user provides arguments to\n  `-getinfo`.\n\nTree-SHA512: 3603e8fa852b884d1dd3b7462db40b092fe8b3390fd4384b4ee330315d797aff711e9f62990012fd4b5a55c8678734ba8497a5488a09ee6b65cf8a99017d6eb4",
      "tree": {
        "sha": "3e9418d481ad693fea5586599e755ccaecacc30b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e9418d481ad693fea5586599e755ccaecacc30b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/938863965f14ce7ab0780dd9197c6e13f2093d87",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaEBP7AAoJEB5K7WKYbNJdtvwH/0Y1LoKECRox0Pc/k+P/lLWH\nndQMYyyq6pXc26C80CpdrdyB7IAvL4dfSDPbpnb2mKDy8r/boRIdv3biZN+W1XlM\nClayNbCqASei+mXmkSUnpmiXvJJ8M4vbbmEfUPQM07R10cWrdGYh/cN/z2325b1r\nMyHjb4tZQ/n2IVtkamNknlUPoXeBfuU9r5WoXsJ+w8uF790oVaj6NsZMqQ5Gg3JO\nz4WR3CtDxPRymaQqP9K4ErukxOERlwmmbxrDjmW8YJFyQFShKJPLYry71oXg1w6O\nX4eLpzc2YGHmuWi5A6TIhq9c8wSQyYuOCyB4NEE2vAnWdZOH3yI2/E25hzbfECg=\n=lq8m\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e9418d481ad693fea5586599e755ccaecacc30b\nparent 142913296f006650127b7a2ef03954e46bfd585c\nparent dcfef277b4920552f438c110390a5de93892a8de\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511003127 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511003131 +0100\n\nMerge #11710: cli: Reject arguments to -getinfo\n\ndcfef27 cli: Reject arguments to -getinfo (Wladimir J. van der Laan)\n\nPull request description:\n\n  Currently it's possible to accidentally type e.g.\n\n      bitcoin-cli -getinfo getbalance\n\n  and get an answer which can be confusing; the trailing arguments are just ignored.\n\n  To avoid this, throw an error if the user provides arguments to\n  `-getinfo`.\n\nTree-SHA512: 3603e8fa852b884d1dd3b7462db40b092fe8b3390fd4384b4ee330315d797aff711e9f62990012fd4b5a55c8678734ba8497a5488a09ee6b65cf8a99017d6eb4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938863965f14ce7ab0780dd9197c6e13f2093d87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/938863965f14ce7ab0780dd9197c6e13f2093d87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938863965f14ce7ab0780dd9197c6e13f2093d87/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "142913296f006650127b7a2ef03954e46bfd585c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142913296f006650127b7a2ef03954e46bfd585c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/142913296f006650127b7a2ef03954e46bfd585c"
      },
      {
        "sha": "dcfef277b4920552f438c110390a5de93892a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfef277b4920552f438c110390a5de93892a8de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfef277b4920552f438c110390a5de93892a8de"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "136981b70991c351492cd7d77731191f0359a45b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/938863965f14ce7ab0780dd9197c6e13f2093d87/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/938863965f14ce7ab0780dd9197c6e13f2093d87/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=938863965f14ce7ab0780dd9197c6e13f2093d87",
        "patch": "@@ -213,6 +213,9 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     /** Create a simulated `getinfo` request. */\n     UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n     {\n+        if (!args.empty()) {\n+            throw std::runtime_error(\"-getinfo takes no arguments\");\n+        }\n         UniValue result(UniValue::VARR);\n         result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n         result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));"
      },
      {
        "sha": "d1cd3b3620abbce21fe155f78353425655c37e59",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/938863965f14ce7ab0780dd9197c6e13f2093d87/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/938863965f14ce7ab0780dd9197c6e13f2093d87/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=938863965f14ce7ab0780dd9197c6e13f2093d87",
        "patch": "@@ -35,8 +35,11 @@ def run_test(self):\n         assert_equal([\"foo\", \"bar\"], self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=password + \"\\nfoo\\nbar\").echo())\n         assert_raises_process_error(1, \"incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=\"foo\").echo)\n \n+        self.log.info(\"Make sure that -getinfo with arguments fails\")\n+        assert_raises_process_error(1, \"-getinfo takes no arguments\", self.nodes[0].cli('-getinfo').help)\n+\n         self.log.info(\"Compare responses from `bitcoin-cli -getinfo` and the RPCs data is retrieved from.\")\n-        cli_get_info = self.nodes[0].cli('-getinfo').help()\n+        cli_get_info = self.nodes[0].cli().send_cli('-getinfo')\n         wallet_info = self.nodes[0].getwalletinfo()\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()"
      }
    ]
  },
  {
    "sha": "db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjBiNzM3M2ZjOTkwODA2YTA2YjZiYThhMjdiYTJkNzEwY2UyM2M4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-18T12:12:07Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-18T12:12:07Z"
      },
      "message": "[Qt] Improved copy: RBF checkbox, tooltip and confirmation screen\n\nOpt-in RBF checkbox uses less technical jargon and emphasises\nthe fee bump functionality (at the expense of not mentioning\nother uses of RBF).\n\nThe transaction confirmation screen uses copy consistent with this.",
      "tree": {
        "sha": "8c78b98f0d0f3bfef8d1bf114247c11e9acb4532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c78b98f0d0f3bfef8d1bf114247c11e9acb4532"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAloQI5wTHHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCcvkEAC384cy0xilwukCgvDCGRkfIbOiIA/U\nph+dcqZT3VlTkVXBvvQsOzN/0op+lSEo+xqHvPyV58Tz3yDY112VppYtlrKuYGdZ\nFOC38qLGbBthKN2Fc7I7CHmTReXqlCWeQu9Czjg46PQnVcUSgNGlwsWaUpncXTQm\nqS9aY2Au0wkwMvOeKUPfzFo8IJahn0HQTsxoJc3XZGwf/pIHnkOVBDAhKlaZFlKs\nnWu1Z6RAlhZMk/+r8D1MhpDu/sigHiak8LvSFE5zVsyiA5TF3uJDBqP8G5na32px\nD6nh0uP+rI1PE/nHCs7kQR4NrmMZ8SjCXpTm0pUBBjaeSOUWQcpQwbge5a2Zzu2I\nMRL5aANdS0ekt5ORQ2nNznhbIpAbc32CpUy1AVJiBuroucMy3Kulj7Emr7yx3TBf\n96OSvGhUXsPvLk6zu+Cy4Zz5Xj1Ruo6/99c5gXKgdPjrSH+I9XIZ6BR9Y8ZftRko\n3uqGeFkKjFvqsCm7Ps5Gm0+xxhWETsCEicv5ML1svjsPfxF+sKdXEDE6qaxBHGB6\nmvELiux2o2Kk5ClPzkNmMUOxPGC4UaEYiriKQMhkmZGt9Rh5YKJecu0Wi+PGd83A\nco4tS3ZkP+Y10rB0eCSst911BcWU0VoJ0fnLuS5Ve6+lq2IBJjMcZh/IeErL2VjT\nTHVf48FoYvGUUg==\n=Z3y2\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c78b98f0d0f3bfef8d1bf114247c11e9acb4532\nparent 938863965f14ce7ab0780dd9197c6e13f2093d87\nauthor Sjors Provoost <sjors@sprovoost.nl> 1511007127 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1511007127 +0100\n\n[Qt] Improved copy: RBF checkbox, tooltip and confirmation screen\n\nOpt-in RBF checkbox uses less technical jargon and emphasises\nthe fee bump functionality (at the expense of not mentioning\nother uses of RBF).\n\nThe transaction confirmation screen uses copy consistent with this.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0b7373fc990806a06b6ba8a27ba2d710ce23c8/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "938863965f14ce7ab0780dd9197c6e13f2093d87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938863965f14ce7ab0780dd9197c6e13f2093d87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/938863965f14ce7ab0780dd9197c6e13f2093d87"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c6fd708cdf2e82201cc6ff03d315c8b0733a820b",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b7373fc990806a06b6ba8a27ba2d710ce23c8/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b7373fc990806a06b6ba8a27ba2d710ce23c8/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
        "patch": "@@ -1108,10 +1108,10 @@\n            <item>\n             <widget class=\"QCheckBox\" name=\"optInRBF\">\n              <property name=\"text\">\n-              <string>Request Replace-By-Fee</string>\n+              <string>Allow increasing fee</string>\n              </property>\n              <property name=\"toolTip\">\n-              <string>Indicates that the sender may wish to replace this transaction with a new one paying higher fees (prior to being confirmed).</string>\n+              <string>This allows you to increase the fee later if the transaction takes a long time to confirm. This will also cause the recommended fee to be lower. (\"Replace-By-Fee\", BIP 125)</string>\n              </property>\n             </widget>\n            </item>"
      },
      {
        "sha": "e2b91778859b6e577e86dae01adcb168fd9bf627",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b7373fc990806a06b6ba8a27ba2d710ce23c8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b7373fc990806a06b6ba8a27ba2d710ce23c8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
        "patch": "@@ -345,7 +345,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     if (ui->optInRBF->isChecked())\n     {\n         questionString.append(\"<hr /><span>\");\n-        questionString.append(tr(\"This transaction signals replaceability (optin-RBF).\"));\n+        questionString.append(tr(\"You can increase the fee later (signals Replace-By-Fee).\"));\n         questionString.append(\"</span>\");\n     }\n "
      }
    ]
  },
  {
    "sha": "49667a77e76aa709717a09916b55ff671e9c6704",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTY2N2E3N2U3NmFhNzA5NzE3YTA5OTE2YjU1ZmY2NzFlOWM2NzA0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T13:03:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T13:03:12Z"
      },
      "message": "Merge #11713: Fix for mismatched extern definition in wallet tests\n\nf94c2ec Fix for mismatched extern definition in wallet test classes which was breaking msvc linking. (Aaron Clauson)\n\nPull request description:\n\n  The extern declarations are using a raw pointer which doesn't match the source variable's std::unqiue_ptr.\n\nTree-SHA512: 1500ffa1282ee6565741bf2f8f9def68a355346c8e4a667e1167d3d550eb0b732e8cba52fbef380a92c860e686d36da877d800ee5f2fc1e4dd8fd88fbe170644",
      "tree": {
        "sha": "b8a6282be876ffee7a5cbcd727f863ed3e26fb7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8a6282be876ffee7a5cbcd727f863ed3e26fb7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49667a77e76aa709717a09916b55ff671e9c6704",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaEC+QAAoJEB5K7WKYbNJdJeQIAJJ2dQxH69v/nunxyMhm7Jcm\nZyDSDuCstk39fEWdHEkh/4ZE5NkuTnnMMW0lYwEVfbQHUUpQJrzGS7ybxN4Pwb/c\nzXb/pR/hml+FkTY3ZET2pJcqAsNO2RDPxMt79Qdvw85YR1wCBpAq3KhxKzq4lrp4\nR96XJk00MJDEyha8RIsSqxd8s951Rd3XEZaZe5GQ3u7JVTpi6aDx3EEHw0akrzst\ngwwn4ioelhH+y7uzRdBlCNfyX+vKlkh3sek4T+D/64Xh3whVVhBd71wuV3h8HqFG\nxx9TigO9u3sMRUuOKGDWR5mFk7jU+8i//s4UD1cqoFSlIjwA02TxUOm+6t2Jvx8=\n=M0xw\n-----END PGP SIGNATURE-----",
        "payload": "tree b8a6282be876ffee7a5cbcd727f863ed3e26fb7e\nparent 938863965f14ce7ab0780dd9197c6e13f2093d87\nparent f94c2ecb48f2b3656f7412a010569eaf21fa83f5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511010184 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511010192 +0100\n\nMerge #11713: Fix for mismatched extern definition in wallet tests\n\nf94c2ec Fix for mismatched extern definition in wallet test classes which was breaking msvc linking. (Aaron Clauson)\n\nPull request description:\n\n  The extern declarations are using a raw pointer which doesn't match the source variable's std::unqiue_ptr.\n\nTree-SHA512: 1500ffa1282ee6565741bf2f8f9def68a355346c8e4a667e1167d3d550eb0b732e8cba52fbef380a92c860e686d36da877d800ee5f2fc1e4dd8fd88fbe170644\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49667a77e76aa709717a09916b55ff671e9c6704",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49667a77e76aa709717a09916b55ff671e9c6704",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49667a77e76aa709717a09916b55ff671e9c6704/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "938863965f14ce7ab0780dd9197c6e13f2093d87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938863965f14ce7ab0780dd9197c6e13f2093d87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/938863965f14ce7ab0780dd9197c6e13f2093d87"
      },
      {
        "sha": "f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94c2ecb48f2b3656f7412a010569eaf21fa83f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f94c2ecb48f2b3656f7412a010569eaf21fa83f5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "edbabcc921dffaec3a9e5b5a4c40b87a6010b817",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49667a77e76aa709717a09916b55ff671e9c6704/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49667a77e76aa709717a09916b55ff671e9c6704/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=49667a77e76aa709717a09916b55ff671e9c6704",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern CWallet* pwalletMain;\n+extern std::unique_ptr<CWallet> pwalletMain;\n \n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n "
      },
      {
        "sha": "31b75120b493c027f91d7d0757de9d52fad7c460",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49667a77e76aa709717a09916b55ff671e9c6704/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49667a77e76aa709717a09916b55ff671e9c6704/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=49667a77e76aa709717a09916b55ff671e9c6704",
        "patch": "@@ -19,7 +19,7 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n-extern CWallet* pwalletMain;\n+extern std::unique_ptr<CWallet> pwalletMain;\n \n extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue dumpwallet(const JSONRPCRequest& request);"
      }
    ]
  },
  {
    "sha": "49bd6590feb83ee422e489fd3930e8b700c5b4a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWJkNjU5MGZlYjgzZWU0MjJlNDg5ZmQzOTMwZThiNzAwYzViNGE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T13:11:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T13:16:38Z"
      },
      "message": "tests: move pwalletMain to wallet test fixture\n\nScope the variable instead of using an external global; this is how test\nfixtures are intended to be used.\n\nFollowup to #11713.",
      "tree": {
        "sha": "92f638c4d4a9bb48bfd81b1a543367f24b47bc04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92f638c4d4a9bb48bfd81b1a543367f24b47bc04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49bd6590feb83ee422e489fd3930e8b700c5b4a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bd6590feb83ee422e489fd3930e8b700c5b4a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49bd6590feb83ee422e489fd3930e8b700c5b4a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bd6590feb83ee422e489fd3930e8b700c5b4a7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49667a77e76aa709717a09916b55ff671e9c6704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49667a77e76aa709717a09916b55ff671e9c6704",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49667a77e76aa709717a09916b55ff671e9c6704"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 11,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b95bb14335645e55bdbbe6512689aa04106fba88",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=49bd6590feb83ee422e489fd3930e8b700c5b4a7",
        "patch": "@@ -10,18 +10,16 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern std::unique_ptr<CWallet> pwalletMain;\n-\n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n \n static void\n-GetResults(std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWallet *wallet, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(pwalletMain->ReorderTransactions() == DB_LOAD_OK);\n-    pwalletMain->ListAccountCreditDebit(\"\", aes);\n+    BOOST_CHECK(wallet->ReorderTransactions() == DB_LOAD_OK);\n+    wallet->ListAccountCreditDebit(\"\", aes);\n     for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n@@ -54,7 +52,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.strOtherAccount = \"c\";\n     pwalletMain->AddAccountingEntry(ae);\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n@@ -70,7 +68,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nOrderPos = pwalletMain->IncOrderPosNext();\n     pwalletMain->AddAccountingEntry(ae);\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(results.size() == 3);\n     BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n@@ -102,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(results.size() == 3);\n     BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n@@ -120,7 +118,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nOrderPos = -1;\n     pwalletMain->AddAccountingEntry(ae);\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(results.size() == 4);\n     BOOST_CHECK(pwalletMain->nOrderPosNext == 7);"
      },
      {
        "sha": "3ee83d2d7c28dc8976bfdd1958ef99db64a1f4d8",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=49bd6590feb83ee422e489fd3930e8b700c5b4a7",
        "patch": "@@ -6,9 +6,6 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n-#include <wallet/wallet.h>\n-\n-std::unique_ptr<CWallet> pwalletMain;\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n@@ -27,7 +24,6 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n WalletTestingSetup::~WalletTestingSetup()\n {\n     UnregisterValidationInterface(pwalletMain.get());\n-    pwalletMain.reset();\n \n     bitdb.Flush(true);\n     bitdb.Reset();"
      },
      {
        "sha": "292d65443894ecf8e3ca8c555d9ae59ed888298a",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=49bd6590feb83ee422e489fd3930e8b700c5b4a7",
        "patch": "@@ -7,11 +7,15 @@\n \n #include <test/test_bitcoin.h>\n \n+#include <wallet/wallet.h>\n+\n /** Testing setup and teardown for wallet.\n  */\n struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n+\n+    std::unique_ptr<CWallet> pwalletMain;\n };\n \n #endif"
      },
      {
        "sha": "80e31a1ce0d40361782df05ac4096c15e6824192",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bd6590feb83ee422e489fd3930e8b700c5b4a7/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=49bd6590feb83ee422e489fd3930e8b700c5b4a7",
        "patch": "@@ -19,8 +19,6 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n-extern std::unique_ptr<CWallet> pwalletMain;\n-\n extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue dumpwallet(const JSONRPCRequest& request);\n extern UniValue importwallet(const JSONRPCRequest& request);"
      }
    ]
  },
  {
    "sha": "d080a7d5030e65480a38d0841235900bdfa83702",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDgwYTdkNTAzMGU2NTQ4MGEzOGQwODQxMjM1OTAwYmRmYTgzNzAy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T13:32:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-18T13:41:15Z"
      },
      "message": "Merge #11466: Specify custom wallet directory with -walletdir param\n\nc1e5d40 Make debugging test crash easier (MeshCollider)\n8263f6a Create walletdir if datadir doesn't exist and fix tests (MeshCollider)\n9587a9c Default walletdir is wallets/ if it exists (MeshCollider)\nd987889 Add release notes for -walletdir and wallets/ dir (MeshCollider)\n80c5cbc Add test for -walletdir (MeshCollider)\n0530ba0 Add -walletdir parameter to specify custom wallet dir (MeshCollider)\n\nPull request description:\n\n  Closes #11348\n\n  Adds a `-walletdir` parameter which specifies a directory to use for wallets, allowing them to be stored separately from the 'main' data directory. Creates a new `wallets/` directory in datadir if this is the first time running, and defaults to using it if it exists.\n\n  Includes tests and release notes. Things which might need to be considered more:\n  - there is no 'lock' on the wallets directory, which might be needed?\n  - because this uses a new wallets/ directory by default, downgrading to an earlier version won't see the wallets in that directory (not a big deal though, users can just copy them up to the main dir)\n  - jnewbery suggested putting each wallet in its own directory, which is a good idea, but out of scope for this PR IMO. EDIT: this is being done in https://github.com/bitcoin/bitcoin/pull/11687\n  - doc/files.md needs updating (will do soon)\n\n  I also considered including  a cleanup by removing caching of data directory paths and instead just initialise them once on startup (c.f. #3073), but decided it wasn't super relevant here will just complicate review.\n\nTree-SHA512: c8ac04bfe9a810c32055f2c8b8fa0d535e56125ceb8d96f12447dd3538bf3e5ee992b60b1cd2173bf5f3fa023a9feab12c9963593bf27ed419df929bb413398d",
      "tree": {
        "sha": "bfe96788d84db9f454ad603b3d15655460d437cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfe96788d84db9f454ad603b3d15655460d437cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d080a7d5030e65480a38d0841235900bdfa83702",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaEDh7AAoJEB5K7WKYbNJdR+AIAJlyngGbHCypFgqNcYuJG7pT\nmcoBhEEwN3522PuIDyL2ln6hvjaeey+tg6ZpTi86mwVnYYw+fToX83TpRCTv0AfU\nuvCTqDDNR50SkR/1pvOC53gywvkG9ZspV/8L5x2r+VNGGT/+tiBfPuORzL8MfNgd\nuth9RzRlYcBKHjiBqbFuq++I6kJlX6b02ymDWTh6pudf5+oFZU6w30leK70BQ/Qa\nd7btjJfmhWjOyBwIu3lP3PDPkCj9txAQM0cndsm3S3KBQnS2tjE9KhK1bLf5C73d\ns2n21ifl8z9c5jgNK+ShD8AHbspu1Z2fbGvVHHQE2RdSXo549ykleY3CTaMS9Pw=\n=1yQT\n-----END PGP SIGNATURE-----",
        "payload": "tree bfe96788d84db9f454ad603b3d15655460d437cf\nparent 49667a77e76aa709717a09916b55ff671e9c6704\nparent c1e5d40e166f0b9ad832c14747e77322ab439185\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511011970 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511012475 +0100\n\nMerge #11466: Specify custom wallet directory with -walletdir param\n\nc1e5d40 Make debugging test crash easier (MeshCollider)\n8263f6a Create walletdir if datadir doesn't exist and fix tests (MeshCollider)\n9587a9c Default walletdir is wallets/ if it exists (MeshCollider)\nd987889 Add release notes for -walletdir and wallets/ dir (MeshCollider)\n80c5cbc Add test for -walletdir (MeshCollider)\n0530ba0 Add -walletdir parameter to specify custom wallet dir (MeshCollider)\n\nPull request description:\n\n  Closes #11348\n\n  Adds a `-walletdir` parameter which specifies a directory to use for wallets, allowing them to be stored separately from the 'main' data directory. Creates a new `wallets/` directory in datadir if this is the first time running, and defaults to using it if it exists.\n\n  Includes tests and release notes. Things which might need to be considered more:\n  - there is no 'lock' on the wallets directory, which might be needed?\n  - because this uses a new wallets/ directory by default, downgrading to an earlier version won't see the wallets in that directory (not a big deal though, users can just copy them up to the main dir)\n  - jnewbery suggested putting each wallet in its own directory, which is a good idea, but out of scope for this PR IMO. EDIT: this is being done in https://github.com/bitcoin/bitcoin/pull/11687\n  - doc/files.md needs updating (will do soon)\n\n  I also considered including  a cleanup by removing caching of data directory paths and instead just initialise them once on startup (c.f. #3073), but decided it wasn't super relevant here will just complicate review.\n\nTree-SHA512: c8ac04bfe9a810c32055f2c8b8fa0d535e56125ceb8d96f12447dd3538bf3e5ee992b60b1cd2173bf5f3fa023a9feab12c9963593bf27ed419df929bb413398d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d080a7d5030e65480a38d0841235900bdfa83702",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d080a7d5030e65480a38d0841235900bdfa83702",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d080a7d5030e65480a38d0841235900bdfa83702/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49667a77e76aa709717a09916b55ff671e9c6704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49667a77e76aa709717a09916b55ff671e9c6704",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49667a77e76aa709717a09916b55ff671e9c6704"
      },
      {
        "sha": "c1e5d40e166f0b9ad832c14747e77322ab439185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e5d40e166f0b9ad832c14747e77322ab439185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e5d40e166f0b9ad832c14747e77322ab439185"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 144,
      "deletions": 46
    },
    "files": [
      {
        "sha": "32f1bef62cd9cc9b828b9d4b7551eafe107823db",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -20,7 +20,7 @@ How to Upgrade\n ==============\n \n If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the \n+shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n@@ -62,6 +62,20 @@ Due to a backward-incompatible change in the wallet database, wallets created\n with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0\n will only create hierarchical deterministic (HD) wallets.\n \n+Custom wallet directories\n+---------------------\n+The ability to specify a directory other than the default data directory in which to store\n+wallets has been added. An existing directory can be specified using the `-walletdir=<dir>`\n+argument. Wallets loaded via `-wallet` arguments must be in this wallet directory. Care should be taken\n+when choosing a wallet directory location, as if  it becomes unavailable during operation,\n+funds may be lost.\n+\n+Default wallet directory change\n+--------------------------\n+On new installations (if the data directory doesn't exist), wallets will now be stored in a\n+new `wallets/` subdirectory inside the data directory. If this `wallets/` subdirectory\n+doesn't exist (i.e. on existing nodes), the current datadir root is used instead, as it was.\n+\n Low-level RPC changes\n ----------------------\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:"
      },
      {
        "sha": "4b65774fc6f583e42a26a43687ec8777c845aa19",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -168,6 +168,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/walletutil.h \\\n   warnings.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n@@ -249,6 +250,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n+  wallet/walletutil.cpp \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library"
      },
      {
        "sha": "7f8a8394e691a63476906a8bb01170e235bd92e8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -214,7 +214,10 @@ bool Intro::pickDataDirectory()\n             }\n             dataDir = intro.getDataDirectory();\n             try {\n-                TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir));\n+                if (TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir))) {\n+                    // If a new data directory has been created, make wallets subdirectory too\n+                    TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir) / \"wallets\");\n+                }\n                 break;\n             } catch (const fs::filesystem_error&) {\n                 QMessageBox::critical(0, tr(PACKAGE_NAME),"
      },
      {
        "sha": "d58f39e969b3b070b40ceecee282e90c3b7cf208",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -574,7 +574,10 @@ const fs::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific)\n         path /= BaseParams().DataDir();\n \n-    fs::create_directories(path);\n+    if (fs::create_directories(path)) {\n+        // This is the first run, create wallets subdirectory too\n+        fs::create_directories(path / \"wallets\");\n+    }\n \n     return path;\n }"
      },
      {
        "sha": "79ff27279c185cbd72a3b1cb93483869296056dd",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -11,6 +11,7 @@\n #include <protocol.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <wallet/walletutil.h>\n \n #include <stdint.h>\n \n@@ -257,23 +258,23 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n-        errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n+        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.string());\n         return false;\n     }\n \n-    if (!bitdb.Open(dataDir))\n+    if (!bitdb.Open(walletDir))\n     {\n         // try moving the database env out of the way\n-        fs::path pathDatabase = dataDir / \"database\";\n-        fs::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        fs::path pathDatabase = walletDir / \"database\";\n+        fs::path pathDatabaseBak = walletDir / strprintf(\"database.%d.bak\", GetTime());\n         try {\n             fs::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n@@ -282,18 +283,18 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataD\n         }\n \n         // try again\n-        if (!bitdb.Open(dataDir)) {\n+        if (!bitdb.Open(walletDir)) {\n             // if it still fails, it probably means we can't even create the database env\n-            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n+            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n             return false;\n         }\n     }\n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n {\n-    if (fs::exists(dataDir / walletFile))\n+    if (fs::exists(walletDir / walletFile))\n     {\n         std::string backup_filename;\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc, backup_filename);\n@@ -303,7 +304,7 @@ bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& data\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\"),\n-                                   walletFile, backup_filename, dataDir);\n+                                   walletFile, backup_filename, walletDir);\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n         {\n@@ -407,7 +408,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n \n     {\n         LOCK(env->cs_db);\n-        if (!env->Open(GetDataDir()))\n+        if (!env->Open(GetWalletDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         pdb = env->mapDb[strFilename];\n@@ -695,7 +696,7 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                 env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n-                fs::path pathSrc = GetDataDir() / strFile;\n+                fs::path pathSrc = GetWalletDir() / strFile;\n                 fs::path pathDest(strDest);\n                 if (fs::is_directory(pathDest))\n                     pathDest /= strFile;"
      },
      {
        "sha": "ed2ee65cacc6d48ed32a1a0817ec46ad4896646a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -167,9 +167,9 @@ class CDB\n        ideal to be called periodically */\n     static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>"
      },
      {
        "sha": "67c46df87d69cae1ba2c6d4c2c78666011b17099",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -9,8 +9,9 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validation.h>\n-#include <wallet/wallet.h>\n #include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletutil.h>\n \n std::string GetWalletHelpString(bool showDebug)\n {\n@@ -34,6 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n+    strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n                                \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -191,6 +193,12 @@ bool VerifyWallets()\n         return true;\n     }\n \n+    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+        return InitError(strprintf(_(\"Error: Specified wallet directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-walletdir\", \"\").c_str()));\n+    }\n+\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+\n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n \n     // Keep track of each wallet absolute path to detect duplicates.\n@@ -205,7 +213,7 @@ bool VerifyWallets()\n             return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n         }\n \n-        fs::path wallet_path = fs::absolute(walletFile, GetDataDir());\n+        fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n \n         if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n             return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n@@ -216,7 +224,7 @@ bool VerifyWallets()\n         }\n \n         std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetDataDir().string(), strError)) {\n+        if (!CWalletDB::VerifyEnvironment(walletFile, GetWalletDir().string(), strError)) {\n             return InitError(strError);\n         }\n \n@@ -230,7 +238,7 @@ bool VerifyWallets()\n         }\n \n         std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetDataDir().string(), strWarning, strError);\n+        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetWalletDir().string(), strWarning, strError);\n         if (!strWarning.empty()) {\n             InitWarning(strWarning);\n         }"
      },
      {
        "sha": "9a7861f978ee092ab58dd665dfbe0b9328354837",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -26,6 +26,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n \n #include <init.h>  // For StartShutdown\n "
      },
      {
        "sha": "5116d6419e89813e8b6af53cf67892c3d46f2b2f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -814,14 +814,14 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n {\n-    return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n+    return CDB::VerifyEnvironment(walletFile, walletDir, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr)\n {\n-    return CDB::VerifyDatabaseFile(walletFile, dataDir, warningStr, errorStr, CWalletDB::Recover);\n+    return CDB::VerifyDatabaseFile(walletFile, walletDir, warningStr, errorStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "e815bcfeda61dc3d0a48512607d9d9738b4088bb",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -226,9 +226,9 @@ class CWalletDB\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "fbb5215a51efdde112e90021e287e16eb49d0914",
        "filename": "src/wallet/walletutil.cpp",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/walletutil.h\"\n+\n+fs::path GetWalletDir()\n+{\n+    fs::path path;\n+\n+    if (gArgs.IsArgSet(\"-walletdir\")) {\n+        path = fs::system_complete(gArgs.GetArg(\"-walletdir\", \"\"));\n+        if (!fs::is_directory(path)) {\n+            // If the path specified doesn't exist, we return the deliberately\n+            // invalid empty string.\n+            path = \"\";\n+        }\n+    } else {\n+        path = GetDataDir();\n+        // If a wallets directory exists, use that, otherwise default to GetDataDir\n+        if (fs::is_directory(path / \"wallets\")) {\n+            path /= \"wallets\";\n+        }\n+    }\n+\n+    return path;\n+}"
      },
      {
        "sha": "a94f286a44219d9b6aaada9ce9e1bef16f893ef5",
        "filename": "src/wallet/walletutil.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_UTIL_H\n+#define BITCOIN_WALLET_UTIL_H\n+\n+#include \"util.h\"\n+\n+//! Get the path of the wallet directory.\n+fs::path GetWalletDir();\n+\n+#endif // BITCOIN_WALLET_UTIL_H"
      },
      {
        "sha": "e7af3c398718640a5a1a2655954e3fab9dd2644f",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -33,7 +33,7 @@ def run_test(self):\n \n         self.stop_node(1)\n \n-        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallets/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n         self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n@@ -56,7 +56,7 @@ def run_test(self):\n \n         self.stop_node(1)\n \n-        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n "
      },
      {
        "sha": "4a721d11099f62fbf373078781d45372a5cd9a85",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 26,
        "deletions": 4,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -27,18 +27,40 @@ def run_test(self):\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n-        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n+        wallet_dir = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'wallets')\n+        os.mkdir(os.path.join(wallet_dir, 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n-                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        shutil.copyfile(os.path.join(wallet_dir, 'w2'), os.path.join(wallet_dir, 'w22'))\n         self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n+        os.symlink(os.path.join(wallet_dir, 'w1'), os.path.join(wallet_dir, 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n+        # should not initialize if the specified walletdir does not exist\n+        self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified wallet directory \"bad\" does not exist.')\n+\n+        # if wallets/ doesn't exist, datadir should be the default wallet dir\n+        wallet_dir2 = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')\n+        os.rename(wallet_dir, wallet_dir2)\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5'])\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n+        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        w5.generate(1)\n+        self.stop_node(0)\n+\n+        # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n+        os.rename(wallet_dir2, wallet_dir)\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest')])\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n+        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        w5_info = w5.getwalletinfo()\n+        assert_equal(w5_info['immature_balance'], 50)\n+\n+        self.stop_node(0)\n+\n         self.start_node(0, self.extra_args[0])\n \n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")"
      },
      {
        "sha": "4590b4c65091218c32870f990e2a0217c076edcc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -432,7 +432,7 @@ def _initialize_chain(self):\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"wallets/db.log\"))\n                 os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n                 os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n "
      },
      {
        "sha": "d953e1585cb974a9ac2120559e1b0a95fddf88bd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -300,7 +300,11 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+        try:\n+            subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+        except Exception as e:\n+            print(e.output)\n+            raise e\n \n     #Run Tests\n     job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)"
      },
      {
        "sha": "d21656a971656c20dfde84ce4ed6735c6f601d84",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -73,7 +73,7 @@ def run_test (self):\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n         shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n         shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n-        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallets/wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic"
      },
      {
        "sha": "8ef5620cd8cfc6158d1b6ccf1602adce1f288de0",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d080a7d5030e65480a38d0841235900bdfa83702/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=d080a7d5030e65480a38d0841235900bdfa83702",
        "patch": "@@ -90,9 +90,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -154,9 +154,9 @@ def run_test(self):\n         shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n \n         # Restore wallets from backup\n-        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -192,10 +192,10 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            tmpdir + \"/node0/regtest/wallet.dat\",\n-            tmpdir + \"/node0/./regtest/wallet.dat\",\n-            tmpdir + \"/node0/regtest/\",\n-            tmpdir + \"/node0/regtest\"]\n+            tmpdir + \"/node0/regtest/wallets/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallets/wallet.dat\",\n+            tmpdir + \"/node0/regtest/wallets/\",\n+            tmpdir + \"/node0/regtest/wallets\"]\n \n         for sourcePath in sourcePaths:\n             assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)"
      }
    ]
  },
  {
    "sha": "bba9bd0d9dd06f13a6b0c89181864453cab5c858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmE5YmQwZDlkZDA2ZjEzYTZiMGM4OTE4MTg2NDQ1M2NhYjVjODU4",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-11-18T19:35:14Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-11-18T19:35:14Z"
      },
      "message": "Switched sync.{cpp,h} to std threading primitives.",
      "tree": {
        "sha": "b16239a61b68699026e7c7b93c0dad06081abd80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b16239a61b68699026e7c7b93c0dad06081abd80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bba9bd0d9dd06f13a6b0c89181864453cab5c858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba9bd0d9dd06f13a6b0c89181864453cab5c858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bba9bd0d9dd06f13a6b0c89181864453cab5c858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba9bd0d9dd06f13a6b0c89181864453cab5c858/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 15,
      "deletions": 19
    },
    "files": [
      {
        "sha": "116533eb411f4aa35847c41dd9aaa645e24fd203",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bba9bd0d9dd06f13a6b0c89181864453cab5c858/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bba9bd0d9dd06f13a6b0c89181864453cab5c858/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=bba9bd0d9dd06f13a6b0c89181864453cab5c858",
        "patch": "@@ -4,13 +4,12 @@\n \n #include <sync.h>\n \n+#include <set>\n #include <util.h>\n #include <utilstrencodings.h>\n \n #include <stdio.h>\n \n-#include <boost/thread.hpp>\n-\n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n {\n@@ -45,8 +44,8 @@ struct CLockLocation {\n         return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n-    bool fTry;\n private:\n+    bool fTry;\n     std::string mutexName;\n     std::string sourceFile;\n     int sourceLine;\n@@ -67,10 +66,10 @@ struct LockData {\n \n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n-    boost::mutex dd_mutex;\n+    std::mutex dd_mutex;\n } static lockdata;\n \n-boost::thread_specific_ptr<LockStack> lockstack;\n+static thread_local std::unique_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n@@ -100,12 +99,12 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n \n static void push_lock(void* c, const CLockLocation& locklocation)\n {\n-    if (lockstack.get() == nullptr)\n+    if (!lockstack)\n         lockstack.reset(new LockStack);\n \n-    boost::unique_lock<boost::mutex> lock(lockdata.dd_mutex);\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n \n-    (*lockstack).push_back(std::make_pair(c, locklocation));\n+    lockstack->push_back(std::make_pair(c, locklocation));\n \n     for (const std::pair<void*, CLockLocation> & i : (*lockstack)) {\n         if (i.first == c)\n@@ -171,7 +170,7 @@ void DeleteLock(void* cs)\n         // We're already shutting down.\n         return;\n     }\n-    boost::unique_lock<boost::mutex> lock(lockdata.dd_mutex);\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n     std::pair<void*, void*> item = std::make_pair(cs, nullptr);\n     LockOrders::iterator it = lockdata.lockorders.lower_bound(item);\n     while (it != lockdata.lockorders.end() && it->first.first == cs) {"
      },
      {
        "sha": "3af27c65d0d4dc799646a6ac474f44b647dcaf16",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bba9bd0d9dd06f13a6b0c89181864453cab5c858/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bba9bd0d9dd06f13a6b0c89181864453cab5c858/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=bba9bd0d9dd06f13a6b0c89181864453cab5c858",
        "patch": "@@ -8,8 +8,6 @@\n \n #include <threadsafety.h>\n \n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/mutex.hpp>\n #include <condition_variable>\n #include <thread>\n #include <mutex>\n@@ -196,25 +194,23 @@ class SCOPED_LOCKABLE CCriticalBlock\n class CSemaphore\n {\n private:\n-    boost::condition_variable condition;\n-    boost::mutex mutex;\n+    std::condition_variable condition;\n+    std::mutex mutex;\n     int value;\n \n public:\n     explicit CSemaphore(int init) : value(init) {}\n \n     void wait()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        while (value < 1) {\n-            condition.wait(lock);\n-        }\n+        std::unique_lock<std::mutex> lock(mutex);\n+        condition.wait(lock, [&]() { return value >= 1; });\n         value--;\n     }\n \n     bool try_wait()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        std::lock_guard<std::mutex> lock(mutex);\n         if (value < 1)\n             return false;\n         value--;\n@@ -224,7 +220,7 @@ class CSemaphore\n     void post()\n     {\n         {\n-            boost::unique_lock<boost::mutex> lock(mutex);\n+            std::lock_guard<std::mutex> lock(mutex);\n             value++;\n         }\n         condition.notify_one();"
      },
      {
        "sha": "08de43d29ffd33c6a6e51d773fcca19e2108d018",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bba9bd0d9dd06f13a6b0c89181864453cab5c858/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bba9bd0d9dd06f13a6b0c89181864453cab5c858/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=bba9bd0d9dd06f13a6b0c89181864453cab5c858",
        "patch": "@@ -28,6 +28,7 @@\n #include <vector>\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();"
      }
    ]
  },
  {
    "sha": "0d89fa0877930c6c8a539a656c1009ad8ab6755b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDg5ZmEwODc3OTMwYzZjOGE1MzlhNjU2YzEwMDlhZDhhYjY3NTVi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-18T22:30:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-18T22:30:24Z"
      },
      "message": "Merge #11707: [tests] Fix sendheaders\n\n9d42cc333 [tests] address review comments (John Newbery)\nf0c4ab9a7 [tests] fix flakiness in sendheaders.py (John Newbery)\n25fd6e2c2 [tests] refactor check_last_announcement() in sendheaders.py (John Newbery)\nf39d4bbd1 [tests] tidy up BaseNode in sendheaders.py (John Newbery)\n2613c545f [tests] fix flake8 warnings in sendheaders.py (John Newbery)\n\nPull request description:\n\n  This PR should fix the intermittent failure of sendheaders.py described in #11673. The first three commits are tidying up and refactoring the file. The final commit _fix flakiness in sendheaders.py_ fixes the intermittent failures. The commit message for that commit describes the problems that are being fixed.\n\n  I think @laanwj @MeshCollider @MarcoFalke have seen these failures.\n\n  fixes #11673\n\nTree-SHA512: 278e1af85f2eae00f970f2d8ef33686dd52b4f62180dea4cfdaff7bcf3287c6f1c2930355d99461a12f0c51c4d42cc3b1cb3275174134028ca4d06ffc24c18dd",
      "tree": {
        "sha": "33914103f2b88f7f349817040831def9e6ad215e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33914103f2b88f7f349817040831def9e6ad215e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d89fa0877930c6c8a539a656c1009ad8ab6755b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaELSAAAoJENLqSFDnUoslUBQP/jycM5Vzu1DflmZdfwU+Y+yY\nz5ugtfMlXEXPvZJn6VbpbPJC5dmtMOdJk3dh8WM5hXWXRyijMgObe2/RBw5NPYcL\nGBYppmU+Ri3UfPyadqs6LKnRPaNoo15hCQXgNuqEzvscacRMIPhfly7hdeowPzw3\nZeQ11nmZlV7VKsSiI2GJhFJwtZSzcrU2/9RhspLkzFFc8HlZGi8PM5aAvpGF7mQV\nto7cPQvf7q2Ken9A15Q2+NiaFHCzdONWVDOBU6REihi7Rwv+TrxrP6LDqTsz0N3S\nHQKMFm+rQmFIg4EbHfOpRJEFZr4OYqDFFBESwnR9xqdzCjbNV/OC8saxp3tfG5lY\njIKN+w/C7PgYJQ4xDbP2XIPraXG3dA88bKRelhhxf8/lDCTwNkVbKaUYpnZN9oxn\nCL8yOndQoWAX26UUpJ4JJH2bhmIffYLn3ZdbCs4IYOkNhsAOrax+A4gnYjroRcpE\n8cYAcqGjGhzmW/fg9v+txyL/5TIVuTNVjRnxnd4HUEEinFeNylCssMxe6mIr9wFO\nLp89U9oL370ZZr+aD61QL1ghf5muASmYphVseHdRbfllwloD9AGjkApfOOjH/yJb\nwBIXb5/G6cgHOK3k/pC7QGvxzgAYtD8C9T/EPiY2b0OtsC5nub7QaHk5Q1oCpTYI\nrHFGD9/5XuY4Uso69tBt\n=g68R\n-----END PGP SIGNATURE-----",
        "payload": "tree 33914103f2b88f7f349817040831def9e6ad215e\nparent d080a7d5030e65480a38d0841235900bdfa83702\nparent 9d42cc333139d7101a9223421d9eabcddfd0b025\nauthor MarcoFalke <falke.marco@gmail.com> 1511044214 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1511044224 -0500\n\nMerge #11707: [tests] Fix sendheaders\n\n9d42cc333 [tests] address review comments (John Newbery)\nf0c4ab9a7 [tests] fix flakiness in sendheaders.py (John Newbery)\n25fd6e2c2 [tests] refactor check_last_announcement() in sendheaders.py (John Newbery)\nf39d4bbd1 [tests] tidy up BaseNode in sendheaders.py (John Newbery)\n2613c545f [tests] fix flake8 warnings in sendheaders.py (John Newbery)\n\nPull request description:\n\n  This PR should fix the intermittent failure of sendheaders.py described in #11673. The first three commits are tidying up and refactoring the file. The final commit _fix flakiness in sendheaders.py_ fixes the intermittent failures. The commit message for that commit describes the problems that are being fixed.\n\n  I think @laanwj @MeshCollider @MarcoFalke have seen these failures.\n\n  fixes #11673\n\nTree-SHA512: 278e1af85f2eae00f970f2d8ef33686dd52b4f62180dea4cfdaff7bcf3287c6f1c2930355d99461a12f0c51c4d42cc3b1cb3275174134028ca4d06ffc24c18dd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d89fa0877930c6c8a539a656c1009ad8ab6755b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d89fa0877930c6c8a539a656c1009ad8ab6755b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d89fa0877930c6c8a539a656c1009ad8ab6755b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d080a7d5030e65480a38d0841235900bdfa83702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d080a7d5030e65480a38d0841235900bdfa83702",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d080a7d5030e65480a38d0841235900bdfa83702"
      },
      {
        "sha": "9d42cc333139d7101a9223421d9eabcddfd0b025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d42cc333139d7101a9223421d9eabcddfd0b025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d42cc333139d7101a9223421d9eabcddfd0b025"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 141,
      "deletions": 121
    },
    "files": [
      {
        "sha": "68c0d95b4f9912b6c11a3870423269ab453e103c",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 141,
        "deletions": 121,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d89fa0877930c6c8a539a656c1009ad8ab6755b/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d89fa0877930c6c8a539a656c1009ad8ab6755b/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=0d89fa0877930c6c8a539a656c1009ad8ab6755b",
        "patch": "@@ -4,11 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test behavior of headers messages to announce blocks.\n \n-Setup: \n+Setup:\n \n-- Two nodes, two p2p connections to node0. One p2p connection should only ever\n-  receive inv's (omitted from testing description below, this is our control).\n-  Second node is used for creating reorgs.\n+- Two nodes:\n+    - node0 is the node-under-test. We create two p2p connections to it. The\n+      first p2p connection is a control and should only ever receive inv's. The\n+      second p2p connection tests the headers sending logic.\n+    - node1 is used to create reorgs.\n \n test_null_locators\n ==================\n@@ -83,35 +85,45 @@\n e. Announce one more that doesn't connect.\n    Expect: disconnect.\n \"\"\"\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import (\n+    CBlockHeader,\n+    CInv,\n+    NODE_WITNESS,\n+    NetworkThread,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_getblocks,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_sendheaders,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    sync_blocks,\n+    wait_until,\n+)\n \n+DIRECT_FETCH_RESPONSE_TIME = 0.05\n \n-direct_fetch_response_time = 0.05\n-\n-class TestNode(NodeConnCB):\n+class BaseNode(NodeConnCB):\n     def __init__(self):\n         super().__init__()\n         self.block_announced = False\n         self.last_blockhash_announced = None\n \n-    def clear_last_announcement(self):\n-        with mininode_lock:\n-            self.block_announced = False\n-            self.last_message.pop(\"inv\", None)\n-            self.last_message.pop(\"headers\", None)\n-\n-    # Request data for a list of block hashes\n-    def get_data(self, block_hashes):\n+    def send_get_data(self, block_hashes):\n+        \"\"\"Request data for a list of block hashes.\"\"\"\n         msg = msg_getdata()\n         for x in block_hashes:\n             msg.inv.append(CInv(2, x))\n         self.connection.send_message(msg)\n \n-    def get_headers(self, locator, hashstop):\n+    def send_get_headers(self, locator, hashstop):\n         msg = msg_getheaders()\n         msg.locator.vHave = locator\n         msg.hashstop = hashstop\n@@ -122,6 +134,27 @@ def send_block_inv(self, blockhash):\n         msg.inv = [CInv(2, blockhash)]\n         self.connection.send_message(msg)\n \n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n+        self.send_message(headers_message)\n+\n+    def send_getblocks(self, locator):\n+        getblocks_message = msg_getblocks()\n+        getblocks_message.locator.vHave = locator\n+        self.send_message(getblocks_message)\n+\n+    def wait_for_getdata(self, hash_list, timeout=60):\n+        if hash_list == []:\n+            return\n+\n+        test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_block_announcement(self, block_hash, timeout=60):\n+        test_function = lambda: self.last_blockhash_announced == block_hash\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n     def on_inv(self, conn, message):\n         self.block_announced = True\n         self.last_blockhash_announced = message.inv[-1].hash\n@@ -132,97 +165,79 @@ def on_headers(self, conn, message):\n             message.headers[-1].calc_sha256()\n             self.last_blockhash_announced = message.headers[-1].sha256\n \n-    # Test whether the last announcement we received had the\n-    # right header or the right inv\n-    # inv and headers should be lists of block hashes\n+    def clear_last_announcement(self):\n+        with mininode_lock:\n+            self.block_announced = False\n+            self.last_message.pop(\"inv\", None)\n+            self.last_message.pop(\"headers\", None)\n+\n     def check_last_announcement(self, headers=None, inv=None):\n-        expect_headers = headers if headers != None else []\n-        expect_inv = inv if inv != None else []\n+        \"\"\"Test whether the last announcement received had the right header or the right inv.\n+\n+        inv and headers should be lists of block hashes.\"\"\"\n+\n         test_function = lambda: self.block_announced\n         wait_until(test_function, timeout=60, lock=mininode_lock)\n+\n         with mininode_lock:\n             self.block_announced = False\n \n-            success = True\n             compare_inv = []\n             if \"inv\" in self.last_message:\n                 compare_inv = [x.hash for x in self.last_message[\"inv\"].inv]\n-            if compare_inv != expect_inv:\n-                success = False\n+            if inv is not None:\n+                assert_equal(compare_inv, inv)\n \n-            hash_headers = []\n+            compare_headers = []\n             if \"headers\" in self.last_message:\n-                # treat headers as a list of block hashes\n-                hash_headers = [ x.sha256 for x in self.last_message[\"headers\"].headers ]\n-            if hash_headers != expect_headers:\n-                success = False\n+                compare_headers = [x.sha256 for x in self.last_message[\"headers\"].headers]\n+            if headers is not None:\n+                assert_equal(compare_headers, headers)\n \n             self.last_message.pop(\"inv\", None)\n             self.last_message.pop(\"headers\", None)\n-        return success\n-\n-    def wait_for_getdata(self, hash_list, timeout=60):\n-        if hash_list == []:\n-            return\n-\n-        test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-        return\n-\n-    def wait_for_block_announcement(self, block_hash, timeout=60):\n-        test_function = lambda: self.last_blockhash_announced == block_hash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-        return\n-\n-    def send_header_for_blocks(self, new_blocks):\n-        headers_message = msg_headers()\n-        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n-        self.send_message(headers_message)\n-\n-    def send_getblocks(self, locator):\n-        getblocks_message = msg_getblocks()\n-        getblocks_message.locator.vHave = locator\n-        self.send_message(getblocks_message)\n \n class SendHeadersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    # mine count blocks and return the new tip\n     def mine_blocks(self, count):\n+        \"\"\"Mine count blocks and return the new tip.\"\"\"\n+\n         # Clear out last block announcement from each p2p listener\n         [x.clear_last_announcement() for x in self.nodes[0].p2ps]\n         self.nodes[0].generate(count)\n         return int(self.nodes[0].getbestblockhash(), 16)\n \n-    # mine a reorg that invalidates length blocks (replacing them with\n-    # length+1 blocks).\n-    # Note: we clear the state of our p2p connections after the\n-    # to-be-reorged-out blocks are mined, so that we don't break later tests.\n-    # return the list of block hashes newly mined\n     def mine_reorg(self, length):\n-        self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n+        \"\"\"Mine a reorg that invalidates length blocks (replacing them with # length+1 blocks).\n+\n+        Note: we clear the state of our p2p connections after the\n+        to-be-reorged-out blocks are mined, so that we don't break later tests.\n+        return the list of block hashes newly mined.\"\"\"\n+\n+        self.nodes[0].generate(length)  # make sure all invalidated blocks are node0's\n         sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n             x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n             x.clear_last_announcement()\n \n         tip_height = self.nodes[1].getblockcount()\n-        hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n+        hash_to_invalidate = self.nodes[1].getblockhash(tip_height - (length - 1))\n         self.nodes[1].invalidateblock(hash_to_invalidate)\n-        all_hashes = self.nodes[1].generate(length+1) # Must be longer than the orig chain\n+        all_hashes = self.nodes[1].generate(length + 1)  # Must be longer than the orig chain\n         sync_blocks(self.nodes, wait=0.1)\n         return [int(x, 16) for x in all_hashes]\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        inv_node = self.nodes[0].add_p2p_connection(TestNode())\n-        # Set nServices to 0 for test_node, so no block download will occur outside of\n-        # direct fetching\n-        test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_WITNESS)\n+        inv_node = self.nodes[0].add_p2p_connection(BaseNode())\n+        # Make sure NODE_NETWORK is not set for test_node, so no block download\n+        # will occur outside of direct fetching\n+        test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        NetworkThread().start()  # Start up network handling in another thread\n \n         # Test logic begins here\n         inv_node.wait_for_verack()\n@@ -232,27 +247,32 @@ def run_test(self):\n         inv_node.sync_with_ping()\n         test_node.sync_with_ping()\n \n-        self.test_null_locators(test_node)\n+        self.test_null_locators(test_node, inv_node)\n         self.test_nonnull_locators(test_node, inv_node)\n \n-    def test_null_locators(self, test_node):\n+    def test_null_locators(self, test_node, inv_node):\n         tip = self.nodes[0].getblockheader(self.nodes[0].generate(1)[0])\n         tip_hash = int(tip[\"hash\"], 16)\n \n+        inv_node.check_last_announcement(inv=[tip_hash], headers=[])\n+        test_node.check_last_announcement(inv=[tip_hash], headers=[])\n+\n         self.log.info(\"Verify getheaders with null locator and valid hashstop returns headers.\")\n         test_node.clear_last_announcement()\n-        test_node.get_headers(locator=[], hashstop=tip_hash)\n-        assert_equal(test_node.check_last_announcement(headers=[tip_hash]), True)\n+        test_node.send_get_headers(locator=[], hashstop=tip_hash)\n+        test_node.check_last_announcement(headers=[tip_hash])\n \n         self.log.info(\"Verify getheaders with null locator and invalid hashstop does not return headers.\")\n         block = create_block(int(tip[\"hash\"], 16), create_coinbase(tip[\"height\"] + 1), tip[\"mediantime\"] + 1)\n         block.solve()\n         test_node.send_header_for_blocks([block])\n         test_node.clear_last_announcement()\n-        test_node.get_headers(locator=[], hashstop=int(block.hash, 16))\n+        test_node.send_get_headers(locator=[], hashstop=int(block.hash, 16))\n         test_node.sync_with_ping()\n         assert_equal(test_node.block_announced, False)\n+        inv_node.clear_last_announcement()\n         test_node.send_message(msg_block(block))\n+        inv_node.check_last_announcement(inv=[int(block.hash, 16)], headers=[])\n \n     def test_nonnull_locators(self, test_node, inv_node):\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n@@ -263,30 +283,30 @@ def test_nonnull_locators(self, test_node, inv_node):\n         for i in range(4):\n             old_tip = tip\n             tip = self.mine_blocks(1)\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(inv=[tip], headers=[])\n             # Try a few different responses; none should affect next announcement\n             if i == 0:\n                 # first request the block\n-                test_node.get_data([tip])\n+                test_node.send_get_data([tip])\n                 test_node.wait_for_block(tip)\n             elif i == 1:\n                 # next try requesting header and block\n-                test_node.get_headers(locator=[old_tip], hashstop=tip)\n-                test_node.get_data([tip])\n+                test_node.send_get_headers(locator=[old_tip], hashstop=tip)\n+                test_node.send_get_data([tip])\n                 test_node.wait_for_block(tip)\n-                test_node.clear_last_announcement() # since we requested headers...\n+                test_node.clear_last_announcement()  # since we requested headers...\n             elif i == 2:\n                 # this time announce own block via headers\n                 height = self.nodes[0].getblockcount()\n                 last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n                 block_time = last_time + 1\n-                new_block = create_block(tip, create_coinbase(height+1), block_time)\n+                new_block = create_block(tip, create_coinbase(height + 1), block_time)\n                 new_block.solve()\n                 test_node.send_header_for_blocks([new_block])\n                 test_node.wait_for_getdata([new_block.sha256])\n                 test_node.send_message(msg_block(new_block))\n-                test_node.sync_with_ping() # make sure this block is processed\n+                test_node.sync_with_ping()  # make sure this block is processed\n                 inv_node.clear_last_announcement()\n                 test_node.clear_last_announcement()\n \n@@ -297,15 +317,15 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # commence and keep working.\n         test_node.send_message(msg_sendheaders())\n         prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n-        test_node.get_headers(locator=[prev_tip], hashstop=0)\n+        test_node.send_get_headers(locator=[prev_tip], hashstop=0)\n         test_node.sync_with_ping()\n \n         # Now that we've synced headers, headers announcements should work\n         tip = self.mine_blocks(1)\n-        assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-        assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+        inv_node.check_last_announcement(inv=[tip], headers=[])\n+        test_node.check_last_announcement(headers=[tip])\n \n-        height = self.nodes[0].getblockcount()+1\n+        height = self.nodes[0].getblockcount() + 1\n         block_time += 10  # Advance far enough ahead\n         for i in range(10):\n             # Mine i blocks, and alternate announcing either via\n@@ -314,7 +334,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             # with block header, even though the blocks are never requested\n             for j in range(2):\n                 blocks = []\n-                for b in range(i+1):\n+                for b in range(i + 1):\n                     blocks.append(create_block(tip, create_coinbase(height), block_time))\n                     blocks[-1].solve()\n                     tip = blocks[-1].sha256\n@@ -328,7 +348,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n                     test_node.send_header_for_blocks(blocks)\n                     # Test that duplicate inv's won't result in duplicate\n                     # getdata requests, or duplicate headers announcements\n-                    [ inv_node.send_block_inv(x.sha256) for x in blocks ]\n+                    [inv_node.send_block_inv(x.sha256) for x in blocks]\n                     test_node.wait_for_getdata([x.sha256 for x in blocks])\n                     inv_node.sync_with_ping()\n                 else:\n@@ -339,16 +359,16 @@ def test_nonnull_locators(self, test_node, inv_node):\n                     # getdata requests (the check is further down)\n                     inv_node.send_header_for_blocks(blocks)\n                     inv_node.sync_with_ping()\n-                [ test_node.send_message(msg_block(x)) for x in blocks ]\n+                [test_node.send_message(msg_block(x)) for x in blocks]\n                 test_node.sync_with_ping()\n                 inv_node.sync_with_ping()\n                 # This block should not be announced to the inv node (since it also\n                 # broadcast it)\n                 assert \"inv\" not in inv_node.last_message\n                 assert \"headers\" not in inv_node.last_message\n                 tip = self.mine_blocks(1)\n-                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-                assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+                inv_node.check_last_announcement(inv=[tip], headers=[])\n+                test_node.check_last_announcement(headers=[tip])\n                 height += 1\n                 block_time += 1\n \n@@ -362,59 +382,59 @@ def test_nonnull_locators(self, test_node, inv_node):\n             # First try mining a reorg that can propagate with header announcement\n             new_block_hashes = self.mine_reorg(length=7)\n             tip = new_block_hashes[-1]\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(headers=new_block_hashes), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(headers=new_block_hashes)\n \n-            block_time += 8 \n+            block_time += 8\n \n             # Mine a too-large reorg, which should be announced with a single inv\n             new_block_hashes = self.mine_reorg(length=8)\n             tip = new_block_hashes[-1]\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(inv=[tip], headers=[])\n \n             block_time += 9\n \n             fork_point = self.nodes[0].getblock(\"%02x\" % new_block_hashes[0])[\"previousblockhash\"]\n             fork_point = int(fork_point, 16)\n \n             # Use getblocks/getdata\n-            test_node.send_getblocks(locator = [fork_point])\n-            assert_equal(test_node.check_last_announcement(inv=new_block_hashes), True)\n-            test_node.get_data(new_block_hashes)\n+            test_node.send_getblocks(locator=[fork_point])\n+            test_node.check_last_announcement(inv=new_block_hashes, headers=[])\n+            test_node.send_get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n \n             for i in range(3):\n                 # Mine another block, still should get only an inv\n                 tip = self.mine_blocks(1)\n-                assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-                assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n+                inv_node.check_last_announcement(inv=[tip], headers=[])\n+                test_node.check_last_announcement(inv=[tip], headers=[])\n                 if i == 0:\n                     # Just get the data -- shouldn't cause headers announcements to resume\n-                    test_node.get_data([tip])\n+                    test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                 elif i == 1:\n                     # Send a getheaders message that shouldn't trigger headers announcements\n                     # to resume (best header sent will be too old)\n-                    test_node.get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n-                    test_node.get_data([tip])\n+                    test_node.send_get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n+                    test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                 elif i == 2:\n-                    test_node.get_data([tip])\n+                    test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                     # This time, try sending either a getheaders to trigger resumption\n-                    # of headers announcements, or mine a new block and inv it, also \n+                    # of headers announcements, or mine a new block and inv it, also\n                     # triggering resumption of headers announcements.\n                     if j == 0:\n-                        test_node.get_headers(locator=[tip], hashstop=0)\n+                        test_node.send_get_headers(locator=[tip], hashstop=0)\n                         test_node.sync_with_ping()\n                     else:\n                         test_node.send_block_inv(tip)\n                         test_node.sync_with_ping()\n             # New blocks should now be announced with header\n             tip = self.mine_blocks(1)\n-            assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n-            assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n+            inv_node.check_last_announcement(inv=[tip], headers=[])\n+            test_node.check_last_announcement(headers=[tip])\n \n         self.log.info(\"Part 3: success!\")\n \n@@ -434,7 +454,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             height += 1\n             inv_node.send_message(msg_block(blocks[-1]))\n \n-        inv_node.sync_with_ping() # Make sure blocks are processed\n+        inv_node.sync_with_ping()  # Make sure blocks are processed\n         test_node.last_message.pop(\"getdata\", None)\n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n@@ -453,9 +473,9 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=direct_fetch_response_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=DIRECT_FETCH_RESPONSE_TIME)\n \n-        [ test_node.send_message(msg_block(x)) for x in blocks ]\n+        [test_node.send_message(msg_block(x)) for x in blocks]\n \n         test_node.sync_with_ping()\n \n@@ -484,13 +504,13 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # both blocks (same work as tip)\n         test_node.send_header_for_blocks(blocks[1:2])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=direct_fetch_response_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=DIRECT_FETCH_RESPONSE_TIME)\n \n         # Announcing 16 more headers should trigger direct fetch for 14 more\n         # blocks\n         test_node.send_header_for_blocks(blocks[2:18])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=direct_fetch_response_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=DIRECT_FETCH_RESPONSE_TIME)\n \n         # Announcing 1 more header should not trigger any response\n         test_node.last_message.pop(\"getdata\", None)\n@@ -502,7 +522,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         self.log.info(\"Part 4: success!\")\n \n         # Now deliver all those blocks we announced.\n-        [ test_node.send_message(msg_block(x)) for x in blocks ]\n+        [test_node.send_message(msg_block(x)) for x in blocks]\n \n         self.log.info(\"Part 5: Testing handling of unconnecting headers\")\n         # First we test that receipt of an unconnecting header doesn't prevent\n@@ -524,15 +544,15 @@ def test_nonnull_locators(self, test_node, inv_node):\n             test_node.wait_for_getheaders()\n             test_node.send_header_for_blocks(blocks)\n             test_node.wait_for_getdata([x.sha256 for x in blocks])\n-            [ test_node.send_message(msg_block(x)) for x in blocks ]\n+            [test_node.send_message(msg_block(x)) for x in blocks]\n             test_node.sync_with_ping()\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), blocks[1].sha256)\n \n         blocks = []\n         # Now we test that if we repeatedly don't send connecting headers, we\n         # don't go into an infinite loop trying to get them to connect.\n         MAX_UNCONNECTING_HEADERS = 10\n-        for j in range(MAX_UNCONNECTING_HEADERS+1):\n+        for j in range(MAX_UNCONNECTING_HEADERS + 1):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -554,11 +574,11 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         # Now try to see how many unconnecting headers we can send\n         # before we get disconnected.  Should be 5*MAX_UNCONNECTING_HEADERS\n-        for i in range(5*MAX_UNCONNECTING_HEADERS - 1):\n+        for i in range(5 * MAX_UNCONNECTING_HEADERS - 1):\n             # Send a header that doesn't connect, check that we get a getheaders.\n             with mininode_lock:\n                 test_node.last_message.pop(\"getheaders\", None)\n-            test_node.send_header_for_blocks([blocks[i%len(blocks)]])\n+            test_node.send_header_for_blocks([blocks[i % len(blocks)]])\n             test_node.wait_for_getheaders()\n \n         # Eventually this stops working."
      }
    ]
  },
  {
    "sha": "9cdd2bcf6794794667acd4eced127dda25aabf4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2RkMmJjZjY3OTQ3OTQ2NjdhY2Q0ZWNlZDEyN2RkYTI1YWFiZjRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-19T10:18:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-19T10:21:51Z"
      },
      "message": "Merge #11718: tests: move pwalletMain to wallet test fixture\n\n49bd659 tests: move pwalletMain to wallet test fixture (Wladimir J. van der Laan)\n\nPull request description:\n\n  Scope the variable instead of using an external global; this is how test fixtures are intended to be used.\n\n  Followup to #11713.\n\nTree-SHA512: 7d5bda93cdfe1329c8fe39bd72965906e36dad72fbb5d344ebedf26e66b1857510d01a3c2872d7f718fdeb23365e6ba71991aafe68e82781c6767a086b6d1590",
      "tree": {
        "sha": "af3c61f8bcf6a76f64c4a808368a8faddc148ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af3c61f8bcf6a76f64c4a808368a8faddc148ae2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cdd2bcf6794794667acd4eced127dda25aabf4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaEVs/AAoJEB5K7WKYbNJdvUUH/0zMF546Bv012rOwOrvoJ12e\nMzXPMqk2P3TrdssJDrXRTLcIDv41Mq0dUhSJbIHMjspjNPYksHcQJLd/dAZ8QshL\nHKuOmF1IMr1jxAxL+rEijXd3G5jjvqF99Pcw+WREEehULBXGVjUCiorpaNwFAWuB\nxr8wRH5U0oZKJ0UsXpr2ZoRou/SwmtBToT4i/Rl86A6F4TXFetmmlSFY28ton/c6\nsXaBrNeBY2QlHTVdSocZXqYVSKMQAHYhGJqnlmPPPf10DQ0BDUX3r5qZrTIkhkuq\nIhLk54g8JbqchNI5g51vhMv0osxNsMrlXlEpzItZQ/OikZSLaARSQ8awFrmFaW8=\n=Fc9o\n-----END PGP SIGNATURE-----",
        "payload": "tree af3c61f8bcf6a76f64c4a808368a8faddc148ae2\nparent 0d89fa0877930c6c8a539a656c1009ad8ab6755b\nparent 49bd6590feb83ee422e489fd3930e8b700c5b4a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511086698 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511086911 +0100\n\nMerge #11718: tests: move pwalletMain to wallet test fixture\n\n49bd659 tests: move pwalletMain to wallet test fixture (Wladimir J. van der Laan)\n\nPull request description:\n\n  Scope the variable instead of using an external global; this is how test fixtures are intended to be used.\n\n  Followup to #11713.\n\nTree-SHA512: 7d5bda93cdfe1329c8fe39bd72965906e36dad72fbb5d344ebedf26e66b1857510d01a3c2872d7f718fdeb23365e6ba71991aafe68e82781c6767a086b6d1590\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdd2bcf6794794667acd4eced127dda25aabf4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdd2bcf6794794667acd4eced127dda25aabf4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdd2bcf6794794667acd4eced127dda25aabf4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d89fa0877930c6c8a539a656c1009ad8ab6755b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d89fa0877930c6c8a539a656c1009ad8ab6755b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d89fa0877930c6c8a539a656c1009ad8ab6755b"
      },
      {
        "sha": "49bd6590feb83ee422e489fd3930e8b700c5b4a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bd6590feb83ee422e489fd3930e8b700c5b4a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49bd6590feb83ee422e489fd3930e8b700c5b4a7"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 11,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b95bb14335645e55bdbbe6512689aa04106fba88",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=9cdd2bcf6794794667acd4eced127dda25aabf4c",
        "patch": "@@ -10,18 +10,16 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern std::unique_ptr<CWallet> pwalletMain;\n-\n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n \n static void\n-GetResults(std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWallet *wallet, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(pwalletMain->ReorderTransactions() == DB_LOAD_OK);\n-    pwalletMain->ListAccountCreditDebit(\"\", aes);\n+    BOOST_CHECK(wallet->ReorderTransactions() == DB_LOAD_OK);\n+    wallet->ListAccountCreditDebit(\"\", aes);\n     for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n@@ -54,7 +52,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.strOtherAccount = \"c\";\n     pwalletMain->AddAccountingEntry(ae);\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n@@ -70,7 +68,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nOrderPos = pwalletMain->IncOrderPosNext();\n     pwalletMain->AddAccountingEntry(ae);\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(results.size() == 3);\n     BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n@@ -102,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(results.size() == 3);\n     BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n@@ -120,7 +118,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nOrderPos = -1;\n     pwalletMain->AddAccountingEntry(ae);\n \n-    GetResults(results);\n+    GetResults(pwalletMain.get(), results);\n \n     BOOST_CHECK(results.size() == 4);\n     BOOST_CHECK(pwalletMain->nOrderPosNext == 7);"
      },
      {
        "sha": "3ee83d2d7c28dc8976bfdd1958ef99db64a1f4d8",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=9cdd2bcf6794794667acd4eced127dda25aabf4c",
        "patch": "@@ -6,9 +6,6 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n-#include <wallet/wallet.h>\n-\n-std::unique_ptr<CWallet> pwalletMain;\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n@@ -27,7 +24,6 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n WalletTestingSetup::~WalletTestingSetup()\n {\n     UnregisterValidationInterface(pwalletMain.get());\n-    pwalletMain.reset();\n \n     bitdb.Flush(true);\n     bitdb.Reset();"
      },
      {
        "sha": "292d65443894ecf8e3ca8c555d9ae59ed888298a",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=9cdd2bcf6794794667acd4eced127dda25aabf4c",
        "patch": "@@ -7,11 +7,15 @@\n \n #include <test/test_bitcoin.h>\n \n+#include <wallet/wallet.h>\n+\n /** Testing setup and teardown for wallet.\n  */\n struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n+\n+    std::unique_ptr<CWallet> pwalletMain;\n };\n \n #endif"
      },
      {
        "sha": "80e31a1ce0d40361782df05ac4096c15e6824192",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdd2bcf6794794667acd4eced127dda25aabf4c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9cdd2bcf6794794667acd4eced127dda25aabf4c",
        "patch": "@@ -19,8 +19,6 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n-extern std::unique_ptr<CWallet> pwalletMain;\n-\n extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue dumpwallet(const JSONRPCRequest& request);\n extern UniValue importwallet(const JSONRPCRequest& request);"
      }
    ]
  },
  {
    "sha": "7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjkzZDA2NDEzM2FlYWZkOWYwYWUwYmRiYjJlZDc0YTQ0ZDkxZWNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-19T12:04:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-19T12:04:43Z"
      },
      "message": "Merge #11698: [Docs] [Qt] RPC-Console nested commands documentation\n\nc3055bb Add help-console command to Qt debug console (Luke Mlsna)\n\nPull request description:\n\n  This PR would close issue #9195 by adding documentation for the debug console features (mainly nested commands) which were added in [PR #7783](https://github.com/bitcoin/bitcoin/pull/7783).\n\n  The following changes were made to QT debug console code:\n  - Added a line to the initial message text at the top of the debug console:\n\n  > For more information on using this console type **help-console**.\n\n  - Added a pseudo-command `help-console` which is hooked after parsing the request, but before actually executing the RPC thread. It prints the following text to the console as if it were a valid RPC response.\n\n  > This console accepts RPC commands using the standard syntax.\n  >    example:    getblockhash 8\n  > This console can also accept RPC commands using bracketed syntax.\n  >    example:    getblockhash(8)\n  > A space or a comma can be used to separate arguments for either syntax.\n  >    example:    sendtoaddress \\<address\\> \\<amount\\>\n  >                    sendtoaddress,\\<address\\>,\\<amount\\>\n  > Commands may be nested when specified with the bracketed syntax.\n  >    example:    getblockinfo(getblockhash(0),true).\n  > Result values can be queried with a non-quoted string in brackets.\n  >    example:    getblock(getblockhash(0) true)[height]\n\n  This seemed like a reasonably sane way to introduce a fake RPC help command, but\n\nTree-SHA512: 35d73dcef9c4936b8be99e80978169f117c22b94f4400c91097bf7e0e1489060202dcd738d9debdf4c8a7bd10709e2c19d4f625f19e47c4a034f1d6019c0e0f2",
      "tree": {
        "sha": "9bc8a3ded9dc8acad51b65d467ab18d9cb4cd32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bc8a3ded9dc8acad51b65d467ab18d9cb4cd32b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaEXNbAAoJEB5K7WKYbNJdevAIAKefBprmAasXzObEGK0BSO4n\n/7as2vGUmcek5kKhIZplsOC4q4wD3//FUiyJR7ou8IlAUmNSuCtyAcGPPAj/3piA\nglCMzLbOouADpr8QC0Qe0GrSVvvQ/PJ0c4mNo89ZbMEpsyYStFMR4x/VPcmv2HFC\n7Lw9sZe5VtbVUIhgZrKOs+0cTjZTBIqVJnItDwUWPwpwbjds3gTcVnTBVgTfZEJK\nQGHYb9njno6LgeEBWQTcO6k5RsB6vZW3x4cEMBt4NjWXmVmzQXO3v5h81VNDEAfk\nEJmTEdbx1JP/qLuSNsAN7S0HaRQhhzcHRJDK7cN5DFAusdWsLGeNXAKduqdjr5M=\n=qoS2\n-----END PGP SIGNATURE-----",
        "payload": "tree 9bc8a3ded9dc8acad51b65d467ab18d9cb4cd32b\nparent 9cdd2bcf6794794667acd4eced127dda25aabf4c\nparent c3055bbea1255cd791564b855b6951a9f4c510f9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511093062 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511093083 +0100\n\nMerge #11698: [Docs] [Qt] RPC-Console nested commands documentation\n\nc3055bb Add help-console command to Qt debug console (Luke Mlsna)\n\nPull request description:\n\n  This PR would close issue #9195 by adding documentation for the debug console features (mainly nested commands) which were added in [PR #7783](https://github.com/bitcoin/bitcoin/pull/7783).\n\n  The following changes were made to QT debug console code:\n  - Added a line to the initial message text at the top of the debug console:\n\n  > For more information on using this console type **help-console**.\n\n  - Added a pseudo-command `help-console` which is hooked after parsing the request, but before actually executing the RPC thread. It prints the following text to the console as if it were a valid RPC response.\n\n  > This console accepts RPC commands using the standard syntax.\n  >    example:    getblockhash 8\n  > This console can also accept RPC commands using bracketed syntax.\n  >    example:    getblockhash(8)\n  > A space or a comma can be used to separate arguments for either syntax.\n  >    example:    sendtoaddress \\<address\\> \\<amount\\>\n  >                    sendtoaddress,\\<address\\>,\\<amount\\>\n  > Commands may be nested when specified with the bracketed syntax.\n  >    example:    getblockinfo(getblockhash(0),true).\n  > Result values can be queried with a non-quoted string in brackets.\n  >    example:    getblock(getblockhash(0) true)[height]\n\n  This seemed like a reasonably sane way to introduce a fake RPC help command, but\n\nTree-SHA512: 35d73dcef9c4936b8be99e80978169f117c22b94f4400c91097bf7e0e1489060202dcd738d9debdf4c8a7bd10709e2c19d4f625f19e47c4a034f1d6019c0e0f2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cdd2bcf6794794667acd4eced127dda25aabf4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdd2bcf6794794667acd4eced127dda25aabf4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdd2bcf6794794667acd4eced127dda25aabf4c"
      },
      {
        "sha": "c3055bbea1255cd791564b855b6951a9f4c510f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3055bbea1255cd791564b855b6951a9f4c510f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3055bbea1255cd791564b855b6951a9f4c510f9"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 31,
      "deletions": 3
    },
    "files": [
      {
        "sha": "54a6e837c15748a786d7f9a93a8889cd53812672",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "patch": "@@ -392,11 +392,37 @@ void RPCExecutor::request(const QString &command)\n     {\n         std::string result;\n         std::string executableCommand = command.toStdString() + \"\\n\";\n+\n+        // Catch the console-only-help command before RPC call is executed and reply with help text as-if a RPC reply.\n+        if(executableCommand == \"help-console\\n\")\n+        {\n+            Q_EMIT reply(RPCConsole::CMD_REPLY, QString((\"\\n\"\n+                \"This console accepts RPC commands using the standard syntax.\\n\"\n+                \"   example:    getblockhash 0\\n\\n\"\n+\n+                \"This console can also accept RPC commands using parenthesized syntax.\\n\"\n+                \"   example:    getblockhash(0)\\n\\n\"\n+\n+                \"Commands may be nested when specified with the parenthesized syntax.\\n\"\n+                \"   example:    getblock(getblockhash(0) 1)\\n\\n\"\n+\n+                \"A space or a comma can be used to delimit arguments for either syntax.\\n\"\n+                \"   example:    getblockhash 0\\n\"\n+                \"               getblockhash,0\\n\\n\"\n+\n+                \"Named results can be queried with a non-quoted key string in brackets.\\n\"\n+                \"   example:    getblock(getblockhash(0) true)[tx]\\n\\n\"\n+\n+                \"Results without keys can be queried using an integer in brackets.\\n\"\n+                \"   example:    getblock(getblockhash(0),true)[tx][0]\\n\\n\")));\n+            return;\n+        }\n         if(!RPCConsole::RPCExecuteCommandLine(result, executableCommand))\n         {\n             Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n             return;\n         }\n+\n         Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(result));\n     }\n     catch (UniValue& objError)\n@@ -645,6 +671,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n             wordList << (\"help \" + commandList[i]).c_str();\n         }\n \n+        wordList << \"help-console\";\n         wordList.sort();\n         autoCompleter = new QCompleter(wordList, this);\n         autoCompleter->setModelSorting(QCompleter::CaseSensitivelySortedModel);\n@@ -750,10 +777,11 @@ void RPCConsole::clear(bool clearHistory)\n \t \n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n-                        tr(\"Type <b>help</b> for an overview of available commands.\")) +\n-                        \"<br><span class=\\\"secwarning\\\">\" +\n+                        tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n+                        tr(\"For more information on using this console type %1.\").arg(\"<b>help-console</b>\") +\n+                        \"<br><span class=\\\"secwarning\\\"><br>\" +\n                         tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.\") +\n-                        \"</span>\",\n+                        \"</span>\"),\n                         true);\n }\n "
      }
    ]
  },
  {
    "sha": "57ac471a294fc7039140eed91d217ad1af7fa7af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2FjNDcxYTI5NGZjNzAzOTE0MGVlZDkxZDIxN2FkMWFmN2ZhN2Fm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-19T07:38:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-19T22:51:44Z"
      },
      "message": "Call BannedListChanged outside of cs_setBanned lock",
      "tree": {
        "sha": "fcc1b50009a09a86641dd178b7bc021768ec27eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcc1b50009a09a86641dd178b7bc021768ec27eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57ac471a294fc7039140eed91d217ad1af7fa7af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAloSCygACgkQHrd2uwPH\nki1/Uw/7BNjPwObDVdxqcRao8UrfYkhILwBvjPZ7S5wVBj6pH56YS+EG8FZr6T9P\nNPJPCRBjgxwdh5bQ4L4LoLk/dm0g7Kh7GvaU362Y5WEucYvILK1vLsfONRB7tXSg\nj6Lw5WyCNneYm5x3lAG4KHRah9VeNPZ5FRQqd6LoErcRMYi7qAm/SaceS8y+vMlQ\ndK8a7RrPGegE02SQEkwCqN5QH/8XxxUH0ScpUAvPExddO9qpBWkdtLRWzZymKzMP\nGRzhERX7+AZ7jBr4YkkuC9bSEkeZYsgCeOC0s2GV5aW5DMhJR6hMtWKdDPgL8+BT\nRZxCVmGqWQUala1vqe2Emqrf+zjGGnWhWnbh0d1+1nDIQ5w8KWQuRG9OsRie3EyF\n7K4nOYdDXctDp7jQkzh/TPuBN0DCfSNxihdeGYAwADqeWoGccQ+eyz7xCfYR8MoB\nl6EfQUl7KUysG9LANwJTmWlBtsVzEyCnhkLA2wRVVg8kLE9yAAlWtVIvD1OisIic\n6/79VMIBAHVQEtKaa4y9zfm0GaD0zuW+XnC1JJoTMCSRs/wapsqKF76FkvSNeQzv\nH+9NjS+JGCOiQ8TUNsHnJqXT0d+ei3ZIQtIVKtT4N+tlHOyU3yvPJddjXHjbfkJz\nHtjuUNDqTbuZ5pQQh4ZTIUctWa2+1/8oJPGyUL9iiDF4aoAPm4o=\n=NB0K\n-----END PGP SIGNATURE-----",
        "payload": "tree fcc1b50009a09a86641dd178b7bc021768ec27eb\nparent c8538123a7618343056b8ca2bc7445de8f0620ec\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1511077107 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1511131904 -1000\n\nCall BannedListChanged outside of cs_setBanned lock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ac471a294fc7039140eed91d217ad1af7fa7af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57ac471a294fc7039140eed91d217ad1af7fa7af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ac471a294fc7039140eed91d217ad1af7fa7af/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8538123a7618343056b8ca2bc7445de8f0620ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8538123a7618343056b8ca2bc7445de8f0620ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8538123a7618343056b8ca2bc7445de8f0620ec"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0e6a490e30c61a3ea3f053d9c048855de144e75a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57ac471a294fc7039140eed91d217ad1af7fa7af/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57ac471a294fc7039140eed91d217ad1af7fa7af/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=57ac471a294fc7039140eed91d217ad1af7fa7af",
        "patch": "@@ -596,25 +596,27 @@ void CConnman::SetBanned(const banmap_t &banMap)\n void CConnman::SweepBanned()\n {\n     int64_t now = GetTime();\n-\n-    LOCK(cs_setBanned);\n-    banmap_t::iterator it = setBanned.begin();\n-    while(it != setBanned.end())\n+    bool notifyUI = false;\n     {\n-        CSubNet subNet = (*it).first;\n-        CBanEntry banEntry = (*it).second;\n-        if(now > banEntry.nBanUntil)\n+        LOCK(cs_setBanned);\n+        banmap_t::iterator it = setBanned.begin();\n+        while(it != setBanned.end())\n         {\n-            setBanned.erase(it++);\n-            setBannedIsDirty = true;\n-            LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n+            CSubNet subNet = (*it).first;\n+            CBanEntry banEntry = (*it).second;\n+            if(now > banEntry.nBanUntil)\n+            {\n+                setBanned.erase(it++);\n+                setBannedIsDirty = true;\n+                notifyUI = true;\n+                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n+            }\n+            else\n+                ++it;\n         }\n-        else\n-            ++it;\n     }\n-\n     // update UI\n-    if(setBannedIsDirty && clientInterface) {\n+    if(notifyUI && clientInterface) {\n         clientInterface->BannedListChanged();\n     }\n }"
      }
    ]
  },
  {
    "sha": "c60c49b6794279325725a5c3c1a8d3dc6764b966",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjBjNDliNjc5NDI3OTMyNTcyNWE1YzNjMWE4ZDNkYzY3NjRiOTY2",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-08-29T11:32:16Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-11-20T08:48:39Z"
      },
      "message": "Improve help text and behavior of RPC-logging\n\nA) The changes in behavior are as follows:\n1. Introduce logging category \"none\" as alias of \"0\" for\n   both RPC-logging and bitcoind \"-debug\" parameter.\n2. Same as \"0\" is given to argument of \"-debug\",\n   if \"none\" or \"0\" is given to <include>, all other given logging\n   categories are ignored. The same is true for <exclude>.\n   (Before this PR, \"0\" was accepted but just be ignored itself.)\n\nB) The changes in the help text are as follows:\n1. Add a descrption about the evaluation order of <include> and\n   <exclude> to clarify how debug loggig categories to be set.\n2. Delete text that describe restriction about libevent because\n   it's already allowed libevent logging to be updated during runtime.\n3. Add a description for category \"all\", \"1\", \"none\" and \"0\".\n4. Add \"optional\" to the help text of <include> and <exclude>.\n5. Add missing new lines before \"Argument:\".\n6. This RPC always returns all logging categories with status.\n   Fix the help text to match this behavior.",
      "tree": {
        "sha": "625962e683e4826119c099e72670f825bbdc8be8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625962e683e4826119c099e72670f825bbdc8be8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c60c49b6794279325725a5c3c1a8d3dc6764b966",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c60c49b6794279325725a5c3c1a8d3dc6764b966",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c60c49b6794279325725a5c3c1a8d3dc6764b966",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c60c49b6794279325725a5c3c1a8d3dc6764b966/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a90e6d2bffc422ddcdb771c53aac0bceb970a2c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90e6d2bffc422ddcdb771c53aac0bceb970a2c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a90e6d2bffc422ddcdb771c53aac0bceb970a2c4"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 30,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6149fe8d2578053958a2d78074b6da0b00487619",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c60c49b6794279325725a5c3c1a8d3dc6764b966/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c60c49b6794279325725a5c3c1a8d3dc6764b966/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c60c49b6794279325725a5c3c1a8d3dc6764b966",
        "patch": "@@ -925,7 +925,8 @@ bool AppInitParameterInteraction()\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n         const std::vector<std::string> categories = gArgs.GetArgs(\"-debug\");\n \n-        if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n+        if (std::none_of(categories.begin(), categories.end(),\n+            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 uint32_t flag = 0;\n                 if (!GetLogCategory(&flag, &cat)) {"
      },
      {
        "sha": "0a5508016f66b2025a07efd0f2b804007d45fa5e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 8,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c60c49b6794279325725a5c3c1a8d3dc6764b966/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c60c49b6794279325725a5c3c1a8d3dc6764b966/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c60c49b6794279325725a5c3c1a8d3dc6764b966",
        "patch": "@@ -577,6 +577,9 @@ uint32_t getCategoryMask(UniValue cats) {\n         if (!GetLogCategory(&flag, &cat)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n         }\n+        if (flag == BCLog::NONE) {\n+            return 0;\n+        }\n         mask |= flag;\n     }\n     return mask;\n@@ -586,16 +589,32 @@ UniValue logging(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"logging [include,...] <exclude>\\n\"\n+            \"logging ( <include> <exclude> )\\n\"\n             \"Gets and sets the logging configuration.\\n\"\n-            \"When called without an argument, returns the list of categories that are currently being debug logged.\\n\"\n-            \"When called with arguments, adds or removes categories from debug logging.\\n\"\n+            \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n+            \"When called with arguments, adds or removes categories from debug logging and return the lists above.\\n\"\n+            \"The arguments are evaluated in order \\\"include\\\", \\\"exclude\\\".\\n\"\n+            \"If an item is both included and excluded, it will thus end up being excluded.\\n\"\n             \"The valid logging categories are: \" + ListLogCategories() + \"\\n\"\n-            \"libevent logging is configured on startup and cannot be modified by this RPC during runtime.\"\n-            \"Arguments:\\n\"\n-            \"1. \\\"include\\\" (array of strings) add debug logging for these categories.\\n\"\n-            \"2. \\\"exclude\\\" (array of strings) remove debug logging for these categories.\\n\"\n-            \"\\nResult: <categories>  (string): a list of the logging categories that are active.\\n\"\n+            \"In addition, the following are available as category names with special meanings:\\n\"\n+            \"  - \\\"all\\\",  \\\"1\\\" : represent all logging categories.\\n\"\n+            \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"include\\\"        (array of strings, optional) A json array of categories to add debug logging\\n\"\n+            \"     [\\n\"\n+            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+            \"2. \\\"exclude\\\"        (array of strings, optional) A json array of categories to remove debug logging\\n\"\n+            \"     [\\n\"\n+            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n+            \"  \\\"category\\\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\\n\"\n+            \"  ...\\n\"\n+            \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], \\\"[libevent]\\\"\")"
      },
      {
        "sha": "09e39bd48b2dfe2a47733cfea3fd9fba9ff2ec4f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c60c49b6794279325725a5c3c1a8d3dc6764b966/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c60c49b6794279325725a5c3c1a8d3dc6764b966/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c60c49b6794279325725a5c3c1a8d3dc6764b966",
        "patch": "@@ -220,6 +220,7 @@ struct CLogCategoryDesc\n const CLogCategoryDesc LogCategories[] =\n {\n     {BCLog::NONE, \"0\"},\n+    {BCLog::NONE, \"none\"},\n     {BCLog::NET, \"net\"},\n     {BCLog::TOR, \"tor\"},\n     {BCLog::MEMPOOL, \"mempool\"},"
      }
    ]
  },
  {
    "sha": "fe27a72362ea8a165fd4648ee322541254d71228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTI3YTcyMzYyZWE4YTE2NWZkNDY0OGVlMzIyNTQxMjU0ZDcxMjI4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-20T12:47:01Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-20T12:47:01Z"
      },
      "message": "[docs] links to code style guides",
      "tree": {
        "sha": "21dcbd638e6d831e3129467d70c3a783bd7571fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21dcbd638e6d831e3129467d70c3a783bd7571fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe27a72362ea8a165fd4648ee322541254d71228",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAloSzsgTHHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCT5BEACCWPVv5NcmtfR1L3wu28eD4aD6vmCr\ngYoNASAapOjcsmp/8opHZAHCN8Xj3uawhhJxS6oZMvnFdbt4eobA4liglh4YAEHz\n6QtMnPs16SReZIpVyknQFbtL1pkztS2mFyUI+3yQn7dkoPMlBbRBa/CoizpJj0LL\n9CpOlCe82g0pyHM9lublM9GHG9g4oT64XbpTcvCDfYORXidKSOhxABlvTcUeOQtV\nnFhVEgQjmJ7Zhe3e9rEnrglAePYnRRs8cEstgOyEtvzM25mse7UD5JS2mds7XVrZ\nQtDDfKP3acWOqoWn2AWdF4nqAe2GU8XjInMqlotE32+AbiI1farU7fZUS8OGKLvL\n58AhbGfzWQEZEPtXYYqiJl/yjhxtzYicNv1nwUw4k3y6WxVwkLqhJK65ezak9YWR\nDqpXZ9E4R0jLwRAi77+GB1yZXdHqpcy9Zun8JqJsCnatYh9CU8MRkLpyDW9/2a7x\nD4P2Bga34N1dCRDcIuJz603t3b04R18LEkXQSO4H0TcTPRAqEWBrJXCjms4uGzHV\n8M1+PqSacZUZWINjAwoEHyrFVJPal0WI/qCxJxomhJRPHn9QA4FuGGHss7Rv3Qq0\nd4HCkitpGPfqVKmlh4//QJkFO/jIgjmTVfI1wXd5oROEk3qvXScgyLkuSEypEJ93\nQXR1q87OvmXbTw==\n=93T+\n-----END PGP SIGNATURE-----",
        "payload": "tree 21dcbd638e6d831e3129467d70c3a783bd7571fc\nparent 7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc\nauthor Sjors Provoost <sjors@sprovoost.nl> 1511182021 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1511182021 +0100\n\n[docs] links to code style guides\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe27a72362ea8a165fd4648ee322541254d71228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe27a72362ea8a165fd4648ee322541254d71228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe27a72362ea8a165fd4648ee322541254d71228/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8381bd2448959e37813821d30190c65e6806e356",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe27a72362ea8a165fd4648ee322541254d71228/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe27a72362ea8a165fd4648ee322541254d71228/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=fe27a72362ea8a165fd4648ee322541254d71228",
        "patch": "@@ -186,7 +186,7 @@ In general, all pull requests must:\n     the project (for example refactoring for modularisation);\n   - Be well peer reviewed;\n   - Have unit tests and functional tests where appropriate;\n-  - Follow code style guidelines;\n+  - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n   - Not break the existing test suite;\n   - Where bugs are fixed, where possible, there should be unit tests\n     demonstrating the bug and also proving the fix. This helps prevent regression."
      }
    ]
  },
  {
    "sha": "9d811dc18b28ed2dd00ba219754764a76c4f859b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDgxMWRjMThiMjhlZDJkZDAwYmEyMTk3NTQ3NjRhNzZjNGY4NTli",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-20T19:13:12Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-20T19:31:15Z"
      },
      "message": "Document partial validation in ConnectBlock()\n\nConnectBlock() relies on validation that happens in ContextualCheckBlock() and\nContextualCheckBlockHeader(). This has implications for implementing consensus\nchanges and handling software upgrade to ensure that nodes upgrading their\nsoftware end up enforcing all the consensus rules.",
      "tree": {
        "sha": "3a27231925a32e644bffca695d929b5f57d34917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a27231925a32e644bffca695d929b5f57d34917"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d811dc18b28ed2dd00ba219754764a76c4f859b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de6031db39d9e492a5813877b301d9f4f23386b3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d811dc18b28ed2dd00ba219754764a76c4f859b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d811dc18b28ed2dd00ba219754764a76c4f859b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9d811dc18b28ed2dd00ba219754764a76c4f859b",
        "patch": "@@ -1667,6 +1667,18 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n+    // NOTE: We don't currently (re-)invoke ContextualCheckBlock() or\n+    // ContextualCheckBlockHeader() here. This means that if we add a new\n+    // consensus rule that is enforced in one of those two functions, then we\n+    // may have let in a block that violates the rule prior to updating the\n+    // software, and we would NOT be enforcing the rule here. Fully solving\n+    // upgrade from one software version to the next after a consensus rule\n+    // change is potentially tricky and issue-specific (see RewindBlockIndex()\n+    // for one general approach that was used for BIP 141 deployment).\n+    // Also, currently the rule against blocks more than 2 hours in the future\n+    // is enforced in ContextualCheckBlockHeader(); we wouldn't want to\n+    // re-enforce that rule here (at least until we make it impossible for\n+    // GetAdjustedTime() to go backward).\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n@@ -2952,7 +2964,13 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n \n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n- *  set; UTXO-related validity checks are done in ConnectBlock(). */\n+ *  set; UTXO-related validity checks are done in ConnectBlock().\n+ *  NOTE: This function is not currently invoked by ConnectBlock(), so we\n+ *  should consider upgrade issues if we change which consensus rules are\n+ *  enforced in this function (eg by adding a new consensus rule). See comment\n+ *  in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     assert(pindexPrev != nullptr);\n@@ -2992,6 +3010,12 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     return true;\n }\n \n+/** NOTE: This function is not currently invoked by ConnectBlock(), so we\n+ *  should consider upgrade issues if we change which consensus rules are\n+ *  enforced in this function (eg by adding a new consensus rule). See comment\n+ *  in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;"
      }
    ]
  },
  {
    "sha": "7a43fbb959c38e025e558e472ad57de357539894",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTQzZmJiOTU5YzM4ZTAyNWU1NThlNDcyYWQ1N2RlMzU3NTM5ODk0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-20T20:15:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-20T20:15:32Z"
      },
      "message": "Merge #11729: [docs] links to code style guides\n\nfe27a7236 [docs] links to code style guides (Sjors Provoost)\n\nPull request description:\n\n  I always have difficulty finding these, probably because they're not actually called \"code style guideline\".\n\nTree-SHA512: a2716c5e7e6778ce71b4451091e3899c0f9e04d07e95d1a0bdb07eb0319c083e3d9aa94bc2e33fc8546f82a1441e73c37218fdc7f228ee8273c7a87466958973",
      "tree": {
        "sha": "21dcbd638e6d831e3129467d70c3a783bd7571fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21dcbd638e6d831e3129467d70c3a783bd7571fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a43fbb959c38e025e558e472ad57de357539894",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaEzfkAAoJENLqSFDnUoslllkP/3pyTEF2N08XN72BIP86tjT8\nQkEIlm80aYeCytjyPvni8JTBJNoJvOC1e/teNefcbWNEqzdkg2Lg8bR7c0kaauv7\nhNZpHsHH2UlZwRWMjZTlWgOyof2LnptOscgueuRIRMlA4xzbdIXBS7TO5YDxZJyi\nNeuzDqzVCwBnVLT31taXkJGU0qp3D1lxGsyl8APicBXgt3FFifEh4+CYoxpAFT/J\nbZ+6eo6227ip1IQig+KDm6vk20PLJzOdXAO4iUarCGVXgmUNYf1AflyGL7Cfm4fu\n/nodMvfei619x4sMyr6LFUExxgN0ClFD8oWHWdLCMy0GqAZka3WoxjtBgpZdgeNg\noUWb3/QUYRP7Y4hUJECHR+Loeksiz+mbxtKmVTAInpRWu/9LticDL7MYGP7+I5PA\ngoaY33bFNks4mdFuNAdo1D346FPArrDmpT3vyQhqVY3NC64XpUHk4UNpzCSIx1I4\nZENxyIMkHyPY1Xix5lX+U1dy9tZLsj9knEdKPv4hTa+cOeGa3F7cZ/8FKwrOKVOR\nmTkDhi4xY60qmKU8W/aBosIaT+jGbJKWGJXD6ucF2frsxSkVMuTSwh0kqIF4cCB8\ndPhM46rGAjhalUPcIBLDkCbB13vrOrASLTD3+kQSNkbD0uzT/IWNpzifhXfJ2w9z\ncYTkkLA2ahAIVVh6yrVL\n=7/dh\n-----END PGP SIGNATURE-----",
        "payload": "tree 21dcbd638e6d831e3129467d70c3a783bd7571fc\nparent 7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc\nparent fe27a72362ea8a165fd4648ee322541254d71228\nauthor MarcoFalke <falke.marco@gmail.com> 1511208929 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1511208932 -0500\n\nMerge #11729: [docs] links to code style guides\n\nfe27a7236 [docs] links to code style guides (Sjors Provoost)\n\nPull request description:\n\n  I always have difficulty finding these, probably because they're not actually called \"code style guideline\".\n\nTree-SHA512: a2716c5e7e6778ce71b4451091e3899c0f9e04d07e95d1a0bdb07eb0319c083e3d9aa94bc2e33fc8546f82a1441e73c37218fdc7f228ee8273c7a87466958973\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a43fbb959c38e025e558e472ad57de357539894",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a43fbb959c38e025e558e472ad57de357539894",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a43fbb959c38e025e558e472ad57de357539894/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc"
      },
      {
        "sha": "fe27a72362ea8a165fd4648ee322541254d71228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe27a72362ea8a165fd4648ee322541254d71228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe27a72362ea8a165fd4648ee322541254d71228"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8381bd2448959e37813821d30190c65e6806e356",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a43fbb959c38e025e558e472ad57de357539894/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a43fbb959c38e025e558e472ad57de357539894/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=7a43fbb959c38e025e558e472ad57de357539894",
        "patch": "@@ -186,7 +186,7 @@ In general, all pull requests must:\n     the project (for example refactoring for modularisation);\n   - Be well peer reviewed;\n   - Have unit tests and functional tests where appropriate;\n-  - Follow code style guidelines;\n+  - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n   - Not break the existing test suite;\n   - Where bugs are fixed, where possible, there should be unit tests\n     demonstrating the bug and also proving the fix. This helps prevent regression."
      }
    ]
  },
  {
    "sha": "d9340ce9124ecc4c3588a411de6868fd8f995074",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTM0MGNlOTEyNGVjYzRjMzU4OGE0MTFkZTY4NjhmZDhmOTk1MDc0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-20T20:18:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-20T20:18:52Z"
      },
      "message": "Fix sendrawtransaction hang when sending a tx already in mempool",
      "tree": {
        "sha": "504c40ffca9e46d412eacbb10572abf30d80d0ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/504c40ffca9e46d412eacbb10572abf30d80d0ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9340ce9124ecc4c3588a411de6868fd8f995074",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9340ce9124ecc4c3588a411de6868fd8f995074",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9340ce9124ecc4c3588a411de6868fd8f995074",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9340ce9124ecc4c3588a411de6868fd8f995074/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3aff1e9fbff31e63518e09f9cd79311e022f5ffc",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9340ce9124ecc4c3588a411de6868fd8f995074/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9340ce9124ecc4c3588a411de6868fd8f995074/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d9340ce9124ecc4c3588a411de6868fd8f995074",
        "patch": "@@ -970,6 +970,10 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         }\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n+    } else {\n+        // Make sure we don't block forever if re-sending\n+        // a transaction already in mempool.\n+        promise.set_value();\n     }\n \n     } // cs_main"
      }
    ]
  },
  {
    "sha": "901ba3e3819405306414628306746552b0aa1d28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDFiYTNlMzgxOTQwNTMwNjQxNDYyODMwNjc0NjU1MmIwYWExZDI4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-20T20:19:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-20T20:19:24Z"
      },
      "message": "Merge #11714: [tests] Test that mempool rejects coinbase transactions\n\n65e91f5ed [tests] Test that mempool rejects coinbase transactions (James O'Beirne)\n\nPull request description:\n\n  ![selection_063](https://user-images.githubusercontent.com/73197/32978622-b0fa9d70-cbfa-11e7-9a72-1997409e5ba8.png)\n\n  Neither the unit nor functional tests appear to cover rejecting a transaction from acceptance to the mempool on the basis of it being a coinbase. Seems like a decent thing to have a test for.\n\nTree-SHA512: 53af53c975cad5d7a21c443d71a1c0ced5c70a7799b75bb44d9b7dd6ab2afbcdcaab14571540efeb848f3a1daee5e1dd856530d8f2b50582595219a1c17555ff",
      "tree": {
        "sha": "fb1a5667cb5074343f0d65a019e7bde3ac5a4cf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb1a5667cb5074343f0d65a019e7bde3ac5a4cf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/901ba3e3819405306414628306746552b0aa1d28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaEzjMAAoJENLqSFDnUoslUCwQAJgbL0TYTI8RIr0vgJIi48Vh\nthjY2sZfW0jSxjLYILzzdp6mntDxYbk62VgpkpBK0dWGPJaKuOEBAdjKX2FJ8Du+\nLY7Gkq5Bbs+aCSDYdywkA2+lq4qRZjBn3gsbKUJeSMQmh0iUjh4hZ5QEu3DsdsF0\nQW3BOZOmOiUZBDdP2Tog8xzFvn2UknjF05NEHcQ3jZYS2fq8K3tgv/3aaHCQ4/e/\n3I5u7RdAE3u0VcsmSQvnE2VZyCh1bxnJRog8njZF6p6Tf9Me9rdzS7mAFsOVJjdL\n7v/hzJfghAMCly0zYrll7REzlfyFLCSaHy490e4RgPHYMgvt4TOQg+Pe7vLwfPfV\nvhwfrcVUNM6Ixp8sFTmITbg+Ot67MjlnDXBdpMe04xRVcPIGWHPIT51Ze2BKxaqc\n56nKDArp1WAGLNPq69cy9PoLyH0gDvyvif3F6k3a0chXjqbqDZoMHSn169+3vk6i\niUMPmu5JfwE2fzDactrVLFVZTvsEJ6S51101/VYnjY+kEzCerTFQxjlw3hW/He4t\nOFUmUSM4ol970vqzDj0m01dXIMIEi4d+AHKO5TCIRWPIGPUHdsbykHHFrsC2rjy+\ngQPWsPSzDohAF9LSPKdGwvKDzQ1VbPJB/oKIuJP44Pg4LnYmJYxB8a8PHaiqCj5g\ndcfMy3PnF8C499/iizAj\n=WjWu\n-----END PGP SIGNATURE-----",
        "payload": "tree fb1a5667cb5074343f0d65a019e7bde3ac5a4cf0\nparent 7a43fbb959c38e025e558e472ad57de357539894\nparent 65e91f5edf555691d0e5809d441cff7fa63ba722\nauthor MarcoFalke <falke.marco@gmail.com> 1511209159 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1511209164 -0500\n\nMerge #11714: [tests] Test that mempool rejects coinbase transactions\n\n65e91f5ed [tests] Test that mempool rejects coinbase transactions (James O'Beirne)\n\nPull request description:\n\n  ![selection_063](https://user-images.githubusercontent.com/73197/32978622-b0fa9d70-cbfa-11e7-9a72-1997409e5ba8.png)\n\n  Neither the unit nor functional tests appear to cover rejecting a transaction from acceptance to the mempool on the basis of it being a coinbase. Seems like a decent thing to have a test for.\n\nTree-SHA512: 53af53c975cad5d7a21c443d71a1c0ced5c70a7799b75bb44d9b7dd6ab2afbcdcaab14571540efeb848f3a1daee5e1dd856530d8f2b50582595219a1c17555ff\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901ba3e3819405306414628306746552b0aa1d28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/901ba3e3819405306414628306746552b0aa1d28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901ba3e3819405306414628306746552b0aa1d28/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a43fbb959c38e025e558e472ad57de357539894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a43fbb959c38e025e558e472ad57de357539894",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a43fbb959c38e025e558e472ad57de357539894"
      },
      {
        "sha": "65e91f5edf555691d0e5809d441cff7fa63ba722",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e91f5edf555691d0e5809d441cff7fa63ba722",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65e91f5edf555691d0e5809d441cff7fa63ba722"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "06175be3fc77f73a3f1e4247db050c30f578e7be",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/901ba3e3819405306414628306746552b0aa1d28/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/901ba3e3819405306414628306746552b0aa1d28/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=901ba3e3819405306414628306746552b0aa1d28",
        "patch": "@@ -80,6 +80,7 @@ BITCOIN_TESTS =\\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "d6abe3e5a9973fcdc8ad6e1bc51529339df6dc29",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/901ba3e3819405306414628306746552b0aa1d28/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/901ba3e3819405306414628306746552b0aa1d28/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=901ba3e3819405306414628306746552b0aa1d28",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation.h>\n+#include <txmempool.h>\n+#include <amount.h>\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_AUTO_TEST_SUITE(txvalidation_tests)\n+\n+/**\n+ * Ensure that the mempool won't accept coinbase transactions.\n+ */\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n+{\n+    CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    CMutableTransaction coinbaseTx;\n+\n+    coinbaseTx.nVersion = 1;\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vin[0].scriptSig = CScript() << OP_11 << OP_EQUAL;\n+    coinbaseTx.vout[0].nValue = 1 * CENT;\n+    coinbaseTx.vout[0].scriptPubKey = scriptPubKey;\n+\n+    assert(CTransaction(coinbaseTx).IsCoinBase());\n+\n+    CValidationState state;\n+\n+    LOCK(cs_main);\n+\n+    unsigned int initialPoolSize = mempool.size();\n+\n+    BOOST_CHECK_EQUAL(\n+            false,\n+            AcceptToMemoryPool(mempool, state, MakeTransactionRef(coinbaseTx),\n+                nullptr /* pfMissingInputs */,\n+                nullptr /* plTxnReplaced */,\n+                true /* bypass_limits */,\n+                0 /* nAbsurdFee */));\n+\n+    // Check that the transaction hasn't been added to mempool.\n+    BOOST_CHECK_EQUAL(mempool.size(), initialPoolSize);\n+\n+    // Check that the validation state reflects the unsuccesful attempt.\n+    BOOST_CHECK(state.IsInvalid());\n+    BOOST_CHECK_EQUAL(state.GetRejectReason(), \"coinbase\");\n+\n+    int nDoS;\n+    BOOST_CHECK_EQUAL(state.IsInvalid(nDoS), true);\n+    BOOST_CHECK_EQUAL(nDoS, 100);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDI2N2EzYWIyNzFkOWFmZmQzYzFiMGMyZTMwMDYyNDkwYWY4MDRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-21T07:47:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-21T07:51:19Z"
      },
      "message": "Merge #11738: Fix sendrawtransaction hang when sending a tx already in mempool\n\nd9340ce Fix sendrawtransaction hang when sending a tx already in mempool (Matt Corallo)\n\nPull request description:\n\n  I assume this is what #11721 actually hit.\n\nTree-SHA512: 1da4088bbda64c5527233de9ec4d03f9e0c1eacddb2ed3deab3cb99eac0293ee6fb846830f97b5e10e230307b6d7fd18013043173aa4f27ef171d9da626e2c88",
      "tree": {
        "sha": "baa6e935b76c996ac2944e9de70fbe497c933f9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baa6e935b76c996ac2944e9de70fbe497c933f9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaE9r3AAoJEB5K7WKYbNJdAR0H/00WdA+hVQW6BNZSQahDr1Dh\n4k7EJ6Yf+0udsarzS/ijEY+bP+4Wr3fv3Q0F+FrL8RuB59GjPJmzQiFCtGhQ6EA2\n+l+kAFCuE/25WRiwdrR8Xq7QJdkUhQgzipeAOCUTDTdKRXZuvPCJDihZI5U3XMu8\nbqdERL6R5GCFvBk17H2UfaRl+D/eGU8zjhCpLua5881YsFmveDb9JEpBKdd7wSXX\nTV4Pbp1PQOt3GzbB/dKe81b3xGBxjxZgqLvVmlyrE1SBlkaDnuTEGriOCPu9231p\nQw2xWKPTZx80Hs2NURGewoEdNM3sDsGQKjqfXhdD+N7A5lcaIoKXEKCXib8sn+k=\n=vNM0\n-----END PGP SIGNATURE-----",
        "payload": "tree baa6e935b76c996ac2944e9de70fbe497c933f9f\nparent 901ba3e3819405306414628306746552b0aa1d28\nparent d9340ce9124ecc4c3588a411de6868fd8f995074\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511250455 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511250679 +0100\n\nMerge #11738: Fix sendrawtransaction hang when sending a tx already in mempool\n\nd9340ce Fix sendrawtransaction hang when sending a tx already in mempool (Matt Corallo)\n\nPull request description:\n\n  I assume this is what #11721 actually hit.\n\nTree-SHA512: 1da4088bbda64c5527233de9ec4d03f9e0c1eacddb2ed3deab3cb99eac0293ee6fb846830f97b5e10e230307b6d7fd18013043173aa4f27ef171d9da626e2c88\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "901ba3e3819405306414628306746552b0aa1d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901ba3e3819405306414628306746552b0aa1d28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/901ba3e3819405306414628306746552b0aa1d28"
      },
      {
        "sha": "d9340ce9124ecc4c3588a411de6868fd8f995074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9340ce9124ecc4c3588a411de6868fd8f995074",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9340ce9124ecc4c3588a411de6868fd8f995074"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3aff1e9fbff31e63518e09f9cd79311e022f5ffc",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4267a3ab271d9affd3c1b0c2e30062490af804e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4267a3ab271d9affd3c1b0c2e30062490af804e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "patch": "@@ -970,6 +970,10 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         }\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n+    } else {\n+        // Make sure we don't block forever if re-sending\n+        // a transaction already in mempool.\n+        promise.set_value();\n     }\n \n     } // cs_main"
      }
    ]
  },
  {
    "sha": "63f21d27ee463dafc32982d1ac50a1032449dd36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2YyMWQyN2VlNDYzZGFmYzMyOTgyZDFhYzUwYTEwMzI0NDlkZDM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T17:02:57Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T17:02:57Z"
      },
      "message": "net: Add missing locks in net.{cpp,h}\n\n* writing variable 'nTotalBytesRecv' requires holding mutex 'cs_totalBytesRecv' exclusively\n* writing variables 'nTotalBytesSent'/'nMaxOutboundTotalBytesSentInCycle'/'nMaxOutboundCycleStartTime' require holding mutex 'cs_totalBytesSent' exclusively\n* writing variable 'nMaxOutboundTimeframe'/'nMaxOutboundLimit' require holding mutex 'cs_totalBytesSent' exclusively\n* writing variable 'vAddedNodes' requires holding mutex 'cs_vAddedNodes' exclusively",
      "tree": {
        "sha": "9dcc4df50457b1ce4bbd2a80baa69c8e068245cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dcc4df50457b1ce4bbd2a80baa69c8e068245cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63f21d27ee463dafc32982d1ac50a1032449dd36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f21d27ee463dafc32982d1ac50a1032449dd36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63f21d27ee463dafc32982d1ac50a1032449dd36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f21d27ee463dafc32982d1ac50a1032449dd36/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 19,
      "deletions": 7
    },
    "files": [
      {
        "sha": "12a0820a492fb025b1e8e261f397712e5e2ae6b7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63f21d27ee463dafc32982d1ac50a1032449dd36/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63f21d27ee463dafc32982d1ac50a1032449dd36/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=63f21d27ee463dafc32982d1ac50a1032449dd36",
        "patch": "@@ -2269,10 +2269,16 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n \n-    nTotalBytesRecv = 0;\n-    nTotalBytesSent = 0;\n-    nMaxOutboundTotalBytesSentInCycle = 0;\n-    nMaxOutboundCycleStartTime = 0;\n+    {\n+        LOCK(cs_totalBytesRecv);\n+        nTotalBytesRecv = 0;\n+    }\n+    {\n+        LOCK(cs_totalBytesSent);\n+        nTotalBytesSent = 0;\n+        nMaxOutboundTotalBytesSentInCycle = 0;\n+        nMaxOutboundCycleStartTime = 0;\n+    }\n \n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {"
      },
      {
        "sha": "ffe33ea6acbac8616e136924d93b1f6abe1cec2b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63f21d27ee463dafc32982d1ac50a1032449dd36/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63f21d27ee463dafc32982d1ac50a1032449dd36/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=63f21d27ee463dafc32982d1ac50a1032449dd36",
        "patch": "@@ -158,10 +158,16 @@ class CConnman\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-        nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n-        nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n+        {\n+            LOCK(cs_totalBytesSent);\n+            nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n+            nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n+        }\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n-        vAddedNodes = connOptions.m_added_nodes;\n+        {\n+            LOCK(cs_vAddedNodes);\n+            vAddedNodes = connOptions.m_added_nodes;\n+        }\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);"
      }
    ]
  },
  {
    "sha": "d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmVhMmJjYjVjZjU4ZDdhZmUwODM3YjUxN2Q3YzQ3MThiZDAzMTdi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T18:14:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T18:14:35Z"
      },
      "message": "trivial: Fix unsuccessful typo",
      "tree": {
        "sha": "bfc0fdf6d3f1a538340f6efa301324403d059c9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfc0fdf6d3f1a538340f6efa301324403d059c9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2d1eb7b772551618d444d1678d2475c9cff74b99",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
        "patch": "@@ -49,7 +49,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     // Check that the transaction hasn't been added to mempool.\n     BOOST_CHECK_EQUAL(mempool.size(), initialPoolSize);\n \n-    // Check that the validation state reflects the unsuccesful attempt.\n+    // Check that the validation state reflects the unsuccessful attempt.\n     BOOST_CHECK(state.IsInvalid());\n     BOOST_CHECK_EQUAL(state.GetRejectReason(), \"coinbase\");\n "
      }
    ]
  },
  {
    "sha": "e1a8ec56c56161be15af1c33067918959e2666de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWE4ZWM1NmM1NjE2MWJlMTVhZjFjMzMwNjc5MTg5NTllMjY2NmRl",
    "commit": {
      "author": {
        "name": "Andras Elso",
        "email": "elso.andras@gmail.com",
        "date": "2017-11-21T19:35:06Z"
      },
      "committer": {
        "name": "Andras Elso",
        "email": "elso.andras@gmail.com",
        "date": "2017-11-21T19:35:06Z"
      },
      "message": "Fix: Open files read only if requested",
      "tree": {
        "sha": "5f69cb6b043958e55059a2ddad1a78bc070c99ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f69cb6b043958e55059a2ddad1a78bc070c99ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1a8ec56c56161be15af1c33067918959e2666de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a8ec56c56161be15af1c33067918959e2666de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1a8ec56c56161be15af1c33067918959e2666de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a8ec56c56161be15af1c33067918959e2666de/comments",
    "author": {
      "login": "Elbandi",
      "id": 44674,
      "node_id": "MDQ6VXNlcjQ0Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Elbandi",
      "html_url": "https://github.com/Elbandi",
      "followers_url": "https://api.github.com/users/Elbandi/followers",
      "following_url": "https://api.github.com/users/Elbandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Elbandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Elbandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Elbandi/subscriptions",
      "organizations_url": "https://api.github.com/users/Elbandi/orgs",
      "repos_url": "https://api.github.com/users/Elbandi/repos",
      "events_url": "https://api.github.com/users/Elbandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Elbandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Elbandi",
      "id": 44674,
      "node_id": "MDQ6VXNlcjQ0Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Elbandi",
      "html_url": "https://github.com/Elbandi",
      "followers_url": "https://api.github.com/users/Elbandi/followers",
      "following_url": "https://api.github.com/users/Elbandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Elbandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Elbandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Elbandi/subscriptions",
      "organizations_url": "https://api.github.com/users/Elbandi/orgs",
      "repos_url": "https://api.github.com/users/Elbandi/repos",
      "events_url": "https://api.github.com/users/Elbandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Elbandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9d45ef5f81ba902e6ec9e514b331d46949e278c4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1a8ec56c56161be15af1c33067918959e2666de/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1a8ec56c56161be15af1c33067918959e2666de/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e1a8ec56c56161be15af1c33067918959e2666de",
        "patch": "@@ -3464,7 +3464,7 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n         return nullptr;\n     fs::path path = GetBlockPosFilename(pos, prefix);\n     fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, \"rb+\");\n+    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n     if (!file && !fReadOnly)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {"
      }
    ]
  },
  {
    "sha": "5ea932a51083837cdd27715e10a3a0d5d553af24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWE5MzJhNTEwODM4MzdjZGQyNzcxNWUxMGEzYTBkNWQ1NTNhZjI0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-22T01:44:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-22T02:05:30Z"
      },
      "message": "Merge #11746: trivial: Fix unsuccessful typo\n\nd2ea2bcb5 trivial: Fix unsuccessful typo (practicalswift)\n\nPull request description:\n\n  Fix unsuccessful typo.\n\nTree-SHA512: 48dde6764603b91cdd698fd9b5ea200961009df07f5a024430aaf81c50d889ed72681d76ac0832cdafaa2fd2be32ef3637ba641308de5eea6146f3b1074e9b19",
      "tree": {
        "sha": "bfc0fdf6d3f1a538340f6efa301324403d059c9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfc0fdf6d3f1a538340f6efa301324403d059c9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ea932a51083837cdd27715e10a3a0d5d553af24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaFNtqAAoJEKY26XYx92fgFy0P/RiHbxTtKRikETuzjUdtbgWy\na54BqHK3dV9ZZVueaUnYygJ8ukJlmWTOVRd7VZvVfOWGnCXhFtKBCG+p5QKt5zQ3\nFUVglpEoz6HwDeSwS62Ex76vUDjlOIm+rCjIxDUWzm7/7tV1Lya90zu5Qi76D8TM\n2f+0aORmJDj4LMMZ6oy8uzHkETl3g4cWXrpQSIRSy7YjUHLWCRyf5Gpp+x75259W\n+er3xohsWg5g3dsTMhnxM3NnZWo6S3ffYA6kGFSOAxYhROJ49ktOK+P7RVmo+6EB\nr/Krwvbc5eWNT+ODYEWabPAb0Y13FnKqUkZOm5oqkG1dFnHHneo6lMuYlKwdho4d\nI0slPbXFTG1kWfUq9pmwxJYTDy/LaxjiB6rmg4DNt83vUOWJWi2DrTZmYDmbVtgi\nAJR6JMPn5hxwjNLdQS9i38nMuTe+GEmSn+BM/Md/SIB26HRlwZd8xBrlqKeHsW4O\n3QSoEuPfsexcU0oU9AjlqclOV0zHdpFgp5wpR8USNKrCXu36CD3n3aDp23Umk49M\nR5LrJVZgtYXH/m60ICepjke2mWcHelUdiGbIAbMLe4wTkFHpvCnAVlhD7hiLsvd/\nco/9Xqb3b7IcFtz+iy9/r9Zm2EaHuaWt6YVKdaKL0OOHSi177ORtFQa23jwZHbd5\nocGwmGhCSI1J30Q3PI7a\n=Usi1\n-----END PGP SIGNATURE-----",
        "payload": "tree bfc0fdf6d3f1a538340f6efa301324403d059c9f\nparent d4267a3ab271d9affd3c1b0c2e30062490af804e\nparent d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1511315094 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1511316330 -0800\n\nMerge #11746: trivial: Fix unsuccessful typo\n\nd2ea2bcb5 trivial: Fix unsuccessful typo (practicalswift)\n\nPull request description:\n\n  Fix unsuccessful typo.\n\nTree-SHA512: 48dde6764603b91cdd698fd9b5ea200961009df07f5a024430aaf81c50d889ed72681d76ac0832cdafaa2fd2be32ef3637ba641308de5eea6146f3b1074e9b19\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea932a51083837cdd27715e10a3a0d5d553af24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ea932a51083837cdd27715e10a3a0d5d553af24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea932a51083837cdd27715e10a3a0d5d553af24/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e"
      },
      {
        "sha": "d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ea2bcb5cf58d7afe0837b517d7c4718bd0317b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2d1eb7b772551618d444d1678d2475c9cff74b99",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ea932a51083837cdd27715e10a3a0d5d553af24/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ea932a51083837cdd27715e10a3a0d5d553af24/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=5ea932a51083837cdd27715e10a3a0d5d553af24",
        "patch": "@@ -49,7 +49,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     // Check that the transaction hasn't been added to mempool.\n     BOOST_CHECK_EQUAL(mempool.size(), initialPoolSize);\n \n-    // Check that the validation state reflects the unsuccesful attempt.\n+    // Check that the validation state reflects the unsuccessful attempt.\n     BOOST_CHECK(state.IsInvalid());\n     BOOST_CHECK_EQUAL(state.GetRejectReason(), \"coinbase\");\n "
      }
    ]
  },
  {
    "sha": "3d6ad407770e13958e157bf026cae0bfb9254899",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDZhZDQwNzc3MGUxMzk1OGUxNTdiZjAyNmNhZTBiZmI5MjU0ODk5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-22T16:31:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-22T16:31:35Z"
      },
      "message": "Merge #11743: qa: Add multiwallet prefix test\n\nfa61c6f6a qa: Add multiwallet prefix test (MarcoFalke)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/pull/10849#discussion_r127847938\n\nTree-SHA512: 7967be04e76d935398b3bea60c864ffc9e38dbb4cfb55890bb146a6f16c28d81ca5d89736275e2d0b03642806f6f7093beeea979f5257c464f437c4e5a9684f1",
      "tree": {
        "sha": "d1bae9d536b63e7fc54f6bf08089b808227119c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1bae9d536b63e7fc54f6bf08089b808227119c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaFaZnAAoJENLqSFDnUoslAPYP/RJ8GfBYqc6C2LzLTUAurFuq\nAvSvaADhDWrfZ9czTqnzrAvE/gVWB5FH0XygYTv5YzPbLpjNLFC3MWkdaorVU1Sb\nU7KFGe5vaZYsCf8AkKvn6eW6tSPzotKZK5MSKtQiwAMUbJB28HjvTN3vp4Yt+Gmo\nx8SQj2raF6TVFWaJ4rVzQOfSwuN8ActEQsoxSLJnIOLlSP7e4X+vZiFuKItJC08o\nTYzBIVeEMyIrtYHKEF5y41LRpC2+t/XE9l3X//yc79JzegpkMiIAB3Ct1wOdrOT+\nzXtBBwYGdkv5VDno4tAwwVXd2r7DDDrO3GT0xOtnhQ9gp+D9znNcrpUJSvPcqR5P\nnKFyQUy4l8U9Eut2MFP0V4kvDyo0s+NAXc61+2POG5iPJljNV/GkLj7oMXT5WiK4\nQN09/HBuK813qu4KNGMUd71ZLVQlK5Vh1RXIJJFNOd//z3AKIDlRYMfakcfBJaXm\nLT2HDKfujjwzaZ5cEyWU6SajAZe4BSOVaDaMY4qIVMONzYf/wZAyKmORXzokNwC5\ny9QErZuAMInKSG44lhHWIUbl7t4JytsCVRQWZl+nnJYxtWWWLGmxqJfkzl771hWK\nWs32Rs6cX48c697b/p8iquT4l6bc/yWMSGbNeuFPSSN76ydfLqShsx8Pu+vyYXaz\nivRpGXhdUNNjUq1P7ikP\n=NgcA\n-----END PGP SIGNATURE-----",
        "payload": "tree d1bae9d536b63e7fc54f6bf08089b808227119c1\nparent 5ea932a51083837cdd27715e10a3a0d5d553af24\nparent fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd\nauthor MarcoFalke <falke.marco@gmail.com> 1511368292 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1511368295 -0500\n\nMerge #11743: qa: Add multiwallet prefix test\n\nfa61c6f6a qa: Add multiwallet prefix test (MarcoFalke)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/pull/10849#discussion_r127847938\n\nTree-SHA512: 7967be04e76d935398b3bea60c864ffc9e38dbb4cfb55890bb146a6f16c28d81ca5d89736275e2d0b03642806f6f7093beeea979f5257c464f437c4e5a9684f1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6ad407770e13958e157bf026cae0bfb9254899",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ea932a51083837cdd27715e10a3a0d5d553af24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea932a51083837cdd27715e10a3a0d5d553af24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ea932a51083837cdd27715e10a3a0d5d553af24"
      },
      {
        "sha": "fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa61c6f6a6fda3e68f3f84d27bcc996af861bcfd"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "06409b6f3177faf0374ee009fecb63cd67ccc219",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d6ad407770e13958e157bf026cae0bfb9254899/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d6ad407770e13958e157bf026cae0bfb9254899/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=3d6ad407770e13958e157bf026cae0bfb9254899",
        "patch": "@@ -16,10 +16,10 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n+        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w']]\n \n     def run_test(self):\n-        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\"})\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n \n         self.stop_node(0)\n \n@@ -66,6 +66,7 @@ def run_test(self):\n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n         w2 = self.nodes[0].get_wallet_rpc(\"w2\")\n         w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n+        w4 = self.nodes[0].get_wallet_rpc(\"w\")\n         wallet_bad = self.nodes[0].get_wallet_rpc(\"bad\")\n \n         w1.generate(1)\n@@ -91,18 +92,22 @@ def run_test(self):\n         w3_name = w3.getwalletinfo()['walletname']\n         assert_equal(w3_name, \"w3\")\n \n-        assert_equal({\"w1\", \"w2\", \"w3\"}, {w1_name, w2_name, w3_name})\n+        w4_name = w4.getwalletinfo()['walletname']\n+        assert_equal(w4_name, \"w\")\n \n         w1.generate(101)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)\n         assert_equal(w3.getbalance(), 0)\n+        assert_equal(w4.getbalance(), 0)\n \n         w1.sendtoaddress(w2.getnewaddress(), 1)\n         w1.sendtoaddress(w3.getnewaddress(), 2)\n+        w1.sendtoaddress(w4.getnewaddress(), 3)\n         w1.generate(1)\n         assert_equal(w2.getbalance(), 1)\n         assert_equal(w3.getbalance(), 2)\n+        assert_equal(w4.getbalance(), 3)\n \n         batch = w1.batch([w1.getblockchaininfo.get_request(), w1.getwalletinfo.get_request()])\n         assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")"
      }
    ]
  },
  {
    "sha": "8b2c7330d09fd9dee93b3f44881437b17766aea3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjJjNzMzMGQwOWZkOWRlZTkzYjNmNDQ4ODE0MzdiMTc3NjZhZWEz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-11-22T19:06:53Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-11-22T19:06:53Z"
      },
      "message": "clarify abortrescan rpc use",
      "tree": {
        "sha": "ae50ffd2910c9b6f3811cd4bffc9378b3850ac51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae50ffd2910c9b6f3811cd4bffc9378b3850ac51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b2c7330d09fd9dee93b3f44881437b17766aea3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b2c7330d09fd9dee93b3f44881437b17766aea3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b2c7330d09fd9dee93b3f44881437b17766aea3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b2c7330d09fd9dee93b3f44881437b17766aea3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d6ad407770e13958e157bf026cae0bfb9254899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6ad407770e13958e157bf026cae0bfb9254899"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "71d50be63425bdca0a530f36ddafc5df479b5732",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b2c7330d09fd9dee93b3f44881437b17766aea3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b2c7330d09fd9dee93b3f44881437b17766aea3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=8b2c7330d09fd9dee93b3f44881437b17766aea3",
        "patch": "@@ -165,7 +165,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n             \"abortrescan\\n\"\n-            \"\\nStops current wallet rescan triggered e.g. by an importprivkey call.\\n\"\n+            \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a private key\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +"
      }
    ]
  },
  {
    "sha": "ec59523c5915fb67db33149290dfc57049ba973d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzU5NTIzYzU5MTVmYjY3ZGIzMzE0OTI5MGRmYzU3MDQ5YmE5NzNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T12:02:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T23:08:37Z"
      },
      "message": "[tests] Remove rpc property from TestNode in p2p-segwit.py.\n\nChange the helper methods to functions which take a node and a p2p\nconnection as arguments.",
      "tree": {
        "sha": "45c476dd95191c51aa4af10e19ec458abe4dcab1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c476dd95191c51aa4af10e19ec458abe4dcab1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec59523c5915fb67db33149290dfc57049ba973d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec59523c5915fb67db33149290dfc57049ba973d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec59523c5915fb67db33149290dfc57049ba973d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec59523c5915fb67db33149290dfc57049ba973d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d6ad407770e13958e157bf026cae0bfb9254899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6ad407770e13958e157bf026cae0bfb9254899"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 141,
      "deletions": 135
    },
    "files": [
      {
        "sha": "586f2d1b79937fc8bb810d355ac91cd6e0f459b9",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 141,
        "deletions": 135,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec59523c5915fb67db33149290dfc57049ba973d/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec59523c5915fb67db33149290dfc57049ba973d/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=ec59523c5915fb67db33149290dfc57049ba973d",
        "patch": "@@ -31,11 +31,38 @@ def get_virtual_size(witness_block):\n     vsize = int((3*base_size + total_size + 3)/4)\n     return vsize\n \n+def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+    \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n+\n+    - Submit the transaction over the p2p interface\n+    - use the getrawmempool rpc to check for acceptance.\"\"\"\n+    tx_message = msg_tx(tx)\n+    if with_witness:\n+        tx_message = msg_witness_tx(tx)\n+    p2p.send_message(tx_message)\n+    p2p.sync_with_ping()\n+    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    if (reason != None and not accepted):\n+        # Check the rejection reason as well.\n+        with mininode_lock:\n+            assert_equal(p2p.last_message[\"reject\"].reason, reason)\n+\n+def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n+    \"\"\"Send a block to the node and check that it's accepted\n+\n+    - Submit the block over the p2p interface\n+    - use the getbestblockhash rpc to check for acceptance.\"\"\"\n+    if with_witness:\n+        p2p.send_message(msg_witness_block(block))\n+    else:\n+        p2p.send_message(msg_block(block))\n+    p2p.sync_with_ping()\n+    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+\n class TestNode(NodeConnCB):\n-    def __init__(self, rpc):\n+    def __init__(self):\n         super().__init__()\n         self.getdataset = set()\n-        self.rpc = rpc\n \n     def on_getdata(self, conn, message):\n         for inv in message.inv:\n@@ -68,27 +95,6 @@ def request_block(self, blockhash, inv_type, timeout=60):\n         self.wait_for_block(blockhash, timeout)\n         return self.last_message[\"block\"].block\n \n-    def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n-        tx_message = msg_tx(tx)\n-        if with_witness:\n-            tx_message = msg_witness_tx(tx)\n-        self.send_message(tx_message)\n-        self.sync_with_ping()\n-        assert_equal(tx.hash in self.rpc.getrawmempool(), accepted)\n-        if (reason != None and not accepted):\n-            # Check the rejection reason as well.\n-            with mininode_lock:\n-                assert_equal(self.last_message[\"reject\"].reason, reason)\n-\n-    # Test whether a witness block had the correct effect on the tip\n-    def test_witness_block(self, block, accepted, with_witness=True):\n-        if with_witness:\n-            self.send_message(msg_witness_block(block))\n-        else:\n-            self.send_message(msg_block(block))\n-        self.sync_with_ping()\n-        assert_equal(self.rpc.getbestblockhash() == block.hash, accepted)\n-\n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n class UTXO():\n     def __init__(self, sha256, n, nValue):\n@@ -201,7 +207,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n         # TODO: fix synchronization so we can test reject reason\n         # Right now, bitcoind delays sending reject messages for blocks\n         # until the future, making synchronization here difficult.\n@@ -228,7 +234,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n         tx2.rehash()\n-        self.test_node.test_transaction_acceptance(tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -245,18 +251,18 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         tx3.rehash()\n         # Note that this should be rejected for the premature witness reason,\n         # rather than a policy check, since segwit hasn't activated yet.\n-        self.std_node.test_transaction_acceptance(tx3, True, False, b'no-witness-yet')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'no-witness-yet')\n \n         # If we send without witness, it should be accepted.\n-        self.std_node.test_transaction_acceptance(tx3, False, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx4 = CTransaction()\n         tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), CScript([p2sh_program])))\n         tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, CScript([OP_TRUE])))\n         tx4.rehash()\n-        self.test_node.test_transaction_acceptance(tx3, False, True)\n-        self.test_node.test_transaction_acceptance(tx4, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -317,7 +323,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -328,7 +334,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        self.test_node.test_witness_block(block_2, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         assert (len(self.utxo) > 0)\n@@ -361,7 +367,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        self.test_node.test_witness_block(block_3, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -375,7 +381,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n         block_3.solve()\n-        self.test_node.test_witness_block(block_3, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -387,7 +393,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -428,11 +434,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Changing the witness nonce doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n \n     def test_witness_block_size(self):\n@@ -497,7 +503,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2*1024*1024)\n \n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -507,7 +513,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -574,7 +580,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -583,7 +589,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -599,7 +605,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -611,7 +617,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -620,7 +626,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -653,14 +659,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -695,7 +701,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n@@ -710,7 +716,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -736,7 +742,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -771,15 +777,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -788,13 +794,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -834,11 +840,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n-        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -870,11 +876,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -899,24 +905,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        self.std_node.test_transaction_acceptance(tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        self.std_node.test_transaction_acceptance(tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n         tx3.rehash()\n \n-        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n-        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)]) # wait until tx2 was inv'ed\n-        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -955,20 +961,20 @@ def test_block_relay(self, segwit_activated):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        self.test_node.test_witness_block(block1, True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n \n         block2 = self.build_next_block(nVersion=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        self.test_node.test_witness_block(block2, True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n \n         block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        self.test_node.test_witness_block(block3, True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -998,7 +1004,7 @@ def test_block_relay(self, segwit_activated):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -1052,7 +1058,7 @@ def test_standardness_v0(self, segwit_activated):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        self.test_node.test_transaction_acceptance(p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1064,7 +1070,7 @@ def test_standardness_v0(self, segwit_activated):\n         tx.vout.append(CTxOut(8000, scriptPubKey)) # Might burn this later\n         tx.rehash()\n \n-        self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=segwit_activated)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         scriptPubKey = CScript([OP_0, hash160(witness_hash)])\n@@ -1081,7 +1087,7 @@ def test_standardness_v0(self, segwit_activated):\n             tx2.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, scriptPubKey)]\n         tx2.rehash()\n \n-        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=segwit_activated)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -1094,13 +1100,13 @@ def test_standardness_v0(self, segwit_activated):\n             tx3.wit.vtxinwit.append(CTxInWitness())\n             tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n             tx3.rehash()\n-            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n         else:\n             # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n             tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n             tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, witness_program)]\n             tx3.rehash()\n-            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1124,7 +1130,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_TESTS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1143,8 +1149,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n             tx.rehash()\n-            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n-            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1163,8 +1169,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n-        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1180,15 +1186,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1206,7 +1212,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1220,13 +1226,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        self.test_node.test_witness_block(block2, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        self.test_node.test_witness_block(block2, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n \n@@ -1247,11 +1253,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n         tx.rehash()\n \n-        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1268,19 +1274,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue+1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                self.test_node.test_witness_block(block, accepted=False)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue-1, key)\n                 block.vtx.pop() # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                self.test_node.test_witness_block(block, accepted=False)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                self.test_node.test_witness_block(block, accepted=True)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1304,7 +1310,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1346,15 +1352,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                self.test_node.test_witness_block(block, accepted=True)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1376,7 +1382,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1386,7 +1392,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1405,7 +1411,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1432,10 +1438,10 @@ def test_p2sh_witness(self, segwit_activated):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True, with_witness=segwit_activated)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=segwit_activated)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -1449,12 +1455,12 @@ def test_p2sh_witness(self, segwit_activated):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the scriptSig, should also fail.\n         spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -1464,17 +1470,17 @@ def test_p2sh_witness(self, segwit_activated):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a', witness_program ]\n \n         # Verify mempool acceptance\n-        self.test_node.test_transaction_acceptance(spend_tx, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=segwit_activated)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're before activation, then sending this without witnesses\n         # should be valid.  If we're after activation, then sending this with\n         # witnesses should be valid.\n         if segwit_activated:\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         else:\n-            self.test_node.test_witness_block(block, accepted=True, with_witness=False)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=False)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -1558,7 +1564,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        self.test_node.test_witness_block(block_1, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -1575,7 +1581,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        self.test_node.test_witness_block(block_2, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -1588,14 +1594,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        self.test_node.test_witness_block(block_3, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG]*(checksig_count-1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        self.test_node.test_witness_block(block_4, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -1611,7 +1617,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_justright ]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        self.test_node.test_witness_block(block_5, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n \n@@ -1689,7 +1695,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1708,11 +1714,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        self.test_node.test_transaction_acceptance(tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1728,11 +1734,11 @@ def test_uncompressed_pubkey(self):\n         sign_P2PK_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        self.test_node.test_transaction_acceptance(tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1745,10 +1751,10 @@ def test_uncompressed_pubkey(self):\n         sign_P2PK_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        self.test_node.test_transaction_acceptance(tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1760,10 +1766,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        self.test_node.test_transaction_acceptance(tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     def test_non_standard_witness(self):\n@@ -1793,7 +1799,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1818,45 +1824,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n-        self.std_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        self.test_node.test_transaction_acceptance(p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -1870,11 +1876,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(p2p_conn=TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(p2p_conn=TestNode(), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(self.nodes[1].rpc), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(p2p_conn=TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      }
    ]
  },
  {
    "sha": "fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU5OGY2NmZlNWE3Y2VlMTJmMWIwMWNiOWMxNTQ1ZWM0NzljZjAy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-23T00:02:06Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-23T00:02:06Z"
      },
      "message": "[Docs] Bump minimum required version of GCC to 4.8",
      "tree": {
        "sha": "e587c2edd7433531fda943ad6f760fda9fc344b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e587c2edd7433531fda943ad6f760fda9fc344b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAloWD/8ACgkQLuufXMCV\nJsGElhAAg8e+eSj4jVmtWWW6en00yd5m+OkcVMCMEBiMc9a93Dxjc5Z2rfrVU6Mu\npgnVXCOoFy7xgixm2Lcmo6icamT5PDTMcWVexqBlve69gBTVeJb/NOZXBc359Qiy\n/zwi56cc3yISWBZYvJZWrjmEe20nAp1OnSq36Nm916F7NMrQBeu/ztK0yPxDBCUe\nFq65cuMOWqenPJwye7tanVto8KCSMaSqGdQc6ng/+bDDEdI9ydKupLPPr7Zt8vBp\n3nDQ7CVIDD2NhQTeR+g3WeX6gKtLO8SEWCaHMM9ut4sOZy9KneQhmp9LWA0wX7I1\nRXGF+PwCZDrqhRaecslOv/h06736/Jm37lj9hj785gKnxK4Z9p5jBOjS3w95UD+U\nkkvnnuxuOn+SwqYylNSyUe5wNvbQArhhiBsb9qdCNqJkuhlmfuk+NLV7injo5E9O\nMY+D3DdDAUAhVwJ546uCWdiSRKRz9utgk9t8CbWpPE1/3WSUId1wRZarXVjDBuy0\ntYp6lK3U/Qvb6puV1SHWSWGZJkxdzDxPZvXNb2ViSbvPh9wZrXqqYBYaefDaDMtu\nY3VeA5s/Z/mVoRSali+MCqYC4R/2kpltHWNTBUqVMWwgHsOEQ7ztRQztUDHoId0N\nlbX0vQgrqC4h0jUJkHTXVbKVm+O5/jUoVdAYjyJNfxdyTHFOcr0=\n=RU+D\n-----END PGP SIGNATURE-----",
        "payload": "tree e587c2edd7433531fda943ad6f760fda9fc344b6\nparent 3d6ad407770e13958e157bf026cae0bfb9254899\nauthor fanquake <fanquake@gmail.com> 1511395326 +0800\ncommitter fanquake <fanquake@gmail.com> 1511395326 +0800\n\n[Docs] Bump minimum required version of GCC to 4.8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d6ad407770e13958e157bf026cae0bfb9254899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6ad407770e13958e157bf026cae0bfb9254899"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e1d1ee9922245a162fdebe3114d445a2c31dae1",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
        "patch": "@@ -13,7 +13,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Expat | [2.2.1](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n-| GCC |  | [4.7+](https://gcc.gnu.org/) |  |  |  |\n+| GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L75) |"
      },
      {
        "sha": "2c63b1f88e016a09446b9419ded615e5ae8e4ea3",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
        "patch": "@@ -56,6 +56,11 @@ frequently tested on them.\n Notable changes\n ===============\n \n+GCC 4.8.x\n+--------------\n+The minimum version of GCC required to compile Bitcoin Core is now 4.8. No effort will be\n+made to support older versions of GCC. See discussion in issue #11732 for more information.\n+\n HD-wallets by default\n ---------------------\n Due to a backward-incompatible change in the wallet database, wallets created"
      }
    ]
  },
  {
    "sha": "bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmIwYzBhNWI3NWRhNDNkNmFhODI5ZWY1ZDYzMmZhOWM1NmM1MWU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-23T06:55:45Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-23T06:59:58Z"
      },
      "message": "Add Clang thread safety analysis annotations",
      "tree": {
        "sha": "fb0e222c5de264bf782d33c848be81a2025ef8b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb0e222c5de264bf782d33c848be81a2025ef8b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63f21d27ee463dafc32982d1ac50a1032449dd36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f21d27ee463dafc32982d1ac50a1032449dd36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63f21d27ee463dafc32982d1ac50a1032449dd36"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d0fd05097017a258091199cf610e07f5375e6a6c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
        "patch": "@@ -370,14 +370,14 @@ class CConnman\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;\n-    uint64_t nTotalBytesRecv;\n-    uint64_t nTotalBytesSent;\n+    uint64_t nTotalBytesRecv GUARDED_BY(cs_totalBytesRecv);\n+    uint64_t nTotalBytesSent GUARDED_BY(cs_totalBytesSent);\n \n     // outbound limit & stats\n-    uint64_t nMaxOutboundTotalBytesSentInCycle;\n-    uint64_t nMaxOutboundCycleStartTime;\n-    uint64_t nMaxOutboundLimit;\n-    uint64_t nMaxOutboundTimeframe;\n+    uint64_t nMaxOutboundTotalBytesSentInCycle GUARDED_BY(cs_totalBytesSent);\n+    uint64_t nMaxOutboundCycleStartTime GUARDED_BY(cs_totalBytesSent);\n+    uint64_t nMaxOutboundLimit GUARDED_BY(cs_totalBytesSent);\n+    uint64_t nMaxOutboundTimeframe GUARDED_BY(cs_totalBytesSent);\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n@@ -395,7 +395,7 @@ class CConnman\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots;\n     CCriticalSection cs_vOneShots;\n-    std::vector<std::string> vAddedNodes;\n+    std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n     std::vector<CNode*> vNodes;\n     std::list<CNode*> vNodesDisconnected;"
      }
    ]
  },
  {
    "sha": "84fa64598e8b7d6901c546e938fb0eeda625a8e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGZhNjQ1OThlOGI3ZDY5MDFjNTQ2ZTkzOGZiMGVlZGE2MjVhOGU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-23T07:29:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-23T07:30:20Z"
      },
      "message": "Merge #11755: [Docs] Bump minimum required version of GCC to 4.8\n\nfae98f6 [Docs] Bump minimum required version of GCC to 4.8 (fanquake)\n\nPull request description:\n\n  Make it explicit that the minimum required version of GCC is 4.8. Discussion in #11732.\n\nTree-SHA512: 85ade5a4a63ea1cb6b5e20756bc96f25518c394e00a8d3ed5b9c2927b55ea3155645ca74bb1c7e7eda69d7e42d440a42bde839f281e57fc3e20390b2a19885d6",
      "tree": {
        "sha": "e587c2edd7433531fda943ad6f760fda9fc344b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e587c2edd7433531fda943ad6f760fda9fc344b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84fa64598e8b7d6901c546e938fb0eeda625a8e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaFnkMAAoJEB5K7WKYbNJd7csH/1kp9Essuu+rZirz7onGJ0hW\nR1Rm4QKEMIEqNsN34XiqjpNJuOZBGnm4emidASeoM1W8Fp+/DUd/uwF6CJnS/qPA\n7oQta9ZcwKBmhrtHc/aVmVpOyRtCVi2Uw8j3n1qVXbHR6mx/+u7zjzPRMVLlhmBa\nlq5cjdCh4j30mgmz+58deZPOlnw8w3J6au/qfEWhbrVg9ujaUWujPnXTUFxwVEvp\nnp9RQ8e1oonO+UZnJza9jtRBFboI2KimLlhVTRwO1qpFkxquOK6dCjf+MSMwm4da\nRndoO1SW+n6d8SUi/Fo992x5Vgvk80Opd5gJ/ugFdA0ti0CCT6BNrojvjyjLLNk=\n=ACUq\n-----END PGP SIGNATURE-----",
        "payload": "tree e587c2edd7433531fda943ad6f760fda9fc344b6\nparent 3d6ad407770e13958e157bf026cae0bfb9254899\nparent fae98f66fe5a7cee12f1b01cb9c1545ec479cf02\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511422188 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511422220 +0100\n\nMerge #11755: [Docs] Bump minimum required version of GCC to 4.8\n\nfae98f6 [Docs] Bump minimum required version of GCC to 4.8 (fanquake)\n\nPull request description:\n\n  Make it explicit that the minimum required version of GCC is 4.8. Discussion in #11732.\n\nTree-SHA512: 85ade5a4a63ea1cb6b5e20756bc96f25518c394e00a8d3ed5b9c2927b55ea3155645ca74bb1c7e7eda69d7e42d440a42bde839f281e57fc3e20390b2a19885d6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fa64598e8b7d6901c546e938fb0eeda625a8e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84fa64598e8b7d6901c546e938fb0eeda625a8e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fa64598e8b7d6901c546e938fb0eeda625a8e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d6ad407770e13958e157bf026cae0bfb9254899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6ad407770e13958e157bf026cae0bfb9254899"
      },
      {
        "sha": "fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae98f66fe5a7cee12f1b01cb9c1545ec479cf02"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e1d1ee9922245a162fdebe3114d445a2c31dae1",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84fa64598e8b7d6901c546e938fb0eeda625a8e8/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84fa64598e8b7d6901c546e938fb0eeda625a8e8/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=84fa64598e8b7d6901c546e938fb0eeda625a8e8",
        "patch": "@@ -13,7 +13,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Expat | [2.2.1](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n-| GCC |  | [4.7+](https://gcc.gnu.org/) |  |  |  |\n+| GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L75) |"
      },
      {
        "sha": "2c63b1f88e016a09446b9419ded615e5ae8e4ea3",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84fa64598e8b7d6901c546e938fb0eeda625a8e8/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84fa64598e8b7d6901c546e938fb0eeda625a8e8/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=84fa64598e8b7d6901c546e938fb0eeda625a8e8",
        "patch": "@@ -56,6 +56,11 @@ frequently tested on them.\n Notable changes\n ===============\n \n+GCC 4.8.x\n+--------------\n+The minimum version of GCC required to compile Bitcoin Core is now 4.8. No effort will be\n+made to support older versions of GCC. See discussion in issue #11732 for more information.\n+\n HD-wallets by default\n ---------------------\n Due to a backward-incompatible change in the wallet database, wallets created"
      }
    ]
  },
  {
    "sha": "f2ae6f32a6e3e90d77564758383b9afbbac890b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmFlNmYzMmE2ZTNlOTBkNzc1NjQ3NTgzODNiOWFmYmJhYzg5MGI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-23T14:36:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-23T15:03:22Z"
      },
      "message": "[tests] Remove mininode periodic (half-hour) ping messages",
      "tree": {
        "sha": "6f532316b1bfcb5ddaea5fcb11ab0663d07775da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f532316b1bfcb5ddaea5fcb11ab0663d07775da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2ae6f32a6e3e90d77564758383b9afbbac890b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ae6f32a6e3e90d77564758383b9afbbac890b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ae6f32a6e3e90d77564758383b9afbbac890b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ae6f32a6e3e90d77564758383b9afbbac890b7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec59523c5915fb67db33149290dfc57049ba973d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec59523c5915fb67db33149290dfc57049ba973d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec59523c5915fb67db33149290dfc57049ba973d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c8bd21e51fffa3a607b382959d2e420df737c9fc",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ae6f32a6e3e90d77564758383b9afbbac890b7/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ae6f32a6e3e90d77564758383b9afbbac890b7/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f2ae6f32a6e3e90d77564758383b9afbbac890b7",
        "patch": "@@ -20,7 +20,6 @@\n import socket\n import struct\n import sys\n-import time\n from threading import RLock, Thread\n \n from test_framework.messages import *\n@@ -208,7 +207,6 @@ def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETW\n         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n         self.sendbuf = b\"\"\n         self.recvbuf = b\"\"\n-        self.last_sent = 0\n         self.state = \"connecting\"\n         self.network = net\n         self.cb = callback\n@@ -300,8 +298,6 @@ def got_data(self):\n             raise\n \n     def got_message(self, message):\n-        if self.last_sent + 30 * 60 < time.time():\n-            self.send_message(MESSAGEMAP[b'ping']())\n         self._log_message(\"receive\", message)\n         self.cb.deliver(self, message)\n \n@@ -353,7 +349,6 @@ def send_message(self, message, pushbuf=False):\n                     self.sendbuf = tmsg\n             else:\n                 self.sendbuf += tmsg\n-            self.last_sent = time.time()\n \n     # Class utility methods\n "
      }
    ]
  },
  {
    "sha": "a933cb14c75b9c79a02f8de8397a8eae405a264f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTMzY2IxNGM3NWI5Yzc5YTAyZjhkZTgzOTdhOGVhZTQwNWEyNjRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-23T21:06:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-23T21:10:30Z"
      },
      "message": "Merge #11603: Move RPC registration out of AppInitParameterInteraction\n\nabbd230 Move RPC registration out of AppInitParameterInteraction (Russell Yanofsky)\n\nPull request description:\n\n  Move to AppInitServers. This doesn't have any effects on bitcoin behavior. It was just strange to have this unrelated code in the middle of parameter interaction.\n\nTree-SHA512: 373e18f2ef8d21999ad36295d69326128a3086044acfc8ed537abd5497c8d3620b9832f7f6aa87c0c0939bb5e0d92be8a3c006b5997e9e6fa20334f5610c89bc",
      "tree": {
        "sha": "b44bb4bbef5bae198ab142b0b941570e0049eac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b44bb4bbef5bae198ab142b0b941570e0049eac0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a933cb14c75b9c79a02f8de8397a8eae405a264f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaFzlGAAoJEB5K7WKYbNJd9u8H/2fitFXstnRbSPRZQ/BoC+p0\n5ckXA78LJ3ooDhb96FipwTIa52MrBzXWDxUA5DnZ0TfaZhzLbVzfZR2HuBcI9Sjs\nHGq7C91mIMSLcdYYFkSnDce7N0MxaDWabvpGurPNnjdJM/lZEy3z1LOe2TljBsDH\n2cS8YtGwqOAL0LoWkiavYrLyfFSXx+0ObLl+SatFhvTzcfZt3DGfFDYHKK0H/q0w\n1qAqEJFK0hpIvL0Q4OHnyKhPOTng2IMaf6VnOBlAPHRbOTkxForGAVWKhTuo7pTh\njklfPaxT3GejNXHh1ltC+B8v7kHZ/7/CA8ABJhKIS13xudEFJYd52vp6BgwjFTI=\n=Nxrh\n-----END PGP SIGNATURE-----",
        "payload": "tree b44bb4bbef5bae198ab142b0b941570e0049eac0\nparent 84fa64598e8b7d6901c546e938fb0eeda625a8e8\nparent abbd230217df2f3b0cc25527f3c15f6f11b9852e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511471160 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511471430 +0100\n\nMerge #11603: Move RPC registration out of AppInitParameterInteraction\n\nabbd230 Move RPC registration out of AppInitParameterInteraction (Russell Yanofsky)\n\nPull request description:\n\n  Move to AppInitServers. This doesn't have any effects on bitcoin behavior. It was just strange to have this unrelated code in the middle of parameter interaction.\n\nTree-SHA512: 373e18f2ef8d21999ad36295d69326128a3086044acfc8ed537abd5497c8d3620b9832f7f6aa87c0c0939bb5e0d92be8a3c006b5997e9e6fa20334f5610c89bc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a933cb14c75b9c79a02f8de8397a8eae405a264f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a933cb14c75b9c79a02f8de8397a8eae405a264f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a933cb14c75b9c79a02f8de8397a8eae405a264f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84fa64598e8b7d6901c546e938fb0eeda625a8e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fa64598e8b7d6901c546e938fb0eeda625a8e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84fa64598e8b7d6901c546e938fb0eeda625a8e8"
      },
      {
        "sha": "abbd230217df2f3b0cc25527f3c15f6f11b9852e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbd230217df2f3b0cc25527f3c15f6f11b9852e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abbd230217df2f3b0cc25527f3c15f6f11b9852e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3cc797a17c29e9ebcd439eef3d1a681cc047ccb9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a933cb14c75b9c79a02f8de8397a8eae405a264f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a933cb14c75b9c79a02f8de8397a8eae405a264f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a933cb14c75b9c79a02f8de8397a8eae405a264f",
        "patch": "@@ -1030,11 +1030,6 @@ bool AppInitParameterInteraction()\n         fPruneMode = true;\n     }\n \n-    RegisterAllCoreRPCCommands(tableRPC);\n-#ifdef ENABLE_WALLET\n-    RegisterWalletRPC(tableRPC);\n-#endif\n-\n     nConnectTimeout = gArgs.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n@@ -1239,6 +1234,14 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n+    /* Register RPC commands regardless of -server setting so they will be\n+     * available in the GUI RPC console even if external calls are disabled.\n+     */\n+    RegisterAllCoreRPCCommands(tableRPC);\n+#ifdef ENABLE_WALLET\n+    RegisterWalletRPC(tableRPC);\n+#endif\n+\n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n      * that the server is there and will be ready later).  Warmup mode will"
      }
    ]
  },
  {
    "sha": "a89221873a3ee2451c73b41bbe2d99d36f439d31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODkyMjE4NzNhM2VlMjQ1MWM3M2I0MWJiZTJkOTlkMzZmNDM5ZDMx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-26T02:54:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-26T02:54:45Z"
      },
      "message": "Merge #11683: tests: Remove unused mininode functions {ser,deser}_int_vector(...). Remove unused imports.\n\nf522fb7c9 tests: Remove unused mininode functions deser_int_vector(f) and ser_int_vector(l) (practicalswift)\n0f3b752ec Remove unused imports (practicalswift)\n\nPull request description:\n\n  * Remove unused mininode functions `deser_int_vector(f)` and `ser_int_vector(l)`. Last use removed in 3858aabbd084b2cc4534c40a178bbcc22fb82968. Friendly ping @jnewbery :-)\n  * Remove unused imports.\n\nTree-SHA512: 840c5623eae9f929561f6e86816883c5904ec1af82fc8d5e56dee1c0b1fe22e8600c10f7358ed8b556b3aec8c65c4910f6eee30e8015a573c4df8bef91124d3e",
      "tree": {
        "sha": "4a5aa7f47cf303ca39cfa21878fa25453d896319",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a5aa7f47cf303ca39cfa21878fa25453d896319"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a89221873a3ee2451c73b41bbe2d99d36f439d31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaGiz1AAoJENLqSFDnUoslrx0P/34tbsrs9X6rTN0w8ygowEmv\nUwLFpGs3csTlz3BdAVzWxYur/8tBqFDrIeLpgttg9XKv0RH5rOuOS7dnkIPBeoOR\nS+4fpO1a0Jqmt7+lnsXXfnULKa1B8CYvVfbJFDSYaFUZn/j/C/S6TcU5U7xY91/U\nMpXIauJ/RKivtqtC35egO56C+U7p5zEuZmoqcM7BWJXM7nruagvyJDYZhPxMcTNW\n/jUomJBI1BgGgu+APLFkfBSjfHIwKpfzkOGGtmp4z9enEBKIPNXN9xkwO7OMsErb\nT4y+MXu1orC2YDN0tZLolp1h61e5bnMBJlbOheZxiV8TDTZxPxOLHexRvXwdqzp3\nJ7yJImlbjayawqbzvn9SPrq6N3mK/L2PvC6RRvUqBDUYd2t1oefxKugRha+qxb6e\nzailrnJUWJ2mu9DxR3qarzMTAmtJ2X1p0/nMNAWrSlMoIoOUqPHvsl/Dvvl83F94\nwClYKF5CcMqNIRdC3pP7zpmWogK5m9abjlN7HUMZ/5AqSEhVkxgub6HfELJy0cRM\nSe7jqvYsgTvnbqyuHDsVBPI34Ztk0hdO5ex/hTIpajZsf/e7cBL/EhznUasUEXdg\n5vygwKT5tMgxiJ9EcxFnja2LHjyrXObuy3NGaKg4Jb5XbkKR6zNLhaT4WlWXbi7z\njc0EPaSfccLL3tPVjNF/\n=FS6E\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a5aa7f47cf303ca39cfa21878fa25453d896319\nparent a933cb14c75b9c79a02f8de8397a8eae405a264f\nparent f522fb7c9c121641ce552774e3993942106ec336\nauthor MarcoFalke <falke.marco@gmail.com> 1511664874 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1511664885 -0500\n\nMerge #11683: tests: Remove unused mininode functions {ser,deser}_int_vector(...). Remove unused imports.\n\nf522fb7c9 tests: Remove unused mininode functions deser_int_vector(f) and ser_int_vector(l) (practicalswift)\n0f3b752ec Remove unused imports (practicalswift)\n\nPull request description:\n\n  * Remove unused mininode functions `deser_int_vector(f)` and `ser_int_vector(l)`. Last use removed in 3858aabbd084b2cc4534c40a178bbcc22fb82968. Friendly ping @jnewbery :-)\n  * Remove unused imports.\n\nTree-SHA512: 840c5623eae9f929561f6e86816883c5904ec1af82fc8d5e56dee1c0b1fe22e8600c10f7358ed8b556b3aec8c65c4910f6eee30e8015a573c4df8bef91124d3e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89221873a3ee2451c73b41bbe2d99d36f439d31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a89221873a3ee2451c73b41bbe2d99d36f439d31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89221873a3ee2451c73b41bbe2d99d36f439d31/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a933cb14c75b9c79a02f8de8397a8eae405a264f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a933cb14c75b9c79a02f8de8397a8eae405a264f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a933cb14c75b9c79a02f8de8397a8eae405a264f"
      },
      {
        "sha": "f522fb7c9c121641ce552774e3993942106ec336",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f522fb7c9c121641ce552774e3993942106ec336",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f522fb7c9c121641ce552774e3993942106ec336"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 1,
      "deletions": 17
    },
    "files": [
      {
        "sha": "90a3de0e0d9d00c28eb975975b66888200553d3f",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a89221873a3ee2451c73b41bbe2d99d36f439d31/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a89221873a3ee2451c73b41bbe2d99d36f439d31/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "patch": "@@ -18,7 +18,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import sync_blocks, connect_nodes, assert_equal\n+from test_framework.util import connect_nodes, assert_equal\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2"
      },
      {
        "sha": "a8ce68374c817e4c07ba0acf25526ad4eec8ca6b",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a89221873a3ee2451c73b41bbe2d99d36f439d31/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a89221873a3ee2451c73b41bbe2d99d36f439d31/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "patch": "@@ -24,7 +24,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    p2p_port,\n )\n \n class P2PFingerprintTest(BitcoinTestFramework):"
      },
      {
        "sha": "eee24910cb67d2535efbf0802100cc443c7461da",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a89221873a3ee2451c73b41bbe2d99d36f439d31/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a89221873a3ee2451c73b41bbe2d99d36f439d31/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "patch": "@@ -167,21 +167,6 @@ def ser_string_vector(l):\n     return r\n \n \n-def deser_int_vector(f):\n-    nit = deser_compact_size(f)\n-    r = []\n-    for i in range(nit):\n-        t = struct.unpack(\"<i\", f.read(4))[0]\n-        r.append(t)\n-    return r\n-\n-\n-def ser_int_vector(l):\n-    r = ser_compact_size(len(l))\n-    for i in l:\n-        r += struct.pack(\"<i\", i)\n-    return r\n-\n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n     obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))"
      }
    ]
  },
  {
    "sha": "f7f7e2cd340c088e82d09090eb275b98b34a9812",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2Y3ZTJjZDM0MGMwODhlODJkMDkwOTBlYjI3NWI5OGIzNGE5ODEy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-27T22:08:27Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-11-27T23:01:47Z"
      },
      "message": "threads: add a thread_local autoconf check",
      "tree": {
        "sha": "7e9e439fd4c9b6c61e53bcf561ae3005f9101367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e9e439fd4c9b6c61e53bcf561ae3005f9101367"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7f7e2cd340c088e82d09090eb275b98b34a9812",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7f7e2cd340c088e82d09090eb275b98b34a9812",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7f7e2cd340c088e82d09090eb275b98b34a9812",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7f7e2cd340c088e82d09090eb275b98b34a9812/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bba9bd0d9dd06f13a6b0c89181864453cab5c858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba9bd0d9dd06f13a6b0c89181864453cab5c858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bba9bd0d9dd06f13a6b0c89181864453cab5c858"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a05896edea785eb384f4b4dd278865982c5f9c1b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7f7e2cd340c088e82d09090eb275b98b34a9812/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7f7e2cd340c088e82d09090eb275b98b34a9812/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f7f7e2cd340c088e82d09090eb275b98b34a9812",
        "patch": "@@ -659,6 +659,28 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n+TEMP_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n+AC_MSG_CHECKING([for thread_local support])\n+AC_LINK_IFELSE([AC_LANG_SOURCE([\n+  #include <thread>\n+  static thread_local int foo = 0;\n+  static void run_thread() { foo++;}\n+  int main(){\n+  for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n+  return foo;\n+  }\n+  ])],\n+  [\n+    AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n+    AC_MSG_RESULT(yes)\n+  ],\n+  [\n+    AC_MSG_RESULT(no)\n+  ]\n+)\n+LDFLAGS=\"$TEMP_LDFLAGS\"\n+\n # Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>"
      },
      {
        "sha": "3f51383ea26412eb4005252831a5e0b38c5e81ca",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7f7e2cd340c088e82d09090eb275b98b34a9812/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7f7e2cd340c088e82d09090eb275b98b34a9812/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=f7f7e2cd340c088e82d09090eb275b98b34a9812",
        "patch": "@@ -11,6 +11,9 @@\n #include <stdio.h>\n \n #ifdef DEBUG_LOCKCONTENTION\n+#if !defined(HAVE_THREAD_LOCAL)\n+static_assert(false, \"thread_local is not supported\");\n+#endif\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n {\n     LogPrintf(\"LOCKCONTENTION: %s\\n\", pszName);"
      }
    ]
  },
  {
    "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmVmYzIyMGExM2FhMzQxM2Y2ZTU1ZTMxMWU4OTkxNDQ1MTA0Zjgy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T07:37:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T07:39:41Z"
      },
      "message": "Merge #11722: Switched sync.{cpp,h} to std threading primitives.\n\nf7f7e2c threads: add a thread_local autoconf check (Cory Fields)\nbba9bd0 Switched sync.{cpp,h} to std threading primitives. (Thomas Snider)\n\nPull request description:\n\n  Replaced boost threading primitives with the std equivalents.\n\nTree-SHA512: 72d10f9e48bfcf1db87e4a88bc698ef98eba0b29fe904570391b34a6ea1ffad474b7f192e70e3588a30e448f70f244eb4ddc5f24412a0bde2b564e76274160a5",
      "tree": {
        "sha": "e9513ed2b658d0bfdd89b5e79bfcee0e3a3f0f13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9513ed2b658d0bfdd89b5e79bfcee0e3a3f0f13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26efc220a13aa3413f6e55e311e8991445104f82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaHRK9AAoJEB5K7WKYbNJd68wIAJQm/6NU4yZmGaVKKB5Uc9Vm\nApVDG1gjIyLc3RGAkckz5iT1l8mOCaABPG4xuNz9vk9uvQYbiuptRx/1J/zU7ZE5\ngFZaqNRUkBL5c9YvWitFzpVXn57YYFcTueYnYHZFhuN86m+43wP4xI3/yInBFTzO\nJAm/c2TBeQmoxJnBtvDeSBYC/9312d2LB485Su30CMJ1DkfL3X8fTq95mVLuSqrw\nWJKGLUeIGKWKTioff3hl0xKCQ2yPj589D/Y14B1DHE5eNTXNrJw9R2TWb6mk4oYB\nkGaY7xvymRxqkN614JxNqVrMcTB5fORqnoaB29nAiElHtoGi0987xNVWfg+nxDs=\n=N8OC\n-----END PGP SIGNATURE-----",
        "payload": "tree e9513ed2b658d0bfdd89b5e79bfcee0e3a3f0f13\nparent a89221873a3ee2451c73b41bbe2d99d36f439d31\nparent f7f7e2cd340c088e82d09090eb275b98b34a9812\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511854670 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511854781 +0100\n\nMerge #11722: Switched sync.{cpp,h} to std threading primitives.\n\nf7f7e2c threads: add a thread_local autoconf check (Cory Fields)\nbba9bd0 Switched sync.{cpp,h} to std threading primitives. (Thomas Snider)\n\nPull request description:\n\n  Replaced boost threading primitives with the std equivalents.\n\nTree-SHA512: 72d10f9e48bfcf1db87e4a88bc698ef98eba0b29fe904570391b34a6ea1ffad474b7f192e70e3588a30e448f70f244eb4ddc5f24412a0bde2b564e76274160a5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a89221873a3ee2451c73b41bbe2d99d36f439d31"
      },
      {
        "sha": "f7f7e2cd340c088e82d09090eb275b98b34a9812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7f7e2cd340c088e82d09090eb275b98b34a9812",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7f7e2cd340c088e82d09090eb275b98b34a9812"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 40,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a05896edea785eb384f4b4dd278865982c5f9c1b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26efc220a13aa3413f6e55e311e8991445104f82/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26efc220a13aa3413f6e55e311e8991445104f82/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=26efc220a13aa3413f6e55e311e8991445104f82",
        "patch": "@@ -659,6 +659,28 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n+TEMP_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n+AC_MSG_CHECKING([for thread_local support])\n+AC_LINK_IFELSE([AC_LANG_SOURCE([\n+  #include <thread>\n+  static thread_local int foo = 0;\n+  static void run_thread() { foo++;}\n+  int main(){\n+  for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n+  return foo;\n+  }\n+  ])],\n+  [\n+    AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n+    AC_MSG_RESULT(yes)\n+  ],\n+  [\n+    AC_MSG_RESULT(no)\n+  ]\n+)\n+LDFLAGS=\"$TEMP_LDFLAGS\"\n+\n # Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>"
      },
      {
        "sha": "3f51383ea26412eb4005252831a5e0b38c5e81ca",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26efc220a13aa3413f6e55e311e8991445104f82/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26efc220a13aa3413f6e55e311e8991445104f82/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=26efc220a13aa3413f6e55e311e8991445104f82",
        "patch": "@@ -4,14 +4,16 @@\n \n #include <sync.h>\n \n+#include <set>\n #include <util.h>\n #include <utilstrencodings.h>\n \n #include <stdio.h>\n \n-#include <boost/thread.hpp>\n-\n #ifdef DEBUG_LOCKCONTENTION\n+#if !defined(HAVE_THREAD_LOCAL)\n+static_assert(false, \"thread_local is not supported\");\n+#endif\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n {\n     LogPrintf(\"LOCKCONTENTION: %s\\n\", pszName);\n@@ -45,8 +47,8 @@ struct CLockLocation {\n         return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n-    bool fTry;\n private:\n+    bool fTry;\n     std::string mutexName;\n     std::string sourceFile;\n     int sourceLine;\n@@ -67,10 +69,10 @@ struct LockData {\n \n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n-    boost::mutex dd_mutex;\n+    std::mutex dd_mutex;\n } static lockdata;\n \n-boost::thread_specific_ptr<LockStack> lockstack;\n+static thread_local std::unique_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n@@ -100,12 +102,12 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n \n static void push_lock(void* c, const CLockLocation& locklocation)\n {\n-    if (lockstack.get() == nullptr)\n+    if (!lockstack)\n         lockstack.reset(new LockStack);\n \n-    boost::unique_lock<boost::mutex> lock(lockdata.dd_mutex);\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n \n-    (*lockstack).push_back(std::make_pair(c, locklocation));\n+    lockstack->push_back(std::make_pair(c, locklocation));\n \n     for (const std::pair<void*, CLockLocation> & i : (*lockstack)) {\n         if (i.first == c)\n@@ -171,7 +173,7 @@ void DeleteLock(void* cs)\n         // We're already shutting down.\n         return;\n     }\n-    boost::unique_lock<boost::mutex> lock(lockdata.dd_mutex);\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n     std::pair<void*, void*> item = std::make_pair(cs, nullptr);\n     LockOrders::iterator it = lockdata.lockorders.lower_bound(item);\n     while (it != lockdata.lockorders.end() && it->first.first == cs) {"
      },
      {
        "sha": "3af27c65d0d4dc799646a6ac474f44b647dcaf16",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26efc220a13aa3413f6e55e311e8991445104f82/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26efc220a13aa3413f6e55e311e8991445104f82/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=26efc220a13aa3413f6e55e311e8991445104f82",
        "patch": "@@ -8,8 +8,6 @@\n \n #include <threadsafety.h>\n \n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/mutex.hpp>\n #include <condition_variable>\n #include <thread>\n #include <mutex>\n@@ -196,25 +194,23 @@ class SCOPED_LOCKABLE CCriticalBlock\n class CSemaphore\n {\n private:\n-    boost::condition_variable condition;\n-    boost::mutex mutex;\n+    std::condition_variable condition;\n+    std::mutex mutex;\n     int value;\n \n public:\n     explicit CSemaphore(int init) : value(init) {}\n \n     void wait()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        while (value < 1) {\n-            condition.wait(lock);\n-        }\n+        std::unique_lock<std::mutex> lock(mutex);\n+        condition.wait(lock, [&]() { return value >= 1; });\n         value--;\n     }\n \n     bool try_wait()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        std::lock_guard<std::mutex> lock(mutex);\n         if (value < 1)\n             return false;\n         value--;\n@@ -224,7 +220,7 @@ class CSemaphore\n     void post()\n     {\n         {\n-            boost::unique_lock<boost::mutex> lock(mutex);\n+            std::lock_guard<std::mutex> lock(mutex);\n             value++;\n         }\n         condition.notify_one();"
      },
      {
        "sha": "08de43d29ffd33c6a6e51d773fcca19e2108d018",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26efc220a13aa3413f6e55e311e8991445104f82/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26efc220a13aa3413f6e55e311e8991445104f82/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=26efc220a13aa3413f6e55e311e8991445104f82",
        "patch": "@@ -28,6 +28,7 @@\n #include <vector>\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();"
      }
    ]
  },
  {
    "sha": "d31e5c1d0f303a8cd97077d425488ed5abdf5345",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzFlNWMxZDBmMzAzYThjZDk3MDc3ZDQyNTQ4OGVkNWFiZGY1MzQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T11:08:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T11:12:05Z"
      },
      "message": "Fix shutdown in case of errors during initialization\n\nPR #10286 introduced a few steps which are not robust to early shutdown\nin initialization.\n\nStumbled upon this with #11781, not sure if there are other scenarios\nthat can trigger it, but it's harden against this in any case.",
      "tree": {
        "sha": "d679abc9eab2edd8636df68df5a143fb35cf600f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d679abc9eab2edd8636df68df5a143fb35cf600f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d31e5c1d0f303a8cd97077d425488ed5abdf5345",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31e5c1d0f303a8cd97077d425488ed5abdf5345",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d31e5c1d0f303a8cd97077d425488ed5abdf5345",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31e5c1d0f303a8cd97077d425488ed5abdf5345/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "98915e98418f6d2192884665688302b377391494",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d31e5c1d0f303a8cd97077d425488ed5abdf5345/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d31e5c1d0f303a8cd97077d425488ed5abdf5345/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d31e5c1d0f303a8cd97077d425488ed5abdf5345",
        "patch": "@@ -193,8 +193,8 @@ void Shutdown()\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n-    UnregisterValidationInterface(peerLogic.get());\n-    if(g_connman) g_connman->Stop();\n+    if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n+    if (g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n "
      },
      {
        "sha": "abbd8cc4d2be5da60c413c5a71cb07534f55294b",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d31e5c1d0f303a8cd97077d425488ed5abdf5345/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d31e5c1d0f303a8cd97077d425488ed5abdf5345/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=d31e5c1d0f303a8cd97077d425488ed5abdf5345",
        "patch": "@@ -49,7 +49,9 @@ void CMainSignals::UnregisterBackgroundSignalScheduler() {\n }\n \n void CMainSignals::FlushBackgroundCallbacks() {\n-    m_internals->m_schedulerClient.EmptyQueue();\n+    if (m_internals) {\n+        m_internals->m_schedulerClient.EmptyQueue();\n+    }\n }\n \n void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n@@ -92,6 +94,9 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n+    if (!g_signals.m_internals) {\n+        return;\n+    }\n     g_signals.m_internals->BlockChecked.disconnect_all_slots();\n     g_signals.m_internals->Broadcast.disconnect_all_slots();\n     g_signals.m_internals->Inventory.disconnect_all_slots();"
      }
    ]
  },
  {
    "sha": "4d50598569fec0a4be4adef978a593aa71e87d02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDUwNTk4NTY5ZmVjMGE0YmU0YWRlZjk3OGE1OTNhYTcxZTg3ZDAy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-23T14:47:11Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-28T17:31:31Z"
      },
      "message": "[tests] Tidy up mininode\n\nAdd docstrings and renames some methods.\nAlso removes the redundant NodeConn.readable() method override.",
      "tree": {
        "sha": "b8093e1cdcd17cc1077a72ecaa119c27c50cf94d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8093e1cdcd17cc1077a72ecaa119c27c50cf94d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d50598569fec0a4be4adef978a593aa71e87d02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50598569fec0a4be4adef978a593aa71e87d02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d50598569fec0a4be4adef978a593aa71e87d02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50598569fec0a4be4adef978a593aa71e87d02/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2ae6f32a6e3e90d77564758383b9afbbac890b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ae6f32a6e3e90d77564758383b9afbbac890b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ae6f32a6e3e90d77564758383b9afbbac890b7"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 24,
      "deletions": 11
    },
    "files": [
      {
        "sha": "838c88573572b4d9006082e79ffec81cbbb03504",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 11,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d50598569fec0a4be4adef978a593aa71e87d02/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d50598569fec0a4be4adef978a593aa71e87d02/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=4d50598569fec0a4be4adef978a593aa71e87d02",
        "patch": "@@ -76,7 +76,7 @@ def __init__(self):\n \n     # Message receiving methods\n \n-    def deliver(self, conn, message):\n+    def on_message(self, conn, message):\n         \"\"\"Receive message and dispatch message to appropriate callback.\n \n         We keep a count of how many of each message type has been received\n@@ -233,12 +233,14 @@ def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETW\n     # Connection and disconnection methods\n \n     def handle_connect(self):\n+        \"\"\"asyncore callback when a connection is opened.\"\"\"\n         if self.state != \"connected\":\n             logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n             self.state = \"connected\"\n             self.cb.on_open(self)\n \n     def handle_close(self):\n+        \"\"\"asyncore callback when a connection is closed.\"\"\"\n         logger.debug(\"Closing connection to: %s:%d\" % (self.dstaddr, self.dstport))\n         self.state = \"closed\"\n         self.recvbuf = b\"\"\n@@ -250,24 +252,27 @@ def handle_close(self):\n         self.cb.on_close(self)\n \n     def disconnect_node(self):\n-        \"\"\" Disconnect the p2p connection.\n+        \"\"\"Disconnect the p2p connection.\n \n         Called by the test logic thread. Causes the p2p connection\n         to be disconnected on the next iteration of the asyncore loop.\"\"\"\n         self.disconnect = True\n \n     # Socket read methods\n \n-    def readable(self):\n-        return True\n-\n     def handle_read(self):\n+        \"\"\"asyncore callback when data is read from the socket.\"\"\"\n         t = self.recv(8192)\n         if len(t) > 0:\n             self.recvbuf += t\n-            self.got_data()\n+            self._on_data()\n+\n+    def _on_data(self):\n+        \"\"\"Try to read P2P messages from the recv buffer.\n \n-    def got_data(self):\n+        This method reads data from the buffer in a loop. It deserializes,\n+        parses and verifies the P2P header, then passes the P2P payload to\n+        the on_message callback for processing.\"\"\"\n         try:\n             while True:\n                 if len(self.recvbuf) < 4:\n@@ -292,24 +297,27 @@ def got_data(self):\n                 f = BytesIO(msg)\n                 t = MESSAGEMAP[command]()\n                 t.deserialize(f)\n-                self.got_message(t)\n+                self._log_message(\"receive\", t)\n+                self.on_message(t)\n         except Exception as e:\n             logger.exception('Error reading message:', repr(e))\n             raise\n \n-    def got_message(self, message):\n-        self._log_message(\"receive\", message)\n-        self.cb.deliver(self, message)\n+    def on_message(self, message):\n+        \"\"\"Callback for processing a P2P payload. Calls into NodeConnCB.\"\"\"\n+        self.cb.on_message(self, message)\n \n     # Socket write methods\n \n     def writable(self):\n+        \"\"\"asyncore method to determine whether the handle_write() callback should be called on the next loop.\"\"\"\n         with mininode_lock:\n             pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n         return (length > 0 or pre_connection)\n \n     def handle_write(self):\n+        \"\"\"asyncore callback when data should be written to the socket.\"\"\"\n         with mininode_lock:\n             # asyncore does not expose socket connection, only the first read/write\n             # event, thus we must check connection manually here to know when we\n@@ -327,6 +335,10 @@ def handle_write(self):\n             self.sendbuf = self.sendbuf[sent:]\n \n     def send_message(self, message, pushbuf=False):\n+        \"\"\"Send a P2P message over the socket.\n+\n+        This method takes a P2P payload, builds the P2P header and adds\n+        the message to the send buffer to be sent over the socket.\"\"\"\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n         self._log_message(\"send\", message)\n@@ -353,6 +365,7 @@ def send_message(self, message, pushbuf=False):\n     # Class utility methods\n \n     def _log_message(self, direction, msg):\n+        \"\"\"Logs a message being sent or received over the connection.\"\"\"\n         if direction == \"send\":\n             log_message = \"Send message to \"\n         elif direction == \"receive\":"
      }
    ]
  },
  {
    "sha": "e30d404385f46811eeeea05c55ef786bc4adcb77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzBkNDA0Mzg1ZjQ2ODExZWVlZWEwNWM1NWVmNzg2YmM0YWRjYjc3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-23T15:17:50Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-28T17:31:37Z"
      },
      "message": "[tests] Move only: move NodeConnCB below NodeConn\n\nThis is required since NodeConnCB will inherit from NodeConn\nafter the next commit.",
      "tree": {
        "sha": "7f4d783580f7c89d697007b28aed4f3640cec53a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f4d783580f7c89d697007b28aed4f3640cec53a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30d404385f46811eeeea05c55ef786bc4adcb77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d404385f46811eeeea05c55ef786bc4adcb77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30d404385f46811eeeea05c55ef786bc4adcb77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d404385f46811eeeea05c55ef786bc4adcb77/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d50598569fec0a4be4adef978a593aa71e87d02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50598569fec0a4be4adef978a593aa71e87d02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d50598569fec0a4be4adef978a593aa71e87d02"
      }
    ],
    "stats": {
      "total": 277,
      "additions": 139,
      "deletions": 138
    },
    "files": [
      {
        "sha": "2b888949f4b662704bf1547feae107b742b9991b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 139,
        "deletions": 138,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30d404385f46811eeeea05c55ef786bc4adcb77/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30d404385f46811eeeea05c55ef786bc4adcb77/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=e30d404385f46811eeeea05c55ef786bc4adcb77",
        "patch": "@@ -56,144 +56,6 @@\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n }\n \n-class NodeConnCB():\n-    \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n-\n-    Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\"\"\"\n-    def __init__(self):\n-        # Track whether we have a P2P connection open to the node\n-        self.connected = False\n-        self.connection = None\n-\n-        # Track number of messages of each type received and the most recent\n-        # message of each type\n-        self.message_count = defaultdict(int)\n-        self.last_message = {}\n-\n-        # A count of the number of ping messages we've sent to the node\n-        self.ping_counter = 1\n-\n-    # Message receiving methods\n-\n-    def on_message(self, conn, message):\n-        \"\"\"Receive message and dispatch message to appropriate callback.\n-\n-        We keep a count of how many of each message type has been received\n-        and the most recent message of each type.\"\"\"\n-        with mininode_lock:\n-            try:\n-                command = message.command.decode('ascii')\n-                self.message_count[command] += 1\n-                self.last_message[command] = message\n-                getattr(self, 'on_' + command)(conn, message)\n-            except:\n-                print(\"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0]))\n-                raise\n-\n-    # Callback methods. Can be overridden by subclasses in individual test\n-    # cases to provide custom message handling behaviour.\n-\n-    def on_open(self, conn):\n-        self.connected = True\n-\n-    def on_close(self, conn):\n-        self.connected = False\n-        self.connection = None\n-\n-    def on_addr(self, conn, message): pass\n-    def on_block(self, conn, message): pass\n-    def on_blocktxn(self, conn, message): pass\n-    def on_cmpctblock(self, conn, message): pass\n-    def on_feefilter(self, conn, message): pass\n-    def on_getaddr(self, conn, message): pass\n-    def on_getblocks(self, conn, message): pass\n-    def on_getblocktxn(self, conn, message): pass\n-    def on_getdata(self, conn, message): pass\n-    def on_getheaders(self, conn, message): pass\n-    def on_headers(self, conn, message): pass\n-    def on_mempool(self, conn): pass\n-    def on_pong(self, conn, message): pass\n-    def on_reject(self, conn, message): pass\n-    def on_sendcmpct(self, conn, message): pass\n-    def on_sendheaders(self, conn, message): pass\n-    def on_tx(self, conn, message): pass\n-\n-    def on_inv(self, conn, message):\n-        want = msg_getdata()\n-        for i in message.inv:\n-            if i.type != 0:\n-                want.inv.append(i)\n-        if len(want.inv):\n-            conn.send_message(want)\n-\n-    def on_ping(self, conn, message):\n-        conn.send_message(msg_pong(message.nonce))\n-\n-    def on_verack(self, conn, message):\n-        self.verack_received = True\n-\n-    def on_version(self, conn, message):\n-        assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n-        conn.send_message(msg_verack())\n-        conn.nServices = message.nServices\n-\n-    # Connection helper methods\n-\n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n-    def wait_for_disconnect(self, timeout=60):\n-        test_function = lambda: not self.connected\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    # Message receiving helper methods\n-\n-    def wait_for_block(self, blockhash, timeout=60):\n-        test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_getdata(self, timeout=60):\n-        test_function = lambda: self.last_message.get(\"getdata\")\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_getheaders(self, timeout=60):\n-        test_function = lambda: self.last_message.get(\"getheaders\")\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_inv(self, expected_inv, timeout=60):\n-        \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n-        if len(expected_inv) > 1:\n-            raise NotImplementedError(\"wait_for_inv() will only verify the first inv object\")\n-        test_function = lambda: self.last_message.get(\"inv\") and \\\n-                                self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n-                                self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_verack(self, timeout=60):\n-        test_function = lambda: self.message_count[\"verack\"]\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    # Message sending helper functions\n-\n-    def send_message(self, message):\n-        if self.connection:\n-            self.connection.send_message(message)\n-        else:\n-            logger.error(\"Cannot send message. No connection to node!\")\n-\n-    def send_and_ping(self, message):\n-        self.send_message(message)\n-        self.sync_with_ping()\n-\n-    # Sync up with the node\n-    def sync_with_ping(self, timeout=60):\n-        self.send_message(msg_ping(nonce=self.ping_counter))\n-        test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-        self.ping_counter += 1\n-\n class NodeConn(asyncore.dispatcher):\n     \"\"\"The actual NodeConn class\n \n@@ -376,6 +238,145 @@ def _log_message(self, direction, msg):\n         logger.debug(log_message)\n \n \n+class NodeConnCB():\n+    \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n+\n+    Individual testcases should subclass this and override the on_* methods\n+    if they want to alter message handling behaviour.\"\"\"\n+    def __init__(self):\n+        # Track whether we have a P2P connection open to the node\n+        self.connected = False\n+        self.connection = None\n+\n+        # Track number of messages of each type received and the most recent\n+        # message of each type\n+        self.message_count = defaultdict(int)\n+        self.last_message = {}\n+\n+        # A count of the number of ping messages we've sent to the node\n+        self.ping_counter = 1\n+\n+    # Message receiving methods\n+\n+    def on_message(self, conn, message):\n+        \"\"\"Receive message and dispatch message to appropriate callback.\n+\n+        We keep a count of how many of each message type has been received\n+        and the most recent message of each type.\"\"\"\n+        with mininode_lock:\n+            try:\n+                command = message.command.decode('ascii')\n+                self.message_count[command] += 1\n+                self.last_message[command] = message\n+                getattr(self, 'on_' + command)(conn, message)\n+            except:\n+                print(\"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0]))\n+                raise\n+\n+    # Callback methods. Can be overridden by subclasses in individual test\n+    # cases to provide custom message handling behaviour.\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_close(self, conn):\n+        self.connected = False\n+        self.connection = None\n+\n+    def on_addr(self, conn, message): pass\n+    def on_block(self, conn, message): pass\n+    def on_blocktxn(self, conn, message): pass\n+    def on_cmpctblock(self, conn, message): pass\n+    def on_feefilter(self, conn, message): pass\n+    def on_getaddr(self, conn, message): pass\n+    def on_getblocks(self, conn, message): pass\n+    def on_getblocktxn(self, conn, message): pass\n+    def on_getdata(self, conn, message): pass\n+    def on_getheaders(self, conn, message): pass\n+    def on_headers(self, conn, message): pass\n+    def on_mempool(self, conn): pass\n+    def on_pong(self, conn, message): pass\n+    def on_reject(self, conn, message): pass\n+    def on_sendcmpct(self, conn, message): pass\n+    def on_sendheaders(self, conn, message): pass\n+    def on_tx(self, conn, message): pass\n+\n+    def on_inv(self, conn, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            if i.type != 0:\n+                want.inv.append(i)\n+        if len(want.inv):\n+            conn.send_message(want)\n+\n+    def on_ping(self, conn, message):\n+        conn.send_message(msg_pong(message.nonce))\n+\n+    def on_verack(self, conn, message):\n+        self.verack_received = True\n+\n+    def on_version(self, conn, message):\n+        assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n+        conn.send_message(msg_verack())\n+        conn.nServices = message.nServices\n+\n+    # Connection helper methods\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def wait_for_disconnect(self, timeout=60):\n+        test_function = lambda: not self.connected\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    # Message receiving helper methods\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_message.get(\"getdata\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_getheaders(self, timeout=60):\n+        test_function = lambda: self.last_message.get(\"getheaders\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n+        if len(expected_inv) > 1:\n+            raise NotImplementedError(\"wait_for_inv() will only verify the first inv object\")\n+        test_function = lambda: self.last_message.get(\"inv\") and \\\n+                                self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n+                                self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_verack(self, timeout=60):\n+        test_function = lambda: self.message_count[\"verack\"]\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    # Message sending helper functions\n+\n+    def send_message(self, message):\n+        if self.connection:\n+            self.connection.send_message(message)\n+        else:\n+            logger.error(\"Cannot send message. No connection to node!\")\n+\n+    def send_and_ping(self, message):\n+        self.send_message(message)\n+        self.sync_with_ping()\n+\n+    # Sync up with the node\n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.ping_counter += 1\n+\n+\n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when\n # using select)"
      }
    ]
  },
  {
    "sha": "dad596fc37c8733ab806a0aa4224ac437d37aee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWQ1OTZmYzM3Yzg3MzNhYjgwNmEwYWE0MjI0YWM0MzdkMzdhZWU1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-17T20:01:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-28T17:44:16Z"
      },
      "message": "[tests] Make NodeConnCB a subclass of NodeConn\n\nThis makes NodeConnCB a subclass of NodeConn, and\nremoves the need for the client code to know\nanything about the implementation details of NodeConnCB.\n\nNodeConn can now be swapped out for any other implementation\nof a low-level connection without changing client code.",
      "tree": {
        "sha": "bf014d46fb9d4e0ae865756c422000914dc9c314",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf014d46fb9d4e0ae865756c422000914dc9c314"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dad596fc37c8733ab806a0aa4224ac437d37aee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad596fc37c8733ab806a0aa4224ac437d37aee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dad596fc37c8733ab806a0aa4224ac437d37aee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad596fc37c8733ab806a0aa4224ac437d37aee5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e30d404385f46811eeeea05c55ef786bc4adcb77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d404385f46811eeeea05c55ef786bc4adcb77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e30d404385f46811eeeea05c55ef786bc4adcb77"
      }
    ],
    "stats": {
      "total": 394,
      "additions": 197,
      "deletions": 197
    },
    "files": [
      {
        "sha": "72da955641b2627396f9ed3e45dea3628322fc24",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -67,7 +67,7 @@ def setup_network(self):\n     def send_blocks_until_disconnected(self, p2p_conn):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n         for i in range(len(self.blocks)):\n-            if not p2p_conn.connection:\n+            if p2p_conn.state != \"connected\":\n                 break\n             try:\n                 p2p_conn.send_message(msg_block(self.blocks[i]))"
      },
      {
        "sha": "ec4d1d93652964684a58d1dfd15b29d4f73f5f29",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -246,7 +246,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)\n         NetworkThread().start()\n-        self.test.test_nodes[0].wait_for_verack()\n+        self.test.p2p_connections[0].wait_for_verack()\n \n     def get_tests(self):\n         for test in itertools.chain("
      },
      {
        "sha": "54cabee51c24f4e7dbf3f0fb3c9b000ab3c63904",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -49,14 +49,14 @@ def __init__(self):\n         # Stores a dictionary of all blocks received\n         self.block_receive_map = defaultdict(int)\n \n-    def on_block(self, conn, message):\n+    def on_block(self, message):\n         \"\"\"Override the standard on_block callback\n \n         Store the hash of a received block in the dictionary.\"\"\"\n         message.block.calc_sha256()\n         self.block_receive_map[message.block.sha256] += 1\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         \"\"\"Override the standard on_inv callback\"\"\"\n         pass\n "
      },
      {
        "sha": "beb0d599d2306b2376bbd1f80699d9e32f53b16b",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -22,10 +22,10 @@ def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         pass\n \n-    def on_block(self, conn, message):\n+    def on_block(self, message):\n         message.block.calc_sha256()\n         self.block_receive_map[message.block.sha256] += 1\n "
      },
      {
        "sha": "5aba1db8730d925abf8a95c9f3ba0be65602cdfa",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -25,21 +25,21 @@ def __init__(self):\n         # so we can eg wait until a particular block is announced.\n         self.announced_blockhashes = set()\n \n-    def on_sendcmpct(self, conn, message):\n+    def on_sendcmpct(self, message):\n         self.last_sendcmpct.append(message)\n \n-    def on_cmpctblock(self, conn, message):\n+    def on_cmpctblock(self, message):\n         self.block_announced = True\n         self.last_message[\"cmpctblock\"].header_and_shortids.header.calc_sha256()\n         self.announced_blockhashes.add(self.last_message[\"cmpctblock\"].header_and_shortids.header.sha256)\n \n-    def on_headers(self, conn, message):\n+    def on_headers(self, message):\n         self.block_announced = True\n         for x in self.last_message[\"headers\"].headers:\n             x.calc_sha256()\n             self.announced_blockhashes.add(x.sha256)\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         for x in self.last_message[\"inv\"].inv:\n             if x.type == 2:\n                 self.block_announced = True\n@@ -60,7 +60,7 @@ def get_headers(self, locator, hashstop):\n         msg = msg_getheaders()\n         msg.locator.vHave = locator\n         msg.hashstop = hashstop\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n@@ -86,7 +86,7 @@ def send_await_disconnect(self, message, timeout=30):\n         This is used when we want to send a message into the node that we expect\n         will get us disconnected, eg an invalid block.\"\"\"\n         self.send_message(message)\n-        wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n+        wait_until(lambda: self.state != \"connected\", timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "0ce3c3f42938d11bca9f5d69907093764215c2c6",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -27,7 +27,7 @@ def __init__(self):\n         super().__init__()\n         self.txinvs = []\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         for i in message.inv:\n             if (i.type == 1):\n                 self.txinvs.append(hashToHex(i.hash))"
      },
      {
        "sha": "3634f3836dc75b5788b009b258af0699b9bf1ffc",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -30,43 +30,42 @@ def bad_message(self, message):\n         self.unexpected_msg = True\n         self.log.info(\"should not have received message: %s\" % message.command)\n \n-    def on_open(self, conn):\n-        self.connected = True\n+    def on_open(self):\n         self.ever_connected = True\n \n-    def on_version(self, conn, message): self.bad_message(message)\n-    def on_verack(self, conn, message): self.bad_message(message)\n-    def on_reject(self, conn, message): self.bad_message(message)\n-    def on_inv(self, conn, message): self.bad_message(message)\n-    def on_addr(self, conn, message): self.bad_message(message)\n-    def on_getdata(self, conn, message): self.bad_message(message)\n-    def on_getblocks(self, conn, message): self.bad_message(message)\n-    def on_tx(self, conn, message): self.bad_message(message)\n-    def on_block(self, conn, message): self.bad_message(message)\n-    def on_getaddr(self, conn, message): self.bad_message(message)\n-    def on_headers(self, conn, message): self.bad_message(message)\n-    def on_getheaders(self, conn, message): self.bad_message(message)\n-    def on_ping(self, conn, message): self.bad_message(message)\n-    def on_mempool(self, conn): self.bad_message(message)\n-    def on_pong(self, conn, message): self.bad_message(message)\n-    def on_feefilter(self, conn, message): self.bad_message(message)\n-    def on_sendheaders(self, conn, message): self.bad_message(message)\n-    def on_sendcmpct(self, conn, message): self.bad_message(message)\n-    def on_cmpctblock(self, conn, message): self.bad_message(message)\n-    def on_getblocktxn(self, conn, message): self.bad_message(message)\n-    def on_blocktxn(self, conn, message): self.bad_message(message)\n+    def on_version(self, message): self.bad_message(message)\n+    def on_verack(self, message): self.bad_message(message)\n+    def on_reject(self, message): self.bad_message(message)\n+    def on_inv(self, message): self.bad_message(message)\n+    def on_addr(self, message): self.bad_message(message)\n+    def on_getdata(self, message): self.bad_message(message)\n+    def on_getblocks(self, message): self.bad_message(message)\n+    def on_tx(self, message): self.bad_message(message)\n+    def on_block(self, message): self.bad_message(message)\n+    def on_getaddr(self, message): self.bad_message(message)\n+    def on_headers(self, message): self.bad_message(message)\n+    def on_getheaders(self, message): self.bad_message(message)\n+    def on_ping(self, message): self.bad_message(message)\n+    def on_mempool(self, message): self.bad_message(message)\n+    def on_pong(self, message): self.bad_message(message)\n+    def on_feefilter(self, message): self.bad_message(message)\n+    def on_sendheaders(self, message): self.bad_message(message)\n+    def on_sendcmpct(self, message): self.bad_message(message)\n+    def on_cmpctblock(self, message): self.bad_message(message)\n+    def on_getblocktxn(self, message): self.bad_message(message)\n+    def on_blocktxn(self, message): self.bad_message(message)\n \n # Node that never sends a version. We'll use this to send a bunch of messages\n # anyway, and eventually get disconnected.\n class CNodeNoVersionBan(CLazyNode):\n     # send a bunch of veracks without sending a message. This should get us disconnected.\n     # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n-    def on_open(self, conn):\n-        super().on_open(conn)\n+    def on_open(self):\n+        super().on_open()\n         for i in range(banscore):\n             self.send_message(msg_verack())\n \n-    def on_reject(self, conn, message): pass\n+    def on_reject(self, message): pass\n \n # Node that never sends a version. This one just sits idle and hopes to receive\n # any message (it shouldn't!)\n@@ -80,15 +79,15 @@ def __init__(self):\n         self.version_received = False\n         super().__init__()\n \n-    def on_reject(self, conn, message): pass\n-    def on_verack(self, conn, message): pass\n+    def on_reject(self, message): pass\n+    def on_verack(self, message): pass\n     # When version is received, don't reply with a verack. Instead, see if the\n     # node will give us a message that it shouldn't. This is not an exhaustive\n     # list!\n-    def on_version(self, conn, message):\n+    def on_version(self, message):\n         self.version_received = True\n-        conn.send_message(msg_ping())\n-        conn.send_message(msg_getaddr())\n+        self.send_message(msg_ping())\n+        self.send_message(msg_getaddr())\n \n class P2PLeakTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -119,11 +118,11 @@ def run_test(self):\n         time.sleep(5)\n \n         #This node should have been banned\n-        assert not no_version_bannode.connected\n+        assert no_version_bannode.state != \"connected\"\n \n         # These nodes should have been disconnected\n-        assert not unsupported_service_bit5_node.connected\n-        assert not unsupported_service_bit7_node.connected\n+        assert unsupported_service_bit5_node.state != \"connected\"\n+        assert unsupported_service_bit7_node.state != \"connected\"\n \n         self.nodes[0].disconnect_p2ps()\n "
      },
      {
        "sha": "5776d99f6e1bd1f13b122f7abe9ecaff661b42cb",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -64,7 +64,7 @@ def __init__(self):\n         super().__init__()\n         self.getdataset = set()\n \n-    def on_getdata(self, conn, message):\n+    def on_getdata(self, message):\n         for inv in message.inv:\n             self.getdataset.add(inv.hash)\n \n@@ -148,7 +148,7 @@ def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n     ''' Individual tests '''\n     def test_witness_services(self):\n         self.log.info(\"Verifying NODE_WITNESS service bit\")\n-        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+        assert((self.test_node.nServices & NODE_WITNESS) != 0)\n \n \n     # See if sending a regular transaction works, and create a utxo\n@@ -1876,11 +1876,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(p2p_conn=TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(p2p_conn=TestNode(), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(p2p_conn=TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "21ae29eb6a0c9b9c3be56b725f4fa3e8b228288d",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -28,7 +28,7 @@\n from test_framework.util import *\n \n class TestNode(NodeConnCB):\n-    def on_version(self, conn, message):\n+    def on_version(self, message):\n         # Don't send a verack in response\n         pass\n "
      },
      {
        "sha": "a6265f6d9cf4c25553fb7de6440b99fa4adb65e4",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -24,7 +24,7 @@\n VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n \n class TestNode(NodeConnCB):\n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         pass\n \n class VersionBitsWarningTest(BitcoinTestFramework):"
      },
      {
        "sha": "b589d0e8a56258a132d97cc89cbba5ad5b4d0624",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -113,6 +113,7 @@\n class BaseNode(NodeConnCB):\n     def __init__(self):\n         super().__init__()\n+\n         self.block_announced = False\n         self.last_blockhash_announced = None\n \n@@ -121,18 +122,18 @@ def send_get_data(self, block_hashes):\n         msg = msg_getdata()\n         for x in block_hashes:\n             msg.inv.append(CInv(2, x))\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_get_headers(self, locator, hashstop):\n         msg = msg_getheaders()\n         msg.locator.vHave = locator\n         msg.hashstop = hashstop\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_block_inv(self, blockhash):\n         msg = msg_inv()\n         msg.inv = [CInv(2, blockhash)]\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n@@ -155,11 +156,11 @@ def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         self.block_announced = True\n         self.last_blockhash_announced = message.inv[-1].hash\n \n-    def on_headers(self, conn, message):\n+    def on_headers(self, message):\n         if len(message.headers):\n             self.block_announced = True\n             message.headers[-1].calc_sha256()"
      },
      {
        "sha": "2f64fba7536d877a9e2eb88af39076d4911d99ff",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 58,
        "deletions": 67,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -43,7 +43,6 @@ class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()\n-        self.conn = None\n         self.bestblockhash = None\n         self.block_store = block_store\n         self.block_request_map = {}\n@@ -58,74 +57,71 @@ def __init__(self, block_store, tx_store):\n         self.lastInv = []\n         self.closed = False\n \n-    def on_close(self, conn):\n+    def on_close(self):\n         self.closed = True\n \n-    def add_connection(self, conn):\n-        self.conn = conn\n-\n-    def on_headers(self, conn, message):\n+    def on_headers(self, message):\n         if len(message.headers) > 0:\n             best_header = message.headers[-1]\n             best_header.calc_sha256()\n             self.bestblockhash = best_header.sha256\n \n-    def on_getheaders(self, conn, message):\n+    def on_getheaders(self, message):\n         response = self.block_store.headers_for(message.locator, message.hashstop)\n         if response is not None:\n-            conn.send_message(response)\n+            self.send_message(response)\n \n-    def on_getdata(self, conn, message):\n-        [conn.send_message(r) for r in self.block_store.get_blocks(message.inv)]\n-        [conn.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n+    def on_getdata(self, message):\n+        [self.send_message(r) for r in self.block_store.get_blocks(message.inv)]\n+        [self.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n \n         for i in message.inv:\n             if i.type == 1 or i.type == 1 | (1 << 30): # MSG_TX or MSG_WITNESS_TX\n                 self.tx_request_map[i.hash] = True\n             elif i.type == 2 or i.type == 2 | (1 << 30): # MSG_BLOCK or MSG_WITNESS_BLOCK\n                 self.block_request_map[i.hash] = True\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         self.lastInv = [x.hash for x in message.inv]\n \n-    def on_pong(self, conn, message):\n+    def on_pong(self, message):\n         try:\n             del self.pingMap[message.nonce]\n         except KeyError:\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n-    def on_reject(self, conn, message):\n+    def on_reject(self, message):\n         if message.message == b'tx':\n             self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n         if message.message == b'block':\n             self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n \n     def send_inv(self, obj):\n         mtype = 2 if isinstance(obj, CBlock) else 1\n-        self.conn.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n+        self.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n \n     def send_getheaders(self):\n         # We ask for headers from their last tip.\n         m = msg_getheaders()\n         m.locator = self.block_store.get_locator(self.bestblockhash)\n-        self.conn.send_message(m)\n+        self.send_message(m)\n \n     def send_header(self, header):\n         m = msg_headers()\n         m.headers.append(header)\n-        self.conn.send_message(m)\n+        self.send_message(m)\n \n     # This assumes BIP31\n     def send_ping(self, nonce):\n         self.pingMap[nonce] = True\n-        self.conn.send_message(msg_ping(nonce))\n+        self.send_message(msg_ping(nonce))\n \n     def received_ping_response(self, nonce):\n         return nonce not in self.pingMap\n \n     def send_mempool(self):\n         self.lastInv = []\n-        self.conn.send_message(msg_mempool())\n+        self.send_message(msg_mempool())\n \n # TestInstance:\n #\n@@ -166,37 +162,32 @@ class TestManager():\n \n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen\n-        self.connections    = []\n-        self.test_nodes     = []\n+        self.p2p_connections= []\n         self.block_store    = BlockStore(datadir)\n         self.tx_store       = TxStore(datadir)\n         self.ping_counter   = 1\n \n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            test_node = TestNode(self.block_store, self.tx_store)\n-            self.test_nodes.append(test_node)\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), test_node))\n-            # Make sure the TestNode (callback class) has a reference to its\n-            # associated NodeConn\n-            test_node.add_connection(self.connections[-1])\n+            node = TestNode(self.block_store, self.tx_store)\n+            node.peer_connect('127.0.0.1', p2p_port(i))\n+            self.p2p_connections.append(node)\n \n     def clear_all_connections(self):\n-        self.connections    = []\n-        self.test_nodes     = []\n+        self.p2p_connections = []\n \n     def wait_for_disconnections(self):\n         def disconnected():\n-            return all(node.closed for node in self.test_nodes)\n+            return all(node.closed for node in self.p2p_connections)\n         wait_until(disconnected, timeout=10, lock=mininode_lock)\n \n     def wait_for_verack(self):\n-        return all(node.wait_for_verack() for node in self.test_nodes)\n+        return all(node.wait_for_verack() for node in self.p2p_connections)\n \n     def wait_for_pings(self, counter):\n         def received_pongs():\n-            return all(node.received_ping_response(counter) for node in self.test_nodes)\n+            return all(node.received_ping_response(counter) for node in self.p2p_connections)\n         wait_until(received_pongs, lock=mininode_lock)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n@@ -206,17 +197,17 @@ def sync_blocks(self, blockhash, num_blocks):\n         def blocks_requested():\n             return all(\n                 blockhash in node.block_request_map and node.block_request_map[blockhash]\n-                for node in self.test_nodes\n+                for node in self.p2p_connections\n             )\n \n         # --> error if not requested\n         wait_until(blocks_requested, attempts=20*num_blocks, lock=mininode_lock)\n \n         # Send getheaders message\n-        [ c.cb.send_getheaders() for c in self.connections ]\n+        [ c.send_getheaders() for c in self.p2p_connections ]\n \n         # Send ping and wait for response -- synchronization hack\n-        [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+        [ c.send_ping(self.ping_counter) for c in self.p2p_connections ]\n         self.wait_for_pings(self.ping_counter)\n         self.ping_counter += 1\n \n@@ -226,42 +217,42 @@ def sync_transaction(self, txhash, num_events):\n         def transaction_requested():\n             return all(\n                 txhash in node.tx_request_map and node.tx_request_map[txhash]\n-                for node in self.test_nodes\n+                for node in self.p2p_connections\n             )\n \n         # --> error if not requested\n         wait_until(transaction_requested, attempts=20*num_events, lock=mininode_lock)\n \n         # Get the mempool\n-        [ c.cb.send_mempool() for c in self.connections ]\n+        [ c.send_mempool() for c in self.p2p_connections ]\n \n         # Send ping and wait for response -- synchronization hack\n-        [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+        [ c.send_ping(self.ping_counter) for c in self.p2p_connections ]\n         self.wait_for_pings(self.ping_counter)\n         self.ping_counter += 1\n \n         # Sort inv responses from each node\n         with mininode_lock:\n-            [ c.cb.lastInv.sort() for c in self.connections ]\n+            [ c.lastInv.sort() for c in self.p2p_connections ]\n \n     # Verify that the tip of each connection all agree with each other, and\n     # with the expected outcome (if given)\n     def check_results(self, blockhash, outcome):\n         with mininode_lock:\n-            for c in self.connections:\n+            for c in self.p2p_connections:\n                 if outcome is None:\n-                    if c.cb.bestblockhash != self.connections[0].cb.bestblockhash:\n+                    if c.bestblockhash != self.p2p_connections[0].bestblockhash:\n                         return False\n                 elif isinstance(outcome, RejectResult): # Check that block was rejected w/ code\n-                    if c.cb.bestblockhash == blockhash:\n+                    if c.bestblockhash == blockhash:\n                         return False\n-                    if blockhash not in c.cb.block_reject_map:\n+                    if blockhash not in c.block_reject_map:\n                         logger.error('Block not in reject map: %064x' % (blockhash))\n                         return False\n-                    if not outcome.match(c.cb.block_reject_map[blockhash]):\n-                        logger.error('Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash))\n+                    if not outcome.match(c.block_reject_map[blockhash]):\n+                        logger.error('Block rejected with %s instead of expected %s: %064x' % (c.block_reject_map[blockhash], outcome, blockhash))\n                         return False\n-                elif ((c.cb.bestblockhash == blockhash) != outcome):\n+                elif ((c.bestblockhash == blockhash) != outcome):\n                     return False\n             return True\n \n@@ -273,21 +264,21 @@ def check_results(self, blockhash, outcome):\n     # a particular tx's existence in the mempool is the same across all nodes.\n     def check_mempool(self, txhash, outcome):\n         with mininode_lock:\n-            for c in self.connections:\n+            for c in self.p2p_connections:\n                 if outcome is None:\n                     # Make sure the mempools agree with each other\n-                    if c.cb.lastInv != self.connections[0].cb.lastInv:\n+                    if c.lastInv != self.p2p_connections[0].lastInv:\n                         return False\n                 elif isinstance(outcome, RejectResult): # Check that tx was rejected w/ code\n-                    if txhash in c.cb.lastInv:\n+                    if txhash in c.lastInv:\n                         return False\n-                    if txhash not in c.cb.tx_reject_map:\n+                    if txhash not in c.tx_reject_map:\n                         logger.error('Tx not in reject map: %064x' % (txhash))\n                         return False\n-                    if not outcome.match(c.cb.tx_reject_map[txhash]):\n-                        logger.error('Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash))\n+                    if not outcome.match(c.tx_reject_map[txhash]):\n+                        logger.error('Tx rejected with %s instead of expected %s: %064x' % (c.tx_reject_map[txhash], outcome, txhash))\n                         return False\n-                elif ((txhash in c.cb.lastInv) != outcome):\n+                elif ((txhash in c.lastInv) != outcome):\n                     return False\n             return True\n \n@@ -332,25 +323,25 @@ def run(self):\n                         first_block_with_hash = False\n                     with mininode_lock:\n                         self.block_store.add_block(block)\n-                        for c in self.connections:\n-                            if first_block_with_hash and block.sha256 in c.cb.block_request_map and c.cb.block_request_map[block.sha256] == True:\n+                        for c in self.p2p_connections:\n+                            if first_block_with_hash and block.sha256 in c.block_request_map and c.block_request_map[block.sha256] == True:\n                                 # There was a previous request for this block hash\n                                 # Most likely, we delivered a header for this block\n                                 # but never had the block to respond to the getdata\n                                 c.send_message(msg_block(block))\n                             else:\n-                                c.cb.block_request_map[block.sha256] = False\n+                                c.block_request_map[block.sha256] = False\n                     # Either send inv's to each node and sync, or add\n                     # to invqueue for later inv'ing.\n                     if (test_instance.sync_every_block):\n                         # if we expect success, send inv and sync every block\n                         # if we expect failure, just push the block and see what happens.\n                         if outcome == True:\n-                            [ c.cb.send_inv(block) for c in self.connections ]\n+                            [ c.send_inv(block) for c in self.p2p_connections ]\n                             self.sync_blocks(block.sha256, 1)\n                         else:\n-                            [ c.send_message(msg_block(block)) for c in self.connections ]\n-                            [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+                            [ c.send_message(msg_block(block)) for c in self.p2p_connections ]\n+                            [ c.send_ping(self.ping_counter) for c in self.p2p_connections ]\n                             self.wait_for_pings(self.ping_counter)\n                             self.ping_counter += 1\n                         if (not self.check_results(tip, outcome)):\n@@ -360,7 +351,7 @@ def run(self):\n                 elif isinstance(b_or_t, CBlockHeader):\n                     block_header = b_or_t\n                     self.block_store.add_header(block_header)\n-                    [ c.cb.send_header(block_header) for c in self.connections ]\n+                    [ c.send_header(block_header) for c in self.p2p_connections ]\n \n                 else:  # Tx test runner\n                     assert(isinstance(b_or_t, CTransaction))\n@@ -369,38 +360,38 @@ def run(self):\n                     # Add to shared tx store and clear map entry\n                     with mininode_lock:\n                         self.tx_store.add_transaction(tx)\n-                        for c in self.connections:\n-                            c.cb.tx_request_map[tx.sha256] = False\n+                        for c in self.p2p_connections:\n+                            c.tx_request_map[tx.sha256] = False\n                     # Again, either inv to all nodes or save for later\n                     if (test_instance.sync_every_tx):\n-                        [ c.cb.send_inv(tx) for c in self.connections ]\n+                        [ c.send_inv(tx) for c in self.p2p_connections ]\n                         self.sync_transaction(tx.sha256, 1)\n                         if (not self.check_mempool(tx.sha256, outcome)):\n                             raise AssertionError(\"Test failed at test %d\" % test_number)\n                     else:\n                         invqueue.append(CInv(1, tx.sha256))\n                 # Ensure we're not overflowing the inv queue\n                 if len(invqueue) == MAX_INV_SZ:\n-                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.p2p_connections ]\n                     invqueue = []\n \n             # Do final sync if we weren't syncing on every block or every tx.\n             if (not test_instance.sync_every_block and block is not None):\n                 if len(invqueue) > 0:\n-                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.p2p_connections ]\n                     invqueue = []\n                 self.sync_blocks(block.sha256, len(test_instance.blocks_and_transactions))\n                 if (not self.check_results(tip, block_outcome)):\n                     raise AssertionError(\"Block test failed at test %d\" % test_number)\n             if (not test_instance.sync_every_tx and tx is not None):\n                 if len(invqueue) > 0:\n-                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.p2p_connections ]\n                     invqueue = []\n                 self.sync_transaction(tx.sha256, len(test_instance.blocks_and_transactions))\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-        [ c.disconnect_node() for c in self.connections ]\n+        [ c.disconnect_node() for c in self.p2p_connections ]\n         self.wait_for_disconnections()\n         self.block_store.close()\n         self.tx_store.close()"
      },
      {
        "sha": "09a382c727a7a5c9e7c9b169feff601f3aeba4da",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 75,
        "deletions": 63,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -23,6 +23,7 @@\n from threading import RLock, Thread\n \n from test_framework.messages import *\n+from test_framework.util import wait_until\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n \n@@ -57,12 +58,24 @@\n }\n \n class NodeConn(asyncore.dispatcher):\n-    \"\"\"The actual NodeConn class\n+    \"\"\"A low-level connection object to a node's P2P interface.\n \n-    This class provides an interface for a p2p connection to a specified node.\"\"\"\n+    This class is responsible for:\n \n-    def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n-        asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n+    - opening and closing the TCP connection to the node\n+    - reading bytes from and writing bytes to the socket\n+    - deserializing and serializing the P2P message header\n+    - logging messages as they are sent and received\n+\n+    This class contains no logic for handing the P2P message payloads. It must be\n+    sub-classed and the on_message() callback overridden.\n+\n+    TODO: rename this class P2PConnection.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__(map=mininode_socket_map)\n+\n+    def peer_connect(self, dstaddr, dstport, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n@@ -71,9 +84,7 @@ def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETW\n         self.recvbuf = b\"\"\n         self.state = \"connecting\"\n         self.network = net\n-        self.cb = callback\n         self.disconnect = False\n-        self.nServices = 0\n \n         if send_version:\n             # stuff version msg into sendbuf\n@@ -92,14 +103,19 @@ def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETW\n         except:\n             self.handle_close()\n \n+    def peer_disconnect(self):\n+        # Connection could have already been closed by other end.\n+        if self.state == \"connected\":\n+            self.disconnect_node()\n+\n     # Connection and disconnection methods\n \n     def handle_connect(self):\n         \"\"\"asyncore callback when a connection is opened.\"\"\"\n         if self.state != \"connected\":\n             logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n             self.state = \"connected\"\n-            self.cb.on_open(self)\n+            self.on_open()\n \n     def handle_close(self):\n         \"\"\"asyncore callback when a connection is closed.\"\"\"\n@@ -111,7 +127,7 @@ def handle_close(self):\n             self.close()\n         except:\n             pass\n-        self.cb.on_close(self)\n+        self.on_close()\n \n     def disconnect_node(self):\n         \"\"\"Disconnect the p2p connection.\n@@ -166,8 +182,8 @@ def _on_data(self):\n             raise\n \n     def on_message(self, message):\n-        \"\"\"Callback for processing a P2P payload. Calls into NodeConnCB.\"\"\"\n-        self.cb.on_message(self, message)\n+        \"\"\"Callback for processing a P2P payload. Must be overridden by derived class.\"\"\"\n+        raise NotImplementedError\n \n     # Socket write methods\n \n@@ -238,15 +254,19 @@ def _log_message(self, direction, msg):\n         logger.debug(log_message)\n \n \n-class NodeConnCB():\n-    \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n+class NodeConnCB(NodeConn):\n+    \"\"\"A high-level P2P interface class for communicating with a Bitcoin node.\n+\n+    This class provides high-level callbacks for processing P2P message\n+    payloads, as well as convenience methods for interacting with the\n+    node over P2P.\n \n     Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\"\"\"\n+    if they want to alter message handling behaviour.\n+\n+    TODO: rename this class P2PInterface\"\"\"\n     def __init__(self):\n-        # Track whether we have a P2P connection open to the node\n-        self.connected = False\n-        self.connection = None\n+        super().__init__()\n \n         # Track number of messages of each type received and the most recent\n         # message of each type\n@@ -256,9 +276,12 @@ def __init__(self):\n         # A count of the number of ping messages we've sent to the node\n         self.ping_counter = 1\n \n+        # The network services received from the peer\n+        self.nServices = 0\n+\n     # Message receiving methods\n \n-    def on_message(self, conn, message):\n+    def on_message(self, message):\n         \"\"\"Receive message and dispatch message to appropriate callback.\n \n         We keep a count of how many of each message type has been received\n@@ -268,66 +291,61 @@ def on_message(self, conn, message):\n                 command = message.command.decode('ascii')\n                 self.message_count[command] += 1\n                 self.last_message[command] = message\n-                getattr(self, 'on_' + command)(conn, message)\n+                getattr(self, 'on_' + command)(message)\n             except:\n-                print(\"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0]))\n+                print(\"ERROR delivering %s (%s)\" % (repr(message), sys.exc_info()[0]))\n                 raise\n \n     # Callback methods. Can be overridden by subclasses in individual test\n     # cases to provide custom message handling behaviour.\n \n-    def on_open(self, conn):\n-        self.connected = True\n-\n-    def on_close(self, conn):\n-        self.connected = False\n-        self.connection = None\n-\n-    def on_addr(self, conn, message): pass\n-    def on_block(self, conn, message): pass\n-    def on_blocktxn(self, conn, message): pass\n-    def on_cmpctblock(self, conn, message): pass\n-    def on_feefilter(self, conn, message): pass\n-    def on_getaddr(self, conn, message): pass\n-    def on_getblocks(self, conn, message): pass\n-    def on_getblocktxn(self, conn, message): pass\n-    def on_getdata(self, conn, message): pass\n-    def on_getheaders(self, conn, message): pass\n-    def on_headers(self, conn, message): pass\n-    def on_mempool(self, conn): pass\n-    def on_pong(self, conn, message): pass\n-    def on_reject(self, conn, message): pass\n-    def on_sendcmpct(self, conn, message): pass\n-    def on_sendheaders(self, conn, message): pass\n-    def on_tx(self, conn, message): pass\n-\n-    def on_inv(self, conn, message):\n+    def on_open(self):\n+        pass\n+\n+    def on_close(self):\n+        pass\n+\n+    def on_addr(self, message): pass\n+    def on_block(self, message): pass\n+    def on_blocktxn(self, message): pass\n+    def on_cmpctblock(self, message): pass\n+    def on_feefilter(self, message): pass\n+    def on_getaddr(self, message): pass\n+    def on_getblocks(self, message): pass\n+    def on_getblocktxn(self, message): pass\n+    def on_getdata(self, message): pass\n+    def on_getheaders(self, message): pass\n+    def on_headers(self, message): pass\n+    def on_mempool(self, message): pass\n+    def on_pong(self, message): pass\n+    def on_reject(self, message): pass\n+    def on_sendcmpct(self, message): pass\n+    def on_sendheaders(self, message): pass\n+    def on_tx(self, message): pass\n+\n+    def on_inv(self, message):\n         want = msg_getdata()\n         for i in message.inv:\n             if i.type != 0:\n                 want.inv.append(i)\n         if len(want.inv):\n-            conn.send_message(want)\n+            self.send_message(want)\n \n-    def on_ping(self, conn, message):\n-        conn.send_message(msg_pong(message.nonce))\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce))\n \n-    def on_verack(self, conn, message):\n+    def on_verack(self, message):\n         self.verack_received = True\n \n-    def on_version(self, conn, message):\n+    def on_version(self, message):\n         assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n-        conn.send_message(msg_verack())\n-        conn.nServices = message.nServices\n+        self.send_message(msg_verack())\n+        self.nServices = message.nServices\n \n     # Connection helper methods\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     def wait_for_disconnect(self, timeout=60):\n-        test_function = lambda: not self.connected\n+        test_function = lambda: self.state != \"connected\"\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message receiving helper methods\n@@ -359,12 +377,6 @@ def wait_for_verack(self, timeout=60):\n \n     # Message sending helper functions\n \n-    def send_message(self, message):\n-        if self.connection:\n-            self.connection.send_message(message)\n-        else:\n-            logger.error(\"Cannot send message. No connection to node!\")\n-\n     def send_and_ping(self, message):\n         self.send_message(message)\n         self.sync_with_ping()"
      },
      {
        "sha": "a9248c764e3d440f7cab4cf7269cc17ea4dd66d5",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad596fc37c8733ab806a0aa4224ac437d37aee5/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "patch": "@@ -14,7 +14,6 @@\n import time\n \n from .authproxy import JSONRPCException\n-from .mininode import NodeConn\n from .util import (\n     assert_equal,\n     get_rpc_proxy,\n@@ -158,7 +157,7 @@ def node_encrypt_wallet(self, passphrase):\n         self.encryptwallet(passphrase)\n         self.wait_until_stopped()\n \n-    def add_p2p_connection(self, p2p_conn, **kwargs):\n+    def add_p2p_connection(self, p2p_conn, *args, **kwargs):\n         \"\"\"Add a p2p connection to the node.\n \n         This method adds the p2p connection to the self.p2ps list and also\n@@ -167,9 +166,9 @@ def add_p2p_connection(self, p2p_conn, **kwargs):\n             kwargs['dstport'] = p2p_port(self.index)\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n+\n+        p2p_conn.peer_connect(*args, **kwargs)\n         self.p2ps.append(p2p_conn)\n-        kwargs.update({'callback': p2p_conn})\n-        p2p_conn.add_connection(NodeConn(**kwargs))\n \n         return p2p_conn\n \n@@ -185,10 +184,8 @@ def p2p(self):\n     def disconnect_p2ps(self):\n         \"\"\"Close all p2p connections to the node.\"\"\"\n         for p in self.p2ps:\n-            # Connection could have already been closed by other end.\n-            if p.connection is not None:\n-                p.connection.disconnect_node()\n-        self.p2ps = []\n+            p.peer_disconnect()\n+        del self.p2ps[:]\n \n \n class TestNodeCLI():"
      }
    ]
  },
  {
    "sha": "e9dfa9bccc5cbb6096c60498651b451297f0a931",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWRmYTliY2NjNWNiYjYwOTZjNjA0OTg2NTFiNDUxMjk3ZjBhOTMx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T19:56:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-28T17:47:02Z"
      },
      "message": "[tests] Move version message sending from NodeConn to NodeConnCB\n\nThis commit moves the logic that sends a version message\non connection from NodeConn to NodeConnCB. NodeConn should\nnot be aware of the semantics or meaning of the P2P payloads.",
      "tree": {
        "sha": "d5579409c9cef4ca156693b5f4eb2b71684b8780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5579409c9cef4ca156693b5f4eb2b71684b8780"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9dfa9bccc5cbb6096c60498651b451297f0a931",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9dfa9bccc5cbb6096c60498651b451297f0a931",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9dfa9bccc5cbb6096c60498651b451297f0a931",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9dfa9bccc5cbb6096c60498651b451297f0a931/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad596fc37c8733ab806a0aa4224ac437d37aee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dad596fc37c8733ab806a0aa4224ac437d37aee5"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c580d99c79e2017eedb822f9df20a54b4cde4357",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9dfa9bccc5cbb6096c60498651b451297f0a931/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9dfa9bccc5cbb6096c60498651b451297f0a931/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=e9dfa9bccc5cbb6096c60498651b451297f0a931",
        "patch": "@@ -75,7 +75,7 @@ class NodeConn(asyncore.dispatcher):\n     def __init__(self):\n         super().__init__(map=mininode_socket_map)\n \n-    def peer_connect(self, dstaddr, dstport, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n+    def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n@@ -86,16 +86,6 @@ def peer_connect(self, dstaddr, dstport, net=\"regtest\", services=NODE_NETWORK|NO\n         self.network = net\n         self.disconnect = False\n \n-        if send_version:\n-            # stuff version msg into sendbuf\n-            vt = msg_version()\n-            vt.nServices = services\n-            vt.addrTo.ip = self.dstaddr\n-            vt.addrTo.port = self.dstport\n-            vt.addrFrom.ip = \"0.0.0.0\"\n-            vt.addrFrom.port = 0\n-            self.send_message(vt, True)\n-\n         logger.info('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n \n         try:\n@@ -279,6 +269,19 @@ def __init__(self):\n         # The network services received from the peer\n         self.nServices = 0\n \n+    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n+        super().peer_connect(*args, **kwargs)\n+\n+        if send_version:\n+            # Send a version msg\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n     # Message receiving methods\n \n     def on_message(self, message):"
      }
    ]
  },
  {
    "sha": "a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWY1YTJjZTUzNjIyYjhkMmUzZmRhNjU5ZTQ5N2Q0N2M1ZDE2NGIw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-05-06T03:49:18Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-11-29T08:52:13Z"
      },
      "message": "[rpc] Fix fVerbose parsing (remove excess if cases).",
      "tree": {
        "sha": "da51794016e95247fe7fd8611cb595aa30b92835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da51794016e95247fe7fd8611cb595aa30b92835"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAloedT0ACgkQV692LbM1\nMyLXfg/7BQlzrHy12nTdhub/XXE0kq3bxGiTUmNGYNUXqqhDmCzAUH89dJ59D26E\nxvHG1WW+xY0pTrQFZlU5LRHztx4jeZIfnRn+5K44+Vx/EWgcwArMHNN8Gxn/NHga\njOj1aM2BqGkW//3Li2mwxD5kB+Bk25RQxaxZboEhiFhIbS/IQKfVc7hYwgeETuus\nKAOSG8FGyQaybt5KRqWTNsGeWBA1YY09BP0dwREsV4vhrh/n1dagkHVsPjA4TBXY\nMnQ5qPl0a3RCFJS9dyip+4NcRVQeZm+9RNvGd9u89M4VZpKaxU3XCyn9zLDM166H\nBVBUI8xbAZR7SrBi9WnVF+Pp8nxRu3OyfwkJ9UHqyDg1+lG8zN084Vw5lLWu99cI\nrcgVxfQU150ydi/RV/4EjFsGNynPEYNnpvIDo9RMu2Y/b21pGReQYgunZYVXnbA/\n8YxXW1Y6yDIcDZb/HSPnDr4COAOAZmCCGZcrL0li1BO1RCi/99JivH3Q0eOD6Pbg\n1a2xD43Y56u+daqh/y+r7gplTBEa4QuA1S9/G60nxvbXNqX2pHmy6NNo8bIMrMxk\nt8btK7NVeWsYgiVRjbn7SCmKYpxCuU1Ng+XSmk7SwL4mQ48FbEH2TSITa5g7Cjhp\n8n6DPIcvkEtlEksrkpNWr2Q2P5m28U4kLMWcpGaV0cDBKsgBRZU=\n=kjAM\n-----END PGP SIGNATURE-----",
        "payload": "tree da51794016e95247fe7fd8611cb595aa30b92835\nparent 26efc220a13aa3413f6e55e311e8991445104f82\nauthor Karl-Johan Alm <kalle.alm@gmail.com> 1494042558 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1511945533 +0900\n\n[rpc] Fix fVerbose parsing (remove excess if cases).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 4,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5d558d8bf999bfab476024749551348d1eb2809e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "patch": "@@ -141,19 +141,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n     if (!request.params[1].isNull()) {\n-        if (request.params[1].isNum()) {\n-            if (request.params[1].get_int() != 0) {\n-                fVerbose = true;\n-            }\n-        }\n-        else if(request.params[1].isBool()) {\n-            if(request.params[1].isTrue()) {\n-                fVerbose = true;\n-            }\n-        }\n-        else {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid type provided. Verbose parameter must be a boolean.\");\n-        }\n+        fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n     }\n \n     CTransactionRef tx;"
      },
      {
        "sha": "34e1e8ece62c436ed652ce2ecc9bc7c18a0a0804",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "patch": "@@ -188,13 +188,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      }
    ]
  },
  {
    "sha": "e97039605e0de3ba9e2c266b21821e26c2437811",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTcwMzk2MDVlMGRlM2JhOWUyYzI2NmIyMTgyMWUyNmMyNDM3ODEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-29T10:58:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-29T10:58:42Z"
      },
      "message": "Merge #11747: Fix: Open files read only if requested\n\ne1a8ec5 Fix: Open files read only if requested (Andras Elso)\n\nTree-SHA512: 047951bf3fa1272764596d2efed0a541105a6d3057789ba4218cd1bbce8a802cab0feac0ed3d28f6eab6b2e54e294d46f729dd0162d6d209e319d716c0567352",
      "tree": {
        "sha": "27264c3bd731fc0b8f656d95ae4f7e088cc6ad36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27264c3bd731fc0b8f656d95ae4f7e088cc6ad36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e97039605e0de3ba9e2c266b21821e26c2437811",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaHpLiAAoJEB5K7WKYbNJdUyoIAJXl4JhvI3j4GaBf4BRjmYn5\nq67FtMZIvBn1eJCi/awjzMAPhhxqmtb0dlJvXz8E3UHAxRyNMwaiChSuPV2qK1gh\njQd4AB3DB+ucWhjsYsoc6BIpw5ZQ66oHbD0a2ensvEj5nmqhPilCOT6HE0T/3yh8\njlzI/B9t5PQ46Gddt+zvSmX2a2jdwEgL3Bad72CrYqQ6TcVizHsShL2bG2r3udkO\nhLPqSrQ2jrZr/5rg2upvzGIzHU6JtAKyf8gD3sQZ53OHJGexFLiqyJwLMDTJIBL9\nb6CyhA/GXcQhBH2vvpiwenB696ijwuHFQZd8XXb2ynHSsYPruTvEBQhhhLoPtT8=\n=lwsM\n-----END PGP SIGNATURE-----",
        "payload": "tree 27264c3bd731fc0b8f656d95ae4f7e088cc6ad36\nparent 26efc220a13aa3413f6e55e311e8991445104f82\nparent e1a8ec56c56161be15af1c33067918959e2666de\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511953104 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511953122 +0100\n\nMerge #11747: Fix: Open files read only if requested\n\ne1a8ec5 Fix: Open files read only if requested (Andras Elso)\n\nTree-SHA512: 047951bf3fa1272764596d2efed0a541105a6d3057789ba4218cd1bbce8a802cab0feac0ed3d28f6eab6b2e54e294d46f729dd0162d6d209e319d716c0567352\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97039605e0de3ba9e2c266b21821e26c2437811",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e97039605e0de3ba9e2c266b21821e26c2437811",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97039605e0de3ba9e2c266b21821e26c2437811/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82"
      },
      {
        "sha": "e1a8ec56c56161be15af1c33067918959e2666de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a8ec56c56161be15af1c33067918959e2666de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1a8ec56c56161be15af1c33067918959e2666de"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9d45ef5f81ba902e6ec9e514b331d46949e278c4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e97039605e0de3ba9e2c266b21821e26c2437811/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e97039605e0de3ba9e2c266b21821e26c2437811/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e97039605e0de3ba9e2c266b21821e26c2437811",
        "patch": "@@ -3464,7 +3464,7 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n         return nullptr;\n     fs::path path = GetBlockPosFilename(pos, prefix);\n     fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, \"rb+\");\n+    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n     if (!file && !fReadOnly)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {"
      }
    ]
  },
  {
    "sha": "46d1ebfcf854bf122340a121d668bbfb9e025cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmQxZWJmY2Y4NTRiZjEyMjM0MGExMjFkNjY4YmJmYjllMDI1Y2Yy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-29T11:16:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-29T11:16:45Z"
      },
      "message": "Merge #11737: Document partial validation in ConnectBlock()\n\n9d811dc Document partial validation in ConnectBlock() (Suhas Daftuar)\n\nPull request description:\n\n  `ConnectBlock()` relies on validation that happens in `ContextualCheckBlock()` and\n  `ContextualCheckBlockHeader()`. This has implications for implementing consensus\n  changes and handling software upgrade to ensure that nodes upgrading their\n  software end up enforcing all the consensus rules.\n\nTree-SHA512: 36a252af2221b0e5d5d6f8d5f8b16f8b566ca0db2d56242130a5523302c8757599ac234594a6a946c1689b260d18a32c2c7f8c3831304e78b9832e2ce5ac435a",
      "tree": {
        "sha": "bc07c8beb6a51ab9411f6720b580ee3b2bca0c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc07c8beb6a51ab9411f6720b580ee3b2bca0c5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46d1ebfcf854bf122340a121d668bbfb9e025cf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaHpcdAAoJEB5K7WKYbNJdDCwH/AkAGTxd70JQRTHDVwLS1Y9s\nnFGL5oUwmhmfO09kiEX/vACdhAfb+ndT1xBUWv6pyE9UGZeNL7nxH/w76JxXZO3v\nQ95y8Ca7zBH1kN3sdUKlt6LYa17c7yHGHioAzI4SgWMhuRbpEc3OyzfqcXvdzrxm\nv1SOZFWfWF+xJKa+7BnkEkvt2/5J36SIxnAZK6f3bNCjv1+Trb4BdQsT1jh537GL\nzYLK84AMrlaJj2NcezvmOivYYkZhwhDLIBatCXO7JARJJd996kAv9zCsYjcbiUAV\nkh3dH9U4KUyFK0qy2dFg68dU/lCrwJ39YvzByq3JH41tbGl36Kvm3vnL1qzOZNE=\n=V3Qt\n-----END PGP SIGNATURE-----",
        "payload": "tree bc07c8beb6a51ab9411f6720b580ee3b2bca0c5e\nparent e97039605e0de3ba9e2c266b21821e26c2437811\nparent 9d811dc18b28ed2dd00ba219754764a76c4f859b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511954198 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511954205 +0100\n\nMerge #11737: Document partial validation in ConnectBlock()\n\n9d811dc Document partial validation in ConnectBlock() (Suhas Daftuar)\n\nPull request description:\n\n  `ConnectBlock()` relies on validation that happens in `ContextualCheckBlock()` and\n  `ContextualCheckBlockHeader()`. This has implications for implementing consensus\n  changes and handling software upgrade to ensure that nodes upgrading their\n  software end up enforcing all the consensus rules.\n\nTree-SHA512: 36a252af2221b0e5d5d6f8d5f8b16f8b566ca0db2d56242130a5523302c8757599ac234594a6a946c1689b260d18a32c2c7f8c3831304e78b9832e2ce5ac435a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d1ebfcf854bf122340a121d668bbfb9e025cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46d1ebfcf854bf122340a121d668bbfb9e025cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d1ebfcf854bf122340a121d668bbfb9e025cf2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e97039605e0de3ba9e2c266b21821e26c2437811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97039605e0de3ba9e2c266b21821e26c2437811",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e97039605e0de3ba9e2c266b21821e26c2437811"
      },
      {
        "sha": "9d811dc18b28ed2dd00ba219754764a76c4f859b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d811dc18b28ed2dd00ba219754764a76c4f859b"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d598a6994c8d54f07b2c21b7cd5ae19725247b13",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46d1ebfcf854bf122340a121d668bbfb9e025cf2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46d1ebfcf854bf122340a121d668bbfb9e025cf2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=46d1ebfcf854bf122340a121d668bbfb9e025cf2",
        "patch": "@@ -1667,6 +1667,18 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n+    // NOTE: We don't currently (re-)invoke ContextualCheckBlock() or\n+    // ContextualCheckBlockHeader() here. This means that if we add a new\n+    // consensus rule that is enforced in one of those two functions, then we\n+    // may have let in a block that violates the rule prior to updating the\n+    // software, and we would NOT be enforcing the rule here. Fully solving\n+    // upgrade from one software version to the next after a consensus rule\n+    // change is potentially tricky and issue-specific (see RewindBlockIndex()\n+    // for one general approach that was used for BIP 141 deployment).\n+    // Also, currently the rule against blocks more than 2 hours in the future\n+    // is enforced in ContextualCheckBlockHeader(); we wouldn't want to\n+    // re-enforce that rule here (at least until we make it impossible for\n+    // GetAdjustedTime() to go backward).\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n@@ -2952,7 +2964,13 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n \n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n- *  set; UTXO-related validity checks are done in ConnectBlock(). */\n+ *  set; UTXO-related validity checks are done in ConnectBlock().\n+ *  NOTE: This function is not currently invoked by ConnectBlock(), so we\n+ *  should consider upgrade issues if we change which consensus rules are\n+ *  enforced in this function (eg by adding a new consensus rule). See comment\n+ *  in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     assert(pindexPrev != nullptr);\n@@ -2992,6 +3010,12 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     return true;\n }\n \n+/** NOTE: This function is not currently invoked by ConnectBlock(), so we\n+ *  should consider upgrade issues if we change which consensus rules are\n+ *  enforced in this function (eg by adding a new consensus rule). See comment\n+ *  in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;"
      }
    ]
  },
  {
    "sha": "32c9b570fceaad76536a2c881b4dc1d961d9b306",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmM5YjU3MGZjZWFhZDc2NTM2YTJjODgxYjRkYzFkOTYxZDliMzA2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-29T11:19:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-29T11:19:53Z"
      },
      "message": "Merge #11753: clarify abortrescan rpc use\n\n8b2c733 clarify abortrescan rpc use (Gregory Sanders)\n\nPull request description:\n\n  `-rescan` during startup doesn't apply since RPC has not warmed up by that point\n\nTree-SHA512: 0b6738ed9429ca41edbfa23bb3e2da23bb16fed9e55c1803ab140b2efc49ef3295bb8b7eeb8c24df94204c5b3fb25d0d57cbc8d1be11856a5763c9fde71bceba",
      "tree": {
        "sha": "ca4bd3aacc102101f1a0ba746056af68893bfd77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca4bd3aacc102101f1a0ba746056af68893bfd77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaHpfZAAoJEB5K7WKYbNJdiZUH/RvKL7A0cgASKRzOK8AUpBvR\nd96lUBzfqA7DNX6Ra6TmuM31QdXJ0xT2yBPISQL+0kiN9kWQ83v1QfU08DMgof7W\nw7/uzc7BlwlphxRod4IG9OWsa004aziJAImjdFP5nWnXbS4uyatGmehabGd5WEfA\n+5j3tusdsxajSXplOGuurZr9BHQGP5IOjzmF6LoO+HZ/SKk9fURSe0kHxOVqO5p3\njL++9MpWIHxMXfNBznUkeoaUdUUSaMiVG4EjBFpi1UM6aAg+F9FhwU+9uAyabamK\n2PpmGlCRMJ7xKD5Nnl4TTMfTHnTlRWAJBRy8JWptGMPBtV54M0JX064soYEByXg=\n=CNgj\n-----END PGP SIGNATURE-----",
        "payload": "tree ca4bd3aacc102101f1a0ba746056af68893bfd77\nparent 46d1ebfcf854bf122340a121d668bbfb9e025cf2\nparent 8b2c7330d09fd9dee93b3f44881437b17766aea3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1511954388 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1511954393 +0100\n\nMerge #11753: clarify abortrescan rpc use\n\n8b2c733 clarify abortrescan rpc use (Gregory Sanders)\n\nPull request description:\n\n  `-rescan` during startup doesn't apply since RPC has not warmed up by that point\n\nTree-SHA512: 0b6738ed9429ca41edbfa23bb3e2da23bb16fed9e55c1803ab140b2efc49ef3295bb8b7eeb8c24df94204c5b3fb25d0d57cbc8d1be11856a5763c9fde71bceba\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32c9b570fceaad76536a2c881b4dc1d961d9b306",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46d1ebfcf854bf122340a121d668bbfb9e025cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d1ebfcf854bf122340a121d668bbfb9e025cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46d1ebfcf854bf122340a121d668bbfb9e025cf2"
      },
      {
        "sha": "8b2c7330d09fd9dee93b3f44881437b17766aea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b2c7330d09fd9dee93b3f44881437b17766aea3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b2c7330d09fd9dee93b3f44881437b17766aea3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "71d50be63425bdca0a530f36ddafc5df479b5732",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32c9b570fceaad76536a2c881b4dc1d961d9b306/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32c9b570fceaad76536a2c881b4dc1d961d9b306/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "patch": "@@ -165,7 +165,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n             \"abortrescan\\n\"\n-            \"\\nStops current wallet rescan triggered e.g. by an importprivkey call.\\n\"\n+            \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a private key\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +"
      }
    ]
  },
  {
    "sha": "387879dd4cbecd4d39bcf691bfe910047e5ed85c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODc4NzlkZDRjYmVjZDRkMzliY2Y2OTFiZmU5MTAwNDdlNWVkODVj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-12-01T04:39:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-29T11:31:50Z"
      },
      "message": "[depends] ZeroMQ 4.2.2",
      "tree": {
        "sha": "7eda5229b5389de077751e1bc9a8601b9c5e9e1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7eda5229b5389de077751e1bc9a8601b9c5e9e1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/387879dd4cbecd4d39bcf691bfe910047e5ed85c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAloemqgACgkQLuufXMCV\nJsHIPg//QlLiKQWOFt5TNjY6omFS+0cEfSuME8xl+vzlDK9XnSymUn8VSkLQnxEK\noFIspS8EniAT0mb88pOLmEz+OgFTJuGVenbPUXMSd1YSG4CQ/AanrpMN3a6c5OA0\nDK7yzeMPr0WvGZ1FiWzs6gvDNHaqNoELxEyf1i9wTl1OzQOv8EBum6u26BMqCrf5\nUkwt/uUmP5SQabGfDG4kPQ9xg/xUHiealTANxzbOc29Ff4v7j1r1xkhTPcGaPPBz\nCZUxsh4GWFSo6fdEgiYaygZi9K5By5l7ug/f5e4Ry7z0LFIaehYmmjnA8xSxynU/\nV6yLFzOYmqf5K4kc7D9m3kZ/sU60KcZCiYlgGkSpRxfXhMfHXKirvnrfl13wUont\n0c6eL9sYAJiM6rHUuQzK0za5lakySVFavhhcRCwqbYG4EVLs0L7T7oXlwRZNkJps\nG3PGH4vcWXG1iu8pTHsU7YbmxU1syVOQkfPivxpVxVejweXa543IsBBobkQCKP/k\nMru4pdfBH7CwOZxzMfANm6YmnZsXNYm3SePYF7uE4VVcDt1ZB4Qpp7cRA1UCwaMd\neujkpeyT5HU+y9Xq0cSfdjk97FC+i8efsUpUn6dfaV5SY9wyPcQjOZMGjOmzXQzk\nbAZoVKdGKhQ2ZF1CTWf3vs+Q3WXIYvHqtDtGtpWi1e/rHwxlp2M=\n=lL9U\n-----END PGP SIGNATURE-----",
        "payload": "tree 7eda5229b5389de077751e1bc9a8601b9c5e9e1b\nparent 26efc220a13aa3413f6e55e311e8991445104f82\nauthor fanquake <fanquake@gmail.com> 1480567171 +0800\ncommitter fanquake <fanquake@gmail.com> 1511955110 +0800\n\n[depends] ZeroMQ 4.2.2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387879dd4cbecd4d39bcf691bfe910047e5ed85c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/387879dd4cbecd4d39bcf691bfe910047e5ed85c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387879dd4cbecd4d39bcf691bfe910047e5ed85c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 6,
      "deletions": 53
    },
    "files": [
      {
        "sha": "6db75d7927557db1a364446fce72dd38feb13c56",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/387879dd4cbecd4d39bcf691bfe910047e5ed85c/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/387879dd4cbecd4d39bcf691bfe910047e5ed85c/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=387879dd4cbecd4d39bcf691bfe910047e5ed85c",
        "patch": "@@ -1,19 +1,16 @@\n package=zeromq\n-$(package)_version=4.1.5\n-$(package)_download_path=https://github.com/zeromq/zeromq4-1/releases/download/v$($(package)_version)/\n+$(package)_version=4.2.2\n+$(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=04aac57f081ffa3a2ee5ed04887be9e205df3a7ddade0027460b8042432bdbcf\n-$(package)_patches=9114d3957725acd34aa8b8d011585812f3369411.patch 9e6745c12e0b100cd38acecc16ce7db02905e27c.patch\n+$(package)_sha256_hash=5b23f4ca9ef545d5bd3af55d305765e3ee06b986263b31967435d285a3e6df6b\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium --disable-curve\n+  $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf\n   $(package)_config_opts_linux=--with-pic\n   $(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/9114d3957725acd34aa8b8d011585812f3369411.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch && \\\n   ./autogen.sh\n endef\n \n@@ -22,7 +19,7 @@ define $(package)_config_cmds\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) libzmq.la\n+  $(MAKE) src/libzmq.la\n endef\n \n define $(package)_stage_cmds"
      },
      {
        "sha": "f704b3d94fda8a2bd90ac422c8b267b02bc60f5c",
        "filename": "depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26efc220a13aa3413f6e55e311e8991445104f82/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26efc220a13aa3413f6e55e311e8991445104f82/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch?ref=26efc220a13aa3413f6e55e311e8991445104f82",
        "patch": "@@ -1,22 +0,0 @@\n-From 9114d3957725acd34aa8b8d011585812f3369411 Mon Sep 17 00:00:00 2001\n-From: Jeroen Ooms <jeroenooms@gmail.com>\n-Date: Tue, 20 Oct 2015 13:10:38 +0200\n-Subject: [PATCH] enable static libraries on mingw\n-\n----\n- configure.ac | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/configure.ac b/configure.ac\n-index 393505b..e92131a 100644\n---- a/configure.ac\n-+++ b/configure.ac\n-@@ -265,7 +265,7 @@ case \"${host_os}\" in\n-         libzmq_dso_visibility=\"no\"\n-\n-         if test \"x$enable_static\" = \"xyes\"; then\n--            AC_MSG_ERROR([Building static libraries is not supported under MinGW32])\n-+            CPPFLAGS=\"-DZMQ_STATIC\"\n-         fi\n-\n- \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "9aff2c179a1982e6af89a410d06c42d1a0fbad90",
        "filename": "depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26efc220a13aa3413f6e55e311e8991445104f82/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26efc220a13aa3413f6e55e311e8991445104f82/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch?ref=26efc220a13aa3413f6e55e311e8991445104f82",
        "patch": "@@ -1,22 +0,0 @@\n-From 9e6745c12e0b100cd38acecc16ce7db02905e27c Mon Sep 17 00:00:00 2001\n-From: David Millard <dmillard10@gmail.com>\n-Date: Tue, 10 May 2016 13:53:53 -0700\n-Subject: [PATCH] Fix autotools for static MinGW builds\n-\n----\n- configure.ac | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/configure.ac b/configure.ac\n-index 5a0fa14..def6ea7 100644\n---- a/configure.ac\n-+++ b/configure.ac\n-@@ -259,7 +259,7 @@ case \"${host_os}\" in\n-         libzmq_dso_visibility=\"no\"\n-\n-         if test \"x$enable_static\" = \"xyes\"; then\n--            CPPFLAGS=\"-DZMQ_STATIC\"\n-+            CPPFLAGS=\"-DZMQ_STATIC $CPPFLAGS\"\n-         fi\n-\n- \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "5c5645de9785d69de90f220422a911224f5c5164",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/387879dd4cbecd4d39bcf691bfe910047e5ed85c/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/387879dd4cbecd4d39bcf691bfe910047e5ed85c/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=387879dd4cbecd4d39bcf691bfe910047e5ed85c",
        "patch": "@@ -27,5 +27,5 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Qt | [5.7.1](https://download.qt.io/official_releases/qt/) | 4.7+ | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L94) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L93) (Linux only) |\n-| ZeroMQ | [4.1.5](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n+| ZeroMQ | [4.2.2](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n | zlib | [1.2.11](http://zlib.net/) |  |  |  | No |"
      }
    ]
  },
  {
    "sha": "126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjY5OTlkMWNjMWIyNTEzY2IyY2E2MmE3MGRiMGNkNmE5MTJhN2Jh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-29T01:42:39Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-29T11:31:59Z"
      },
      "message": "depends: fix zmq build with mingw < 4.0",
      "tree": {
        "sha": "79e60354b0f0af2f5d64fc134ffd39ec63bacb17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79e60354b0f0af2f5d64fc134ffd39ec63bacb17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAloemq8ACgkQLuufXMCV\nJsE9/A/+LjAp2GryvIc37GfD/IELJ9H1+5sPisQo9eYXAA3nu5dI0tl/oRDiIBbp\ngUJpqxLuwmsdjyAcBdRWtJhbEuwTN+OJ7ojIoRhqy8qu7XhaQ+h5NOXc4phFwyJ+\nOBSw3VvlrLm+5RbHXKzuXVEOuh6xbvS7kKPsvrfNiJ2/JYAm1wHbtIbCHnLZf5gl\nAoSlPiOjlQXV0AXuR8X1dD1lsjIOWjikzXlS4LuzW8Qt+37SNg8tIDQrV1xZyFb6\ng2fwfCE2i/WnXxhywPU9U+CzsjkXdFimA3oB1iWV+m7cndJRnfXDzoavwnqectl/\nHX/SagLwF3fW79HByH7aXSBLmYhk4HopFau4+fk4xUDnXTEWd2EnxPkES/BYBlNZ\nqfbTe6OfBicoJA5GBasiR7RuB6WRFyDtvHJ67Ig+SrMsoYgCzfekEoBSDfVhqAbH\n0F9R9WBcrNTKtT1G0i2drcTRmtstBJK9MEdcmv9R09dgtffLDD3JyRoL+RUWUnLU\nQX64q5HSgDHv8T3KFLBys/batD2Wuf4uG/uCDERFVq1SJJqX7yaP+kSaiOAJB1Bf\nzReLonzd7K4J5tvOa04peqQuzyyzejQa458R0aEWVKR8Z/8Mhd6y7ZvtTt5usK47\n3zRHSCIOc8zHsp2Ce5pqxr1p7TtBAfgCdPGowgUy7UOLdKIrhk8=\n=7Xrm\n-----END PGP SIGNATURE-----",
        "payload": "tree 79e60354b0f0af2f5d64fc134ffd39ec63bacb17\nparent 387879dd4cbecd4d39bcf691bfe910047e5ed85c\nauthor Cory Fields <cory-nospam-@coryfields.com> 1511919759 -0500\ncommitter fanquake <fanquake@gmail.com> 1511955119 +0800\n\ndepends: fix zmq build with mingw < 4.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "387879dd4cbecd4d39bcf691bfe910047e5ed85c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387879dd4cbecd4d39bcf691bfe910047e5ed85c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/387879dd4cbecd4d39bcf691bfe910047e5ed85c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "74bf4e9e115a7f8cc06043eb77ff0ebb5382abda",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
        "patch": "@@ -3,6 +3,7 @@ $(package)_version=4.2.2\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n $(package)_sha256_hash=5b23f4ca9ef545d5bd3af55d305765e3ee06b986263b31967435d285a3e6df6b\n+$(package)_patches=0001-fix-build-with-older-mingw64.patch\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf\n@@ -11,6 +12,7 @@ define $(package)_set_vars\n endef\n \n define $(package)_preprocess_cmds\n+   patch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n   ./autogen.sh\n endef\n "
      },
      {
        "sha": "a6c508fb8a1e6c14e61c28ac2299fdcf7823d181",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
        "patch": "@@ -0,0 +1,30 @@\n+From 1a159c128c69a42d90819375c06a39994f3fbfc1 Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Tue, 28 Nov 2017 20:33:25 -0500\n+Subject: [PATCH] fix build with older mingw64\n+\n+---\n+ src/windows.hpp | 7 +++++++\n+ 1 file changed, 7 insertions(+)\n+\n+diff --git a/src/windows.hpp b/src/windows.hpp\n+index 99e889d..e69038e 100644\n+--- a/src/windows.hpp\n++++ b/src/windows.hpp\n+@@ -55,6 +55,13 @@\n+ #include <winsock2.h>\n+ #include <windows.h>\n+ #include <mswsock.h>\n++\n++#if defined __MINGW64_VERSION_MAJOR && __MINGW64_VERSION_MAJOR < 4\n++// Workaround for mingw-w64 < v4.0 which did not include ws2ipdef.h in iphlpapi.h.\n++// Fixed in mingw-w64 by 9bd8fe9148924840d315b4c915dd099955ea89d1.\n++#include <ws2def.h>\n++#include <ws2ipdef.h>\n++#endif\n+ #include <iphlpapi.h>\n+\n+ #if !defined __MINGW32__\n+--\n+2.7.4\n+"
      }
    ]
  },
  {
    "sha": "bba1c54edd73406e66ddae5ae2ac90183c3582bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmExYzU0ZWRkNzM0MDZlNjZkZGFlNWFlMmFjOTAxODNjMzU4MmJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:21:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:29:15Z"
      },
      "message": "[tests] Improve logging shutdown and add hint for combine_logs",
      "tree": {
        "sha": "732f73474a8e9cca26dd4bef1112442e6d4988ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/732f73474a8e9cca26dd4bef1112442e6d4988ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32c9b570fceaad76536a2c881b4dc1d961d9b306"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "102babb9f41f45b35a0f6025655a6a2d589e2d61",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bba1c54edd73406e66ddae5ae2ac90183c3582bf/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bba1c54edd73406e66ddae5ae2ac90183c3582bf/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bba1c54edd73406e66ddae5ae2ac90183c3582bf",
        "patch": "@@ -167,14 +167,16 @@ def main(self):\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n-            sys.exit(TEST_EXIT_PASSED)\n+            exit_code = TEST_EXIT_PASSED\n         elif success == TestStatus.SKIPPED:\n             self.log.info(\"Test skipped\")\n-            sys.exit(TEST_EXIT_SKIPPED)\n+            exit_code = TEST_EXIT_SKIPPED\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n-            logging.shutdown()\n-            sys.exit(TEST_EXIT_FAILED)\n+            self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n+            exit_code = TEST_EXIT_FAILED\n+        logging.shutdown()\n+        sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmE5NGVhZDBjYjRjYTkwYWViODk0YWNhMGE4N2EzNGU0ZGM5ODg2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:25:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T20:10:05Z"
      },
      "message": "[tests] [travis-ci] Move Travis functional test log post processing to test_runner",
      "tree": {
        "sha": "a360ee705ac212eb7c37091d4f8e60eb977ee2b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a360ee705ac212eb7c37091d4f8e60eb977ee2b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bba1c54edd73406e66ddae5ae2ac90183c3582bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bba1c54edd73406e66ddae5ae2ac90183c3582bf"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "54fe6896860011eda26591f9309250523b34bdf5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n-from collections import deque\n from enum import Enum\n import logging\n import optparse\n@@ -149,21 +148,6 @@ def main(self):\n             shutil.rmtree(self.options.tmpdir)\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n-            if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                # Dump the end of the debug logs, to aid in debugging rare\n-                # travis failures.\n-                import glob\n-                filenames = [self.options.tmpdir + \"/test_framework.log\"]\n-                filenames += glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n-                MAX_LINES_TO_PRINT = 1000\n-                for fn in filenames:\n-                    try:\n-                        with open(fn, 'r') as f:\n-                            print(\"From\", fn, \":\")\n-                            print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n-                    except OSError:\n-                        print(\"Opening file %s failed.\" % fn)\n-                        traceback.print_exc()\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")"
      },
      {
        "sha": "4407d3bf69552f1d42e61683fb7964d56862ade5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "patch": "@@ -15,6 +15,7 @@\n \"\"\"\n \n import argparse\n+from collections import deque\n import configparser\n import datetime\n import os\n@@ -314,7 +315,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     max_len_name = len(max(test_list, key=len))\n \n     for _ in range(len(test_list)):\n-        test_result, stdout, stderr = job_queue.get_next()\n+        test_result, testdir, stdout, stderr = job_queue.get_next()\n         test_results.append(test_result)\n \n         if test_result.status == \"Passed\":\n@@ -325,6 +326,14 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n             print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n+            if os.getenv(\"PYTHON_DEBUG\", \"\") and os.path.isdir(testdir):\n+                # Print the logs on travis, so they are preserved when the vm is disposed\n+                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], 4000, BOLD[0]))\n+                print('\\n============')\n+                print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n+                print('============\\n')\n+                combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                print(\"\\n\".join(deque(combined_logs.splitlines(), 4000)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n \n@@ -389,13 +398,15 @@ def get_next(self):\n             log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             test_argv = t.split()\n-            tmpdir = [\"--tmpdir=%s/%s_%s\" % (self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)]\n+            testdir = \"{}/{}_{}\".format(self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)\n+            tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir,\n+                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n+                              testdir,\n                               log_stdout,\n                               log_stderr))\n         if not self.jobs:\n@@ -404,7 +415,7 @@ def get_next(self):\n             # Return first proc that finishes\n             time.sleep(.5)\n             for j in self.jobs:\n-                (name, time0, proc, log_out, log_err) = j\n+                (name, time0, proc, testdir, log_out, log_err) = j\n                 if os.getenv('TRAVIS') == 'true' and int(time.time() - time0) > 20 * 60:\n                     # In travis, timeout individual tests after 20 minutes (to stop tests hanging and not\n                     # providing useful output.\n@@ -422,7 +433,7 @@ def get_next(self):\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n \n-                    return TestResult(name, status, int(time.time() - time0)), stdout, stderr\n+                    return TestResult(name, status, int(time.time() - time0)), testdir, stdout, stderr\n             print('.', end='', flush=True)\n \n class TestResult():"
      }
    ]
  },
  {
    "sha": "ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjhhOWIwNjhhZTE1YzU2OWNlNjZhYmI1OGJmNmY5MDliODc5YTdk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:28:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T20:10:51Z"
      },
      "message": "[tests] Add combinedlogslen argument to test_runner.py\n\nInstead of calling combine_logs from test_runner when the environment variable\nPYTHON_DEBUG is set, add a combinedlogslen argument. This makes it easier\nto call when running locally, and allows a different length of combined logs\nto be printed.",
      "tree": {
        "sha": "d0bcebe682e9f256373fb42a96be99eefe4edd0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0bcebe682e9f256373fb42a96be99eefe4edd0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d3dd37e76c543ca04fa0dc5a3c9c8d2abf6a3043",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
        "patch": "@@ -18,7 +18,6 @@ env:\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n     - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n-    - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM\n@@ -79,7 +78,7 @@ script:\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_wait 30 make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning,dbcrash\"; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --coverage --quiet ${extended}; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet ${extended}; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE\n     - echo $TRAVIS_COMMIT_LOG"
      },
      {
        "sha": "8c5654a85d261b14a6e9e87cab014fda324aef66",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
        "patch": "@@ -175,6 +175,7 @@ def main():\n                                      epilog='''\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--combinedlogslen', '-c', type=int, default=0, help='print a combined log (of length n lines) from all test nodes and test framework to the console on failure.')\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n@@ -267,9 +268,9 @@ def main():\n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n \n-    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args, args.combinedlogslen)\n \n-def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[], combined_logs_len=0):\n     # Warn if bitcoind is already running (unix only)\n     try:\n         if subprocess.check_output([\"pidof\", \"bitcoind\"]) is not None:\n@@ -326,14 +327,14 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n             print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n-            if os.getenv(\"PYTHON_DEBUG\", \"\") and os.path.isdir(testdir):\n-                # Print the logs on travis, so they are preserved when the vm is disposed\n-                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], 4000, BOLD[0]))\n+            if combined_logs_len and os.path.isdir(testdir):\n+                # Print the final `combinedlogslen` lines of the combined logs\n+                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], combined_logs_len, BOLD[0]))\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n                 combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n-                print(\"\\n\".join(deque(combined_logs.splitlines(), 4000)))\n+                print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n "
      }
    ]
  },
  {
    "sha": "9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjJjMmRiYTIxODU1YjhjYjliMTkzYjE4MTliZTczZmE0YTIzYTk5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-29T21:29:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-29T21:29:19Z"
      },
      "message": "Merge #11712: [tests] Split NodeConn from NodeConnCB\n\ne9dfa9bcc [tests] Move version message sending from NodeConn to NodeConnCB (John Newbery)\ndad596fc3 [tests] Make NodeConnCB a subclass of NodeConn (John Newbery)\ne30d40438 [tests] Move only: move NodeConnCB below NodeConn (John Newbery)\n4d5059856 [tests] Tidy up mininode (John Newbery)\nf2ae6f32a [tests] Remove mininode periodic (half-hour) ping messages (John Newbery)\nec59523c5 [tests] Remove rpc property from TestNode in p2p-segwit.py. (John Newbery)\n\nPull request description:\n\n  This is the final step in #11518, except for possibly renaming - for motivation, please see that PR.\n\n  If this is merged, then migrating the test framework from asyncore to asyncio should be easier (I say should because I haven't dug too deeply into what would be required).\n\n  Requesting review from @ryanofsky , since he always has good feedback on these refactor PRs, and I'd appreciate his take on this refactor. Note particularly that I've reverted the change suggested here: https://github.com/bitcoin/bitcoin/pull/11182#discussion_r148859555 . The idea, as always, is to present a simple interface to the test writer.\n\nTree-SHA512: 94dd467a13ec799b101108cf47d4dccb6f6240b601e375e3d785313333bbb389c26072a50759aca663bbf3d6c8b867b99e36ae8800ab8ea115e0496c151926ce",
      "tree": {
        "sha": "d200bb364c984d331dfc9178497c629568a6669e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d200bb364c984d331dfc9178497c629568a6669e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaHyavAAoJENLqSFDnUoslchQQAIiPsod8EKw+QKbWehrqeRvh\nxlwfjyNaE22mE+MVrMJ16VZPXhrlcJ4t/WV/QOUIreNtfNg4MP7Jtcq76kO0CcjR\nDfzg5eRGqIfDFBfiiVdFJ4xAxJ2azAEcLT2OldFP0yXG5F+q+bXDjcaDrq6f0Q/x\nDW7YA+OE/NHAxo1JVNcoDgvi4qQK7Rl7T2n0b8B4JLcAkr/WbJjDqkWyaX/iQANN\nhxHpfh2fvVVeIoNtBz8/WKkyWUAwjoZmV2B/samET/LB5AndsATMMd55wj0FNB8f\njPP+Ioz4vi1yV+poFqXoyNitb2SgAo6Qgjp/FNwBKKCjfIqKpuiLVBn9M6oOIdcs\nGwAv7xGpTrCy8Fb4GLksq/lGI0fAIfNhTtBCd+90kuhqsrqYHhvPkqdZuLQc6a16\n6pjgXW08Q5x4F3M35kWImxUNl5cRO0hpiMoSUPDyhPlSH0h0XLxNYJ5HdwPDXwRH\nL7h/aAXnPuUSVMd6KIbzMtUi+HLZ8Yw65wcC0jKR2k76FdDzkwato/MyAa+un/2I\nMQD7stOPyzXUWX9i6b+f2IGk6elDOnA5vb8LsWx5HTVwgsGvSy/EHxbiZObG3UgN\n29Ziu+obtgL9Z6ZrEcFBQNqJAmdYWhK1g3meCRXrmuONEWOdYeTt2HIrNtMTT/32\nLF2sW3+7pHnSh04a86LD\n=f0B6\n-----END PGP SIGNATURE-----",
        "payload": "tree d200bb364c984d331dfc9178497c629568a6669e\nparent 32c9b570fceaad76536a2c881b4dc1d961d9b306\nparent e9dfa9bccc5cbb6096c60498651b451297f0a931\nauthor MarcoFalke <falke.marco@gmail.com> 1511990952 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1511990959 -0500\n\nMerge #11712: [tests] Split NodeConn from NodeConnCB\n\ne9dfa9bcc [tests] Move version message sending from NodeConn to NodeConnCB (John Newbery)\ndad596fc3 [tests] Make NodeConnCB a subclass of NodeConn (John Newbery)\ne30d40438 [tests] Move only: move NodeConnCB below NodeConn (John Newbery)\n4d5059856 [tests] Tidy up mininode (John Newbery)\nf2ae6f32a [tests] Remove mininode periodic (half-hour) ping messages (John Newbery)\nec59523c5 [tests] Remove rpc property from TestNode in p2p-segwit.py. (John Newbery)\n\nPull request description:\n\n  This is the final step in #11518, except for possibly renaming - for motivation, please see that PR.\n\n  If this is merged, then migrating the test framework from asyncore to asyncio should be easier (I say should because I haven't dug too deeply into what would be required).\n\n  Requesting review from @ryanofsky , since he always has good feedback on these refactor PRs, and I'd appreciate his take on this refactor. Note particularly that I've reverted the change suggested here: https://github.com/bitcoin/bitcoin/pull/11182#discussion_r148859555 . The idea, as always, is to present a simple interface to the test writer.\n\nTree-SHA512: 94dd467a13ec799b101108cf47d4dccb6f6240b601e375e3d785313333bbb389c26072a50759aca663bbf3d6c8b867b99e36ae8800ab8ea115e0496c151926ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32c9b570fceaad76536a2c881b4dc1d961d9b306"
      },
      {
        "sha": "e9dfa9bccc5cbb6096c60498651b451297f0a931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9dfa9bccc5cbb6096c60498651b451297f0a931",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9dfa9bccc5cbb6096c60498651b451297f0a931"
      }
    ],
    "stats": {
      "total": 886,
      "additions": 452,
      "deletions": 434
    },
    "files": [
      {
        "sha": "72da955641b2627396f9ed3e45dea3628322fc24",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -67,7 +67,7 @@ def setup_network(self):\n     def send_blocks_until_disconnected(self, p2p_conn):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n         for i in range(len(self.blocks)):\n-            if not p2p_conn.connection:\n+            if p2p_conn.state != \"connected\":\n                 break\n             try:\n                 p2p_conn.send_message(msg_block(self.blocks[i]))"
      },
      {
        "sha": "ec4d1d93652964684a58d1dfd15b29d4f73f5f29",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -246,7 +246,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)\n         NetworkThread().start()\n-        self.test.test_nodes[0].wait_for_verack()\n+        self.test.p2p_connections[0].wait_for_verack()\n \n     def get_tests(self):\n         for test in itertools.chain("
      },
      {
        "sha": "54cabee51c24f4e7dbf3f0fb3c9b000ab3c63904",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -49,14 +49,14 @@ def __init__(self):\n         # Stores a dictionary of all blocks received\n         self.block_receive_map = defaultdict(int)\n \n-    def on_block(self, conn, message):\n+    def on_block(self, message):\n         \"\"\"Override the standard on_block callback\n \n         Store the hash of a received block in the dictionary.\"\"\"\n         message.block.calc_sha256()\n         self.block_receive_map[message.block.sha256] += 1\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         \"\"\"Override the standard on_inv callback\"\"\"\n         pass\n "
      },
      {
        "sha": "beb0d599d2306b2376bbd1f80699d9e32f53b16b",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -22,10 +22,10 @@ def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         pass\n \n-    def on_block(self, conn, message):\n+    def on_block(self, message):\n         message.block.calc_sha256()\n         self.block_receive_map[message.block.sha256] += 1\n "
      },
      {
        "sha": "5aba1db8730d925abf8a95c9f3ba0be65602cdfa",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -25,21 +25,21 @@ def __init__(self):\n         # so we can eg wait until a particular block is announced.\n         self.announced_blockhashes = set()\n \n-    def on_sendcmpct(self, conn, message):\n+    def on_sendcmpct(self, message):\n         self.last_sendcmpct.append(message)\n \n-    def on_cmpctblock(self, conn, message):\n+    def on_cmpctblock(self, message):\n         self.block_announced = True\n         self.last_message[\"cmpctblock\"].header_and_shortids.header.calc_sha256()\n         self.announced_blockhashes.add(self.last_message[\"cmpctblock\"].header_and_shortids.header.sha256)\n \n-    def on_headers(self, conn, message):\n+    def on_headers(self, message):\n         self.block_announced = True\n         for x in self.last_message[\"headers\"].headers:\n             x.calc_sha256()\n             self.announced_blockhashes.add(x.sha256)\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         for x in self.last_message[\"inv\"].inv:\n             if x.type == 2:\n                 self.block_announced = True\n@@ -60,7 +60,7 @@ def get_headers(self, locator, hashstop):\n         msg = msg_getheaders()\n         msg.locator.vHave = locator\n         msg.hashstop = hashstop\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n@@ -86,7 +86,7 @@ def send_await_disconnect(self, message, timeout=30):\n         This is used when we want to send a message into the node that we expect\n         will get us disconnected, eg an invalid block.\"\"\"\n         self.send_message(message)\n-        wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n+        wait_until(lambda: self.state != \"connected\", timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "0ce3c3f42938d11bca9f5d69907093764215c2c6",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -27,7 +27,7 @@ def __init__(self):\n         super().__init__()\n         self.txinvs = []\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         for i in message.inv:\n             if (i.type == 1):\n                 self.txinvs.append(hashToHex(i.hash))"
      },
      {
        "sha": "3634f3836dc75b5788b009b258af0699b9bf1ffc",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -30,43 +30,42 @@ def bad_message(self, message):\n         self.unexpected_msg = True\n         self.log.info(\"should not have received message: %s\" % message.command)\n \n-    def on_open(self, conn):\n-        self.connected = True\n+    def on_open(self):\n         self.ever_connected = True\n \n-    def on_version(self, conn, message): self.bad_message(message)\n-    def on_verack(self, conn, message): self.bad_message(message)\n-    def on_reject(self, conn, message): self.bad_message(message)\n-    def on_inv(self, conn, message): self.bad_message(message)\n-    def on_addr(self, conn, message): self.bad_message(message)\n-    def on_getdata(self, conn, message): self.bad_message(message)\n-    def on_getblocks(self, conn, message): self.bad_message(message)\n-    def on_tx(self, conn, message): self.bad_message(message)\n-    def on_block(self, conn, message): self.bad_message(message)\n-    def on_getaddr(self, conn, message): self.bad_message(message)\n-    def on_headers(self, conn, message): self.bad_message(message)\n-    def on_getheaders(self, conn, message): self.bad_message(message)\n-    def on_ping(self, conn, message): self.bad_message(message)\n-    def on_mempool(self, conn): self.bad_message(message)\n-    def on_pong(self, conn, message): self.bad_message(message)\n-    def on_feefilter(self, conn, message): self.bad_message(message)\n-    def on_sendheaders(self, conn, message): self.bad_message(message)\n-    def on_sendcmpct(self, conn, message): self.bad_message(message)\n-    def on_cmpctblock(self, conn, message): self.bad_message(message)\n-    def on_getblocktxn(self, conn, message): self.bad_message(message)\n-    def on_blocktxn(self, conn, message): self.bad_message(message)\n+    def on_version(self, message): self.bad_message(message)\n+    def on_verack(self, message): self.bad_message(message)\n+    def on_reject(self, message): self.bad_message(message)\n+    def on_inv(self, message): self.bad_message(message)\n+    def on_addr(self, message): self.bad_message(message)\n+    def on_getdata(self, message): self.bad_message(message)\n+    def on_getblocks(self, message): self.bad_message(message)\n+    def on_tx(self, message): self.bad_message(message)\n+    def on_block(self, message): self.bad_message(message)\n+    def on_getaddr(self, message): self.bad_message(message)\n+    def on_headers(self, message): self.bad_message(message)\n+    def on_getheaders(self, message): self.bad_message(message)\n+    def on_ping(self, message): self.bad_message(message)\n+    def on_mempool(self, message): self.bad_message(message)\n+    def on_pong(self, message): self.bad_message(message)\n+    def on_feefilter(self, message): self.bad_message(message)\n+    def on_sendheaders(self, message): self.bad_message(message)\n+    def on_sendcmpct(self, message): self.bad_message(message)\n+    def on_cmpctblock(self, message): self.bad_message(message)\n+    def on_getblocktxn(self, message): self.bad_message(message)\n+    def on_blocktxn(self, message): self.bad_message(message)\n \n # Node that never sends a version. We'll use this to send a bunch of messages\n # anyway, and eventually get disconnected.\n class CNodeNoVersionBan(CLazyNode):\n     # send a bunch of veracks without sending a message. This should get us disconnected.\n     # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n-    def on_open(self, conn):\n-        super().on_open(conn)\n+    def on_open(self):\n+        super().on_open()\n         for i in range(banscore):\n             self.send_message(msg_verack())\n \n-    def on_reject(self, conn, message): pass\n+    def on_reject(self, message): pass\n \n # Node that never sends a version. This one just sits idle and hopes to receive\n # any message (it shouldn't!)\n@@ -80,15 +79,15 @@ def __init__(self):\n         self.version_received = False\n         super().__init__()\n \n-    def on_reject(self, conn, message): pass\n-    def on_verack(self, conn, message): pass\n+    def on_reject(self, message): pass\n+    def on_verack(self, message): pass\n     # When version is received, don't reply with a verack. Instead, see if the\n     # node will give us a message that it shouldn't. This is not an exhaustive\n     # list!\n-    def on_version(self, conn, message):\n+    def on_version(self, message):\n         self.version_received = True\n-        conn.send_message(msg_ping())\n-        conn.send_message(msg_getaddr())\n+        self.send_message(msg_ping())\n+        self.send_message(msg_getaddr())\n \n class P2PLeakTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -119,11 +118,11 @@ def run_test(self):\n         time.sleep(5)\n \n         #This node should have been banned\n-        assert not no_version_bannode.connected\n+        assert no_version_bannode.state != \"connected\"\n \n         # These nodes should have been disconnected\n-        assert not unsupported_service_bit5_node.connected\n-        assert not unsupported_service_bit7_node.connected\n+        assert unsupported_service_bit5_node.state != \"connected\"\n+        assert unsupported_service_bit7_node.state != \"connected\"\n \n         self.nodes[0].disconnect_p2ps()\n "
      },
      {
        "sha": "5776d99f6e1bd1f13b122f7abe9ecaff661b42cb",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 143,
        "deletions": 137,
        "changes": 280,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -31,13 +31,40 @@ def get_virtual_size(witness_block):\n     vsize = int((3*base_size + total_size + 3)/4)\n     return vsize\n \n+def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+    \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n+\n+    - Submit the transaction over the p2p interface\n+    - use the getrawmempool rpc to check for acceptance.\"\"\"\n+    tx_message = msg_tx(tx)\n+    if with_witness:\n+        tx_message = msg_witness_tx(tx)\n+    p2p.send_message(tx_message)\n+    p2p.sync_with_ping()\n+    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    if (reason != None and not accepted):\n+        # Check the rejection reason as well.\n+        with mininode_lock:\n+            assert_equal(p2p.last_message[\"reject\"].reason, reason)\n+\n+def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n+    \"\"\"Send a block to the node and check that it's accepted\n+\n+    - Submit the block over the p2p interface\n+    - use the getbestblockhash rpc to check for acceptance.\"\"\"\n+    if with_witness:\n+        p2p.send_message(msg_witness_block(block))\n+    else:\n+        p2p.send_message(msg_block(block))\n+    p2p.sync_with_ping()\n+    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+\n class TestNode(NodeConnCB):\n-    def __init__(self, rpc):\n+    def __init__(self):\n         super().__init__()\n         self.getdataset = set()\n-        self.rpc = rpc\n \n-    def on_getdata(self, conn, message):\n+    def on_getdata(self, message):\n         for inv in message.inv:\n             self.getdataset.add(inv.hash)\n \n@@ -68,27 +95,6 @@ def request_block(self, blockhash, inv_type, timeout=60):\n         self.wait_for_block(blockhash, timeout)\n         return self.last_message[\"block\"].block\n \n-    def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n-        tx_message = msg_tx(tx)\n-        if with_witness:\n-            tx_message = msg_witness_tx(tx)\n-        self.send_message(tx_message)\n-        self.sync_with_ping()\n-        assert_equal(tx.hash in self.rpc.getrawmempool(), accepted)\n-        if (reason != None and not accepted):\n-            # Check the rejection reason as well.\n-            with mininode_lock:\n-                assert_equal(self.last_message[\"reject\"].reason, reason)\n-\n-    # Test whether a witness block had the correct effect on the tip\n-    def test_witness_block(self, block, accepted, with_witness=True):\n-        if with_witness:\n-            self.send_message(msg_witness_block(block))\n-        else:\n-            self.send_message(msg_block(block))\n-        self.sync_with_ping()\n-        assert_equal(self.rpc.getbestblockhash() == block.hash, accepted)\n-\n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n class UTXO():\n     def __init__(self, sha256, n, nValue):\n@@ -142,7 +148,7 @@ def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n     ''' Individual tests '''\n     def test_witness_services(self):\n         self.log.info(\"Verifying NODE_WITNESS service bit\")\n-        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+        assert((self.test_node.nServices & NODE_WITNESS) != 0)\n \n \n     # See if sending a regular transaction works, and create a utxo\n@@ -201,7 +207,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n         # TODO: fix synchronization so we can test reject reason\n         # Right now, bitcoind delays sending reject messages for blocks\n         # until the future, making synchronization here difficult.\n@@ -228,7 +234,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n         tx2.rehash()\n-        self.test_node.test_transaction_acceptance(tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -245,18 +251,18 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         tx3.rehash()\n         # Note that this should be rejected for the premature witness reason,\n         # rather than a policy check, since segwit hasn't activated yet.\n-        self.std_node.test_transaction_acceptance(tx3, True, False, b'no-witness-yet')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'no-witness-yet')\n \n         # If we send without witness, it should be accepted.\n-        self.std_node.test_transaction_acceptance(tx3, False, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx4 = CTransaction()\n         tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), CScript([p2sh_program])))\n         tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, CScript([OP_TRUE])))\n         tx4.rehash()\n-        self.test_node.test_transaction_acceptance(tx3, False, True)\n-        self.test_node.test_transaction_acceptance(tx4, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -317,7 +323,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -328,7 +334,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        self.test_node.test_witness_block(block_2, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         assert (len(self.utxo) > 0)\n@@ -361,7 +367,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        self.test_node.test_witness_block(block_3, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -375,7 +381,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n         block_3.solve()\n-        self.test_node.test_witness_block(block_3, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -387,7 +393,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -428,11 +434,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Changing the witness nonce doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n \n     def test_witness_block_size(self):\n@@ -497,7 +503,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2*1024*1024)\n \n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -507,7 +513,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -574,7 +580,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -583,7 +589,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -599,7 +605,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -611,7 +617,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -620,7 +626,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -653,14 +659,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -695,7 +701,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n@@ -710,7 +716,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -736,7 +742,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -771,15 +777,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -788,13 +794,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -834,11 +840,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n-        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -870,11 +876,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -899,24 +905,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        self.std_node.test_transaction_acceptance(tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        self.std_node.test_transaction_acceptance(tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n         tx3.rehash()\n \n-        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n-        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)]) # wait until tx2 was inv'ed\n-        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -955,20 +961,20 @@ def test_block_relay(self, segwit_activated):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        self.test_node.test_witness_block(block1, True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n \n         block2 = self.build_next_block(nVersion=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        self.test_node.test_witness_block(block2, True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n \n         block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        self.test_node.test_witness_block(block3, True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -998,7 +1004,7 @@ def test_block_relay(self, segwit_activated):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -1052,7 +1058,7 @@ def test_standardness_v0(self, segwit_activated):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        self.test_node.test_transaction_acceptance(p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1064,7 +1070,7 @@ def test_standardness_v0(self, segwit_activated):\n         tx.vout.append(CTxOut(8000, scriptPubKey)) # Might burn this later\n         tx.rehash()\n \n-        self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=segwit_activated)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         scriptPubKey = CScript([OP_0, hash160(witness_hash)])\n@@ -1081,7 +1087,7 @@ def test_standardness_v0(self, segwit_activated):\n             tx2.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, scriptPubKey)]\n         tx2.rehash()\n \n-        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=segwit_activated)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -1094,13 +1100,13 @@ def test_standardness_v0(self, segwit_activated):\n             tx3.wit.vtxinwit.append(CTxInWitness())\n             tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n             tx3.rehash()\n-            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n         else:\n             # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n             tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n             tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, witness_program)]\n             tx3.rehash()\n-            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1124,7 +1130,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_TESTS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1143,8 +1149,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n             tx.rehash()\n-            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n-            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1163,8 +1169,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n-        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1180,15 +1186,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1206,7 +1212,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1220,13 +1226,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        self.test_node.test_witness_block(block2, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        self.test_node.test_witness_block(block2, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n \n@@ -1247,11 +1253,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n         tx.rehash()\n \n-        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1268,19 +1274,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue+1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                self.test_node.test_witness_block(block, accepted=False)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue-1, key)\n                 block.vtx.pop() # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                self.test_node.test_witness_block(block, accepted=False)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                self.test_node.test_witness_block(block, accepted=True)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1304,7 +1310,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1346,15 +1352,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                self.test_node.test_witness_block(block, accepted=True)\n+                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1376,7 +1382,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        self.test_node.test_witness_block(block, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1386,7 +1392,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1405,7 +1411,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1432,10 +1438,10 @@ def test_p2sh_witness(self, segwit_activated):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True, with_witness=segwit_activated)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=segwit_activated)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -1449,12 +1455,12 @@ def test_p2sh_witness(self, segwit_activated):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the scriptSig, should also fail.\n         spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -1464,17 +1470,17 @@ def test_p2sh_witness(self, segwit_activated):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a', witness_program ]\n \n         # Verify mempool acceptance\n-        self.test_node.test_transaction_acceptance(spend_tx, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=segwit_activated)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're before activation, then sending this without witnesses\n         # should be valid.  If we're after activation, then sending this with\n         # witnesses should be valid.\n         if segwit_activated:\n-            self.test_node.test_witness_block(block, accepted=True)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         else:\n-            self.test_node.test_witness_block(block, accepted=True, with_witness=False)\n+            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=False)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -1558,7 +1564,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        self.test_node.test_witness_block(block_1, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -1575,7 +1581,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        self.test_node.test_witness_block(block_2, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -1588,14 +1594,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        self.test_node.test_witness_block(block_3, accepted=False)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG]*(checksig_count-1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        self.test_node.test_witness_block(block_4, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -1611,7 +1617,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_justright ]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        self.test_node.test_witness_block(block_5, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n \n@@ -1689,7 +1695,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1708,11 +1714,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        self.test_node.test_transaction_acceptance(tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1728,11 +1734,11 @@ def test_uncompressed_pubkey(self):\n         sign_P2PK_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        self.test_node.test_transaction_acceptance(tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1745,10 +1751,10 @@ def test_uncompressed_pubkey(self):\n         sign_P2PK_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        self.test_node.test_transaction_acceptance(tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1760,10 +1766,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        self.test_node.test_transaction_acceptance(tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        self.test_node.test_witness_block(block, accepted=True)\n+        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     def test_non_standard_witness(self):\n@@ -1793,7 +1799,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1818,45 +1824,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        self.test_node.test_transaction_acceptance(p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n-        self.std_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        self.test_node.test_transaction_acceptance(p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -1870,11 +1876,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(self.nodes[1].rpc), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "21ae29eb6a0c9b9c3be56b725f4fa3e8b228288d",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -28,7 +28,7 @@\n from test_framework.util import *\n \n class TestNode(NodeConnCB):\n-    def on_version(self, conn, message):\n+    def on_version(self, message):\n         # Don't send a verack in response\n         pass\n "
      },
      {
        "sha": "a6265f6d9cf4c25553fb7de6440b99fa4adb65e4",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -24,7 +24,7 @@\n VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n \n class TestNode(NodeConnCB):\n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         pass\n \n class VersionBitsWarningTest(BitcoinTestFramework):"
      },
      {
        "sha": "b589d0e8a56258a132d97cc89cbba5ad5b4d0624",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -113,6 +113,7 @@\n class BaseNode(NodeConnCB):\n     def __init__(self):\n         super().__init__()\n+\n         self.block_announced = False\n         self.last_blockhash_announced = None\n \n@@ -121,18 +122,18 @@ def send_get_data(self, block_hashes):\n         msg = msg_getdata()\n         for x in block_hashes:\n             msg.inv.append(CInv(2, x))\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_get_headers(self, locator, hashstop):\n         msg = msg_getheaders()\n         msg.locator.vHave = locator\n         msg.hashstop = hashstop\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_block_inv(self, blockhash):\n         msg = msg_inv()\n         msg.inv = [CInv(2, blockhash)]\n-        self.connection.send_message(msg)\n+        self.send_message(msg)\n \n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n@@ -155,11 +156,11 @@ def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         self.block_announced = True\n         self.last_blockhash_announced = message.inv[-1].hash\n \n-    def on_headers(self, conn, message):\n+    def on_headers(self, message):\n         if len(message.headers):\n             self.block_announced = True\n             message.headers[-1].calc_sha256()"
      },
      {
        "sha": "2f64fba7536d877a9e2eb88af39076d4911d99ff",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 58,
        "deletions": 67,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -43,7 +43,6 @@ class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()\n-        self.conn = None\n         self.bestblockhash = None\n         self.block_store = block_store\n         self.block_request_map = {}\n@@ -58,74 +57,71 @@ def __init__(self, block_store, tx_store):\n         self.lastInv = []\n         self.closed = False\n \n-    def on_close(self, conn):\n+    def on_close(self):\n         self.closed = True\n \n-    def add_connection(self, conn):\n-        self.conn = conn\n-\n-    def on_headers(self, conn, message):\n+    def on_headers(self, message):\n         if len(message.headers) > 0:\n             best_header = message.headers[-1]\n             best_header.calc_sha256()\n             self.bestblockhash = best_header.sha256\n \n-    def on_getheaders(self, conn, message):\n+    def on_getheaders(self, message):\n         response = self.block_store.headers_for(message.locator, message.hashstop)\n         if response is not None:\n-            conn.send_message(response)\n+            self.send_message(response)\n \n-    def on_getdata(self, conn, message):\n-        [conn.send_message(r) for r in self.block_store.get_blocks(message.inv)]\n-        [conn.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n+    def on_getdata(self, message):\n+        [self.send_message(r) for r in self.block_store.get_blocks(message.inv)]\n+        [self.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n \n         for i in message.inv:\n             if i.type == 1 or i.type == 1 | (1 << 30): # MSG_TX or MSG_WITNESS_TX\n                 self.tx_request_map[i.hash] = True\n             elif i.type == 2 or i.type == 2 | (1 << 30): # MSG_BLOCK or MSG_WITNESS_BLOCK\n                 self.block_request_map[i.hash] = True\n \n-    def on_inv(self, conn, message):\n+    def on_inv(self, message):\n         self.lastInv = [x.hash for x in message.inv]\n \n-    def on_pong(self, conn, message):\n+    def on_pong(self, message):\n         try:\n             del self.pingMap[message.nonce]\n         except KeyError:\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n-    def on_reject(self, conn, message):\n+    def on_reject(self, message):\n         if message.message == b'tx':\n             self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n         if message.message == b'block':\n             self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n \n     def send_inv(self, obj):\n         mtype = 2 if isinstance(obj, CBlock) else 1\n-        self.conn.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n+        self.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n \n     def send_getheaders(self):\n         # We ask for headers from their last tip.\n         m = msg_getheaders()\n         m.locator = self.block_store.get_locator(self.bestblockhash)\n-        self.conn.send_message(m)\n+        self.send_message(m)\n \n     def send_header(self, header):\n         m = msg_headers()\n         m.headers.append(header)\n-        self.conn.send_message(m)\n+        self.send_message(m)\n \n     # This assumes BIP31\n     def send_ping(self, nonce):\n         self.pingMap[nonce] = True\n-        self.conn.send_message(msg_ping(nonce))\n+        self.send_message(msg_ping(nonce))\n \n     def received_ping_response(self, nonce):\n         return nonce not in self.pingMap\n \n     def send_mempool(self):\n         self.lastInv = []\n-        self.conn.send_message(msg_mempool())\n+        self.send_message(msg_mempool())\n \n # TestInstance:\n #\n@@ -166,37 +162,32 @@ class TestManager():\n \n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen\n-        self.connections    = []\n-        self.test_nodes     = []\n+        self.p2p_connections= []\n         self.block_store    = BlockStore(datadir)\n         self.tx_store       = TxStore(datadir)\n         self.ping_counter   = 1\n \n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            test_node = TestNode(self.block_store, self.tx_store)\n-            self.test_nodes.append(test_node)\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), test_node))\n-            # Make sure the TestNode (callback class) has a reference to its\n-            # associated NodeConn\n-            test_node.add_connection(self.connections[-1])\n+            node = TestNode(self.block_store, self.tx_store)\n+            node.peer_connect('127.0.0.1', p2p_port(i))\n+            self.p2p_connections.append(node)\n \n     def clear_all_connections(self):\n-        self.connections    = []\n-        self.test_nodes     = []\n+        self.p2p_connections = []\n \n     def wait_for_disconnections(self):\n         def disconnected():\n-            return all(node.closed for node in self.test_nodes)\n+            return all(node.closed for node in self.p2p_connections)\n         wait_until(disconnected, timeout=10, lock=mininode_lock)\n \n     def wait_for_verack(self):\n-        return all(node.wait_for_verack() for node in self.test_nodes)\n+        return all(node.wait_for_verack() for node in self.p2p_connections)\n \n     def wait_for_pings(self, counter):\n         def received_pongs():\n-            return all(node.received_ping_response(counter) for node in self.test_nodes)\n+            return all(node.received_ping_response(counter) for node in self.p2p_connections)\n         wait_until(received_pongs, lock=mininode_lock)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n@@ -206,17 +197,17 @@ def sync_blocks(self, blockhash, num_blocks):\n         def blocks_requested():\n             return all(\n                 blockhash in node.block_request_map and node.block_request_map[blockhash]\n-                for node in self.test_nodes\n+                for node in self.p2p_connections\n             )\n \n         # --> error if not requested\n         wait_until(blocks_requested, attempts=20*num_blocks, lock=mininode_lock)\n \n         # Send getheaders message\n-        [ c.cb.send_getheaders() for c in self.connections ]\n+        [ c.send_getheaders() for c in self.p2p_connections ]\n \n         # Send ping and wait for response -- synchronization hack\n-        [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+        [ c.send_ping(self.ping_counter) for c in self.p2p_connections ]\n         self.wait_for_pings(self.ping_counter)\n         self.ping_counter += 1\n \n@@ -226,42 +217,42 @@ def sync_transaction(self, txhash, num_events):\n         def transaction_requested():\n             return all(\n                 txhash in node.tx_request_map and node.tx_request_map[txhash]\n-                for node in self.test_nodes\n+                for node in self.p2p_connections\n             )\n \n         # --> error if not requested\n         wait_until(transaction_requested, attempts=20*num_events, lock=mininode_lock)\n \n         # Get the mempool\n-        [ c.cb.send_mempool() for c in self.connections ]\n+        [ c.send_mempool() for c in self.p2p_connections ]\n \n         # Send ping and wait for response -- synchronization hack\n-        [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+        [ c.send_ping(self.ping_counter) for c in self.p2p_connections ]\n         self.wait_for_pings(self.ping_counter)\n         self.ping_counter += 1\n \n         # Sort inv responses from each node\n         with mininode_lock:\n-            [ c.cb.lastInv.sort() for c in self.connections ]\n+            [ c.lastInv.sort() for c in self.p2p_connections ]\n \n     # Verify that the tip of each connection all agree with each other, and\n     # with the expected outcome (if given)\n     def check_results(self, blockhash, outcome):\n         with mininode_lock:\n-            for c in self.connections:\n+            for c in self.p2p_connections:\n                 if outcome is None:\n-                    if c.cb.bestblockhash != self.connections[0].cb.bestblockhash:\n+                    if c.bestblockhash != self.p2p_connections[0].bestblockhash:\n                         return False\n                 elif isinstance(outcome, RejectResult): # Check that block was rejected w/ code\n-                    if c.cb.bestblockhash == blockhash:\n+                    if c.bestblockhash == blockhash:\n                         return False\n-                    if blockhash not in c.cb.block_reject_map:\n+                    if blockhash not in c.block_reject_map:\n                         logger.error('Block not in reject map: %064x' % (blockhash))\n                         return False\n-                    if not outcome.match(c.cb.block_reject_map[blockhash]):\n-                        logger.error('Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash))\n+                    if not outcome.match(c.block_reject_map[blockhash]):\n+                        logger.error('Block rejected with %s instead of expected %s: %064x' % (c.block_reject_map[blockhash], outcome, blockhash))\n                         return False\n-                elif ((c.cb.bestblockhash == blockhash) != outcome):\n+                elif ((c.bestblockhash == blockhash) != outcome):\n                     return False\n             return True\n \n@@ -273,21 +264,21 @@ def check_results(self, blockhash, outcome):\n     # a particular tx's existence in the mempool is the same across all nodes.\n     def check_mempool(self, txhash, outcome):\n         with mininode_lock:\n-            for c in self.connections:\n+            for c in self.p2p_connections:\n                 if outcome is None:\n                     # Make sure the mempools agree with each other\n-                    if c.cb.lastInv != self.connections[0].cb.lastInv:\n+                    if c.lastInv != self.p2p_connections[0].lastInv:\n                         return False\n                 elif isinstance(outcome, RejectResult): # Check that tx was rejected w/ code\n-                    if txhash in c.cb.lastInv:\n+                    if txhash in c.lastInv:\n                         return False\n-                    if txhash not in c.cb.tx_reject_map:\n+                    if txhash not in c.tx_reject_map:\n                         logger.error('Tx not in reject map: %064x' % (txhash))\n                         return False\n-                    if not outcome.match(c.cb.tx_reject_map[txhash]):\n-                        logger.error('Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash))\n+                    if not outcome.match(c.tx_reject_map[txhash]):\n+                        logger.error('Tx rejected with %s instead of expected %s: %064x' % (c.tx_reject_map[txhash], outcome, txhash))\n                         return False\n-                elif ((txhash in c.cb.lastInv) != outcome):\n+                elif ((txhash in c.lastInv) != outcome):\n                     return False\n             return True\n \n@@ -332,25 +323,25 @@ def run(self):\n                         first_block_with_hash = False\n                     with mininode_lock:\n                         self.block_store.add_block(block)\n-                        for c in self.connections:\n-                            if first_block_with_hash and block.sha256 in c.cb.block_request_map and c.cb.block_request_map[block.sha256] == True:\n+                        for c in self.p2p_connections:\n+                            if first_block_with_hash and block.sha256 in c.block_request_map and c.block_request_map[block.sha256] == True:\n                                 # There was a previous request for this block hash\n                                 # Most likely, we delivered a header for this block\n                                 # but never had the block to respond to the getdata\n                                 c.send_message(msg_block(block))\n                             else:\n-                                c.cb.block_request_map[block.sha256] = False\n+                                c.block_request_map[block.sha256] = False\n                     # Either send inv's to each node and sync, or add\n                     # to invqueue for later inv'ing.\n                     if (test_instance.sync_every_block):\n                         # if we expect success, send inv and sync every block\n                         # if we expect failure, just push the block and see what happens.\n                         if outcome == True:\n-                            [ c.cb.send_inv(block) for c in self.connections ]\n+                            [ c.send_inv(block) for c in self.p2p_connections ]\n                             self.sync_blocks(block.sha256, 1)\n                         else:\n-                            [ c.send_message(msg_block(block)) for c in self.connections ]\n-                            [ c.cb.send_ping(self.ping_counter) for c in self.connections ]\n+                            [ c.send_message(msg_block(block)) for c in self.p2p_connections ]\n+                            [ c.send_ping(self.ping_counter) for c in self.p2p_connections ]\n                             self.wait_for_pings(self.ping_counter)\n                             self.ping_counter += 1\n                         if (not self.check_results(tip, outcome)):\n@@ -360,7 +351,7 @@ def run(self):\n                 elif isinstance(b_or_t, CBlockHeader):\n                     block_header = b_or_t\n                     self.block_store.add_header(block_header)\n-                    [ c.cb.send_header(block_header) for c in self.connections ]\n+                    [ c.send_header(block_header) for c in self.p2p_connections ]\n \n                 else:  # Tx test runner\n                     assert(isinstance(b_or_t, CTransaction))\n@@ -369,38 +360,38 @@ def run(self):\n                     # Add to shared tx store and clear map entry\n                     with mininode_lock:\n                         self.tx_store.add_transaction(tx)\n-                        for c in self.connections:\n-                            c.cb.tx_request_map[tx.sha256] = False\n+                        for c in self.p2p_connections:\n+                            c.tx_request_map[tx.sha256] = False\n                     # Again, either inv to all nodes or save for later\n                     if (test_instance.sync_every_tx):\n-                        [ c.cb.send_inv(tx) for c in self.connections ]\n+                        [ c.send_inv(tx) for c in self.p2p_connections ]\n                         self.sync_transaction(tx.sha256, 1)\n                         if (not self.check_mempool(tx.sha256, outcome)):\n                             raise AssertionError(\"Test failed at test %d\" % test_number)\n                     else:\n                         invqueue.append(CInv(1, tx.sha256))\n                 # Ensure we're not overflowing the inv queue\n                 if len(invqueue) == MAX_INV_SZ:\n-                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.p2p_connections ]\n                     invqueue = []\n \n             # Do final sync if we weren't syncing on every block or every tx.\n             if (not test_instance.sync_every_block and block is not None):\n                 if len(invqueue) > 0:\n-                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.p2p_connections ]\n                     invqueue = []\n                 self.sync_blocks(block.sha256, len(test_instance.blocks_and_transactions))\n                 if (not self.check_results(tip, block_outcome)):\n                     raise AssertionError(\"Block test failed at test %d\" % test_number)\n             if (not test_instance.sync_every_tx and tx is not None):\n                 if len(invqueue) > 0:\n-                    [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n+                    [ c.send_message(msg_inv(invqueue)) for c in self.p2p_connections ]\n                     invqueue = []\n                 self.sync_transaction(tx.sha256, len(test_instance.blocks_and_transactions))\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-        [ c.disconnect_node() for c in self.connections ]\n+        [ c.disconnect_node() for c in self.p2p_connections ]\n         self.wait_for_disconnections()\n         self.block_store.close()\n         self.tx_store.close()"
      },
      {
        "sha": "c580d99c79e2017eedb822f9df20a54b4cde4357",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 192,
        "deletions": 168,
        "changes": 360,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -20,10 +20,10 @@\n import socket\n import struct\n import sys\n-import time\n from threading import RLock, Thread\n \n from test_framework.messages import *\n+from test_framework.util import wait_until\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n \n@@ -57,173 +57,34 @@\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n }\n \n-class NodeConnCB():\n-    \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n-\n-    Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\"\"\"\n-    def __init__(self):\n-        # Track whether we have a P2P connection open to the node\n-        self.connected = False\n-        self.connection = None\n-\n-        # Track number of messages of each type received and the most recent\n-        # message of each type\n-        self.message_count = defaultdict(int)\n-        self.last_message = {}\n-\n-        # A count of the number of ping messages we've sent to the node\n-        self.ping_counter = 1\n-\n-    # Message receiving methods\n-\n-    def deliver(self, conn, message):\n-        \"\"\"Receive message and dispatch message to appropriate callback.\n-\n-        We keep a count of how many of each message type has been received\n-        and the most recent message of each type.\"\"\"\n-        with mininode_lock:\n-            try:\n-                command = message.command.decode('ascii')\n-                self.message_count[command] += 1\n-                self.last_message[command] = message\n-                getattr(self, 'on_' + command)(conn, message)\n-            except:\n-                print(\"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0]))\n-                raise\n-\n-    # Callback methods. Can be overridden by subclasses in individual test\n-    # cases to provide custom message handling behaviour.\n-\n-    def on_open(self, conn):\n-        self.connected = True\n-\n-    def on_close(self, conn):\n-        self.connected = False\n-        self.connection = None\n-\n-    def on_addr(self, conn, message): pass\n-    def on_block(self, conn, message): pass\n-    def on_blocktxn(self, conn, message): pass\n-    def on_cmpctblock(self, conn, message): pass\n-    def on_feefilter(self, conn, message): pass\n-    def on_getaddr(self, conn, message): pass\n-    def on_getblocks(self, conn, message): pass\n-    def on_getblocktxn(self, conn, message): pass\n-    def on_getdata(self, conn, message): pass\n-    def on_getheaders(self, conn, message): pass\n-    def on_headers(self, conn, message): pass\n-    def on_mempool(self, conn): pass\n-    def on_pong(self, conn, message): pass\n-    def on_reject(self, conn, message): pass\n-    def on_sendcmpct(self, conn, message): pass\n-    def on_sendheaders(self, conn, message): pass\n-    def on_tx(self, conn, message): pass\n-\n-    def on_inv(self, conn, message):\n-        want = msg_getdata()\n-        for i in message.inv:\n-            if i.type != 0:\n-                want.inv.append(i)\n-        if len(want.inv):\n-            conn.send_message(want)\n-\n-    def on_ping(self, conn, message):\n-        conn.send_message(msg_pong(message.nonce))\n-\n-    def on_verack(self, conn, message):\n-        self.verack_received = True\n-\n-    def on_version(self, conn, message):\n-        assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n-        conn.send_message(msg_verack())\n-        conn.nServices = message.nServices\n-\n-    # Connection helper methods\n-\n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n-    def wait_for_disconnect(self, timeout=60):\n-        test_function = lambda: not self.connected\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    # Message receiving helper methods\n-\n-    def wait_for_block(self, blockhash, timeout=60):\n-        test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_getdata(self, timeout=60):\n-        test_function = lambda: self.last_message.get(\"getdata\")\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_getheaders(self, timeout=60):\n-        test_function = lambda: self.last_message.get(\"getheaders\")\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_inv(self, expected_inv, timeout=60):\n-        \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n-        if len(expected_inv) > 1:\n-            raise NotImplementedError(\"wait_for_inv() will only verify the first inv object\")\n-        test_function = lambda: self.last_message.get(\"inv\") and \\\n-                                self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n-                                self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    def wait_for_verack(self, timeout=60):\n-        test_function = lambda: self.message_count[\"verack\"]\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n-    # Message sending helper functions\n+class NodeConn(asyncore.dispatcher):\n+    \"\"\"A low-level connection object to a node's P2P interface.\n \n-    def send_message(self, message):\n-        if self.connection:\n-            self.connection.send_message(message)\n-        else:\n-            logger.error(\"Cannot send message. No connection to node!\")\n+    This class is responsible for:\n \n-    def send_and_ping(self, message):\n-        self.send_message(message)\n-        self.sync_with_ping()\n+    - opening and closing the TCP connection to the node\n+    - reading bytes from and writing bytes to the socket\n+    - deserializing and serializing the P2P message header\n+    - logging messages as they are sent and received\n \n-    # Sync up with the node\n-    def sync_with_ping(self, timeout=60):\n-        self.send_message(msg_ping(nonce=self.ping_counter))\n-        test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-        self.ping_counter += 1\n+    This class contains no logic for handing the P2P message payloads. It must be\n+    sub-classed and the on_message() callback overridden.\n \n-class NodeConn(asyncore.dispatcher):\n-    \"\"\"The actual NodeConn class\n+    TODO: rename this class P2PConnection.\"\"\"\n \n-    This class provides an interface for a p2p connection to a specified node.\"\"\"\n+    def __init__(self):\n+        super().__init__(map=mininode_socket_map)\n \n-    def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n-        asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n+    def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n         self.sendbuf = b\"\"\n         self.recvbuf = b\"\"\n-        self.last_sent = 0\n         self.state = \"connecting\"\n         self.network = net\n-        self.cb = callback\n         self.disconnect = False\n-        self.nServices = 0\n-\n-        if send_version:\n-            # stuff version msg into sendbuf\n-            vt = msg_version()\n-            vt.nServices = services\n-            vt.addrTo.ip = self.dstaddr\n-            vt.addrTo.port = self.dstport\n-            vt.addrFrom.ip = \"0.0.0.0\"\n-            vt.addrFrom.port = 0\n-            self.send_message(vt, True)\n \n         logger.info('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n \n@@ -232,15 +93,22 @@ def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETW\n         except:\n             self.handle_close()\n \n+    def peer_disconnect(self):\n+        # Connection could have already been closed by other end.\n+        if self.state == \"connected\":\n+            self.disconnect_node()\n+\n     # Connection and disconnection methods\n \n     def handle_connect(self):\n+        \"\"\"asyncore callback when a connection is opened.\"\"\"\n         if self.state != \"connected\":\n             logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n             self.state = \"connected\"\n-            self.cb.on_open(self)\n+            self.on_open()\n \n     def handle_close(self):\n+        \"\"\"asyncore callback when a connection is closed.\"\"\"\n         logger.debug(\"Closing connection to: %s:%d\" % (self.dstaddr, self.dstport))\n         self.state = \"closed\"\n         self.recvbuf = b\"\"\n@@ -249,27 +117,30 @@ def handle_close(self):\n             self.close()\n         except:\n             pass\n-        self.cb.on_close(self)\n+        self.on_close()\n \n     def disconnect_node(self):\n-        \"\"\" Disconnect the p2p connection.\n+        \"\"\"Disconnect the p2p connection.\n \n         Called by the test logic thread. Causes the p2p connection\n         to be disconnected on the next iteration of the asyncore loop.\"\"\"\n         self.disconnect = True\n \n     # Socket read methods\n \n-    def readable(self):\n-        return True\n-\n     def handle_read(self):\n+        \"\"\"asyncore callback when data is read from the socket.\"\"\"\n         t = self.recv(8192)\n         if len(t) > 0:\n             self.recvbuf += t\n-            self.got_data()\n+            self._on_data()\n+\n+    def _on_data(self):\n+        \"\"\"Try to read P2P messages from the recv buffer.\n \n-    def got_data(self):\n+        This method reads data from the buffer in a loop. It deserializes,\n+        parses and verifies the P2P header, then passes the P2P payload to\n+        the on_message callback for processing.\"\"\"\n         try:\n             while True:\n                 if len(self.recvbuf) < 4:\n@@ -294,26 +165,27 @@ def got_data(self):\n                 f = BytesIO(msg)\n                 t = MESSAGEMAP[command]()\n                 t.deserialize(f)\n-                self.got_message(t)\n+                self._log_message(\"receive\", t)\n+                self.on_message(t)\n         except Exception as e:\n             logger.exception('Error reading message:', repr(e))\n             raise\n \n-    def got_message(self, message):\n-        if self.last_sent + 30 * 60 < time.time():\n-            self.send_message(MESSAGEMAP[b'ping']())\n-        self._log_message(\"receive\", message)\n-        self.cb.deliver(self, message)\n+    def on_message(self, message):\n+        \"\"\"Callback for processing a P2P payload. Must be overridden by derived class.\"\"\"\n+        raise NotImplementedError\n \n     # Socket write methods\n \n     def writable(self):\n+        \"\"\"asyncore method to determine whether the handle_write() callback should be called on the next loop.\"\"\"\n         with mininode_lock:\n             pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n         return (length > 0 or pre_connection)\n \n     def handle_write(self):\n+        \"\"\"asyncore callback when data should be written to the socket.\"\"\"\n         with mininode_lock:\n             # asyncore does not expose socket connection, only the first read/write\n             # event, thus we must check connection manually here to know when we\n@@ -331,6 +203,10 @@ def handle_write(self):\n             self.sendbuf = self.sendbuf[sent:]\n \n     def send_message(self, message, pushbuf=False):\n+        \"\"\"Send a P2P message over the socket.\n+\n+        This method takes a P2P payload, builds the P2P header and adds\n+        the message to the send buffer to be sent over the socket.\"\"\"\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n         self._log_message(\"send\", message)\n@@ -353,11 +229,11 @@ def send_message(self, message, pushbuf=False):\n                     self.sendbuf = tmsg\n             else:\n                 self.sendbuf += tmsg\n-            self.last_sent = time.time()\n \n     # Class utility methods\n \n     def _log_message(self, direction, msg):\n+        \"\"\"Logs a message being sent or received over the connection.\"\"\"\n         if direction == \"send\":\n             log_message = \"Send message to \"\n         elif direction == \"receive\":\n@@ -368,6 +244,154 @@ def _log_message(self, direction, msg):\n         logger.debug(log_message)\n \n \n+class NodeConnCB(NodeConn):\n+    \"\"\"A high-level P2P interface class for communicating with a Bitcoin node.\n+\n+    This class provides high-level callbacks for processing P2P message\n+    payloads, as well as convenience methods for interacting with the\n+    node over P2P.\n+\n+    Individual testcases should subclass this and override the on_* methods\n+    if they want to alter message handling behaviour.\n+\n+    TODO: rename this class P2PInterface\"\"\"\n+    def __init__(self):\n+        super().__init__()\n+\n+        # Track number of messages of each type received and the most recent\n+        # message of each type\n+        self.message_count = defaultdict(int)\n+        self.last_message = {}\n+\n+        # A count of the number of ping messages we've sent to the node\n+        self.ping_counter = 1\n+\n+        # The network services received from the peer\n+        self.nServices = 0\n+\n+    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n+        super().peer_connect(*args, **kwargs)\n+\n+        if send_version:\n+            # Send a version msg\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n+    # Message receiving methods\n+\n+    def on_message(self, message):\n+        \"\"\"Receive message and dispatch message to appropriate callback.\n+\n+        We keep a count of how many of each message type has been received\n+        and the most recent message of each type.\"\"\"\n+        with mininode_lock:\n+            try:\n+                command = message.command.decode('ascii')\n+                self.message_count[command] += 1\n+                self.last_message[command] = message\n+                getattr(self, 'on_' + command)(message)\n+            except:\n+                print(\"ERROR delivering %s (%s)\" % (repr(message), sys.exc_info()[0]))\n+                raise\n+\n+    # Callback methods. Can be overridden by subclasses in individual test\n+    # cases to provide custom message handling behaviour.\n+\n+    def on_open(self):\n+        pass\n+\n+    def on_close(self):\n+        pass\n+\n+    def on_addr(self, message): pass\n+    def on_block(self, message): pass\n+    def on_blocktxn(self, message): pass\n+    def on_cmpctblock(self, message): pass\n+    def on_feefilter(self, message): pass\n+    def on_getaddr(self, message): pass\n+    def on_getblocks(self, message): pass\n+    def on_getblocktxn(self, message): pass\n+    def on_getdata(self, message): pass\n+    def on_getheaders(self, message): pass\n+    def on_headers(self, message): pass\n+    def on_mempool(self, message): pass\n+    def on_pong(self, message): pass\n+    def on_reject(self, message): pass\n+    def on_sendcmpct(self, message): pass\n+    def on_sendheaders(self, message): pass\n+    def on_tx(self, message): pass\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            if i.type != 0:\n+                want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_ping(self, message):\n+        self.send_message(msg_pong(message.nonce))\n+\n+    def on_verack(self, message):\n+        self.verack_received = True\n+\n+    def on_version(self, message):\n+        assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n+        self.send_message(msg_verack())\n+        self.nServices = message.nServices\n+\n+    # Connection helper methods\n+\n+    def wait_for_disconnect(self, timeout=60):\n+        test_function = lambda: self.state != \"connected\"\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    # Message receiving helper methods\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_message.get(\"getdata\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_getheaders(self, timeout=60):\n+        test_function = lambda: self.last_message.get(\"getheaders\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n+        if len(expected_inv) > 1:\n+            raise NotImplementedError(\"wait_for_inv() will only verify the first inv object\")\n+        test_function = lambda: self.last_message.get(\"inv\") and \\\n+                                self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n+                                self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    def wait_for_verack(self, timeout=60):\n+        test_function = lambda: self.message_count[\"verack\"]\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n+    # Message sending helper functions\n+\n+    def send_and_ping(self, message):\n+        self.send_message(message)\n+        self.sync_with_ping()\n+\n+    # Sync up with the node\n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        self.ping_counter += 1\n+\n+\n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when\n # using select)"
      },
      {
        "sha": "a9248c764e3d440f7cab4cf7269cc17ea4dd66d5",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2c2dba21855b8cb9b193b1819be73fa4a23a99/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "patch": "@@ -14,7 +14,6 @@\n import time\n \n from .authproxy import JSONRPCException\n-from .mininode import NodeConn\n from .util import (\n     assert_equal,\n     get_rpc_proxy,\n@@ -158,7 +157,7 @@ def node_encrypt_wallet(self, passphrase):\n         self.encryptwallet(passphrase)\n         self.wait_until_stopped()\n \n-    def add_p2p_connection(self, p2p_conn, **kwargs):\n+    def add_p2p_connection(self, p2p_conn, *args, **kwargs):\n         \"\"\"Add a p2p connection to the node.\n \n         This method adds the p2p connection to the self.p2ps list and also\n@@ -167,9 +166,9 @@ def add_p2p_connection(self, p2p_conn, **kwargs):\n             kwargs['dstport'] = p2p_port(self.index)\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n+\n+        p2p_conn.peer_connect(*args, **kwargs)\n         self.p2ps.append(p2p_conn)\n-        kwargs.update({'callback': p2p_conn})\n-        p2p_conn.add_connection(NodeConn(**kwargs))\n \n         return p2p_conn\n \n@@ -185,10 +184,8 @@ def p2p(self):\n     def disconnect_p2ps(self):\n         \"\"\"Close all p2p connections to the node.\"\"\"\n         for p in self.p2ps:\n-            # Connection could have already been closed by other end.\n-            if p.connection is not None:\n-                p.connection.disconnect_node()\n-        self.p2ps = []\n+            p.peer_disconnect()\n+        del self.p2ps[:]\n \n \n class TestNodeCLI():"
      }
    ]
  },
  {
    "sha": "873beca6deda119077f53921f0d19c3ebfc7cc44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzNiZWNhNmRlZGExMTkwNzdmNTM5MjFmMGQxOWMzZWJmYzdjYzQ0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T20:16:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T22:14:48Z"
      },
      "message": "[tests] Rename NodeConn and NodeConnCB\n\nNodeConn -> P2PConnection\nNodeConnCB -> P2PInterface",
      "tree": {
        "sha": "426d8ecde39b8bf44612d5a9b4098d676a5c5917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/426d8ecde39b8bf44612d5a9b4098d676a5c5917"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/873beca6deda119077f53921f0d19c3ebfc7cc44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/873beca6deda119077f53921f0d19c3ebfc7cc44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/873beca6deda119077f53921f0d19c3ebfc7cc44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/873beca6deda119077f53921f0d19c3ebfc7cc44/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2c2dba21855b8cb9b193b1819be73fa4a23a99"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 50,
      "deletions": 55
    },
    "files": [
      {
        "sha": "193ca947bc662db0fb69bf050cd81be5ef15cb62",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -63,12 +63,12 @@ wrappers for them, `msg_block`, `msg_tx`, etc).\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from `NodeConnCB` and pass that to the\n-`NodeConn` object, your code will receive the appropriate callbacks when\n-events of interest arrive.\n+- `P2PConnection` is the class used to connect to a bitcoind.  `P2PInterface`\n+contains the higher level logic for processing P2P payloads and connecting to\n+the Bitcoin Core node application logic. For custom behaviour, subclass the\n+P2PInterface object and override the callback methods.\n \n-- Call `NetworkThread.start()` after all `NodeConn` objects are created to\n+- Call `NetworkThread.start()` after all `P2PInterface` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n "
      },
      {
        "sha": "13104f71bc8a5eb218b9aef46cdc598a7d1a63d5",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -39,14 +39,14 @@\n                                      CTxIn,\n                                      CTxOut,\n                                      NetworkThread,\n-                                     NodeConnCB,\n+                                     P2PInterface,\n                                      msg_block,\n                                      msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n         headers_message.headers = [CBlockHeader(b) for b in new_blocks]"
      },
      {
        "sha": "2af5eb275fc5665ada71d2d63395a6ee7f409d70",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -66,7 +66,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "7a3e565e2c7cd59955bfddc4d6323836a3da54ad",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -54,7 +54,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "289fa248e0dbc1b3e48209730311387be2173586",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -18,10 +18,11 @@\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    NODE_NETWORK,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -30,15 +31,15 @@\n     wait_until,\n )\n \n-# NodeConnCB is a class containing callbacks to be executed when a P2P\n-# message is received from the node-under-test. Subclass NodeConnCB and\n+# P2PInterface is a class containing callbacks to be executed when a P2P\n+# message is received from the node-under-test. Subclass P2PInterface and\n # override the on_*() methods if you need custom behaviour.\n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def __init__(self):\n-        \"\"\"Initialize the NodeConnCB\n+        \"\"\"Initialize the P2PInterface\n \n         Used to inialize custom properties for the Node that aren't\n-        included by default in the base class. Be aware that the NodeConnCB\n+        included by default in the base class. Be aware that the P2PInterface\n         base class already stores a counter for each P2P message type and the\n         last received message of each type, which should be sufficient for the\n         needs of most tests.\n@@ -174,7 +175,7 @@ def run_test(self):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             block_message = msg_block(block)\n-            # Send message is used to send a P2P message to the node over our NodeConn connection\n+            # Send message is used to send a P2P message to the node over our P2PInterface\n             self.nodes[0].p2p.send_message(block_message)\n             self.tip = block.sha256\n             blocks.append(self.tip)\n@@ -199,12 +200,12 @@ def run_test(self):\n         self.nodes[2].p2p.send_message(getdata_request)\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n-        # NodeConnCB objects.\n+        # P2PInterface objects.\n         wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n-        # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving\n-        # messages. The test thread should acquire the global lock before accessing any NodeConn data to avoid locking\n+        # The network thread uses a global lock on data access to the P2PConnection objects when sending and receiving\n+        # messages. The test thread should acquire the global lock before accessing any P2PConnection data to avoid locking\n         # and synchronization issues. Note wait_until() acquires this global lock when testing the predicate.\n         with mininode_lock:\n             for block in self.nodes[2].p2p.block_receive_map.values():"
      },
      {
        "sha": "5ef71c93cf925db53771fcfb564f6b3702f82383",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)"
      },
      {
        "sha": "d9d7c24416555c2119939138b86afd850865be21",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -7,7 +7,7 @@\n Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-We have one NodeConn connection to node0 called test_node, and one to node1\n+We have one P2PInterface connection to node0 called test_node, and one to node1\n called min_work_node.\n \n The test:\n@@ -79,9 +79,9 @@ def setup_network(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # test_node connects to node0 (not whitelisted)\n-        test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n-        # min_work_node connects to node1\n-        min_work_node = self.nodes[1].add_p2p_connection(NodeConnCB())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        # min_work_node connects to node1 (whitelisted)\n+        min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n \n@@ -207,7 +207,7 @@ def run_test(self):\n         # disconnect/reconnect first\n \n         self.nodes[0].disconnect_p2ps()\n-        test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n         test_node.wait_for_verack()\n         test_node.send_message(msg_block(block_h1f))\n@@ -292,7 +292,7 @@ def run_test(self):\n             test_node.wait_for_disconnect()\n \n             self.nodes[0].disconnect_p2ps()\n-            test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n+            test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n             NetworkThread().start() # Start up network handling in another thread\n             test_node.wait_for_verack()"
      },
      {
        "sha": "c43744328c07f0009def00f038d6ccea16ddcfa6",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.script import CScript, OP_TRUE\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.last_sendcmpct = []"
      },
      {
        "sha": "ac55336e3d25c12434a87c548d096208cd1f1a16",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -22,7 +22,7 @@ def allInvsMatch(invsExpected, testnode):\n         time.sleep(1)\n     return False\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.txinvs = []"
      },
      {
        "sha": "209c789f2284589d25be1641ff89af446ac8b67d",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n@@ -75,7 +75,7 @@ def last_header_equals(self, expected_hash, node):\n     # This does not currently test that stale blocks timestamped within the\n     # last month but that have over a month's worth of work are also withheld.\n     def run_test(self):\n-        node0 = self.nodes[0].add_p2p_connection(NodeConnCB())\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start()\n         node0.wait_for_verack()"
      },
      {
        "sha": "b469a9a47a21b2bf9ec3171d8fbd65046bcac043",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -20,7 +20,7 @@\n \n banscore = 10\n \n-class CLazyNode(NodeConnCB):\n+class CLazyNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.unexpected_msg = False\n@@ -139,10 +139,10 @@ def run_test(self):\n         self.log.info(\"Service bits 5 and 7 are allowed after August 1st 2018\")\n         self.nodes[0].setmocktime(1533168000)  # August 2nd 2018\n \n-        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(NodeConnCB(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n-        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(NodeConnCB(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n+        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n+        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Network thread stopped when all previous NodeConnCBs disconnected. Restart it\n+        NetworkThread().start()  # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n \n         wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n         wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)"
      },
      {
        "sha": "d24dbac51db7fc87a0d23f5ceb292dd0855ab424",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -20,7 +20,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Add a p2p connection\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n         NetworkThread().start()\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "a240d79013c22fb58c7a21364f15798ed8fdf998",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -59,7 +59,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n     p2p.sync_with_ping()\n     assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.getdataset = set()"
      },
      {
        "sha": "b2f3a861cfbcb7619d2017040361751b92986f40",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def on_version(self, message):\n         # Don't send a verack in response\n         pass"
      },
      {
        "sha": "be137381d0190e4c1d44631b873a5a857970b8b6",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -23,7 +23,7 @@\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def on_inv(self, message):\n         pass\n "
      },
      {
        "sha": "99b7f6b99ed2465ee288753a36f6783a546d4c2a",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -91,7 +91,7 @@\n     CInv,\n     NODE_WITNESS,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getblocks,\n@@ -110,7 +110,7 @@\n \n DIRECT_FETCH_RESPONSE_TIME = 0.05\n \n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n "
      },
      {
        "sha": "f0f5c847ca8da6d805e5456a7d2d24cbff3c3093",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -39,7 +39,7 @@ def match(self, other):\n     def __repr__(self):\n         return '%i:%s' % (self.code,self.reason or '*')\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()"
      },
      {
        "sha": "9e92a70da15102cbabca2b1aafce908fa849f2bc",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -9,10 +9,8 @@\n This python code was modified from ArtForz' public domain  half-a-node, as\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n-NodeConn: an object which manages p2p connectivity to a bitcoin node\n-NodeConnCB: a base class that describes the interface for receiving\n-            callbacks with network messages from a NodeConn\n-\"\"\"\n+P2PConnection: A low-level connection object to a node's P2P interface\n+P2PInterface: A high-level interface object for communicating to a node over P2P\"\"\"\n import asyncore\n from collections import defaultdict\n from io import BytesIO\n@@ -57,7 +55,7 @@\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n }\n \n-class NodeConn(asyncore.dispatcher):\n+class P2PConnection(asyncore.dispatcher):\n     \"\"\"A low-level connection object to a node's P2P interface.\n \n     This class is responsible for:\n@@ -68,9 +66,7 @@ class NodeConn(asyncore.dispatcher):\n     - logging messages as they are sent and received\n \n     This class contains no logic for handing the P2P message payloads. It must be\n-    sub-classed and the on_message() callback overridden.\n-\n-    TODO: rename this class P2PConnection.\"\"\"\n+    sub-classed and the on_message() callback overridden.\"\"\"\n \n     def __init__(self):\n         super().__init__(map=mininode_socket_map)\n@@ -244,17 +240,15 @@ def _log_message(self, direction, msg):\n         logger.debug(log_message)\n \n \n-class NodeConnCB(NodeConn):\n+class P2PInterface(P2PConnection):\n     \"\"\"A high-level P2P interface class for communicating with a Bitcoin node.\n \n     This class provides high-level callbacks for processing P2P message\n     payloads, as well as convenience methods for interacting with the\n     node over P2P.\n \n     Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\n-\n-    TODO: rename this class P2PInterface\"\"\"\n+    if they want to alter message handling behaviour.\"\"\"\n     def __init__(self):\n         super().__init__()\n \n@@ -399,10 +393,10 @@ def sync_with_ping(self, timeout=60):\n \n # One lock for synchronizing all data access between the networking thread (see\n # NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n+# P2PConnection acquires this lock whenever delivering a message to a P2PInterface,\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n-# access to any data shared with the NodeConnCB or NodeConn.\n+# access to any data shared with the P2PInterface or P2PConnection.\n mininode_lock = RLock()\n \n class NetworkThread(Thread):"
      }
    ]
  },
  {
    "sha": "33698c94bec993bd744536e15252fbf562f93f7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzY5OGM5NGJlYzk5M2JkNzQ0NTM2ZTE1MjUyZmJmNTYyZjkzZjdm",
    "commit": {
      "author": {
        "name": "aaron-hanson",
        "email": "archaeal@gmail.com",
        "date": "2017-11-29T22:58:43Z"
      },
      "committer": {
        "name": "aaron-hanson",
        "email": "archaeal@gmail.com",
        "date": "2017-11-29T23:14:03Z"
      },
      "message": "Trivial: fix comments for ZeroMQ bitcoind args",
      "tree": {
        "sha": "df50fa0bf7f0a6d8541c7f04e53204838480921b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df50fa0bf7f0a6d8541c7f04e53204838480921b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33698c94bec993bd744536e15252fbf562f93f7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33698c94bec993bd744536e15252fbf562f93f7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33698c94bec993bd744536e15252fbf562f93f7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33698c94bec993bd744536e15252fbf562f93f7f/comments",
    "author": {
      "login": "aaron-hanson",
      "id": 8744958,
      "node_id": "MDQ6VXNlcjg3NDQ5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8744958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaron-hanson",
      "html_url": "https://github.com/aaron-hanson",
      "followers_url": "https://api.github.com/users/aaron-hanson/followers",
      "following_url": "https://api.github.com/users/aaron-hanson/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaron-hanson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaron-hanson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaron-hanson/subscriptions",
      "organizations_url": "https://api.github.com/users/aaron-hanson/orgs",
      "repos_url": "https://api.github.com/users/aaron-hanson/repos",
      "events_url": "https://api.github.com/users/aaron-hanson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaron-hanson/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "aaron-hanson",
      "id": 8744958,
      "node_id": "MDQ6VXNlcjg3NDQ5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8744958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaron-hanson",
      "html_url": "https://github.com/aaron-hanson",
      "followers_url": "https://api.github.com/users/aaron-hanson/followers",
      "following_url": "https://api.github.com/users/aaron-hanson/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaron-hanson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaron-hanson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaron-hanson/subscriptions",
      "organizations_url": "https://api.github.com/users/aaron-hanson/orgs",
      "repos_url": "https://api.github.com/users/aaron-hanson/repos",
      "events_url": "https://api.github.com/users/aaron-hanson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaron-hanson/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2c2dba21855b8cb9b193b1819be73fa4a23a99"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5efd3d2187199f8f6938f1dc760ab875caa2b52d",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33698c94bec993bd744536e15252fbf562f93f7f/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33698c94bec993bd744536e15252fbf562f93f7f/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=33698c94bec993bd744536e15252fbf562f93f7f",
        "patch": "@@ -8,8 +8,8 @@\n \n     Bitcoin should be started with the command line arguments:\n         bitcoind -testnet -daemon \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashblock=tcp://127.0.0.1:28332\n "
      },
      {
        "sha": "7032d475e8afb733ab9b10c5e727ac84fc824614",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33698c94bec993bd744536e15252fbf562f93f7f/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33698c94bec993bd744536e15252fbf562f93f7f/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=33698c94bec993bd744536e15252fbf562f93f7f",
        "patch": "@@ -8,8 +8,8 @@\n \n     Bitcoin should be started with the command line arguments:\n         bitcoind -testnet -daemon \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashblock=tcp://127.0.0.1:28332\n "
      }
    ]
  },
  {
    "sha": "38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGQzMWY5NWQzYjVmNmU0OGI4MTk5NDlmMjE2OWFiMzdmNzZhYjBh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-29T23:50:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-29T23:51:16Z"
      },
      "message": "Merge #11395: Qt: Enable searching by transaction id\n\neac2abca0 Qt: Enable searching by transaction id (Luke Dashjr)\nc407c61c5 Qt: Avoid invalidating the search filter, when it doesn't really change (Luke Dashjr)\nb1f634242 Qt: Rename confusingly-named \"address prefix\" to \"search string\" (Luke Dashjr)\n\nPull request description:\n\nTree-SHA512: 1c67037d19689fbaff21d15ed7848ac86188e5de34728312e1f9758dada759cab50d913a5bc09e413ecaa3e07557cf253809b95b5637ff79f2e3cf24d86dd3ed",
      "tree": {
        "sha": "e3021add8d757948ce32242f93648c543dfd1cb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3021add8d757948ce32242f93648c543dfd1cb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlofR/QACgkQHrd2uwPH\nki3o9g/+OdJSWL3H+hYfygE+s5j6SMZAM6wIUP/oJQYIylLfcfSB//HMzk1qizUC\nGLObG86v89f4Q4bYab2/xokKI1cs2Z4pduSyF6tkcHDkVfV2GghEU2ZOQskuOKj8\nzvRnu9PJx9VZqTygU1ftuON62HjZ1D8NSqaK0oREekg74vgTCBcN9U0mBHzn7opU\nnfs0CV/ZeIlaxACtswCYAHTlxEhMvJ87WEgq2FXrY7goSfiZsCl3fxqpmgfRH42v\n9MgOyxnrmomWQBlLQcGamvH1mlB1rhlU3o1w70SrfkEv3KGzNlXjoe/O/bo/CMR5\nrRT+KgCYNDQLB+87V8Ka8N0og4y9NQOSZ1WqqsWHgk4tiY0nNesvDlByBM83cKXw\n9BwQyNX8odDi8Xh2lNo/E/oEZng469ak5BRLoDgD+f4/9YNooBq7D51K9tAjFc8a\n6SvPhWMbpe8QvrCMFyoq49cYIr56VnOc83U0qZKCUGCZWqVXkbHEcRGAh6Ov/L+A\nY5N1Ln3L8WWFX3AJL+mceOuxx+YhyMsCZzvJ5r+nuAtdcWL1Q75VmaR+K5yVws0G\nsn7Tndn/F/M9rrCwoUd5Q94u5zAPbswnetPqmfpoyyQVxBQdwzSY2a0mpRqVVnza\n8d96jVpXyRdXm/GjdAFBRRoPjdejdw6w3QtjFV+Qnq2EOVUVfvA=\n=CqwH\n-----END PGP SIGNATURE-----",
        "payload": "tree e3021add8d757948ce32242f93648c543dfd1cb6\nparent 9f2c2dba21855b8cb9b193b1819be73fa4a23a99\nparent eac2abca02e01c83cc696ebe8a760e842e2f8424\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1511999430 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1511999476 -1000\n\nMerge #11395: Qt: Enable searching by transaction id\n\neac2abca0 Qt: Enable searching by transaction id (Luke Dashjr)\nc407c61c5 Qt: Avoid invalidating the search filter, when it doesn't really change (Luke Dashjr)\nb1f634242 Qt: Rename confusingly-named \"address prefix\" to \"search string\" (Luke Dashjr)\n\nPull request description:\n\nTree-SHA512: 1c67037d19689fbaff21d15ed7848ac86188e5de34728312e1f9758dada759cab50d913a5bc09e413ecaa3e07557cf253809b95b5637ff79f2e3cf24d86dd3ed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2c2dba21855b8cb9b193b1819be73fa4a23a99"
      },
      {
        "sha": "eac2abca02e01c83cc696ebe8a760e842e2f8424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac2abca02e01c83cc696ebe8a760e842e2f8424",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac2abca02e01c83cc696ebe8a760e842e2f8424"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ada73a73dfde307efb08082737885c396bbc22bb",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
        "patch": "@@ -20,7 +20,7 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     QSortFilterProxyModel(parent),\n     dateFrom(MIN_DATE),\n     dateTo(MAX_DATE),\n-    addrPrefix(),\n+    m_search_string(),\n     typeFilter(ALL_TYPES),\n     watchOnlyFilter(WatchOnlyFilter_All),\n     minAmount(0),\n@@ -38,6 +38,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     bool involvesWatchAddress = index.data(TransactionTableModel::WatchonlyRole).toBool();\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n+    QString txid = index.data(TransactionTableModel::TxIDRole).toString();\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n@@ -51,8 +52,11 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n         return false;\n     if(datetime < dateFrom || datetime > dateTo)\n         return false;\n-    if (!address.contains(addrPrefix, Qt::CaseInsensitive) && !label.contains(addrPrefix, Qt::CaseInsensitive))\n+    if (!address.contains(m_search_string, Qt::CaseInsensitive) &&\n+        !  label.contains(m_search_string, Qt::CaseInsensitive) &&\n+        !   txid.contains(m_search_string, Qt::CaseInsensitive)) {\n         return false;\n+    }\n     if(amount < minAmount)\n         return false;\n \n@@ -66,9 +70,10 @@ void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime\n     invalidateFilter();\n }\n \n-void TransactionFilterProxy::setAddressPrefix(const QString &_addrPrefix)\n+void TransactionFilterProxy::setSearchString(const QString &search_string)\n {\n-    this->addrPrefix = _addrPrefix;\n+    if (m_search_string == search_string) return;\n+    m_search_string = search_string;\n     invalidateFilter();\n }\n "
      },
      {
        "sha": "fea7502b2695c5f866d3329b196f305a696716da",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
        "patch": "@@ -35,7 +35,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     };\n \n     void setDateRange(const QDateTime &from, const QDateTime &to);\n-    void setAddressPrefix(const QString &addrPrefix);\n+    void setSearchString(const QString &);\n     /**\n       @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n@@ -57,7 +57,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n private:\n     QDateTime dateFrom;\n     QDateTime dateTo;\n-    QString addrPrefix;\n+    QString m_search_string;\n     quint32 typeFilter;\n     WatchOnlyFilter watchOnlyFilter;\n     CAmount minAmount;"
      },
      {
        "sha": "4d2aac12f0360e6e68596b2c7313272f0664aa4e",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
        "patch": "@@ -95,11 +95,11 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n \n     hlayout->addWidget(typeWidget);\n \n-    addressWidget = new QLineEdit(this);\n+    search_widget = new QLineEdit(this);\n #if QT_VERSION >= 0x040700\n-    addressWidget->setPlaceholderText(tr(\"Enter address or label to search\"));\n+    search_widget->setPlaceholderText(tr(\"Enter address, transaction id, or label to search\"));\n #endif\n-    hlayout->addWidget(addressWidget);\n+    hlayout->addWidget(search_widget);\n \n     amountWidget = new QLineEdit(this);\n #if QT_VERSION >= 0x040700\n@@ -187,8 +187,8 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n     connect(amountWidget, SIGNAL(textChanged(QString)), amount_typing_delay, SLOT(start()));\n     connect(amount_typing_delay, SIGNAL(timeout()), this, SLOT(changedAmount()));\n-    connect(addressWidget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n-    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedPrefix()));\n+    connect(search_widget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n+    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedSearch()));\n \n     connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n     connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n@@ -326,11 +326,11 @@ void TransactionView::chooseWatchonly(int idx)\n         (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n }\n \n-void TransactionView::changedPrefix()\n+void TransactionView::changedSearch()\n {\n     if(!transactionProxyModel)\n         return;\n-    transactionProxyModel->setAddressPrefix(addressWidget->text());\n+    transactionProxyModel->setSearchString(search_widget->text());\n }\n \n void TransactionView::changedAmount()"
      },
      {
        "sha": "f72a828b00f6c20333b2522160e734186cc25505",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d31f95d3b5f6e48b819949f2169ab37f76ab0a/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
        "patch": "@@ -66,7 +66,7 @@ class TransactionView : public QWidget\n     QComboBox *dateWidget;\n     QComboBox *typeWidget;\n     QComboBox *watchOnlyWidget;\n-    QLineEdit *addressWidget;\n+    QLineEdit *search_widget;\n     QLineEdit *amountWidget;\n \n     QMenu *contextMenu;\n@@ -113,7 +113,7 @@ public Q_SLOTS:\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);\n     void changedAmount();\n-    void changedPrefix();\n+    void changedSearch();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n "
      }
    ]
  },
  {
    "sha": "6816484a02d8cbcb2c9a6357ce708374a7241ce0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODE2NDg0YTAyZDhjYmNiMmM5YTYzNTdjZTcwODM3NGE3MjQxY2Uw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-30T00:17:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-30T00:17:27Z"
      },
      "message": "Merge #11792: Trivial: fix comments for ZeroMQ bitcoind args\n\n33698c94b Trivial: fix comments for ZeroMQ bitcoind args (aaron-hanson)\n\nPull request description:\n\n  The ZeroMQ command-line args suggested here had the \"-zmqpubhashblock\" arg duplicated and the \"-zmqpubrawblock\" arg missing.\n\nTree-SHA512: ef3a90f6d82367104aa751778074f6f56d2aaa9cbbf980731f60ee77393db256551423f5414c5b41f09707d08828afc663d06661152ef504a690ceb13c80bc0d",
      "tree": {
        "sha": "5b9f6ce51c803844934c7d6faa49094ec86c3e85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b9f6ce51c803844934c7d6faa49094ec86c3e85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlofThcACgkQHrd2uwPH\nki1KGg//RHAyXTPAGheo7DJBdJOs9GL8R5D9UJB93xFKtQldu1n6Gidm4fCkn1mI\nYmrsvJqLxOHuwX78INqvdyCIYJRDh69jzEWWNsdgHuET7BjsJxGoXxtUJ6Yn9Faz\n+PBfZ8Yf5tcbv5I5tL6+q6U8bUIoAdTXflyc1ajKgK/bbhaydO3M3/Nof+CzZeOZ\nF3boyN5tOvTSWf8/AnfwDT6ftYv7REfY00yZN+S/scjU1hiTR3tWyhDR7DC8bcAN\nrHfYTXTeYrx2V/Chqz8Rx8qHuDkS9uzYFv/b44L3G8rfc2Y60Rw74rx7XDF62nHC\nLTsNSuzNucedgRm0s2XR2F9M4Lk7ZMEDU096BVmaXwqoPfZydSzR6rXQUsvrsTi5\nv6Alhx+QQ0svRPVY8N7UajxVxGTm12PCefi+O9MRevMEW2rhYVpbKWytB/PXXpeM\n99EeZDLvRoY0hKyqBGWTKtmskAlzNFecqilNVNYo0E0T/0zG4BPAJ0LKymUDaNus\nI/ZIR/EBWFpOb8qBlfP2tQfdUf14QLROR7ZDiyh0YIMnZmoohTI62prhaOiGaDTU\nMVkrv4x8GUMbP48YR4T7DKXOHySGHKQfqv+HXeljZwLrUATUt2w1L40rtizPN07c\nvY9UjIJ8MPseQxvh+lSgsMlZuzmEMlQrHR85q7ot5WiovPDOCZo=\n=rf+P\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b9f6ce51c803844934c7d6faa49094ec86c3e85\nparent 38d31f95d3b5f6e48b819949f2169ab37f76ab0a\nparent 33698c94bec993bd744536e15252fbf562f93f7f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1512001044 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512001047 -1000\n\nMerge #11792: Trivial: fix comments for ZeroMQ bitcoind args\n\n33698c94b Trivial: fix comments for ZeroMQ bitcoind args (aaron-hanson)\n\nPull request description:\n\n  The ZeroMQ command-line args suggested here had the \"-zmqpubhashblock\" arg duplicated and the \"-zmqpubrawblock\" arg missing.\n\nTree-SHA512: ef3a90f6d82367104aa751778074f6f56d2aaa9cbbf980731f60ee77393db256551423f5414c5b41f09707d08828afc663d06661152ef504a690ceb13c80bc0d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6816484a02d8cbcb2c9a6357ce708374a7241ce0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d31f95d3b5f6e48b819949f2169ab37f76ab0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38d31f95d3b5f6e48b819949f2169ab37f76ab0a"
      },
      {
        "sha": "33698c94bec993bd744536e15252fbf562f93f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33698c94bec993bd744536e15252fbf562f93f7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33698c94bec993bd744536e15252fbf562f93f7f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5efd3d2187199f8f6938f1dc760ab875caa2b52d",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6816484a02d8cbcb2c9a6357ce708374a7241ce0/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6816484a02d8cbcb2c9a6357ce708374a7241ce0/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "patch": "@@ -8,8 +8,8 @@\n \n     Bitcoin should be started with the command line arguments:\n         bitcoind -testnet -daemon \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashblock=tcp://127.0.0.1:28332\n "
      },
      {
        "sha": "7032d475e8afb733ab9b10c5e727ac84fc824614",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6816484a02d8cbcb2c9a6357ce708374a7241ce0/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6816484a02d8cbcb2c9a6357ce708374a7241ce0/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "patch": "@@ -8,8 +8,8 @@\n \n     Bitcoin should be started with the command line arguments:\n         bitcoind -testnet -daemon \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                 -zmqpubhashblock=tcp://127.0.0.1:28332\n "
      }
    ]
  },
  {
    "sha": "6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDNkYzUyYjZiYWQxY2RiMWM4ODFiYWY4YmI3Njc0NjVhNmMyYzhk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T07:36:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T07:37:09Z"
      },
      "message": "Merge #9254: [depends] ZeroMQ 4.2.2\n\n126999d depends: fix zmq build with mingw < 4.0 (Cory Fields)\n387879d [depends] ZeroMQ 4.2.2 (fanquake)\n\nPull request description:\n\n  Update depends ZeroMQ to 4.2.2, the release notes are available [here](https://github.com/zeromq/libzmq/releases).\n\n  We can drop both patches, as they have both been merged upstream (they actually had been for some time but just hadn't yet made it into a release).\n\n  `--without-documentation` is deprecated and has been replaced with `--without-docs`.\n  `--disable-perf` disables building performance measuring tools, which are enabled by default, see the libzmq [configure.ac](https://github.com/zeromq/libzmq/blob/master/configure.ac#L367).\n  Updated dependencies.md.\n  `--disable-curve-keygen` disable building the curve key generation tool. See [here](https://github.com/zeromq/libzmq/blob/master/configure.ac#L405).\n\n  Can someone on windows test that this is still working correctly. Maybe @achow101 ?\n\nTree-SHA512: c6c4b15f545b6de21648f05027b5500fca0e6b5b72e791ac9a0aa523c57f2feb5aae94e42531275dddd922e11e462a52f08be1118ba1629c3cae765b18e5d720",
      "tree": {
        "sha": "5c1524fe8b5fd49934d95ef00160ca9f8972ae4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1524fe8b5fd49934d95ef00160ca9f8972ae4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH7UlAAoJEB5K7WKYbNJdtCYH/3PAQQ/DFqhJbghug8/Tpkrx\ntsJf5UEeFSEEXv8xbqtGgKr15ZW4/+oJYujho6YjTDoIvBqw7X2L7Jj3Ff8psuzt\ncaZn0n9ff/6zTi7vBGAfIPIfwR+/OjcsM1FQ6g9TJSuQXYGIiT9QojXkiK/dUpA7\noXBh8JVY8DB1zyDEQElTi5xBLLkvPNUDQFmFUgW1DWDKF1PJVZY4m9uRwau/4TYe\nVmxsQf/mqelrxAICU48ofJfdCguT0nKsODpTMvIWjOyAC4VDtt9ETf97qYDr0UqW\nDLeJNsTN+b9uS//IO5jp1CI7aBtxlF49xjk75QFH+3hA4oo7BLzKzT5JDGlCGf8=\n=XYDK\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c1524fe8b5fd49934d95ef00160ca9f8972ae4e\nparent 6816484a02d8cbcb2c9a6357ce708374a7241ce0\nparent 126999d1cc1b2513cb2ca62a70db0cd6a912a7ba\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512027393 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512027429 +0100\n\nMerge #9254: [depends] ZeroMQ 4.2.2\n\n126999d depends: fix zmq build with mingw < 4.0 (Cory Fields)\n387879d [depends] ZeroMQ 4.2.2 (fanquake)\n\nPull request description:\n\n  Update depends ZeroMQ to 4.2.2, the release notes are available [here](https://github.com/zeromq/libzmq/releases).\n\n  We can drop both patches, as they have both been merged upstream (they actually had been for some time but just hadn't yet made it into a release).\n\n  `--without-documentation` is deprecated and has been replaced with `--without-docs`.\n  `--disable-perf` disables building performance measuring tools, which are enabled by default, see the libzmq [configure.ac](https://github.com/zeromq/libzmq/blob/master/configure.ac#L367).\n  Updated dependencies.md.\n  `--disable-curve-keygen` disable building the curve key generation tool. See [here](https://github.com/zeromq/libzmq/blob/master/configure.ac#L405).\n\n  Can someone on windows test that this is still working correctly. Maybe @achow101 ?\n\nTree-SHA512: c6c4b15f545b6de21648f05027b5500fca0e6b5b72e791ac9a0aa523c57f2feb5aae94e42531275dddd922e11e462a52f08be1118ba1629c3cae765b18e5d720\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6816484a02d8cbcb2c9a6357ce708374a7241ce0"
      },
      {
        "sha": "126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 38,
      "deletions": 53
    },
    "files": [
      {
        "sha": "74bf4e9e115a7f8cc06043eb77ff0ebb5382abda",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "patch": "@@ -1,19 +1,18 @@\n package=zeromq\n-$(package)_version=4.1.5\n-$(package)_download_path=https://github.com/zeromq/zeromq4-1/releases/download/v$($(package)_version)/\n+$(package)_version=4.2.2\n+$(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=04aac57f081ffa3a2ee5ed04887be9e205df3a7ddade0027460b8042432bdbcf\n-$(package)_patches=9114d3957725acd34aa8b8d011585812f3369411.patch 9e6745c12e0b100cd38acecc16ce7db02905e27c.patch\n+$(package)_sha256_hash=5b23f4ca9ef545d5bd3af55d305765e3ee06b986263b31967435d285a3e6df6b\n+$(package)_patches=0001-fix-build-with-older-mingw64.patch\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium --disable-curve\n+  $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf\n   $(package)_config_opts_linux=--with-pic\n   $(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/9114d3957725acd34aa8b8d011585812f3369411.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch && \\\n+   patch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n   ./autogen.sh\n endef\n \n@@ -22,7 +21,7 @@ define $(package)_config_cmds\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) libzmq.la\n+  $(MAKE) src/libzmq.la\n endef\n \n define $(package)_stage_cmds"
      },
      {
        "sha": "a6c508fb8a1e6c14e61c28ac2299fdcf7823d181",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "patch": "@@ -0,0 +1,30 @@\n+From 1a159c128c69a42d90819375c06a39994f3fbfc1 Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Tue, 28 Nov 2017 20:33:25 -0500\n+Subject: [PATCH] fix build with older mingw64\n+\n+---\n+ src/windows.hpp | 7 +++++++\n+ 1 file changed, 7 insertions(+)\n+\n+diff --git a/src/windows.hpp b/src/windows.hpp\n+index 99e889d..e69038e 100644\n+--- a/src/windows.hpp\n++++ b/src/windows.hpp\n+@@ -55,6 +55,13 @@\n+ #include <winsock2.h>\n+ #include <windows.h>\n+ #include <mswsock.h>\n++\n++#if defined __MINGW64_VERSION_MAJOR && __MINGW64_VERSION_MAJOR < 4\n++// Workaround for mingw-w64 < v4.0 which did not include ws2ipdef.h in iphlpapi.h.\n++// Fixed in mingw-w64 by 9bd8fe9148924840d315b4c915dd099955ea89d1.\n++#include <ws2def.h>\n++#include <ws2ipdef.h>\n++#endif\n+ #include <iphlpapi.h>\n+\n+ #if !defined __MINGW32__\n+--\n+2.7.4\n+"
      },
      {
        "sha": "f704b3d94fda8a2bd90ac422c8b267b02bc60f5c",
        "filename": "depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6816484a02d8cbcb2c9a6357ce708374a7241ce0/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6816484a02d8cbcb2c9a6357ce708374a7241ce0/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch?ref=6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "patch": "@@ -1,22 +0,0 @@\n-From 9114d3957725acd34aa8b8d011585812f3369411 Mon Sep 17 00:00:00 2001\n-From: Jeroen Ooms <jeroenooms@gmail.com>\n-Date: Tue, 20 Oct 2015 13:10:38 +0200\n-Subject: [PATCH] enable static libraries on mingw\n-\n----\n- configure.ac | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/configure.ac b/configure.ac\n-index 393505b..e92131a 100644\n---- a/configure.ac\n-+++ b/configure.ac\n-@@ -265,7 +265,7 @@ case \"${host_os}\" in\n-         libzmq_dso_visibility=\"no\"\n-\n-         if test \"x$enable_static\" = \"xyes\"; then\n--            AC_MSG_ERROR([Building static libraries is not supported under MinGW32])\n-+            CPPFLAGS=\"-DZMQ_STATIC\"\n-         fi\n-\n- \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "9aff2c179a1982e6af89a410d06c42d1a0fbad90",
        "filename": "depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6816484a02d8cbcb2c9a6357ce708374a7241ce0/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6816484a02d8cbcb2c9a6357ce708374a7241ce0/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch?ref=6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "patch": "@@ -1,22 +0,0 @@\n-From 9e6745c12e0b100cd38acecc16ce7db02905e27c Mon Sep 17 00:00:00 2001\n-From: David Millard <dmillard10@gmail.com>\n-Date: Tue, 10 May 2016 13:53:53 -0700\n-Subject: [PATCH] Fix autotools for static MinGW builds\n-\n----\n- configure.ac | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/configure.ac b/configure.ac\n-index 5a0fa14..def6ea7 100644\n---- a/configure.ac\n-+++ b/configure.ac\n-@@ -259,7 +259,7 @@ case \"${host_os}\" in\n-         libzmq_dso_visibility=\"no\"\n-\n-         if test \"x$enable_static\" = \"xyes\"; then\n--            CPPFLAGS=\"-DZMQ_STATIC\"\n-+            CPPFLAGS=\"-DZMQ_STATIC $CPPFLAGS\"\n-         fi\n-\n- \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "5c5645de9785d69de90f220422a911224f5c5164",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "patch": "@@ -27,5 +27,5 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Qt | [5.7.1](https://download.qt.io/official_releases/qt/) | 4.7+ | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L94) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L93) (Linux only) |\n-| ZeroMQ | [4.1.5](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n+| ZeroMQ | [4.2.2](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n | zlib | [1.2.11](http://zlib.net/) |  |  |  | No |"
      }
    ]
  },
  {
    "sha": "9b80fc1498d517b67657c4765f889364efabe683",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjgwZmMxNDk4ZDUxN2I2NzY1N2M0NzY1Zjg4OTM2NGVmYWJlNjgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T08:27:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T08:29:25Z"
      },
      "message": "Prefix leveldb debug logging\n\nAdd leveldb: prefix to leveldb debug logging lines.\nleveldb debug messages come in various scary flavors such as:\n\n    2017-11-30 08:26:31 leveldb: Recovering log #26\n    2017-11-30 08:26:31 leveldb: Level-0 table #28: started\n    2017-11-30 08:26:31 leveldb: Level-0 table #28: 597 bytes OK\n    2017-11-30 08:26:31 leveldb: Delete type=0 #26\n    2017-11-30 08:26:31 leveldb: Delete type=3 #24\n\nso it's reasonably important to mark them as coming from leveldb\ninternals and not from consensus validation wallet or such.\n\n(this only affects `-debug=leveldb` or `-debug=1` otherwise you won't\nsee them in the first place)",
      "tree": {
        "sha": "827f23ea4dbc15a405f6d1d5d9a66eb377d2b0df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827f23ea4dbc15a405f6d1d5d9a66eb377d2b0df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b80fc1498d517b67657c4765f889364efabe683",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b80fc1498d517b67657c4765f889364efabe683",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b80fc1498d517b67657c4765f889364efabe683",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b80fc1498d517b67657c4765f889364efabe683/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eb29be05c5176099cb7a6f0f8c3ef0419c8bcf76",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b80fc1498d517b67657c4765f889364efabe683/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b80fc1498d517b67657c4765f889364efabe683/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=9b80fc1498d517b67657c4765f889364efabe683",
        "patch": "@@ -64,7 +64,7 @@ class CBitcoinLevelDBLogger : public leveldb::Logger {\n \n                 assert(p <= limit);\n                 base[std::min(bufsize - 1, (int)(p - base))] = '\\0';\n-                LogPrintStr(base);\n+                LogPrintf(\"leveldb: %s\", base);\n                 if (base != buffer) {\n                     delete[] base;\n                 }"
      }
    ]
  },
  {
    "sha": "ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjE0ZjJlM2ZmODFjNzk2NjZmZGQ1YWEzNzkwZDFkMzBmNGY4MWU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T08:32:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T09:12:19Z"
      },
      "message": "Merge #11191: RPC: Improve help text and behavior of RPC-logging.\n\nc60c49b Improve help text and behavior of RPC-logging (Akio Nakamura)\n\nPull request description:\n\n  1. It is allowed `libevent` logging to be updated during runtime,\n    but still described that restriction in the help text.\n    So we delete these text.\n  2. Add a descrption about the evaluation order of `<include>` and\n    `<exclude>` to clarify how debug loggig categories to be set.\n  3. Add a description about the available logging category `\"all\"`\n    which is not explained.\n  4. Add `\"optional\"` to the help text of `<include>` and `<exclude>`.\n  5. Add missing new lines before `\"Argument:\"`.\n  6. `\"0\"`,`\"1\"` are allowed in both array of `<include>` and `<exclude>`.\n    `\"0\"` is **ignored** and `\"1\"` is treated **same as** `\"all\"`.\n    It is confusing, so forbid them.\n  7. It always returns all logging categories with status.\n    Fix the help text to match this behavior.\n\nTree-SHA512: c2142da1a9bf714af8ebc38ac0d82394e2073fc0bd56f136372e3db7b2af3b6746f8d6b0241fe66c1698c208c124deb076be83f07dec0d0a180ad150593af415",
      "tree": {
        "sha": "e2fec610f660a195f83cbf14059aeaefdbea0eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2fec610f660a195f83cbf14059aeaefdbea0eb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH8tzAAoJEB5K7WKYbNJdTJQIAM2I17REi4xXSC4CZQozI6Hc\nT0OLnaJnsEuKSAhxbdzgw1kbKy4rZCzwCveaSbRWqc4KD4KdKGgdK2bJnyi4Ub2O\n/JbTDXq5fUsMCyVRTd3hBEa2KFpOvSd8vuWeLQNWhNkKnSp5wODYGRolOT7P7lQ/\nah0zShnEZsWvgcyqphyhdXXEqcO4oRgjpm1jnQgdmiL94g3slTaGg8oIjW21fJHH\nUqo86e/+zDFTd/W684VD8W+KNc++MjBCupM2K4u1QKGKy2iiL7Uu3HDAjOHycVr1\nLXBTxvSz2E8zibQN9fKLO9Fya6mGlS5B4nNovgBz+1TeDoH4m5ARzTNwxB8Cadg=\n=tmzy\n-----END PGP SIGNATURE-----",
        "payload": "tree e2fec610f660a195f83cbf14059aeaefdbea0eb2\nparent 6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d\nparent c60c49b6794279325725a5c3c1a8d3dc6764b966\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512030755 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512033139 +0100\n\nMerge #11191: RPC: Improve help text and behavior of RPC-logging.\n\nc60c49b Improve help text and behavior of RPC-logging (Akio Nakamura)\n\nPull request description:\n\n  1. It is allowed `libevent` logging to be updated during runtime,\n    but still described that restriction in the help text.\n    So we delete these text.\n  2. Add a descrption about the evaluation order of `<include>` and\n    `<exclude>` to clarify how debug loggig categories to be set.\n  3. Add a description about the available logging category `\"all\"`\n    which is not explained.\n  4. Add `\"optional\"` to the help text of `<include>` and `<exclude>`.\n  5. Add missing new lines before `\"Argument:\"`.\n  6. `\"0\"`,`\"1\"` are allowed in both array of `<include>` and `<exclude>`.\n    `\"0\"` is **ignored** and `\"1\"` is treated **same as** `\"all\"`.\n    It is confusing, so forbid them.\n  7. It always returns all logging categories with status.\n    Fix the help text to match this behavior.\n\nTree-SHA512: c2142da1a9bf714af8ebc38ac0d82394e2073fc0bd56f136372e3db7b2af3b6746f8d6b0241fe66c1698c208c124deb076be83f07dec0d0a180ad150593af415\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d"
      },
      {
        "sha": "c60c49b6794279325725a5c3c1a8d3dc6764b966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c60c49b6794279325725a5c3c1a8d3dc6764b966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c60c49b6794279325725a5c3c1a8d3dc6764b966"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 30,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d12df147a1851fc1187bec9c76cedba4815c8dea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
        "patch": "@@ -919,7 +919,8 @@ bool AppInitParameterInteraction()\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n         const std::vector<std::string> categories = gArgs.GetArgs(\"-debug\");\n \n-        if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n+        if (std::none_of(categories.begin(), categories.end(),\n+            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 uint32_t flag = 0;\n                 if (!GetLogCategory(&flag, &cat)) {"
      },
      {
        "sha": "c511aa0eb245610f4cc8f6620669a728e7a7a965",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 8,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
        "patch": "@@ -533,6 +533,9 @@ uint32_t getCategoryMask(UniValue cats) {\n         if (!GetLogCategory(&flag, &cat)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n         }\n+        if (flag == BCLog::NONE) {\n+            return 0;\n+        }\n         mask |= flag;\n     }\n     return mask;\n@@ -542,16 +545,32 @@ UniValue logging(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"logging [include,...] <exclude>\\n\"\n+            \"logging ( <include> <exclude> )\\n\"\n             \"Gets and sets the logging configuration.\\n\"\n-            \"When called without an argument, returns the list of categories that are currently being debug logged.\\n\"\n-            \"When called with arguments, adds or removes categories from debug logging.\\n\"\n+            \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n+            \"When called with arguments, adds or removes categories from debug logging and return the lists above.\\n\"\n+            \"The arguments are evaluated in order \\\"include\\\", \\\"exclude\\\".\\n\"\n+            \"If an item is both included and excluded, it will thus end up being excluded.\\n\"\n             \"The valid logging categories are: \" + ListLogCategories() + \"\\n\"\n-            \"libevent logging is configured on startup and cannot be modified by this RPC during runtime.\"\n-            \"Arguments:\\n\"\n-            \"1. \\\"include\\\" (array of strings) add debug logging for these categories.\\n\"\n-            \"2. \\\"exclude\\\" (array of strings) remove debug logging for these categories.\\n\"\n-            \"\\nResult: <categories>  (string): a list of the logging categories that are active.\\n\"\n+            \"In addition, the following are available as category names with special meanings:\\n\"\n+            \"  - \\\"all\\\",  \\\"1\\\" : represent all logging categories.\\n\"\n+            \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"include\\\"        (array of strings, optional) A json array of categories to add debug logging\\n\"\n+            \"     [\\n\"\n+            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+            \"2. \\\"exclude\\\"        (array of strings, optional) A json array of categories to remove debug logging\\n\"\n+            \"     [\\n\"\n+            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n+            \"  \\\"category\\\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\\n\"\n+            \"  ...\\n\"\n+            \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], \\\"[libevent]\\\"\")"
      },
      {
        "sha": "b2023b8322a3592888227d7e5c8d2f03d9079153",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
        "patch": "@@ -220,6 +220,7 @@ struct CLogCategoryDesc\n const CLogCategoryDesc LogCategories[] =\n {\n     {BCLog::NONE, \"0\"},\n+    {BCLog::NONE, \"none\"},\n     {BCLog::NET, \"net\"},\n     {BCLog::TOR, \"tor\"},\n     {BCLog::MEMPOOL, \"mempool\"},"
      }
    ]
  },
  {
    "sha": "543ab40a44d32cccbdc309fe184660f726c034d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDNhYjQwYTQ0ZDMyY2NjYmRjMzA5ZmUxODQ2NjBmNzI2YzAzNGQy",
    "commit": {
      "author": {
        "name": "Varunram Ganesh",
        "email": "vrg2009@ymail.com",
        "date": "2017-11-30T07:17:19Z"
      },
      "committer": {
        "name": "Varunram",
        "email": "vrg2009@ymail.com",
        "date": "2017-11-30T09:22:06Z"
      },
      "message": "Docs: Bump OSX version to 10.13 in build-osx.md",
      "tree": {
        "sha": "fc7075298078b6d39107dc93d51d7996fbece197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc7075298078b6d39107dc93d51d7996fbece197"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/543ab40a44d32cccbdc309fe184660f726c034d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ab40a44d32cccbdc309fe184660f726c034d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/543ab40a44d32cccbdc309fe184660f726c034d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ab40a44d32cccbdc309fe184660f726c034d2/comments",
    "author": {
      "login": "Varunram",
      "id": 18598959,
      "node_id": "MDQ6VXNlcjE4NTk4OTU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18598959?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Varunram",
      "html_url": "https://github.com/Varunram",
      "followers_url": "https://api.github.com/users/Varunram/followers",
      "following_url": "https://api.github.com/users/Varunram/following{/other_user}",
      "gists_url": "https://api.github.com/users/Varunram/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Varunram/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Varunram/subscriptions",
      "organizations_url": "https://api.github.com/users/Varunram/orgs",
      "repos_url": "https://api.github.com/users/Varunram/repos",
      "events_url": "https://api.github.com/users/Varunram/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Varunram/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Varunram",
      "id": 18598959,
      "node_id": "MDQ6VXNlcjE4NTk4OTU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18598959?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Varunram",
      "html_url": "https://github.com/Varunram",
      "followers_url": "https://api.github.com/users/Varunram/followers",
      "following_url": "https://api.github.com/users/Varunram/following{/other_user}",
      "gists_url": "https://api.github.com/users/Varunram/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Varunram/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Varunram/subscriptions",
      "organizations_url": "https://api.github.com/users/Varunram/orgs",
      "repos_url": "https://api.github.com/users/Varunram/repos",
      "events_url": "https://api.github.com/users/Varunram/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Varunram/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6816484a02d8cbcb2c9a6357ce708374a7241ce0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6663016ed85394ad82fb7a584bd1a907a8f54f02",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ab40a44d32cccbdc309fe184660f726c034d2/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ab40a44d32cccbdc309fe184660f726c034d2/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=543ab40a44d32cccbdc309fe184660f726c034d2",
        "patch": "@@ -110,6 +110,6 @@ Uncheck everything except Qt Creator during the installation process.\n Notes\n -----\n \n-* Tested on OS X 10.8 through 10.12 on 64-bit Intel processors only.\n+* Tested on OS X 10.8 through 10.13 on 64-bit Intel processors only.\n \n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)"
      }
    ]
  },
  {
    "sha": "8879d50b18891564beebac7c3bc043a8023a4456",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODc5ZDUwYjE4ODkxNTY0YmVlYmFjN2MzYmMwNDNhODAyM2E0NDU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:05:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:05:51Z"
      },
      "message": "Merge #11793: Docs: Bump OS X version to 10.13\n\n543ab40 Docs: Bump OSX version to 10.13 in build-osx.md (Varunram Ganesh)\n\nPull request description:\n\n  Core works fine on macOS 10.13\n\nTree-SHA512: 44807920e3d5518c98d68191ed614019934bb702df9695389f8178a00a7c5afccd90fad68a07568cdc3e3d04068bddf434942fb81dceb6cbde9bb4ff4e49e425",
      "tree": {
        "sha": "9c8c5b16f882d5bfa833204b4912d65cf3bb4ea4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c8c5b16f882d5bfa833204b4912d65cf3bb4ea4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8879d50b18891564beebac7c3bc043a8023a4456",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH9f/AAoJEB5K7WKYbNJdV+UIANHL5idRDVjMHBmFQoxaxmRn\n7AiFwL9KLk942t0kZrJ6QSsrPZt4WZV4kbJMiZqf3Q622DgnIZI6rHE5z0StuQMH\n8FG4RoGa8Au/3p4v75XqNkNnJz/XFgt30d5M+KE3Dzjlw4YuK/Fh6lOc6qHrjLK2\nY+nSnYFvjpVuMGtoMAwUvp53w/jTqWmVJ+S63szjupiP+VouyIH+rKmRq3/8NDhi\ngo5rCrXnc/FaM71l4i24R1AIeqoT6qaAgPVLWzcqG0CEQAxYrQ3NAloCGnPb1Krr\ncWoJk8U1GOtnWAEdtWLCh7fgyOhGioVbIrf/5hav0Eunrfv9a4EtfMROuc0sYdE=\n=Rm5N\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c8c5b16f882d5bfa833204b4912d65cf3bb4ea4\nparent ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4\nparent 543ab40a44d32cccbdc309fe184660f726c034d2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512036317 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512036351 +0100\n\nMerge #11793: Docs: Bump OS X version to 10.13\n\n543ab40 Docs: Bump OSX version to 10.13 in build-osx.md (Varunram Ganesh)\n\nPull request description:\n\n  Core works fine on macOS 10.13\n\nTree-SHA512: 44807920e3d5518c98d68191ed614019934bb702df9695389f8178a00a7c5afccd90fad68a07568cdc3e3d04068bddf434942fb81dceb6cbde9bb4ff4e49e425\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8879d50b18891564beebac7c3bc043a8023a4456",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8879d50b18891564beebac7c3bc043a8023a4456",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8879d50b18891564beebac7c3bc043a8023a4456/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4"
      },
      {
        "sha": "543ab40a44d32cccbdc309fe184660f726c034d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ab40a44d32cccbdc309fe184660f726c034d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/543ab40a44d32cccbdc309fe184660f726c034d2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6663016ed85394ad82fb7a584bd1a907a8f54f02",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8879d50b18891564beebac7c3bc043a8023a4456/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8879d50b18891564beebac7c3bc043a8023a4456/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=8879d50b18891564beebac7c3bc043a8023a4456",
        "patch": "@@ -110,6 +110,6 @@ Uncheck everything except Qt Creator during the installation process.\n Notes\n -----\n \n-* Tested on OS X 10.8 through 10.12 on 64-bit Intel processors only.\n+* Tested on OS X 10.8 through 10.13 on 64-bit Intel processors only.\n \n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)"
      }
    ]
  },
  {
    "sha": "16fff802574159286e424802442551dc9eba9098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmZmZjgwMjU3NDE1OTI4NmU0MjQ4MDI0NDI1NTFkYzllYmE5MDk4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:14:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:15:36Z"
      },
      "message": "Merge #11783: Fix shutdown in case of errors during initialization\n\nd31e5c1 Fix shutdown in case of errors during initialization (Wladimir J. van der Laan)\n\nPull request description:\n\n  PR #10286 introduced a few steps which are not robust to early shutdown in initialization.\n\n  Stumbled upon this with #11781, not sure if there are other scenarios that can trigger it, but it's good to harden against this in any case.\n\n  E.g.\n  ```\n  $ src/bitcoind  -debuglogfile=/dfdf\n  Error: Could not open debug log file /dfdf\n  Program received signal SIGSEGV, Segmentation fault.\n  UnregisterValidationInterface (pwalletIn=0x0) at /.../bitcoin/src/validationinterface.cpp:82\n  82          g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n  (gdb) bt\n  #0  UnregisterValidationInterface (pwalletIn=0x0) at /.../bitcoin/src/validationinterface.cpp:82\n  #1  0x00005555555a11fc in Shutdown () at /.../bitcoin/src/init.cpp:196\n  #2  0x00005555555961cc in AppInit (argc=<optimized out>, argv=<optimized out>) at /.../bitcoin/src/bitcoind.cpp:183\n  #3  0x0000555555596249 in main (argc=0, argv=0x555555ecf200) at /.../bitcoin/src/bitcoind.cpp:19\n  ```\n\nTree-SHA512: 7dd9570a9803514a17781bfadf1edde47e96df4e852cce2f423cab422e005fb94d44e777af1a6ea5167b04a4d889e848ae7a61a7e0e94232247ddea32ee70fc8",
      "tree": {
        "sha": "2d8db0e7c3b51ff708a14dbbd9d6baa3beac115d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d8db0e7c3b51ff708a14dbbd9d6baa3beac115d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16fff802574159286e424802442551dc9eba9098",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH9pIAAoJEB5K7WKYbNJdOVEH/isyC6YCMmo/I2KmvyKVPvEt\noOrCN3rNJzeX60cb2oZJTMO/F0JWCGtsR1WdsJlktq15DoG/cuderavgja8qpWEb\nu/wp4js/n8RnNRxtRtb/QXBC8y52oasT6GtQM/YXUOIV9lVFJsutv08dNawyjIQD\ngtWxNgd8by8dqv9cznaAQbzEMxQ2TniN1Zt+56RtWlsn24XjkN+OH3KVcyrFQVt8\naejslpG1ES5qsYjkOb99fZdUw+Ap/fi6kRhji4Vra+aIyuRi5KQ7BX/7zl0AcHws\nl86VzUzGPfmeHZS+oJeQYRkC+ZduRwVHds1Z+aO1jyUcjHT28lSPwHuXPgoFISg=\n=uGZd\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d8db0e7c3b51ff708a14dbbd9d6baa3beac115d\nparent 8879d50b18891564beebac7c3bc043a8023a4456\nparent d31e5c1d0f303a8cd97077d425488ed5abdf5345\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512036884 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512036936 +0100\n\nMerge #11783: Fix shutdown in case of errors during initialization\n\nd31e5c1 Fix shutdown in case of errors during initialization (Wladimir J. van der Laan)\n\nPull request description:\n\n  PR #10286 introduced a few steps which are not robust to early shutdown in initialization.\n\n  Stumbled upon this with #11781, not sure if there are other scenarios that can trigger it, but it's good to harden against this in any case.\n\n  E.g.\n  ```\n  $ src/bitcoind  -debuglogfile=/dfdf\n  Error: Could not open debug log file /dfdf\n  Program received signal SIGSEGV, Segmentation fault.\n  UnregisterValidationInterface (pwalletIn=0x0) at /.../bitcoin/src/validationinterface.cpp:82\n  82          g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n  (gdb) bt\n  #0  UnregisterValidationInterface (pwalletIn=0x0) at /.../bitcoin/src/validationinterface.cpp:82\n  #1  0x00005555555a11fc in Shutdown () at /.../bitcoin/src/init.cpp:196\n  #2  0x00005555555961cc in AppInit (argc=<optimized out>, argv=<optimized out>) at /.../bitcoin/src/bitcoind.cpp:183\n  #3  0x0000555555596249 in main (argc=0, argv=0x555555ecf200) at /.../bitcoin/src/bitcoind.cpp:19\n  ```\n\nTree-SHA512: 7dd9570a9803514a17781bfadf1edde47e96df4e852cce2f423cab422e005fb94d44e777af1a6ea5167b04a4d889e848ae7a61a7e0e94232247ddea32ee70fc8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16fff802574159286e424802442551dc9eba9098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8879d50b18891564beebac7c3bc043a8023a4456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8879d50b18891564beebac7c3bc043a8023a4456",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8879d50b18891564beebac7c3bc043a8023a4456"
      },
      {
        "sha": "d31e5c1d0f303a8cd97077d425488ed5abdf5345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31e5c1d0f303a8cd97077d425488ed5abdf5345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d31e5c1d0f303a8cd97077d425488ed5abdf5345"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "935686299960186cf5c8e09b094b1d302ef82870",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16fff802574159286e424802442551dc9eba9098/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16fff802574159286e424802442551dc9eba9098/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=16fff802574159286e424802442551dc9eba9098",
        "patch": "@@ -193,8 +193,8 @@ void Shutdown()\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n-    UnregisterValidationInterface(peerLogic.get());\n-    if(g_connman) g_connman->Stop();\n+    if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n+    if (g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n "
      },
      {
        "sha": "abbd8cc4d2be5da60c413c5a71cb07534f55294b",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16fff802574159286e424802442551dc9eba9098/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16fff802574159286e424802442551dc9eba9098/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=16fff802574159286e424802442551dc9eba9098",
        "patch": "@@ -49,7 +49,9 @@ void CMainSignals::UnregisterBackgroundSignalScheduler() {\n }\n \n void CMainSignals::FlushBackgroundCallbacks() {\n-    m_internals->m_schedulerClient.EmptyQueue();\n+    if (m_internals) {\n+        m_internals->m_schedulerClient.EmptyQueue();\n+    }\n }\n \n void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n@@ -92,6 +94,9 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n+    if (!g_signals.m_internals) {\n+        return;\n+    }\n     g_signals.m_internals->BlockChecked.disconnect_all_slots();\n     g_signals.m_internals->Broadcast.disconnect_all_slots();\n     g_signals.m_internals->Inventory.disconnect_all_slots();"
      }
    ]
  },
  {
    "sha": "cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjVmNDMyYzY5NDE4YWRiNTFmMGY0YTBiZGJkNmJhMzExMmVlMTFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T09:31:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:16:02Z"
      },
      "message": "Add `-debuglogfile` option\n\nThis patch adds an option to configure the name and/or directory of the\ndebug log.\n\nThe user can specify either a relative path, in which case the path\nis relative to the data directory. They can also specify an absolute\npath to put the log anywhere else in the file system.",
      "tree": {
        "sha": "03fea2887477a894dd6e2a64389c6c16a081783e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03fea2887477a894dd6e2a64389c6c16a081783e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16fff802574159286e424802442551dc9eba9098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16fff802574159286e424802442551dc9eba9098"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 35,
      "deletions": 14
    },
    "files": [
      {
        "sha": "871a585267e4cc3f3de7c6547fe12e5da9b8f736",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
        "patch": "@@ -342,6 +342,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n+    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n@@ -1209,8 +1210,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         ShrinkDebugFile();\n     }\n \n-    if (fPrintToDebugLog)\n-        OpenDebugLog();\n+    if (fPrintToDebugLog) {\n+        if (!OpenDebugLog()) {\n+            return InitError(strprintf(\"Could not open debug log file %s\", GetDebugLogPath().string()));\n+        }\n+    }\n \n     if (!fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));"
      },
      {
        "sha": "6631c236f1dc821558419eccdc807fff9823b89a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 11,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
        "patch": "@@ -89,6 +89,7 @@ const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n ArgsManager gArgs;\n bool fPrintToConsole = false;\n@@ -189,26 +190,40 @@ static void DebugPrintInit()\n     vMsgsBeforeOpenLog = new std::list<std::string>;\n }\n \n-void OpenDebugLog()\n+fs::path GetDebugLogPath()\n+{\n+    fs::path logfile(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    if (logfile.is_absolute()) {\n+        return logfile;\n+    } else {\n+        return GetDataDir() / logfile;\n+    }\n+}\n+\n+bool OpenDebugLog()\n {\n     boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n     boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n     assert(fileout == nullptr);\n     assert(vMsgsBeforeOpenLog);\n-    fs::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDebugLogPath();\n+\n     fileout = fsbridge::fopen(pathDebug, \"a\");\n-    if (fileout) {\n-        setbuf(fileout, nullptr); // unbuffered\n-        // dump buffered messages from before we opened the log\n-        while (!vMsgsBeforeOpenLog->empty()) {\n-            FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n-            vMsgsBeforeOpenLog->pop_front();\n-        }\n+    if (!fileout) {\n+        return false;\n+    }\n+\n+    setbuf(fileout, nullptr); // unbuffered\n+    // dump buffered messages from before we opened the log\n+    while (!vMsgsBeforeOpenLog->empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+        vMsgsBeforeOpenLog->pop_front();\n     }\n \n     delete vMsgsBeforeOpenLog;\n     vMsgsBeforeOpenLog = nullptr;\n+    return true;\n }\n \n struct CLogCategoryDesc\n@@ -355,7 +370,7 @@ int LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n-                fs::path pathDebug = GetDataDir() / \"debug.log\";\n+                fs::path pathDebug = GetDebugLogPath();\n                 if (fsbridge::freopen(pathDebug,\"a\",fileout) != nullptr)\n                     setbuf(fileout, nullptr); // unbuffered\n             }\n@@ -774,7 +789,7 @@ void ShrinkDebugFile()\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n-    fs::path pathLog = GetDataDir() / \"debug.log\";\n+    fs::path pathLog = GetDebugLogPath();\n     FILE* file = fsbridge::fopen(pathLog, \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes"
      },
      {
        "sha": "6687b865d26302fe37f5ef2aa839c8154952d5a1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
        "patch": "@@ -36,6 +36,7 @@ int64_t GetStartupTime();\n static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n+extern const char * const DEFAULT_DEBUGLOGFILE;\n \n /** Signals for translation. */\n class CTranslationInterface\n@@ -180,7 +181,8 @@ void CreatePidFile(const fs::path &path, pid_t pid);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n-void OpenDebugLog();\n+fs::path GetDebugLogPath();\n+bool OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n "
      }
    ]
  },
  {
    "sha": "3ff6ff5ec5d787fb805ffc1270aab54214db4539",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmY2ZmY1ZWM1ZDc4N2ZiODA1ZmZjMTI3MGFhYjU0MjE0ZGI0NTM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:32:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T10:52:24Z"
      },
      "message": "Merge #11744: net: Add missing locks in net.{cpp,h}\n\nbfb0c0a Add Clang thread safety analysis annotations (practicalswift)\n63f21d2 net: Add missing locks in net.{cpp,h} (practicalswift)\n\nPull request description:\n\n  Add missing locks in `net.{cpp,h}`:\n  * writing variable `nTotalBytesRecv` requires holding mutex `cs_totalBytesRecv` exclusively\n  * writing variables `nTotalBytesSent`, `nMaxOutboundTotalBytesSentInCycle` and `nMaxOutboundCycleStartTime` require holding mutex `cs_totalBytesSent` exclusively\n  * writing variables `nMaxOutboundTimeframe` and `nMaxOutboundLimit` require holding mutex `cs_totalBytesSent` exclusively\n  * writing variable `vAddedNodes` requires holding mutex `cs_vAddedNodes` exclusively\n\nTree-SHA512: 54a5b4bc6dc6f404dacf403af2ddd7b2214cc0a17d1d32a282def1c6b536105dada56bfabbc8606f56755f2d24874abba09913b51c8d13b0f2b000149551f0b0",
      "tree": {
        "sha": "ebc8be7e1b4fd7c54a10947faffed66f6a43e1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebc8be7e1b4fd7c54a10947faffed66f6a43e1ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ff6ff5ec5d787fb805ffc1270aab54214db4539",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH+LoAAoJEB5K7WKYbNJdCv4IALw16MDCZPjwk9MAU9MaH7Nd\nC9SxFqCCq+Ik7ez0PU8lc0nxc5xAGmr1UDtFxSVpj1TlZ8HNxClOWuNVQVu5DUQ0\nMEEucdjXUPvLlXfUpJJcQKS4QUQC0lA5cOxgiwdXYQ+ZiOt7zraQnOa8RLalKgdD\n9i3jaFK1QEd8VXvbs7lGK7jYn/hANsz37laOPFyB4/ku9h3SqHNUpCluYj7EbkPg\n7dksbKTQqepEJhySCBTjgNmlvRZQXaeGYKOXyMI6MFepAmrHiCQgskHHoP0HCb6D\nSjvYIdGoAZV8EMvV2KJ6Nlt3pEcWexe+YxjrCyxnK6XZnXsKjvZz1uDwbWA6haQ=\n=PHNU\n-----END PGP SIGNATURE-----",
        "payload": "tree ebc8be7e1b4fd7c54a10947faffed66f6a43e1ca\nparent 16fff802574159286e424802442551dc9eba9098\nparent bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512037971 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512039144 +0100\n\nMerge #11744: net: Add missing locks in net.{cpp,h}\n\nbfb0c0a Add Clang thread safety analysis annotations (practicalswift)\n63f21d2 net: Add missing locks in net.{cpp,h} (practicalswift)\n\nPull request description:\n\n  Add missing locks in `net.{cpp,h}`:\n  * writing variable `nTotalBytesRecv` requires holding mutex `cs_totalBytesRecv` exclusively\n  * writing variables `nTotalBytesSent`, `nMaxOutboundTotalBytesSentInCycle` and `nMaxOutboundCycleStartTime` require holding mutex `cs_totalBytesSent` exclusively\n  * writing variables `nMaxOutboundTimeframe` and `nMaxOutboundLimit` require holding mutex `cs_totalBytesSent` exclusively\n  * writing variable `vAddedNodes` requires holding mutex `cs_vAddedNodes` exclusively\n\nTree-SHA512: 54a5b4bc6dc6f404dacf403af2ddd7b2214cc0a17d1d32a282def1c6b536105dada56bfabbc8606f56755f2d24874abba09913b51c8d13b0f2b000149551f0b0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff6ff5ec5d787fb805ffc1270aab54214db4539",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff6ff5ec5d787fb805ffc1270aab54214db4539",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff6ff5ec5d787fb805ffc1270aab54214db4539/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16fff802574159286e424802442551dc9eba9098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16fff802574159286e424802442551dc9eba9098"
      },
      {
        "sha": "bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfb0c0a5b75da43d6aa829ef5d632fa9c56c51e7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 26,
      "deletions": 14
    },
    "files": [
      {
        "sha": "12a0820a492fb025b1e8e261f397712e5e2ae6b7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ff6ff5ec5d787fb805ffc1270aab54214db4539/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ff6ff5ec5d787fb805ffc1270aab54214db4539/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3ff6ff5ec5d787fb805ffc1270aab54214db4539",
        "patch": "@@ -2269,10 +2269,16 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n \n-    nTotalBytesRecv = 0;\n-    nTotalBytesSent = 0;\n-    nMaxOutboundTotalBytesSentInCycle = 0;\n-    nMaxOutboundCycleStartTime = 0;\n+    {\n+        LOCK(cs_totalBytesRecv);\n+        nTotalBytesRecv = 0;\n+    }\n+    {\n+        LOCK(cs_totalBytesSent);\n+        nTotalBytesSent = 0;\n+        nMaxOutboundTotalBytesSentInCycle = 0;\n+        nMaxOutboundCycleStartTime = 0;\n+    }\n \n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {"
      },
      {
        "sha": "d0fd05097017a258091199cf610e07f5375e6a6c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ff6ff5ec5d787fb805ffc1270aab54214db4539/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ff6ff5ec5d787fb805ffc1270aab54214db4539/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3ff6ff5ec5d787fb805ffc1270aab54214db4539",
        "patch": "@@ -158,10 +158,16 @@ class CConnman\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-        nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n-        nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n+        {\n+            LOCK(cs_totalBytesSent);\n+            nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n+            nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n+        }\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n-        vAddedNodes = connOptions.m_added_nodes;\n+        {\n+            LOCK(cs_vAddedNodes);\n+            vAddedNodes = connOptions.m_added_nodes;\n+        }\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n@@ -364,14 +370,14 @@ class CConnman\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;\n-    uint64_t nTotalBytesRecv;\n-    uint64_t nTotalBytesSent;\n+    uint64_t nTotalBytesRecv GUARDED_BY(cs_totalBytesRecv);\n+    uint64_t nTotalBytesSent GUARDED_BY(cs_totalBytesSent);\n \n     // outbound limit & stats\n-    uint64_t nMaxOutboundTotalBytesSentInCycle;\n-    uint64_t nMaxOutboundCycleStartTime;\n-    uint64_t nMaxOutboundLimit;\n-    uint64_t nMaxOutboundTimeframe;\n+    uint64_t nMaxOutboundTotalBytesSentInCycle GUARDED_BY(cs_totalBytesSent);\n+    uint64_t nMaxOutboundCycleStartTime GUARDED_BY(cs_totalBytesSent);\n+    uint64_t nMaxOutboundLimit GUARDED_BY(cs_totalBytesSent);\n+    uint64_t nMaxOutboundTimeframe GUARDED_BY(cs_totalBytesSent);\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n@@ -389,7 +395,7 @@ class CConnman\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots;\n     CCriticalSection cs_vOneShots;\n-    std::vector<std::string> vAddedNodes;\n+    std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n     std::vector<CNode*> vNodes;\n     std::list<CNode*> vNodesDisconnected;"
      }
    ]
  },
  {
    "sha": "dd49862a703b69cd4b678977c87c559ddeead139",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDQ5ODYyYTcwM2I2OWNkNGI2Nzg5NzdjODdjNTU5ZGRlZWFkMTM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T11:56:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T11:56:55Z"
      },
      "message": "Merge #11794: Prefix leveldb debug logging\n\n9b80fc1 Prefix leveldb debug logging (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add leveldb: prefix to leveldb debug logging lines.\n  leveldb debug messages come in various scary flavors such as:\n\n      2017-11-30 08:26:31 leveldb: Recovering log #26\n      2017-11-30 08:26:31 leveldb: Level-0 table #28: started\n      2017-11-30 08:26:31 leveldb: Level-0 table #28: 597 bytes OK\n      2017-11-30 08:26:31 leveldb: Delete type=0 #26\n      2017-11-30 08:26:31 leveldb: Delete type=3 #24\n\n  so it's reasonably important to mark them as coming from leveldb internals and not from consensus validation wallet or such.\n  This is consistent with the `libevent:` prefix for libevent messages.\n\n  (this only affects `-debug=leveldb` or `-debug=1` otherwise you won't see them in the first place)\n\nTree-SHA512: 074eba00d39c6378b9e14d03aa2c551b4e3fc7bffdd5a1a0ba2498b44bcc77071d47735be09493286056053f0cca625c5cbaad7ad1ddb9d902d30e7cd316d9d2",
      "tree": {
        "sha": "f82a8845e1b51b81567916a58d5a5ffcc3e6dbd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f82a8845e1b51b81567916a58d5a5ffcc3e6dbd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd49862a703b69cd4b678977c87c559ddeead139",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH/IHAAoJEB5K7WKYbNJdZCkH/0KCvRE4En777MnDWecjGMvZ\nsYnccRmBjtYU+tk8IBCDX3eBHTYTZp/kQwJaMtHgmTw3vKs6S1rG6+FDrKEAZBY3\nkt6qUcIV42GNRZKURHh9XgEA52WC4c6LWZknkuDdeKpzwa76INNLr7Y3dOOlvyUt\nmqi38F8gsh/IG34M/pMENKA4jTXSTYWejGReW3tumMSTOPb68PpEaFCtZPqxctzo\n+rork8sBbWHxVFJZp0NESX9dFJRq2grT7J0GMSTobBRJJEhDHZgfrVKRKhA0qjq9\nEssub+K2bPHNp8hgpIJZ1iwbLQdgpnV3ZD0qLZOVJ5mL1CY9YE9KYfL6t94jmM8=\n=KtcS\n-----END PGP SIGNATURE-----",
        "payload": "tree f82a8845e1b51b81567916a58d5a5ffcc3e6dbd6\nparent 3ff6ff5ec5d787fb805ffc1270aab54214db4539\nparent 9b80fc1498d517b67657c4765f889364efabe683\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512042992 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512043015 +0100\n\nMerge #11794: Prefix leveldb debug logging\n\n9b80fc1 Prefix leveldb debug logging (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add leveldb: prefix to leveldb debug logging lines.\n  leveldb debug messages come in various scary flavors such as:\n\n      2017-11-30 08:26:31 leveldb: Recovering log #26\n      2017-11-30 08:26:31 leveldb: Level-0 table #28: started\n      2017-11-30 08:26:31 leveldb: Level-0 table #28: 597 bytes OK\n      2017-11-30 08:26:31 leveldb: Delete type=0 #26\n      2017-11-30 08:26:31 leveldb: Delete type=3 #24\n\n  so it's reasonably important to mark them as coming from leveldb internals and not from consensus validation wallet or such.\n  This is consistent with the `libevent:` prefix for libevent messages.\n\n  (this only affects `-debug=leveldb` or `-debug=1` otherwise you won't see them in the first place)\n\nTree-SHA512: 074eba00d39c6378b9e14d03aa2c551b4e3fc7bffdd5a1a0ba2498b44bcc77071d47735be09493286056053f0cca625c5cbaad7ad1ddb9d902d30e7cd316d9d2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49862a703b69cd4b678977c87c559ddeead139",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd49862a703b69cd4b678977c87c559ddeead139",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49862a703b69cd4b678977c87c559ddeead139/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ff6ff5ec5d787fb805ffc1270aab54214db4539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff6ff5ec5d787fb805ffc1270aab54214db4539",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff6ff5ec5d787fb805ffc1270aab54214db4539"
      },
      {
        "sha": "9b80fc1498d517b67657c4765f889364efabe683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b80fc1498d517b67657c4765f889364efabe683",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b80fc1498d517b67657c4765f889364efabe683"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eb29be05c5176099cb7a6f0f8c3ef0419c8bcf76",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd49862a703b69cd4b678977c87c559ddeead139/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd49862a703b69cd4b678977c87c559ddeead139/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=dd49862a703b69cd4b678977c87c559ddeead139",
        "patch": "@@ -64,7 +64,7 @@ class CBitcoinLevelDBLogger : public leveldb::Logger {\n \n                 assert(p <= limit);\n                 base[std::min(bufsize - 1, (int)(p - base))] = '\\0';\n-                LogPrintStr(base);\n+                LogPrintf(\"leveldb: %s\", base);\n                 if (base != buffer) {\n                     delete[] base;\n                 }"
      }
    ]
  },
  {
    "sha": "60d739eb49478a7d3a3c6def34467ce068580ad7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGQ3MzllYjQ5NDc4YTdkM2EzYzZkZWYzNDQ2N2NlMDY4NTgwYWQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T12:40:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T12:41:11Z"
      },
      "message": "Merge #11789: [tests] [travis-ci] Combine logs on failure\n\nff8a9b0 [tests] Add combinedlogslen argument to test_runner.py (John Newbery)\ndba94ea [tests] [travis-ci] Move Travis functional test log post processing to test_runner (John Newbery)\nbba1c54 [tests] Improve logging shutdown and add hint for combine_logs (John Newbery)\n\nPull request description:\n\n  Replaces #11779 . Notes from that PR:\n\n  > Currently, when a functional test fails, the debug logs are printed sequentially to the travis log. This makes debugging race conditions based on the travis log hard. Instead, all logs events should be combined and sorted by their timestamp, then appended to the travis log.\n\n  @MarcoFalke\n\nTree-SHA512: 56c80067d6a2c92f7e6a35e3ae5160637a0de052d9da593c7be6e02233544a93c66d62456f903f85e2edc09e31ab4bdafd1aed1d9897ae48c634f82631f856f7",
      "tree": {
        "sha": "c4149c45c53676b83c68207b450f7e34b9e4e0d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4149c45c53676b83c68207b450f7e34b9e4e0d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60d739eb49478a7d3a3c6def34467ce068580ad7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaH/xnAAoJEB5K7WKYbNJdNaYIAJtAXX2Amc5gPo9gIp0h5H7I\nIvgUMa2TudHY9V/VTGN0MfZyjN6ML2wckQ0JFbbmVqaRH8zkBH3duKSDD8bgfDfd\nwnEUOrV6ryRxdbDYF4cVnzn0mWN7pHwTeCbvmsQduH+G7d288qMSRi/FyFiSy1Mh\nfaXR8iMkJu/kjOP2sqvCE2qTxGw36ohJ4ScheV8BlB2I20KR4WbaDauCHC6WNWcc\nPPDegRyrMSz0YLUe1WwyJOOaVyA6EJXxlW+a91U1NShXZKyElJZRz6uS0DIawbOC\nMmAUReDfuZlS2xUhy0lPiIdUOR+FUBGFUUZnsSzhwOHs/gkj6QcwvZ343skLgfM=\n=cWrw\n-----END PGP SIGNATURE-----",
        "payload": "tree c4149c45c53676b83c68207b450f7e34b9e4e0d3\nparent dd49862a703b69cd4b678977c87c559ddeead139\nparent ff8a9b068ae15c569ce66abb58bf6f909b879a7d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512045646 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512045671 +0100\n\nMerge #11789: [tests] [travis-ci] Combine logs on failure\n\nff8a9b0 [tests] Add combinedlogslen argument to test_runner.py (John Newbery)\ndba94ea [tests] [travis-ci] Move Travis functional test log post processing to test_runner (John Newbery)\nbba1c54 [tests] Improve logging shutdown and add hint for combine_logs (John Newbery)\n\nPull request description:\n\n  Replaces #11779 . Notes from that PR:\n\n  > Currently, when a functional test fails, the debug logs are printed sequentially to the travis log. This makes debugging race conditions based on the travis log hard. Instead, all logs events should be combined and sorted by their timestamp, then appended to the travis log.\n\n  @MarcoFalke\n\nTree-SHA512: 56c80067d6a2c92f7e6a35e3ae5160637a0de052d9da593c7be6e02233544a93c66d62456f903f85e2edc09e31ab4bdafd1aed1d9897ae48c634f82631f856f7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60d739eb49478a7d3a3c6def34467ce068580ad7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60d739eb49478a7d3a3c6def34467ce068580ad7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60d739eb49478a7d3a3c6def34467ce068580ad7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd49862a703b69cd4b678977c87c559ddeead139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49862a703b69cd4b678977c87c559ddeead139",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd49862a703b69cd4b678977c87c559ddeead139"
      },
      {
        "sha": "ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff8a9b068ae15c569ce66abb58bf6f909b879a7d"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 26,
      "deletions": 29
    },
    "files": [
      {
        "sha": "d3dd37e76c543ca04fa0dc5a3c9c8d2abf6a3043",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60d739eb49478a7d3a3c6def34467ce068580ad7/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60d739eb49478a7d3a3c6def34467ce068580ad7/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=60d739eb49478a7d3a3c6def34467ce068580ad7",
        "patch": "@@ -18,7 +18,6 @@ env:\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n     - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n-    - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM\n@@ -79,7 +78,7 @@ script:\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_wait 30 make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning,dbcrash\"; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --coverage --quiet ${extended}; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet ${extended}; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE\n     - echo $TRAVIS_COMMIT_LOG"
      },
      {
        "sha": "54fe6896860011eda26591f9309250523b34bdf5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 20,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60d739eb49478a7d3a3c6def34467ce068580ad7/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60d739eb49478a7d3a3c6def34467ce068580ad7/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=60d739eb49478a7d3a3c6def34467ce068580ad7",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n-from collections import deque\n from enum import Enum\n import logging\n import optparse\n@@ -149,32 +148,19 @@ def main(self):\n             shutil.rmtree(self.options.tmpdir)\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n-            if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                # Dump the end of the debug logs, to aid in debugging rare\n-                # travis failures.\n-                import glob\n-                filenames = [self.options.tmpdir + \"/test_framework.log\"]\n-                filenames += glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n-                MAX_LINES_TO_PRINT = 1000\n-                for fn in filenames:\n-                    try:\n-                        with open(fn, 'r') as f:\n-                            print(\"From\", fn, \":\")\n-                            print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n-                    except OSError:\n-                        print(\"Opening file %s failed.\" % fn)\n-                        traceback.print_exc()\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n-            sys.exit(TEST_EXIT_PASSED)\n+            exit_code = TEST_EXIT_PASSED\n         elif success == TestStatus.SKIPPED:\n             self.log.info(\"Test skipped\")\n-            sys.exit(TEST_EXIT_SKIPPED)\n+            exit_code = TEST_EXIT_SKIPPED\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n-            logging.shutdown()\n-            sys.exit(TEST_EXIT_FAILED)\n+            self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n+            exit_code = TEST_EXIT_FAILED\n+        logging.shutdown()\n+        sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):"
      },
      {
        "sha": "8c5654a85d261b14a6e9e87cab014fda324aef66",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60d739eb49478a7d3a3c6def34467ce068580ad7/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60d739eb49478a7d3a3c6def34467ce068580ad7/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=60d739eb49478a7d3a3c6def34467ce068580ad7",
        "patch": "@@ -15,6 +15,7 @@\n \"\"\"\n \n import argparse\n+from collections import deque\n import configparser\n import datetime\n import os\n@@ -174,6 +175,7 @@ def main():\n                                      epilog='''\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--combinedlogslen', '-c', type=int, default=0, help='print a combined log (of length n lines) from all test nodes and test framework to the console on failure.')\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n@@ -266,9 +268,9 @@ def main():\n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n \n-    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args, args.combinedlogslen)\n \n-def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[], combined_logs_len=0):\n     # Warn if bitcoind is already running (unix only)\n     try:\n         if subprocess.check_output([\"pidof\", \"bitcoind\"]) is not None:\n@@ -314,7 +316,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     max_len_name = len(max(test_list, key=len))\n \n     for _ in range(len(test_list)):\n-        test_result, stdout, stderr = job_queue.get_next()\n+        test_result, testdir, stdout, stderr = job_queue.get_next()\n         test_results.append(test_result)\n \n         if test_result.status == \"Passed\":\n@@ -325,6 +327,14 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n             print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n+            if combined_logs_len and os.path.isdir(testdir):\n+                # Print the final `combinedlogslen` lines of the combined logs\n+                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], combined_logs_len, BOLD[0]))\n+                print('\\n============')\n+                print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n+                print('============\\n')\n+                combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n \n@@ -389,13 +399,15 @@ def get_next(self):\n             log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             test_argv = t.split()\n-            tmpdir = [\"--tmpdir=%s/%s_%s\" % (self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)]\n+            testdir = \"{}/{}_{}\".format(self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)\n+            tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir,\n+                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n+                              testdir,\n                               log_stdout,\n                               log_stderr))\n         if not self.jobs:\n@@ -404,7 +416,7 @@ def get_next(self):\n             # Return first proc that finishes\n             time.sleep(.5)\n             for j in self.jobs:\n-                (name, time0, proc, log_out, log_err) = j\n+                (name, time0, proc, testdir, log_out, log_err) = j\n                 if os.getenv('TRAVIS') == 'true' and int(time.time() - time0) > 20 * 60:\n                     # In travis, timeout individual tests after 20 minutes (to stop tests hanging and not\n                     # providing useful output.\n@@ -422,7 +434,7 @@ def get_next(self):\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n \n-                    return TestResult(name, status, int(time.time() - time0)), stdout, stderr\n+                    return TestResult(name, status, int(time.time() - time0)), testdir, stdout, stderr\n             print('.', end='', flush=True)\n \n class TestResult():"
      }
    ]
  },
  {
    "sha": "e4d0af4fe1383cf401f8b9cb674845bd083e3234",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGQwYWY0ZmUxMzgzY2Y0MDFmOGI5Y2I2NzQ4NDViZDA4M2UzMjM0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-07-19T00:34:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-11-30T17:16:03Z"
      },
      "message": "Loop through the bip9 soft fork deployments instead of hard coding",
      "tree": {
        "sha": "92035b9fbf2123978beec00057417e267cb2956d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92035b9fbf2123978beec00057417e267cb2956d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4d0af4fe1383cf401f8b9cb674845bd083e3234",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4d0af4fe1383cf401f8b9cb674845bd083e3234",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4d0af4fe1383cf401f8b9cb674845bd083e3234",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4d0af4fe1383cf401f8b9cb674845bd083e3234/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8d6a3fb43a2433ef46aaf95511650e3888f730"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6c3ddd79ce39d1bbfb2f75546359ef34c6402391",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4d0af4fe1383cf401f8b9cb674845bd083e3234/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4d0af4fe1383cf401f8b9cb674845bd083e3234/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e4d0af4fe1383cf401f8b9cb674845bd083e3234",
        "patch": "@@ -1107,13 +1107,13 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     return rv;\n }\n \n-void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // Deployments with timeout value of 0 are hidden.\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.push_back(Pair(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id)));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1185,8 +1185,9 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n+        BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n+    }\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTM4ZDM1NzQ0N2ViOGJjYzE3ZDQ0MzhiYzlmNGYzYTM0ZmFjMzA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T17:19:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-30T17:19:49Z"
      },
      "message": "Merge #10874: [RPC] getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding\n\ne4d0af4 Loop through the bip9 soft fork deployments instead of hard coding (Andrew Chow)\n\nPull request description:\n\n  Instead of hard coding which deployment statistics should be listed in the `getblockchaininfo` output, loop through the available deployments (except testdummy) when displaying their deployment info.\n\nTree-SHA512: 87e503bcf5e0fd379940d5e53320b9cbb4b47d647c66246d46f47c09a941f135e6ce1e8b75dad441ed4c22c3f41992dfde7717414be1d71c771d4ff8fe0e1936",
      "tree": {
        "sha": "bf338d3101c783ca1c2e9345e27fb00e10ee6c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf338d3101c783ca1c2e9345e27fb00e10ee6c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaID21AAoJEB5K7WKYbNJdEOIH/RCVd9vEIpmxStLeDa5qNq+O\nQofZRntSBMZVPoh5r5nq8FsGl6p/pxZrxWVi2Y4Nf+QuG8dWuQNemQeM3HGp7aVv\nwDXfP7np3eEuLftBiYJODCGA9z+VR8a1RnDGYpLNeYNtsXP+Jc6/BsKMnmZUVYMU\nEukX43nDk4JP/q36gb8i2hQH1dKxiZY2EAF+p4xZ+m5Aj5G6NfPz1hQysljgPxBl\n6zWO74EP8na4VHkjp7tjJWcMin/sh40HfnpM/gKJo9Pnf1NIqlNYgAFnQttOA3MB\ncBlJrTHvlF5yfhROZmZYB4z0yjt5DGMQ9hNnrYWgnKeY5It1SDkB/0lXYevOcNc=\n=42Vk\n-----END PGP SIGNATURE-----",
        "payload": "tree bf338d3101c783ca1c2e9345e27fb00e10ee6c6c\nparent 60d739eb49478a7d3a3c6def34467ce068580ad7\nparent e4d0af4fe1383cf401f8b9cb674845bd083e3234\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512062361 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512062389 +0100\n\nMerge #10874: [RPC] getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding\n\ne4d0af4 Loop through the bip9 soft fork deployments instead of hard coding (Andrew Chow)\n\nPull request description:\n\n  Instead of hard coding which deployment statistics should be listed in the `getblockchaininfo` output, loop through the available deployments (except testdummy) when displaying their deployment info.\n\nTree-SHA512: 87e503bcf5e0fd379940d5e53320b9cbb4b47d647c66246d46f47c09a941f135e6ce1e8b75dad441ed4c22c3f41992dfde7717414be1d71c771d4ff8fe0e1936\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d357447eb8bcc17d4438bc9f4f3a34fac308/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60d739eb49478a7d3a3c6def34467ce068580ad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60d739eb49478a7d3a3c6def34467ce068580ad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60d739eb49478a7d3a3c6def34467ce068580ad7"
      },
      {
        "sha": "e4d0af4fe1383cf401f8b9cb674845bd083e3234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4d0af4fe1383cf401f8b9cb674845bd083e3234",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4d0af4fe1383cf401f8b9cb674845bd083e3234"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b7895b86f7473d7ec0b5c01691636d50650b1579",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d357447eb8bcc17d4438bc9f4f3a34fac308/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d357447eb8bcc17d4438bc9f4f3a34fac308/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
        "patch": "@@ -1113,13 +1113,13 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     return rv;\n }\n \n-void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // Deployments with timeout value of 0 are hidden.\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.push_back(Pair(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id)));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1214,8 +1214,9 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n+        BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n+    }\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "fbce66a982679b5409a295be5c99a2eef429cabf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmNlNjZhOTgyNjc5YjU0MDlhMjk1YmU1Yzk5YTJlZWY0MjljYWJm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-30T22:09:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-30T22:10:05Z"
      },
      "message": "Merge #10493: Use range-based for loops (C++11) when looping over map elements\n\n680bc2cbb Use range-based for loops (C++11) when looping over map elements (practicalswift)\n\nPull request description:\n\n  Before this commit:\n\n  ```c++\n  for (std::map<T1, T2>::iterator x = y.begin(); x != y.end(); ++x) {\n      T1 z = (*x).first;\n      \u2026\n  }\n  ```\n\n  After this commit:\n\n  ```c++\n  for (auto& x : y) {\n      T1 z = x.first;\n      \u2026\n  }\n  ```\n\nTree-SHA512: 954b136b7f5e6df09f39248a6b530fd9baa9ab59d7c2c7eb369fd4afbb591b7a52c92ee25f87f1745f47b41d6828b7abfd395b43daf84a55b4e6a3d45015e3a0",
      "tree": {
        "sha": "11dc4d7ceddd2b7370c5eb8bdfe8197adbf0f663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11dc4d7ceddd2b7370c5eb8bdfe8197adbf0f663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbce66a982679b5409a295be5c99a2eef429cabf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaIIG9AAoJENLqSFDnUoslp1EP/jPUXZTFH3ordcnH4V0kLivh\nO0EnWRujB55MIX46F5JfGu1Cc0oBGmJ50VU+H8+/g1/Wk6qfq5WMEA4KtEfgEQ8M\n7nPWuRLXix0LjZAxSlkwBeZqeb1IqQO0bs0OFqTwSg4NWJiO2eADNKQJuhtv5c32\nN2GiMGHliLHajagui1TcDpKk797AX2e8eTlez4zrbCobVIvRAKVUfwYAM2zaY6P7\nKG3ORv97zS16UKxUKdgATbuWZTcX4JE5d2fMCgIu1jTp/SvPIy2bpW5iMBPJb/Ln\nvOul2JIBTEJHbtjAuB1tuZBSSiYwabngAx12YtVJn0p5ZfQDdOgegARRnTJK7OMQ\nKz0cfwGz9k8BeIU1n5cHJ0SDR36lpFP4/1UWwvi2NMo4on3DTp/KoVFwugFpA/Gn\nkuCni+4Ffqmtr3ziMbdSFwl4Hs2KB+LdFp7uBXrpVWBpBfyx8D4WNbbbHomHUrAA\nRt8rpMddD6ZBouxgwMmPKn0rEucFsfOjsLg/p+HiSnAi3unyxzD42TBq5qKm0O6w\nnoE6b/sDSzbpH+RfduTtgMTzn3STa6CEACE/FvD3704LjPEPg8PvD1H3ezvnK1mB\nqQB3pOqy3ONscM6l+h1iCG+A2Mt8PA+5KZnpmqea6O5ZyashnfD8K41HIaIJhxbN\nYvYUvOrRNw35sxxmFsNr\n=KLiu\n-----END PGP SIGNATURE-----",
        "payload": "tree 11dc4d7ceddd2b7370c5eb8bdfe8197adbf0f663\nparent 9e38d357447eb8bcc17d4438bc9f4f3a34fac308\nparent 680bc2cbb34d6bedd0e64b17d0555216572be4c8\nauthor MarcoFalke <falke.marco@gmail.com> 1512079784 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1512079805 -0500\n\nMerge #10493: Use range-based for loops (C++11) when looping over map elements\n\n680bc2cbb Use range-based for loops (C++11) when looping over map elements (practicalswift)\n\nPull request description:\n\n  Before this commit:\n\n  ```c++\n  for (std::map<T1, T2>::iterator x = y.begin(); x != y.end(); ++x) {\n      T1 z = (*x).first;\n      \u2026\n  }\n  ```\n\n  After this commit:\n\n  ```c++\n  for (auto& x : y) {\n      T1 z = x.first;\n      \u2026\n  }\n  ```\n\nTree-SHA512: 954b136b7f5e6df09f39248a6b530fd9baa9ab59d7c2c7eb369fd4afbb591b7a52c92ee25f87f1745f47b41d6828b7abfd395b43daf84a55b4e6a3d45015e3a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbce66a982679b5409a295be5c99a2eef429cabf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbce66a982679b5409a295be5c99a2eef429cabf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbce66a982679b5409a295be5c99a2eef429cabf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e38d357447eb8bcc17d4438bc9f4f3a34fac308"
      },
      {
        "sha": "680bc2cbb34d6bedd0e64b17d0555216572be4c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/680bc2cbb34d6bedd0e64b17d0555216572be4c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/680bc2cbb34d6bedd0e64b17d0555216572be4c8"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 74,
      "deletions": 74
    },
    "files": [
      {
        "sha": "372cac84833ed396350c6d8ea7a70dec3d592e91",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -390,9 +390,9 @@ int CAddrMan::Check_()\n     if (vRandom.size() != nTried + nNew)\n         return -7;\n \n-    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n-        int n = (*it).first;\n-        CAddrInfo& info = (*it).second;\n+    for (const auto& entry : mapInfo) {\n+        int n = entry.first;\n+        const CAddrInfo& info = entry.second;\n         if (info.fInTried) {\n             if (!info.nLastSuccess)\n                 return -1;"
      },
      {
        "sha": "ea289d508c76441fe564621ec38df0bab9f65709",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -313,18 +313,18 @@ class CAddrMan\n         s << nUBuckets;\n         std::map<int, int> mapUnkIds;\n         int nIds = 0;\n-        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n-            mapUnkIds[(*it).first] = nIds;\n-            const CAddrInfo &info = (*it).second;\n+        for (const auto& entry : mapInfo) {\n+            mapUnkIds[entry.first] = nIds;\n+            const CAddrInfo &info = entry.second;\n             if (info.nRefCount) {\n                 assert(nIds != nNew); // this means nNew was wrong, oh ow\n                 s << info;\n                 nIds++;\n             }\n         }\n         nIds = 0;\n-        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n-            const CAddrInfo &info = (*it).second;\n+        for (const auto& entry : mapInfo) {\n+            const CAddrInfo &info = entry.second;\n             if (info.fInTried) {\n                 assert(nIds != nTried); // this means nTried was wrong, oh ow\n                 s << info;"
      },
      {
        "sha": "7ac64ead909dfee1fa531c27fee4b35cc500d81a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -110,13 +110,13 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n     int nBestReachability = -1;\n     {\n         LOCK(cs_mapLocalHost);\n-        for (std::map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n+        for (const auto& entry : mapLocalHost)\n         {\n-            int nScore = (*it).second.nScore;\n-            int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n+            int nScore = entry.second.nScore;\n+            int nReachability = entry.first.GetReachabilityFrom(paddrPeer);\n             if (nReachability > nBestReachability || (nReachability == nBestReachability && nScore > nBestScore))\n             {\n-                addr = CService((*it).first, (*it).second.nPort);\n+                addr = CService(entry.first, entry.second.nPort);\n                 nBestReachability = nReachability;\n                 nBestScore = nScore;\n             }"
      },
      {
        "sha": "c96bdfd5d710c51055d4ed02e6ab39ba8a829276",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -55,11 +55,11 @@ class BanTablePriv\n #if QT_VERSION >= 0x040700\n         cachedBanlist.reserve(banMap.size());\n #endif\n-        for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n+        for (const auto& entry : banMap)\n         {\n             CCombinedBan banEntry;\n-            banEntry.subnet = (*it).first;\n-            banEntry.banEntry = (*it).second;\n+            banEntry.subnet = entry.first;\n+            banEntry.banEntry = entry.second;\n             cachedBanlist.append(banEntry);\n         }\n "
      },
      {
        "sha": "67580f11ae6a1703487ea35bb3d555a129611021",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -80,10 +80,10 @@ class TransactionTablePriv\n         cachedWallet.clear();\n         {\n             LOCK2(cs_main, wallet->cs_wallet);\n-            for(std::map<uint256, CWalletTx>::iterator it = wallet->mapWallet.begin(); it != wallet->mapWallet.end(); ++it)\n+            for (const auto& entry : wallet->mapWallet)\n             {\n-                if(TransactionRecord::showTransaction(it->second))\n-                    cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, it->second));\n+                if (TransactionRecord::showTransaction(entry.second))\n+                    cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, entry.second));\n             }\n         }\n     }"
      },
      {
        "sha": "9de249855cc6a0f0226bb4ddcd37ceb4d6c56191",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -571,11 +571,11 @@ UniValue listbanned(const JSONRPCRequest& request)\n     g_connman->GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n-    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n+    for (const auto& entry : banMap)\n     {\n-        CBanEntry banEntry = (*it).second;\n+        const CBanEntry& banEntry = entry.second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", (*it).first.ToString()));\n+        rec.push_back(Pair(\"address\", entry.first.ToString()));\n         rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n         rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n         rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));"
      },
      {
        "sha": "0e4cd41689c78d23ac14ec8ec06461e57f19d951",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -160,8 +160,8 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     std::set<rpcfn_type> setDone;\n     std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n \n-    for (std::map<std::string, const CRPCCommand*>::const_iterator mi = mapCommands.begin(); mi != mapCommands.end(); ++mi)\n-        vCommands.push_back(make_pair(mi->second->category + mi->first, mi->second));\n+    for (const auto& entry : mapCommands)\n+        vCommands.push_back(make_pair(entry.second->category + entry.first, entry.second));\n     sort(vCommands.begin(), vCommands.end());\n \n     JSONRPCRequest jreq(helpreq);"
      },
      {
        "sha": "02d3e4f7c67c8b3ba54ab2fc9b44e1e893e6191a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -732,8 +732,8 @@ template<typename Stream, typename K, typename T, typename Pred, typename A>\n void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)\n {\n     WriteCompactSize(os, m.size());\n-    for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n-        Serialize(os, (*mi));\n+    for (const auto& entry : m)\n+        Serialize(os, entry);\n }\n \n template<typename Stream, typename K, typename T, typename Pred, typename A>"
      },
      {
        "sha": "ed556c07f4605b5ebdc0afb98996a3398b5cc047",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -81,8 +81,8 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         size_t count = 0;\n-        for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += it->second.coin.DynamicMemoryUsage();\n+        for (const auto& entry : cacheCoins) {\n+            ret += entry.second.coin.DynamicMemoryUsage();\n             ++count;\n         }\n         BOOST_CHECK_EQUAL(GetCacheSize(), count);\n@@ -189,15 +189,15 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n         if (InsecureRandRange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n-            for (auto it = result.begin(); it != result.end(); it++) {\n-                bool have = stack.back()->HaveCoin(it->first);\n-                const Coin& coin = stack.back()->AccessCoin(it->first);\n+            for (const auto& entry : result) {\n+                bool have = stack.back()->HaveCoin(entry.first);\n+                const Coin& coin = stack.back()->AccessCoin(entry.first);\n                 BOOST_CHECK(have == !coin.IsSpent());\n-                BOOST_CHECK(coin == it->second);\n+                BOOST_CHECK(coin == entry.second);\n                 if (coin.IsSpent()) {\n                     missed_an_entry = true;\n                 } else {\n-                    BOOST_CHECK(stack.back()->HaveCoinInCache(it->first));\n+                    BOOST_CHECK(stack.back()->HaveCoinInCache(entry.first));\n                     found_an_entry = true;\n                 }\n             }\n@@ -420,11 +420,11 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n         if (InsecureRandRange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n-            for (auto it = result.begin(); it != result.end(); it++) {\n-                bool have = stack.back()->HaveCoin(it->first);\n-                const Coin& coin = stack.back()->AccessCoin(it->first);\n+            for (const auto& entry : result) {\n+                bool have = stack.back()->HaveCoin(entry.first);\n+                const Coin& coin = stack.back()->AccessCoin(entry.first);\n                 BOOST_CHECK(have == !coin.IsSpent());\n-                BOOST_CHECK(coin == it->second);\n+                BOOST_CHECK(coin == entry.second);\n             }\n         }\n "
      },
      {
        "sha": "98db6995667ee0be565bafcefd37ce40c297762c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -3339,8 +3339,8 @@ void PruneOneBlockFile(const int fileNumber)\n {\n     LOCK(cs_LastBlockFile);\n \n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n-        CBlockIndex* pindex = it->second;\n+    for (const auto& entry : mapBlockIndex) {\n+        CBlockIndex* pindex = entry.second;\n         if (pindex->nFile == fileNumber) {\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;\n             pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n@@ -3894,8 +3894,8 @@ bool RewindBlockIndex(const CChainParams& params)\n     // Reduce validity flag and have-data flags.\n     // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n     // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n-        CBlockIndex* pindexIter = it->second;\n+    for (const auto& entry : mapBlockIndex) {\n+        CBlockIndex* pindexIter = entry.second;\n \n         // Note: If we encounter an insufficiently validated block that\n         // is on chainActive, it must be because we are a pruning node, and\n@@ -4171,8 +4171,8 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     // Build forward-pointing map of the entire block tree.\n     std::multimap<CBlockIndex*,CBlockIndex*> forward;\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n-        forward.insert(std::make_pair(it->second->pprev, it->second));\n+    for (auto& entry : mapBlockIndex) {\n+        forward.insert(std::make_pair(entry.second->pprev, entry.second));\n     }\n \n     assert(forward.size() == mapBlockIndex.size());"
      },
      {
        "sha": "473acd8367d4a68df95d52dca13a5db9e745c788",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -1439,14 +1439,14 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n \n     if (fByAccounts)\n     {\n-        for (std::map<std::string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n+        for (const auto& entry : mapAccountTally)\n         {\n-            CAmount nAmount = (*it).second.nAmount;\n-            int nConf = (*it).second.nConf;\n+            CAmount nAmount = entry.second.nAmount;\n+            int nConf = entry.second.nConf;\n             UniValue obj(UniValue::VOBJ);\n-            if((*it).second.fIsWatchonly)\n+            if (entry.second.fIsWatchonly)\n                 obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       (*it).first));\n+            obj.push_back(Pair(\"account\",       entry.first));\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n             obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n             ret.push_back(obj);"
      },
      {
        "sha": "ee1894501ccb1810709753d840792dbedd798fd0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -705,9 +705,9 @@ DBErrors CWallet::ReorderTransactions()\n     typedef std::multimap<int64_t, TxPair > TxItems;\n     TxItems txByTime;\n \n-    for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    for (auto& entry : mapWallet)\n     {\n-        CWalletTx* wtx = &((*it).second);\n+        CWalletTx* wtx = &entry.second;\n         txByTime.insert(std::make_pair(wtx->nTimeReceived, TxPair(wtx, nullptr)));\n     }\n     std::list<CAccountingEntry> acentries;\n@@ -2026,9 +2026,9 @@ CAmount CWallet::GetBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &entry.second;\n             if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n@@ -2042,9 +2042,9 @@ CAmount CWallet::GetUnconfirmedBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &entry.second;\n             if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n@@ -2057,9 +2057,9 @@ CAmount CWallet::GetImmatureBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &entry.second;\n             nTotal += pcoin->GetImmatureCredit();\n         }\n     }\n@@ -2071,9 +2071,9 @@ CAmount CWallet::GetWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &entry.second;\n             if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n@@ -2087,9 +2087,9 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &entry.second;\n             if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n@@ -2102,9 +2102,9 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &entry.second;\n             nTotal += pcoin->GetImmatureWatchOnlyCredit();\n         }\n     }\n@@ -2178,10 +2178,10 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n \n         CAmount nTotal = 0;\n \n-        for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (const auto& entry : mapWallet)\n         {\n-            const uint256& wtxid = it->first;\n-            const CWalletTx* pcoin = &(*it).second;\n+            const uint256& wtxid = entry.first;\n+            const CWalletTx* pcoin = &entry.second;\n \n             if (!CheckFinalTx(*pcoin->tx))\n                 continue;\n@@ -2242,10 +2242,10 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n                 if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                     continue;\n \n-                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint((*it).first, i)))\n+                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n                     continue;\n \n-                if (IsLockedCoin((*it).first, i))\n+                if (IsLockedCoin(entry.first, i))\n                     continue;\n \n                 if (IsSpent(wtxid, i))\n@@ -3705,9 +3705,9 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n \n     // find first block that affects those keys, if there are any left\n     std::vector<CKeyID> vAffected;\n-    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+    for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n-        const CWalletTx &wtx = (*it).second;\n+        const CWalletTx &wtx = entry.second;\n         BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n@@ -3727,8 +3727,8 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     }\n \n     // Extract block timestamps for those keys\n-    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n-        mapKeyBirth[it->first] = it->second->GetBlockTime() - TIMESTAMP_WINDOW; // block times can be 2h off\n+    for (const auto& entry : mapKeyFirstBlock)\n+        mapKeyBirth[entry.first] = entry.second->GetBlockTime() - TIMESTAMP_WINDOW; // block times can be 2h off\n }\n \n /**"
      },
      {
        "sha": "b663615752e4cc7ba703acddbe62967b1462ea67",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbce66a982679b5409a295be5c99a2eef429cabf/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbce66a982679b5409a295be5c99a2eef429cabf/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=fbce66a982679b5409a295be5c99a2eef429cabf",
        "patch": "@@ -40,15 +40,15 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n     factories[\"pubrawblock\"] = CZMQAbstractNotifier::Create<CZMQPublishRawBlockNotifier>;\n     factories[\"pubrawtx\"] = CZMQAbstractNotifier::Create<CZMQPublishRawTransactionNotifier>;\n \n-    for (std::map<std::string, CZMQNotifierFactory>::const_iterator i=factories.begin(); i!=factories.end(); ++i)\n+    for (const auto& entry : factories)\n     {\n-        std::string arg(\"-zmq\" + i->first);\n+        std::string arg(\"-zmq\" + entry.first);\n         if (gArgs.IsArgSet(arg))\n         {\n-            CZMQNotifierFactory factory = i->second;\n+            CZMQNotifierFactory factory = entry.second;\n             std::string address = gArgs.GetArg(arg, \"\");\n             CZMQAbstractNotifier *notifier = factory();\n-            notifier->SetType(i->first);\n+            notifier->SetType(entry.first);\n             notifier->SetAddress(address);\n             notifiers.push_back(notifier);\n         }"
      }
    ]
  },
  {
    "sha": "13e31dd6548d64a5992f439e74bb424bf88aca04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2UzMWRkNjU0OGQ2NGE1OTkyZjQzOWU3NGJiNDI0YmY4OGFjYTA0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-30T22:58:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-30T23:01:51Z"
      },
      "message": "Merge #11791: [tests] Rename NodeConn and NodeConnCB\n\n873beca6d [tests] Rename NodeConn and NodeConnCB (John Newbery)\n\nPull request description:\n\n  Final step in #11518\n\n  NodeConn -> P2PConnection\n  NodeConnCB -> P2PInterface\n\n  This is basically just a rename. Should be an easy review.\n\nTree-SHA512: fe1204b2b3d8182c5e324ffa7cb4099a47ef8536380e0bb9d37a5fccf76a24f548d1f1a7988ab8f830986a3058b670696de3fc891af5e5f75dbeb4e3273005d7",
      "tree": {
        "sha": "e6ffed59782502920d90a4189be727f5cf6ad239",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6ffed59782502920d90a4189be727f5cf6ad239"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13e31dd6548d64a5992f439e74bb424bf88aca04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaII3fAAoJENLqSFDnUoslouYP/38VSFOKeRQ5jOxx1WlbBhtE\nUhDy7UKf370XwAgN/cJYytHL5F184gB30M9xoT20PZBDyba0zbuOYq5k6hga/LaL\np/rEVSKNdXrzuORr9nvwEWgPwghsAegb7x2pHrPnHeHK5jp0kN5q1crSn1f/jkb2\nXKXho+TgncuIe+W5zzVOAKojJe8eN9r8BI0+njyjl7OOnxiT3RNdtglMvvhT3sFD\nmUW5jMRRpYTMpWfdk9b8sor2bs0q1sJ5LtpNvHFBHq4o85ewsCDrnYkgO4gY7C9P\n/QqhqE5CXk63ds06qi3vn7G/F1gEfYu01VHolbRqdPRb5/wNp7R1P9l9wOPKs6pz\nIltmIJt2Y6D+jX4NCmBkj9U7477lmBT8MZbCXHUFGWI6hcH+MKv9R+V4JkQa+tyW\nFFM89w20UNCbRon5Tr8WK+HjB/hTe3zQLmWQHfHi+WL8Ewe5e88Nsi9vfJCwkpsy\no0982mJPfe/8H2WNbh/aK5yVCQGMyfj6a8XCMCYLu4u7La8hIngh3OOfPGCXej1V\nJpHajToDCC/NZ0uK9/Qt53aLXtEyZW3+DasewWdoCOrq+CjfL9/1MNLDODRgAtOc\nmkhDUQ+MZ77IH2wgi5bZHw7LVjpD4cwdrfhP0J+2H7E8072ZNYmZ91UCbdqffkTX\nIPSi2mabHzUrWlpkTDo6\n=qx5d\n-----END PGP SIGNATURE-----",
        "payload": "tree e6ffed59782502920d90a4189be727f5cf6ad239\nparent fbce66a982679b5409a295be5c99a2eef429cabf\nparent 873beca6deda119077f53921f0d19c3ebfc7cc44\nauthor MarcoFalke <falke.marco@gmail.com> 1512082738 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1512082911 -0500\n\nMerge #11791: [tests] Rename NodeConn and NodeConnCB\n\n873beca6d [tests] Rename NodeConn and NodeConnCB (John Newbery)\n\nPull request description:\n\n  Final step in #11518\n\n  NodeConn -> P2PConnection\n  NodeConnCB -> P2PInterface\n\n  This is basically just a rename. Should be an easy review.\n\nTree-SHA512: fe1204b2b3d8182c5e324ffa7cb4099a47ef8536380e0bb9d37a5fccf76a24f548d1f1a7988ab8f830986a3058b670696de3fc891af5e5f75dbeb4e3273005d7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e31dd6548d64a5992f439e74bb424bf88aca04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13e31dd6548d64a5992f439e74bb424bf88aca04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e31dd6548d64a5992f439e74bb424bf88aca04/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbce66a982679b5409a295be5c99a2eef429cabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbce66a982679b5409a295be5c99a2eef429cabf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbce66a982679b5409a295be5c99a2eef429cabf"
      },
      {
        "sha": "873beca6deda119077f53921f0d19c3ebfc7cc44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/873beca6deda119077f53921f0d19c3ebfc7cc44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/873beca6deda119077f53921f0d19c3ebfc7cc44"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 50,
      "deletions": 55
    },
    "files": [
      {
        "sha": "193ca947bc662db0fb69bf050cd81be5ef15cb62",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -63,12 +63,12 @@ wrappers for them, `msg_block`, `msg_tx`, etc).\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from `NodeConnCB` and pass that to the\n-`NodeConn` object, your code will receive the appropriate callbacks when\n-events of interest arrive.\n+- `P2PConnection` is the class used to connect to a bitcoind.  `P2PInterface`\n+contains the higher level logic for processing P2P payloads and connecting to\n+the Bitcoin Core node application logic. For custom behaviour, subclass the\n+P2PInterface object and override the callback methods.\n \n-- Call `NetworkThread.start()` after all `NodeConn` objects are created to\n+- Call `NetworkThread.start()` after all `P2PInterface` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n "
      },
      {
        "sha": "13104f71bc8a5eb218b9aef46cdc598a7d1a63d5",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -39,14 +39,14 @@\n                                      CTxIn,\n                                      CTxOut,\n                                      NetworkThread,\n-                                     NodeConnCB,\n+                                     P2PInterface,\n                                      msg_block,\n                                      msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n         headers_message.headers = [CBlockHeader(b) for b in new_blocks]"
      },
      {
        "sha": "2af5eb275fc5665ada71d2d63395a6ee7f409d70",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -66,7 +66,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "7a3e565e2c7cd59955bfddc4d6323836a3da54ad",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -54,7 +54,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "289fa248e0dbc1b3e48209730311387be2173586",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -18,10 +18,11 @@\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    NODE_NETWORK,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -30,15 +31,15 @@\n     wait_until,\n )\n \n-# NodeConnCB is a class containing callbacks to be executed when a P2P\n-# message is received from the node-under-test. Subclass NodeConnCB and\n+# P2PInterface is a class containing callbacks to be executed when a P2P\n+# message is received from the node-under-test. Subclass P2PInterface and\n # override the on_*() methods if you need custom behaviour.\n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def __init__(self):\n-        \"\"\"Initialize the NodeConnCB\n+        \"\"\"Initialize the P2PInterface\n \n         Used to inialize custom properties for the Node that aren't\n-        included by default in the base class. Be aware that the NodeConnCB\n+        included by default in the base class. Be aware that the P2PInterface\n         base class already stores a counter for each P2P message type and the\n         last received message of each type, which should be sufficient for the\n         needs of most tests.\n@@ -174,7 +175,7 @@ def run_test(self):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             block_message = msg_block(block)\n-            # Send message is used to send a P2P message to the node over our NodeConn connection\n+            # Send message is used to send a P2P message to the node over our P2PInterface\n             self.nodes[0].p2p.send_message(block_message)\n             self.tip = block.sha256\n             blocks.append(self.tip)\n@@ -199,12 +200,12 @@ def run_test(self):\n         self.nodes[2].p2p.send_message(getdata_request)\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n-        # NodeConnCB objects.\n+        # P2PInterface objects.\n         wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n-        # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving\n-        # messages. The test thread should acquire the global lock before accessing any NodeConn data to avoid locking\n+        # The network thread uses a global lock on data access to the P2PConnection objects when sending and receiving\n+        # messages. The test thread should acquire the global lock before accessing any P2PConnection data to avoid locking\n         # and synchronization issues. Note wait_until() acquires this global lock when testing the predicate.\n         with mininode_lock:\n             for block in self.nodes[2].p2p.block_receive_map.values():"
      },
      {
        "sha": "5ef71c93cf925db53771fcfb564f6b3702f82383",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)"
      },
      {
        "sha": "d9d7c24416555c2119939138b86afd850865be21",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -7,7 +7,7 @@\n Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-We have one NodeConn connection to node0 called test_node, and one to node1\n+We have one P2PInterface connection to node0 called test_node, and one to node1\n called min_work_node.\n \n The test:\n@@ -79,9 +79,9 @@ def setup_network(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # test_node connects to node0 (not whitelisted)\n-        test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n-        # min_work_node connects to node1\n-        min_work_node = self.nodes[1].add_p2p_connection(NodeConnCB())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        # min_work_node connects to node1 (whitelisted)\n+        min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n \n@@ -207,7 +207,7 @@ def run_test(self):\n         # disconnect/reconnect first\n \n         self.nodes[0].disconnect_p2ps()\n-        test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n         test_node.wait_for_verack()\n         test_node.send_message(msg_block(block_h1f))\n@@ -292,7 +292,7 @@ def run_test(self):\n             test_node.wait_for_disconnect()\n \n             self.nodes[0].disconnect_p2ps()\n-            test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n+            test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n             NetworkThread().start() # Start up network handling in another thread\n             test_node.wait_for_verack()"
      },
      {
        "sha": "c43744328c07f0009def00f038d6ccea16ddcfa6",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.script import CScript, OP_TRUE\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.last_sendcmpct = []"
      },
      {
        "sha": "ac55336e3d25c12434a87c548d096208cd1f1a16",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -22,7 +22,7 @@ def allInvsMatch(invsExpected, testnode):\n         time.sleep(1)\n     return False\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.txinvs = []"
      },
      {
        "sha": "209c789f2284589d25be1641ff89af446ac8b67d",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n@@ -75,7 +75,7 @@ def last_header_equals(self, expected_hash, node):\n     # This does not currently test that stale blocks timestamped within the\n     # last month but that have over a month's worth of work are also withheld.\n     def run_test(self):\n-        node0 = self.nodes[0].add_p2p_connection(NodeConnCB())\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start()\n         node0.wait_for_verack()"
      },
      {
        "sha": "b469a9a47a21b2bf9ec3171d8fbd65046bcac043",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -20,7 +20,7 @@\n \n banscore = 10\n \n-class CLazyNode(NodeConnCB):\n+class CLazyNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.unexpected_msg = False\n@@ -139,10 +139,10 @@ def run_test(self):\n         self.log.info(\"Service bits 5 and 7 are allowed after August 1st 2018\")\n         self.nodes[0].setmocktime(1533168000)  # August 2nd 2018\n \n-        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(NodeConnCB(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n-        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(NodeConnCB(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n+        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n+        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Network thread stopped when all previous NodeConnCBs disconnected. Restart it\n+        NetworkThread().start()  # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n \n         wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n         wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)"
      },
      {
        "sha": "d24dbac51db7fc87a0d23f5ceb292dd0855ab424",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -20,7 +20,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Add a p2p connection\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n         NetworkThread().start()\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "a240d79013c22fb58c7a21364f15798ed8fdf998",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -59,7 +59,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n     p2p.sync_with_ping()\n     assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.getdataset = set()"
      },
      {
        "sha": "b2f3a861cfbcb7619d2017040361751b92986f40",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def on_version(self, message):\n         # Don't send a verack in response\n         pass"
      },
      {
        "sha": "be137381d0190e4c1d44631b873a5a857970b8b6",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -23,7 +23,7 @@\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def on_inv(self, message):\n         pass\n "
      },
      {
        "sha": "99b7f6b99ed2465ee288753a36f6783a546d4c2a",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -91,7 +91,7 @@\n     CInv,\n     NODE_WITNESS,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getblocks,\n@@ -110,7 +110,7 @@\n \n DIRECT_FETCH_RESPONSE_TIME = 0.05\n \n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n "
      },
      {
        "sha": "f0f5c847ca8da6d805e5456a7d2d24cbff3c3093",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -39,7 +39,7 @@ def match(self, other):\n     def __repr__(self):\n         return '%i:%s' % (self.code,self.reason or '*')\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()"
      },
      {
        "sha": "9e92a70da15102cbabca2b1aafce908fa849f2bc",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13e31dd6548d64a5992f439e74bb424bf88aca04/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=13e31dd6548d64a5992f439e74bb424bf88aca04",
        "patch": "@@ -9,10 +9,8 @@\n This python code was modified from ArtForz' public domain  half-a-node, as\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n-NodeConn: an object which manages p2p connectivity to a bitcoin node\n-NodeConnCB: a base class that describes the interface for receiving\n-            callbacks with network messages from a NodeConn\n-\"\"\"\n+P2PConnection: A low-level connection object to a node's P2P interface\n+P2PInterface: A high-level interface object for communicating to a node over P2P\"\"\"\n import asyncore\n from collections import defaultdict\n from io import BytesIO\n@@ -57,7 +55,7 @@\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n }\n \n-class NodeConn(asyncore.dispatcher):\n+class P2PConnection(asyncore.dispatcher):\n     \"\"\"A low-level connection object to a node's P2P interface.\n \n     This class is responsible for:\n@@ -68,9 +66,7 @@ class NodeConn(asyncore.dispatcher):\n     - logging messages as they are sent and received\n \n     This class contains no logic for handing the P2P message payloads. It must be\n-    sub-classed and the on_message() callback overridden.\n-\n-    TODO: rename this class P2PConnection.\"\"\"\n+    sub-classed and the on_message() callback overridden.\"\"\"\n \n     def __init__(self):\n         super().__init__(map=mininode_socket_map)\n@@ -244,17 +240,15 @@ def _log_message(self, direction, msg):\n         logger.debug(log_message)\n \n \n-class NodeConnCB(NodeConn):\n+class P2PInterface(P2PConnection):\n     \"\"\"A high-level P2P interface class for communicating with a Bitcoin node.\n \n     This class provides high-level callbacks for processing P2P message\n     payloads, as well as convenience methods for interacting with the\n     node over P2P.\n \n     Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\n-\n-    TODO: rename this class P2PInterface\"\"\"\n+    if they want to alter message handling behaviour.\"\"\"\n     def __init__(self):\n         super().__init__()\n \n@@ -399,10 +393,10 @@ def sync_with_ping(self, timeout=60):\n \n # One lock for synchronizing all data access between the networking thread (see\n # NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n+# P2PConnection acquires this lock whenever delivering a message to a P2PInterface,\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n-# access to any data shared with the NodeConnCB or NodeConn.\n+# access to any data shared with the P2PInterface or P2PConnection.\n mininode_lock = RLock()\n \n class NetworkThread(Thread):"
      }
    ]
  },
  {
    "sha": "23232422e507a90922c0870611cade5c789bb83a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzIzMjQyMmU1MDdhOTA5MjJjMDg3MDYxMWNhZGU1Yzc4OWJiODNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T14:38:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T10:28:13Z"
      },
      "message": "test: Add test for `-debuglogfile`",
      "tree": {
        "sha": "51294deb312089fc618c0edef314938c51cd080b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51294deb312089fc618c0edef314938c51cd080b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23232422e507a90922c0870611cade5c789bb83a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23232422e507a90922c0870611cade5c789bb83a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23232422e507a90922c0870611cade5c789bb83a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23232422e507a90922c0870611cade5c789bb83a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "24591e176f73395e22ae036b889d96191fce6a2d",
        "filename": "test/functional/feature_logging.py",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23232422e507a90922c0870611cade5c789bb83a/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23232422e507a90922c0870611cade5c789bb83a/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=23232422e507a90922c0870611cade5c789bb83a",
        "patch": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test debug logging.\"\"\"\n+\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class LoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        # test default log file name\n+        assert os.path.isfile(os.path.join(self.nodes[0].datadir, \"regtest\", \"debug.log\"))\n+\n+        # test alternative log file name in datadir\n+        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert os.path.isfile(os.path.join(self.nodes[0].datadir, \"regtest\", \"foo.log\"))\n+\n+        # test alternative log file name outside datadir\n+        tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n+        self.restart_node(0, [\"-debuglogfile=%s\" % tempname])\n+        assert os.path.isfile(tempname)\n+\n+        # check that invalid log (relative) will cause error\n+        self.stop_node(0)\n+        self.assert_start_raises_init_error(0, [\"-debuglogfile=ssdksjdf/sdasdfa/sdfsdfsfd\"],\n+                                                \"Error: Could not open debug log file\")\n+\n+        # check that invalid log (absolute) will cause error\n+        self.stop_node(0)\n+        invalidname = os.path.join(self.options.tmpdir, \"foo/foo.log\")\n+        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % invalidname],\n+                                               \"Error: Could not open debug log file\")\n+\n+\n+if __name__ == '__main__':\n+    LoggingTest().main()"
      },
      {
        "sha": "2202d65b5e648900a5537db5822de771236c8e72",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23232422e507a90922c0870611cade5c789bb83a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23232422e507a90922c0870611cade5c789bb83a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=23232422e507a90922c0870611cade5c789bb83a",
        "patch": "@@ -126,6 +126,7 @@\n     'p2p-fingerprint.py',\n     'uacomment.py',\n     'p2p-acceptblock.py',\n+    'feature_logging.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "4158734946eb00a6944244f75a8a5b39e43c302a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTU4NzM0OTQ2ZWIwMGE2OTQ0MjQ0Zjc1YThhNWIzOWU0M2MzMDJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T14:43:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T10:28:23Z"
      },
      "message": "doc: Update release notes for `-debuglogfile`",
      "tree": {
        "sha": "694e7630854abd54557b62f7215a70b6265cf510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/694e7630854abd54557b62f7215a70b6265cf510"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4158734946eb00a6944244f75a8a5b39e43c302a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4158734946eb00a6944244f75a8a5b39e43c302a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4158734946eb00a6944244f75a8a5b39e43c302a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4158734946eb00a6944244f75a8a5b39e43c302a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23232422e507a90922c0870611cade5c789bb83a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23232422e507a90922c0870611cade5c789bb83a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23232422e507a90922c0870611cade5c789bb83a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43009b08135666dbd02996002f25a7fb6c7dfb5c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4158734946eb00a6944244f75a8a5b39e43c302a/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4158734946eb00a6944244f75a8a5b39e43c302a/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=4158734946eb00a6944244f75a8a5b39e43c302a",
        "patch": "@@ -90,6 +90,9 @@ Low-level RPC changes\n   * `getmininginfo`\n - The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n \n+Changed command-line options\n+-----------------------------\n+- `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n \n Credits\n ======="
      }
    ]
  },
  {
    "sha": "5a7c09aebf8b0229e9f320135472275d244a7a35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTdjMDlhZWJmOGIwMjI5ZTlmMzIwMTM1NDcyMjc1ZDI0NGE3YTM1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-12-01T01:49:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T10:28:23Z"
      },
      "message": "test: Add tests for `-debuglogfile` with subdirs",
      "tree": {
        "sha": "f2d225125200cfbdf63f8fa6674245c97ec19204",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2d225125200cfbdf63f8fa6674245c97ec19204"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a7c09aebf8b0229e9f320135472275d244a7a35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a7c09aebf8b0229e9f320135472275d244a7a35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a7c09aebf8b0229e9f320135472275d244a7a35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a7c09aebf8b0229e9f320135472275d244a7a35/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4158734946eb00a6944244f75a8a5b39e43c302a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4158734946eb00a6944244f75a8a5b39e43c302a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4158734946eb00a6944244f75a8a5b39e43c302a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 19,
      "deletions": 2
    },
    "files": [
      {
        "sha": "da4e7b0398b9356f2b47805853e1ea9aa305badd",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a7c09aebf8b0229e9f320135472275d244a7a35/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a7c09aebf8b0229e9f320135472275d244a7a35/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=5a7c09aebf8b0229e9f320135472275d244a7a35",
        "patch": "@@ -27,15 +27,32 @@ def run_test(self):\n         assert os.path.isfile(tempname)\n \n         # check that invalid log (relative) will cause error\n+        invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n+        invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        self.assert_start_raises_init_error(0, [\"-debuglogfile=ssdksjdf/sdasdfa/sdfsdfsfd\"],\n+        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % (invalidname)],\n                                                 \"Error: Could not open debug log file\")\n+        assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n+\n+        # check that invalid log (relative) works after path exists\n+        self.stop_node(0)\n+        os.mkdir(invdir)\n+        self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n+        assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (absolute) will cause error\n         self.stop_node(0)\n-        invalidname = os.path.join(self.options.tmpdir, \"foo/foo.log\")\n+        invdir = os.path.join(self.options.tmpdir, \"foo\")\n+        invalidname = os.path.join(invdir, \"foo.log\")\n         self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % invalidname],\n                                                \"Error: Could not open debug log file\")\n+        assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n+\n+        # check that invalid log (absolute) works after path exists\n+        self.stop_node(0)\n+        os.mkdir(invdir)\n+        self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n+        assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDdlMGEzMjg5YmFhM2I2NDFjYTdhYjg2NGM1ZThhZjQzMDZmNGRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T14:17:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T14:19:07Z"
      },
      "message": "Merge #11337: Fix code constness in CBlockIndex::GetAncestor() overloads\n\nb4058ed Fix code constness in CBlockIndex::GetAncestor() overloads (Dan Raviv)\n\nPull request description:\n\n  Make the non-const overload of `CBlockIndex::GetAncestor()` reuse the const overload implementation instead of the other way around. This way, the constness of the const overload implementation is guaranteed. The other way around, it was possible to implement the non-const overload in a way which mutates the object, and since that implementation would be called even for const objects (due to the reuse), we would get undefined behavior.\n\nTree-SHA512: 545a8639bc52502ea06dbd924e8fabec6274fa69b43e3b8966a7987ce4dae6fb2498f623730fde7ed0e47478941c7f8baa2e76a12018134ff7c14c0dfa25ba3a",
      "tree": {
        "sha": "adc796ee37727c0d11dc5e5bcd0bd3d3e30c6b62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adc796ee37727c0d11dc5e5bcd0bd3d3e30c6b62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEbBAABCgAGBQJaIWTbAAoJEB5K7WKYbNJdA9sH9ipr87Iogg/FUGUuO7hKq0NU\neYoKfDrl3XjtR/sKC4HJqOVIIYw/n10SLiZhnTB0lglnKT0TGSpYcf3kfiDgqgZ+\n3GMvF27TfwMhTQcMb7+fhg9yH1ba3ooK7SkmoIw8xi/t9bnPgihzqEHPBQIQYfxb\ntj3jCcqLq6Bdhi1dtaKuUZYTdM5hsWVd6wHAcqB950UF/i5qbMD1Gbl+fmXT0NyO\n31a00Tq4st5l67zigk8ocWG+x0so0RDkyvKLwpFNdmNDgp3hNwV9vtWbxkZrXYgs\nX30nTLxs5AXv6y/zgFLcItQUVy7bCHEt49SO5WCSvfLCUKTFlbdB4xByin4uXA==\n=j4x9\n-----END PGP SIGNATURE-----",
        "payload": "tree adc796ee37727c0d11dc5e5bcd0bd3d3e30c6b62\nparent 13e31dd6548d64a5992f439e74bb424bf88aca04\nparent b4058ed9c6e1f23720afa0b383c56a9aaed86dcd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512137845 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512137947 +0100\n\nMerge #11337: Fix code constness in CBlockIndex::GetAncestor() overloads\n\nb4058ed Fix code constness in CBlockIndex::GetAncestor() overloads (Dan Raviv)\n\nPull request description:\n\n  Make the non-const overload of `CBlockIndex::GetAncestor()` reuse the const overload implementation instead of the other way around. This way, the constness of the const overload implementation is guaranteed. The other way around, it was possible to implement the non-const overload in a way which mutates the object, and since that implementation would be called even for const objects (due to the reuse), we would get undefined behavior.\n\nTree-SHA512: 545a8639bc52502ea06dbd924e8fabec6274fa69b43e3b8966a7987ce4dae6fb2498f623730fde7ed0e47478941c7f8baa2e76a12018134ff7c14c0dfa25ba3a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13e31dd6548d64a5992f439e74bb424bf88aca04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e31dd6548d64a5992f439e74bb424bf88aca04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13e31dd6548d64a5992f439e74bb424bf88aca04"
      },
      {
        "sha": "b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7ebc08a50bef2587e39be53a69c7b0931d335a9f",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
        "patch": "@@ -80,12 +80,13 @@ int static inline GetSkipHeight(int height) {\n     return (height & 1) ? InvertLowestOne(InvertLowestOne(height - 1)) + 1 : InvertLowestOne(height);\n }\n \n-CBlockIndex* CBlockIndex::GetAncestor(int height)\n+const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n {\n-    if (height > nHeight || height < 0)\n+    if (height > nHeight || height < 0) {\n         return nullptr;\n+    }\n \n-    CBlockIndex* pindexWalk = this;\n+    const CBlockIndex* pindexWalk = this;\n     int heightWalk = nHeight;\n     while (heightWalk > height) {\n         int heightSkip = GetSkipHeight(heightWalk);\n@@ -106,9 +107,9 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n     return pindexWalk;\n }\n \n-const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n+CBlockIndex* CBlockIndex::GetAncestor(int height)\n {\n-    return const_cast<CBlockIndex*>(this)->GetAncestor(height);\n+    return const_cast<CBlockIndex*>(static_cast<const CBlockIndex*>(this)->GetAncestor(height));\n }\n \n void CBlockIndex::BuildSkip()"
      }
    ]
  },
  {
    "sha": "bf20a7d6404e92efed07f81b4ffd3eab406d2526",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjIwYTdkNjQwNGU5MmVmZWQwN2Y4MWI0ZmZkM2VhYjQwNmQyNTI2",
    "commit": {
      "author": {
        "name": "Tim Shimmin",
        "email": "TimothyShimmin@users.noreply.github.com",
        "date": "2017-11-30T21:59:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T14:26:53Z"
      },
      "message": "[docs] Fixed outdated link with archive.is\n\nThe listed link is directing to an empty page, at least content-wise. I found the same page on archive.is and linked to that instead.",
      "tree": {
        "sha": "8d9536eac1a4323aea99471ad64ed008a9290be5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d9536eac1a4323aea99471ad64ed008a9290be5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf20a7d6404e92efed07f81b4ffd3eab406d2526",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf20a7d6404e92efed07f81b4ffd3eab406d2526",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf20a7d6404e92efed07f81b4ffd3eab406d2526",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf20a7d6404e92efed07f81b4ffd3eab406d2526/comments",
    "author": {
      "login": "TimothyShimmin",
      "id": 9156962,
      "node_id": "MDQ6VXNlcjkxNTY5NjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9156962?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TimothyShimmin",
      "html_url": "https://github.com/TimothyShimmin",
      "followers_url": "https://api.github.com/users/TimothyShimmin/followers",
      "following_url": "https://api.github.com/users/TimothyShimmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/TimothyShimmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TimothyShimmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TimothyShimmin/subscriptions",
      "organizations_url": "https://api.github.com/users/TimothyShimmin/orgs",
      "repos_url": "https://api.github.com/users/TimothyShimmin/repos",
      "events_url": "https://api.github.com/users/TimothyShimmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TimothyShimmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d357447eb8bcc17d4438bc9f4f3a34fac308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e38d357447eb8bcc17d4438bc9f4f3a34fac308"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "01da32109b168843d5d942a7d274ceaad6a27d35",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf20a7d6404e92efed07f81b4ffd3eab406d2526/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf20a7d6404e92efed07f81b4ffd3eab406d2526/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=bf20a7d6404e92efed07f81b4ffd3eab406d2526",
        "patch": "@@ -52,4 +52,4 @@ examine `uint256_tests.cpp`.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://archive.is/dRBGf)."
      }
    ]
  },
  {
    "sha": "00d25e90db06149fa456b0a8f15b7b68005ff9c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGQyNWU5MGRiMDYxNDlmYTQ1NmIwYThmMTViN2I2ODAwNWZmOWM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T14:27:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T14:28:53Z"
      },
      "message": "Merge #11804: [docs] Fixed outdated link with archive.is\n\nbf20a7d [docs] Fixed outdated link with archive.is (Tim Shimmin)\n\nTree-SHA512: 7d316aa4c462213578a9a1e71b06a459924ed3bb681a0469cc3719b21a871a6350fff4656696057e362561ee10dc10e933fe1328ef454ab7e133ecf05549ec1c",
      "tree": {
        "sha": "0c17ff3e11f6a6b54dbd298f1aaebb589b8e44bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c17ff3e11f6a6b54dbd298f1aaebb589b8e44bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00d25e90db06149fa456b0a8f15b7b68005ff9c5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaIWclAAoJEB5K7WKYbNJdHVoH/R0hg0SfE4RAOuHY+qCtacXI\nJuPo9WYo/j3TpyAtkC5adKzJfWLXtFPQC5h4Z/0vlmEFaQKxA35wgr2w4dGaPcjX\nyrdprjDb/oR8xEzC8VrhxGLogy32ZLocGHW3ArrxD1Ar9hf16+u5vS3cypPVxMCH\ngV++QpjDkbScTMtM1g9QoaFS9a0mp3opsu5CQu8b01rvcq/EwtxDiB4ZGvLFwEid\nE1PaJKl509aAmoBQ8MO2KMkLGY/9U/AFrl/bUFfdyNcJr+hieUkQ0ZxmPkuSHMfY\nB+DDgdNLWV3puj5Vl7m3gaEyJHsvqwNQu9mLpOx13JWGH923mWj030JJgyhXLak=\n=2wE/\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c17ff3e11f6a6b54dbd298f1aaebb589b8e44bf\nparent 0d7e0a3289baa3b641ca7ab864c5e8af4306f4de\nparent bf20a7d6404e92efed07f81b4ffd3eab406d2526\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512138440 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512138533 +0100\n\nMerge #11804: [docs] Fixed outdated link with archive.is\n\nbf20a7d [docs] Fixed outdated link with archive.is (Tim Shimmin)\n\nTree-SHA512: 7d316aa4c462213578a9a1e71b06a459924ed3bb681a0469cc3719b21a871a6350fff4656696057e362561ee10dc10e933fe1328ef454ab7e133ecf05549ec1c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d25e90db06149fa456b0a8f15b7b68005ff9c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00d25e90db06149fa456b0a8f15b7b68005ff9c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d25e90db06149fa456b0a8f15b7b68005ff9c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de"
      },
      {
        "sha": "bf20a7d6404e92efed07f81b4ffd3eab406d2526",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf20a7d6404e92efed07f81b4ffd3eab406d2526",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf20a7d6404e92efed07f81b4ffd3eab406d2526"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "01da32109b168843d5d942a7d274ceaad6a27d35",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00d25e90db06149fa456b0a8f15b7b68005ff9c5/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00d25e90db06149fa456b0a8f15b7b68005ff9c5/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=00d25e90db06149fa456b0a8f15b7b68005ff9c5",
        "patch": "@@ -52,4 +52,4 @@ examine `uint256_tests.cpp`.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://archive.is/dRBGf)."
      }
    ]
  },
  {
    "sha": "93a34cfeecf51457151183aba7328026dab42dac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2EzNGNmZWVjZjUxNDU3MTUxMTgzYWJhNzMyODAyNmRhYjQyZGFj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-09T16:57:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:33:10Z"
      },
      "message": "Make DisconnectBlock unaware of where undo data resides on disk",
      "tree": {
        "sha": "17456ad068aea03fcb278ee39f5dd5b7efbb26c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17456ad068aea03fcb278ee39f5dd5b7efbb26c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93a34cfeecf51457151183aba7328026dab42dac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a34cfeecf51457151183aba7328026dab42dac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93a34cfeecf51457151183aba7328026dab42dac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a34cfeecf51457151183aba7328026dab42dac/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00d25e90db06149fa456b0a8f15b7b68005ff9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d25e90db06149fa456b0a8f15b7b68005ff9c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00d25e90db06149fa456b0a8f15b7b68005ff9c5"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b7af8412793a7f94faa117615018ff682a9f14bf",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93a34cfeecf51457151183aba7328026dab42dac/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93a34cfeecf51457151183aba7328026dab42dac/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=93a34cfeecf51457151183aba7328026dab42dac",
        "patch": "@@ -1380,8 +1380,13 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull()) {\n+        return error(\"%s: no undo data available\", __func__);\n+    }\n+\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n@@ -1391,7 +1396,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     uint256 hashChecksum;\n     CHashVerifier<CAutoFile> verifier(&filein); // We need a CHashVerifier as reserializing may lose data\n     try {\n-        verifier << hashBlock;\n+        verifier << pindex->pprev->GetBlockHash();\n         verifier >> blockundo;\n         filein >> hashChecksum;\n     }\n@@ -1474,12 +1479,7 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n     bool fClean = true;\n \n     CBlockUndo blockUndo;\n-    CDiskBlockPos pos = pindex->GetUndoPos();\n-    if (pos.IsNull()) {\n-        error(\"DisconnectBlock(): no undo data available\");\n-        return DISCONNECT_FAILED;\n-    }\n-    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash())) {\n+    if (!UndoReadFromDisk(blockUndo, pindex)) {\n         error(\"DisconnectBlock(): failure reading undo data\");\n         return DISCONNECT_FAILED;\n     }\n@@ -3723,10 +3723,10 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n-            CDiskBlockPos pos = pindex->GetUndoPos();\n-            if (!pos.IsNull()) {\n-                if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n+            if (!pindex->GetUndoPos().IsNull()) {\n+                if (!UndoReadFromDisk(undo, pindex)) {\n                     return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                }\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks"
      }
    ]
  },
  {
    "sha": "50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDcwMWJhNWZjNjE5OWVlNWU5NTEyMGQ1Yjc3YmQxM2UzYmJlNjVj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-03T00:54:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:33:10Z"
      },
      "message": "Move txindex/undo data disk location stuff out of ConnectBlock",
      "tree": {
        "sha": "45acc0250f98735efe2115eea553cf4e1877ba16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45acc0250f98735efe2115eea553cf4e1877ba16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93a34cfeecf51457151183aba7328026dab42dac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a34cfeecf51457151183aba7328026dab42dac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93a34cfeecf51457151183aba7328026dab42dac"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 42,
      "deletions": 23
    },
    "files": [
      {
        "sha": "74e96718420a68e496085b1e6273b2035cba96b3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 23,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
        "patch": "@@ -1556,6 +1556,43 @@ void static FlushBlockFile(bool fFinalize = false)\n \n static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+        setDirtyBlockIndex.insert(pindex);\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    if (fTxIndex)\n+        if (!pblocktree->WriteTxIndex(vPos))\n+            return AbortNode(state, \"Failed to write transaction index\");\n+\n+    return true;\n+}\n+\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck() {\n@@ -1783,9 +1820,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     CAmount nFees = 0;\n     int nInputs = 0;\n     int64_t nSigOpsCost = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     std::vector<PrecomputedTransactionData> txdata;\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n@@ -1846,9 +1880,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n             blockundo.vtxundo.push_back(CTxUndo());\n         }\n         UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n-\n-        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n@@ -1868,28 +1899,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (fJustCheck)\n         return true;\n \n-    // Write undo information to disk\n-    if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n-    {\n-        if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos _pos;\n-            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n-                return AbortNode(state, \"Failed to write undo data\");\n-\n-            // update nUndoPos in block index\n-            pindex->nUndoPos = _pos.nPos;\n-            pindex->nStatus |= BLOCK_HAVE_UNDO;\n-        }\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+        return false;\n \n+    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n         pindex->RaiseValidity(BLOCK_VALID_SCRIPTS);\n         setDirtyBlockIndex.insert(pindex);\n     }\n \n-    if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n-            return AbortNode(state, \"Failed to write transaction index\");\n+    if (!WriteTxIndexDataForBlock(block, state, pindex))\n+        return false;\n \n     assert(pindex->phashBlock);\n     // add this block to the view's block chain"
      }
    ]
  },
  {
    "sha": "e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTA0ZjBmYjdlNDY0ZjhjYWRiNGNiYzk5ZTgzMjlkMjJjMzVjMzZh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-26T01:35:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:33:10Z"
      },
      "message": "Move block writing out of AcceptBlock",
      "tree": {
        "sha": "f1bc7864833b408b43483427a46e448cb1efb9dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1bc7864833b408b43483427a46e448cb1efb9dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 29,
      "deletions": 20
    },
    "files": [
      {
        "sha": "067e41495b89041f119d392aec8380e16f3524c6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 20,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
        "patch": "@@ -2759,7 +2759,7 @@ static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& sta\n     return true;\n }\n \n-static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -2808,7 +2808,7 @@ static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned i\n                 }\n             }\n             else\n-                return state.Error(\"out of disk space\");\n+                return error(\"out of disk space\");\n         }\n     }\n \n@@ -3196,6 +3196,25 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != nullptr)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n+        error(\"%s: FindBlockPos failed\", __func__);\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == nullptr) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n+            AbortNode(\"Failed to write block\");\n+            return CDiskBlockPos();\n+        }\n+    }\n+    return blockPos;\n+}\n+\n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n@@ -3257,19 +3276,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != nullptr)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == nullptr)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n+            return false;\n+        }\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n@@ -4037,15 +4050,11 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n-        // Start new block file\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        CValidationState state;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-            return error(\"%s: FindBlockPos failed\", __func__);\n-        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n+        CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n+        if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = AddToBlockIndex(block);\n+        CValidationState state;\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n             return error(\"%s: genesis block not accepted\", __func__);\n     } catch (const std::runtime_error& e) {"
      }
    ]
  },
  {
    "sha": "fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDRkODBhMmY4ZDJjZWQ4ZmZlZGY0NmU0YTcwZmY0ZjdhMDU2NjNm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:34:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:34:46Z"
      },
      "message": "Create initial CChainState to hold chain state information",
      "tree": {
        "sha": "254249b24bca9724a582819f053639ae8a16b670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/254249b24bca9724a582819f053639ae8a16b670"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 195,
      "deletions": 83
    },
    "files": [
      {
        "sha": "1e0653cef12ae21febf025933657f478c2d22c16",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 193,
        "deletions": 79,
        "changes": 272,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
        "patch": "@@ -59,11 +59,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks via the validation interface, or read/write-to-disk\n+ * functions (eventually this will also be via callbacks).\n+ */\n+class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;\n+\n+    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+    bool RewindBlockIndex(const CChainParams& params);\n+    bool LoadGenesisBlock(const CChainParams& chainparams);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    void UnloadBlockIndex();\n+\n+private:\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n+\n+    CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n+    /** Create a new block index entry for a given block hash */\n+    CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    void CheckBlockIndex(const Consensus::Params& consensusParams);\n+\n+    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n+    CBlockIndex* FindMostWorkChain();\n+    bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+\n+\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n+} g_chainstate;\n+\n+\n \n CCriticalSection cs_main;\n \n-BlockMap mapBlockIndex;\n-CChain chainActive;\n+BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n+CChain& chainActive = g_chainstate.chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n@@ -91,49 +197,19 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);\n \n-static void CheckBlockIndex(const Consensus::Params& consensusParams);\n-\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n+    CBlockIndex *&pindexBestInvalid = g_chainstate.pindexBestInvalid;\n \n-    struct CBlockIndexWorkComparator\n-    {\n-        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n-            // First sort by most total work, ...\n-            if (pa->nChainWork > pb->nChainWork) return false;\n-            if (pa->nChainWork < pb->nChainWork) return true;\n-\n-            // ... then by earliest time received, ...\n-            if (pa->nSequenceId < pb->nSequenceId) return false;\n-            if (pa->nSequenceId > pb->nSequenceId) return true;\n-\n-            // Use pointer address as tie breaker (should only happen with blocks\n-            // loaded from disk, as those all have id 0).\n-            if (pa < pb) return false;\n-            if (pa > pb) return true;\n-\n-            // Identical blocks.\n-            return false;\n-        }\n-    };\n-\n-    CBlockIndex *pindexBestInvalid;\n-\n-    /**\n-     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n-     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n-     * missing the data for the block.\n-     */\n-    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n      * Pruned nodes may have entries where B is missing data.\n      */\n-    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::multimap<CBlockIndex*, CBlockIndex*>& mapBlocksUnlinked = g_chainstate.mapBlocksUnlinked;\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n@@ -1197,7 +1273,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         g_failed_blocks.insert(pindex);\n@@ -1431,13 +1507,6 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n \n } // namespace\n \n-enum DisconnectResult\n-{\n-    DISCONNECT_OK,      // All good.\n-    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n-    DISCONNECT_FAILED   // Something else went wrong.\n-};\n-\n /**\n  * Restore the UTXO in a Coin at a given COutPoint\n  * @param undo The Coin to be restored.\n@@ -1474,7 +1543,7 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  When FAILED is returned, view is left in an indeterminate state. */\n-static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n+DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n     bool fClean = true;\n \n@@ -1693,8 +1762,8 @@ static int64_t nBlocksTotal = 0;\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n-static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n+bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -2124,7 +2193,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n+bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2246,7 +2315,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2304,7 +2373,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n  * Return the tip of the chain with the most work in it, that isn't\n  * known to be invalid (it's however far from certain to be valid).\n  */\n-static CBlockIndex* FindMostWorkChain() {\n+CBlockIndex* CChainState::FindMostWorkChain() {\n     do {\n         CBlockIndex *pindexNew = nullptr;\n \n@@ -2359,7 +2428,7 @@ static CBlockIndex* FindMostWorkChain() {\n }\n \n /** Delete all entries in setBlockIndexCandidates that are worse than the current tip. */\n-static void PruneBlockIndexCandidates() {\n+void CChainState::PruneBlockIndexCandidates() {\n     // Note that we can't delete the current block itself, as we may need to return to it later in case a\n     // reorganization to a better block fails.\n     std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n@@ -2374,7 +2443,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2481,7 +2550,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either nullptr or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     // Note that while we're often called here from ProcessNewBlock, this is\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n@@ -2551,9 +2620,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n     return true;\n }\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+    return g_chainstate.ActivateBestChain(state, chainparams, std::move(pblock));\n+}\n \n-\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n {\n     {\n         LOCK(cs_main);\n@@ -2579,10 +2650,13 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n         }\n     }\n \n-    return ActivateBestChain(state, params);\n+    return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n+}\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {\n+    return g_chainstate.PreciousBlock(state, params, pindex);\n }\n \n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n \n@@ -2641,8 +2715,11 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n     return true;\n }\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n+    return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n+}\n \n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     AssertLockHeld(cs_main);\n \n     int nHeight = pindex->nHeight;\n@@ -2675,8 +2752,11 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n     return true;\n }\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+    return g_chainstate.ResetBlockFailureFlags(pindex);\n+}\n \n-static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n+CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -2711,7 +2791,7 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool CChainState::ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -3116,7 +3196,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     return true;\n }\n \n-static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n+bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -3183,7 +3263,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n-            if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+            if (!g_chainstate.AcceptBlockHeader(header, state, chainparams, &pindex)) {\n                 if (first_invalid) *first_invalid = header;\n                 return false;\n             }\n@@ -3216,7 +3296,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3292,6 +3372,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (fCheckForPruning)\n         FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     return true;\n }\n \n@@ -3309,9 +3391,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n         if (ret) {\n             // Store to disk\n-            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n-        CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.GetDebugMessage());\n@@ -3321,7 +3402,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -3343,7 +3424,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3551,7 +3632,7 @@ fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n \n-CBlockIndex * InsertBlockIndex(uint256 hash)\n+CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n {\n     if (hash.IsNull())\n         return nullptr;\n@@ -3569,9 +3650,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n+    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash){ return this->InsertBlockIndex(hash); }))\n         return false;\n \n     boost::this_thread::interruption_point();\n@@ -3618,6 +3699,14 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n             pindexBestHeader = pindex;\n     }\n \n+    return true;\n+}\n+\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+{\n+    if (!g_chainstate.LoadBlockIndex(chainparams.GetConsensus(), *pblocktree))\n+        return false;\n+\n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n@@ -3690,7 +3779,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n         return false;\n     chainActive.SetTip(it->second);\n \n-    PruneBlockIndexCandidates();\n+    g_chainstate.PruneBlockIndexCandidates();\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n@@ -3764,7 +3853,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n-            DisconnectResult res = DisconnectBlock(block, pindex, coins);\n+            DisconnectResult res = g_chainstate.DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n@@ -3792,7 +3881,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!g_chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n@@ -3804,7 +3893,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n }\n \n /** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n-static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n {\n     // TODO: merge with ConnectBlock\n     CBlock block;\n@@ -3824,7 +3913,7 @@ static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs,\n     return true;\n }\n \n-bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n {\n     LOCK(cs_main);\n \n@@ -3889,7 +3978,11 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     return true;\n }\n \n-bool RewindBlockIndex(const CChainParams& params)\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n+    return g_chainstate.ReplayBlocks(params, view);\n+}\n+\n+bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n \n@@ -3970,10 +4063,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n+\n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {\n+    if (!g_chainstate.RewindBlockIndex(params)) {\n+        return false;\n+    }\n \n+    if (chainActive.Tip() != nullptr) {\n         // FlushStateToDisk can possibly read chainActive. Be conservative\n         // and skip it here, we're about to -reindex-chainstate anyway, so\n         // it'll get called a bunch real soon.\n+        CValidationState state;\n         if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS)) {\n             return false;\n         }\n@@ -3982,13 +4086,16 @@ bool RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n+void CChainState::UnloadBlockIndex() {\n+    setBlockIndexCandidates.clear();\n+}\n+\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n-    setBlockIndexCandidates.clear();\n     chainActive.SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n@@ -4010,6 +4117,8 @@ void UnloadBlockIndex()\n     }\n     mapBlockIndex.clear();\n     fHavePruned = false;\n+\n+    g_chainstate.UnloadBlockIndex();\n }\n \n bool LoadBlockIndex(const CChainParams& chainparams)\n@@ -4037,7 +4146,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadGenesisBlock(const CChainParams& chainparams)\n+bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n@@ -4064,6 +4173,11 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return true;\n }\n \n+bool LoadGenesisBlock(const CChainParams& chainparams)\n+{\n+    return g_chainstate.LoadGenesisBlock(chainparams);\n+}\n+\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n@@ -4124,7 +4238,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n+                    if (g_chainstate.AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -4158,7 +4272,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            if (g_chainstate.AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n@@ -4181,7 +4295,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     return nLoaded > 0;\n }\n \n-void static CheckBlockIndex(const Consensus::Params& consensusParams)\n+void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n {\n     if (!fCheckBlockIndex) {\n         return;"
      },
      {
        "sha": "0ddeb97aa68c4eb16b2fb457b0edfce173dcc00f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
        "patch": "@@ -159,7 +159,7 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap mapBlockIndex;\n+extern BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n@@ -294,8 +294,6 @@ void PruneOneBlockFile(const int fileNumber);\n  */\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n-/** Create a new block index entry for a given block hash */\n-CBlockIndex * InsertBlockIndex(uint256 hash);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n@@ -441,7 +439,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain chainActive;\n+extern CChain& chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "2862aca40f24acc48d3052d5ba3f639e3fc0a621",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODYyYWNhNDBmMjRhY2M0OGQzMDUyZDViYTNmNjM5ZTNmYzBhNjIx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-26T01:31:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:39:20Z"
      },
      "message": "Move some additional variables into CChainState private",
      "tree": {
        "sha": "0605ff04eefde43ff62a5cc127b26fb610c2c4d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0605ff04eefde43ff62a5cc127b26fb610c2c4d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2862aca40f24acc48d3052d5ba3f639e3fc0a621",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862aca40f24acc48d3052d5ba3f639e3fc0a621",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2862aca40f24acc48d3052d5ba3f639e3fc0a621",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862aca40f24acc48d3052d5ba3f639e3fc0a621/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 47,
      "deletions": 46
    },
    "files": [
      {
        "sha": "f6b77b6c38c75efdf21401c0b67a38f76fa28f2c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 45,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2862aca40f24acc48d3052d5ba3f639e3fc0a621/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2862aca40f24acc48d3052d5ba3f639e3fc0a621/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2862aca40f24acc48d3052d5ba3f639e3fc0a621",
        "patch": "@@ -113,6 +113,39 @@ class CChainState {\n      * missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+\n+    /**\n+     * Every received block is assigned a unique and increasing identifier, so we\n+     * know which one to give priority in case of a fork.\n+     */\n+    CCriticalSection cs_nBlockSequenceId;\n+    /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n+    int32_t nBlockSequenceId = 1;\n+    /** Decreasing counter (used by subsequent preciousblock calls). */\n+    int32_t nBlockReverseSequenceId = -1;\n+    /** chainwork for the last block that preciousblock has been applied to. */\n+    arith_uint256 nLastPreciousChainwork = 0;\n+\n+    /** In order to efficiently track invalidity of headers, we keep the set of\n+      * blocks which we tried to connect and found to be invalid here (ie which\n+      * were set to BLOCK_FAILED_VALID since the last restart). We can then\n+      * walk this set and check if a new header is a descendant of something in\n+      * this set, preventing us from having to walk mapBlockIndex when we try\n+      * to connect a bad block and fail.\n+      *\n+      * While this is more complicated than marking everything which descends\n+      * from an invalid block as invalid at the time we discover it to be\n+      * invalid, doing so would require walking all of mapBlockIndex to find all\n+      * descendants. Since this case should be very rare, keeping track of all\n+      * BLOCK_FAILED_VALID blocks in a set should be just fine and work just as\n+      * well.\n+      *\n+      * Because we already walk mapBlockIndex in height-order at startup, we go\n+      * ahead and mark descendants of invalid blocks as FAILED_CHILD at that time,\n+      * instead of putting things in this set.\n+      */\n+    std::set<CBlockIndex*> g_failed_blocks;\n+\n public:\n     CChain chainActive;\n     BlockMap mapBlockIndex;\n@@ -220,38 +253,6 @@ namespace {\n      */\n     bool fCheckForPruning = false;\n \n-    /**\n-     * Every received block is assigned a unique and increasing identifier, so we\n-     * know which one to give priority in case of a fork.\n-     */\n-    CCriticalSection cs_nBlockSequenceId;\n-    /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    int32_t nBlockSequenceId = 1;\n-    /** Decreasing counter (used by subsequent preciousblock calls). */\n-    int32_t nBlockReverseSequenceId = -1;\n-    /** chainwork for the last block that preciousblock has been applied to. */\n-    arith_uint256 nLastPreciousChainwork = 0;\n-\n-    /** In order to efficiently track invalidity of headers, we keep the set of\n-      * blocks which we tried to connect and found to be invalid here (ie which\n-      * were set to BLOCK_FAILED_VALID since the last restart). We can then\n-      * walk this set and check if a new header is a descendant of something in\n-      * this set, preventing us from having to walk mapBlockIndex when we try\n-      * to connect a bad block and fail.\n-      *\n-      * While this is more complicated than marking everything which descends\n-      * from an invalid block as invalid at the time we discover it to be\n-      * invalid, doing so would require walking all of mapBlockIndex to find all\n-      * descendants. Since this case should be very rare, keeping track of all\n-      * BLOCK_FAILED_VALID blocks in a set should be just fine and work just as\n-      * well.\n-      *\n-      * Because we already walk mapBlockIndex in height-order at startup, we go\n-      * ahead and mark descendants of invalid blocks as FAILED_CHILD at that time,\n-      * instead of putting things in this set.\n-      */\n-    std::set<CBlockIndex*> g_failed_blocks;\n-\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -2129,10 +2130,8 @@ static void DoWarning(const std::string& strWarning)\n     }\n }\n \n-/** Update chainActive and related internal data structures. */\n-void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n-    chainActive.SetTip(pindexNew);\n-\n+/** Check warning conditions and do some notifications on new chain tip set. */\n+void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     // New best block\n     mempool.AddTransactionsUpdated(1);\n \n@@ -2142,7 +2141,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     if (!IsInitialBlockDownload())\n     {\n         int nUpgraded = 0;\n-        const CBlockIndex* pindex = chainActive.Tip();\n+        const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n             ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n@@ -2173,10 +2172,10 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n         }\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__,\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), chainActive.Tip()->nVersion,\n-      log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), chainActive.Tip()), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n+      pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n+      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexNew->GetBlockTime()),\n+      GuessVerificationProgress(chainParams.TxData(), pindexNew), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n         LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n     LogPrintf(\"\\n\");\n@@ -2230,7 +2229,8 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n         }\n     }\n \n-    // Update chainActive and related variables.\n+    chainActive.SetTip(pindexDelete->pprev);\n+\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n@@ -2359,6 +2359,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update chainActive & related variables.\n+    chainActive.SetTip(pindexNew);\n     UpdateTip(pindexNew, chainparams);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n@@ -4087,6 +4088,8 @@ bool RewindBlockIndex(const CChainParams& params) {\n }\n \n void CChainState::UnloadBlockIndex() {\n+    nBlockSequenceId = 1;\n+    g_failed_blocks.clear();\n     setBlockIndexCandidates.clear();\n }\n \n@@ -4103,9 +4106,7 @@ void UnloadBlockIndex()\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n-    nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n-    g_failed_blocks.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n@@ -4637,7 +4638,7 @@ bool DumpMempool(void)\n }\n \n //! Guess how far we are in the verification process at the given block index\n-double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n+double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {\n     if (pindex == nullptr)\n         return 0.0;\n "
      },
      {
        "sha": "eae129b28f0a7c8fe49399aff44c6907be020947",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2862aca40f24acc48d3052d5ba3f639e3fc0a621/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2862aca40f24acc48d3052d5ba3f639e3fc0a621/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2862aca40f24acc48d3052d5ba3f639e3fc0a621",
        "patch": "@@ -279,7 +279,7 @@ bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams,\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n-double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n+double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex* pindex);\n \n /** Calculate the amount of disk space the block & undo files currently use */\n uint64_t CalculateCurrentUsage();"
      }
    ]
  },
  {
    "sha": "22fdddeabb17881af2004c45538f91514837d363",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmZkZGRlYWJiMTc4ODFhZjIwMDRjNDU1MzhmOTE1MTQ4MzdkMzYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-27T15:31:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-04T14:39:21Z"
      },
      "message": "Avoid calling GetSerializeSize on each tx in a block if !fTxIndex",
      "tree": {
        "sha": "0434b725bfdf14daffab46b620008d0c3cf82eb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0434b725bfdf14daffab46b620008d0c3cf82eb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22fdddeabb17881af2004c45538f91514837d363",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22fdddeabb17881af2004c45538f91514837d363",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22fdddeabb17881af2004c45538f91514837d363",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22fdddeabb17881af2004c45538f91514837d363/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2862aca40f24acc48d3052d5ba3f639e3fc0a621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862aca40f24acc48d3052d5ba3f639e3fc0a621",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2862aca40f24acc48d3052d5ba3f639e3fc0a621"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "af303df73a74fbc0fc2306bfbc7a41e932d007c9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22fdddeabb17881af2004c45538f91514837d363/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22fdddeabb17881af2004c45538f91514837d363/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=22fdddeabb17881af2004c45538f91514837d363",
        "patch": "@@ -1647,6 +1647,8 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n \n static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n {\n+    if (!fTxIndex) return true;\n+\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n@@ -1656,9 +1658,9 @@ static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& stat\n         pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n     }\n \n-    if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n-            return AbortNode(state, \"Failed to write transaction index\");\n+    if (!pblocktree->WriteTxIndex(vPos)) {\n+        return AbortNode(state, \"Failed to write transaction index\");\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "24df9af81625122c816a0ae6bb842ea47a4041ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGRmOWFmODE2MjUxMjJjODE2YTBhZTZiYjg0MmVhNDdhNDA0MWZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-04T17:30:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-04T17:55:17Z"
      },
      "message": "Merge #11781: Add `-debuglogfile` option\n\n5a7c09a test: Add tests for `-debuglogfile` with subdirs (Anthony Towns)\n4158734 doc: Update release notes for `-debuglogfile` (Wladimir J. van der Laan)\n2323242 test: Add test for `-debuglogfile` (Wladimir J. van der Laan)\ncf5f432 Add `-debuglogfile` option (Wladimir J. van der Laan)\n\nPull request description:\n\n  This patch adds an option to configure the name and/or directory of the debug log file.\n\n  The user can specify either a relative path, in which case the path is relative to the (network specific) data directory. They can also specify an absolute path to put the log anywhere else in the file system.\n\n  Alternative to #11741 that gets rid of the concept of a \"log directory\" by specifying the path for the specific kind of log, the debug log. Which happens to be the only kind of log we have at this point*, but a hypothetical new kind of log (say, an audit log) would get a new option. This has more flexibility than specifying a directory which has to contain all of them.\n\n  \\* excluding `db.log` which is internally generated by the wallet database library, but that one moves along with `-walletdir`.\n\nTree-SHA512: 4434d0e598dc23504e5c9e67fdbaef56db4f0fd490f9f54fd503e69d4dda9b5b69c539e1794ed841e72161b7b1dc3374d2f1193dd431b057566750e56fd8f24b",
      "tree": {
        "sha": "dfe6cf82d649fc16a9cf175b6245bf09251dd878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfe6cf82d649fc16a9cf175b6245bf09251dd878"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24df9af81625122c816a0ae6bb842ea47a4041ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaJYwFAAoJEB5K7WKYbNJdP1MIALsI+0AWaow0tLKhLQg0dSxk\nc3YmKhYsmw0wysmNjqf/N33rl8Gu146wAfB7bEfPwKJuTnpQCxliKtoX9T/aoQPi\n5rEghoHOklukfjfexWGiz8i4JHz+Mw7ZuVWfkJzbPdVtChGm+aVpUlfjuZC/kKBK\ni1pVQ2263W7L1OJPPeegC/qyskV9PcknYNLYNbi6QO0pT2O1ac3Gzwi/0+5qo0kT\nmsmxRtNlNzDJnWsOWmP6kIqHl2lPLZBRWVvYDj6WZcj684npCtstksdHyfyk3NV8\nl5f6m9vPKcoXYo+qeIVI44JYWN6Gpe0z2vxvNffurlLLYB+5p8R41pA6qnmtTPE=\n=cJdy\n-----END PGP SIGNATURE-----",
        "payload": "tree dfe6cf82d649fc16a9cf175b6245bf09251dd878\nparent 00d25e90db06149fa456b0a8f15b7b68005ff9c5\nparent 5a7c09aebf8b0229e9f320135472275d244a7a35\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512408625 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512410117 +0100\n\nMerge #11781: Add `-debuglogfile` option\n\n5a7c09a test: Add tests for `-debuglogfile` with subdirs (Anthony Towns)\n4158734 doc: Update release notes for `-debuglogfile` (Wladimir J. van der Laan)\n2323242 test: Add test for `-debuglogfile` (Wladimir J. van der Laan)\ncf5f432 Add `-debuglogfile` option (Wladimir J. van der Laan)\n\nPull request description:\n\n  This patch adds an option to configure the name and/or directory of the debug log file.\n\n  The user can specify either a relative path, in which case the path is relative to the (network specific) data directory. They can also specify an absolute path to put the log anywhere else in the file system.\n\n  Alternative to #11741 that gets rid of the concept of a \"log directory\" by specifying the path for the specific kind of log, the debug log. Which happens to be the only kind of log we have at this point*, but a hypothetical new kind of log (say, an audit log) would get a new option. This has more flexibility than specifying a directory which has to contain all of them.\n\n  \\* excluding `db.log` which is internally generated by the wallet database library, but that one moves along with `-walletdir`.\n\nTree-SHA512: 4434d0e598dc23504e5c9e67fdbaef56db4f0fd490f9f54fd503e69d4dda9b5b69c539e1794ed841e72161b7b1dc3374d2f1193dd431b057566750e56fd8f24b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24df9af81625122c816a0ae6bb842ea47a4041ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24df9af81625122c816a0ae6bb842ea47a4041ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24df9af81625122c816a0ae6bb842ea47a4041ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00d25e90db06149fa456b0a8f15b7b68005ff9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d25e90db06149fa456b0a8f15b7b68005ff9c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00d25e90db06149fa456b0a8f15b7b68005ff9c5"
      },
      {
        "sha": "5a7c09aebf8b0229e9f320135472275d244a7a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a7c09aebf8b0229e9f320135472275d244a7a35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a7c09aebf8b0229e9f320135472275d244a7a35"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 98,
      "deletions": 14
    },
    "files": [
      {
        "sha": "43009b08135666dbd02996002f25a7fb6c7dfb5c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24df9af81625122c816a0ae6bb842ea47a4041ff/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24df9af81625122c816a0ae6bb842ea47a4041ff/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=24df9af81625122c816a0ae6bb842ea47a4041ff",
        "patch": "@@ -90,6 +90,9 @@ Low-level RPC changes\n   * `getmininginfo`\n - The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n \n+Changed command-line options\n+-----------------------------\n+- `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n \n Credits\n ======="
      },
      {
        "sha": "871a585267e4cc3f3de7c6547fe12e5da9b8f736",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24df9af81625122c816a0ae6bb842ea47a4041ff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24df9af81625122c816a0ae6bb842ea47a4041ff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=24df9af81625122c816a0ae6bb842ea47a4041ff",
        "patch": "@@ -342,6 +342,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n+    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n@@ -1209,8 +1210,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         ShrinkDebugFile();\n     }\n \n-    if (fPrintToDebugLog)\n-        OpenDebugLog();\n+    if (fPrintToDebugLog) {\n+        if (!OpenDebugLog()) {\n+            return InitError(strprintf(\"Could not open debug log file %s\", GetDebugLogPath().string()));\n+        }\n+    }\n \n     if (!fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));"
      },
      {
        "sha": "6631c236f1dc821558419eccdc807fff9823b89a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 11,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24df9af81625122c816a0ae6bb842ea47a4041ff/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24df9af81625122c816a0ae6bb842ea47a4041ff/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=24df9af81625122c816a0ae6bb842ea47a4041ff",
        "patch": "@@ -89,6 +89,7 @@ const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n ArgsManager gArgs;\n bool fPrintToConsole = false;\n@@ -189,26 +190,40 @@ static void DebugPrintInit()\n     vMsgsBeforeOpenLog = new std::list<std::string>;\n }\n \n-void OpenDebugLog()\n+fs::path GetDebugLogPath()\n+{\n+    fs::path logfile(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    if (logfile.is_absolute()) {\n+        return logfile;\n+    } else {\n+        return GetDataDir() / logfile;\n+    }\n+}\n+\n+bool OpenDebugLog()\n {\n     boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n     boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n     assert(fileout == nullptr);\n     assert(vMsgsBeforeOpenLog);\n-    fs::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDebugLogPath();\n+\n     fileout = fsbridge::fopen(pathDebug, \"a\");\n-    if (fileout) {\n-        setbuf(fileout, nullptr); // unbuffered\n-        // dump buffered messages from before we opened the log\n-        while (!vMsgsBeforeOpenLog->empty()) {\n-            FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n-            vMsgsBeforeOpenLog->pop_front();\n-        }\n+    if (!fileout) {\n+        return false;\n+    }\n+\n+    setbuf(fileout, nullptr); // unbuffered\n+    // dump buffered messages from before we opened the log\n+    while (!vMsgsBeforeOpenLog->empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+        vMsgsBeforeOpenLog->pop_front();\n     }\n \n     delete vMsgsBeforeOpenLog;\n     vMsgsBeforeOpenLog = nullptr;\n+    return true;\n }\n \n struct CLogCategoryDesc\n@@ -355,7 +370,7 @@ int LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n-                fs::path pathDebug = GetDataDir() / \"debug.log\";\n+                fs::path pathDebug = GetDebugLogPath();\n                 if (fsbridge::freopen(pathDebug,\"a\",fileout) != nullptr)\n                     setbuf(fileout, nullptr); // unbuffered\n             }\n@@ -774,7 +789,7 @@ void ShrinkDebugFile()\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n-    fs::path pathLog = GetDataDir() / \"debug.log\";\n+    fs::path pathLog = GetDebugLogPath();\n     FILE* file = fsbridge::fopen(pathLog, \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes"
      },
      {
        "sha": "6687b865d26302fe37f5ef2aa839c8154952d5a1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24df9af81625122c816a0ae6bb842ea47a4041ff/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24df9af81625122c816a0ae6bb842ea47a4041ff/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=24df9af81625122c816a0ae6bb842ea47a4041ff",
        "patch": "@@ -36,6 +36,7 @@ int64_t GetStartupTime();\n static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n+extern const char * const DEFAULT_DEBUGLOGFILE;\n \n /** Signals for translation. */\n class CTranslationInterface\n@@ -180,7 +181,8 @@ void CreatePidFile(const fs::path &path, pid_t pid);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n-void OpenDebugLog();\n+fs::path GetDebugLogPath();\n+bool OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n "
      },
      {
        "sha": "da4e7b0398b9356f2b47805853e1ea9aa305badd",
        "filename": "test/functional/feature_logging.py",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24df9af81625122c816a0ae6bb842ea47a4041ff/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24df9af81625122c816a0ae6bb842ea47a4041ff/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=24df9af81625122c816a0ae6bb842ea47a4041ff",
        "patch": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test debug logging.\"\"\"\n+\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class LoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        # test default log file name\n+        assert os.path.isfile(os.path.join(self.nodes[0].datadir, \"regtest\", \"debug.log\"))\n+\n+        # test alternative log file name in datadir\n+        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert os.path.isfile(os.path.join(self.nodes[0].datadir, \"regtest\", \"foo.log\"))\n+\n+        # test alternative log file name outside datadir\n+        tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n+        self.restart_node(0, [\"-debuglogfile=%s\" % tempname])\n+        assert os.path.isfile(tempname)\n+\n+        # check that invalid log (relative) will cause error\n+        invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n+        invalidname = os.path.join(\"foo\", \"foo.log\")\n+        self.stop_node(0)\n+        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % (invalidname)],\n+                                                \"Error: Could not open debug log file\")\n+        assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n+\n+        # check that invalid log (relative) works after path exists\n+        self.stop_node(0)\n+        os.mkdir(invdir)\n+        self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n+        assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n+\n+        # check that invalid log (absolute) will cause error\n+        self.stop_node(0)\n+        invdir = os.path.join(self.options.tmpdir, \"foo\")\n+        invalidname = os.path.join(invdir, \"foo.log\")\n+        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % invalidname],\n+                                               \"Error: Could not open debug log file\")\n+        assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n+\n+        # check that invalid log (absolute) works after path exists\n+        self.stop_node(0)\n+        os.mkdir(invdir)\n+        self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n+        assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n+\n+\n+if __name__ == '__main__':\n+    LoggingTest().main()"
      },
      {
        "sha": "e38146a79ab03baa9bd9968aaca3763f8d8c65ed",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24df9af81625122c816a0ae6bb842ea47a4041ff/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24df9af81625122c816a0ae6bb842ea47a4041ff/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=24df9af81625122c816a0ae6bb842ea47a4041ff",
        "patch": "@@ -127,6 +127,7 @@\n     'p2p-fingerprint.py',\n     'uacomment.py',\n     'p2p-acceptblock.py',\n+    'feature_logging.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "c17f11f7b43ad3bd9e242c67db1f3679558a0581",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTdmMTFmN2I0M2FkM2JkOWUyNDJjNjdkYjFmMzY3OTU1OGEwNTgx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-04T21:18:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-04T23:52:11Z"
      },
      "message": "Merge #10773: Shell script cleanups\n\n13a81b19d Add quotes to variable assignment (as requested by @TheBlueMatt) (practicalswift)\n683b9d280 Fix valid path output (practicalswift)\n193c2fb4c Use bash instead of POSIX sh. POSIX sh does not support arrays. (practicalswift)\n80f5f28d3 Fix incorrect quoting of quotes (the previous quotes had no effect beyond unquoting) (practicalswift)\n564a172df Add required space to [[ -n \"$1\" ]] (previously [[ -n\"$1\" ]]) (practicalswift)\n1e44ae0e1 Add error handling: exit if cd fails (practicalswift)\nb9e79ab41 Remove \"\\n\" from echo argument. echo does not support escape sequences. (practicalswift)\nf6b3382fa Remove unused variables (practicalswift)\n\nPull request description:\n\n  Shell script cleanups:\n  * Add required space to `[ -n ]`.\n  * Avoid quote within quote.\n  * Exit if `cd` fails.\n  * Remove `\\n` which is not handled by `echo`.\n  * ~~Remove redundant `$` in arithmetic variable expression.~~\n  * ~~Use `$(command)` instead of legacy form `` `command` ``.~~\n  * Arrays are not supported in POSIX `sh`. Use `bash` when arrays are used.\n  * ~~`[ foo -a bar ]` is not well defined, use `[ foo ] && [ bar ]` instead.~~\n  * ~~`[ foo -o bar ]` is not well defined, use `[ foo ] || [ bar ]` instead.~~\n\nTree-SHA512: 80f6ded58bce625b15b4da30d69d2714c633e184e62b21ed67d2c58e2ebaa08b4147593324012694d02bf4f1f252844cdff2fd1cf5e817ddb07e2777db7a6390",
      "tree": {
        "sha": "967f4d4605aae43594bf3e294058562d4f01a746",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/967f4d4605aae43594bf3e294058562d4f01a746"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaJd+sAAoJEKY26XYx92fgHFQQAJIJBS45metonv4f7vpg/gEg\ndiPQykBoPJ5GVp24/PF7gCIsrGvHYbRAGGAuRqahvlZB+JQ3YkaDlLdKS1Nvgc9R\n85tTadE7nHqyfa87KcvRU7v46hfm+tJ3Mz3IPd5p2L+JfUr7Jk5nsrCspffj/rdx\nAK2XE1rPfcSkgVg625sfLbLVIOnRPVdyqzii9BZ30mSsip7/kvbtlEPccOVrVbn4\nhpJimvly5ztCPLn7PivMRzwIrT80bMIvpu+NgVugc0F2oi5QO5AW08APDjRlyvsE\nkfQMer0EwynKQU1UsuNZGdVqYrnlDtX8P0mL76IsNMqTx5jQ4mmcNq+tYX+Ed4DR\nePs9Q6eHT+dSRIBIyHVIDmgkeOq/UyIOkIPwM2rCK9xGEgyJNo/r2QEr6L7yUyr8\nwONNyzQwX8y0y1Dfnzn4BH1rcpR6b8F1sxKxtyaadzxotWVoYvVZ2NEyzbvnJWp/\nBgyO1eXQFjf8+VnN5sDyXmZvZa9VySw3UEOMNh4hJN3hEpg8jBxwbVlgnWEADzKn\nMdJYxEiXUtuHRRngWKwnOVTTOa2O8vNJllTP8L8WyIFEt9LUmfSee2npeEt1PIY2\nnQYueYg3XDSmJjmI81oM2irrLGN6jKRwHcuatns/7vNLTCifsA0uXLHeGnTfG1YS\nbXtZ1BFtpAC7RdaDzXen\n=mmBN\n-----END PGP SIGNATURE-----",
        "payload": "tree 967f4d4605aae43594bf3e294058562d4f01a746\nparent 24df9af81625122c816a0ae6bb842ea47a4041ff\nparent 13a81b19df7acff51187655bb755f1371f9c83ca\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1512422325 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1512431531 -0800\n\nMerge #10773: Shell script cleanups\n\n13a81b19d Add quotes to variable assignment (as requested by @TheBlueMatt) (practicalswift)\n683b9d280 Fix valid path output (practicalswift)\n193c2fb4c Use bash instead of POSIX sh. POSIX sh does not support arrays. (practicalswift)\n80f5f28d3 Fix incorrect quoting of quotes (the previous quotes had no effect beyond unquoting) (practicalswift)\n564a172df Add required space to [[ -n \"$1\" ]] (previously [[ -n\"$1\" ]]) (practicalswift)\n1e44ae0e1 Add error handling: exit if cd fails (practicalswift)\nb9e79ab41 Remove \"\\n\" from echo argument. echo does not support escape sequences. (practicalswift)\nf6b3382fa Remove unused variables (practicalswift)\n\nPull request description:\n\n  Shell script cleanups:\n  * Add required space to `[ -n ]`.\n  * Avoid quote within quote.\n  * Exit if `cd` fails.\n  * Remove `\\n` which is not handled by `echo`.\n  * ~~Remove redundant `$` in arithmetic variable expression.~~\n  * ~~Use `$(command)` instead of legacy form `` `command` ``.~~\n  * Arrays are not supported in POSIX `sh`. Use `bash` when arrays are used.\n  * ~~`[ foo -a bar ]` is not well defined, use `[ foo ] && [ bar ]` instead.~~\n  * ~~`[ foo -o bar ]` is not well defined, use `[ foo ] || [ bar ]` instead.~~\n\nTree-SHA512: 80f6ded58bce625b15b4da30d69d2714c633e184e62b21ed67d2c58e2ebaa08b4147593324012694d02bf4f1f252844cdff2fd1cf5e817ddb07e2777db7a6390\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c17f11f7b43ad3bd9e242c67db1f3679558a0581",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24df9af81625122c816a0ae6bb842ea47a4041ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24df9af81625122c816a0ae6bb842ea47a4041ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24df9af81625122c816a0ae6bb842ea47a4041ff"
      },
      {
        "sha": "13a81b19df7acff51187655bb755f1371f9c83ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a81b19df7acff51187655bb755f1371f9c83ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13a81b19df7acff51187655bb755f1371f9c83ca"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "925d6a6252a5c06b59468233cd018ff3be204b2b",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -1,4 +1,4 @@\n-#!/bin/sh\n+#!/bin/bash\n \n TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}\n SRCDIR=${SRCDIR:-$TOPDIR/src}"
      },
      {
        "sha": "631fba9089cd9617c596965f9209195cf1a253c3",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -105,7 +105,7 @@ while :; do\n \t\tfi\n \t\tshift\n \t    else\n-\t\techo 'Error: \"--os\" requires an argument containing an l (for linux), w (for windows), or x (for Mac OSX)\\n'\n+\t\techo 'Error: \"--os\" requires an argument containing an l (for linux), w (for windows), or x (for Mac OSX)'\n \t\texit 1\n \t    fi\n \t    ;;\n@@ -188,7 +188,7 @@ then\n fi\n \n # Get signer\n-if [[ -n\"$1\" ]]\n+if [[ -n \"$1\" ]]\n then\n     SIGNER=$1\n     shift"
      },
      {
        "sha": "3379a4599c7036870e1de876d31e063a78aac0f7",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -40,7 +40,7 @@ grep CodeResources < \"${TEMPLIST}\" | while read i; do\n   RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n   DIRNAME=\"`dirname \"${RESOURCE}\"`\"\n   mkdir -p \"${DIRNAME}\"\n-  echo \"Adding resource for: \"${TARGETFILE}\"\"\n+  echo \"Adding resource for: \\\"${TARGETFILE}\\\"\"\n   cp \"${i}\" \"${RESOURCE}\"\n done\n "
      },
      {
        "sha": "b845b34e41044f19adc35b36ab8fec45d74dc5a3",
        "filename": "contrib/tidy_datadir.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/tidy_datadir.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/tidy_datadir.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tidy_datadir.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n if [ -d \"$1\" ]; then\n-  cd \"$1\"\n+  cd \"$1\" || exit 1\n else\n   echo \"Usage: $0 <datadir>\" >&2\n   echo \"Removes obsolete Bitcoin database files\" >&2"
      },
      {
        "sha": "532b97a438f6d39e857afe27ab034c8deaa9c826",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -33,10 +33,11 @@ fi\n \n NO_SHA1=1\n PREV_COMMIT=\"\"\n+INITIAL_COMMIT=\"${CURRENT_COMMIT}\"\n \n while true; do\n \tif [ \"$CURRENT_COMMIT\" = $VERIFIED_ROOT ]; then\n-\t\techo \"There is a valid path from \"$CURRENT_COMMIT\" to $VERIFIED_ROOT where all commits are signed!\"\n+\t\techo \"There is a valid path from \\\"$INITIAL_COMMIT\\\" to $VERIFIED_ROOT where all commits are signed!\"\n \t\texit 0\n \tfi\n "
      },
      {
        "sha": "e0266bf08afb64401212a8f553a386a456e81adb",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -33,7 +33,7 @@ if [ ! -d \"$WORKINGDIR\" ]; then\n    mkdir \"$WORKINGDIR\"\n fi\n \n-cd \"$WORKINGDIR\"\n+cd \"$WORKINGDIR\" || exit 1\n \n #test if a version number has been passed as an argument\n if [ -n \"$1\" ]; then\n@@ -87,7 +87,7 @@ WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n #and then see if wget completed successfully\n if [ $? -ne 0 ]; then\n    echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: \"$VERSIONPREFIX\"0.10.4-\"$RCVERSIONSTRING\"1)\"\n+   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: ${VERSIONPREFIX}0.10.4-${RCVERSIONSTRING}1)\"\n    echo \"wget output:\"\n    echo \"$WGETOUT\"|sed 's/^/\\t/g'\n    exit 2"
      },
      {
        "sha": "419e0da0fd7af9bb4ef18c4f1827bba2297bb804",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c17f11f7b43ad3bd9e242c67db1f3679558a0581/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c17f11f7b43ad3bd9e242c67db1f3679558a0581/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n if [ $# -gt 1 ]; then\n-    cd \"$2\"\n+    cd \"$2\" || exit 1\n fi\n if [ $# -gt 0 ]; then\n     FILE=\"$1\""
      }
    ]
  },
  {
    "sha": "b16795167704687d908f881dacf04d388db28cb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTY3OTUxNjc3MDQ2ODdkOTA4Zjg4MWRhY2YwNGQzODhkYjI4Y2Iz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-25T08:29:24Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-05T02:03:24Z"
      },
      "message": "[rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly.",
      "tree": {
        "sha": "bfb5add6adda1dae80bf8e077df55f752866b7ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfb5add6adda1dae80bf8e077df55f752866b7ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b16795167704687d908f881dacf04d388db28cb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlol/mwACgkQV692LbM1\nMyIKFQ/+N8G8wqkT0orEWUctd7DBdnewiYA/W4EZSypKiT40XehoCMrXHzkesxwp\nWQm/zYn2x1pVAtz273d9Hdo/CdeV/2AUmAzhdFdfo3Tuq86kGqMFNhL0dErhTe70\npS2QjnHCvsOCqCV+UxAAwfudlKVqT1YYoUdRSCbSpYTHnJId9clp3ndZtmnGNpNQ\n+kD6CWjQxXqcJQQwaidIbJ0q1ykc5aBSk3TYgQmJi2kfLSEFQINlPJXDardCaa+t\nwdDtiperQT1dv0OfWzeyOIQnglYtycmcVfbP0vCNcuACbcam6g4xma3rnAtKBeaI\nTEnDTF4OZ0tVJ3MCi/4az53KVTVsZIlPGAPThBUh/UH9UYar2GpAUiks72upP66p\neuynVSbinl3vfan4YkJJUcDbtjgWUX8lIoSk4KHiq2XhXlwZTBRMqJCKhjsOfA/o\nUQNIwIclh46eRpxsFwYXgiAmI1xtQAKuZijiWxo3Ym3A2TEn8TPQRhTqQuek25sl\nGzVjoKzKgP9aLmGxGvPgNyzTKrTfcv5eb+FtFPcNSwg7byuV0/sKwd+t0Ain3+H3\niJ/hMv73Ar060+ejRbWC4A+hMfx8M3Aomn0H6qVrz8o3AlvILpBqtAEpVASOSJAd\nnPxwrvq9x6JI1/zQdSjQeeMp4SWSw1swJNewUq82xmgFQa/hIzQ=\n=zS/R\n-----END PGP SIGNATURE-----",
        "payload": "tree bfb5add6adda1dae80bf8e077df55f752866b7ea\nparent a5f5a2ce53622b8d2e3fda659e497d47c5d164b0\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1493108964 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1512439404 +0900\n\n[rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b16795167704687d908f881dacf04d388db28cb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 83,
      "deletions": 46
    },
    "files": [
      {
        "sha": "b26f10e476fbb60511669ad7594deea67d1542ac",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 12,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16795167704687d908f881dacf04d388db28cb3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16795167704687d908f881dacf04d388db28cb3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b16795167704687d908f881dacf04d388db28cb3",
        "patch": "@@ -64,12 +64,15 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n \n UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"getrawtransaction \\\"txid\\\" ( verbose \\\"blockhash\\\" )\\n\"\n \n             \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n-            \"enabled, it also works for blockchain transactions.\\n\"\n+            \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n+            \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n+            \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n+            \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n             \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n@@ -78,13 +81,15 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n-            \"2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n+            \"2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n+            \"3. \\\"blockhash\\\" (string, optional) The block in which to look for the transaction\\n\"\n \n             \"\\nResult (if verbose is not set or set to false):\\n\"\n             \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n \n             \"\\nResult (if verbose is set to true):\\n\"\n             \"{\\n\"\n+            \"  \\\"in_active_chain\\\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n@@ -132,30 +137,58 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n         );\n \n     LOCK(cs_main);\n \n+    bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    CBlockIndex* blockindex = nullptr;\n \n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n     if (!request.params[1].isNull()) {\n         fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n     }\n \n+    if (!request.params[2].isNull()) {\n+        uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n+        if (!blockhash.IsNull()) {\n+            BlockMap::iterator it = mapBlockIndex.find(blockhash);\n+            if (it == mapBlockIndex.end()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n+            }\n+            blockindex = it->second;\n+            in_active_chain = chainActive.Contains(blockindex);\n+        }\n+    }\n+\n     CTransactionRef tx;\n-    uint256 hashBlock;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n-            : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\") +\n-            \". Use gettransaction for wallet transactions.\");\n+    uint256 hash_block;\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+        std::string errmsg;\n+        if (blockindex) {\n+            if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n+            }\n+            errmsg = \"No such transaction found in the provided block\";\n+        } else {\n+            errmsg = fTxIndex\n+              ? \"No such mempool or blockchain transaction\"\n+              : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        }\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n+    }\n \n-    if (!fVerbose)\n+    if (!fVerbose) {\n         return EncodeHexTx(*tx, RPCSerializationFlags());\n+    }\n \n     UniValue result(UniValue::VOBJ);\n-    TxToJSON(*tx, hashBlock, result);\n+    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    TxToJSON(*tx, hash_block, result);\n     return result;\n }\n \n@@ -983,7 +1016,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\"} },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },"
      },
      {
        "sha": "16d2ff2a50d9db8e81b62866d76e85e61f7c7d0e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 33,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16795167704687d908f881dacf04d388db28cb3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16795167704687d908f881dacf04d388db28cb3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b16795167704687d908f881dacf04d388db28cb3",
        "patch": "@@ -926,47 +926,51 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n }\n \n-/** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n+/**\n+ * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n+ * If blockIndex is provided, the transaction is fetched from the corresponding block.\n+ */\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n {\n-    CBlockIndex *pindexSlow = nullptr;\n+    CBlockIndex* pindexSlow = blockIndex;\n \n     LOCK(cs_main);\n \n-    CTransactionRef ptx = mempool.get(hash);\n-    if (ptx)\n-    {\n-        txOut = ptx;\n-        return true;\n-    }\n-\n-    if (fTxIndex) {\n-        CDiskTxPos postx;\n-        if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-            if (file.IsNull())\n-                return error(\"%s: OpenBlockFile failed\", __func__);\n-            CBlockHeader header;\n-            try {\n-                file >> header;\n-                fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n-                file >> txOut;\n-            } catch (const std::exception& e) {\n-                return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-            }\n-            hashBlock = header.GetHash();\n-            if (txOut->GetHash() != hash)\n-                return error(\"%s: txid mismatch\", __func__);\n+    if (!blockIndex) {\n+        CTransactionRef ptx = mempool.get(hash);\n+        if (ptx) {\n+            txOut = ptx;\n             return true;\n         }\n \n-        // transaction not found in index, nothing more can be done\n-        return false;\n-    }\n+        if (fTxIndex) {\n+            CDiskTxPos postx;\n+            if (pblocktree->ReadTxIndex(hash, postx)) {\n+                CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+                if (file.IsNull())\n+                    return error(\"%s: OpenBlockFile failed\", __func__);\n+                CBlockHeader header;\n+                try {\n+                    file >> header;\n+                    fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+                    file >> txOut;\n+                } catch (const std::exception& e) {\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                }\n+                hashBlock = header.GetHash();\n+                if (txOut->GetHash() != hash)\n+                    return error(\"%s: txid mismatch\", __func__);\n+                return true;\n+            }\n \n-    if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-        const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-        if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+            // transaction not found in index, nothing more can be done\n+            return false;\n+        }\n+\n+        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n+            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n+            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+        }\n     }\n \n     if (pindexSlow) {"
      },
      {
        "sha": "ec17d0d92d6dd24581fa0a4af0e6b38e32840914",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16795167704687d908f881dacf04d388db28cb3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16795167704687d908f881dacf04d388db28cb3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b16795167704687d908f881dacf04d388db28cb3",
        "patch": "@@ -273,7 +273,7 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "434526aba680cb73208e018a02827d51a71cfff6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzQ1MjZhYmE2ODBjYjczMjA4ZTAxOGEwMjgyN2Q1MWE3MWNmZmY2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-05-08T04:24:32Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-05T03:28:06Z"
      },
      "message": "[test] Add tests for getrawtransaction with block hash.",
      "tree": {
        "sha": "bce9528d2ccc9b00087d85edb9dad6cb038e2a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bce9528d2ccc9b00087d85edb9dad6cb038e2a11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/434526aba680cb73208e018a02827d51a71cfff6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlomEkYACgkQV692LbM1\nMyJL4g/6Aq99veUC1ND66szbpqT7x554rP56KSz3zK8nQ/Y2I9skl5Z+FN5ddZJU\nsaqZEo1GOO16tksYSvIPA2swwQqIdqBt+rbIh52AnxeMHM1kOC6nCVpaAHR3yOjQ\n6PJf+oyP6gYOLfCqqq5BZ4Uiq5VkWCTI7a18kJMzXyPbNmzS+pAs0fhLz2Risls1\nPdh/8kql+ADYp5S1ZoPTwcIxvnERX16Jud8hpNKZMBd6sk+jqXkvu1OTQMnHPjVj\nuyoQIwqNBqAi0W4L6ae9cb2Kei2dSoEXJxm1ZdCrshuFXyFKtfPA5bkWzGfieolc\nhAkuVeAssOgjOlfBc5+rsXEZVSjyWzC67gXRwrBD6zAl2BBO4f5PpaZHhs2470lk\njjpKWTIEsZtR82DD/ksCTLV+BPkXB3KLrgo2irwZQKFmOZLNM+vBghXicueCi6oa\ny1pDIiuFDJBlATF7kzi8usgLuWX8X/MVhX0+aqs29I8ebfA1qPFznQde7Vqrd19q\ncTwzH4CkYZf4wrS1WR63eLVraa+QyGAMLpdFgWU+RWzD5VY7OyEwNwQ9O4WzEoxa\nvPbmVdePiTbW5u8cbTpKky9j9FGif1br49tqPeMXHLMhQ6KS9MAHVwnEs4HRqioV\np6YuVvP+gXqgaipdjsr1Q883IY61RrRykluqJYRKuw9qb499rgg=\n=ezNd\n-----END PGP SIGNATURE-----",
        "payload": "tree bce9528d2ccc9b00087d85edb9dad6cb038e2a11\nparent b16795167704687d908f881dacf04d388db28cb3\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1494217472 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1512444486 +0900\n\n[test] Add tests for getrawtransaction with block hash.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434526aba680cb73208e018a02827d51a71cfff6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/434526aba680cb73208e018a02827d51a71cfff6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434526aba680cb73208e018a02827d51a71cfff6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b16795167704687d908f881dacf04d388db28cb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b16795167704687d908f881dacf04d388db28cb3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45d2410f8ba49cf2a9fe9b655eddfeaf28e1501f",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434526aba680cb73208e018a02827d51a71cfff6/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434526aba680cb73208e018a02827d51a71cfff6/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=434526aba680cb73208e018a02827d51a71cfff6",
        "patch": "@@ -50,6 +50,30 @@ def run_test(self):\n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n+        #####################################\n+        # getrawtransaction with block hash #\n+        #####################################\n+\n+        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_all()\n+        # We should be able to get the raw transaction by providing the correct block\n+        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n+        assert_equal(gottx['txid'], tx)\n+        assert_equal(gottx['in_active_chain'], True)\n+        # We should not have the 'in_active_chain' flag when we don't provide a block\n+        gottx = self.nodes[0].getrawtransaction(tx, True)\n+        assert_equal(gottx['txid'], tx)\n+        assert 'in_active_chain' not in gottx\n+        # We should not get the tx if we provide an unrelated block\n+        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n+        # An invalid block hash should raise the correct errors\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n+        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n+        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n+\n         #########################\n         # RAW TX MULTISIG TESTS #\n         #########################"
      }
    ]
  },
  {
    "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWVlYWEwMzM1NGJiYjRlZTc5ZDZkZWZhZmZhZWYyYjMyZWNiZTI5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-05T07:30:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-05T07:30:25Z"
      },
      "message": "Merge #11556: [Qt] Improved copy for RBF checkbox and tooltip\n\ndb0b7373f [Qt] Improved copy: RBF checkbox, tooltip and confirmation screen (Sjors Provoost)\n\nPull request description:\n\n  Fixes #11344 and replaces #11428.\n\n  **Before**:\n  <img width=\"588\" alt=\"before\" src=\"https://user-images.githubusercontent.com/10217/31984211-3299e81a-b993-11e7-94e9-bf63d2fed4bd.png\">\n\n  **After**:\n  <img width=\"578\" alt=\"after\" src=\"https://user-images.githubusercontent.com/10217/31984404-11f839da-b994-11e7-86ad-4c17a7d44b86.png\">\n\nTree-SHA512: 04876b2f2eab53c8d4fd4279e8384fd4869af7e15de7648b2689092f800b6ae9c890c01c26c2f7deffe79a1d70c6440d702cbe420e44fe3ded25c5b83d44ecfa",
      "tree": {
        "sha": "eb8754d24012e7ec8df050e0280fb5f29f0e76dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb8754d24012e7ec8df050e0280fb5f29f0e76dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlomSxEACgkQHrd2uwPH\nki3DIBAAuwPEThNtSwU4pfYjHNztklnL437u3vDjQmh/u15Bc5FBlMda895anIUu\nv6Tn93qIqSYrUw47Z0Z5iVokNZ3dU4dNE0X0BxJEgUTMOtvPcNXa/7Gz77BY7Hbo\nNOqZRyYvW6r30q8CtROBUGlXNS07XnLUCTFLA8kmj/QnGPkUyoB0A6JzZlPhV30E\n18P8BsD17Y3612m8ldUknru9QZw8JyR0mcStLZQytFPMWOcxacoWoeB7SDtWRk1O\n8XRqEHMxJq9/Nga/sE3UUbsBfRp0TfnSn0cRywmjNsxSzp1QBzaDuaXRngLkbvfj\ndIGM3Q/I8r+2ZUCO6NaelKxytB0CN05FGEJ35fyyuESdYrwP/SP89pfdPQeKTzvV\nTmv1xJqDE2Y2TrHEMnZr+g51raYhMxaFlcixq+NSOZb9MGpLRZ0+z2WpzrNbHQAU\nbJxVe1SpqAJW9b4jGoSm6FZ7QcTPpkOJulRpV3GN+4qQPNdLsqwPSQpjTeXxAy9a\nYKbdLhSl2+Fu7mQ3kTGZqPMilyf3+Duuo3L5OReqwKoqRlCeN+iQk5KipEsL08sB\nF71dPTByUrDFe95YCq355P8l4Ncq2eIqo7qaQ97wiJY6jeUwiMN5J1Nx3n74/QBL\nWhVCe637tfSB3so5Zigk8uHnXTZ5R9SP1F2Pm4SzuvQ1a9mYWzs=\n=sbEs\n-----END PGP SIGNATURE-----",
        "payload": "tree eb8754d24012e7ec8df050e0280fb5f29f0e76dc\nparent c17f11f7b43ad3bd9e242c67db1f3679558a0581\nparent db0b7373fc990806a06b6ba8a27ba2d710ce23c8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1512459016 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512459025 -1000\n\nMerge #11556: [Qt] Improved copy for RBF checkbox and tooltip\n\ndb0b7373f [Qt] Improved copy: RBF checkbox, tooltip and confirmation screen (Sjors Provoost)\n\nPull request description:\n\n  Fixes #11344 and replaces #11428.\n\n  **Before**:\n  <img width=\"588\" alt=\"before\" src=\"https://user-images.githubusercontent.com/10217/31984211-3299e81a-b993-11e7-94e9-bf63d2fed4bd.png\">\n\n  **After**:\n  <img width=\"578\" alt=\"after\" src=\"https://user-images.githubusercontent.com/10217/31984404-11f839da-b994-11e7-86ad-4c17a7d44b86.png\">\n\nTree-SHA512: 04876b2f2eab53c8d4fd4279e8384fd4869af7e15de7648b2689092f800b6ae9c890c01c26c2f7deffe79a1d70c6440d702cbe420e44fe3ded25c5b83d44ecfa\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c17f11f7b43ad3bd9e242c67db1f3679558a0581"
      },
      {
        "sha": "db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0b7373fc990806a06b6ba8a27ba2d710ce23c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db0b7373fc990806a06b6ba8a27ba2d710ce23c8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c6fd708cdf2e82201cc6ff03d315c8b0733a820b",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "patch": "@@ -1108,10 +1108,10 @@\n            <item>\n             <widget class=\"QCheckBox\" name=\"optInRBF\">\n              <property name=\"text\">\n-              <string>Request Replace-By-Fee</string>\n+              <string>Allow increasing fee</string>\n              </property>\n              <property name=\"toolTip\">\n-              <string>Indicates that the sender may wish to replace this transaction with a new one paying higher fees (prior to being confirmed).</string>\n+              <string>This allows you to increase the fee later if the transaction takes a long time to confirm. This will also cause the recommended fee to be lower. (\"Replace-By-Fee\", BIP 125)</string>\n              </property>\n             </widget>\n            </item>"
      },
      {
        "sha": "e2b91778859b6e577e86dae01adcb168fd9bf627",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "patch": "@@ -345,7 +345,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     if (ui->optInRBF->isChecked())\n     {\n         questionString.append(\"<hr /><span>\");\n-        questionString.append(tr(\"This transaction signals replaceability (optin-RBF).\"));\n+        questionString.append(tr(\"You can increase the fee later (signals Replace-By-Fee).\"));\n         questionString.append(\"</span>\");\n     }\n "
      }
    ]
  },
  {
    "sha": "529b8667599ad74f6dae639b889d22e907353070",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjliODY2NzU5OWFkNzRmNmRhZTYzOWI4ODlkMjJlOTA3MzUzMDcw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-05T11:24:06Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-05T11:24:06Z"
      },
      "message": "Test datadir in conf file exists",
      "tree": {
        "sha": "f7817d8773754e12385a979bff752cfe6ee66598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7817d8773754e12385a979bff752cfe6ee66598"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/529b8667599ad74f6dae639b889d22e907353070",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529b8667599ad74f6dae639b889d22e907353070",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/529b8667599ad74f6dae639b889d22e907353070",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529b8667599ad74f6dae639b889d22e907353070/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1aa18c73b3bd8f263931720feff3373d4e7940d5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/529b8667599ad74f6dae639b889d22e907353070/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/529b8667599ad74f6dae639b889d22e907353070/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=529b8667599ad74f6dae639b889d22e907353070",
        "patch": "@@ -639,6 +639,9 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n+    if (!fs::is_directory(GetDataDir(false))) {\n+        throw std::runtime_error(strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str()));\n+    }\n }\n \n #ifndef WIN32"
      }
    ]
  },
  {
    "sha": "6d2f277b1905de93bade8e589895403b13b30c5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDJmMjc3YjE5MDVkZTkzYmFkZThlNTg5ODk1NDAzYjEzYjMwYzVj",
    "commit": {
      "author": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2017-12-05T14:47:54Z"
      },
      "committer": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2017-12-05T14:47:56Z"
      },
      "message": "rpcuser.py: Use 'python' not 'python2'",
      "tree": {
        "sha": "7cba77c7d5f4b59f8af66eb74f418fd7952dfe31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cba77c7d5f4b59f8af66eb74f418fd7952dfe31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d2f277b1905de93bade8e589895403b13b30c5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2f277b1905de93bade8e589895403b13b30c5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2f277b1905de93bade8e589895403b13b30c5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2f277b1905de93bade8e589895403b13b30c5c/comments",
    "author": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6d9b44f69972a5959250c5fb45d06d4446fac0ce",
        "filename": "share/rpcuser/rpcuser.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2f277b1905de93bade8e589895403b13b30c5c/share/rpcuser/rpcuser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2f277b1905de93bade8e589895403b13b30c5c/share/rpcuser/rpcuser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/rpcuser.py?ref=6d2f277b1905de93bade8e589895403b13b30c5c",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2 \n+#!/usr/bin/env python\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying \n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      }
    ]
  },
  {
    "sha": "07c483895d219d4c44bd8fec5167a53f4701c364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2M0ODM4OTVkMjE5ZDRjNDRiZDhmZWM1MTY3YTUzZjQ3MDFjMzY0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-05T15:39:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-05T15:39:44Z"
      },
      "message": "Always return true if AppInitMain got to the end\n\nThis should fix a very rare travis failure in zapwallettxes, but\nis also more correct, as you can currently race\nReacceptWalletTransactions with stop RPC calls to get bitcoind to\n(IMO) eroneously return a non-0 exit code.",
      "tree": {
        "sha": "caff3d8e538aa88bf7419e704c9af6235c33a1b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caff3d8e538aa88bf7419e704c9af6235c33a1b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07c483895d219d4c44bd8fec5167a53f4701c364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c483895d219d4c44bd8fec5167a53f4701c364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07c483895d219d4c44bd8fec5167a53f4701c364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c483895d219d4c44bd8fec5167a53f4701c364/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ae6099903414c8c03a7208fc893e2cb3e61ae9d3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07c483895d219d4c44bd8fec5167a53f4701c364/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07c483895d219d4c44bd8fec5167a53f4701c364/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=07c483895d219d4c44bd8fec5167a53f4701c364",
        "patch": "@@ -1726,5 +1726,5 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     StartWallets(scheduler);\n #endif\n \n-    return !fRequestShutdown;\n+    return true;\n }"
      }
    ]
  },
  {
    "sha": "a38686cea035e0d480e4ee953b8e40c7f0fa2118",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzg2ODZjZWEwMzVlMGQ0ODBlNGVlOTUzYjhlNDBjN2YwZmEyMTE4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-05T20:21:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-05T20:21:23Z"
      },
      "message": "[verify-commits] Fix gpg.sh's echoing for commits with '\\n'",
      "tree": {
        "sha": "ecacfbc7f9c2f96618908a80ae8654b884b705eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecacfbc7f9c2f96618908a80ae8654b884b705eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a38686cea035e0d480e4ee953b8e40c7f0fa2118",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38686cea035e0d480e4ee953b8e40c7f0fa2118",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a38686cea035e0d480e4ee953b8e40c7f0fa2118",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38686cea035e0d480e4ee953b8e40c7f0fa2118/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8f3e4b8063288e451c97ac166dd1cb2853d2463b",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a38686cea035e0d480e4ee953b8e40c7f0fa2118/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a38686cea035e0d480e4ee953b8e40c7f0fa2118/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=a38686cea035e0d480e4ee953b8e40c7f0fa2118",
        "patch": "@@ -9,7 +9,7 @@ REVSIG=false\n IFS='\n '\n if [ \"$BITCOIN_VERIFY_COMMITS_ALLOW_SHA1\" = 1 ]; then\n-\tGPG_RES=\"$(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n+\tGPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n else\n \t# Note how we've disabled SHA1 with the --weak-digest option, disabling\n \t# signatures - including selfsigs - that use SHA1. While you might think that\n@@ -24,15 +24,15 @@ else\n \t\tcase \"$LINE\" in\n \t\t\t\"gpg (GnuPG) 1.4.1\"*|\"gpg (GnuPG) 2.0.\"*)\n \t\t\t\techo \"Please upgrade to at least gpg 2.1.10 to check for weak signatures\" > /dev/stderr\n-\t\t\t\tGPG_RES=\"$(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n+\t\t\t\tGPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n \t\t\t\t;;\n \t\t\t# We assume if you're running 2.1+, you're probably running 2.1.10+\n \t\t\t# gpg will fail otherwise\n \t\t\t# We assume if you're running 1.X, it is either 1.4.1X or 1.4.20+\n \t\t\t# gpg will fail otherwise\n \t\tesac\n \tdone\n-\t[ \"$GPG_RES\" = \"\" ] && GPG_RES=\"$(echo \"$INPUT\" | gpg --trust-model always --weak-digest sha1 \"$@\" 2>/dev/null)\"\n+\t[ \"$GPG_RES\" = \"\" ] && GPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always --weak-digest sha1 \"$@\" 2>/dev/null)\"\n fi\n for LINE in $(echo \"$GPG_RES\"); do\n \tcase \"$LINE\" in\n@@ -57,8 +57,8 @@ if ! $VALID; then\n \texit 1\n fi\n if $VALID && $REVSIG; then\n-\techo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null | grep \"\\[GNUPG:\\] \\(NEWSIG\\|SIG_ID\\|VALIDSIG\\)\"\n+\tprintf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null | grep \"\\[GNUPG:\\] \\(NEWSIG\\|SIG_ID\\|VALIDSIG\\)\"\n \techo \"$GOODREVSIG\"\n else\n-\techo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n+\tprintf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n fi"
      }
    ]
  },
  {
    "sha": "7caba38568bf13ff898d58662fe7ed72d91ecce3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2FiYTM4NTY4YmYxM2ZmODk4ZDU4NjYyZmU3ZWQ3MmQ5MWVjY2Uz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-10T07:35:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-05T21:03:59Z"
      },
      "message": "Add NODE_NETWORK_LIMITED flags and min block amount constants",
      "tree": {
        "sha": "d26feb58a560258f54796b4fa5a36ddb451f56bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d26feb58a560258f54796b4fa5a36ddb451f56bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7caba38568bf13ff898d58662fe7ed72d91ecce3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlonCb8ACgkQHrd2uwPH\nki0MKxAAqgEHxZXSWsW9DL7r2qOg5gkAtPB1KkcbCGpgRemeyktr9wgN/HdUAeU0\nmM3E5xoMQadJPQL01J0NpCmuMGdxrkkJTBpIoVQjmyo6opz2mmJ99jvpjIZgEIPe\ny7iM1eQxZt4hH9f3Tyzc63dnzi6Rmhzzi8zrDFWF0ZruXc1TI4iyJYOGxoYzqzkx\n8jn2hp2/pOiwrl4AGgvyOEOK0hwegELqp/Lrxnzk3uI7rd5efEjpGCn+mcIolNUY\nl+sgEnnhg235W34Q6foXsm3jNuyU+xNXH7oKuTCGyYmkuffWwzm5PtaOKwgVHej+\n1Hd5ebFoe6y7zCmHMXrpjRce8pE286/pqDcHkMv88bKa84aN7lnxU4gzZmNrbokm\n4raLCyQPRQG2cIpBuB1vEV9/a7YNxLtuIVcRBpXxOE+W5doOwzDJ9hMVl5sYRDxw\niTlPN/zB6benGoKs+l2ALYgzMQy7Q4YrUF2v1m1cGcwBBFi7qTWcrT+qLgTc7SOr\nYpBm6iB6mTXGkPIaP1A23nVLta3+WBygEXSAtamesgNIRs58SIPE9o4L6tj7Qi7M\n22cLmgFjPlgcR6O6TY8uyUEtXnCB7vzPmiA9nmTnZei9WvaDbdE60HwNyAtSUwYP\nZjW/ll3bltPZd+R4viDf7lk+hz5IRHnTBK7nOA73HOy9emfFAMo=\n=N/01\n-----END PGP SIGNATURE-----",
        "payload": "tree d26feb58a560258f54796b4fa5a36ddb451f56bd\nparent 91eeaa03354bbb4ee79d6defaffaef2b32ecbe29\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1494401736 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512507839 -1000\n\nAdd NODE_NETWORK_LIMITED flags and min block amount constants\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7caba38568bf13ff898d58662fe7ed72d91ecce3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7caba38568bf13ff898d58662fe7ed72d91ecce3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7caba38568bf13ff898d58662fe7ed72d91ecce3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cf1d40db7765aeab7d92e8f2da0ddd72b60ed206",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7caba38568bf13ff898d58662fe7ed72d91ecce3/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7caba38568bf13ff898d58662fe7ed72d91ecce3/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=7caba38568bf13ff898d58662fe7ed72d91ecce3",
        "patch": "@@ -246,9 +246,8 @@ const std::vector<std::string> &getAllNetMessageTypes();\n enum ServiceFlags : uint64_t {\n     // Nothing\n     NODE_NONE = 0,\n-    // NODE_NETWORK means that the node is capable of serving the block chain. It is currently\n-    // set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want\n-    // network services but don't provide them.\n+    // NODE_NETWORK means that the node is capable of serving the complete block chain. It is currently\n+    // set by all Bitcoin Core non pruned nodes, and is unset by SPV clients or other light clients.\n     NODE_NETWORK = (1 << 0),\n     // NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.\n     // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n@@ -264,6 +263,10 @@ enum ServiceFlags : uint64_t {\n     // NODE_XTHIN means the node supports Xtreme Thinblocks\n     // If this is turned off then the node will not service nor make xthin requests\n     NODE_XTHIN = (1 << 4),\n+    // NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only\n+    // serving the last 288 (2 day) blocks\n+    // See BIP159 for details on how this is implemented.\n+    NODE_NETWORK_LIMITED = (1 << 10),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "0d22a82ffc1ebfb495ce8df47e3c2f79fdb2742c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7caba38568bf13ff898d58662fe7ed72d91ecce3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7caba38568bf13ff898d58662fe7ed72d91ecce3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7caba38568bf13ff898d58662fe7ed72d91ecce3",
        "patch": "@@ -203,6 +203,8 @@ extern bool fPruneMode;\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n+static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n \n static const signed int DEFAULT_CHECKBLOCKS = 6;\n static const unsigned int DEFAULT_CHECKLEVEL = 3;"
      }
    ]
  },
  {
    "sha": "27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2RmMTkzZWZkYWM4YTdjNGQzZDRiYmU4YTI5YzhkNzljNmNlNjIz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-01T03:33:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-05T21:03:59Z"
      },
      "message": "Always set NODE_NETWORK_LIMITED bit\n\nThe current pruning implementation does ensure to always conform to BIP159",
      "tree": {
        "sha": "926c0369475967045b58605317bc35977a7ce704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/926c0369475967045b58605317bc35977a7ce704"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlonCb8ACgkQHrd2uwPH\nki1Lvw//XmrIgJa7D6RRXGQQmw2/o2rNUHmLQ1wco4heTu3MaBAmUN1Ybvgktnjl\nVtgzWWeCj8tzaQKiAP3l7hu6uug2bhzCAIav5XFwvQfR828S9tTWN60gHxDZ8EiR\n7H3sqBXZxX5jAISWraoqqrB5jJp70OaIgQWZ6R2lNMOVEPTAGkeeasNQs4mUkzq7\nasahtH8aF2B8ZVx4AJGDAxLjDp0npExJ9ij9p+5cI+Hmr4Zx7Z9t4YxX7L5GKS1/\n5h+veKaQMVPhlbpqd70snyPD1zemCYzQzLe4VRtHFLlscGXRgvknYNvS1XzPDhYd\nk8DXaJBrL0oX2Fvn3BvjsTP9HtQHDec9QRm1Vd9/X6dUYRP+bknAXO47dlEot3RW\n1yZnpRVZ3CBhGXvGD+rFnk/McjOCBxa9iIn0pF8jrcOrxpRVL8MnntbHDNfcpFuq\nMwe2U6egvbpl5U36FW7lHZRCk9n6AFWIhBwrqH5mSH9wTwLegGrxa4HFj2bSKiSC\n0hdI7VHY0R/IArgIjt7hiWxbMC6VAUzUnnzuDrGkWH6hxIEBRE3mUuuoC3ni8R4I\nEBkGaR1V9+cJ7vnDTNjHwv6VJACurDXruuY81OxrZ5+dof9sWdwP2+TCk7uZuyHu\nFLrM0Kd9T1tNH9K1aeEJAzr6WHvY8DiMLACC8RKiFqdXiII+LIs=\n=ecft\n-----END PGP SIGNATURE-----",
        "payload": "tree 926c0369475967045b58605317bc35977a7ce704\nparent 7caba38568bf13ff898d58662fe7ed72d91ecce3\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1506828838 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512507839 -1000\n\nAlways set NODE_NETWORK_LIMITED bit\n\nThe current pruning implementation does ensure to always conform to BIP159\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7caba38568bf13ff898d58662fe7ed72d91ecce3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7caba38568bf13ff898d58662fe7ed72d91ecce3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7caba38568bf13ff898d58662fe7ed72d91ecce3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "67e01c9ba9ec55fdec41bd32b5b5276c22164a3a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
        "patch": "@@ -816,7 +816,7 @@ namespace { // Variables internal to initialization process only\n int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n-ServiceFlags nLocalServices = NODE_NETWORK;\n+ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n \n } // namespace\n "
      }
    ]
  },
  {
    "sha": "bd0941652444df09c32eb552952fd3705d03fd6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDA5NDE2NTI0NDRkZjA5YzMyZWI1NTI5NTJmZDM3MDVkMDNmZDZh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-08-11T18:59:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-05T21:08:34Z"
      },
      "message": "Avoid leaking the prune height through getdata (fingerprinting countermeasure)",
      "tree": {
        "sha": "aebbfcee2e17a0deffbde9d66697268d2a8c7e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aebbfcee2e17a0deffbde9d66697268d2a8c7e37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd0941652444df09c32eb552952fd3705d03fd6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlonCtgACgkQHrd2uwPH\nki1XAhAAuMn1vyDiZgBInWnUkNovN7nIfzn4k0fCARBoVDxmuTaGwk6qsZLrHADq\n2xiKTcyuqTW5mwyulpIode7uMb7WKeSDA4K0z0rzBp01m+BlXoqHt+2RZ0FgPKxr\npL3GXZF2E2IPxxt58Vl5MXYqxaXFlOzU1C4fFz+q+G9ZlwoM4Pftb00soAIi3+QI\nO7zo3Ts0nzQvfGEo9jnsGT3bLQAspbsduZ+FasJNultAHEFsvZpqOqS/9D7iH21J\nzZwZ62BNmFT+72XXizh1YUasBAMcwmnwzrw3BYZfdUbmTgkObu0ZesqyJfsAZ+Df\nzOfGjSL4CGpSZSMgnst/heMe0nBtMxNPcgCfqr05d2limbMr2qedrSey1MtXpspO\n/UlGsJ10FVdrDBA4xlaTbuZ05Mb28zTUK03F9wNVJpw6jf//twtjFopkYYcoT7S7\nyBhCq9V1ZAYfbJ68uXduOlx/+ednB5zsxapaBuV0dgZQ3jLTQ+DW3KoC6J576VwN\nFbHoQCmBKh3QFM0RN3eiMuKntdst00LGhfRdqAdnChNRM+7FBIkkQonjQuQ2VoFR\n7vEkCrguyMctGAHdtySkd0ub2x5LcCSwEEzUkjFTHlEKZV2GZYSyCwDABS/BjcYq\nultyHKaE7lb1GQtBJYy6c1VAVM3A9dWFfBK9eJaCOdKiqa59RxY=\n=Z2yV\n-----END PGP SIGNATURE-----",
        "payload": "tree aebbfcee2e17a0deffbde9d66697268d2a8c7e37\nparent 27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1502477964 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512508114 -1000\n\nAvoid leaking the prune height through getdata (fingerprinting countermeasure)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0941652444df09c32eb552952fd3705d03fd6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0941652444df09c32eb552952fd3705d03fd6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0941652444df09c32eb552952fd3705d03fd6a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85e6d9c73dae6cf4bbfdd8153797b6207d79f263",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0941652444df09c32eb552952fd3705d03fd6a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0941652444df09c32eb552952fd3705d03fd6a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bd0941652444df09c32eb552952fd3705d03fd6a",
        "patch": "@@ -1091,6 +1091,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     pfrom->fDisconnect = true;\n                     send = false;\n                 }\n+                // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n+                if (send && !pfrom->fWhitelisted && (\n+                        (((pfrom->GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom->GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (chainActive.Tip()->nHeight - mi->second->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n+                   )) {\n+                    LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom->GetId());\n+\n+                    //disconnect node and prevent it from stalling (would otherwise wait for the missing block)\n+                    pfrom->fDisconnect = true;\n+                    send = false;\n+                }\n                 // Pruned nodes may have deleted the block, so check whether\n                 // it's available before trying to send.\n                 if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))"
      }
    ]
  },
  {
    "sha": "5bea05bc1d17aa43cbdf3a3413241f8132790d93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmVhMDViYzFkMTdhYTQzY2JkZjNhMzQxMzI0MWY4MTMyNzkwZDkz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-05T21:26:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-05T21:32:44Z"
      },
      "message": "Merge #11834: [verify-commits] Fix gpg.sh's echoing for commits with '\\n'\n\na38686cea [verify-commits] Fix gpg.sh's echoing for commits with '\\n' (Matt Corallo)\n\nPull request description:\n\n  Should fix master travis failures\n\nTree-SHA512: 1e96476e4db0474f1dc2c6973cdb1154316b7cec13d3fe46f3383cfe4f1ed30c2eee08a0d047931f20b2fa83baaacb4687f39e1cab6f264009cd0292134facdd",
      "tree": {
        "sha": "ecacfbc7f9c2f96618908a80ae8654b884b705eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecacfbc7f9c2f96618908a80ae8654b884b705eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bea05bc1d17aa43cbdf3a3413241f8132790d93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaJxB8AAoJEKY26XYx92fgcSoQAI5MHZqkFMp96DBJcOH1neqZ\n3TSz8njOYmF3BoKP13ZqYd+4RujcHrRzY2fQmPhEGl1d1j+H521dALBgDlEm6WYP\ngpMfrnQ4ZD0M66U8u7viQJ4L/cci4pDWKKt0uVK8w7iWJC8QoFQNfFjG4MzOMKkF\nb/8/U6UqI/ezWEm1CpT38+A6ko+cmZ9VUEVWBg99ty8g+oLePMtIJEMcNHKdtTvk\nSIwWKvTT4n5XdbQMgpxUYMgcdspucBK50pDs+8307BBg5gE/l3MpJJNAgF99BMy4\n/ulkToa1ozwUoNVfs6OrYvtQjXBQk5hZUq3ayqNO6dXGdEOVnDEdducUt2aG527d\nFUH7ldSonhVy8h4ILlE2jX5t70jJ/hVlse0ivq/o2ZFKpKgBPuawMrWJLPjXxMau\nmzC9vfVrtWFeBJcWubkGljjozpR8NqEwWX5SwZJ8w6j0ktAYwgwPnhaR9kgtW2t2\nl1ZBh4Zd3aQViRiVGR8kxj7ymRL/VlhxYDF7UYvIjD61klez5mHeGJMrEsmC862V\nY4fD/1ueumK425Y9PjlADeLrofExxQ/VBan06dN9srIZX1mN8MXb9YJaEZp+K1mj\nCbI/BrO4ShOseD124Peuu23bNjlFA99M61c/9bgPa2uBJr9H+FrB4UpPiVqT0HVb\nP2nS+AosPAVYMNPqZRP3\n=Bopy\n-----END PGP SIGNATURE-----",
        "payload": "tree ecacfbc7f9c2f96618908a80ae8654b884b705eb\nparent 91eeaa03354bbb4ee79d6defaffaef2b32ecbe29\nparent a38686cea035e0d480e4ee953b8e40c7f0fa2118\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1512509174 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1512509564 -0800\n\nMerge #11834: [verify-commits] Fix gpg.sh's echoing for commits with '\\n'\n\na38686cea [verify-commits] Fix gpg.sh's echoing for commits with '\\n' (Matt Corallo)\n\nPull request description:\n\n  Should fix master travis failures\n\nTree-SHA512: 1e96476e4db0474f1dc2c6973cdb1154316b7cec13d3fe46f3383cfe4f1ed30c2eee08a0d047931f20b2fa83baaacb4687f39e1cab6f264009cd0292134facdd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bea05bc1d17aa43cbdf3a3413241f8132790d93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bea05bc1d17aa43cbdf3a3413241f8132790d93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bea05bc1d17aa43cbdf3a3413241f8132790d93/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29"
      },
      {
        "sha": "a38686cea035e0d480e4ee953b8e40c7f0fa2118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38686cea035e0d480e4ee953b8e40c7f0fa2118",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a38686cea035e0d480e4ee953b8e40c7f0fa2118"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8f3e4b8063288e451c97ac166dd1cb2853d2463b",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bea05bc1d17aa43cbdf3a3413241f8132790d93/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bea05bc1d17aa43cbdf3a3413241f8132790d93/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=5bea05bc1d17aa43cbdf3a3413241f8132790d93",
        "patch": "@@ -9,7 +9,7 @@ REVSIG=false\n IFS='\n '\n if [ \"$BITCOIN_VERIFY_COMMITS_ALLOW_SHA1\" = 1 ]; then\n-\tGPG_RES=\"$(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n+\tGPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n else\n \t# Note how we've disabled SHA1 with the --weak-digest option, disabling\n \t# signatures - including selfsigs - that use SHA1. While you might think that\n@@ -24,15 +24,15 @@ else\n \t\tcase \"$LINE\" in\n \t\t\t\"gpg (GnuPG) 1.4.1\"*|\"gpg (GnuPG) 2.0.\"*)\n \t\t\t\techo \"Please upgrade to at least gpg 2.1.10 to check for weak signatures\" > /dev/stderr\n-\t\t\t\tGPG_RES=\"$(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n+\t\t\t\tGPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null)\"\n \t\t\t\t;;\n \t\t\t# We assume if you're running 2.1+, you're probably running 2.1.10+\n \t\t\t# gpg will fail otherwise\n \t\t\t# We assume if you're running 1.X, it is either 1.4.1X or 1.4.20+\n \t\t\t# gpg will fail otherwise\n \t\tesac\n \tdone\n-\t[ \"$GPG_RES\" = \"\" ] && GPG_RES=\"$(echo \"$INPUT\" | gpg --trust-model always --weak-digest sha1 \"$@\" 2>/dev/null)\"\n+\t[ \"$GPG_RES\" = \"\" ] && GPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always --weak-digest sha1 \"$@\" 2>/dev/null)\"\n fi\n for LINE in $(echo \"$GPG_RES\"); do\n \tcase \"$LINE\" in\n@@ -57,8 +57,8 @@ if ! $VALID; then\n \texit 1\n fi\n if $VALID && $REVSIG; then\n-\techo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null | grep \"\\[GNUPG:\\] \\(NEWSIG\\|SIG_ID\\|VALIDSIG\\)\"\n+\tprintf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null | grep \"\\[GNUPG:\\] \\(NEWSIG\\|SIG_ID\\|VALIDSIG\\)\"\n \techo \"$GOODREVSIG\"\n else\n-\techo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n+\tprintf '%s\\n' \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n fi"
      }
    ]
  },
  {
    "sha": "a13e44385147aa8789a4992fa6d162ffec04c9ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTNlNDQzODUxNDdhYTg3ODlhNDk5MmZhNmQxNjJmZmVjMDRjOWFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-06T11:04:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-06T11:04:44Z"
      },
      "message": "Merge #11830: rpcuser.py: Use 'python' not 'python2'\n\n6d2f277 rpcuser.py: Use 'python' not 'python2' (Henrik Jonsson)\n\nPull request description:\n\n  Note that `rpcuser.py` seems to handle either version when called explicitly like `python2 rpcuser.py` / `python3 rpcuser.py`. This change allows the user's `python` to be used to interpret the script.\n\n  There's not always a `python2` installed, e.g. if only Python 3.0+ is installed as `python` / `python3`, like on Arch Linux (https://github.com/hkjn/src/blob/master/bitcoin/Dockerfile#L14) but `python` is almost always present.\n\n  # Tested\n\n  Script is already compatible with both major versions:\n  ```\n  $ python2 share/rpcuser/rpcuser.py foobar\n  String to be appended to bitcoin.conf:\n  rpcauth=foobar:2951d04c215769c8887c1fa4a8f712c$63c9a08e3b69f811e3837c0d5b6a355b7f798afc7094d80008f5c56a056c387f\n  Your password:\n  TV4I54T6W38v1sj3iF4Xsw7A-wYav-Cn8uTr8qv4xZ8=\n\n  $ python3 share/rpcuser/rpcuser.py foobar\n  String to be appended to bitcoin.conf:\n  rpcauth=foobar:129afbbd214c1f85fb6b9941402506f$4c5af73a2f3fd0a1d8232c28bc5c36f9b0cffd62b7b139beb328d089b16028dc\n  Your password:\n  qqbeWrGHqbYL1tUDh1wHKkejzxiGvOa3SPkDbbCwBfs=\n\n  $ python2 --version\n  Python 2.7.12\n\n  $ python3 --version\n  Python 3.5.2\n  ```\n\nTree-SHA512: b5d6de15507cfd8dbb520325cf0b67fa471fa4fe3661de4ea6841fadb6ec9ba65d0c4f545f58578168c9ce9f6e483d613cce31ab3dd28117510bf9cada3b7b91",
      "tree": {
        "sha": "aae7ba6eaa13e02817eca74d1e2d61ebd5908038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aae7ba6eaa13e02817eca74d1e2d61ebd5908038"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a13e44385147aa8789a4992fa6d162ffec04c9ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaJ87MAAoJEB5K7WKYbNJdgCkH/2Q250agWpOS+rJNnBjyXFon\nrSyGMxzq6Z6E019tcxo3jJZmXnsXpKByF4/MQBl0zDoBbpFtfZsUp7NgsHKAS8mn\nL/vQ51OQPvKufDz0Q9jkOjGJr6yA0j0wRyatZh9J881qMkPITZRkLqfTVHVEyrnT\nxfG8nTLyds2LgrRrCuxoh6eKXM9Z2mVbswPrEiFkl9o6NUBV6GHRIoU9sZDFraq3\nn9aW4MjxgoN5M23/mLOFfrI6dKfYpPoWPt7dVdv1Yj4JwZAaI0TjVLtsOjc+hZTD\nNX9eNOQxVsCJrLkAsotq3EKORDly4z7bm/+y0egi6B9JskaYR1wi9Tg2Ndggkqw=\n=bN+E\n-----END PGP SIGNATURE-----",
        "payload": "tree aae7ba6eaa13e02817eca74d1e2d61ebd5908038\nparent 5bea05bc1d17aa43cbdf3a3413241f8132790d93\nparent 6d2f277b1905de93bade8e589895403b13b30c5c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512558272 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512558284 +0100\n\nMerge #11830: rpcuser.py: Use 'python' not 'python2'\n\n6d2f277 rpcuser.py: Use 'python' not 'python2' (Henrik Jonsson)\n\nPull request description:\n\n  Note that `rpcuser.py` seems to handle either version when called explicitly like `python2 rpcuser.py` / `python3 rpcuser.py`. This change allows the user's `python` to be used to interpret the script.\n\n  There's not always a `python2` installed, e.g. if only Python 3.0+ is installed as `python` / `python3`, like on Arch Linux (https://github.com/hkjn/src/blob/master/bitcoin/Dockerfile#L14) but `python` is almost always present.\n\n  # Tested\n\n  Script is already compatible with both major versions:\n  ```\n  $ python2 share/rpcuser/rpcuser.py foobar\n  String to be appended to bitcoin.conf:\n  rpcauth=foobar:2951d04c215769c8887c1fa4a8f712c$63c9a08e3b69f811e3837c0d5b6a355b7f798afc7094d80008f5c56a056c387f\n  Your password:\n  TV4I54T6W38v1sj3iF4Xsw7A-wYav-Cn8uTr8qv4xZ8=\n\n  $ python3 share/rpcuser/rpcuser.py foobar\n  String to be appended to bitcoin.conf:\n  rpcauth=foobar:129afbbd214c1f85fb6b9941402506f$4c5af73a2f3fd0a1d8232c28bc5c36f9b0cffd62b7b139beb328d089b16028dc\n  Your password:\n  qqbeWrGHqbYL1tUDh1wHKkejzxiGvOa3SPkDbbCwBfs=\n\n  $ python2 --version\n  Python 2.7.12\n\n  $ python3 --version\n  Python 3.5.2\n  ```\n\nTree-SHA512: b5d6de15507cfd8dbb520325cf0b67fa471fa4fe3661de4ea6841fadb6ec9ba65d0c4f545f58578168c9ce9f6e483d613cce31ab3dd28117510bf9cada3b7b91\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13e44385147aa8789a4992fa6d162ffec04c9ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a13e44385147aa8789a4992fa6d162ffec04c9ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13e44385147aa8789a4992fa6d162ffec04c9ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bea05bc1d17aa43cbdf3a3413241f8132790d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bea05bc1d17aa43cbdf3a3413241f8132790d93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bea05bc1d17aa43cbdf3a3413241f8132790d93"
      },
      {
        "sha": "6d2f277b1905de93bade8e589895403b13b30c5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2f277b1905de93bade8e589895403b13b30c5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2f277b1905de93bade8e589895403b13b30c5c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6d9b44f69972a5959250c5fb45d06d4446fac0ce",
        "filename": "share/rpcuser/rpcuser.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13e44385147aa8789a4992fa6d162ffec04c9ae/share/rpcuser/rpcuser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13e44385147aa8789a4992fa6d162ffec04c9ae/share/rpcuser/rpcuser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/rpcuser.py?ref=a13e44385147aa8789a4992fa6d162ffec04c9ae",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2 \n+#!/usr/bin/env python\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying \n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      }
    ]
  },
  {
    "sha": "497d0e014cc79d46531d570e74e4aeae72db602d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTdkMGUwMTRjYzc5ZDQ2NTMxZDU3MGU3NGU0YWVhZTcyZGI2MDJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-06T11:10:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-06T11:10:21Z"
      },
      "message": "Merge #10275: [rpc] Allow fetching tx directly from specified block in getrawtransaction\n\n434526a [test] Add tests for getrawtransaction with block hash. (Karl-Johan Alm)\nb167951 [rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly. (Karl-Johan Alm)\na5f5a2c [rpc] Fix fVerbose parsing (remove excess if cases). (Karl-Johan Alm)\n\nPull request description:\n\n  [Reviewer hint: use [?w=1](https://github.com/bitcoin/bitcoin/pull/10275/files?w=1) to avoid seeing a bunch of indentation changes.]\n\n  Presuming a user knows the block hash of the block containing a given transaction, this PR allows them to fetch the raw transaction, even without `-txindex`. It also enables support for getting transactions that are in orphaned blocks.\n\n  Note that supplying a block hash will override mempool and txindex support in `GetTransaction`. The rationale behind this is that a transaction may be in multiple places (orphaned blocks) and if the user supplies an explicit block hash it should be adhered to.\n\n  ```Bash\n  $ # a41.. is a tx inside an orphan block ..3c6f.. -- first try getting it normally\n  $ ./bitcoin-cli getrawtransaction a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79 1\n  error code: -5\n  error message:\n  No such mempool transaction. Use -txindex to enable blockchain transaction queries. Use gettransaction for wallet transactions.\n  $ # now try with block hash\n  $ ./bitcoin-cli getrawtransaction a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79 1 0000000000000000003c6fe479122bfa4a9187493937af1734e1e5cd9f198ec7\n  {\n    \"hex\": \"01000000014e7e81144e42f6d65550e59b715d470c9301fd7ac189[...]90488ac00000000\",\n    \"inMainChain\": false,\n    \"txid\": \"a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79\",\n    \"hash\": \"a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79\",\n    \"size\": 225,\n  [...]\n  }\n  $ # another tx 6c66... in block 462000\n  $ ./bitcoin-cli getrawtransaction 6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735 1 00000000000000000217f2c12922e321f6d4aa933ce88005a9a493c503054a40\n  {\n    \"hex\": \"0200000004d157[...]88acaf0c0700\",\n    \"inMainChain\": true,\n    \"txid\": \"6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735\",\n    \"hash\": \"6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735\",\n    \"size\": 666,\n  [...]\n  }\n  $\n  ```\n\nTree-SHA512: 279be3818141edd3cc194a9ee65929331920afb30297ab2d6da07293a2d7311afee5c8b00c6457477d9f1f86e86786a9b56878ea3ee19fa2629b829d042d0cda",
      "tree": {
        "sha": "7b31b3067439d0f4406ab0e7c6f0ca526e35d0fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b31b3067439d0f4406ab0e7c6f0ca526e35d0fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/497d0e014cc79d46531d570e74e4aeae72db602d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaJ9AdAAoJEB5K7WKYbNJdKw8H+wdQX7iCgkL/8/O4xR6y0bIQ\noLr4axild6foNkCksVbZSZJrkLuLW0prjT6v0h0bVA3ggdq7BILnUn5ItjrVU/as\nXHs+LCJneEIS6xfwDAHGFEfcIMgOFS/z3V9+rdm2e8atcpUbNkzVQm85BjV8auU/\nWNezRUEQo4WTA+zkw4+nAzBOC2mVH8NXeIO0DvMcE072eQYYndckX6dbBZjSOKQq\nU8Xa0PIPxu7O/5PP5Iz813L13yEm93ZFAco26VesJ7sIHG2LT/NVhErMicETb10N\nObxLCPz73umsI1561jBEPDqlA9oF6cSzCvH2W9kVCsNWzcyYdXIyMMZr+bEweU4=\n=WTxV\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b31b3067439d0f4406ab0e7c6f0ca526e35d0fa\nparent a13e44385147aa8789a4992fa6d162ffec04c9ae\nparent 434526aba680cb73208e018a02827d51a71cfff6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512558616 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512558621 +0100\n\nMerge #10275: [rpc] Allow fetching tx directly from specified block in getrawtransaction\n\n434526a [test] Add tests for getrawtransaction with block hash. (Karl-Johan Alm)\nb167951 [rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly. (Karl-Johan Alm)\na5f5a2c [rpc] Fix fVerbose parsing (remove excess if cases). (Karl-Johan Alm)\n\nPull request description:\n\n  [Reviewer hint: use [?w=1](https://github.com/bitcoin/bitcoin/pull/10275/files?w=1) to avoid seeing a bunch of indentation changes.]\n\n  Presuming a user knows the block hash of the block containing a given transaction, this PR allows them to fetch the raw transaction, even without `-txindex`. It also enables support for getting transactions that are in orphaned blocks.\n\n  Note that supplying a block hash will override mempool and txindex support in `GetTransaction`. The rationale behind this is that a transaction may be in multiple places (orphaned blocks) and if the user supplies an explicit block hash it should be adhered to.\n\n  ```Bash\n  $ # a41.. is a tx inside an orphan block ..3c6f.. -- first try getting it normally\n  $ ./bitcoin-cli getrawtransaction a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79 1\n  error code: -5\n  error message:\n  No such mempool transaction. Use -txindex to enable blockchain transaction queries. Use gettransaction for wallet transactions.\n  $ # now try with block hash\n  $ ./bitcoin-cli getrawtransaction a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79 1 0000000000000000003c6fe479122bfa4a9187493937af1734e1e5cd9f198ec7\n  {\n    \"hex\": \"01000000014e7e81144e42f6d65550e59b715d470c9301fd7ac189[...]90488ac00000000\",\n    \"inMainChain\": false,\n    \"txid\": \"a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79\",\n    \"hash\": \"a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79\",\n    \"size\": 225,\n  [...]\n  }\n  $ # another tx 6c66... in block 462000\n  $ ./bitcoin-cli getrawtransaction 6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735 1 00000000000000000217f2c12922e321f6d4aa933ce88005a9a493c503054a40\n  {\n    \"hex\": \"0200000004d157[...]88acaf0c0700\",\n    \"inMainChain\": true,\n    \"txid\": \"6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735\",\n    \"hash\": \"6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735\",\n    \"size\": 666,\n  [...]\n  }\n  $\n  ```\n\nTree-SHA512: 279be3818141edd3cc194a9ee65929331920afb30297ab2d6da07293a2d7311afee5c8b00c6457477d9f1f86e86786a9b56878ea3ee19fa2629b829d042d0cda\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/497d0e014cc79d46531d570e74e4aeae72db602d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a13e44385147aa8789a4992fa6d162ffec04c9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13e44385147aa8789a4992fa6d162ffec04c9ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a13e44385147aa8789a4992fa6d162ffec04c9ae"
      },
      {
        "sha": "434526aba680cb73208e018a02827d51a71cfff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434526aba680cb73208e018a02827d51a71cfff6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/434526aba680cb73208e018a02827d51a71cfff6"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 109,
      "deletions": 60
    },
    "files": [
      {
        "sha": "b26f10e476fbb60511669ad7594deea67d1542ac",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 23,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497d0e014cc79d46531d570e74e4aeae72db602d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497d0e014cc79d46531d570e74e4aeae72db602d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=497d0e014cc79d46531d570e74e4aeae72db602d",
        "patch": "@@ -64,12 +64,15 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n \n UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"getrawtransaction \\\"txid\\\" ( verbose \\\"blockhash\\\" )\\n\"\n \n             \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n-            \"enabled, it also works for blockchain transactions.\\n\"\n+            \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n+            \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n+            \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n+            \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n             \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n@@ -78,13 +81,15 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n-            \"2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n+            \"2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n+            \"3. \\\"blockhash\\\" (string, optional) The block in which to look for the transaction\\n\"\n \n             \"\\nResult (if verbose is not set or set to false):\\n\"\n             \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n \n             \"\\nResult (if verbose is set to true):\\n\"\n             \"{\\n\"\n+            \"  \\\"in_active_chain\\\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n@@ -132,42 +137,58 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n         );\n \n     LOCK(cs_main);\n \n+    bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    CBlockIndex* blockindex = nullptr;\n \n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n     if (!request.params[1].isNull()) {\n-        if (request.params[1].isNum()) {\n-            if (request.params[1].get_int() != 0) {\n-                fVerbose = true;\n-            }\n-        }\n-        else if(request.params[1].isBool()) {\n-            if(request.params[1].isTrue()) {\n-                fVerbose = true;\n+        fVerbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    if (!request.params[2].isNull()) {\n+        uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n+        if (!blockhash.IsNull()) {\n+            BlockMap::iterator it = mapBlockIndex.find(blockhash);\n+            if (it == mapBlockIndex.end()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n             }\n-        }\n-        else {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid type provided. Verbose parameter must be a boolean.\");\n+            blockindex = it->second;\n+            in_active_chain = chainActive.Contains(blockindex);\n         }\n     }\n \n     CTransactionRef tx;\n-    uint256 hashBlock;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n-            : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\") +\n-            \". Use gettransaction for wallet transactions.\");\n+    uint256 hash_block;\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+        std::string errmsg;\n+        if (blockindex) {\n+            if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n+            }\n+            errmsg = \"No such transaction found in the provided block\";\n+        } else {\n+            errmsg = fTxIndex\n+              ? \"No such mempool or blockchain transaction\"\n+              : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        }\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n+    }\n \n-    if (!fVerbose)\n+    if (!fVerbose) {\n         return EncodeHexTx(*tx, RPCSerializationFlags());\n+    }\n \n     UniValue result(UniValue::VOBJ);\n-    TxToJSON(*tx, hashBlock, result);\n+    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    TxToJSON(*tx, hash_block, result);\n     return result;\n }\n \n@@ -995,7 +1016,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\"} },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },"
      },
      {
        "sha": "986052771c40e026cdec5efa15420be22e930790",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 33,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497d0e014cc79d46531d570e74e4aeae72db602d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497d0e014cc79d46531d570e74e4aeae72db602d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=497d0e014cc79d46531d570e74e4aeae72db602d",
        "patch": "@@ -926,47 +926,51 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n }\n \n-/** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n+/**\n+ * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n+ * If blockIndex is provided, the transaction is fetched from the corresponding block.\n+ */\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n {\n-    CBlockIndex *pindexSlow = nullptr;\n+    CBlockIndex* pindexSlow = blockIndex;\n \n     LOCK(cs_main);\n \n-    CTransactionRef ptx = mempool.get(hash);\n-    if (ptx)\n-    {\n-        txOut = ptx;\n-        return true;\n-    }\n-\n-    if (fTxIndex) {\n-        CDiskTxPos postx;\n-        if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-            if (file.IsNull())\n-                return error(\"%s: OpenBlockFile failed\", __func__);\n-            CBlockHeader header;\n-            try {\n-                file >> header;\n-                fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n-                file >> txOut;\n-            } catch (const std::exception& e) {\n-                return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-            }\n-            hashBlock = header.GetHash();\n-            if (txOut->GetHash() != hash)\n-                return error(\"%s: txid mismatch\", __func__);\n+    if (!blockIndex) {\n+        CTransactionRef ptx = mempool.get(hash);\n+        if (ptx) {\n+            txOut = ptx;\n             return true;\n         }\n \n-        // transaction not found in index, nothing more can be done\n-        return false;\n-    }\n+        if (fTxIndex) {\n+            CDiskTxPos postx;\n+            if (pblocktree->ReadTxIndex(hash, postx)) {\n+                CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+                if (file.IsNull())\n+                    return error(\"%s: OpenBlockFile failed\", __func__);\n+                CBlockHeader header;\n+                try {\n+                    file >> header;\n+                    fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+                    file >> txOut;\n+                } catch (const std::exception& e) {\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                }\n+                hashBlock = header.GetHash();\n+                if (txOut->GetHash() != hash)\n+                    return error(\"%s: txid mismatch\", __func__);\n+                return true;\n+            }\n \n-    if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-        const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-        if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+            // transaction not found in index, nothing more can be done\n+            return false;\n+        }\n+\n+        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n+            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n+            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+        }\n     }\n \n     if (pindexSlow) {"
      },
      {
        "sha": "ec17d0d92d6dd24581fa0a4af0e6b38e32840914",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497d0e014cc79d46531d570e74e4aeae72db602d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497d0e014cc79d46531d570e74e4aeae72db602d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=497d0e014cc79d46531d570e74e4aeae72db602d",
        "patch": "@@ -273,7 +273,7 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);"
      },
      {
        "sha": "45d2410f8ba49cf2a9fe9b655eddfeaf28e1501f",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497d0e014cc79d46531d570e74e4aeae72db602d/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497d0e014cc79d46531d570e74e4aeae72db602d/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=497d0e014cc79d46531d570e74e4aeae72db602d",
        "patch": "@@ -50,6 +50,30 @@ def run_test(self):\n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n+        #####################################\n+        # getrawtransaction with block hash #\n+        #####################################\n+\n+        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_all()\n+        # We should be able to get the raw transaction by providing the correct block\n+        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n+        assert_equal(gottx['txid'], tx)\n+        assert_equal(gottx['in_active_chain'], True)\n+        # We should not have the 'in_active_chain' flag when we don't provide a block\n+        gottx = self.nodes[0].getrawtransaction(tx, True)\n+        assert_equal(gottx['txid'], tx)\n+        assert 'in_active_chain' not in gottx\n+        # We should not get the tx if we provide an unrelated block\n+        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n+        # An invalid block hash should raise the correct errors\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n+        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n+        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n+\n         #########################\n         # RAW TX MULTISIG TESTS #\n         #########################\n@@ -188,13 +212,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      }
    ]
  },
  {
    "sha": "3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmRiMjk3NzhhMGI1OThkNGRkZjA1ZWM1ZWQ0NTkzNjQxZDBkYTZl",
    "commit": {
      "author": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2017-12-06T12:47:28Z"
      },
      "committer": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2017-12-06T13:11:02Z"
      },
      "message": "Rename rpcuser.py to rpcauth.py\n\nThis script creates `rpcauth` entries for bitcoin.conf,\nnot the deprecated `rpcuser` entry, so this changes the name\nof the script to match.",
      "tree": {
        "sha": "8cc9289e1afe8b72d0f2a0ad28012b6ea2a54bcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cc9289e1afe8b72d0f2a0ad28012b6ea2a54bcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/comments",
    "author": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "497d0e014cc79d46531d570e74e4aeae72db602d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/497d0e014cc79d46531d570e74e4aeae72db602d"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "31525e2c665a17b2836e6794b016c4edb69f343f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
        "patch": "@@ -46,7 +46,7 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/rpm\n DIST_SHARE = \\\n   $(top_srcdir)/share/genbuild.sh \\\n-  $(top_srcdir)/share/rpcuser\n+  $(top_srcdir)/share/rpcauth\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py"
      },
      {
        "sha": "4dd73162a238b848c1d6ccf1b35540256b3b7d15",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
        "patch": "@@ -77,9 +77,9 @@\n #rpcpassword=YourSuperGreatPasswordNumber_DO_NOT_USE_THIS_OR_YOU_WILL_GET_ROBBED_385593\n #\n # The second method `rpcauth` can be added to server startup argument. It is set at initialization time\n-# using the output from the script in share/rpcuser/rpcuser.py after providing a username:\n+# using the output from the script in share/rpcauth/rpcauth.py after providing a username:\n #\n-# ./share/rpcuser/rpcuser.py alice\n+# ./share/rpcauth/rpcauth.py alice\n # String to be appended to bitcoin.conf:\n # rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc02b724e5d095828e0bc8b2456e9ac8757ae3211a5d9b16a22ae\n # Your password:"
      },
      {
        "sha": "389278a1256d9f8728da11c05deb972803ad789e",
        "filename": "share/rpcauth/README.md",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/share/rpcauth/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/share/rpcauth/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/README.md?ref=3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
        "patch": "@@ -0,0 +1,10 @@\n+RPC Tools\n+---------------------\n+\n+### [RPCAuth](/share/rpcauth) ###\n+\n+Create login credentials for a JSON-RPC user.\n+\n+Usage:\n+\n+    ./rpcauth.py <username>"
      },
      {
        "sha": "6d9b44f69972a5959250c5fb45d06d4446fac0ce",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
        "previous_filename": "share/rpcuser/rpcuser.py"
      },
      {
        "sha": "12a8e6fb0cc5b9458cf1ca430ed8e497096dfeeb",
        "filename": "share/rpcuser/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497d0e014cc79d46531d570e74e4aeae72db602d/share/rpcuser/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497d0e014cc79d46531d570e74e4aeae72db602d/share/rpcuser/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/README.md?ref=497d0e014cc79d46531d570e74e4aeae72db602d",
        "patch": "@@ -1,10 +0,0 @@\n-RPC Tools\n----------------------\n-\n-### [RPCUser](/share/rpcuser) ###\n-\n-Create an RPC user login credential.\n-\n-Usage:\n-\n-    ./rpcuser.py <username>"
      }
    ]
  },
  {
    "sha": "fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRjMTZkMmU3MmE4ZWMxMDMyZGE0OWE2OGM5OTEzYzI1OTVkYmZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-06T15:52:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-06T16:00:08Z"
      },
      "message": "qa: Add getrawtransaction in_active_chain=False test",
      "tree": {
        "sha": "dde5119baf020bffdd4699d4b841032a43f035fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde5119baf020bffdd4699d4b841032a43f035fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "497d0e014cc79d46531d570e74e4aeae72db602d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/497d0e014cc79d46531d570e74e4aeae72db602d"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "018c25532504b648e2969223d51170b4c40a210a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
        "patch": "@@ -155,14 +155,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     if (!request.params[2].isNull()) {\n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        if (!blockhash.IsNull()) {\n-            BlockMap::iterator it = mapBlockIndex.find(blockhash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n-            }\n-            blockindex = it->second;\n-            in_active_chain = chainActive.Contains(blockindex);\n+        BlockMap::iterator it = mapBlockIndex.find(blockhash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n+        blockindex = it->second;\n+        in_active_chain = chainActive.Contains(blockindex);\n     }\n \n     CTransactionRef tx;"
      },
      {
        "sha": "79f2a2834ea966b92469d11e7e9a56f52f3fd301",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
        "patch": "@@ -72,7 +72,13 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n         assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n         assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n+        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        # Undo the blocks and check in_active_chain\n+        self.nodes[0].invalidateblock(block1)\n+        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n+        assert_equal(gottx['in_active_chain'], False)\n+        self.nodes[0].reconsiderblock(block1)\n+        assert_equal(self.nodes[0].getbestblockhash(), block2)\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -212,13 +218,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      }
    ]
  },
  {
    "sha": "3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTIxZDc2YmExMTA0M2VhNWM0ZTk1N2FjMGMzZWRiZjIxZDFlODRk",
    "commit": {
      "author": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2017-12-06T18:53:12Z"
      },
      "committer": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2017-12-06T18:53:12Z"
      },
      "message": "doc: Update release notes for share/rpcauth/rpcauth.py rename",
      "tree": {
        "sha": "706504e31ac1ff41903ea0bf5489f9e0aa550a40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/706504e31ac1ff41903ea0bf5489f9e0aa550a40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d/comments",
    "author": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "78caddc8f0299bf9878e8a89dab0174b3a501140",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
        "patch": "@@ -94,6 +94,12 @@ Changed command-line options\n -----------------------------\n - `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n \n+Renamed script for creating JSON-RPC credentials\n+-----------------------------\n+The `share/rpcuser/rpcuser.py` script was renamed to `share/rpcauth/rpcauth.py`. This script can be\n+used to create `rpcauth` credentials for a JSON-RPC user.\n+\n+\n Credits\n =======\n "
      }
    ]
  },
  {
    "sha": "b3411435ae47246d64360f66a6b16f9a2d9f0c73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzQxMTQzNWFlNDcyNDZkNjQzNjBmNjZhNmIxNmY5YTJkOWYwYzcz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-07T04:08:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-07T05:13:57Z"
      },
      "message": "[build] Add missing stuff to clean-local\n- test/functional/test_framework/__pycache__\n- test/cache",
      "tree": {
        "sha": "4d05a19da90e755e662a555f44e84a87da45f9d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d05a19da90e755e662a555f44e84a87da45f9d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3411435ae47246d64360f66a6b16f9a2d9f0c73",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAloozhUACgkQV692LbM1\nMyI3ug/+P34IRk9z5H86qaFL+nc3WabxlTPsu0I5YcxvcOUEkht29XvkPs8yocHk\nkNM7U369ghmWRmRt2/IL4OaS0DUdBDd3AWQgreLlTBmEW+9lhL13kLCmwDL4YUOz\nRfymyb+gEcWSV8VnWiHt7Mid1yI1fDo1hibwP9J3HcXZWopN6/efKfDUBn5gpMSo\nNrB16p6zaVvbZWX6Frgmt7ZgbBh6i82PdS7VTcSNYeaNhBU+wT5BFPSggJjHlPH7\nVWTd9DgSgk4KncqwKd380ccusBL9D/8Hz1FwHXLbFjKvV0M8C2zHFFNWjjec6W/n\nUiU0PBq9JpHPqX8PHTqiGlmiEhymdATOUBTh35IE+60OHpDK4AcXnkWwWQ4FqTaj\nsXpZxswc0TfSh5zdf4K6z7os3v/dlpezgbE0Q/tcv5YehKnEi/LkHvp8wXUvbnbs\neFGsZwwTIQp5cw8TwpZiAF3kuxoYmuVy72LhVTAm5v0g1CY00PzqzHKxdWwGRiay\nRFImXD86temOVVV5fVw72AWhUuRJbUGgxgDIWEw09m1NdpkU8Glf3NBQY6CoF9L7\nrPbCVnCrlYQnttkqqOcs6CvEgbCMn1zl5NpF2eJi3+0McZ1cYB5ZNZF09H4TM98x\nqyuUsf++p9UYdiDItZ4KtIWEMkEDgdQ2vmW3V331PcbGxU9H0KM=\n=KDFE\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d05a19da90e755e662a555f44e84a87da45f9d2\nparent c17f11f7b43ad3bd9e242c67db1f3679558a0581\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1512619690 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1512623637 +0900\n\n[build] Add missing stuff to clean-local\n- test/functional/test_framework/__pycache__\n- test/cache\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3411435ae47246d64360f66a6b16f9a2d9f0c73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3411435ae47246d64360f66a6b16f9a2d9f0c73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3411435ae47246d64360f66a6b16f9a2d9f0c73/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c17f11f7b43ad3bd9e242c67db1f3679558a0581"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9bf16b6fc1edcef880dd1b4ee0a1cfd1c40fdb32",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3411435ae47246d64360f66a6b16f9a2d9f0c73/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3411435ae47246d64360f66a6b16f9a2d9f0c73/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=b3411435ae47246d64360f66a6b16f9a2d9f0c73",
        "patch": "@@ -279,4 +279,4 @@ DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n clean-local:\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n-\trm -rf test/functional/__pycache__\n+\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache"
      }
    ]
  },
  {
    "sha": "e054d0e532cdb587193952a629e94c669eff95f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDU0ZDBlNTMyY2RiNTg3MTkzOTUyYTYyOWU5NGM2NjllZmY5NWY1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-20T20:57:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-07T07:13:48Z"
      },
      "message": "[QA] Add node_network_limited test",
      "tree": {
        "sha": "bf816d4c9f66d7f5689cefa6b178d41ce7a67e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf816d4c9f66d7f5689cefa6b178d41ce7a67e36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e054d0e532cdb587193952a629e94c669eff95f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAloo6i0ACgkQHrd2uwPH\nki250xAAmwYik6yp00KV0SYpONFvm23j/W74eFZr5z3giQlNJeRldpNxnJ2mn7QL\nRonXELY1RJF2K283gy00NZ0kiToFlQWC4HyJSRH8AELKf/WDppaQf+IUa8x7SpCY\ngXeaSSzz3VBxQrEh0jz+CzjgaD6Fu81rG8MtI7p5TMtIddvetEM4VtWgJT3hu1Mn\nwhRBmu9a0mvo+v8sJnBnxPSoPYfnWa6EJdy1y3HKfOSmP/1Fo3oU8HHAg9ymwuui\n0xxRLO+rjMKq/QV0Mbv/e7gsPOgzVEGXuWqOOk/xTKddEiFCigVafEJBMgrQ5hxp\nZvxkh7p0YcHTrU3nVgC/L1oIBPt41V/mIxJco7IUTSvhqSD3ZgsFBqwW+b3ZYmuN\nk4H8ODDAlJzfilSWm5u7+wts8Bxos9nFK1LsDSgshzBa2m2iRdc9G11msdLRcBda\n1FP0xsN1T+0hzf2V47FNHrVkftPTZQ6lEtUd4ybA7D46kekBBqAbhnX6X9H7GEcl\nmlKed2r7oWMO38iUi+FMAtuMM5VAMDemQEhAlwelY4rwiowfSJ0dWRGorRMFC2O3\nghZce4uEoCVIWgI+C/JtDX2knnWWyfUVLyaZ/cy9K4e/1bx4IWS542602Lo+pHjW\nXpKu4FtAa9INIIDPLxlpPecxCKiTZp3gapw0mc8VuuXmyYYtBHw=\n=TCsv\n-----END PGP SIGNATURE-----",
        "payload": "tree bf816d4c9f66d7f5689cefa6b178d41ce7a67e36\nparent bd0941652444df09c32eb552952fd3705d03fd6a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1511211454 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512630828 -1000\n\n[QA] Add node_network_limited test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e054d0e532cdb587193952a629e94c669eff95f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e054d0e532cdb587193952a629e94c669eff95f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e054d0e532cdb587193952a629e94c669eff95f5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd0941652444df09c32eb552952fd3705d03fd6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0941652444df09c32eb552952fd3705d03fd6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0941652444df09c32eb552952fd3705d03fd6a"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6d1bf7ced284b9b0621991566d93bbc1bb2f1e3d",
        "filename": "test/functional/node_network_limited.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e054d0e532cdb587193952a629e94c669eff95f5/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e054d0e532cdb587193952a629e94c669eff95f5/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=e054d0e532cdb587193952a629e94c669eff95f5",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import *\n+\n+class BaseNode(P2PInterface):\n+    nServices = 0\n+    firstAddrnServices = 0\n+    def on_version(self, message):\n+        self.nServices = message.nServices\n+\n+class NodeNetworkLimitedTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-prune=550']]\n+\n+    def getSignaledServiceFlags(self):\n+        node = self.nodes[0].add_p2p_connection(BaseNode())\n+        NetworkThread().start()\n+        node.wait_for_verack()\n+        services = node.nServices\n+        self.nodes[0].disconnect_p2ps()\n+        node.wait_for_disconnect()\n+        return services\n+\n+    def tryGetBlockViaGetData(self, blockhash, must_disconnect):\n+        node = self.nodes[0].add_p2p_connection(BaseNode())\n+        NetworkThread().start()\n+        node.wait_for_verack()\n+        node.send_message(msg_verack())\n+        getdata_request = msg_getdata()\n+        getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n+        node.send_message(getdata_request)\n+\n+        if (must_disconnect):\n+            #ensure we get disconnected\n+            node.wait_for_disconnect(5)\n+        else:\n+            # check if the peer sends us the requested block\n+            node.wait_for_block(int(blockhash, 16), 3)\n+            self.nodes[0].disconnect_p2ps()\n+            node.wait_for_disconnect()\n+\n+    def run_test(self):\n+        #NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n+        assert_equal(self.getSignaledServiceFlags(), 1036) #1036 == 0x40C == 0100 0000 1100\n+#                                                                              |        ||\n+#                                                                              |        |^--- NODE_BLOOM\n+#                                                                              |        ^---- NODE_WITNESS\n+#                                                                              ^-- NODE_NETWORK_LIMITED\n+\n+        #now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n+        firstblock = self.nodes[0].generate(1)[0]\n+        blocks = self.nodes[0].generate(292)\n+        blockWithinLimitedRange = blocks[-1]\n+\n+        #make sure we can max retrive block at tip-288\n+        #requesting block at height 2 (tip-289) must fail (ignored)\n+        self.tryGetBlockViaGetData(firstblock, True) #first block must lead to disconnect\n+        self.tryGetBlockViaGetData(blocks[1], False) #last block in valid range\n+        self.tryGetBlockViaGetData(blocks[0], True) #first block outside of the 288+2 limit\n+\n+        #NODE_NETWORK_LIMITED must still be signaled after restart\n+        self.restart_node(0)\n+        assert_equal(self.getSignaledServiceFlags(), 1036)\n+\n+        #test the RPC service flags\n+        assert_equal(self.nodes[0].getnetworkinfo()['localservices'], \"000000000000040c\")\n+\n+        # getdata a block above the NODE_NETWORK_LIMITED threshold must be possible\n+        self.tryGetBlockViaGetData(blockWithinLimitedRange, False)\n+\n+        # getdata a block below the NODE_NETWORK_LIMITED threshold must be ignored\n+        self.tryGetBlockViaGetData(firstblock, True)\n+\n+if __name__ == '__main__':\n+    NodeNetworkLimitedTest().main()"
      },
      {
        "sha": "58faec521d74f9c8d1722edbb9ce7251420b05f3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e054d0e532cdb587193952a629e94c669eff95f5/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e054d0e532cdb587193952a629e94c669eff95f5/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e054d0e532cdb587193952a629e94c669eff95f5",
        "patch": "@@ -128,6 +128,7 @@\n     'uacomment.py',\n     'p2p-acceptblock.py',\n     'feature_logging.py',\n+    'node_network_limited.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTc0YzYyNTgzM2JiYThkODE3MWEyZDBkZDZlZGUyZTlkNWRhODhi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-08-08T20:46:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-07T07:13:53Z"
      },
      "message": "[Doc] Update bip.md, add support for BIP 159",
      "tree": {
        "sha": "6d57789cc6a4004b26524a61483dc8dcea809484",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d57789cc6a4004b26524a61483dc8dcea809484"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAloo6jEACgkQHrd2uwPH\nki1rhRAAkG98gH1IQ8mmSboJXBVNZd2hm3+RL/+SqI0ALx5ITmq9hqtDYAJm5T8/\nMy2GBvQs+Nk8o6mpPQDkgsapAuoLF31JJftAIyBUETvbLOHnTTcDtNmKknmExyth\n5DxF7D9iKwzaFBRnBFBs1WFuK91P2KP1bmQ9DMBV+TU/74zZWZ91L4kOxTpjI3q9\n3OolyOs1Usxk5XXFrafFlZotjb7WGDwx6VWeacnvbQ0J1OBSlH3N2v/wwrqpqbVE\nWCx8ljNXc/yExB5k6QPU9Kw31fTbD2lixu3pEZbS96JQYE3XLQ4/H5yJ3itm94br\n2zmAnhAiN5IAGjW60UfDXsJj+ZES5EyR1FHGv+z58fhUzZa+WlT7W+bIjaR1Y/76\nASlHqrboMGEZCVbvWCMOnSEH33mAJ2Jk9xt4/nQ6poeKpv5Y+9h+mCGFV383IZHy\npc86i9NLSqUibjffUf08HhnrKg+lsRMrmu4A3jjPY4xpID/tE3Br/AC+Z5EbtDEt\nukPdBJu6KDn3P33GLCUw2FBJErpNFCiHQ4vFkZqnrI2lrgizqSXH8gXFTLRjAVz6\nthwhbl7jp6dcdXChd7luZXMcEyqzU+ywRnyQfiXs52afHOjoR//CELt30PHD97mO\nNUW4nVaNrUdBnZ6GvlvtT58aAwdM3fOHUHdCg7OOW64GTZGGmOw=\n=n2ld\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d57789cc6a4004b26524a61483dc8dcea809484\nparent e054d0e532cdb587193952a629e94c669eff95f5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1502225193 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1512630833 -1000\n\n[Doc] Update bip.md, add support for BIP 159\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de74c625833bba8d8171a2d0dd6ede2e9d5da88b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e054d0e532cdb587193952a629e94c669eff95f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e054d0e532cdb587193952a629e94c669eff95f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e054d0e532cdb587193952a629e94c669eff95f5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fbff94a329a316417de4bd374c38f95f607d70ff",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de74c625833bba8d8171a2d0dd6ede2e9d5da88b/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de74c625833bba8d8171a2d0dd6ede2e9d5da88b/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
        "patch": "@@ -33,3 +33,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068)).\n+* [`BIP 159`](https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki): NODE_NETWORK_LIMITED service bit [signaling only] is supported as of **v0.16.0** ([PR 10740](https://github.com/bitcoin/bitcoin/pull/10740))."
      }
    ]
  },
  {
    "sha": "7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjMwYTFmZTlhNGM5YTM4YjQ3ZmUzODVhZmI4ZDhhMTkwMjg3MGQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T12:56:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T13:09:09Z"
      },
      "message": "Merge #11829: Test datadir specified in conf file exists\n\n529b866 Test datadir in conf file exists (MeshCollider)\n\nPull request description:\n\n  Provoked by Nick ODell's discovery here: https://bitcoin.stackexchange.com/questions/64189/when-running-bitcoind-i-keep-getting-boostfilesystemspace-operation-not-p/64210#64210\n\n  If a custom data directory is specified using `-datadir` argument, its existence is checked before the conf file is loaded. But if the conf file then specifies a different non-existent `datadir`, that isn't tested, and results in esoteric errors like:\n\n      EXCEPTION: N5boost10filesystem16filesystem_errorE\n      boost::filesystem::space: Operation not permitted\n\n  This just adds a check for the datadir existence at the end of `ReadConfigFile()`\n\nTree-SHA512: e488618c40aa356263f94040ae00aa4be98038abef66e8674b01032d22a5553a7fafcb8fe2d1f095865b39fb138c07b7a94415a00ef837573f92f95af065f712",
      "tree": {
        "sha": "b633d7f6d22c4ff597c25abe9a6cd3cd887c94e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b633d7f6d22c4ff597c25abe9a6cd3cd887c94e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaKT11AAoJEB5K7WKYbNJdE9oH/Rceaxy+mik6/+e4VgBuYFFz\n6aM3mQxWoiZdJCT1MeEDLK7aMrygZpQpeG+M5xpCtWocKbno9q5FOfjEgAe3mE2b\n6E5pc7GZq63tDK+93A8smGPNlu+PEFp13/s5HoZp+gjWGO2K44kxzvJeTFrtt8eS\nyIcydnVob09Ii2sg3OCLp24CS15wa1WK5Q5iOq0kvLbQ29MoYT7J6jqXFFfuLcXQ\nganMP1z9YUezpIiYiUH3Kcw5rgZ9jM3Cw6hsNeX7PIF0Ohz7GkVusadSETNZfRU/\nkMTIaQhGD4OZhV2RbiXwspy6lrsscI92qHDsvYtn9u9EkVVq6/8MB1JbKW2klmQ=\n=Frbj\n-----END PGP SIGNATURE-----",
        "payload": "tree b633d7f6d22c4ff597c25abe9a6cd3cd887c94e5\nparent 497d0e014cc79d46531d570e74e4aeae72db602d\nparent 529b8667599ad74f6dae639b889d22e907353070\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512651409 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512652149 +0100\n\nMerge #11829: Test datadir specified in conf file exists\n\n529b866 Test datadir in conf file exists (MeshCollider)\n\nPull request description:\n\n  Provoked by Nick ODell's discovery here: https://bitcoin.stackexchange.com/questions/64189/when-running-bitcoind-i-keep-getting-boostfilesystemspace-operation-not-p/64210#64210\n\n  If a custom data directory is specified using `-datadir` argument, its existence is checked before the conf file is loaded. But if the conf file then specifies a different non-existent `datadir`, that isn't tested, and results in esoteric errors like:\n\n      EXCEPTION: N5boost10filesystem16filesystem_errorE\n      boost::filesystem::space: Operation not permitted\n\n  This just adds a check for the datadir existence at the end of `ReadConfigFile()`\n\nTree-SHA512: e488618c40aa356263f94040ae00aa4be98038abef66e8674b01032d22a5553a7fafcb8fe2d1f095865b39fb138c07b7a94415a00ef837573f92f95af065f712\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "497d0e014cc79d46531d570e74e4aeae72db602d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/497d0e014cc79d46531d570e74e4aeae72db602d"
      },
      {
        "sha": "529b8667599ad74f6dae639b889d22e907353070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529b8667599ad74f6dae639b889d22e907353070",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/529b8667599ad74f6dae639b889d22e907353070"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1aa18c73b3bd8f263931720feff3373d4e7940d5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
        "patch": "@@ -639,6 +639,9 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n+    if (!fs::is_directory(GetDataDir(false))) {\n+        throw std::runtime_error(strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str()));\n+    }\n }\n \n #ifndef WIN32"
      }
    ]
  },
  {
    "sha": "1ec0c0a01c316146434642ab2f14a7367306dbec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWMwYzBhMDFjMzE2MTQ2NDM0NjQyYWIyZjE0YTczNjczMDZkYmVj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-12-07T14:57:53Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-12-07T15:06:38Z"
      },
      "message": "Make boost::multi_index comparators const\n\nThis fixes compatibility with boost 1.66",
      "tree": {
        "sha": "78f46d62f63666c09b7ffc6bc6717e699ee27636",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78f46d62f63666c09b7ffc6bc6717e699ee27636"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ec0c0a01c316146434642ab2f14a7367306dbec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec0c0a01c316146434642ab2f14a7367306dbec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec0c0a01c316146434642ab2f14a7367306dbec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec0c0a01c316146434642ab2f14a7367306dbec/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d81ec6421cb8195f50a16eeb4a783eebba6f406b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ec0c0a01c316146434642ab2f14a7367306dbec/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ec0c0a01c316146434642ab2f14a7367306dbec/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=1ec0c0a01c316146434642ab2f14a7367306dbec",
        "patch": "@@ -71,7 +71,7 @@ struct modifiedentry_iter {\n // except operating on CTxMemPoolModifiedEntry.\n // TODO: refactor to avoid duplication of this logic.\n struct CompareModifiedEntry {\n-    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b) const\n     {\n         double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n         double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n@@ -86,7 +86,7 @@ struct CompareModifiedEntry {\n // This is sufficient to sort an ancestor package in an order that is valid\n // to appear in a block.\n struct CompareTxIterByAncestorCount {\n-    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b) const\n     {\n         if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n             return a->GetCountWithAncestors() < b->GetCountWithAncestors();"
      },
      {
        "sha": "86a008d7b2113ece055741b1d5be95a67685340c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ec0c0a01c316146434642ab2f14a7367306dbec/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ec0c0a01c316146434642ab2f14a7367306dbec/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1ec0c0a01c316146434642ab2f14a7367306dbec",
        "patch": "@@ -204,7 +204,7 @@ struct mempoolentry_txid\n class CompareTxMemPoolEntryByDescendantScore\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         bool fUseADescendants = UseDescendantScore(a);\n         bool fUseBDescendants = UseDescendantScore(b);\n@@ -226,7 +226,7 @@ class CompareTxMemPoolEntryByDescendantScore\n     }\n \n     // Calculate which score to use for an entry (avoiding division).\n-    bool UseDescendantScore(const CTxMemPoolEntry &a)\n+    bool UseDescendantScore(const CTxMemPoolEntry &a) const\n     {\n         double f1 = (double)a.GetModifiedFee() * a.GetSizeWithDescendants();\n         double f2 = (double)a.GetModFeesWithDescendants() * a.GetTxSize();\n@@ -241,7 +241,7 @@ class CompareTxMemPoolEntryByDescendantScore\n class CompareTxMemPoolEntryByScore\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n         double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n@@ -255,7 +255,7 @@ class CompareTxMemPoolEntryByScore\n class CompareTxMemPoolEntryByEntryTime\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         return a.GetTime() < b.GetTime();\n     }\n@@ -264,7 +264,7 @@ class CompareTxMemPoolEntryByEntryTime\n class CompareTxMemPoolEntryByAncestorFee\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         double aFees = a.GetModFeesWithAncestors();\n         double aSize = a.GetSizeWithAncestors();"
      }
    ]
  },
  {
    "sha": "f05d34988719b22ef5c64888f90b4c8f3a2c7931",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDVkMzQ5ODg3MTliMjJlZjVjNjQ4ODhmOTBiNGM4ZjNhMmM3OTMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T11:08:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T16:34:16Z"
      },
      "message": "gui: Fix proxy setting options dialog crash\n\nThis fixes a crash bug when opening the options dialog.\n\n- Check the return value of split() to avoid segmentation faults due to\n  out of bounds when the user manages to enter invalid proxy settings.\n  This is reported resonably often.\n\n- Move the default proxy/port to a constant instead of hardcoding magic\n  values.\n\n- Factor out some common code.\n\n- Revert #11448 because this proves a more robust replacement, it is no\n  longer necessary and didn't generally solve the issue.\n\nNo attempt is made to do full sanity checking on the proxy, so it can\nstill be rejected by the core with an InitError message.",
      "tree": {
        "sha": "caf39100cf1aa4cf7c1447908c5d6fd429c8ea70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf39100cf1aa4cf7c1447908c5d6fd429c8ea70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16fff802574159286e424802442551dc9eba9098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16fff802574159286e424802442551dc9eba9098"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 61,
      "deletions": 53
    },
    "files": [
      {
        "sha": "a0f78d5ead3aa41d2477acf96897ead77c92ac37",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "patch": "@@ -338,7 +338,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), 9050));\n+    CService serv(LookupNumeric(input.toStdString().c_str(), DEFAULT_GUI_PROXY_PORT));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "52b4d4e42e531604bd3f8cbbbcc08d4129423a93",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 52,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "patch": "@@ -28,6 +28,8 @@\n #include <QSettings>\n #include <QStringList>\n \n+const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n+\n OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n     QAbstractListModel(parent)\n {\n@@ -124,8 +126,8 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\") || !settings.value(\"addrProxy\").toString().contains(':'))\n-        settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n+    if (!settings.contains(\"addrProxy\"))\n+        settings.setValue(\"addrProxy\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n@@ -134,8 +136,8 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseSeparateProxyTor\"))\n         settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\") || !settings.value(\"addrSeparateProxyTor\").toString().contains(':'))\n-        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n     if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n         addOverriddenOption(\"-onion\");\n@@ -200,6 +202,33 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n+struct ProxySetting {\n+    bool is_set;\n+    QString ip;\n+    QString port;\n+};\n+\n+static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+{\n+    static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n+    // Handle the case that the setting is not set at all\n+    if (!settings.contains(name)) {\n+        return default_val;\n+    }\n+    // contains IP at index 0 and port at index 1\n+    QStringList ip_port = settings.value(name).toString().split(\":\", QString::SkipEmptyParts);\n+    if (ip_port.size() == 2) {\n+        return {true, ip_port.at(0), ip_port.at(1)};\n+    } else { // Invalid: return default\n+        return default_val;\n+    }\n+}\n+\n+static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+{\n+    settings.setValue(name, ip_port.ip + \":\" + ip_port.port);\n+}\n+\n // read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n@@ -226,30 +255,18 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n         // default proxy\n         case ProxyUse:\n             return settings.value(\"fUseProxy\", false);\n-        case ProxyIP: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(0);\n-        }\n-        case ProxyPort: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(1);\n-        }\n+        case ProxyIP:\n+            return GetProxySetting(settings, \"addrProxy\").ip;\n+        case ProxyPort:\n+            return GetProxySetting(settings, \"addrProxy\").port;\n \n         // separate Tor proxy\n         case ProxyUseTor:\n             return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(0);\n-        }\n-        case ProxyPortTor: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(1);\n-        }\n+        case ProxyIPTor:\n+            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n+        case ProxyPortTor:\n+            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n \n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n@@ -314,25 +331,19 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case ProxyIP: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed IP\n-            if (!settings.contains(\"addrProxy\") || strlIpPort.at(0) != value.toString()) {\n-                // construct new value from new IP and current port\n-                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n-                settings.setValue(\"addrProxy\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n+            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n+                ip_port.ip = value.toString();\n+                SetProxySetting(settings, \"addrProxy\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n         break;\n         case ProxyPort: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed port\n-            if (!settings.contains(\"addrProxy\") || strlIpPort.at(1) != value.toString()) {\n-                // construct new value from current IP and new port\n-                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n-                settings.setValue(\"addrProxy\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n+            if (!ip_port.is_set || ip_port.port != value.toString()) {\n+                ip_port.port = value.toString();\n+                SetProxySetting(settings, \"addrProxy\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n@@ -346,25 +357,19 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case ProxyIPTor: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed IP\n-            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n-                // construct new value from new IP and current port\n-                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n-                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n+            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n+                ip_port.ip = value.toString();\n+                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n         break;\n         case ProxyPortTor: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed port\n-            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n-                // construct new value from current IP and new port\n-                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n-                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n+            if (!ip_port.is_set || ip_port.port != value.toString()) {\n+                ip_port.port = value.toString();\n+                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n                 setRestartRequired(true);\n             }\n         }"
      },
      {
        "sha": "f8782dd204e5d8f054fd16cf4b2bb1add02c4389",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "patch": "@@ -13,6 +13,9 @@ QT_BEGIN_NAMESPACE\n class QNetworkProxy;\n QT_END_NAMESPACE\n \n+extern const char *DEFAULT_GUI_PROXY_HOST;\n+static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n+\n /** Interface from Qt to configuration data structure for Bitcoin client.\n    To Qt, the options are presented as a list with the different options\n    laid out vertically."
      }
    ]
  },
  {
    "sha": "3e500241200282eb475709e9e85c54ebcc92eaf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTUwMDI0MTIwMDI4MmViNDc1NzA5ZTllODVjNTRlYmNjOTJlYWY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T16:36:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T16:37:32Z"
      },
      "message": "Merge #11838: qa: Add getrawtransaction in_active_chain=False test\n\nfa4c16d qa: Add getrawtransaction in_active_chain=False test (MarcoFalke)\n\nPull request description:\n\n  #10275 accidentally forgot to add a test for `in_active_chain==False`.\n\n  This adds a test and also removes the special casing of `blockhash.IsNull()`, which makes no sense imo.\n\nTree-SHA512: 6c51295820b3dcd53b0b48020ab2b8c8f5864cd5061ddab2b35d35d643eb3e60ef95ff20c06c985a2e47f7080e82f27f3e00ee61c85dce627776d5ea6febee8f",
      "tree": {
        "sha": "1b90767226efbd97bed63845398fdbdb94db494f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b90767226efbd97bed63845398fdbdb94db494f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e500241200282eb475709e9e85c54ebcc92eaf5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaKW5MAAoJEB5K7WKYbNJdSWsIAIpfFvqT8gQF2prQi4H0uQ4Y\nc8kMepybd/1XD6+w197urHwNHwu22rkmoLkU0sh5tzTs1Vbot1qdCP6sr60wMwgj\npY72qlnodytrMHfeNUChJVCIXAeAT2dE2vnVkAhmMsN8SR0hLIHSp4vSW6vnmly+\ngs3Rg9GgPSvgwloJA7iNL3mD02mpibI4XLBZuNpfvQElquYVH23kXZVg0ZnDKsz2\nmuq3aQ1bQr3BZ3uMWDBjOy1IEUPZLNyllqzgBc6ZSKBR8YXV0K/PO+AgeXy6Qagf\n/BkWBm1d/yjlE+53URNo7uVLG1KcgAASKJhjIFCOI1SwEXoLje2OgHA8KuEE+KU=\n=39aW\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b90767226efbd97bed63845398fdbdb94db494f\nparent 7630a1fe9a4c9a38b47fe385afb8d8a1902870d6\nparent fa4c16d2e72a8ec1032da49a68c9913c2595dbfe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512664606 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512664652 +0100\n\nMerge #11838: qa: Add getrawtransaction in_active_chain=False test\n\nfa4c16d qa: Add getrawtransaction in_active_chain=False test (MarcoFalke)\n\nPull request description:\n\n  #10275 accidentally forgot to add a test for `in_active_chain==False`.\n\n  This adds a test and also removes the special casing of `blockhash.IsNull()`, which makes no sense imo.\n\nTree-SHA512: 6c51295820b3dcd53b0b48020ab2b8c8f5864cd5061ddab2b35d35d643eb3e60ef95ff20c06c985a2e47f7080e82f27f3e00ee61c85dce627776d5ea6febee8f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e500241200282eb475709e9e85c54ebcc92eaf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e500241200282eb475709e9e85c54ebcc92eaf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e500241200282eb475709e9e85c54ebcc92eaf5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6"
      },
      {
        "sha": "fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "018c25532504b648e2969223d51170b4c40a210a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e500241200282eb475709e9e85c54ebcc92eaf5/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e500241200282eb475709e9e85c54ebcc92eaf5/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3e500241200282eb475709e9e85c54ebcc92eaf5",
        "patch": "@@ -155,14 +155,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     if (!request.params[2].isNull()) {\n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        if (!blockhash.IsNull()) {\n-            BlockMap::iterator it = mapBlockIndex.find(blockhash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n-            }\n-            blockindex = it->second;\n-            in_active_chain = chainActive.Contains(blockindex);\n+        BlockMap::iterator it = mapBlockIndex.find(blockhash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n+        blockindex = it->second;\n+        in_active_chain = chainActive.Contains(blockindex);\n     }\n \n     CTransactionRef tx;"
      },
      {
        "sha": "79f2a2834ea966b92469d11e7e9a56f52f3fd301",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e500241200282eb475709e9e85c54ebcc92eaf5/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e500241200282eb475709e9e85c54ebcc92eaf5/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=3e500241200282eb475709e9e85c54ebcc92eaf5",
        "patch": "@@ -72,7 +72,13 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n         assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n         assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n+        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        # Undo the blocks and check in_active_chain\n+        self.nodes[0].invalidateblock(block1)\n+        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n+        assert_equal(gottx['in_active_chain'], False)\n+        self.nodes[0].reconsiderblock(block1)\n+        assert_equal(self.nodes[0].getbestblockhash(), block2)\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -212,13 +218,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      }
    ]
  },
  {
    "sha": "80f9dad0b79973355623fc075f82f80d6271540c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGY5ZGFkMGI3OTk3MzM1NTYyM2ZjMDc1ZjgyZjgwZDYyNzE1NDBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T16:40:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T16:40:11Z"
      },
      "message": "Merge #11809: gui: Fix proxy setting options dialog crash\n\nf05d349 gui: Fix proxy setting options dialog crash (Wladimir J. van der Laan)\n\nPull request description:\n\n  This fixes a crash bug when opening the options dialog.\n\n  - Check the return value of split() to avoid segmentation faults due to   out of bounds when the user manages to enter invalid proxy settings.  This is reported resonably often.\n\n  - Move the default proxy/port to a constant instead of hardcoding magic values.\n\n  - Factor out some common code.\n\n  - Revert #11448 because this proves a more robust replacement, it is no longer necessary and didn't generally solve the issue.\n\n  No attempt is made to do full sanity checking on the proxy, so it can still be rejected by the core with an InitError message.\n\nTree-SHA512: 72b700b7d6c4d3e3410f0c60e9e4facf93d7c6c1a1b6b23957c48b074a045970f518166952859d1ebca8620062cb70d222670a7310bbd6fe50550ec6d04417b5",
      "tree": {
        "sha": "a519717941a26224f9c1cb0f191f32661c78321b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a519717941a26224f9c1cb0f191f32661c78321b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80f9dad0b79973355623fc075f82f80d6271540c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaKW7rAAoJEB5K7WKYbNJd/k4IALyvJKuFGnGZeQsOjNXFDYpm\n9ZQMswp3tLs64teRgbWNiP/5VkFqUIM2i8xJEFh0p5MxkDGFdTP0EG03LDewVYoL\n3oD4EfqyEVIDvHMHALtZJ+jRcAwD12G3GZhvwFpHwmgddlGXOJzU9/9tIA1AdYM3\n3VEyybJJ6I5ZflU300JmgYx29rkYzgAiK2nrD0eJX/uNV94BIt9eAkPvKxufCASL\nodQDf8AcBprCzhf4gIulKM04Q/gsSWAn0sYPT3I21zeGtf0fceCol8UgRgO+bS6b\n04dt8ohwa7F0IPG60BA8v3/SzDkKVOjDqY+fgxdcl2hgf+teGO1SlHOUjbCKAUg=\n=LZTl\n-----END PGP SIGNATURE-----",
        "payload": "tree a519717941a26224f9c1cb0f191f32661c78321b\nparent 3e500241200282eb475709e9e85c54ebcc92eaf5\nparent f05d34988719b22ef5c64888f90b4c8f3a2c7931\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512664801 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512664811 +0100\n\nMerge #11809: gui: Fix proxy setting options dialog crash\n\nf05d349 gui: Fix proxy setting options dialog crash (Wladimir J. van der Laan)\n\nPull request description:\n\n  This fixes a crash bug when opening the options dialog.\n\n  - Check the return value of split() to avoid segmentation faults due to   out of bounds when the user manages to enter invalid proxy settings.  This is reported resonably often.\n\n  - Move the default proxy/port to a constant instead of hardcoding magic values.\n\n  - Factor out some common code.\n\n  - Revert #11448 because this proves a more robust replacement, it is no longer necessary and didn't generally solve the issue.\n\n  No attempt is made to do full sanity checking on the proxy, so it can still be rejected by the core with an InitError message.\n\nTree-SHA512: 72b700b7d6c4d3e3410f0c60e9e4facf93d7c6c1a1b6b23957c48b074a045970f518166952859d1ebca8620062cb70d222670a7310bbd6fe50550ec6d04417b5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f9dad0b79973355623fc075f82f80d6271540c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80f9dad0b79973355623fc075f82f80d6271540c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f9dad0b79973355623fc075f82f80d6271540c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e500241200282eb475709e9e85c54ebcc92eaf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e500241200282eb475709e9e85c54ebcc92eaf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e500241200282eb475709e9e85c54ebcc92eaf5"
      },
      {
        "sha": "f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f05d34988719b22ef5c64888f90b4c8f3a2c7931"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 61,
      "deletions": 53
    },
    "files": [
      {
        "sha": "a0f78d5ead3aa41d2477acf96897ead77c92ac37",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f9dad0b79973355623fc075f82f80d6271540c/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f9dad0b79973355623fc075f82f80d6271540c/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=80f9dad0b79973355623fc075f82f80d6271540c",
        "patch": "@@ -338,7 +338,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), 9050));\n+    CService serv(LookupNumeric(input.toStdString().c_str(), DEFAULT_GUI_PROXY_PORT));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "52b4d4e42e531604bd3f8cbbbcc08d4129423a93",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 52,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f9dad0b79973355623fc075f82f80d6271540c/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f9dad0b79973355623fc075f82f80d6271540c/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=80f9dad0b79973355623fc075f82f80d6271540c",
        "patch": "@@ -28,6 +28,8 @@\n #include <QSettings>\n #include <QStringList>\n \n+const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n+\n OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n     QAbstractListModel(parent)\n {\n@@ -124,8 +126,8 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\") || !settings.value(\"addrProxy\").toString().contains(':'))\n-        settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n+    if (!settings.contains(\"addrProxy\"))\n+        settings.setValue(\"addrProxy\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n@@ -134,8 +136,8 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseSeparateProxyTor\"))\n         settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\") || !settings.value(\"addrSeparateProxyTor\").toString().contains(':'))\n-        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n     if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n         addOverriddenOption(\"-onion\");\n@@ -200,6 +202,33 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n+struct ProxySetting {\n+    bool is_set;\n+    QString ip;\n+    QString port;\n+};\n+\n+static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+{\n+    static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n+    // Handle the case that the setting is not set at all\n+    if (!settings.contains(name)) {\n+        return default_val;\n+    }\n+    // contains IP at index 0 and port at index 1\n+    QStringList ip_port = settings.value(name).toString().split(\":\", QString::SkipEmptyParts);\n+    if (ip_port.size() == 2) {\n+        return {true, ip_port.at(0), ip_port.at(1)};\n+    } else { // Invalid: return default\n+        return default_val;\n+    }\n+}\n+\n+static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+{\n+    settings.setValue(name, ip_port.ip + \":\" + ip_port.port);\n+}\n+\n // read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n@@ -226,30 +255,18 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n         // default proxy\n         case ProxyUse:\n             return settings.value(\"fUseProxy\", false);\n-        case ProxyIP: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(0);\n-        }\n-        case ProxyPort: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(1);\n-        }\n+        case ProxyIP:\n+            return GetProxySetting(settings, \"addrProxy\").ip;\n+        case ProxyPort:\n+            return GetProxySetting(settings, \"addrProxy\").port;\n \n         // separate Tor proxy\n         case ProxyUseTor:\n             return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(0);\n-        }\n-        case ProxyPortTor: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(1);\n-        }\n+        case ProxyIPTor:\n+            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n+        case ProxyPortTor:\n+            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n \n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n@@ -314,25 +331,19 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case ProxyIP: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed IP\n-            if (!settings.contains(\"addrProxy\") || strlIpPort.at(0) != value.toString()) {\n-                // construct new value from new IP and current port\n-                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n-                settings.setValue(\"addrProxy\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n+            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n+                ip_port.ip = value.toString();\n+                SetProxySetting(settings, \"addrProxy\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n         break;\n         case ProxyPort: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed port\n-            if (!settings.contains(\"addrProxy\") || strlIpPort.at(1) != value.toString()) {\n-                // construct new value from current IP and new port\n-                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n-                settings.setValue(\"addrProxy\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n+            if (!ip_port.is_set || ip_port.port != value.toString()) {\n+                ip_port.port = value.toString();\n+                SetProxySetting(settings, \"addrProxy\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n@@ -346,25 +357,19 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case ProxyIPTor: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed IP\n-            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n-                // construct new value from new IP and current port\n-                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n-                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n+            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n+                ip_port.ip = value.toString();\n+                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n         break;\n         case ProxyPortTor: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed port\n-            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n-                // construct new value from current IP and new port\n-                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n-                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n+            if (!ip_port.is_set || ip_port.port != value.toString()) {\n+                ip_port.port = value.toString();\n+                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n                 setRestartRequired(true);\n             }\n         }"
      },
      {
        "sha": "f8782dd204e5d8f054fd16cf4b2bb1add02c4389",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f9dad0b79973355623fc075f82f80d6271540c/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f9dad0b79973355623fc075f82f80d6271540c/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=80f9dad0b79973355623fc075f82f80d6271540c",
        "patch": "@@ -13,6 +13,9 @@ QT_BEGIN_NAMESPACE\n class QNetworkProxy;\n QT_END_NAMESPACE\n \n+extern const char *DEFAULT_GUI_PROXY_HOST;\n+static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n+\n /** Interface from Qt to configuration data structure for Bitcoin client.\n    To Qt, the options are presented as a list with the different options\n    laid out vertically."
      }
    ]
  },
  {
    "sha": "4ef4dfebbc07d93d72899f60e01ca77a280c9122",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWY0ZGZlYmJjMDdkOTNkNzI4OTlmNjBlMDFjYTc3YTI4MGM5MTIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T17:01:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T17:37:43Z"
      },
      "message": "Merge #11847: Make boost::multi_index comparators const\n\n1ec0c0a Make boost::multi_index comparators const (Suhas Daftuar)\n\nPull request description:\n\n  This fixes compatibility with boost 1.66.\n\n  Fixes #11837\n\nTree-SHA512: 3181336fcc159aa7ee70c843d76f2a063e4a401f427c218d7f856a3548ca70eaf8eee9d20abb73be259a5656273d3a65aa748e946e09cf656de5f50e6d4eb880",
      "tree": {
        "sha": "b2d834e41ac586d51f577b334c43a452b0983e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2d834e41ac586d51f577b334c43a452b0983e9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaKXxnAAoJEB5K7WKYbNJdPJ0IAKXk0KMdYEN7KXbf60FbR9hN\nzONHa9Kb4tFRImxbq5hE/lOM4+5q90vYhNU69BI86XsN1DCqOVUCsYIQfeNYf/jn\nWv1N3WMyoXbOD/U+fBM/NwmViZh1h8d9WQOqkjuIeb1XsyKTkRRqYSSp6o5N1dEN\npySpUTm4My2P+JoauHD5WaMVtX8r6eVV9iN7O8BVb21+Tjl1wwuO5IZjYRTU+pIm\n4ide1TUVQv89GMgNbwBDye+6i+iQfPaC0+Ta6m2bfC/ta8TLkBxogN409oSKU90L\nbH8o1umnw9OivhF+qFd5Uija9e5wnu/G/KE742P+DgP7KJMnMjS487x+S8CEfbA=\n=2sAI\n-----END PGP SIGNATURE-----",
        "payload": "tree b2d834e41ac586d51f577b334c43a452b0983e9e\nparent 80f9dad0b79973355623fc075f82f80d6271540c\nparent 1ec0c0a01c316146434642ab2f14a7367306dbec\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512666082 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512668263 +0100\n\nMerge #11847: Make boost::multi_index comparators const\n\n1ec0c0a Make boost::multi_index comparators const (Suhas Daftuar)\n\nPull request description:\n\n  This fixes compatibility with boost 1.66.\n\n  Fixes #11837\n\nTree-SHA512: 3181336fcc159aa7ee70c843d76f2a063e4a401f427c218d7f856a3548ca70eaf8eee9d20abb73be259a5656273d3a65aa748e946e09cf656de5f50e6d4eb880\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef4dfebbc07d93d72899f60e01ca77a280c9122",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80f9dad0b79973355623fc075f82f80d6271540c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f9dad0b79973355623fc075f82f80d6271540c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80f9dad0b79973355623fc075f82f80d6271540c"
      },
      {
        "sha": "1ec0c0a01c316146434642ab2f14a7367306dbec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec0c0a01c316146434642ab2f14a7367306dbec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec0c0a01c316146434642ab2f14a7367306dbec"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d81ec6421cb8195f50a16eeb4a783eebba6f406b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ef4dfebbc07d93d72899f60e01ca77a280c9122/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ef4dfebbc07d93d72899f60e01ca77a280c9122/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "patch": "@@ -71,7 +71,7 @@ struct modifiedentry_iter {\n // except operating on CTxMemPoolModifiedEntry.\n // TODO: refactor to avoid duplication of this logic.\n struct CompareModifiedEntry {\n-    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b) const\n     {\n         double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n         double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n@@ -86,7 +86,7 @@ struct CompareModifiedEntry {\n // This is sufficient to sort an ancestor package in an order that is valid\n // to appear in a block.\n struct CompareTxIterByAncestorCount {\n-    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b) const\n     {\n         if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n             return a->GetCountWithAncestors() < b->GetCountWithAncestors();"
      },
      {
        "sha": "86a008d7b2113ece055741b1d5be95a67685340c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ef4dfebbc07d93d72899f60e01ca77a280c9122/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ef4dfebbc07d93d72899f60e01ca77a280c9122/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "patch": "@@ -204,7 +204,7 @@ struct mempoolentry_txid\n class CompareTxMemPoolEntryByDescendantScore\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         bool fUseADescendants = UseDescendantScore(a);\n         bool fUseBDescendants = UseDescendantScore(b);\n@@ -226,7 +226,7 @@ class CompareTxMemPoolEntryByDescendantScore\n     }\n \n     // Calculate which score to use for an entry (avoiding division).\n-    bool UseDescendantScore(const CTxMemPoolEntry &a)\n+    bool UseDescendantScore(const CTxMemPoolEntry &a) const\n     {\n         double f1 = (double)a.GetModifiedFee() * a.GetSizeWithDescendants();\n         double f2 = (double)a.GetModFeesWithDescendants() * a.GetTxSize();\n@@ -241,7 +241,7 @@ class CompareTxMemPoolEntryByDescendantScore\n class CompareTxMemPoolEntryByScore\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n         double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n@@ -255,7 +255,7 @@ class CompareTxMemPoolEntryByScore\n class CompareTxMemPoolEntryByEntryTime\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         return a.GetTime() < b.GetTime();\n     }\n@@ -264,7 +264,7 @@ class CompareTxMemPoolEntryByEntryTime\n class CompareTxMemPoolEntryByAncestorFee\n {\n public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n         double aFees = a.GetModFeesWithAncestors();\n         double aSize = a.GetSizeWithAncestors();"
      }
    ]
  },
  {
    "sha": "9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzhlY2E3NzA0ZTg4YjNmNGVlMzhjZjg1YmVmMGYxZmViYzQ0MGU1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-08T17:50:46Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-08T17:50:46Z"
      },
      "message": "Split up key and script metadata for better type safety\n\nSuggested by Matt Corallo <git@bluematt.me>\nhttps://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383\n\nCombining the maps was probably never a good arrangement but is more\nproblematic now in presence of WitnessV0ScriptHash and WitnessV0KeyHash types.",
      "tree": {
        "sha": "65a5fb461a02112b1e167e3ecfa522cffcdc4414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65a5fb461a02112b1e167e3ecfa522cffcdc4414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef4dfebbc07d93d72899f60e01ca77a280c9122"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 48,
      "deletions": 34
    },
    "files": [
      {
        "sha": "327af2e237347303231e18dcf7bdfadfcb13e373",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -187,17 +187,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n         }\n         if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n+            const CKeyMetadata* meta = nullptr;\n+            if (const CKeyID* key_id = boost::get<CKeyID>(&dest)) {\n+                auto it = pwallet->mapKeyMetadata.find(*key_id);\n+                if (it != pwallet->mapKeyMetadata.end()) {\n+                    meta = &it->second;\n+                }\n+            }\n+            if (!meta) {\n+                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+                if (it != pwallet->m_script_metadata.end()) {\n+                    meta = &it->second;\n+                }\n             }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+            if (meta) {\n+                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                if (!meta->hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n                 }\n             }\n         }"
      },
      {
        "sha": "ed1d67b6f652e90dd244ba2a4b2100a19d2074ad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -284,14 +284,22 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n+bool CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n+{\n+    AssertLockHeld(cs_wallet); // m_script_metadata\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    m_script_metadata[script_id] = meta;\n+    return true;\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n@@ -340,15 +348,15 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     return CWalletDB(*dbw).WriteWatchOnly(dest, meta);\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n {\n-    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n     return AddWatchOnly(dest);\n }\n "
      },
      {
        "sha": "93d1857c7fbea62e9a76157a7ef196687febf8b3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -761,9 +761,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n-    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n-    // key metadata.\n-    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -874,7 +876,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);"
      },
      {
        "sha": "efc50f72ebd6776dcbfa3da8d89bb084d72f9c73",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -423,27 +423,23 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n+        else if (strType == \"keymeta\")\n         {\n-            CTxDestination keyID;\n-            if (strType == \"keymeta\")\n-            {\n-              CPubKey vchPubKey;\n-              ssKey >> vchPubKey;\n-              keyID = vchPubKey.GetID();\n-            }\n-            else if (strType == \"watchmeta\")\n-            {\n-              CScript script;\n-              ssKey >> script;\n-              keyID = CScriptID(script);\n-            }\n-\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-\n-            pwallet->LoadKeyMetadata(keyID, keyMeta);\n+            pwallet->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+        }\n+        else if (strType == \"watchmeta\")\n+        {\n+            CScript script;\n+            ssKey >> script;\n+            CKeyMetadata keyMeta;\n+            ssValue >> keyMeta;\n+            wss.nKeyMeta++;\n+            pwallet->LoadScriptMetadata(CScriptID(script), keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {"
      }
    ]
  },
  {
    "sha": "59d3dc85b698430f71f6e242a01a25a70c9ef397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWQzZGM4NWI2OTg0MzBmNzFmNmUyNDJhMDFhMjVhNzBjOWVmMzk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-09T07:34:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-09T07:38:36Z"
      },
      "message": "Merge #11740: Implement BIP159 NODE_NETWORK_LIMITED (pruned peers) *signaling only*\n\nde74c62 [Doc] Update bip.md, add support for BIP 159 (Jonas Schnelli)\ne054d0e [QA] Add node_network_limited test (Jonas Schnelli)\nbd09416 Avoid leaking the prune height through getdata (fingerprinting countermeasure) (Jonas Schnelli)\n27df193 Always set NODE_NETWORK_LIMITED bit (Jonas Schnelli)\n7caba38 Add NODE_NETWORK_LIMITED flags and min block amount constants (Jonas Schnelli)\n\nPull request description:\n\n  Extracted from #10387.\n  Does implement BIP159, but only the signalling part. No connections are made to NODE_NETWORK_LIMITED in this PR.\n\n  The address relay and connection work (the more complicated part) can then be separated (probably in #10387).\n\nTree-SHA512: e3218eb4789a9320b0f42dc10f62d30c13c49bdef00443fbe653bee22933477adcfc1cf8f6a95269324560b5721203ed41f3c5e2dd8a98ec2791f6a9d8346b1a",
      "tree": {
        "sha": "08eb79fa9aee4696ba556deddc2fb3bf1fb43f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08eb79fa9aee4696ba556deddc2fb3bf1fb43f1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59d3dc85b698430f71f6e242a01a25a70c9ef397",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaK5L8AAoJEB5K7WKYbNJdgpoH/3OG6Xx22GKaa4kjGDFfNXEJ\nXW+oBzCSs2Qn6kiEfGRF77+TshfgLpTB7maRYKOrj1C3u4G3yIzIrAJik3NSPPeB\nDI+dDqxJX/Rz0yF2rDBSm1GtTmkz0RcgZt/Or2mWN7eZb5RoCiVvVmSbrcowi/W9\n/OdWI1Ob5WDyWi9P21RmCiSeAhg7pFJHgDMS4C87l+StbD4jEXg92NEncZTRVXB1\nf8D8eeTq/Hg9lm/Czc0PBwyEfH2mOpAHEucxihWHgLyup4pEQRzkv/rZKAb/JyyV\nLtcJ3KUbb2UyAPBPnraDFk1bmfmzhtKtxaLhHLMrNUQrje8cSorCV5LlgESm7VE=\n=m4jd\n-----END PGP SIGNATURE-----",
        "payload": "tree 08eb79fa9aee4696ba556deddc2fb3bf1fb43f1d\nparent 4ef4dfebbc07d93d72899f60e01ca77a280c9122\nparent de74c625833bba8d8171a2d0dd6ede2e9d5da88b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1512804871 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1512805116 +0100\n\nMerge #11740: Implement BIP159 NODE_NETWORK_LIMITED (pruned peers) *signaling only*\n\nde74c62 [Doc] Update bip.md, add support for BIP 159 (Jonas Schnelli)\ne054d0e [QA] Add node_network_limited test (Jonas Schnelli)\nbd09416 Avoid leaking the prune height through getdata (fingerprinting countermeasure) (Jonas Schnelli)\n27df193 Always set NODE_NETWORK_LIMITED bit (Jonas Schnelli)\n7caba38 Add NODE_NETWORK_LIMITED flags and min block amount constants (Jonas Schnelli)\n\nPull request description:\n\n  Extracted from #10387.\n  Does implement BIP159, but only the signalling part. No connections are made to NODE_NETWORK_LIMITED in this PR.\n\n  The address relay and connection work (the more complicated part) can then be separated (probably in #10387).\n\nTree-SHA512: e3218eb4789a9320b0f42dc10f62d30c13c49bdef00443fbe653bee22933477adcfc1cf8f6a95269324560b5721203ed41f3c5e2dd8a98ec2791f6a9d8346b1a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d3dc85b698430f71f6e242a01a25a70c9ef397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59d3dc85b698430f71f6e242a01a25a70c9ef397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d3dc85b698430f71f6e242a01a25a70c9ef397/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef4dfebbc07d93d72899f60e01ca77a280c9122"
      },
      {
        "sha": "de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de74c625833bba8d8171a2d0dd6ede2e9d5da88b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de74c625833bba8d8171a2d0dd6ede2e9d5da88b"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 102,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fbff94a329a316417de4bd374c38f95f607d70ff",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -33,3 +33,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068)).\n+* [`BIP 159`](https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki): NODE_NETWORK_LIMITED service bit [signaling only] is supported as of **v0.16.0** ([PR 10740](https://github.com/bitcoin/bitcoin/pull/10740))."
      },
      {
        "sha": "67e01c9ba9ec55fdec41bd32b5b5276c22164a3a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -816,7 +816,7 @@ namespace { // Variables internal to initialization process only\n int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n-ServiceFlags nLocalServices = NODE_NETWORK;\n+ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n \n } // namespace\n "
      },
      {
        "sha": "85e6d9c73dae6cf4bbfdd8153797b6207d79f263",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -1091,6 +1091,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     pfrom->fDisconnect = true;\n                     send = false;\n                 }\n+                // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n+                if (send && !pfrom->fWhitelisted && (\n+                        (((pfrom->GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom->GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (chainActive.Tip()->nHeight - mi->second->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n+                   )) {\n+                    LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom->GetId());\n+\n+                    //disconnect node and prevent it from stalling (would otherwise wait for the missing block)\n+                    pfrom->fDisconnect = true;\n+                    send = false;\n+                }\n                 // Pruned nodes may have deleted the block, so check whether\n                 // it's available before trying to send.\n                 if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))"
      },
      {
        "sha": "cf1d40db7765aeab7d92e8f2da0ddd72b60ed206",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -246,9 +246,8 @@ const std::vector<std::string> &getAllNetMessageTypes();\n enum ServiceFlags : uint64_t {\n     // Nothing\n     NODE_NONE = 0,\n-    // NODE_NETWORK means that the node is capable of serving the block chain. It is currently\n-    // set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want\n-    // network services but don't provide them.\n+    // NODE_NETWORK means that the node is capable of serving the complete block chain. It is currently\n+    // set by all Bitcoin Core non pruned nodes, and is unset by SPV clients or other light clients.\n     NODE_NETWORK = (1 << 0),\n     // NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.\n     // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n@@ -264,6 +263,10 @@ enum ServiceFlags : uint64_t {\n     // NODE_XTHIN means the node supports Xtreme Thinblocks\n     // If this is turned off then the node will not service nor make xthin requests\n     NODE_XTHIN = (1 << 4),\n+    // NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only\n+    // serving the last 288 (2 day) blocks\n+    // See BIP159 for details on how this is implemented.\n+    NODE_NETWORK_LIMITED = (1 << 10),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "49bff9f30c344323e0eb7029eb0db8de27ce9a76",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -203,6 +203,8 @@ extern bool fPruneMode;\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n+static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n \n static const signed int DEFAULT_CHECKBLOCKS = 6;\n static const unsigned int DEFAULT_CHECKLEVEL = 3;"
      },
      {
        "sha": "6d1bf7ced284b9b0621991566d93bbc1bb2f1e3d",
        "filename": "test/functional/node_network_limited.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import *\n+\n+class BaseNode(P2PInterface):\n+    nServices = 0\n+    firstAddrnServices = 0\n+    def on_version(self, message):\n+        self.nServices = message.nServices\n+\n+class NodeNetworkLimitedTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-prune=550']]\n+\n+    def getSignaledServiceFlags(self):\n+        node = self.nodes[0].add_p2p_connection(BaseNode())\n+        NetworkThread().start()\n+        node.wait_for_verack()\n+        services = node.nServices\n+        self.nodes[0].disconnect_p2ps()\n+        node.wait_for_disconnect()\n+        return services\n+\n+    def tryGetBlockViaGetData(self, blockhash, must_disconnect):\n+        node = self.nodes[0].add_p2p_connection(BaseNode())\n+        NetworkThread().start()\n+        node.wait_for_verack()\n+        node.send_message(msg_verack())\n+        getdata_request = msg_getdata()\n+        getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n+        node.send_message(getdata_request)\n+\n+        if (must_disconnect):\n+            #ensure we get disconnected\n+            node.wait_for_disconnect(5)\n+        else:\n+            # check if the peer sends us the requested block\n+            node.wait_for_block(int(blockhash, 16), 3)\n+            self.nodes[0].disconnect_p2ps()\n+            node.wait_for_disconnect()\n+\n+    def run_test(self):\n+        #NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n+        assert_equal(self.getSignaledServiceFlags(), 1036) #1036 == 0x40C == 0100 0000 1100\n+#                                                                              |        ||\n+#                                                                              |        |^--- NODE_BLOOM\n+#                                                                              |        ^---- NODE_WITNESS\n+#                                                                              ^-- NODE_NETWORK_LIMITED\n+\n+        #now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n+        firstblock = self.nodes[0].generate(1)[0]\n+        blocks = self.nodes[0].generate(292)\n+        blockWithinLimitedRange = blocks[-1]\n+\n+        #make sure we can max retrive block at tip-288\n+        #requesting block at height 2 (tip-289) must fail (ignored)\n+        self.tryGetBlockViaGetData(firstblock, True) #first block must lead to disconnect\n+        self.tryGetBlockViaGetData(blocks[1], False) #last block in valid range\n+        self.tryGetBlockViaGetData(blocks[0], True) #first block outside of the 288+2 limit\n+\n+        #NODE_NETWORK_LIMITED must still be signaled after restart\n+        self.restart_node(0)\n+        assert_equal(self.getSignaledServiceFlags(), 1036)\n+\n+        #test the RPC service flags\n+        assert_equal(self.nodes[0].getnetworkinfo()['localservices'], \"000000000000040c\")\n+\n+        # getdata a block above the NODE_NETWORK_LIMITED threshold must be possible\n+        self.tryGetBlockViaGetData(blockWithinLimitedRange, False)\n+\n+        # getdata a block below the NODE_NETWORK_LIMITED threshold must be ignored\n+        self.tryGetBlockViaGetData(firstblock, True)\n+\n+if __name__ == '__main__':\n+    NodeNetworkLimitedTest().main()"
      },
      {
        "sha": "58faec521d74f9c8d1722edbb9ce7251420b05f3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "patch": "@@ -128,6 +128,7 @@\n     'uacomment.py',\n     'p2p-acceptblock.py',\n     'feature_logging.py',\n+    'node_network_limited.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzM5OWU3MDgyODA1ZGU2ZDA0ZTliZjJlOGJhY2Q0OWUzYWRhYWU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-05T22:00:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-10T10:48:36Z"
      },
      "message": "Remove unused Python imports",
      "tree": {
        "sha": "85cec4c5296962bab33a9d98f50158c82464e7d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85cec4c5296962bab33a9d98f50158c82464e7d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59d3dc85b698430f71f6e242a01a25a70c9ef397"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "35a6bd26735d63e9809f1a171d8329fbe6e5162b",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
        "patch": "@@ -22,7 +22,6 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n-    NODE_NETWORK,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "2ab1bdac0f73537564f3ec0d34f48fd8a35dcdf8",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
        "patch": "@@ -24,7 +24,7 @@\n import time\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str\n \n MIN_VERSION_SUPPORTED = 60001\n MY_VERSION = 70014  # past bip-31 for ping/pong"
      },
      {
        "sha": "a46312d62ce7fd7d5446e40f463e0cef5b5dd966",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7399e7082805de6d04e9bf2e8bacd49e3adaae5/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
        "patch": "@@ -13,7 +13,6 @@\n import sys\n import tempfile\n import time\n-import traceback\n \n from .authproxy import JSONRPCException\n from . import coverage"
      }
    ]
  },
  {
    "sha": "d60b32074098d50b04e408c1304dd6f6120654ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjBiMzIwNzQwOThkNTBiMDRlNDA4YzEzMDRkZDZmNjEyMDY1NGVk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-05T20:12:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-10T10:49:43Z"
      },
      "message": "Add Travis check for unused Python imports",
      "tree": {
        "sha": "c76810475eefcccbe788ed8ed528aa17fa7869a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c76810475eefcccbe788ed8ed528aa17fa7869a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60b32074098d50b04e408c1304dd6f6120654ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60b32074098d50b04e408c1304dd6f6120654ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d60b32074098d50b04e408c1304dd6f6120654ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60b32074098d50b04e408c1304dd6f6120654ed/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7399e7082805de6d04e9bf2e8bacd49e3adaae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7399e7082805de6d04e9bf2e8bacd49e3adaae5"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ab002acc539d9ca0792cebcb4bbeb103f199a8a6",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d60b32074098d50b04e408c1304dd6f6120654ed/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d60b32074098d50b04e408c1304dd6f6120654ed/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d60b32074098d50b04e408c1304dd6f6120654ed",
        "patch": "@@ -21,7 +21,7 @@ env:\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM\n-    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf python3-pip\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Win32\n     - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # Qt4 & system libs\n@@ -43,6 +43,7 @@ install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then travis_retry pip3 install flake8 --user; fi\n before_script:\n     - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/crypto/ctaes; fi"
      },
      {
        "sha": "9303fcc8efeee238308a634722446b34e2225259",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d60b32074098d50b04e408c1304dd6f6120654ed/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d60b32074098d50b04e408c1304dd6f6120654ed/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=d60b32074098d50b04e408c1304dd6f6120654ed",
        "patch": "@@ -0,0 +1,10 @@\n+#!/bin/sh\n+#\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check for specified flake8 warnings in python files.\n+\n+# F401: module imported but unused\n+flake8 --ignore=B,C,E,F,I,N,W --select=F401 ."
      }
    ]
  },
  {
    "sha": "f60b4ad57912b78a96af08046a503f7905610a8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjBiNGFkNTc5MTJiNzhhOTZhZjA4MDQ2YTUwM2Y3OTA1NjEwYThj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-10T23:32:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-10T23:33:02Z"
      },
      "message": "Merge #11835: Add Travis check for unused Python imports\n\nd60b32074 Add Travis check for unused Python imports (practicalswift)\nc7399e708 Remove unused Python imports (practicalswift)\n\nPull request description:\n\n  Add Travis check for unused Python imports.\n\n  ```\n  $ contrib/devtools/lint-python.sh\n  ./test/functional/example_test.py:18:1: F401 'test_framework.mininode.NODE_NETWORK' imported but unused\n  ./test/functional/test_framework/messages.py:27:1: F401 'test_framework.util.wait_until' imported but unused\n  ./test/functional/test_framework/test_framework.py:16:1: F401 'traceback' imported but unused\n  ```\n\nTree-SHA512: 78e50fb1488abe3ebe365e766cb8d6d448cf1bd16c8691e102cb9bf7c202988bdf6e10b25ff772c62e05c72568168462e88cdc7ad98069d9eb3be727735b2d56",
      "tree": {
        "sha": "c76810475eefcccbe788ed8ed528aa17fa7869a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c76810475eefcccbe788ed8ed528aa17fa7869a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60b4ad57912b78a96af08046a503f7905610a8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaLcQuAAoJENLqSFDnUoslKeEP/0/VWLTO8nIFEJ8ZhPMcPeZB\njlrc6ew6V19S1ewaNPHwgjIseqhuxNKrkZOfq6UYkcY2htu2dfB32i/393hmQWAX\nfNd43maL94E2X4K+bomumBnm40ukC+J6dq+jQJJlYtHIwIuLC/ZHFanx+NpTI7jv\nrG2t9snAWQR71rertjpzyVt9+nMKDap1LpASEKHPqndjoJvgb7T5WK2jv30XI2OI\nB3FGaNEjSEnnn6RPXLvWOH/iDaa1WLGgZp9x004ziwyu4eInlbBDI+QTad8Af0gI\nGH1v6Polsks6vln9KSDDZFEc2g/CtxWv3iST0t5XwC5g5Fr4DL3YyTbRiI/vDU5x\nZjwvd2qvbESjv53VtysLFUYBC858kLN7dyRJcFrpEhC0nnBuGDlHJGfe4n3taAn2\nVhKvgRNGY08cXeh4gQ2oiR2MxVfDPkVg+xx63FiEikUYvKy4faVRaf0cyrdpkKHb\nJJ82Q4EoLSO2Bhdnz6wGwiCBm2+mZnMxIWMdL3wyE3xwDHQL98HPgpVdQ0KMMLEX\nS4Og8LmwwiusDdwz58bD57lbau9yALVLc9aVyMYWwM+nEOsYuLu/2M7r/ekDfrEW\nko7rqzw4e82X78jcQuALhPkrl4Q2VvBqjN/GAnrK8zl6EKYT5KmuM01qnGCGDW6W\nfnwaF7sGrCRmvbzQS/YH\n=Xg+f\n-----END PGP SIGNATURE-----",
        "payload": "tree c76810475eefcccbe788ed8ed528aa17fa7869a3\nparent 59d3dc85b698430f71f6e242a01a25a70c9ef397\nparent d60b32074098d50b04e408c1304dd6f6120654ed\nauthor MarcoFalke <falke.marco@gmail.com> 1512948775 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1512948782 -0500\n\nMerge #11835: Add Travis check for unused Python imports\n\nd60b32074 Add Travis check for unused Python imports (practicalswift)\nc7399e708 Remove unused Python imports (practicalswift)\n\nPull request description:\n\n  Add Travis check for unused Python imports.\n\n  ```\n  $ contrib/devtools/lint-python.sh\n  ./test/functional/example_test.py:18:1: F401 'test_framework.mininode.NODE_NETWORK' imported but unused\n  ./test/functional/test_framework/messages.py:27:1: F401 'test_framework.util.wait_until' imported but unused\n  ./test/functional/test_framework/test_framework.py:16:1: F401 'traceback' imported but unused\n  ```\n\nTree-SHA512: 78e50fb1488abe3ebe365e766cb8d6d448cf1bd16c8691e102cb9bf7c202988bdf6e10b25ff772c62e05c72568168462e88cdc7ad98069d9eb3be727735b2d56\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b4ad57912b78a96af08046a503f7905610a8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b4ad57912b78a96af08046a503f7905610a8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b4ad57912b78a96af08046a503f7905610a8c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d3dc85b698430f71f6e242a01a25a70c9ef397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59d3dc85b698430f71f6e242a01a25a70c9ef397"
      },
      {
        "sha": "d60b32074098d50b04e408c1304dd6f6120654ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60b32074098d50b04e408c1304dd6f6120654ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d60b32074098d50b04e408c1304dd6f6120654ed"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ab002acc539d9ca0792cebcb4bbeb103f199a8a6",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b4ad57912b78a96af08046a503f7905610a8c/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b4ad57912b78a96af08046a503f7905610a8c/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f60b4ad57912b78a96af08046a503f7905610a8c",
        "patch": "@@ -21,7 +21,7 @@ env:\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM\n-    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf python3-pip\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Win32\n     - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # Qt4 & system libs\n@@ -43,6 +43,7 @@ install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then travis_retry pip3 install flake8 --user; fi\n before_script:\n     - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/crypto/ctaes; fi"
      },
      {
        "sha": "9303fcc8efeee238308a634722446b34e2225259",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b4ad57912b78a96af08046a503f7905610a8c/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b4ad57912b78a96af08046a503f7905610a8c/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=f60b4ad57912b78a96af08046a503f7905610a8c",
        "patch": "@@ -0,0 +1,10 @@\n+#!/bin/sh\n+#\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check for specified flake8 warnings in python files.\n+\n+# F401: module imported but unused\n+flake8 --ignore=B,C,E,F,I,N,W --select=F401 ."
      },
      {
        "sha": "35a6bd26735d63e9809f1a171d8329fbe6e5162b",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b4ad57912b78a96af08046a503f7905610a8c/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b4ad57912b78a96af08046a503f7905610a8c/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=f60b4ad57912b78a96af08046a503f7905610a8c",
        "patch": "@@ -22,7 +22,6 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n-    NODE_NETWORK,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "2ab1bdac0f73537564f3ec0d34f48fd8a35dcdf8",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b4ad57912b78a96af08046a503f7905610a8c/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b4ad57912b78a96af08046a503f7905610a8c/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=f60b4ad57912b78a96af08046a503f7905610a8c",
        "patch": "@@ -24,7 +24,7 @@\n import time\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str\n \n MIN_VERSION_SUPPORTED = 60001\n MY_VERSION = 70014  # past bip-31 for ping/pong"
      },
      {
        "sha": "a46312d62ce7fd7d5446e40f463e0cef5b5dd966",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b4ad57912b78a96af08046a503f7905610a8c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b4ad57912b78a96af08046a503f7905610a8c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f60b4ad57912b78a96af08046a503f7905610a8c",
        "patch": "@@ -13,7 +13,6 @@\n import sys\n import tempfile\n import time\n-import traceback\n \n from .authproxy import JSONRPCException\n from . import coverage"
      }
    ]
  },
  {
    "sha": "6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmE4ZjMwZTdiMGIwYmJiMzY1ZmNjYTk1YjBjMzNhZjMxZjI4ZWY0",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-12-06T16:49:37Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-12-11T14:08:54Z"
      },
      "message": "don't attempt mempool entry for wallet transactions on startup if already in mempool",
      "tree": {
        "sha": "edab14e647c5909e1d84983250869b2db5632f5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edab14e647c5909e1d84983250869b2db5632f5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24df9af81625122c816a0ae6bb842ea47a4041ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24df9af81625122c816a0ae6bb842ea47a4041ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24df9af81625122c816a0ae6bb842ea47a4041ff"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb81ec37f53501c7d6f019382e8a0a8ebcd10ce3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
        "patch": "@@ -4114,6 +4114,11 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n+    // Quick check to avoid re-setting fInMempool to false\n+    if (mempool.exists(tx->GetHash())) {\n+        return false;\n+    }\n+\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors"
      }
    ]
  },
  {
    "sha": "6697a7089441deded836332e7ce3b4a1a9a3cbcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Njk3YTcwODk0NDFkZWRlZDgzNjMzMmU3Y2UzYjRhMWE5YTNjYmNk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-12-06T17:08:40Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-12-11T14:14:50Z"
      },
      "message": "add test for unconfirmed balance between restarts",
      "tree": {
        "sha": "9935a8cbe309dc2a0d970cec77b8e0027053ac82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9935a8cbe309dc2a0d970cec77b8e0027053ac82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6697a7089441deded836332e7ce3b4a1a9a3cbcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6697a7089441deded836332e7ce3b4a1a9a3cbcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6697a7089441deded836332e7ce3b4a1a9a3cbcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6697a7089441deded836332e7ce3b4a1a9a3cbcd/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "31a96ec60e234488b84dad1e45b4c79fae4a9cdd",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6697a7089441deded836332e7ce3b4a1a9a3cbcd/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6697a7089441deded836332e7ce3b4a1a9a3cbcd/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=6697a7089441deded836332e7ce3b4a1a9a3cbcd",
        "patch": "@@ -57,21 +57,27 @@ def run_test(self):\n         self.log.debug(\"Send 5 transactions from node2 (to its own address)\")\n         for i in range(5):\n             self.nodes[2].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"10\"))\n+        node2_balance = self.nodes[2].getbalance()\n         self.sync_all()\n \n         self.log.debug(\"Verify that node0 and node1 have 5 transactions in their mempools\")\n         assert_equal(len(self.nodes[0].getrawmempool()), 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 5)\n \n-        self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n+        self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n         self.start_node(0)\n         self.start_node(1)\n+        self.start_node(2)\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[2].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n+        # Verify accounting of mempool transactions after restart is correct\n+        assert_equal(node2_balance, self.nodes[2].getbalance())\n+\n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n         self.start_node(0, extra_args=[\"-persistmempool=0\"])"
      }
    ]
  },
  {
    "sha": "5fc6e71d1994d58c25edebd8063555998752349a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmM2ZTcxZDE5OTRkNThjMjVlZGViZDgwNjM1NTU5OTg3NTIzNDlh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-08T15:50:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:16:44Z"
      },
      "message": "[tests] Add network_thread_ utility functions.\n\nAdd network thread_start(), network_thread_running() and\nnetwork_thread_join() utility functions in mininode.py and use\nnetwork_thread_running() in network thread assertions.",
      "tree": {
        "sha": "8cee595bacfc27036769d25258b191e1e0fcdbbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cee595bacfc27036769d25258b191e1e0fcdbbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fc6e71d1994d58c25edebd8063555998752349a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fc6e71d1994d58c25edebd8063555998752349a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60b4ad57912b78a96af08046a503f7905610a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b4ad57912b78a96af08046a503f7905610a8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b4ad57912b78a96af08046a503f7905610a8c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 24,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a00fc3d43c9702ad31120510657f0338c93f7be7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fc6e71d1994d58c25edebd8063555998752349a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fc6e71d1994d58c25edebd8063555998752349a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5fc6e71d1994d58c25edebd8063555998752349a",
        "patch": "@@ -18,7 +18,7 @@\n import socket\n import struct\n import sys\n-from threading import RLock, Thread\n+import threading\n \n from test_framework.messages import *\n from test_framework.util import wait_until\n@@ -397,9 +397,12 @@ def sync_with_ping(self, timeout=60):\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = RLock()\n+mininode_lock = threading.RLock()\n+\n+class NetworkThread(threading.Thread):\n+    def __init__(self):\n+        super().__init__(name=\"NetworkThread\")\n \n-class NetworkThread(Thread):\n     def run(self):\n         while mininode_socket_map:\n             # We check for whether to disconnect outside of the asyncore\n@@ -412,3 +415,21 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+def network_thread_start():\n+    \"\"\"Start the network thread.\"\"\"\n+    NetworkThread().start()\n+\n+def network_thread_running():\n+    \"\"\"Return whether the network thread is running.\"\"\"\n+    return any([thread.name == \"NetworkThread\" for thread in threading.enumerate()])\n+\n+def network_thread_join(timeout=10):\n+    \"\"\"Wait timeout seconds for the network thread to terminate.\n+\n+    Throw if the network thread doesn't terminate in timeout seconds.\"\"\"\n+    network_threads = [thread for thread in threading.enumerate() if thread.name == \"NetworkThread\"]\n+    assert len(network_threads) <= 1\n+    for thread in network_threads:\n+        thread.join(timeout)\n+        assert not thread.is_alive()"
      }
    ]
  },
  {
    "sha": "74e64f24b8cb701379b34442f21332361dcc91f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGU2NGYyNGI4Y2I3MDEzNzliMzQ0NDJmMjEzMzIzNjFkY2M5MWY5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-08T16:45:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:17:21Z"
      },
      "message": "[tests] Use network_thread_start() in tests.",
      "tree": {
        "sha": "3ee92d07ceebf41e012931c689d74beda27ebe73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ee92d07ceebf41e012931c689d74beda27ebe73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74e64f24b8cb701379b34442f21332361dcc91f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74e64f24b8cb701379b34442f21332361dcc91f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fc6e71d1994d58c25edebd8063555998752349a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fc6e71d1994d58c25edebd8063555998752349a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "6be4d9cfabc5004c00a0fc2019b98a3da9f0688d",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -68,7 +68,7 @@ contains the higher level logic for processing P2P payloads and connecting to\n the Bitcoin Core node application logic. For custom behaviour, subclass the\n P2PInterface object and override the callback methods.\n \n-- Call `NetworkThread.start()` after all `P2PInterface` objects are created to\n+- Call `network_thread_start()` after all `P2PInterface` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n "
      },
      {
        "sha": "68ff319d1206c8f90a81a77e736629719d5f3160",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -38,10 +38,10 @@\n                                      CTransaction,\n                                      CTxIn,\n                                      CTxOut,\n-                                     NetworkThread,\n                                      P2PInterface,\n                                      msg_block,\n-                                     msg_headers)\n+                                     msg_headers,\n+                                     network_thread_start)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -98,7 +98,7 @@ def run_test(self):\n         # Connect to node0\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         # Build the blockchain"
      },
      {
        "sha": "f4df879723f70957ab95a05a4c7c9a90c10edcff",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -68,7 +68,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "d3c7d8fc1138a1d6fba060bde14b6f17c87f915b",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -45,7 +45,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n@@ -100,7 +100,7 @@ def set_test_params(self):\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def send_generic_input_tx(self, node, coinbases):"
      },
      {
        "sha": "4cd6a177aa4e95487c6038e376b4a0c2b77c51a6",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -22,7 +22,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n@@ -36,7 +36,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.test.run()\n \n     def create_transaction(self, node, coinbase, to_address, amount):\n@@ -245,7 +245,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.setup_chain()\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start()\n+        network_thread_start()\n         self.test.p2p_connections[0].wait_for_verack()\n \n     def get_tests(self):"
      },
      {
        "sha": "5d7b889e83c6c26e459f5ef59b0d25cd5e7b643e",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -56,7 +56,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "c9c5c6fc4b19da37d443719af95e25f08daf0ca5",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -17,11 +17,11 @@\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.mininode import (\n     CInv,\n-    NetworkThread,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    network_thread_start,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -136,7 +136,7 @@ def run_test(self):\n \n         # Start up network handling in another thread. This needs to be called\n         # after the P2P connections have been created.\n-        NetworkThread().start()\n+        network_thread_start()\n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "a89d1d8ef246c97603c10f83241f96f73b6bde0b",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -15,6 +15,7 @@\n from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.blocktools import *\n+from test_framework.mininode import network_thread_start\n import copy\n import time\n \n@@ -32,7 +33,7 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "c60b0fce16f15eceb540fc322298d0636ab6b6dd",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "cf2e484d9f50b2e1642c77c33cfc936f9c1ab957",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -57,7 +57,7 @@ def run_test(self):\n         for _ in range(3):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         for p2pc in p2p_conns:\n             p2pc.wait_for_verack()\n \n@@ -149,7 +149,7 @@ def run_test(self):\n         # Reconnect to self.nodes[0]\n         self.nodes[0].add_p2p_connection(TestNode())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit"
      },
      {
        "sha": "9f9f2f90c0ff467cf0405ab0a19dd6957697139c",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -15,7 +15,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n from test_framework.script import CScript\n from io import BytesIO\n@@ -50,7 +50,7 @@ def run_test(self):\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.coinbase_blocks = self.nodes[0].generate(2) # Block 2\n         coinbase_txid = []\n         for i in self.coinbase_blocks:"
      },
      {
        "sha": "b56cafc9845f13f45299f0360e4904f9be24ee6e",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -83,7 +83,7 @@ def run_test(self):\n         # min_work_node connects to node1 (whitelisted)\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n@@ -294,7 +294,7 @@ def run_test(self):\n             self.nodes[0].disconnect_p2ps()\n             test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-            NetworkThread().start() # Start up network handling in another thread\n+            network_thread_start()\n             test_node.wait_for_verack()\n \n         # We should have failed reorg and switched back to 290 (but have block 291)"
      },
      {
        "sha": "1e763df2a4012862706815f21a2a1742c85a2949",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -792,7 +792,7 @@ def run_test(self):\n         self.segwit_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n         self.old_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         self.test_node.wait_for_verack()\n "
      },
      {
        "sha": "ff4bed0efd026dcc2f61881629000c65ea813064",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -49,7 +49,7 @@ def run_test(self):\n \n         # Setup the p2p connections and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-        NetworkThread().start()\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte"
      },
      {
        "sha": "93ef73e25eddcd07976bee10fedaf4bb31528be7",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -13,12 +13,12 @@\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.mininode import (\n     CInv,\n-    NetworkThread,\n     P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n     msg_getheaders,\n+    network_thread_start,\n     wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -77,7 +77,7 @@ def last_header_equals(self, expected_hash, node):\n     def run_test(self):\n         node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start()\n+        network_thread_start()\n         node0.wait_for_verack()\n \n         # Set node time to 60 days ago"
      },
      {
        "sha": "010dbdccad3124b040de8d80b179c0c901829f25",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -18,6 +18,7 @@\n import time\n from test_framework.key import CECKey\n from test_framework.script import *\n+from test_framework.mininode import network_thread_start\n import struct\n \n class PreviousSpendableOutput():\n@@ -68,7 +69,7 @@ def add_options(self, parser):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.test.run()\n \n     def add_transactions_to_block(self, block, tx_list):"
      },
      {
        "sha": "9b59d753f9f76ab1b7fb516cc9d63cdefcffd871",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         unsupported_service_bit5_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n         unsupported_service_bit7_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n         wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n@@ -142,7 +142,8 @@ def run_test(self):\n         allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n         allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n+        # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n+        network_thread_start()\n \n         wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n         wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)"
      },
      {
        "sha": "168f9f685a1714293555aeba04fd0386937b783f",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -21,7 +21,7 @@ def set_test_params(self):\n     def run_test(self):\n         # Add a p2p connection\n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        NetworkThread().start()\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         #request mempool"
      },
      {
        "sha": "a06601c38ef1494548056eea5930e3cdb1eb2688",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -1882,7 +1882,7 @@ def run_test(self):\n         # self.std_node is for testing node1 (fRequireStandard=true)\n         self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Keep a place to store utxo's that can be used in later tests\n         self.utxo = []"
      },
      {
        "sha": "984a3c8b903810d64f3ee467cfe55d9305d0b499",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         no_version_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n         no_send_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         sleep(1)\n "
      },
      {
        "sha": "d29d43ebedf396c04a0b053a4801968d4b46e67f",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "256227f721f90ba2f0b291836fff3a338ee1eb61",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -90,7 +90,7 @@\n     CBlockHeader,\n     CInv,\n     NODE_WITNESS,\n-    NetworkThread,\n+    network_thread_start,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n@@ -238,7 +238,7 @@ def run_test(self):\n         # will occur outside of direct fetching\n         test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         inv_node.wait_for_verack()"
      }
    ]
  },
  {
    "sha": "34e08b3510c64e35fc51327562d15d938f4b656e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGUwOGIzNTEwYzY0ZTM1ZmM1MTMyNzU2MmQxNWQ5MzhmNGI2NTZl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-07T18:40:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:17:21Z"
      },
      "message": "[tests] Fix network threading in functional tests\n\nassumevalid.py, example_test.py and p2p-acceptblocks.py add\np2p_connections after the NetworkThread has been started. This isn't\npermitted. Fix test to restart the network thread when adding new\nconnections.\n\np2p-leaktest.py had a potential race condition if the NetworkThread\nhadn't terminated by the time we tried to restart it.",
      "tree": {
        "sha": "c6f09d62e3a5da99daa809c942e7f8bd7c474558",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6f09d62e3a5da99daa809c942e7f8bd7c474558"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34e08b3510c64e35fc51327562d15d938f4b656e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34e08b3510c64e35fc51327562d15d938f4b656e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74e64f24b8cb701379b34442f21332361dcc91f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74e64f24b8cb701379b34442f21332361dcc91f9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 31,
      "deletions": 8
    },
    "files": [
      {
        "sha": "362b94e0d32dead0c457fd56341a3c788ad70457",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -38,10 +38,11 @@\n                                      CTransaction,\n                                      CTxIn,\n                                      CTxOut,\n+                                     network_thread_join,\n+                                     network_thread_start,\n                                      P2PInterface,\n                                      msg_block,\n-                                     msg_headers,\n-                                     network_thread_start)\n+                                     msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -159,13 +160,22 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n+        # We're adding new connections so terminate the network thread\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.wait_for_verack()\n-\n         self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n+\n+        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+\n+        network_thread_start()\n+\n+        p2p0.wait_for_verack()\n+        p2p1.wait_for_verack()\n         p2p2.wait_for_verack()\n \n         # send header lists to all three nodes"
      },
      {
        "sha": "12be685ecf4232a83ebd598f35579d82468236cd",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -21,6 +21,7 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    network_thread_join,\n     network_thread_start,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -131,7 +132,7 @@ def custom_method(self):\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n-        # Create a P2P connection to one of the nodes\n+        # Create P2P connections to two of the nodes\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Start up network handling in another thread. This needs to be called\n@@ -188,7 +189,14 @@ def run_test(self):\n         connect_nodes(self.nodes[1], 2)\n \n         self.log.info(\"Add P2P connection to node2\")\n+        # We can't add additional P2P connections once the network thread has started. Disconnect the connection\n+        # to node0, wait for the network thread to terminate, then connect to node2. This is specific to\n+        # the current implementation of the network thread and may be improved in future.\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+\n         self.nodes[2].add_p2p_connection(BaseNode())\n+        network_thread_start()\n         self.nodes[2].p2p.wait_for_verack()\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")"
      },
      {
        "sha": "bb204322ed34d71eca8fcdbf0a1ed1819ea2ae3f",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -207,9 +207,13 @@ def run_test(self):\n         # disconnect/reconnect first\n \n         self.nodes[0].disconnect_p2ps()\n-        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.nodes[1].disconnect_p2ps()\n+        network_thread_join()\n \n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        network_thread_start()\n         test_node.wait_for_verack()\n+\n         test_node.send_message(msg_block(block_h1f))\n \n         test_node.sync_with_ping()"
      },
      {
        "sha": "ce4e6e914457fc443ecb7cec0e895cb44d168f10",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -126,8 +126,9 @@ def run_test(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n-        # Wait until all connections are closed\n+        # Wait until all connections are closed and the network thread has terminated\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+        network_thread_join()\n \n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)"
      }
    ]
  },
  {
    "sha": "5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzhmZjI2YjJmYzU5ZDhiY2ZhMmE4YmZiN2M5ZmU2ZDc4Y2Y2Njc4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-08T15:00:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:17:21Z"
      },
      "message": "[tests] Add NetworkThread assertions\n\nCheck that P2PConnections aren't created after the NetworkThread\nhas started and that at any time only one NetworkThread is running.",
      "tree": {
        "sha": "fe0bfdb8c657ba5cef79f0067e3781a89e4f8a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe0bfdb8c657ba5cef79f0067e3781a89e4f8a8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e08b3510c64e35fc51327562d15d938f4b656e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e08b3510c64e35fc51327562d15d938f4b656e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "724d418099b38308d00da29d3d5a4470d6c5615b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
        "patch": "@@ -69,6 +69,10 @@ class P2PConnection(asyncore.dispatcher):\n     sub-classed and the on_message() callback overridden.\"\"\"\n \n     def __init__(self):\n+        # All P2PConnections must be created before starting the NetworkThread.\n+        # assert that the network thread is not running.\n+        assert not network_thread_running()\n+\n         super().__init__(map=mininode_socket_map)\n \n     def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n@@ -418,6 +422,9 @@ def run(self):\n \n def network_thread_start():\n     \"\"\"Start the network thread.\"\"\"\n+    # Only one network thread may run at a time\n+    assert not network_thread_running()\n+\n     NetworkThread().start()\n \n def network_thread_running():"
      }
    ]
  },
  {
    "sha": "8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWI2YzBiMDllNGU3MzRlMzAzM2Q4MWZlMGEyNWYwOWNhNzRiYTI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-11T15:12:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-11T15:21:03Z"
      },
      "message": "Merge #11839: don't attempt mempool entry for wallet transactions on startup if alr\u2026\n\n6697a70 add test for unconfirmed balance between restarts (Gregory Sanders)\n6ba8f30 don't attempt mempool entry for wallet transactions on startup if already in mempool (Gregory Sanders)\n\nPull request description:\n\n  \u2026eady in mempool\n\n  Mempool loads first, wallet second. Second attempt fails, marking that transaction !fInMempool. Those funds will disappear until confirmation is reached.\n\nTree-SHA512: 955f0565ec1dc1ba395e0b803a98c07b7cd00c8cac5ec618ed832fed259a856fb7bbbe41310cf6a4e43c0435e09b156109d2a4467d403811dc8379d2caebeede",
      "tree": {
        "sha": "f4ba8871dd80ea318b6e7820f5018cf023826c8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4ba8871dd80ea318b6e7820f5018cf023826c8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaLqJfAAoJEB5K7WKYbNJd9xUH+wf02Ba8vMT1Wg74Fqc1h+Qh\nuBPR8m5/BCQBiDhZZ17fSLd4mDNdZV7+4qbrTbTlnZacf8ywt7AGoNRXH72eXS82\nNB3N7eXrYTvmsxiazbRE3Mx8NfbiEmm47Ow0LirihXO9KfS/hVNVyfQfWQ3IUq+D\ni+mz4aETSoSIa9vXx8nBnglTRJhtz8q3vXbWVshDW+1prpn269t1cylIxqhhqaQF\n/7czZ8y6kumqfREy2+2ZLk8rphprKpeAIcf8pfgzRYFcnJ9TdA86ruifcGngJE2f\nkC4gyKvzggvJT2V3ppGh5jJIZn0Ydfw4A+so4qvyqRUIiiwZ0UPjwg+YRL/U0IU=\n=W9uv\n-----END PGP SIGNATURE-----",
        "payload": "tree f4ba8871dd80ea318b6e7820f5018cf023826c8b\nparent f60b4ad57912b78a96af08046a503f7905610a8c\nparent 6697a7089441deded836332e7ce3b4a1a9a3cbcd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513005126 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513005663 +0100\n\nMerge #11839: don't attempt mempool entry for wallet transactions on startup if alr\u2026\n\n6697a70 add test for unconfirmed balance between restarts (Gregory Sanders)\n6ba8f30 don't attempt mempool entry for wallet transactions on startup if already in mempool (Gregory Sanders)\n\nPull request description:\n\n  \u2026eady in mempool\n\n  Mempool loads first, wallet second. Second attempt fails, marking that transaction !fInMempool. Those funds will disappear until confirmation is reached.\n\nTree-SHA512: 955f0565ec1dc1ba395e0b803a98c07b7cd00c8cac5ec618ed832fed259a856fb7bbbe41310cf6a4e43c0435e09b156109d2a4467d403811dc8379d2caebeede\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60b4ad57912b78a96af08046a503f7905610a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b4ad57912b78a96af08046a503f7905610a8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b4ad57912b78a96af08046a503f7905610a8c"
      },
      {
        "sha": "6697a7089441deded836332e7ce3b4a1a9a3cbcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6697a7089441deded836332e7ce3b4a1a9a3cbcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6697a7089441deded836332e7ce3b4a1a9a3cbcd"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cb81ec37f53501c7d6f019382e8a0a8ebcd10ce3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "patch": "@@ -4114,6 +4114,11 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n+    // Quick check to avoid re-setting fInMempool to false\n+    if (mempool.exists(tx->GetHash())) {\n+        return false;\n+    }\n+\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors"
      },
      {
        "sha": "31a96ec60e234488b84dad1e45b4c79fae4a9cdd",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "patch": "@@ -57,21 +57,27 @@ def run_test(self):\n         self.log.debug(\"Send 5 transactions from node2 (to its own address)\")\n         for i in range(5):\n             self.nodes[2].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"10\"))\n+        node2_balance = self.nodes[2].getbalance()\n         self.sync_all()\n \n         self.log.debug(\"Verify that node0 and node1 have 5 transactions in their mempools\")\n         assert_equal(len(self.nodes[0].getrawmempool()), 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 5)\n \n-        self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n+        self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n         self.start_node(0)\n         self.start_node(1)\n+        self.start_node(2)\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[2].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n+        # Verify accounting of mempool transactions after restart is correct\n+        assert_equal(node2_balance, self.nodes[2].getbalance())\n+\n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n         self.start_node(0, extra_args=[\"-persistmempool=0\"])"
      }
    ]
  },
  {
    "sha": "37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2ZmYTE2OTMzOTUzNTY1ZGNhYjVjMGQ3ZTBlZTFlYmI2ZTM0OWMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-11T15:44:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-11T16:06:22Z"
      },
      "message": "Merge #11583: Do not make it trivial for inbound peers to generate log entries\n\nbe9f38c Do not make it trivial for inbound peers to generate log entries (Matt Corallo)\n\nPull request description:\n\n  Based on #11580 because I'm lazy.\n\n  We should generally avoid writing to debug.log unconditionally for\n  inbound peers which misbehave (the peer being about to be banned\n  being an exception, since they cannot do this twice).\n\nTree-SHA512: 8e59c8d08d00b1527951b30f4842d010a4c2fc440503ade112baa2c1b9afd0e0d1c5c2df83dde25183a242af45089cf9b9f873b71796771232ffb6c5fc6cc0cc",
      "tree": {
        "sha": "69f21301e6f16ded9ebe5693120d54c4173ef139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69f21301e6f16ded9ebe5693120d54c4173ef139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaLqz+AAoJEB5K7WKYbNJdWfwH/1igUx7GcGWWq+qDU4v4/mO0\nu5Y9DBqKZie/kEDaXwXZE54EIcOMUzTa5Vy4NmR3w3YsMyIUb3TiYLukRRZk5aL1\n7j0mQoGwRmEFBCPBiZsat5Sz0lc/LfmI6InM/Qid7HA23YemSI+POdOy8kV+0H6N\nrsK6X/lHPiPmUDdVgw9ffu2eEstY8zSVyPa/sFCBs9YXxX3xS5/4KhC694YB/6wn\nmXJg+iF8FlKo36iQ0yG2dqfIR/1Lj8rrfWu8UUB7SH2Hooy2lI7RGtYk0n+Rm6+R\ncbY5jqQTV56QgoKSVbGZP+oPcLwuQ0u+4quAMlWw/9/0sHHXm6cF17roRS2NGw4=\n=uHyg\n-----END PGP SIGNATURE-----",
        "payload": "tree 69f21301e6f16ded9ebe5693120d54c4173ef139\nparent 8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26\nparent be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513007042 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513008382 +0100\n\nMerge #11583: Do not make it trivial for inbound peers to generate log entries\n\nbe9f38c Do not make it trivial for inbound peers to generate log entries (Matt Corallo)\n\nPull request description:\n\n  Based on #11580 because I'm lazy.\n\n  We should generally avoid writing to debug.log unconditionally for\n  inbound peers which misbehave (the peer being about to be banned\n  being an exception, since they cannot do this twice).\n\nTree-SHA512: 8e59c8d08d00b1527951b30f4842d010a4c2fc440503ade112baa2c1b9afd0e0d1c5c2df83dde25183a242af45089cf9b9f873b71796771232ffb6c5fc6cc0cc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26"
      },
      {
        "sha": "be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9f38c6131ab0c7ad96e4f6f3d8b5ae6f870ea9"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8a101b2cf20c093098dce47de4cfc7ea313dc6cf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
        "patch": "@@ -1102,7 +1102,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (IsBanned(addr) && !whitelisted)\n     {\n-        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+        LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }"
      },
      {
        "sha": "99b96a988ab98a409fe955e2898b92d5deeef873",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
        "patch": "@@ -1078,7 +1078,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                     send = BlockRequestAllowed(mi->second, consensusParams);\n                     if (!send) {\n-                        LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+                        LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n@@ -1569,7 +1569,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n+            LogPrint(BCLog::NET, \"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n@@ -1669,7 +1669,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+        LogPrint(BCLog::NET, \"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n                   cleanSubVer, pfrom->nVersion,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->GetId(),\n                   remoteAddr);\n@@ -1712,6 +1712,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // Mark this node as currently connected, so we update its timestamp later.\n             LOCK(cs_main);\n             State(pfrom->GetId())->fCurrentlyConnected = true;\n+            LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s\\n\",\n+                      pfrom->nVersion.load(), pfrom->nStartingHeight, pfrom->GetId(),\n+                      (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom->addr.ToString()) : \"\"));\n         }\n \n         if (pfrom->nVersion >= SENDHEADERS_VERSION) {\n@@ -1990,7 +1993,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n-            LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n+            LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->GetId());\n             return true;\n         }\n \n@@ -2042,7 +2045,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pindex = (*mi).second;\n \n             if (!BlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n-                LogPrintf(\"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+                LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                 return true;\n             }\n         }\n@@ -2296,10 +2299,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0) {\n+                    LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                     LOCK(cs_main);\n                     Misbehaving(pfrom->GetId(), nDoS);\n+                } else {\n+                    LogPrint(BCLog::NET, \"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 }\n-                LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 return true;\n             }\n         }\n@@ -2901,7 +2906,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     msg.SetVersion(pfrom->GetRecvVersion());\n     // Scan for message start\n     if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n         pfrom->fDisconnect = true;\n         return false;\n     }\n@@ -2910,7 +2915,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     CMessageHeader& hdr = msg.hdr;\n     if (!hdr.IsValid(chainparams.MessageStart()))\n     {\n-        LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n         return fMoreWork;\n     }\n     std::string strCommand = hdr.GetCommand();\n@@ -2923,7 +2928,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     const uint256& hash = msg.GetMessageHash();\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n     {\n-        LogPrintf(\"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n            SanitizeString(strCommand), nMessageSize,\n            HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n            HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n@@ -2946,17 +2951,17 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         if (strstr(e.what(), \"end of data\"))\n         {\n             // Allow exceptions from under-length message on vRecv\n-            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n         else if (strstr(e.what(), \"size too large\"))\n         {\n             // Allow exceptions from over-long size\n-            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n         else if (strstr(e.what(), \"non-canonical ReadCompactSize()\"))\n         {\n             // Allow exceptions from non-canonical encoding\n-            LogPrintf(\"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n         }\n         else\n         {\n@@ -2970,7 +2975,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     if (!fRet) {\n-        LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n     }\n \n     LOCK(cs_main);"
      },
      {
        "sha": "3cc4c268176344ec3a42420516f5715415c50a6e",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
        "patch": "@@ -134,6 +134,10 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n     MarkUsed(args...);\n }\n \n+// Be conservative when using LogPrintf/error or other things which\n+// unconditionally log to debug.log! It should not be the case that an inbound\n+// peer can fill up a users disk with debug.log entries.\n+\n #ifdef USE_COVERAGE\n #define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n #define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)"
      }
    ]
  },
  {
    "sha": "d44535d8189ec2f0e77d445804cca60b869b24a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDQ1MzVkODE4OWVjMmYwZTc3ZDQ0NTgwNGNjYTYwYjg2OWIyNGEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-11T16:55:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-11T16:59:01Z"
      },
      "message": "Merge #11836: Rename rpcuser.py to rpcauth.py\n\n3121d76 doc: Update release notes for share/rpcauth/rpcauth.py rename (Henrik Jonsson)\n3fdb297 Rename rpcuser.py to rpcauth.py (Henrik Jonsson)\n\nPull request description:\n\n  This script creates `rpcauth` entries for bitcoin.conf, not the deprecated `rpcuser` entry, so this changes the name of the script to match.\n\n  As discussed in #11830.\n\nTree-SHA512: cd71c2a4043ef1381d3810b057cc83be3fac612df576b91b683ef91fdb7998c534b3b97a3313845eb867dc4bf7cc42a1250474d2261ab3f9ed2f884ca8ebd9f4",
      "tree": {
        "sha": "969e278246b441e2ce63bdffb852efbfbe5d6542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/969e278246b441e2ce63bdffb852efbfbe5d6542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d44535d8189ec2f0e77d445804cca60b869b24a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaLrlVAAoJEB5K7WKYbNJdI8IH/2v7BO2Q5dreONKjRXBQeUk1\nEe7m7jLniBIwUrSS352vt6FBRlclwIG5kg3uZunrCznuDBgiRFrH1iNpMNtLHaKh\n81OBnklg8wfTaEAjLK0ljxc8WwMjkKK8O0x49Ki4uLmFY0ZwwFvCtqHjHsdWYA+j\nmhzpqvPwAcXwFu8UMbL2Rmq2XSsgFlTPdzEob1TyUuIyGILYRsUZo6M5wr2BZT6O\nwZz7U3byyjMUtZSwY+ikJo2J52fKbY2hYOig55vFRIAscjqh9y1JHy2Ii1T2dfM4\n8uYZsyzZ8UCdzby5JttP+G77WuTjyb8/ZOXAyE2sN0hZeC1gZhxsZ7elGs5XuyM=\n=wpDK\n-----END PGP SIGNATURE-----",
        "payload": "tree 969e278246b441e2ce63bdffb852efbfbe5d6542\nparent 37ffa16933953565dcab5c0d7e0ee1ebb6e349c3\nparent 3121d76ba11043ea5c4e957ac0c3edbf21d1e84d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513011342 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513011541 +0100\n\nMerge #11836: Rename rpcuser.py to rpcauth.py\n\n3121d76 doc: Update release notes for share/rpcauth/rpcauth.py rename (Henrik Jonsson)\n3fdb297 Rename rpcuser.py to rpcauth.py (Henrik Jonsson)\n\nPull request description:\n\n  This script creates `rpcauth` entries for bitcoin.conf, not the deprecated `rpcuser` entry, so this changes the name of the script to match.\n\n  As discussed in #11830.\n\nTree-SHA512: cd71c2a4043ef1381d3810b057cc83be3fac612df576b91b683ef91fdb7998c534b3b97a3313845eb867dc4bf7cc42a1250474d2261ab3f9ed2f884ca8ebd9f4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44535d8189ec2f0e77d445804cca60b869b24a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d44535d8189ec2f0e77d445804cca60b869b24a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44535d8189ec2f0e77d445804cca60b869b24a1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3"
      },
      {
        "sha": "3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 19,
      "deletions": 13
    },
    "files": [
      {
        "sha": "31525e2c665a17b2836e6794b016c4edb69f343f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d44535d8189ec2f0e77d445804cca60b869b24a1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d44535d8189ec2f0e77d445804cca60b869b24a1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=d44535d8189ec2f0e77d445804cca60b869b24a1",
        "patch": "@@ -46,7 +46,7 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/rpm\n DIST_SHARE = \\\n   $(top_srcdir)/share/genbuild.sh \\\n-  $(top_srcdir)/share/rpcuser\n+  $(top_srcdir)/share/rpcauth\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py"
      },
      {
        "sha": "4dd73162a238b848c1d6ccf1b35540256b3b7d15",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d44535d8189ec2f0e77d445804cca60b869b24a1/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d44535d8189ec2f0e77d445804cca60b869b24a1/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=d44535d8189ec2f0e77d445804cca60b869b24a1",
        "patch": "@@ -77,9 +77,9 @@\n #rpcpassword=YourSuperGreatPasswordNumber_DO_NOT_USE_THIS_OR_YOU_WILL_GET_ROBBED_385593\n #\n # The second method `rpcauth` can be added to server startup argument. It is set at initialization time\n-# using the output from the script in share/rpcuser/rpcuser.py after providing a username:\n+# using the output from the script in share/rpcauth/rpcauth.py after providing a username:\n #\n-# ./share/rpcuser/rpcuser.py alice\n+# ./share/rpcauth/rpcauth.py alice\n # String to be appended to bitcoin.conf:\n # rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc02b724e5d095828e0bc8b2456e9ac8757ae3211a5d9b16a22ae\n # Your password:"
      },
      {
        "sha": "78caddc8f0299bf9878e8a89dab0174b3a501140",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d44535d8189ec2f0e77d445804cca60b869b24a1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d44535d8189ec2f0e77d445804cca60b869b24a1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d44535d8189ec2f0e77d445804cca60b869b24a1",
        "patch": "@@ -94,6 +94,12 @@ Changed command-line options\n -----------------------------\n - `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n \n+Renamed script for creating JSON-RPC credentials\n+-----------------------------\n+The `share/rpcuser/rpcuser.py` script was renamed to `share/rpcauth/rpcauth.py`. This script can be\n+used to create `rpcauth` credentials for a JSON-RPC user.\n+\n+\n Credits\n =======\n "
      },
      {
        "sha": "389278a1256d9f8728da11c05deb972803ad789e",
        "filename": "share/rpcauth/README.md",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d44535d8189ec2f0e77d445804cca60b869b24a1/share/rpcauth/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d44535d8189ec2f0e77d445804cca60b869b24a1/share/rpcauth/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/README.md?ref=d44535d8189ec2f0e77d445804cca60b869b24a1",
        "patch": "@@ -0,0 +1,10 @@\n+RPC Tools\n+---------------------\n+\n+### [RPCAuth](/share/rpcauth) ###\n+\n+Create login credentials for a JSON-RPC user.\n+\n+Usage:\n+\n+    ./rpcauth.py <username>"
      },
      {
        "sha": "6d9b44f69972a5959250c5fb45d06d4446fac0ce",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d44535d8189ec2f0e77d445804cca60b869b24a1/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d44535d8189ec2f0e77d445804cca60b869b24a1/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=d44535d8189ec2f0e77d445804cca60b869b24a1",
        "previous_filename": "share/rpcuser/rpcuser.py"
      },
      {
        "sha": "12a8e6fb0cc5b9458cf1ca430ed8e497096dfeeb",
        "filename": "share/rpcuser/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/share/rpcuser/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3/share/rpcuser/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/README.md?ref=37ffa16933953565dcab5c0d7e0ee1ebb6e349c3",
        "patch": "@@ -1,10 +0,0 @@\n-RPC Tools\n----------------------\n-\n-### [RPCUser](/share/rpcuser) ###\n-\n-Create an RPC user login credential.\n-\n-Usage:\n-\n-    ./rpcuser.py <username>"
      }
    ]
  },
  {
    "sha": "5b252934362c2971e521df56c26ced56f07deb72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjI1MjkzNDM2MmMyOTcxZTUyMWRmNTZjMjZjZWQ1NmYwN2RlYjcy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-11T23:41:51Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-11T23:43:31Z"
      },
      "message": "wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions",
      "tree": {
        "sha": "c36f01360a65153b2bd6ce8310fbf666948168ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c36f01360a65153b2bd6ce8310fbf666948168ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b252934362c2971e521df56c26ced56f07deb72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b252934362c2971e521df56c26ced56f07deb72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b252934362c2971e521df56c26ced56f07deb72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b252934362c2971e521df56c26ced56f07deb72/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d44535d8189ec2f0e77d445804cca60b869b24a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44535d8189ec2f0e77d445804cca60b869b24a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d44535d8189ec2f0e77d445804cca60b869b24a1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d4e7de2e33fea35d5cc90d583902778b75bcd00b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b252934362c2971e521df56c26ced56f07deb72/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b252934362c2971e521df56c26ced56f07deb72/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b252934362c2971e521df56c26ced56f07deb72",
        "patch": "@@ -1713,11 +1713,8 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted)\n-    {\n+    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n-\n-        LOCK(mempool.cs);\n         CValidationState state;\n         wtx.AcceptToMemoryPool(maxTxFee, state);\n     }"
      }
    ]
  },
  {
    "sha": "0e722e8879a8e1eebe02fd14c70c39346c79f95d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTcyMmU4ODc5YThlMWVlYmUwMmZkMTRjNzBjMzkzNDZjNzlmOTVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T08:53:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T08:57:12Z"
      },
      "message": "Merge #11516: crypto: Add test cases covering the relevant HMAC-SHA{256,512} key length boundaries\n\na3f5657 Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512 (practicalswift)\n\nPull request description:\n\n  * Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512.\n  * ~~Avoid creating a one-past-the-end pointer in the case of key length 64 (HMAC-SHA256) and key length 128 (HMAC-SHA512).~~\n  * ~~Avoid performing a noop memset call (zero length argument) in the case of key length 64 (HMAC-SHA256) and key length 128 (HMAC-SHA512).~~\n\nTree-SHA512: 48ff9ab79d41aab97b5b8f6496cc08a39955a07eb424f74ada6440d3b168b6204d3527fa677e175c47e40142f9d62c7456ae162e5a2f5b557e90fb353beef1d0",
      "tree": {
        "sha": "6c2a4293bc15772a718267733c07fa81e3364ba8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c2a4293bc15772a718267733c07fa81e3364ba8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e722e8879a8e1eebe02fd14c70c39346c79f95d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaL5noAAoJEB5K7WKYbNJdzX8H/13UvYOyAd2u2i7SCwpGKs/b\nXTht1foC6mxVu5ZruvlMRbGH03xxaeahFACaqbAFHpmMEUVhRnrdkHqLFJm5UY5Z\n4/BliRJ4zzyhXydAHHBzqG+D997rizu8aVG4oUeWBWeeQ81BIGBBgV7RNlRnTUtJ\nfoXP/mT7U6Q7ZYQO0D9B9CcNWE3AFwK8MAwfNPmBoxDkT4pi/6gLXSoFo6JGVEbl\nJSnOHUz6SftC3nZmFBa97zoVbuhXGcCuYDEvyN91QqjbQQMGW7wtL2CZ8WYLt86y\nDw3vBx/8Hr+Zk3zogZC+j9iNjrqg2u+4wNEqVIgXqMDC0/RV/8AIG+oiVffoLvc=\n=pqw+\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c2a4293bc15772a718267733c07fa81e3364ba8\nparent d44535d8189ec2f0e77d445804cca60b869b24a1\nparent a3f56578ab79931f3a35a44b6ff43d0da6308602\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513068806 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513069032 +0100\n\nMerge #11516: crypto: Add test cases covering the relevant HMAC-SHA{256,512} key length boundaries\n\na3f5657 Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512 (practicalswift)\n\nPull request description:\n\n  * Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512.\n  * ~~Avoid creating a one-past-the-end pointer in the case of key length 64 (HMAC-SHA256) and key length 128 (HMAC-SHA512).~~\n  * ~~Avoid performing a noop memset call (zero length argument) in the case of key length 64 (HMAC-SHA256) and key length 128 (HMAC-SHA512).~~\n\nTree-SHA512: 48ff9ab79d41aab97b5b8f6496cc08a39955a07eb424f74ada6440d3b168b6204d3527fa677e175c47e40142f9d62c7456ae162e5a2f5b557e90fb353beef1d0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e722e8879a8e1eebe02fd14c70c39346c79f95d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e722e8879a8e1eebe02fd14c70c39346c79f95d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e722e8879a8e1eebe02fd14c70c39346c79f95d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d44535d8189ec2f0e77d445804cca60b869b24a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44535d8189ec2f0e77d445804cca60b869b24a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d44535d8189ec2f0e77d445804cca60b869b24a1"
      },
      {
        "sha": "a3f56578ab79931f3a35a44b6ff43d0da6308602",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3f56578ab79931f3a35a44b6ff43d0da6308602",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3f56578ab79931f3a35a44b6ff43d0da6308602"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "125b68e76db7eb3287894fd959991b2a3cbbab2e",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e722e8879a8e1eebe02fd14c70c39346c79f95d/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e722e8879a8e1eebe02fd14c70c39346c79f95d/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=0e722e8879a8e1eebe02fd14c70c39346c79f95d",
        "patch": "@@ -340,6 +340,22 @@ BOOST_AUTO_TEST_CASE(hmac_sha256_testvectors) {\n                    \"647320746f20626520686173686564206265666f7265206265696e6720757365\"\n                    \"642062792074686520484d414320616c676f726974686d2e\",\n                    \"9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2\");\n+    // Test case with key length 63 bytes.\n+    TestHMACSHA256(\"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a6566\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"9de4b546756c83516720a4ad7fe7bdbeac4298c6fdd82b15f895a6d10b0769a6\");\n+    // Test case with key length 64 bytes.\n+    TestHMACSHA256(\"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"528c609a4c9254c274585334946b7c2661bad8f1fc406b20f6892478d19163dd\");\n+    // Test case with key length 65 bytes.\n+    TestHMACSHA256(\"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"d06af337f359a2330deffb8e3cbe4b5b7aa8ca1f208528cdbd245d5dc63c4483\");\n }\n \n BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n@@ -383,6 +399,31 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n                    \"642062792074686520484d414320616c676f726974686d2e\",\n                    \"e37b6a775dc87dbaa4dfa9f96e5e3ffddebd71f8867289865df5a32d20cdc944\"\n                    \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n+    // Test case with key length 127 bytes.\n+    TestHMACSHA512(\"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a6566\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"267424dfb8eeb999f3e5ec39a4fe9fd14c923e6187e0897063e5c9e02b2e624a\"\n+                   \"c04413e762977df71a9fb5d562b37f89dfdfb930fce2ed1fa783bbc2a203d80e\");\n+    // Test case with key length 128 bytes.\n+    TestHMACSHA512(\"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"43aaac07bb1dd97c82c04df921f83b16a68d76815cd1a30d3455ad43a3d80484\"\n+                   \"2bb35462be42cc2e4b5902de4d204c1c66d93b47d1383e3e13a3788687d61258\");\n+    // Test case with key length 129 bytes.\n+    TestHMACSHA512(\"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a6566654a6566654a6566654a6566654a6566654a6566654a6566654a656665\"\n+                   \"4a\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"0b273325191cfc1b4b71d5075c8fcad67696309d292b1dad2cd23983a35feb8e\"\n+                   \"fb29795e79f2ef27f68cb1e16d76178c307a67beaad9456fac5fdffeadb16e2c\");\n }\n \n BOOST_AUTO_TEST_CASE(aes_testvectors) {"
      }
    ]
  },
  {
    "sha": "c0902624b0ec6f5fff29eb6e922c58816f395dc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDkwMjYyNGIwZWM2ZjVmZmYyOWViNmU5MjJjNTg4MTZmMzk1ZGM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T09:10:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T09:11:00Z"
      },
      "message": "Merge #10699: Make all script validation flags backward compatible\n\n01013f5 Simplify tx validation tests (Pieter Wuille)\n2dd6f80 Add a test that all flags are softforks (Pieter Wuille)\n2851b77 Make all script verification flags softforks (Pieter Wuille)\n\nPull request description:\n\n  This change makes `SCRIPT_VERIFY_UPGRADABLE_NOPS` not apply to `OP_CHECKLOCKTIMEVERIFY` and `OP_CHECKSEQUENCEVERIFY`. This is a no-op as `UPGRADABLE_NOPS` is only set for mempool transactions, and those always have `SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY` and `SCRIPT_VERIFY_CHECKSEQUENCEVERIFY` set as well. The advantage is that setting more flags now always results in a reduction in acceptable scripts (=softfork).\n\n  This results in a nice and testable property for validation, for which a new test is added.\n\n  This also means that the introduction of a new definition for a NOP or witness version will likely need the following procedure (example OP_NOP8 here)\n  * Remove OP_NOP8 from being affected by `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS`.\n  * Add a `SCRIPT_VERIFY_DISCOURAGE_NOP8`, which only applies to `OP_NOP8`.\n  * Add a `SCRIPT_VERIFY_NOP8` which implements the new consensus logic.\n  * Before activation, add `SCRIPT_VERIFY_DISCOURAGE_NOP8` to the mempool flags.\n  * After activation, add `SCRIPT_VERIFY_NOP8` to both the mempool and consensus flags.\n\nTree-SHA512: d3b4538986ecf646aac9dba13a8d89318baf9e308e258547ca3b99e7c0509747f323edac6b1fea4e87e7d3c01b71193794b41679ae4f86f6e11ed6be3fd62c72",
      "tree": {
        "sha": "55b0aeead40d1bc462db9b313948cb805abbfa3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55b0aeead40d1bc462db9b313948cb805abbfa3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0902624b0ec6f5fff29eb6e922c58816f395dc8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaL50kAAoJEB5K7WKYbNJdAecH/ROS+wymy/LDA7lR3M1hkejp\nXordNUz7eZ9nGiree75noeS9PgqV8KumEQWpik+Cvf2jX355libAQASc9+qsV+KZ\nyUICSw6hnLoEnFGxnh/ZuOq+B2429ePE+OQtyuLJGRfnNpMvDyedx0ruh0tQ99uj\nHfLu9fTAuWw9VpoczuqcnhT0HfLewXBQQftsiyCMUXwUoMKTaU8IykrsBdO6Oh3v\nDA+W++VYKJP5CU6wyXqWsz832gcAWhOf3W6j8NZVcN9+b45RVtUD5jEthDodwhFl\nXqWiDug4q3lq2ERHBhyh/8rJnrXUDc+UMBmnBIVXG9N4Z50rqydmIgXngt/k0zg=\n=mieK\n-----END PGP SIGNATURE-----",
        "payload": "tree 55b0aeead40d1bc462db9b313948cb805abbfa3e\nparent 0e722e8879a8e1eebe02fd14c70c39346c79f95d\nparent 01013f5d2fbe3fa86565c927bf7bb8ec0f525073\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513069814 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513069860 +0100\n\nMerge #10699: Make all script validation flags backward compatible\n\n01013f5 Simplify tx validation tests (Pieter Wuille)\n2dd6f80 Add a test that all flags are softforks (Pieter Wuille)\n2851b77 Make all script verification flags softforks (Pieter Wuille)\n\nPull request description:\n\n  This change makes `SCRIPT_VERIFY_UPGRADABLE_NOPS` not apply to `OP_CHECKLOCKTIMEVERIFY` and `OP_CHECKSEQUENCEVERIFY`. This is a no-op as `UPGRADABLE_NOPS` is only set for mempool transactions, and those always have `SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY` and `SCRIPT_VERIFY_CHECKSEQUENCEVERIFY` set as well. The advantage is that setting more flags now always results in a reduction in acceptable scripts (=softfork).\n\n  This results in a nice and testable property for validation, for which a new test is added.\n\n  This also means that the introduction of a new definition for a NOP or witness version will likely need the following procedure (example OP_NOP8 here)\n  * Remove OP_NOP8 from being affected by `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS`.\n  * Add a `SCRIPT_VERIFY_DISCOURAGE_NOP8`, which only applies to `OP_NOP8`.\n  * Add a `SCRIPT_VERIFY_NOP8` which implements the new consensus logic.\n  * Before activation, add `SCRIPT_VERIFY_DISCOURAGE_NOP8` to the mempool flags.\n  * After activation, add `SCRIPT_VERIFY_NOP8` to both the mempool and consensus flags.\n\nTree-SHA512: d3b4538986ecf646aac9dba13a8d89318baf9e308e258547ca3b99e7c0509747f323edac6b1fea4e87e7d3c01b71193794b41679ae4f86f6e11ed6be3fd62c72\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0902624b0ec6f5fff29eb6e922c58816f395dc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0902624b0ec6f5fff29eb6e922c58816f395dc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0902624b0ec6f5fff29eb6e922c58816f395dc8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e722e8879a8e1eebe02fd14c70c39346c79f95d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e722e8879a8e1eebe02fd14c70c39346c79f95d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e722e8879a8e1eebe02fd14c70c39346c79f95d"
      },
      {
        "sha": "01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01013f5d2fbe3fa86565c927bf7bb8ec0f525073"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 33,
      "deletions": 31
    },
    "files": [
      {
        "sha": "9091af4c0c979cfba2316f2608a099641add0acf",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "patch": "@@ -349,9 +349,6 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 {\n                     if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n                         // not enabled; treat as a NOP2\n-                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n-                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n-                        }\n                         break;\n                     }\n \n@@ -391,9 +388,6 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 {\n                     if (!(flags & SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n                         // not enabled; treat as a NOP3\n-                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n-                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n-                        }\n                         break;\n                     }\n "
      },
      {
        "sha": "83a96739b1704df0c1894153d42ea2ca7c695b08",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "patch": "@@ -27,37 +27,40 @@ enum\n     SIGHASH_ANYONECANPAY = 0x80,\n };\n \n-/** Script verification flags */\n+/** Script verification flags.\n+ *\n+ *  All flags are intended to be soft forks: the set of acceptable scripts under\n+ *  flags (A | B) is a subset of the acceptable scripts under flag (A).\n+ */\n enum\n {\n     SCRIPT_VERIFY_NONE      = 0,\n \n-    // Evaluate P2SH subscripts (softfork safe, BIP16).\n+    // Evaluate P2SH subscripts (BIP16).\n     SCRIPT_VERIFY_P2SH      = (1U << 0),\n \n     // Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n     // Evaluating a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) by checksig causes script failure.\n-    // (softfork safe, but not used or intended as a consensus rule).\n+    // (not used or intended as a consensus rule).\n     SCRIPT_VERIFY_STRICTENC = (1U << 1),\n \n-    // Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\n+    // Passing a non-strict-DER signature to a checksig operation causes script failure (BIP62 rule 1)\n     SCRIPT_VERIFY_DERSIG    = (1U << 2),\n \n     // Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n-    // (softfork safe, BIP62 rule 5).\n+    // (BIP62 rule 5).\n     SCRIPT_VERIFY_LOW_S     = (1U << 3),\n \n-    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\n+    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (BIP62 rule 7).\n     SCRIPT_VERIFY_NULLDUMMY = (1U << 4),\n \n-    // Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).\n+    // Using a non-push operator in the scriptSig causes script failure (BIP62 rule 2).\n     SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),\n \n     // Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct\n     // pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating\n     // any other push causes the script to fail (BIP62 rule 3).\n     // In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).\n-    // (softfork safe)\n     SCRIPT_VERIFY_MINIMALDATA = (1U << 6),\n \n     // Discourage use of NOPs reserved for upgrades (NOP1-10)\n@@ -68,12 +71,14 @@ enum\n     // discouraged NOPs fails the script. This verification flag will never be\n     // a mandatory flag applied to scripts in a block. NOPs that are not\n     // executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\n+    // NOPs that have associated forks to give them new meaning (CLTV, CSV)\n+    // are not subject to this rule.\n     SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),\n \n     // Require that only a single stack element remains after evaluation. This changes the success criterion from\n     // \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to\n     // \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\".\n-    // (softfork safe, BIP62 rule 6)\n+    // (BIP62 rule 6)\n     // Note: CLEANSTACK should never be used without P2SH or WITNESS.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n "
      },
      {
        "sha": "63f43c0fc69461ebd656ba9a3e5d5ed33c0a8af5",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "patch": "@@ -862,8 +862,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"CHECKSEQUENCEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],"
      },
      {
        "sha": "f96d867bc64e4d3485788aafcfde28acad8e4cdb",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "patch": "@@ -166,6 +166,17 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+\n+    // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n+    for (int i = 0; i < 16; ++i) {\n+        int extra_flags = InsecureRandBits(16);\n+        int combined_flags = expect ? (flags & ~extra_flags) : (flags | extra_flags);\n+        // Weed out some invalid flag combinations.\n+        if (combined_flags & SCRIPT_VERIFY_CLEANSTACK && ~combined_flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) continue;\n+        if (combined_flags & SCRIPT_VERIFY_WITNESS && ~combined_flags & SCRIPT_VERIFY_P2SH) continue;\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, combined_flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message + strprintf(\" (with flags %x)\", combined_flags));\n+    }\n+\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;"
      },
      {
        "sha": "fe8cb6126eefb2717323a71e3cbbe2a250c10cf2",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0902624b0ec6f5fff29eb6e922c58816f395dc8/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "patch": "@@ -103,7 +103,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache, bool upgraded_nop)\n+void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -124,12 +124,6 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n-        if (expected_return_value && upgraded_nop) {\n-            // If the script flag being tested corresponds to an upgraded NOP,\n-            // then script execution should fail if DISCOURAGE_UPGRADABLE_NOPS\n-            // is set.\n-            expected_return_value = !(test_flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS);\n-        }\n         BOOST_CHECK_EQUAL(ret, expected_return_value);\n \n         // Test the caching\n@@ -218,7 +212,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // not present.  Don't add these checks to the cache, so that we can\n         // test later that block validation works fine in the absence of cached\n         // successes.\n-        ValidateCheckInputsForAllFlags(spend_tx, SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, false);\n+        ValidateCheckInputsForAllFlags(spend_tx, SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false);\n \n         // And if we produce a block with this tx, it should be valid (DERSIG not\n         // enabled yet), even though there's no cache entry.\n@@ -243,7 +237,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n         invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n \n-        ValidateCheckInputsForAllFlags(invalid_under_p2sh_tx, SCRIPT_VERIFY_P2SH, true, false);\n+        ValidateCheckInputsForAllFlags(invalid_under_p2sh_tx, SCRIPT_VERIFY_P2SH, true);\n     }\n \n     // Test CHECKLOCKTIMEVERIFY\n@@ -266,7 +260,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(invalid_with_cltv_tx, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true);\n+        ValidateCheckInputsForAllFlags(invalid_with_cltv_tx, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true);\n \n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -294,7 +288,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(invalid_with_csv_tx, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true);\n+        ValidateCheckInputsForAllFlags(invalid_with_csv_tx, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true);\n \n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -323,11 +317,11 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         UpdateTransaction(valid_with_witness_tx, 0, sigdata);\n \n         // This should be valid under all script flags.\n-        ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true, false);\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true);\n \n         // Remove the witness, and check that it is now invalid.\n         valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n-        ValidateCheckInputsForAllFlags(valid_with_witness_tx, SCRIPT_VERIFY_WITNESS, true, false);\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, SCRIPT_VERIFY_WITNESS, true);\n     }\n \n     {\n@@ -352,7 +346,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         }\n \n         // This should be valid under all script flags\n-        ValidateCheckInputsForAllFlags(tx, 0, true, false);\n+        ValidateCheckInputsForAllFlags(tx, 0, true);\n \n         // Check that if the second input is invalid, but the first input is\n         // valid, the transaction is not cached."
      }
    ]
  },
  {
    "sha": "d48ab83f00538a5135b2c448809260a9d46ca31c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDhhYjgzZjAwNTM4YTUxMzViMmM0NDg4MDkyNjBhOWQ0NmNhMzFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T09:27:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T09:27:53Z"
      },
      "message": "Merge #11831: Always return true if AppInitMain got to the end\n\n07c4838 Always return true if AppInitMain got to the end (Matt Corallo)\n\nPull request description:\n\n  This should fix a rare zapwallettxes failure on travis, but also\n  avoids having init operations (re-adding wallet transactions to\n  mempool) running after RPC is free'd.\n\n  I believe this was the failure at https://travis-ci.org/bitcoin/bitcoin/jobs/311747844 (from #11605).\n\nTree-SHA512: f0fea8c1b9265e2eeda57043d541380a3e58e4d9388fa24628a52fd56324257fcd7df0ca02e8f77f66fadd68d951893bab0f610ed9fd0a89b2ccd6bad1efa351",
      "tree": {
        "sha": "8ea793e11872823c1a8089f5af49a677603389b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ea793e11872823c1a8089f5af49a677603389b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48ab83f00538a5135b2c448809260a9d46ca31c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaL6EZAAoJEB5K7WKYbNJdh0wH/iscowSJCdVtoe1PFf22q3V7\ngZqlk0zmONu8VVse5Jvlhks3iNdNxbiEEMvVBR9bvkwpiS1ymgDhCpv0HVIjkQE3\nXBYP/jvrY2WrG6/T39VHE3RteZJpPW3qFjeL0KaVhgFDbEE6hD110RrJsOAxJHqA\nuX9oUIy2tWwAYcN6K0J3nBUJnRbuC1OOXR59mDjCEfLhOoVLcvxBpR6HM9rsyFEL\nVgykmOZqt8L4qGud1VKkp0ssAHIFP8yR/3zReOVAjfnf8/w7KI6FHFD/RGvUFiv7\n7/xs75/pu4EgAm8ee8pctk4dXHbpK8XDmyeO3orU5V/yiKxN4hBDBqOym2Ms3wc=\n=cib7\n-----END PGP SIGNATURE-----",
        "payload": "tree 8ea793e11872823c1a8089f5af49a677603389b8\nparent c0902624b0ec6f5fff29eb6e922c58816f395dc8\nparent 07c483895d219d4c44bd8fec5167a53f4701c364\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513070865 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513070873 +0100\n\nMerge #11831: Always return true if AppInitMain got to the end\n\n07c4838 Always return true if AppInitMain got to the end (Matt Corallo)\n\nPull request description:\n\n  This should fix a rare zapwallettxes failure on travis, but also\n  avoids having init operations (re-adding wallet transactions to\n  mempool) running after RPC is free'd.\n\n  I believe this was the failure at https://travis-ci.org/bitcoin/bitcoin/jobs/311747844 (from #11605).\n\nTree-SHA512: f0fea8c1b9265e2eeda57043d541380a3e58e4d9388fa24628a52fd56324257fcd7df0ca02e8f77f66fadd68d951893bab0f610ed9fd0a89b2ccd6bad1efa351\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ab83f00538a5135b2c448809260a9d46ca31c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ab83f00538a5135b2c448809260a9d46ca31c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ab83f00538a5135b2c448809260a9d46ca31c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0902624b0ec6f5fff29eb6e922c58816f395dc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0902624b0ec6f5fff29eb6e922c58816f395dc8"
      },
      {
        "sha": "07c483895d219d4c44bd8fec5167a53f4701c364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c483895d219d4c44bd8fec5167a53f4701c364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07c483895d219d4c44bd8fec5167a53f4701c364"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e4cad01b703a6536ae6e18814466741df7480816",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ab83f00538a5135b2c448809260a9d46ca31c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ab83f00538a5135b2c448809260a9d46ca31c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d48ab83f00538a5135b2c448809260a9d46ca31c",
        "patch": "@@ -1726,5 +1726,5 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     StartWallets(scheduler);\n #endif\n \n-    return !fRequestShutdown;\n+    return true;\n }"
      }
    ]
  },
  {
    "sha": "ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDE4MjBjYmFkMTVjNGViNGUyYzg2YWM4MDMyZDBmYjFiN2I3YzM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T11:52:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T12:09:52Z"
      },
      "message": "Merge #11849: [tests] Assert that only one NetworkThread exists\n\n5c8ff26 [tests] Add NetworkThread assertions (John Newbery)\n34e08b3 [tests] Fix network threading in functional tests (John Newbery)\n74e64f2 [tests] Use network_thread_start() in tests. (John Newbery)\n5fc6e71 [tests] Add network_thread_ utility functions. (John Newbery)\n\nPull request description:\n\n  Add assert that only one NetworkThread exists at any time in functional tests, and fix cases where that wasn't true.\n\n  fixes #11776\n\nTree-SHA512: fe5d1c59005f94bf66e11bb23ccf274b1cd9913741b56ea11dbcd21db4cc0b53b4413c0c4c16dbcd6ac611adad5e5cc2baaa39720598ce7b6393889945d06298",
      "tree": {
        "sha": "308324eaa7fb21e00753fde70c7ee9c45a8da956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/308324eaa7fb21e00753fde70c7ee9c45a8da956"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaL8cQAAoJEB5K7WKYbNJdXiMH/1rD9JLzXiuedQI3npN0EjYt\nBmxn5B2jNaeN0iuTyiHoxpSJY/dzpTVptgfy8DIi44MGe7E1X3K4pNmq6W2fT9MM\n6kf1CDFpfLxGUtgmbPQ5cigJZwoj9a4qjT+eqx5NxT+G1TgXNVPqBQ/0fYIbDqFM\nrc2CDjHP4He7YqPuSdo6ClzNpb9wAicPMW/sP08d1m3Mx9Km6CJELHmDH/VC21BD\nlqGLRIX9K22YGDRMP0gl9tyQQfaYilYuhuZ6WlXSXprOZBgA8lBwwf4g70eWOf3O\nkgYvSvAYTYCyXD76lAj4sbowbkx+hAMv7PavgIzLllF3T3c69TmC31YS9GvR4MQ=\n=hDOR\n-----END PGP SIGNATURE-----",
        "payload": "tree 308324eaa7fb21e00753fde70c7ee9c45a8da956\nparent d48ab83f00538a5135b2c448809260a9d46ca31c\nparent 5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513079553 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513080592 +0100\n\nMerge #11849: [tests] Assert that only one NetworkThread exists\n\n5c8ff26 [tests] Add NetworkThread assertions (John Newbery)\n34e08b3 [tests] Fix network threading in functional tests (John Newbery)\n74e64f2 [tests] Use network_thread_start() in tests. (John Newbery)\n5fc6e71 [tests] Add network_thread_ utility functions. (John Newbery)\n\nPull request description:\n\n  Add assert that only one NetworkThread exists at any time in functional tests, and fix cases where that wasn't true.\n\n  fixes #11776\n\nTree-SHA512: fe5d1c59005f94bf66e11bb23ccf274b1cd9913741b56ea11dbcd21db4cc0b53b4413c0c4c16dbcd6ac611adad5e5cc2baaa39720598ce7b6393889945d06298\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48ab83f00538a5135b2c448809260a9d46ca31c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ab83f00538a5135b2c448809260a9d46ca31c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ab83f00538a5135b2c448809260a9d46ca31c"
      },
      {
        "sha": "5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 96,
      "deletions": 42
    },
    "files": [
      {
        "sha": "6be4d9cfabc5004c00a0fc2019b98a3da9f0688d",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -68,7 +68,7 @@ contains the higher level logic for processing P2P payloads and connecting to\n the Bitcoin Core node application logic. For custom behaviour, subclass the\n P2PInterface object and override the callback methods.\n \n-- Call `NetworkThread.start()` after all `P2PInterface` objects are created to\n+- Call `network_thread_start()` after all `P2PInterface` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n "
      },
      {
        "sha": "362b94e0d32dead0c457fd56341a3c788ad70457",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -38,7 +38,8 @@\n                                      CTransaction,\n                                      CTxIn,\n                                      CTxOut,\n-                                     NetworkThread,\n+                                     network_thread_join,\n+                                     network_thread_start,\n                                      P2PInterface,\n                                      msg_block,\n                                      msg_headers)\n@@ -98,7 +99,7 @@ def run_test(self):\n         # Connect to node0\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         # Build the blockchain\n@@ -159,13 +160,22 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n+        # We're adding new connections so terminate the network thread\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.wait_for_verack()\n-\n         self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n+\n+        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+\n+        network_thread_start()\n+\n+        p2p0.wait_for_verack()\n+        p2p1.wait_for_verack()\n         p2p2.wait_for_verack()\n \n         # send header lists to all three nodes"
      },
      {
        "sha": "f4df879723f70957ab95a05a4c7c9a90c10edcff",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -68,7 +68,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "d3c7d8fc1138a1d6fba060bde14b6f17c87f915b",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -45,7 +45,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n@@ -100,7 +100,7 @@ def set_test_params(self):\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def send_generic_input_tx(self, node, coinbases):"
      },
      {
        "sha": "4cd6a177aa4e95487c6038e376b4a0c2b77c51a6",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -22,7 +22,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n@@ -36,7 +36,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.test.run()\n \n     def create_transaction(self, node, coinbase, to_address, amount):\n@@ -245,7 +245,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.setup_chain()\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start()\n+        network_thread_start()\n         self.test.p2p_connections[0].wait_for_verack()\n \n     def get_tests(self):"
      },
      {
        "sha": "5d7b889e83c6c26e459f5ef59b0d25cd5e7b643e",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -56,7 +56,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "12be685ecf4232a83ebd598f35579d82468236cd",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -17,11 +17,12 @@\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.mininode import (\n     CInv,\n-    NetworkThread,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    network_thread_join,\n+    network_thread_start,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -131,12 +132,12 @@ def custom_method(self):\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n-        # Create a P2P connection to one of the nodes\n+        # Create P2P connections to two of the nodes\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Start up network handling in another thread. This needs to be called\n         # after the P2P connections have been created.\n-        NetworkThread().start()\n+        network_thread_start()\n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()\n \n@@ -188,7 +189,14 @@ def run_test(self):\n         connect_nodes(self.nodes[1], 2)\n \n         self.log.info(\"Add P2P connection to node2\")\n+        # We can't add additional P2P connections once the network thread has started. Disconnect the connection\n+        # to node0, wait for the network thread to terminate, then connect to node2. This is specific to\n+        # the current implementation of the network thread and may be improved in future.\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+\n         self.nodes[2].add_p2p_connection(BaseNode())\n+        network_thread_start()\n         self.nodes[2].p2p.wait_for_verack()\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")"
      },
      {
        "sha": "a89d1d8ef246c97603c10f83241f96f73b6bde0b",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -15,6 +15,7 @@\n from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.blocktools import *\n+from test_framework.mininode import network_thread_start\n import copy\n import time\n \n@@ -32,7 +33,7 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "c60b0fce16f15eceb540fc322298d0636ab6b6dd",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "cf2e484d9f50b2e1642c77c33cfc936f9c1ab957",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -57,7 +57,7 @@ def run_test(self):\n         for _ in range(3):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         for p2pc in p2p_conns:\n             p2pc.wait_for_verack()\n \n@@ -149,7 +149,7 @@ def run_test(self):\n         # Reconnect to self.nodes[0]\n         self.nodes[0].add_p2p_connection(TestNode())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit"
      },
      {
        "sha": "9f9f2f90c0ff467cf0405ab0a19dd6957697139c",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -15,7 +15,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n from test_framework.script import CScript\n from io import BytesIO\n@@ -50,7 +50,7 @@ def run_test(self):\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.coinbase_blocks = self.nodes[0].generate(2) # Block 2\n         coinbase_txid = []\n         for i in self.coinbase_blocks:"
      },
      {
        "sha": "bb204322ed34d71eca8fcdbf0a1ed1819ea2ae3f",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -83,7 +83,7 @@ def run_test(self):\n         # min_work_node connects to node1 (whitelisted)\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n@@ -207,9 +207,13 @@ def run_test(self):\n         # disconnect/reconnect first\n \n         self.nodes[0].disconnect_p2ps()\n-        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.nodes[1].disconnect_p2ps()\n+        network_thread_join()\n \n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        network_thread_start()\n         test_node.wait_for_verack()\n+\n         test_node.send_message(msg_block(block_h1f))\n \n         test_node.sync_with_ping()\n@@ -294,7 +298,7 @@ def run_test(self):\n             self.nodes[0].disconnect_p2ps()\n             test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-            NetworkThread().start() # Start up network handling in another thread\n+            network_thread_start()\n             test_node.wait_for_verack()\n \n         # We should have failed reorg and switched back to 290 (but have block 291)"
      },
      {
        "sha": "1e763df2a4012862706815f21a2a1742c85a2949",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -792,7 +792,7 @@ def run_test(self):\n         self.segwit_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n         self.old_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         self.test_node.wait_for_verack()\n "
      },
      {
        "sha": "ff4bed0efd026dcc2f61881629000c65ea813064",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -49,7 +49,7 @@ def run_test(self):\n \n         # Setup the p2p connections and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-        NetworkThread().start()\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte"
      },
      {
        "sha": "93ef73e25eddcd07976bee10fedaf4bb31528be7",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -13,12 +13,12 @@\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.mininode import (\n     CInv,\n-    NetworkThread,\n     P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n     msg_getheaders,\n+    network_thread_start,\n     wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -77,7 +77,7 @@ def last_header_equals(self, expected_hash, node):\n     def run_test(self):\n         node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start()\n+        network_thread_start()\n         node0.wait_for_verack()\n \n         # Set node time to 60 days ago"
      },
      {
        "sha": "010dbdccad3124b040de8d80b179c0c901829f25",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -18,6 +18,7 @@\n import time\n from test_framework.key import CECKey\n from test_framework.script import *\n+from test_framework.mininode import network_thread_start\n import struct\n \n class PreviousSpendableOutput():\n@@ -68,7 +69,7 @@ def add_options(self, parser):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.test.run()\n \n     def add_transactions_to_block(self, block, tx_list):"
      },
      {
        "sha": "ce4e6e914457fc443ecb7cec0e895cb44d168f10",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         unsupported_service_bit5_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n         unsupported_service_bit7_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n         wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n@@ -126,8 +126,9 @@ def run_test(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n-        # Wait until all connections are closed\n+        # Wait until all connections are closed and the network thread has terminated\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+        network_thread_join()\n \n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)\n@@ -142,7 +143,8 @@ def run_test(self):\n         allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n         allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n+        # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n+        network_thread_start()\n \n         wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n         wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)"
      },
      {
        "sha": "168f9f685a1714293555aeba04fd0386937b783f",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -21,7 +21,7 @@ def set_test_params(self):\n     def run_test(self):\n         # Add a p2p connection\n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        NetworkThread().start()\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         #request mempool"
      },
      {
        "sha": "a06601c38ef1494548056eea5930e3cdb1eb2688",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -1882,7 +1882,7 @@ def run_test(self):\n         # self.std_node is for testing node1 (fRequireStandard=true)\n         self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Keep a place to store utxo's that can be used in later tests\n         self.utxo = []"
      },
      {
        "sha": "984a3c8b903810d64f3ee467cfe55d9305d0b499",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         no_version_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n         no_send_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         sleep(1)\n "
      },
      {
        "sha": "d29d43ebedf396c04a0b053a4801968d4b46e67f",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "256227f721f90ba2f0b291836fff3a338ee1eb61",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -90,7 +90,7 @@\n     CBlockHeader,\n     CInv,\n     NODE_WITNESS,\n-    NetworkThread,\n+    network_thread_start,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n@@ -238,7 +238,7 @@ def run_test(self):\n         # will occur outside of direct fetching\n         test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         inv_node.wait_for_verack()"
      },
      {
        "sha": "724d418099b38308d00da29d3d5a4470d6c5615b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "patch": "@@ -18,7 +18,7 @@\n import socket\n import struct\n import sys\n-from threading import RLock, Thread\n+import threading\n \n from test_framework.messages import *\n from test_framework.util import wait_until\n@@ -69,6 +69,10 @@ class P2PConnection(asyncore.dispatcher):\n     sub-classed and the on_message() callback overridden.\"\"\"\n \n     def __init__(self):\n+        # All P2PConnections must be created before starting the NetworkThread.\n+        # assert that the network thread is not running.\n+        assert not network_thread_running()\n+\n         super().__init__(map=mininode_socket_map)\n \n     def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n@@ -397,9 +401,12 @@ def sync_with_ping(self, timeout=60):\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = RLock()\n+mininode_lock = threading.RLock()\n+\n+class NetworkThread(threading.Thread):\n+    def __init__(self):\n+        super().__init__(name=\"NetworkThread\")\n \n-class NetworkThread(Thread):\n     def run(self):\n         while mininode_socket_map:\n             # We check for whether to disconnect outside of the asyncore\n@@ -412,3 +419,24 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+def network_thread_start():\n+    \"\"\"Start the network thread.\"\"\"\n+    # Only one network thread may run at a time\n+    assert not network_thread_running()\n+\n+    NetworkThread().start()\n+\n+def network_thread_running():\n+    \"\"\"Return whether the network thread is running.\"\"\"\n+    return any([thread.name == \"NetworkThread\" for thread in threading.enumerate()])\n+\n+def network_thread_join(timeout=10):\n+    \"\"\"Wait timeout seconds for the network thread to terminate.\n+\n+    Throw if the network thread doesn't terminate in timeout seconds.\"\"\"\n+    network_threads = [thread for thread in threading.enumerate() if thread.name == \"NetworkThread\"]\n+    assert len(network_threads) <= 1\n+    for thread in network_threads:\n+        thread.join(timeout)\n+        assert not thread.is_alive()"
      }
    ]
  },
  {
    "sha": "214046f69b1978129030ba1f65007d57b29f0761",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTQwNDZmNjliMTk3ODEyOTAzMGJhMWY2NTAwN2Q1N2IyOWYwNzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T13:06:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T13:36:57Z"
      },
      "message": "Merge #10279: Add a CChainState class to validation.cpp to take another step towards clarifying internal interfaces\n\n22fddde Avoid calling GetSerializeSize on each tx in a block if !fTxIndex (Matt Corallo)\n2862aca Move some additional variables into CChainState private (Matt Corallo)\nfd4d80a Create initial CChainState to hold chain state information (Matt Corallo)\ne104f0f Move block writing out of AcceptBlock (Matt Corallo)\n50701ba Move txindex/undo data disk location stuff out of ConnectBlock (Matt Corallo)\n93a34cf Make DisconnectBlock unaware of where undo data resides on disk (Matt Corallo)\n\nPull request description:\n\n  CChainState should eventually, essentially, be our exposed \"libconsensus\", but we're probably a few releases away, so the real goal is to clarify our internal interfaces. The main split was a big step, but validation.cpp is still a somewhat ranomly-mixed bag of functions that are pure functions which validate inputs (which should probably either merge with their callers or move into another file in consensus/), read/write data from disk, manipulate our current chain state (which moves into CChainState), and do mempool transaction validation.\n\n  Obviously this is only a small step, but some effort is made to clean up what functions the functions in CChainState call, and obviously as things are added its easy to keep clear \"CChainState::* cannot call anything except via callbacks through CValidationInterface, pure functions, or disk read/write things\". Right now there are some glaring violations in mempool callbacks, and general flushing logic needs cleaning up (FlushStateToDisk maybe shouldnt be called, and there should be an API towards setDirtyBlockIndex, but I'll leave that for after @sipa's current changesets land).\n\nTree-SHA512: 69b8ec191b36b19c9492b4dee74c8057621fb6ec98ad219e8da0b2ed5c3ad711b10b5af9ff1117e8807ccf88918eeeab573be8448baecc9a59f099c53095985b",
      "tree": {
        "sha": "273c8f076b9e9d5678e74bb4af88139f5953adc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/273c8f076b9e9d5678e74bb4af88139f5953adc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/214046f69b1978129030ba1f65007d57b29f0761",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaL9t5AAoJEB5K7WKYbNJdeikH/RAAZpXwWjYFprNKPsOua0fS\nNBKSu9QRSJbV07FhXeiXgjEiB9dUzjv3nHWTSDlZS2w8ejWoE8PxF0oGfoxfNd+X\nDLKOLfRNge4g/78syBJiPv+PhpUcc/d1EjXHYa9iVWB7oup008AFLH/XHXZGE5nE\nQrkuy6nMYGuItvmKwdYm1TtzX1O9bM5rT6xA6squ6YuXSUzqCqiV9DYsvqBf0qmy\nuEZL6XF/jWK8NV41YxWaXXZ9ar1aeyJIupweQQ5XS0lfDMOKDiRaXo85gfGxTKp+\ncxFex6zG84BSNfOVB+lW1NHF2colZaE1GYZr7s/02cW3tNh10Ekis3wAw/P8fI8=\n=8ges\n-----END PGP SIGNATURE-----",
        "payload": "tree 273c8f076b9e9d5678e74bb4af88139f5953adc5\nparent ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35\nparent 22fdddeabb17881af2004c45538f91514837d363\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513084005 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513085817 +0100\n\nMerge #10279: Add a CChainState class to validation.cpp to take another step towards clarifying internal interfaces\n\n22fddde Avoid calling GetSerializeSize on each tx in a block if !fTxIndex (Matt Corallo)\n2862aca Move some additional variables into CChainState private (Matt Corallo)\nfd4d80a Create initial CChainState to hold chain state information (Matt Corallo)\ne104f0f Move block writing out of AcceptBlock (Matt Corallo)\n50701ba Move txindex/undo data disk location stuff out of ConnectBlock (Matt Corallo)\n93a34cf Make DisconnectBlock unaware of where undo data resides on disk (Matt Corallo)\n\nPull request description:\n\n  CChainState should eventually, essentially, be our exposed \"libconsensus\", but we're probably a few releases away, so the real goal is to clarify our internal interfaces. The main split was a big step, but validation.cpp is still a somewhat ranomly-mixed bag of functions that are pure functions which validate inputs (which should probably either merge with their callers or move into another file in consensus/), read/write data from disk, manipulate our current chain state (which moves into CChainState), and do mempool transaction validation.\n\n  Obviously this is only a small step, but some effort is made to clean up what functions the functions in CChainState call, and obviously as things are added its easy to keep clear \"CChainState::* cannot call anything except via callbacks through CValidationInterface, pure functions, or disk read/write things\". Right now there are some glaring violations in mempool callbacks, and general flushing logic needs cleaning up (FlushStateToDisk maybe shouldnt be called, and there should be an API towards setDirtyBlockIndex, but I'll leave that for after @sipa's current changesets land).\n\nTree-SHA512: 69b8ec191b36b19c9492b4dee74c8057621fb6ec98ad219e8da0b2ed5c3ad711b10b5af9ff1117e8807ccf88918eeeab573be8448baecc9a59f099c53095985b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214046f69b1978129030ba1f65007d57b29f0761",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/214046f69b1978129030ba1f65007d57b29f0761",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214046f69b1978129030ba1f65007d57b29f0761/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35"
      },
      {
        "sha": "22fdddeabb17881af2004c45538f91514837d363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22fdddeabb17881af2004c45538f91514837d363",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22fdddeabb17881af2004c45538f91514837d363"
      }
    ],
    "stats": {
      "total": 487,
      "additions": 315,
      "deletions": 172
    },
    "files": [
      {
        "sha": "946a916e822c801652bfb0f74060bdd63a5534cd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 312,
        "deletions": 167,
        "changes": 479,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/214046f69b1978129030ba1f65007d57b29f0761/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/214046f69b1978129030ba1f65007d57b29f0761/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=214046f69b1978129030ba1f65007d57b29f0761",
        "patch": "@@ -59,48 +59,7 @@\n /**\n  * Global state\n  */\n-\n-CCriticalSection cs_main;\n-\n-BlockMap mapBlockIndex;\n-CChain chainActive;\n-CBlockIndex *pindexBestHeader = nullptr;\n-CWaitableCriticalSection csBestBlock;\n-CConditionVariable cvBlockChange;\n-int nScriptCheckThreads = 0;\n-std::atomic_bool fImporting(false);\n-std::atomic_bool fReindex(false);\n-bool fTxIndex = false;\n-bool fHavePruned = false;\n-bool fPruneMode = false;\n-bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n-bool fRequireStandard = true;\n-bool fCheckBlockIndex = false;\n-bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n-size_t nCoinCacheUsage = 5000 * 300;\n-uint64_t nPruneTarget = 0;\n-int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n-bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n-\n-uint256 hashAssumeValid;\n-arith_uint256 nMinimumChainWork;\n-\n-CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n-CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n-\n-CBlockPolicyEstimator feeEstimator;\n-CTxMemPool mempool(&feeEstimator);\n-\n-static void CheckBlockIndex(const Consensus::Params& consensusParams);\n-\n-/** Constant stuff for coinbase transactions we create: */\n-CScript COINBASE_FLAGS;\n-\n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n-\n-// Internal stuff\n namespace {\n-\n     struct CBlockIndexWorkComparator\n     {\n         bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n@@ -121,28 +80,39 @@ namespace {\n             return false;\n         }\n     };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n \n-    CBlockIndex *pindexBestInvalid;\n+class ConnectTrace;\n \n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks via the validation interface, or read/write-to-disk\n+ * functions (eventually this will also be via callbacks).\n+ */\n+class CChainState {\n+private:\n     /**\n      * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n      * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n      * missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n-    /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n-     * Pruned nodes may have entries where B is missing data.\n-     */\n-    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n-\n-    CCriticalSection cs_LastBlockFile;\n-    std::vector<CBlockFileInfo> vinfoBlockFile;\n-    int nLastBlockFile = 0;\n-    /** Global flag to indicate we should check to see if there are\n-     *  block/undo files that should be deleted.  Set on startup\n-     *  or if we allocate more file space when we're in prune mode\n-     */\n-    bool fCheckForPruning = false;\n \n     /**\n      * Every received block is assigned a unique and increasing identifier, so we\n@@ -176,6 +146,113 @@ namespace {\n       */\n     std::set<CBlockIndex*> g_failed_blocks;\n \n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;\n+\n+    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+    bool RewindBlockIndex(const CChainParams& params);\n+    bool LoadGenesisBlock(const CChainParams& chainparams);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    void UnloadBlockIndex();\n+\n+private:\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n+\n+    CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n+    /** Create a new block index entry for a given block hash */\n+    CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    void CheckBlockIndex(const Consensus::Params& consensusParams);\n+\n+    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n+    CBlockIndex* FindMostWorkChain();\n+    bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+\n+\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n+} g_chainstate;\n+\n+\n+\n+CCriticalSection cs_main;\n+\n+BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n+CChain& chainActive = g_chainstate.chainActive;\n+CBlockIndex *pindexBestHeader = nullptr;\n+CWaitableCriticalSection csBestBlock;\n+CConditionVariable cvBlockChange;\n+int nScriptCheckThreads = 0;\n+std::atomic_bool fImporting(false);\n+std::atomic_bool fReindex(false);\n+bool fTxIndex = false;\n+bool fHavePruned = false;\n+bool fPruneMode = false;\n+bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n+bool fRequireStandard = true;\n+bool fCheckBlockIndex = false;\n+bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n+size_t nCoinCacheUsage = 5000 * 300;\n+uint64_t nPruneTarget = 0;\n+int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n+bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n+\n+uint256 hashAssumeValid;\n+arith_uint256 nMinimumChainWork;\n+\n+CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n+\n+CBlockPolicyEstimator feeEstimator;\n+CTxMemPool mempool(&feeEstimator);\n+\n+/** Constant stuff for coinbase transactions we create: */\n+CScript COINBASE_FLAGS;\n+\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n+// Internal stuff\n+namespace {\n+    CBlockIndex *&pindexBestInvalid = g_chainstate.pindexBestInvalid;\n+\n+    /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n+     * Pruned nodes may have entries where B is missing data.\n+     */\n+    std::multimap<CBlockIndex*, CBlockIndex*>& mapBlocksUnlinked = g_chainstate.mapBlocksUnlinked;\n+\n+    CCriticalSection cs_LastBlockFile;\n+    std::vector<CBlockFileInfo> vinfoBlockFile;\n+    int nLastBlockFile = 0;\n+    /** Global flag to indicate we should check to see if there are\n+     *  block/undo files that should be deleted.  Set on startup\n+     *  or if we allocate more file space when we're in prune mode\n+     */\n+    bool fCheckForPruning = false;\n+\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -1201,7 +1278,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         g_failed_blocks.insert(pindex);\n@@ -1384,8 +1461,13 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull()) {\n+        return error(\"%s: no undo data available\", __func__);\n+    }\n+\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n@@ -1395,7 +1477,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     uint256 hashChecksum;\n     CHashVerifier<CAutoFile> verifier(&filein); // We need a CHashVerifier as reserializing may lose data\n     try {\n-        verifier << hashBlock;\n+        verifier << pindex->pprev->GetBlockHash();\n         verifier >> blockundo;\n         filein >> hashChecksum;\n     }\n@@ -1430,13 +1512,6 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n \n } // namespace\n \n-enum DisconnectResult\n-{\n-    DISCONNECT_OK,      // All good.\n-    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n-    DISCONNECT_FAILED   // Something else went wrong.\n-};\n-\n /**\n  * Restore the UTXO in a Coin at a given COutPoint\n  * @param undo The Coin to be restored.\n@@ -1473,17 +1548,12 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  When FAILED is returned, view is left in an indeterminate state. */\n-static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n+DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n     bool fClean = true;\n \n     CBlockUndo blockUndo;\n-    CDiskBlockPos pos = pindex->GetUndoPos();\n-    if (pos.IsNull()) {\n-        error(\"DisconnectBlock(): no undo data available\");\n-        return DISCONNECT_FAILED;\n-    }\n-    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash())) {\n+    if (!UndoReadFromDisk(blockUndo, pindex)) {\n         error(\"DisconnectBlock(): failure reading undo data\");\n         return DISCONNECT_FAILED;\n     }\n@@ -1560,6 +1630,45 @@ void static FlushBlockFile(bool fFinalize = false)\n \n static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+        setDirtyBlockIndex.insert(pindex);\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    if (!fTxIndex) return true;\n+\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    if (!pblocktree->WriteTxIndex(vPos)) {\n+        return AbortNode(state, \"Failed to write transaction index\");\n+    }\n+\n+    return true;\n+}\n+\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck() {\n@@ -1660,8 +1769,8 @@ static int64_t nBlocksTotal = 0;\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n-static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n+bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -1787,9 +1896,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     CAmount nFees = 0;\n     int nInputs = 0;\n     int64_t nSigOpsCost = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     std::vector<PrecomputedTransactionData> txdata;\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n@@ -1850,9 +1956,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n             blockundo.vtxundo.push_back(CTxUndo());\n         }\n         UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n-\n-        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n@@ -1872,28 +1975,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (fJustCheck)\n         return true;\n \n-    // Write undo information to disk\n-    if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n-    {\n-        if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos _pos;\n-            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n-                return AbortNode(state, \"Failed to write undo data\");\n-\n-            // update nUndoPos in block index\n-            pindex->nUndoPos = _pos.nPos;\n-            pindex->nStatus |= BLOCK_HAVE_UNDO;\n-        }\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+        return false;\n \n+    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n         pindex->RaiseValidity(BLOCK_VALID_SCRIPTS);\n         setDirtyBlockIndex.insert(pindex);\n     }\n \n-    if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n-            return AbortNode(state, \"Failed to write transaction index\");\n+    if (!WriteTxIndexDataForBlock(block, state, pindex))\n+        return false;\n \n     assert(pindex->phashBlock);\n     // add this block to the view's block chain\n@@ -2045,10 +2136,8 @@ static void DoWarning(const std::string& strWarning)\n     }\n }\n \n-/** Update chainActive and related internal data structures. */\n-void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n-    chainActive.SetTip(pindexNew);\n-\n+/** Check warning conditions and do some notifications on new chain tip set. */\n+void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     // New best block\n     mempool.AddTransactionsUpdated(1);\n \n@@ -2058,7 +2147,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     if (!IsInitialBlockDownload())\n     {\n         int nUpgraded = 0;\n-        const CBlockIndex* pindex = chainActive.Tip();\n+        const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n             ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n@@ -2089,10 +2178,10 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n         }\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__,\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), chainActive.Tip()->nVersion,\n-      log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), chainActive.Tip()), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n+      pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n+      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexNew->GetBlockTime()),\n+      GuessVerificationProgress(chainParams.TxData(), pindexNew), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n         LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n     LogPrintf(\"\\n\");\n@@ -2109,7 +2198,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n+bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2146,7 +2235,8 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         }\n     }\n \n-    // Update chainActive and related variables.\n+    chainActive.SetTip(pindexDelete->pprev);\n+\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n@@ -2231,7 +2321,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2275,6 +2365,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update chainActive & related variables.\n+    chainActive.SetTip(pindexNew);\n     UpdateTip(pindexNew, chainparams);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n@@ -2289,7 +2380,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n  * Return the tip of the chain with the most work in it, that isn't\n  * known to be invalid (it's however far from certain to be valid).\n  */\n-static CBlockIndex* FindMostWorkChain() {\n+CBlockIndex* CChainState::FindMostWorkChain() {\n     do {\n         CBlockIndex *pindexNew = nullptr;\n \n@@ -2344,7 +2435,7 @@ static CBlockIndex* FindMostWorkChain() {\n }\n \n /** Delete all entries in setBlockIndexCandidates that are worse than the current tip. */\n-static void PruneBlockIndexCandidates() {\n+void CChainState::PruneBlockIndexCandidates() {\n     // Note that we can't delete the current block itself, as we may need to return to it later in case a\n     // reorganization to a better block fails.\n     std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n@@ -2359,7 +2450,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2466,7 +2557,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either nullptr or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     // Note that while we're often called here from ProcessNewBlock, this is\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n@@ -2536,9 +2627,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n     return true;\n }\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+    return g_chainstate.ActivateBestChain(state, chainparams, std::move(pblock));\n+}\n \n-\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n {\n     {\n         LOCK(cs_main);\n@@ -2564,10 +2657,13 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n         }\n     }\n \n-    return ActivateBestChain(state, params);\n+    return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n+}\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {\n+    return g_chainstate.PreciousBlock(state, params, pindex);\n }\n \n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n \n@@ -2626,8 +2722,11 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n     return true;\n }\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n+    return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n+}\n \n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     AssertLockHeld(cs_main);\n \n     int nHeight = pindex->nHeight;\n@@ -2660,8 +2759,11 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n     return true;\n }\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+    return g_chainstate.ResetBlockFailureFlags(pindex);\n+}\n \n-static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n+CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -2696,7 +2798,7 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool CChainState::ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -2744,7 +2846,7 @@ static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& sta\n     return true;\n }\n \n-static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -2793,7 +2895,7 @@ static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned i\n                 }\n             }\n             else\n-                return state.Error(\"out of disk space\");\n+                return error(\"out of disk space\");\n         }\n     }\n \n@@ -3101,7 +3203,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     return true;\n }\n \n-static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n+bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -3168,7 +3270,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n-            if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+            if (!g_chainstate.AcceptBlockHeader(header, state, chainparams, &pindex)) {\n                 if (first_invalid) *first_invalid = header;\n                 return false;\n             }\n@@ -3182,7 +3284,26 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != nullptr)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n+        error(\"%s: FindBlockPos failed\", __func__);\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == nullptr) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n+            AbortNode(\"Failed to write block\");\n+            return CDiskBlockPos();\n+        }\n+    }\n+    return blockPos;\n+}\n+\n+/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3242,19 +3363,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != nullptr)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == nullptr)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n+            return false;\n+        }\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n@@ -3264,6 +3379,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (fCheckForPruning)\n         FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     return true;\n }\n \n@@ -3281,9 +3398,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n         if (ret) {\n             // Store to disk\n-            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n-        CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.GetDebugMessage());\n@@ -3293,7 +3409,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -3315,7 +3431,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3523,7 +3639,7 @@ fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n \n-CBlockIndex * InsertBlockIndex(uint256 hash)\n+CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n {\n     if (hash.IsNull())\n         return nullptr;\n@@ -3541,9 +3657,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n+    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash){ return this->InsertBlockIndex(hash); }))\n         return false;\n \n     boost::this_thread::interruption_point();\n@@ -3590,6 +3706,14 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n             pindexBestHeader = pindex;\n     }\n \n+    return true;\n+}\n+\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+{\n+    if (!g_chainstate.LoadBlockIndex(chainparams.GetConsensus(), *pblocktree))\n+        return false;\n+\n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n@@ -3662,7 +3786,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n         return false;\n     chainActive.SetTip(it->second);\n \n-    PruneBlockIndexCandidates();\n+    g_chainstate.PruneBlockIndexCandidates();\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n@@ -3727,16 +3851,16 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n-            CDiskBlockPos pos = pindex->GetUndoPos();\n-            if (!pos.IsNull()) {\n-                if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n+            if (!pindex->GetUndoPos().IsNull()) {\n+                if (!UndoReadFromDisk(undo, pindex)) {\n                     return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                }\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n-            DisconnectResult res = DisconnectBlock(block, pindex, coins);\n+            DisconnectResult res = g_chainstate.DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n@@ -3764,7 +3888,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!g_chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n@@ -3776,7 +3900,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n }\n \n /** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n-static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n {\n     // TODO: merge with ConnectBlock\n     CBlock block;\n@@ -3796,7 +3920,7 @@ static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs,\n     return true;\n }\n \n-bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n {\n     LOCK(cs_main);\n \n@@ -3861,7 +3985,11 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     return true;\n }\n \n-bool RewindBlockIndex(const CChainParams& params)\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n+    return g_chainstate.ReplayBlocks(params, view);\n+}\n+\n+bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n \n@@ -3942,10 +4070,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n \n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {\n+    if (!g_chainstate.RewindBlockIndex(params)) {\n+        return false;\n+    }\n+\n+    if (chainActive.Tip() != nullptr) {\n         // FlushStateToDisk can possibly read chainActive. Be conservative\n         // and skip it here, we're about to -reindex-chainstate anyway, so\n         // it'll get called a bunch real soon.\n+        CValidationState state;\n         if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS)) {\n             return false;\n         }\n@@ -3954,23 +4093,26 @@ bool RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n+void CChainState::UnloadBlockIndex() {\n+    nBlockSequenceId = 1;\n+    g_failed_blocks.clear();\n+    setBlockIndexCandidates.clear();\n+}\n+\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n-    setBlockIndexCandidates.clear();\n     chainActive.SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n     mempool.clear();\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n-    nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n-    g_failed_blocks.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n@@ -3982,6 +4124,8 @@ void UnloadBlockIndex()\n     }\n     mapBlockIndex.clear();\n     fHavePruned = false;\n+\n+    g_chainstate.UnloadBlockIndex();\n }\n \n bool LoadBlockIndex(const CChainParams& chainparams)\n@@ -4009,7 +4153,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadGenesisBlock(const CChainParams& chainparams)\n+bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n@@ -4022,15 +4166,11 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n-        // Start new block file\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        CValidationState state;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-            return error(\"%s: FindBlockPos failed\", __func__);\n-        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n+        CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n+        if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = AddToBlockIndex(block);\n+        CValidationState state;\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n             return error(\"%s: genesis block not accepted\", __func__);\n     } catch (const std::runtime_error& e) {\n@@ -4040,6 +4180,11 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return true;\n }\n \n+bool LoadGenesisBlock(const CChainParams& chainparams)\n+{\n+    return g_chainstate.LoadGenesisBlock(chainparams);\n+}\n+\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n@@ -4100,7 +4245,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n+                    if (g_chainstate.AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -4134,7 +4279,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            if (g_chainstate.AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n@@ -4157,7 +4302,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     return nLoaded > 0;\n }\n \n-void static CheckBlockIndex(const Consensus::Params& consensusParams)\n+void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n {\n     if (!fCheckBlockIndex) {\n         return;\n@@ -4499,7 +4644,7 @@ bool DumpMempool(void)\n }\n \n //! Guess how far we are in the verification process at the given block index\n-double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n+double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {\n     if (pindex == nullptr)\n         return 0.0;\n "
      },
      {
        "sha": "4c8e041af0c742e6a83f2b6964de97c422d77e06",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/214046f69b1978129030ba1f65007d57b29f0761/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/214046f69b1978129030ba1f65007d57b29f0761/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=214046f69b1978129030ba1f65007d57b29f0761",
        "patch": "@@ -159,7 +159,7 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap mapBlockIndex;\n+extern BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n@@ -281,7 +281,7 @@ bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams,\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n-double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n+double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex* pindex);\n \n /** Calculate the amount of disk space the block & undo files currently use */\n uint64_t CalculateCurrentUsage();\n@@ -296,8 +296,6 @@ void PruneOneBlockFile(const int fileNumber);\n  */\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n-/** Create a new block index entry for a given block hash */\n-CBlockIndex * InsertBlockIndex(uint256 hash);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n@@ -443,7 +441,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain chainActive;\n+extern CChain& chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "5d132e8b974652d96466a1b73ec1231614719fe2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDEzMmU4Yjk3NDY1MmQ5NjQ2NmExYjczZWMxMjMxNjE0NzE5ZmUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T13:37:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T13:56:25Z"
      },
      "message": "Merge #10574: Remove includes in .cpp files for things the corresponding .h file already included\n\na720b92 Remove includes in .cpp files for things the corresponding .h file already included (practicalswift)\n\nPull request description:\n\n  Remove includes in .cpp files for things the corresponding .h file already included.\n\n  Example case:\n  * `addrdb.cpp` includes `addrdb.h` and `fs.h`\n  * `addrdb.h` includes `fs.h`\n\n  Then remove the direct inclusion of `fs.h` in `addrman.cpp` and rely on the indirect inclusion of `fs.h` via the included `addrdb.h`.\n\n  In line with the header include guideline (see #10575).\n\nTree-SHA512: 8704b9de3011a4c234db336a39f7d2c139e741cf0f7aef08a5d3e05197e1e18286b863fdab25ae9638af4ff86b3d52e5cab9eed66bfa2476063aa5c79f9b0346",
      "tree": {
        "sha": "cbb8e4edcedf9151adc6f6e0583a20b1ec47c32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbb8e4edcedf9151adc6f6e0583a20b1ec47c32b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d132e8b974652d96466a1b73ec1231614719fe2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaL+AJAAoJEB5K7WKYbNJd3o0IALyv6fMWBBH9X1TryopNnoI2\nQgSqRIExn5EAguVW1eNVkOFVvymBcmDQb2f3V5KYDcv5kD05+UpYdd5o02FfpyPk\n1diFxSGkzWVQmVHYoIQMn44+qekt6yMVOdjKoj8ITyRkdCfyolUXqw204JNdSI2u\nnuOu+ax1YEXbPScrHMKa0wZ+nVvusGITyVccZNLLxA8qZRppoaWeiewad/+kc9fv\nfHu4ewroNmYfmLn8YzJd1d5AgMYtuBjc8zI2p/5p/xDcXofWhwmB+Dri4YxYaM66\nx7mZUTaK0E8NPqj8nlg7GJmP9TTnQ3NI21s/9sgSnK/sYC+gRyzAMb4m6Qu8kfw=\n=s+n8\n-----END PGP SIGNATURE-----",
        "payload": "tree cbb8e4edcedf9151adc6f6e0583a20b1ec47c32b\nparent 214046f69b1978129030ba1f65007d57b29f0761\nparent a720b928c80f18d340173f39f63e7ef9cfb367c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513085843 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513086985 +0100\n\nMerge #10574: Remove includes in .cpp files for things the corresponding .h file already included\n\na720b92 Remove includes in .cpp files for things the corresponding .h file already included (practicalswift)\n\nPull request description:\n\n  Remove includes in .cpp files for things the corresponding .h file already included.\n\n  Example case:\n  * `addrdb.cpp` includes `addrdb.h` and `fs.h`\n  * `addrdb.h` includes `fs.h`\n\n  Then remove the direct inclusion of `fs.h` in `addrman.cpp` and rely on the indirect inclusion of `fs.h` via the included `addrdb.h`.\n\n  In line with the header include guideline (see #10575).\n\nTree-SHA512: 8704b9de3011a4c234db336a39f7d2c139e741cf0f7aef08a5d3e05197e1e18286b863fdab25ae9638af4ff86b3d52e5cab9eed66bfa2476063aa5c79f9b0346\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d132e8b974652d96466a1b73ec1231614719fe2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "214046f69b1978129030ba1f65007d57b29f0761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214046f69b1978129030ba1f65007d57b29f0761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/214046f69b1978129030ba1f65007d57b29f0761"
      },
      {
        "sha": "a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a720b928c80f18d340173f39f63e7ef9cfb367c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a720b928c80f18d340173f39f63e7ef9cfb367c1"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 0,
      "deletions": 76
    },
    "files": [
      {
        "sha": "7d7f34863dae1b1babaf8fc8706c726ccfe7231f",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,7 +8,6 @@\n #include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n-#include <fs.h>\n #include <hash.h>\n #include <random.h>\n #include <streams.h>"
      },
      {
        "sha": "929d86458854d77ba5f2f91af8f364c27ac09dd4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,7 +8,6 @@\n #include <chainparams.h>\n #include <reverse_iterator.h>\n #include <validation.h>\n-#include <uint256.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "1934e71bbcf9e9de2dc56d1efd56dd2345fff7d2",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <tinyformat.h>\n \n-#include <string>\n \n /**\n  * Name of client reported in the 'version' message. Report the same name"
      },
      {
        "sha": "afaf5ccc133be5bd9c5b6bb51f96cb396a5cf9dc",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -5,11 +5,8 @@\n #include <coins.h>\n \n #include <consensus/consensus.h>\n-#include <memusage.h>\n #include <random.h>\n \n-#include <assert.h>\n-\n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }"
      },
      {
        "sha": "6ff740f58144feb0b04dc89aa253f5fb26364bda",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -4,8 +4,6 @@\n \n #include <dbwrapper.h>\n \n-#include <fs.h>\n-#include <util.h>\n #include <random.h>\n \n #include <leveldb/cache.h>"
      },
      {
        "sha": "9d4c4498d891b3de6aab0c34d83633f0abb61761",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -7,7 +7,6 @@\n #include <arith_uint256.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n-#include <pubkey.h>\n #include <random.h>\n \n #include <secp256k1.h>"
      },
      {
        "sha": "4ab089e03275971be9250d36c80e1345afafc46e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -5,8 +5,6 @@\n \n #include <keystore.h>\n \n-#include <key.h>\n-#include <pubkey.h>\n #include <util.h>\n \n bool CKeyStore::AddKey(const CKey &key) {"
      },
      {
        "sha": "0fb9b774d39aeb539ab53839cbe2394148601ef6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -22,7 +22,6 @@\n #include <primitives/transaction.h>\n #include <script/standard.h>\n #include <timedata.h>\n-#include <txmempool.h>\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "c0f31e83dd78636e08b20933fc5036f0ea8d9a02",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -9,13 +9,11 @@\n \n #include <net.h>\n \n-#include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n #include <consensus/consensus.h>\n #include <crypto/common.h>\n #include <crypto/sha256.h>\n-#include <hash.h>\n #include <primitives/transaction.h>\n #include <netbase.h>\n #include <scheduler.h>"
      },
      {
        "sha": "359489e6531fc67582d6bbe6b6de4993df892591",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -14,7 +14,6 @@\n #include <init.h>\n #include <validation.h>\n #include <merkleblock.h>\n-#include <net.h>\n #include <netmessagemaker.h>\n #include <netbase.h>\n #include <policy/fees.h>\n@@ -30,7 +29,6 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <utilstrencodings.h>\n-#include <validationinterface.h>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\""
      },
      {
        "sha": "fa1c191559fe51232ad87274b43100eff65bf63b",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -3,10 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifdef HAVE_CONFIG_H\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <netaddress.h>\n #include <hash.h>\n #include <utilstrencodings.h>"
      },
      {
        "sha": "da3729b286cb349fdfa44aaa323ec52f4b8902f0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -3,10 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifdef HAVE_CONFIG_H\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <netbase.h>\n \n #include <hash.h>"
      },
      {
        "sha": "dc88c4f91ada59dbacefcf16c13a33619b91e0ac",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -6,10 +6,8 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n \n-#include <amount.h>\n #include <clientversion.h>\n #include <primitives/transaction.h>\n-#include <random.h>\n #include <streams.h>\n #include <txmempool.h>\n #include <util.h>"
      },
      {
        "sha": "f925ec53599db541053e23b69d2d6978a800a072",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -2,10 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <qt/bitcoingui.h>\n \n #include <qt/bitcoinunits.h>"
      },
      {
        "sha": "49f4e74a9f93b83b829573b876f93cef007d1c6c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -28,9 +28,7 @@\n #include <QFlags>\n #include <QIcon>\n #include <QSettings>\n-#include <QString>\n #include <QTreeWidget>\n-#include <QTreeWidgetItem>\n \n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();"
      },
      {
        "sha": "eb5d3304af90826c39316cba27932fd32b6ba3a4",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -9,7 +9,6 @@\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n \n-#include <fs.h>\n #include <primitives/transaction.h>\n #include <init.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "f4383bf679955a80c6ec2aa52bdbf73aa0fffa83",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <QApplication>\n #include <QByteArray>\n-#include <QIcon>\n #include <QImageWriter>\n #include <QMessageBox>\n #include <QMetaType>"
      },
      {
        "sha": "c9e4f517c75f06eec1c44afdf7a29b9ac5334307",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -11,7 +11,6 @@\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n \n-#include <amount.h>\n #include <init.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n #include <net.h>"
      },
      {
        "sha": "0e1bd59adaa49f99c580ac4e1b6036747f6190c5",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,10 +8,8 @@\n \n #include <QApplication>\n #include <QColor>\n-#include <QIcon>\n #include <QImage>\n #include <QPalette>\n-#include <QPixmap>\n \n static const struct {\n     const char *platformId;"
      },
      {
        "sha": "e9dcbc0a7210b508562054c66998b4d87ee5d9b6",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,7 +8,6 @@\n #include <qt/addressbookpage.h>\n #include <qt/addresstablemodel.h>\n #include <qt/bitcoinunits.h>\n-#include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/receiverequestdialog.h>\n@@ -17,7 +16,6 @@\n \n #include <QAction>\n #include <QCursor>\n-#include <QItemSelection>\n #include <QMessageBox>\n #include <QScrollBar>\n #include <QTextDocument>"
      },
      {
        "sha": "d30e9b2dca8b8657089385818947b132d78338c3",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -9,7 +9,6 @@\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n-#include <qt/walletmodel.h>\n \n #include <QClipboard>\n #include <QDrag>"
      },
      {
        "sha": "0b90205270b1c26d4d33b250b82d8bc50b195439",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -11,7 +11,6 @@\n \n #include <qt/bantablemodel.h>\n #include <qt/clientmodel.h>\n-#include <qt/guiutil.h>\n #include <qt/platformstyle.h>\n #include <chainparams.h>\n #include <netbase.h>\n@@ -35,7 +34,6 @@\n #include <QScrollBar>\n #include <QSettings>\n #include <QSignalMapper>\n-#include <QThread>\n #include <QTime>\n #include <QTimer>\n #include <QStringList>"
      },
      {
        "sha": "2a46cdab8c6cb15751a0a7a881208af66a21670f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -13,7 +13,6 @@\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsentry.h>\n-#include <qt/walletmodel.h>\n \n #include <base58.h>\n #include <chainparams.h>\n@@ -25,11 +24,9 @@\n #include <wallet/fees.h>\n \n #include <QFontMetrics>\n-#include <QMessageBox>\n #include <QScrollBar>\n #include <QSettings>\n #include <QTextDocument>\n-#include <QTimer>\n \n static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };\n int getConfTargetForIndex(int index) {"
      },
      {
        "sha": "4cf4bb9ef7a0690abafcccc7bcf22e8d8781203f",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -10,7 +10,6 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n-#include <qt/walletmodel.h>\n \n #include <QApplication>\n #include <QClipboard>"
      },
      {
        "sha": "47890fc7e2b364bc7ef61dd7b92d3fbe5feda198",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -9,8 +9,6 @@\n \n #include <cstdlib>\n \n-#include <QDateTime>\n-\n // Earliest date that can be represented (far in the past)\n const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);\n // Last date that can be represented (far in the future)"
      },
      {
        "sha": "b7e39e05ece9565a0b9d1a6e5f3d8fcae0e67b56",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,7 +8,6 @@\n #include <qt/bitcoinunits.h>\n #include <qt/csvmodelwriter.h>\n #include <qt/editaddressdialog.h>\n-#include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsdialog.h>"
      },
      {
        "sha": "f2fa114313585a7ed54458ba231321ff64e6af81",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -10,8 +10,6 @@\n #include <set>\n #include <stdint.h>\n \n-#include <univalue.h>\n-\n class CRPCConvertParam\n {\n public:"
      },
      {
        "sha": "d003be4954b8a214235c5fabc65ba590d616c281",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -29,8 +29,6 @@\n #include <memory>\n #include <stdint.h>\n \n-#include <univalue.h>\n-\n unsigned int ParseConfirmTarget(const UniValue& value)\n {\n     int target = value.get_int();"
      },
      {
        "sha": "d999a08d74b5a90191e4184c9cbb4cb334149f19",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -12,7 +12,6 @@\n #include <utiltime.h>\n #include <version.h>\n \n-#include <stdint.h>\n #include <fstream>\n \n /**"
      },
      {
        "sha": "2e7e0ba4744191772801c844b005485a3a68207e",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -14,8 +14,6 @@\n #include <util.h>\n #include <utilstrencodings.h>\n \n-#include <univalue.h>\n-\n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_upper()"
      },
      {
        "sha": "3c3f92fe46b36f78b5adfb2689615f117675b6a3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <script/interpreter.h>\n \n-#include <primitives/transaction.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>"
      },
      {
        "sha": "5849f55651b3d6367b4edf46ecd10e8d5098c624",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,7 +8,6 @@\n #include <key.h>\n #include <keystore.h>\n #include <script/script.h>\n-#include <script/standard.h>\n #include <script/sign.h>\n \n "
      },
      {
        "sha": "f52c8ccc21b54c42afb7530bc41362a820037239",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -8,15 +8,9 @@\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n-#include <fs.h>\n-#include <key.h>\n #include <validation.h>\n #include <miner.h>\n #include <net_processing.h>\n-#include <pubkey.h>\n-#include <random.h>\n-#include <txdb.h>\n-#include <txmempool.h>\n #include <ui_interface.h>\n #include <streams.h>\n #include <rpc/server.h>"
      },
      {
        "sha": "a3e4b0acfbe6abb810fb17bb8f70c430be91bd8f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -3,18 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <util.h>\n \n #include <chainparamsbase.h>\n-#include <fs.h>\n #include <random.h>\n #include <serialize.h>\n #include <utilstrencodings.h>\n-#include <utiltime.h>\n \n #include <stdarg.h>\n "
      },
      {
        "sha": "75c40b22fc86d7a74473d73d815ec77b27823d08",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -15,7 +15,6 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n-#include <fs.h>\n #include <hash.h>\n #include <init.h>\n #include <policy/fees.h>\n@@ -39,10 +38,8 @@\n #include <utilmoneystr.h>\n #include <utilstrencodings.h>\n #include <validationinterface.h>\n-#include <versionbits.h>\n #include <warnings.h>\n \n-#include <atomic>\n #include <sstream>\n \n #include <boost/algorithm/string/replace.hpp>"
      },
      {
        "sha": "d4cd30dfac0b3d8ec05775f3cc0ce6fdae80f161",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -6,7 +6,6 @@\n #include <wallet/db.h>\n \n #include <addrman.h>\n-#include <fs.h>\n #include <hash.h>\n #include <protocol.h>\n #include <util.h>"
      },
      {
        "sha": "bbaba8e1bd8bf5b456c4b33054b00ebc221431be",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -23,12 +23,10 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n-#include <script/sign.h>\n #include <scheduler.h>\n #include <timedata.h>\n #include <txmempool.h>\n #include <util.h>\n-#include <ui_interface.h>\n #include <utilmoneystr.h>\n #include <wallet/fees.h>\n "
      }
    ]
  },
  {
    "sha": "320669a363b3674954a08c49541af65f42836b5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjA2NjlhMzYzYjM2NzQ5NTRhMDhjNDk1NDFhZjY1ZjQyODM2YjVk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:53:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:57:03Z"
      },
      "message": "rpc: Validate replaceable type in createrawtransaction",
      "tree": {
        "sha": "55392a1ed22b62f49606a2c717f0d9781b80207b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55392a1ed22b62f49606a2c717f0d9781b80207b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/320669a363b3674954a08c49541af65f42836b5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/320669a363b3674954a08c49541af65f42836b5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d132e8b974652d96466a1b73ec1231614719fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d132e8b974652d96466a1b73ec1231614719fe2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fbebdf44d46ba035f35bcba024a1f22b626b1b7b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/320669a363b3674954a08c49541af65f42836b5d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/320669a363b3674954a08c49541af65f42836b5d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=320669a363b3674954a08c49541af65f42836b5d",
        "patch": "@@ -349,7 +349,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM}, true);\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM, UniValue::VBOOL}, true);\n     if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n "
      }
    ]
  },
  {
    "sha": "22149540f9e74ddff84973d9818ec9a34a533764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjE0OTU0MGY5ZTc0ZGRmZjg0OTczZDk4MThlYzlhMzRhNTMzNzY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T18:48:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T18:57:43Z"
      },
      "message": "Merge #11854: Split up key and script metadata for better type safety\n\n9c8eca7 Split up key and script metadata for better type safety (Russell Yanofsky)\n\nPull request description:\n\n  Suggested by @TheBlueMatt\n  https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383\n\n  Combining the maps was probably never a good arrangement but is more\n  problematic now in presence of WitnessV0ScriptHash and WitnessV0KeyHash types.\n\nTree-SHA512: 9263e9c01090fb49221e91d88a88241a9691dda3e92d86041c8e284306a64d3af5e2438249f9dcc3e6e4a5c11c1a89f975a86d55690adf95bf2636f15f99f92a",
      "tree": {
        "sha": "0cb760543a107538053aac2e973b1c3fbe7d60f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cb760543a107538053aac2e973b1c3fbe7d60f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22149540f9e74ddff84973d9818ec9a34a533764",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMCanAAoJEB5K7WKYbNJdrXgIAKx7qzocrWshvfvGqudedcju\n7LZ3Xc48NUAoIIAfNi69HgpH6aRP1eDNoyjt8znW0dx74Mn/eBQGsFBkH7L7mL8E\nGt1tU2Z28TCrNRKmhXcFfIWztaltAQlBJud3iwZE6dWKgDxQvnrUNUnGZUgYQZHi\nxkWHZLZyQ71U58FxO5bEkVKKkA2IQxpQj6i7IWEHPQP5UsjSGHfN2N00SUcd940R\nDpAfcJS/kMtLgq3g1jdCD9Q6KTPDYuAmyiVWp0VWP8gQsWth5Jshfvmt4vj12Pdu\naB4+Le0aBOK2VS39R/IVbAhP1F05ycFxRMeC2uvYaDOlqaQ4YUPwDUtUBPkJHM4=\n=mdxe\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cb760543a107538053aac2e973b1c3fbe7d60f2\nparent 5d132e8b974652d96466a1b73ec1231614719fe2\nparent 9c8eca7704e88b3f4ee38cf85bef0f1febc440e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513104504 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513105063 +0100\n\nMerge #11854: Split up key and script metadata for better type safety\n\n9c8eca7 Split up key and script metadata for better type safety (Russell Yanofsky)\n\nPull request description:\n\n  Suggested by @TheBlueMatt\n  https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383\n\n  Combining the maps was probably never a good arrangement but is more\n  problematic now in presence of WitnessV0ScriptHash and WitnessV0KeyHash types.\n\nTree-SHA512: 9263e9c01090fb49221e91d88a88241a9691dda3e92d86041c8e284306a64d3af5e2438249f9dcc3e6e4a5c11c1a89f975a86d55690adf95bf2636f15f99f92a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22149540f9e74ddff84973d9818ec9a34a533764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22149540f9e74ddff84973d9818ec9a34a533764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22149540f9e74ddff84973d9818ec9a34a533764/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d132e8b974652d96466a1b73ec1231614719fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d132e8b974652d96466a1b73ec1231614719fe2"
      },
      {
        "sha": "9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 48,
      "deletions": 34
    },
    "files": [
      {
        "sha": "327af2e237347303231e18dcf7bdfadfcb13e373",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22149540f9e74ddff84973d9818ec9a34a533764/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22149540f9e74ddff84973d9818ec9a34a533764/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=22149540f9e74ddff84973d9818ec9a34a533764",
        "patch": "@@ -187,17 +187,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n         }\n         if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n+            const CKeyMetadata* meta = nullptr;\n+            if (const CKeyID* key_id = boost::get<CKeyID>(&dest)) {\n+                auto it = pwallet->mapKeyMetadata.find(*key_id);\n+                if (it != pwallet->mapKeyMetadata.end()) {\n+                    meta = &it->second;\n+                }\n+            }\n+            if (!meta) {\n+                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+                if (it != pwallet->m_script_metadata.end()) {\n+                    meta = &it->second;\n+                }\n             }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+            if (meta) {\n+                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                if (!meta->hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n                 }\n             }\n         }"
      },
      {
        "sha": "873a8d855e57036912e493cb552ee6aa0ad5b057",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22149540f9e74ddff84973d9818ec9a34a533764/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22149540f9e74ddff84973d9818ec9a34a533764/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=22149540f9e74ddff84973d9818ec9a34a533764",
        "patch": "@@ -282,14 +282,22 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n+bool CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n+{\n+    AssertLockHeld(cs_wallet); // m_script_metadata\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    m_script_metadata[script_id] = meta;\n+    return true;\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n@@ -338,15 +346,15 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     return CWalletDB(*dbw).WriteWatchOnly(dest, meta);\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n {\n-    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n     return AddWatchOnly(dest);\n }\n "
      },
      {
        "sha": "93d1857c7fbea62e9a76157a7ef196687febf8b3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22149540f9e74ddff84973d9818ec9a34a533764/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22149540f9e74ddff84973d9818ec9a34a533764/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=22149540f9e74ddff84973d9818ec9a34a533764",
        "patch": "@@ -761,9 +761,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n-    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n-    // key metadata.\n-    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -874,7 +876,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);"
      },
      {
        "sha": "efc50f72ebd6776dcbfa3da8d89bb084d72f9c73",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22149540f9e74ddff84973d9818ec9a34a533764/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22149540f9e74ddff84973d9818ec9a34a533764/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=22149540f9e74ddff84973d9818ec9a34a533764",
        "patch": "@@ -423,27 +423,23 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n+        else if (strType == \"keymeta\")\n         {\n-            CTxDestination keyID;\n-            if (strType == \"keymeta\")\n-            {\n-              CPubKey vchPubKey;\n-              ssKey >> vchPubKey;\n-              keyID = vchPubKey.GetID();\n-            }\n-            else if (strType == \"watchmeta\")\n-            {\n-              CScript script;\n-              ssKey >> script;\n-              keyID = CScriptID(script);\n-            }\n-\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-\n-            pwallet->LoadKeyMetadata(keyID, keyMeta);\n+            pwallet->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+        }\n+        else if (strType == \"watchmeta\")\n+        {\n+            CScript script;\n+            ssKey >> script;\n+            CKeyMetadata keyMeta;\n+            ssValue >> keyMeta;\n+            wss.nKeyMeta++;\n+            pwallet->LoadScriptMetadata(CScriptID(script), keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {"
      }
    ]
  },
  {
    "sha": "ef8ba7d73a480197b756fab00126914e49de4e7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjhiYTdkNzNhNDgwMTk3Yjc1NmZhYjAwMTI2OTE0ZTQ5ZGU0ZTdi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T18:58:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-12T19:26:55Z"
      },
      "message": "Merge #11870: wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions\n\n5b25293 wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 13b922c6c9b5ca95a77742050f449366b80bdd7819c34e7ca09af8a4bd68085f4d0c6e0cde119c403f661499f97f2c465071a8047a7d794268e8d2dfe909e6d5",
      "tree": {
        "sha": "ad5363693a460d0055f5a33545c3e8501329fdc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad5363693a460d0055f5a33545c3e8501329fdc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef8ba7d73a480197b756fab00126914e49de4e7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMC1/AAoJEB5K7WKYbNJdCcAH/Arl/n4n29S2gLEDsmUH5nLf\nd2mYuYkFpBQXYdXGmJegtmHqfcD6eRGUwxZVu0evKZLPIexZMtTFQaQQvrogUP8s\nmuRJyVsUbs0EyUapGQQYmnPE8y93FfY3PAvKy+DRxEtV+1jMx4V4tSvDUxoVQjIT\n08VYaK0wsn5C09XjosFAremP4bDs7piyuhJCgtxDqWZuX17qFbTZl27FIOYev5CW\n9XcQMF8gYAKqObJKC8NYS6/2XubfhJ3bnqjr7En1+m+GY+m20R8RuHE0ZI0+Rcun\nQsNjaB78rxyA4yhYJBAKjubEwpy/hOutKRDRVrDxzoGRdnlFBl3X+CUsNYfqQ9M=\n=7Ju1\n-----END PGP SIGNATURE-----",
        "payload": "tree ad5363693a460d0055f5a33545c3e8501329fdc4\nparent 22149540f9e74ddff84973d9818ec9a34a533764\nparent 5b252934362c2971e521df56c26ced56f07deb72\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513105117 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513106815 +0100\n\nMerge #11870: wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions\n\n5b25293 wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 13b922c6c9b5ca95a77742050f449366b80bdd7819c34e7ca09af8a4bd68085f4d0c6e0cde119c403f661499f97f2c465071a8047a7d794268e8d2dfe909e6d5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ba7d73a480197b756fab00126914e49de4e7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8ba7d73a480197b756fab00126914e49de4e7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ba7d73a480197b756fab00126914e49de4e7b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22149540f9e74ddff84973d9818ec9a34a533764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22149540f9e74ddff84973d9818ec9a34a533764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22149540f9e74ddff84973d9818ec9a34a533764"
      },
      {
        "sha": "5b252934362c2971e521df56c26ced56f07deb72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b252934362c2971e521df56c26ced56f07deb72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b252934362c2971e521df56c26ced56f07deb72"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b9b4d8ddff703c4d5569ad2c46640b21f5dd24a7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8ba7d73a480197b756fab00126914e49de4e7b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8ba7d73a480197b756fab00126914e49de4e7b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ef8ba7d73a480197b756fab00126914e49de4e7b",
        "patch": "@@ -1719,11 +1719,8 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted)\n-    {\n+    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n-\n-        LOCK(mempool.cs);\n         CValidationState state;\n         wtx.AcceptToMemoryPool(maxTxFee, state);\n     }"
      }
    ]
  },
  {
    "sha": "1729c29dedc64d900a1a1c686a56e16fa5417fa1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzI5YzI5ZGVkYzY0ZDkwMGExYTFjNjg2YTU2ZTE2ZmE1NDE3ZmEx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-18T22:45:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-12T20:25:25Z"
      },
      "message": "net: split socket creation out of connection\n\nAlso, check for the correct error during socket creation",
      "tree": {
        "sha": "6eaab18b57cd1386e117381346b0de929c9319e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eaab18b57cd1386e117381346b0de929c9319e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1729c29dedc64d900a1a1c686a56e16fa5417fa1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1729c29dedc64d900a1a1c686a56e16fa5417fa1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1729c29dedc64d900a1a1c686a56e16fa5417fa1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1729c29dedc64d900a1a1c686a56e16fa5417fa1/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f01dcf63873a5e42798635ab4026c9a5f9fa213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f01dcf63873a5e42798635ab4026c9a5f9fa213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f01dcf63873a5e42798635ab4026c9a5f9fa213"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "8f15842150f805bc61dadc5df605fa362808b6b1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1729c29dedc64d900a1a1c686a56e16fa5417fa1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1729c29dedc64d900a1a1c686a56e16fa5417fa1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1729c29dedc64d900a1a1c686a56e16fa5417fa1",
        "patch": "@@ -417,16 +417,30 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n-        if (GetProxy(addrConnect.GetNetwork(), proxy))\n+        if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n+            hSocket = CreateSocket(proxy.proxy);\n+            if (hSocket == INVALID_SOCKET) {\n+                return nullptr;\n+            }\n             connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n-        else // no proxy needed (none set for target network)\n+        } else {\n+            // no proxy needed (none set for target network)\n+            hSocket = CreateSocket(addrConnect);\n+            if (hSocket == INVALID_SOCKET) {\n+                return nullptr;\n+            }\n             connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout);\n+        }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n             // the proxy, mark this as an attempt.\n             addrman.Attempt(addrConnect, fCountFailure);\n         }\n     } else if (pszDest && GetNameProxy(proxy)) {\n+        hSocket = CreateSocket(proxy.proxy);\n+        if (hSocket == INVALID_SOCKET) {\n+            return nullptr;\n+        }\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);"
      },
      {
        "sha": "9b63d6034201bdfe201ce03db9c5f713f9f6d770",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 15,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1729c29dedc64d900a1a1c686a56e16fa5417fa1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1729c29dedc64d900a1a1c686a56e16fa5417fa1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1729c29dedc64d900a1a1c686a56e16fa5417fa1",
        "patch": "@@ -452,20 +452,18 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     return true;\n }\n \n-bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n+SOCKET CreateSocket(const CService &addrConnect)\n {\n-    hSocketRet = INVALID_SOCKET;\n-\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n-        LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n-        return false;\n+        LogPrintf(\"Cannot create socket for %s: unsupported network\\n\", addrConnect.ToString());\n+        return INVALID_SOCKET;\n     }\n \n     SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n-        return false;\n+        return INVALID_SOCKET;\n \n #ifdef SO_NOSIGPIPE\n     int set = 1;\n@@ -479,9 +477,24 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n     // Set to non-blocking\n     if (!SetSocketNonBlocking(hSocket, true)) {\n         CloseSocket(hSocket);\n-        return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n     }\n+    return hSocket;\n+}\n \n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout)\n+{\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    if (hSocket == INVALID_SOCKET) {\n+        LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\n+        return false;\n+    }\n+    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n+        LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n+        CloseSocket(hSocket);\n+        return false;\n+    }\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n@@ -534,8 +547,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n             return false;\n         }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n \n@@ -587,9 +598,8 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n {\n-    SOCKET hSocket = INVALID_SOCKET;\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout)) {\n         if (outProxyConnectionFailed)\n@@ -601,14 +611,16 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n         ProxyCredentials random_auth;\n         static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n-        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n+        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket)) {\n+            CloseSocket(hSocket);\n             return false;\n+        }\n     } else {\n-        if (!Socks5(strDest, (unsigned short)port, 0, hSocket))\n+        if (!Socks5(strDest, (unsigned short)port, 0, hSocket)) {\n+            CloseSocket(hSocket);\n             return false;\n+        }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n bool LookupSubNet(const char* pszName, CSubNet& ret)"
      },
      {
        "sha": "59945ea97d2c82adb01ee97c9588e496d386b1cd",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1729c29dedc64d900a1a1c686a56e16fa5417fa1/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1729c29dedc64d900a1a1c686a56e16fa5417fa1/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=1729c29dedc64d900a1a1c686a56e16fa5417fa1",
        "patch": "@@ -51,6 +51,7 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n+SOCKET CreateSocket(const CService &addrConnect);\n bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */"
      }
    ]
  },
  {
    "sha": "9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTNiMmY1NzZiYjM2OGEwODU3ZTgwOGRjYmQyNGIyZGNiOGJlZjJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-02T18:18:32Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-12T20:25:25Z"
      },
      "message": "net: Move IsSelectableSocket check into socket creation\n\nWe use select in ConnectSocketDirectly, so this check needs to happen before\nthat.\n\nIsSelectableSocket will not be relevant after upcoming changes to remove select.",
      "tree": {
        "sha": "94370b8776d0bb11a6cb376fb5f94317a59b7b92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94370b8776d0bb11a6cb376fb5f94317a59b7b92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1729c29dedc64d900a1a1c686a56e16fa5417fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1729c29dedc64d900a1a1c686a56e16fa5417fa1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1729c29dedc64d900a1a1c686a56e16fa5417fa1"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 17,
      "deletions": 16
    },
    "files": [
      {
        "sha": "07128a034954290a8414965442eef2aea468fac2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
        "patch": "@@ -446,24 +446,19 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         SplitHostPort(std::string(pszDest), port, host);\n         connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n     }\n-    if (connected) {\n-        if (!IsSelectableSocket(hSocket)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n-            return nullptr;\n-        }\n-\n-        // Add node\n-        NodeId id = GetNewNodeId();\n-        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CAddress addr_bind = GetBindAddress(hSocket);\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n-        pnode->AddRef();\n-\n-        return pnode;\n+    if (!connected) {\n+        CloseSocket(hSocket);\n+        return nullptr;\n     }\n \n-    return nullptr;\n+    // Add node\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+    CAddress addr_bind = GetBindAddress(hSocket);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n+    pnode->AddRef();\n+\n+    return pnode;\n }\n \n void CConnman::DumpBanlist()"
      },
      {
        "sha": "1635957b7f0e72278b2eecc3b7df937cec47cdd0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
        "patch": "@@ -465,6 +465,12 @@ SOCKET CreateSocket(const CService &addrConnect)\n     if (hSocket == INVALID_SOCKET)\n         return INVALID_SOCKET;\n \n+    if (!IsSelectableSocket(hSocket)) {\n+        CloseSocket(hSocket);\n+        LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+        return INVALID_SOCKET;\n+    }\n+\n #ifdef SO_NOSIGPIPE\n     int set = 1;\n     // Different way of disabling SIGPIPE on BSD"
      }
    ]
  },
  {
    "sha": "df3bcf89e49ec951baa3778a2452c0d1237ec053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjNiY2Y4OWU0OWVjOTUxYmFhMzc3OGEyNDUyYzBkMTIzN2VjMDUz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-02T20:37:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-12T20:25:25Z"
      },
      "message": "net: pass socket closing responsibility up to caller for outgoing connections\n\nThis allows const references to be passed around, making it clear where the\nsocket may and may not be invalidated.",
      "tree": {
        "sha": "0af136d9b3eca5554799df19171567e2b6118085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0af136d9b3eca5554799df19171567e2b6118085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df3bcf89e49ec951baa3778a2452c0d1237ec053",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df3bcf89e49ec951baa3778a2452c0d1237ec053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df3bcf89e49ec951baa3778a2452c0d1237ec053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df3bcf89e49ec951baa3778a2452c0d1237ec053/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 6,
      "deletions": 30
    },
    "files": [
      {
        "sha": "74ea6b19cfa220740c76eb448183b0dad48d7e9f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 28,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df3bcf89e49ec951baa3778a2452c0d1237ec053/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df3bcf89e49ec951baa3778a2452c0d1237ec053/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=df3bcf89e49ec951baa3778a2452c0d1237ec053",
        "patch": "@@ -317,12 +317,11 @@ std::string Socks5ErrorString(uint8_t err)\n }\n \n /** Connect using SOCKS5 (as described in RFC1928) */\n-static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n+static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, const SOCKET& hSocket)\n {\n     IntrRecvError recvr;\n     LogPrint(BCLog::NET, \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n-        CloseSocket(hSocket);\n         return error(\"Hostname too long\");\n     }\n     // Accepted authentication methods\n@@ -338,17 +337,14 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n-        CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n     uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n     if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n-        CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n     if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n@@ -363,23 +359,19 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         vAuth.insert(vAuth.end(), auth->password.begin(), auth->password.end());\n         ret = send(hSocket, (const char*)vAuth.data(), vAuth.size(), MSG_NOSIGNAL);\n         if (ret != (ssize_t)vAuth.size()) {\n-            CloseSocket(hSocket);\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n         uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-            CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n         }\n         if (pchRetA[0] != 0x01 || pchRetA[1] != 0x00) {\n-            CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n     } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n-        CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n@@ -393,12 +385,10 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     vSocks5.push_back((port >> 0) & 0xFF);\n     ret = send(hSocket, (const char*)vSocks5.data(), vSocks5.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5.size()) {\n-        CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n     uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n             /* If a timeout happens here, this effectively means we timed out while connecting\n              * to the remote node. This is very common for Tor, so do not print an\n@@ -409,17 +399,14 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n     }\n     if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n-        CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n     if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n-        CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n     if (pchRet2[2] != 0x00) { // Reserved field must be 0\n-        CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n     uint8_t pchRet3[256];\n@@ -431,21 +418,18 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {\n-                CloseSocket(hSocket);\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n             recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n             break;\n         }\n-        default: CloseSocket(hSocket); return error(\"Error: malformed proxy response\");\n+        default: return error(\"Error: malformed proxy response\");\n     }\n     if (recvr != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n     if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n     LogPrint(BCLog::NET, \"SOCKS5 connected %s\\n\", strDest);\n@@ -488,7 +472,7 @@ SOCKET CreateSocket(const CService &addrConnect)\n     return hSocket;\n }\n \n-bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout)\n+bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout)\n {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n@@ -498,7 +482,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTi\n     }\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n         LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n-        CloseSocket(hSocket);\n         return false;\n     }\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n@@ -515,13 +498,11 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTi\n             if (nRet == 0)\n             {\n                 LogPrint(BCLog::NET, \"connection to %s timeout\\n\", addrConnect.ToString());\n-                CloseSocket(hSocket);\n                 return false;\n             }\n             if (nRet == SOCKET_ERROR)\n             {\n                 LogPrintf(\"select() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-                CloseSocket(hSocket);\n                 return false;\n             }\n             socklen_t nRetSize = sizeof(nRet);\n@@ -532,13 +513,11 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTi\n #endif\n             {\n                 LogPrintf(\"getsockopt() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-                CloseSocket(hSocket);\n                 return false;\n             }\n             if (nRet != 0)\n             {\n                 LogPrintf(\"connect() to %s failed after select(): %s\\n\", addrConnect.ToString(), NetworkErrorString(nRet));\n-                CloseSocket(hSocket);\n                 return false;\n             }\n         }\n@@ -549,7 +528,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTi\n #endif\n         {\n             LogPrintf(\"connect() to %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-            CloseSocket(hSocket);\n             return false;\n         }\n     }\n@@ -604,7 +582,7 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n {\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout)) {\n@@ -618,12 +596,10 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n         static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket)) {\n-            CloseSocket(hSocket);\n             return false;\n         }\n     } else {\n         if (!Socks5(strDest, (unsigned short)port, 0, hSocket)) {\n-            CloseSocket(hSocket);\n             return false;\n         }\n     }"
      },
      {
        "sha": "52e920b3d8c9c4dacd6bfc3c1090980488967c18",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df3bcf89e49ec951baa3778a2452c0d1237ec053/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df3bcf89e49ec951baa3778a2452c0d1237ec053/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=df3bcf89e49ec951baa3778a2452c0d1237ec053",
        "patch": "@@ -52,8 +52,8 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n SOCKET CreateSocket(const CService &addrConnect);\n-bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n+bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocketRet, int nTimeout);\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      }
    ]
  },
  {
    "sha": "3830b6e0659106458c941029f5b2e789e3cb38a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODMwYjZlMDY1OTEwNjQ1OGM5NDEwMjlmNWIyZTc4OWUzY2IzOGEz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-02T20:31:37Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-12T20:25:25Z"
      },
      "message": "net: use CreateSocket for binds",
      "tree": {
        "sha": "a2ec1dd8becac4a3b451fb3023efed1756af5242",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2ec1dd8becac4a3b451fb3023efed1756af5242"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3830b6e0659106458c941029f5b2e789e3cb38a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3830b6e0659106458c941029f5b2e789e3cb38a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3830b6e0659106458c941029f5b2e789e3cb38a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3830b6e0659106458c941029f5b2e789e3cb38a3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df3bcf89e49ec951baa3778a2452c0d1237ec053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df3bcf89e49ec951baa3778a2452c0d1237ec053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df3bcf89e49ec951baa3778a2452c0d1237ec053"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 1,
      "deletions": 24
    },
    "files": [
      {
        "sha": "8eb25a8c74e209e3871050aa1486dc5c6e4e1b97",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 24,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3830b6e0659106458c941029f5b2e789e3cb38a3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3830b6e0659106458c941029f5b2e789e3cb38a3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3830b6e0659106458c941029f5b2e789e3cb38a3",
        "patch": "@@ -2078,44 +2078,21 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n         return false;\n     }\n \n-    SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n+    SOCKET hListenSocket = CreateSocket(addrBind);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n         strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\", NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n-    if (!IsSelectableSocket(hListenSocket))\n-    {\n-        strError = \"Error: Couldn't create a listenable socket for incoming connections\";\n-        LogPrintf(\"%s\\n\", strError);\n-        return false;\n-    }\n-\n-\n #ifndef WIN32\n-#ifdef SO_NOSIGPIPE\n-    // Different way of disabling SIGPIPE on BSD\n-    setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n-#endif\n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n-    // Disable Nagle's algorithm\n-    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&nOne, sizeof(int));\n #else\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n-    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&nOne, sizeof(int));\n #endif\n \n-    // Set to non-blocking, incoming connections will also inherit this\n-    if (!SetSocketNonBlocking(hListenSocket, true)) {\n-        CloseSocket(hListenSocket);\n-        strError = strprintf(\"BindListenPort: Setting listening socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-        LogPrintf(\"%s\\n\", strError);\n-        return false;\n-    }\n-\n     // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {"
      }
    ]
  },
  {
    "sha": "ba2f19504c6b1302a93accbb50383f422c54df43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTJmMTk1MDRjNmIxMzAyYTkzYWNjYmI1MDM4M2Y0MjJjNTRkZjQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-13T04:09:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-13T04:42:32Z"
      },
      "message": "Merge #11363: net: Split socket create/connect\n\n3830b6e net: use CreateSocket for binds (Cory Fields)\ndf3bcf8 net: pass socket closing responsibility up to caller for outgoing connections (Cory Fields)\n9e3b2f5 net: Move IsSelectableSocket check into socket creation (Cory Fields)\n1729c29 net: split socket creation out of connection (Cory Fields)\n\nPull request description:\n\n  Requirement for #11227.\n\n  We'll need to create sockets and perform the actual connect in separate steps, so break them up.\n\n  #11227 adds an RAII wrapper around connection attempts, as a belt-and-suspenders in case a CloseSocket is missed.\n\nTree-SHA512: de675bb718cc56d68893c303b8057ca062c7431eaa17ae7c4829caed119fa3f15b404d8f52aca22a6bca6e73a26fb79e898b335d090ab015bf6456cf417fc694",
      "tree": {
        "sha": "4a373f3b1ade813c77d8cb67e63bc72870ea7cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a373f3b1ade813c77d8cb67e63bc72870ea7cff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba2f19504c6b1302a93accbb50383f422c54df43",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMK+4AAoJEB5K7WKYbNJd1McIALV3StKdJXTWu3s3y3BK0fCW\nVgWsYcjJL1n78re0qzetcY+yNRVKpzFfOg8Aotp/i0qybvRCqgL066wy4NNp2kqC\nWC595y9eil+YdV5TGmscy57cDE9gLDakkR8vRk8vMCxCQO/7M4trbnS0oD0m6+40\nXdmI1wUsBUIYy0PSLwILxrdFi7muiJWYP8c84pBQeGakOEDPN4jeaL3zrJ28oAt4\nj396EIFwlmfx6PO/ukA8yLyUJFqAgaubINvZLIE48KvOP0PJoI6e2B0iS3iW8JoM\nsNKoKjSe4ekHUWPqNaf1hJFKyEXiXdkQ+QX8SodZ1x+Q2lpRDHhN6mfftDmjdl8=\n=VC3t\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a373f3b1ade813c77d8cb67e63bc72870ea7cff\nparent ef8ba7d73a480197b756fab00126914e49de4e7b\nparent 3830b6e0659106458c941029f5b2e789e3cb38a3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513138197 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513140152 +0100\n\nMerge #11363: net: Split socket create/connect\n\n3830b6e net: use CreateSocket for binds (Cory Fields)\ndf3bcf8 net: pass socket closing responsibility up to caller for outgoing connections (Cory Fields)\n9e3b2f5 net: Move IsSelectableSocket check into socket creation (Cory Fields)\n1729c29 net: split socket creation out of connection (Cory Fields)\n\nPull request description:\n\n  Requirement for #11227.\n\n  We'll need to create sockets and perform the actual connect in separate steps, so break them up.\n\n  #11227 adds an RAII wrapper around connection attempts, as a belt-and-suspenders in case a CloseSocket is missed.\n\nTree-SHA512: de675bb718cc56d68893c303b8057ca062c7431eaa17ae7c4829caed119fa3f15b404d8f52aca22a6bca6e73a26fb79e898b335d090ab015bf6456cf417fc694\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba2f19504c6b1302a93accbb50383f422c54df43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba2f19504c6b1302a93accbb50383f422c54df43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba2f19504c6b1302a93accbb50383f422c54df43/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef8ba7d73a480197b756fab00126914e49de4e7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ba7d73a480197b756fab00126914e49de4e7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8ba7d73a480197b756fab00126914e49de4e7b"
      },
      {
        "sha": "3830b6e0659106458c941029f5b2e789e3cb38a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3830b6e0659106458c941029f5b2e789e3cb38a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3830b6e0659106458c941029f5b2e789e3cb38a3"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 63,
      "deletions": 82
    },
    "files": [
      {
        "sha": "23bf6404725f1d5e010d3a802d2f9555b1d7d9b6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 42,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba2f19504c6b1302a93accbb50383f422c54df43/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba2f19504c6b1302a93accbb50383f422c54df43/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ba2f19504c6b1302a93accbb50383f422c54df43",
        "patch": "@@ -415,39 +415,48 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n-        if (GetProxy(addrConnect.GetNetwork(), proxy))\n+        if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n+            hSocket = CreateSocket(proxy.proxy);\n+            if (hSocket == INVALID_SOCKET) {\n+                return nullptr;\n+            }\n             connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n-        else // no proxy needed (none set for target network)\n+        } else {\n+            // no proxy needed (none set for target network)\n+            hSocket = CreateSocket(addrConnect);\n+            if (hSocket == INVALID_SOCKET) {\n+                return nullptr;\n+            }\n             connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout);\n+        }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n             // the proxy, mark this as an attempt.\n             addrman.Attempt(addrConnect, fCountFailure);\n         }\n     } else if (pszDest && GetNameProxy(proxy)) {\n+        hSocket = CreateSocket(proxy.proxy);\n+        if (hSocket == INVALID_SOCKET) {\n+            return nullptr;\n+        }\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);\n         connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n     }\n-    if (connected) {\n-        if (!IsSelectableSocket(hSocket)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n-            return nullptr;\n-        }\n-\n-        // Add node\n-        NodeId id = GetNewNodeId();\n-        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CAddress addr_bind = GetBindAddress(hSocket);\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n-        pnode->AddRef();\n-\n-        return pnode;\n+    if (!connected) {\n+        CloseSocket(hSocket);\n+        return nullptr;\n     }\n \n-    return nullptr;\n+    // Add node\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+    CAddress addr_bind = GetBindAddress(hSocket);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n+    pnode->AddRef();\n+\n+    return pnode;\n }\n \n void CConnman::DumpBanlist()\n@@ -2056,44 +2065,21 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n         return false;\n     }\n \n-    SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n+    SOCKET hListenSocket = CreateSocket(addrBind);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n         strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\", NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n-    if (!IsSelectableSocket(hListenSocket))\n-    {\n-        strError = \"Error: Couldn't create a listenable socket for incoming connections\";\n-        LogPrintf(\"%s\\n\", strError);\n-        return false;\n-    }\n-\n-\n #ifndef WIN32\n-#ifdef SO_NOSIGPIPE\n-    // Different way of disabling SIGPIPE on BSD\n-    setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n-#endif\n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n-    // Disable Nagle's algorithm\n-    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&nOne, sizeof(int));\n #else\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n-    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&nOne, sizeof(int));\n #endif\n \n-    // Set to non-blocking, incoming connections will also inherit this\n-    if (!SetSocketNonBlocking(hListenSocket, true)) {\n-        CloseSocket(hListenSocket);\n-        strError = strprintf(\"BindListenPort: Setting listening socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-        LogPrintf(\"%s\\n\", strError);\n-        return false;\n-    }\n-\n     // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {"
      },
      {
        "sha": "f4232fc42af12853f429c311a00910a750f0af5c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 38,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba2f19504c6b1302a93accbb50383f422c54df43/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba2f19504c6b1302a93accbb50383f422c54df43/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=ba2f19504c6b1302a93accbb50383f422c54df43",
        "patch": "@@ -313,12 +313,11 @@ std::string Socks5ErrorString(uint8_t err)\n }\n \n /** Connect using SOCKS5 (as described in RFC1928) */\n-static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n+static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, const SOCKET& hSocket)\n {\n     IntrRecvError recvr;\n     LogPrint(BCLog::NET, \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n-        CloseSocket(hSocket);\n         return error(\"Hostname too long\");\n     }\n     // Accepted authentication methods\n@@ -334,17 +333,14 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n-        CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n     uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n     if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n-        CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n     if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n@@ -359,23 +355,19 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         vAuth.insert(vAuth.end(), auth->password.begin(), auth->password.end());\n         ret = send(hSocket, (const char*)vAuth.data(), vAuth.size(), MSG_NOSIGNAL);\n         if (ret != (ssize_t)vAuth.size()) {\n-            CloseSocket(hSocket);\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n         uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-            CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n         }\n         if (pchRetA[0] != 0x01 || pchRetA[1] != 0x00) {\n-            CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n     } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n-        CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n@@ -389,12 +381,10 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     vSocks5.push_back((port >> 0) & 0xFF);\n     ret = send(hSocket, (const char*)vSocks5.data(), vSocks5.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5.size()) {\n-        CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n     uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n             /* If a timeout happens here, this effectively means we timed out while connecting\n              * to the remote node. This is very common for Tor, so do not print an\n@@ -405,17 +395,14 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n     }\n     if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n-        CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n     if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n-        CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n     if (pchRet2[2] != 0x00) { // Reserved field must be 0\n-        CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n     uint8_t pchRet3[256];\n@@ -427,41 +414,42 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {\n-                CloseSocket(hSocket);\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n             recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n             break;\n         }\n-        default: CloseSocket(hSocket); return error(\"Error: malformed proxy response\");\n+        default: return error(\"Error: malformed proxy response\");\n     }\n     if (recvr != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n     if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n-        CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n     LogPrint(BCLog::NET, \"SOCKS5 connected %s\\n\", strDest);\n     return true;\n }\n \n-bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n+SOCKET CreateSocket(const CService &addrConnect)\n {\n-    hSocketRet = INVALID_SOCKET;\n-\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n-        LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n-        return false;\n+        LogPrintf(\"Cannot create socket for %s: unsupported network\\n\", addrConnect.ToString());\n+        return INVALID_SOCKET;\n     }\n \n     SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n-        return false;\n+        return INVALID_SOCKET;\n+\n+    if (!IsSelectableSocket(hSocket)) {\n+        CloseSocket(hSocket);\n+        LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+        return INVALID_SOCKET;\n+    }\n \n #ifdef SO_NOSIGPIPE\n     int set = 1;\n@@ -475,9 +463,23 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n     // Set to non-blocking\n     if (!SetSocketNonBlocking(hSocket, true)) {\n         CloseSocket(hSocket);\n-        return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n     }\n+    return hSocket;\n+}\n \n+bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout)\n+{\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    if (hSocket == INVALID_SOCKET) {\n+        LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\n+        return false;\n+    }\n+    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n+        LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n+        return false;\n+    }\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n@@ -492,13 +494,11 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n             if (nRet == 0)\n             {\n                 LogPrint(BCLog::NET, \"connection to %s timeout\\n\", addrConnect.ToString());\n-                CloseSocket(hSocket);\n                 return false;\n             }\n             if (nRet == SOCKET_ERROR)\n             {\n                 LogPrintf(\"select() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-                CloseSocket(hSocket);\n                 return false;\n             }\n             socklen_t nRetSize = sizeof(nRet);\n@@ -509,13 +509,11 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n #endif\n             {\n                 LogPrintf(\"getsockopt() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-                CloseSocket(hSocket);\n                 return false;\n             }\n             if (nRet != 0)\n             {\n                 LogPrintf(\"connect() to %s failed after select(): %s\\n\", addrConnect.ToString(), NetworkErrorString(nRet));\n-                CloseSocket(hSocket);\n                 return false;\n             }\n         }\n@@ -526,12 +524,9 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n #endif\n         {\n             LogPrintf(\"connect() to %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-            CloseSocket(hSocket);\n             return false;\n         }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n \n@@ -583,9 +578,8 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n {\n-    SOCKET hSocket = INVALID_SOCKET;\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout)) {\n         if (outProxyConnectionFailed)\n@@ -597,14 +591,14 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n         ProxyCredentials random_auth;\n         static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n-        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n+        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket)) {\n             return false;\n+        }\n     } else {\n-        if (!Socks5(strDest, (unsigned short)port, 0, hSocket))\n+        if (!Socks5(strDest, (unsigned short)port, 0, hSocket)) {\n             return false;\n+        }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n bool LookupSubNet(const char* pszName, CSubNet& ret)"
      },
      {
        "sha": "c89bd5b88f3ba629d67a475ef237c2b851fabde4",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba2f19504c6b1302a93accbb50383f422c54df43/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba2f19504c6b1302a93accbb50383f422c54df43/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=ba2f19504c6b1302a93accbb50383f422c54df43",
        "patch": "@@ -51,8 +51,9 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n-bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n+SOCKET CreateSocket(const CService &addrConnect);\n+bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocketRet, int nTimeout);\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      }
    ]
  },
  {
    "sha": "3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjA5ZTAzZTBmMmRkYmNkN2NjYWE5ZDIxMDYyYmU5N2RhYjI4ODNh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-13T05:47:37Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-12-13T11:08:49Z"
      },
      "message": "Remove unused include in hash.cpp",
      "tree": {
        "sha": "3483ab0a0b78682236add221b64bfc554c669cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3483ab0a0b78682236add221b64bfc554c669cdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAloxCkQACgkQV692LbM1\nMyJ1ag/6AwCUPcqu2aaeutPsI+NUPnDT+4wH1uk3/S1SUC3dGNjjf1hpnV1/XV6+\ncnQCRGwM7f2oxvVA6tB0DB/5LWka1PevUhYJjuBbB8SuRcuAeKMSe1WDb7i9oiTK\nJjTPGIWelS/9eo69VAAgwBwPwqGrp8dIDCAb9JIbFWOvBsjUKzypwczgAa21YgUN\n6eCO/XzsXT7YW/G58FmKxMEFsE4rbg44MUwi2iw4/Ut1peo/ZBnHM2SjqgTsVQMq\nAm+1CTwTjx0XDknfztUU4aM47pM/GyTEnh4ibaBqY9yfxLw28vce3l9+n2wMLAyI\nWJxy/0ocSdpKOIbvYss22RgqKjiwTYfuZ605yJ50hKGDPPC8hjuUBckcgkVpbuy+\nHqXJeljw4TF4xhH2dJ9OMQ3A+CeKcBsVY6+jqxa36p5SbB37qmXeXdo950avtz0L\nHx8fc49ByhoUWZKa2HwNzH+L5F56/Sb0RiI2JS+F4f5f1NFLpuoKAR7IDALqrfBr\nkhnRVOP1gYGs8jFg9kEsX9rtuc2Hee4fn5IgM3Q3bBmqXs3rLNdINqFjD6d2FYL2\njkq8g9b4/zzbrJQhmruCar0kENqdlQfn1+gU8qHhHViHNgbcx2TTSmb8JvWs2nCQ\nP2dn4M4B0azHc3EJL+svzb9OZEy/cjN7RSxzJD0sS0kiNBOU9dY=\n=BeiO\n-----END PGP SIGNATURE-----",
        "payload": "tree 3483ab0a0b78682236add221b64bfc554c669cdb\nparent d44535d8189ec2f0e77d445804cca60b869b24a1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1513144057 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1513163329 +0900\n\nRemove unused include in hash.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d44535d8189ec2f0e77d445804cca60b869b24a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44535d8189ec2f0e77d445804cca60b869b24a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d44535d8189ec2f0e77d445804cca60b869b24a1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea61764dedf0b417e8ef6b07f94c8b9754e06eb4",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
        "patch": "@@ -5,7 +5,6 @@\n #include <hash.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n-#include <pubkey.h>\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)"
      }
    ]
  },
  {
    "sha": "68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGUwMjFlM2EzNWQxZTg4ZDYwNzVlYThiMDVhOGUzYTQwYTY0ZTI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-13T12:32:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-13T13:05:25Z"
      },
      "message": "Merge #11558: Minimal code changes to allow msvc compilation\n\nfbf327b Minimal code changes to allow msvc compilation. (Aaron Clauson)\n\nPull request description:\n\n  These changes are required to allow the Bitcoin source to build with Microsoft's C++ compiler (#11562 is also required).\n\n  I looked around for a better place for the typedef of ssize_t which is in random.h. The best candidate looks like src/compat.h but I figured including that header in random.h is a bigger change than the typedef. Note that the same typedef is in at least two other places including the OpenSSL and Berkeley DB headers so some of the Bitcoin code already picks it up.\n\nTree-SHA512: aa6cc6283015e08ab074641f9abdc116c4dc58574dc90f75e7a5af4cc82946d3052370e5cbe855fb6180c00f8dc66997d3724ff0412e4b7417e51b6602154825",
      "tree": {
        "sha": "a602d99d1d242f8a603127dcbc435944e5cea52f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a602d99d1d242f8a603127dcbc435944e5cea52f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMSWVAAoJEB5K7WKYbNJdCKQIAJN3haDTQJxsUe92MQI3u3ls\ncGlngch6a+z968lKc/BzRri10v+D18tR4ZJVr/wix5QMXiG+nuaokHoTP/8xFCxd\nQc5KSNhlvEcN1g565VmqXpjnrKYTv3JdVzLP2jfyDM8eFox86W98qCCEYmdm+avK\n3p2gJvU7lc+yS3kpunn2ptjbul+AyGl35L6/fCWpIU93k4S3qXQs6HUVkWHKQg1k\nDNDKYZSKGL8pOyX3TEs21Ov6j9bebSBS1w2I8btmeMEW9LG9ub4+g7rifM872uFj\nfUEoc5BWzVPpNHiykKgQiHeGVwe9BeRfjeSmaF1epKGyGUny4q1abjYnNosZvq8=\n=42o2\n-----END PGP SIGNATURE-----",
        "payload": "tree a602d99d1d242f8a603127dcbc435944e5cea52f\nparent ba2f19504c6b1302a93accbb50383f422c54df43\nparent fbf327b13868861c2877c5754caf5a9816f2603c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513168320 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513170325 +0100\n\nMerge #11558: Minimal code changes to allow msvc compilation\n\nfbf327b Minimal code changes to allow msvc compilation. (Aaron Clauson)\n\nPull request description:\n\n  These changes are required to allow the Bitcoin source to build with Microsoft's C++ compiler (#11562 is also required).\n\n  I looked around for a better place for the typedef of ssize_t which is in random.h. The best candidate looks like src/compat.h but I figured including that header in random.h is a bigger change than the typedef. Note that the same typedef is in at least two other places including the OpenSSL and Berkeley DB headers so some of the Bitcoin code already picks it up.\n\nTree-SHA512: aa6cc6283015e08ab074641f9abdc116c4dc58574dc90f75e7a5af4cc82946d3052370e5cbe855fb6180c00f8dc66997d3724ff0412e4b7417e51b6602154825\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba2f19504c6b1302a93accbb50383f422c54df43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba2f19504c6b1302a93accbb50383f422c54df43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba2f19504c6b1302a93accbb50383f422c54df43"
      },
      {
        "sha": "fbf327b13868861c2877c5754caf5a9816f2603c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf327b13868861c2877c5754caf5a9816f2603c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf327b13868861c2877c5754caf5a9816f2603c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 23,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2d9a9f29087e7113cdbcae8e736228de905c1f10",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -22,7 +22,7 @@ static void Base58Encode(benchmark::State& state)\n         }\n     };\n     while (state.KeepRunning()) {\n-        EncodeBase58(buff.begin(), buff.end());\n+        EncodeBase58(buff.data(), buff.data() + buff.size());\n     }\n }\n "
      },
      {
        "sha": "35750aa1b69f2e0c0c7894d3413c3446c2e61bc3",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -19,7 +19,7 @@ static const int MIN_CORES = 2;\n static const size_t BATCHES = 101;\n static const size_t BATCH_SIZE = 30;\n static const int PREVECTOR_SIZE = 28;\n-static const int QUEUE_BATCH_SIZE = 128;\n+static const unsigned int QUEUE_BATCH_SIZE = 128;\n static void CCheckQueueSpeed(benchmark::State& state)\n {\n     struct FakeJobNoWork {"
      },
      {
        "sha": "e75d3be4c14e120b809013e6468441369c062327",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -146,7 +146,7 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n                 { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n@@ -248,7 +248,7 @@ class CTestNetParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n \n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n             }\n@@ -319,7 +319,7 @@ class CRegTestParams : public CChainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n             }"
      },
      {
        "sha": "89cc4709a4b684e0a7097b2d1e9e6c212df3dd03",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -31,6 +31,7 @@\n #include <mswsock.h>\n #include <windows.h>\n #include <ws2tcpip.h>\n+#include <stdint.h>\n #else\n #include <sys/fcntl.h>\n #include <sys/mman.h>\n@@ -71,6 +72,15 @@ typedef unsigned int SOCKET;\n #else\n #define MAX_PATH            1024\n #endif\n+#ifdef _MSC_VER\n+#if !defined(ssize_t)\n+#ifdef _WIN64\n+typedef int64_t ssize_t;\n+#else\n+typedef int32_t ssize_t;\n+#endif\n+#endif\n+#endif\n \n #if HAVE_DECL_STRNLEN == 0\n size_t strnlen( const char *start, size_t max_len);"
      },
      {
        "sha": "20426eaceb0b4f105a32e10e610c818cd4d82eb0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -39,7 +39,7 @@ std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of\n struct IteratorComparator\n {\n     template<typename I>\n-    bool operator()(const I& a, const I& b)\n+    bool operator()(const I& a, const I& b) const\n     {\n         return &(*a) < &(*b);\n     }"
      },
      {
        "sha": "a984545467cbe5d219e4622181d70c396fe64522",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -128,7 +128,7 @@ class FastRandomContext {\n  * sure that the underlying OS APIs for all platforms support the number.\n  * (many cap out at 256 bytes).\n  */\n-static const ssize_t NUM_OS_RANDOM_BYTES = 32;\n+static const int NUM_OS_RANDOM_BYTES = 32;\n \n /** Get 32 bytes of system entropy. Do not use this in application code: use\n  * GetStrongRandBytes instead."
      },
      {
        "sha": "8d3c7369b495043fdf1180fdad701f8654cd45ac",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -7,6 +7,10 @@\n \n #include <cstring>\n \n+#if defined(_MSC_VER)\n+#include <Windows.h> // For SecureZeroMemory.\n+#endif\n+\n /* Compilers have a bad habit of removing \"superfluous\" memset calls that\n  * are trying to zero memory. For example, when memset()ing a buffer and\n  * then free()ing it, the compiler might decide that the memset is\n@@ -32,7 +36,7 @@ void memory_cleanse(void *ptr, size_t len)\n        might try to eliminate \"superfluous\" memsets. If there's an easy way to\n        detect memset_s, it would be better to use that. */\n #if defined(_MSC_VER)\n-    __asm;\n+    SecureZeroMemory(ptr, len);\n #else\n     __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n #endif"
      },
      {
        "sha": "42f9dd060049fb4d1edf774f99c0fc28ba8beee0",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "patch": "@@ -24,7 +24,7 @@\n // otherwise.\n BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n \n-static const int QUEUE_BATCH_SIZE = 128;\n+static const unsigned int QUEUE_BATCH_SIZE = 128;\n \n struct FakeCheck {\n     bool operator()()"
      }
    ]
  },
  {
    "sha": "27c6199373093bff194f996bca0a85ed52088790",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2M2MTk5MzczMDkzYmZmMTk0Zjk5NmJjYTBhODVlZDUyMDg4Nzkw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:55:00Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-13T14:51:46Z"
      },
      "message": "test: Add multidict to support dictionary with duplicate key (laanwj)",
      "tree": {
        "sha": "f22cb04947fd5b086f41115487201a233e6471f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f22cb04947fd5b086f41115487201a233e6471f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c6199373093bff194f996bca0a85ed52088790",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c6199373093bff194f996bca0a85ed52088790",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "320669a363b3674954a08c49541af65f42836b5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/320669a363b3674954a08c49541af65f42836b5d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1495bc3753da10f9ae602e9c62514d78d44a4672",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c6199373093bff194f996bca0a85ed52088790/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c6199373093bff194f996bca0a85ed52088790/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=27c6199373093bff194f996bca0a85ed52088790",
        "patch": "@@ -15,6 +15,25 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n+class multidict(dict):\n+    \"\"\"Dictionary that allows duplicate keys.\n+\n+    Constructed with a list of (key, value) tuples. When dumped by the json module,\n+    will output invalid json with repeated keys, eg:\n+    >>> json.dumps(multidict([(1,2),(1,2)])\n+    '{\"1\": 2, \"1\": 2}'\n+\n+    Used to test calls to rpc methods with repeated keys in the json object.\"\"\"\n+\n+    def __init__(self, x):\n+        dict.__init__(self, x)\n+        self.x = x\n+\n+    def items(self):\n+        return self.x\n+\n+\n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGFmNTAyOGFkM2RlNzFjOGI4NmI1MGNiMWM2YmRkNTdjMWJhNmU1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:56:03Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-13T14:51:46Z"
      },
      "message": "test: Add createrawtransaction functional tests",
      "tree": {
        "sha": "b35644708dbe8cef6e68cc4f072e3b3c7e04adf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b35644708dbe8cef6e68cc4f072e3b3c7e04adf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c6199373093bff194f996bca0a85ed52088790",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c6199373093bff194f996bca0a85ed52088790"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20da577af19a16c071eca01054def936d9b3ed4e",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
        "patch": "@@ -58,6 +58,41 @@ def run_test(self):\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n+        # Test `createrawtransaction` required parameters\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction)\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [])\n+\n+        # Test `createrawtransaction` invalid extra parameters\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [], {}, 0, False, 'foo')\n+\n+        # Test `createrawtransaction` invalid `inputs`\n+        txid = '1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000'\n+        assert_raises_rpc_error(-3, \"Expected type array\", self.nodes[0].createrawtransaction, 'foo', {})\n+        assert_raises_rpc_error(-1, \"JSON value is not an object as expected\", self.nodes[0].createrawtransaction, ['foo'], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{}], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{'txid': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout must be positive\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': -1}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, sequence number is out of range\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 0, 'sequence': -1}], {})\n+\n+        # Test `createrawtransaction` invalid `outputs`\n+        address = self.nodes[0].getnewaddress()\n+        assert_raises_rpc_error(-3, \"Expected type object\", self.nodes[0].createrawtransaction, [], 'foo')\n+        assert_raises_rpc_error(-8, \"Data must be hexadecimal string\", self.nodes[0].createrawtransaction, [], {'data': 'foo'})\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].createrawtransaction, [], {'foo': 0})\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].createrawtransaction, [], {address: 'foo'})\n+        assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n+\n+        # Test `createrawtransaction` invalid `locktime`\n+        assert_raises_rpc_error(-3, \"Expected type number\", self.nodes[0].createrawtransaction, [], {}, 'foo')\n+        assert_raises_rpc_error(-8, \"Invalid parameter, locktime out of range\", self.nodes[0].createrawtransaction, [], {}, -1)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, locktime out of range\", self.nodes[0].createrawtransaction, [], {}, 4294967296)\n+\n+        # Test `createrawtransaction` invalid `replaceable`\n+        assert_raises_rpc_error(-3, \"Expected type bool\", self.nodes[0].createrawtransaction, [], {}, 0, 'foo')\n+\n         #########################################\n         # sendrawtransaction with missing input #\n         #########################################"
      }
    ]
  },
  {
    "sha": "d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDk5MWMwY2JiOGE1NDY0YWRkMWI2NDI2OGVjY2RiZmQzMDI2ZDZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-13T16:12:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-13T16:34:08Z"
      },
      "message": "Merge #11877: Improve createrawtransaction functional tests\n\n88af502 test: Add createrawtransaction functional tests (Jo\u00e3o Barbosa)\n27c6199 test: Add multidict to support dictionary with duplicate key (laanwj) (Jo\u00e3o Barbosa)\n320669a rpc: Validate replaceable type in createrawtransaction (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This was motivated by the `Invalid parameter, duplicated address` test.\n\n  Credit to @laanwj for `multidict` implementation.\n\nTree-SHA512: a87139ae11004b73b467db1e8a072b75e23a0622b173a5668eed383b3575d8abc709817ddd2dfdc53f55afc90750fb61331199ad5de38c1ef6d482f2bc220f74",
      "tree": {
        "sha": "1e3d2742963b6ce07de31db155b0f2277f4b6669",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e3d2742963b6ce07de31db155b0f2277f4b6669"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMVaAAAoJEB5K7WKYbNJd1LQH+wWIKQkONEChRf2l2dNRaV31\nQRcnF0TfLlbvrqIdoUIvAHhpLmmjY8ybyBtbIPa2geINEwL40jLbMD3e1ijARaDV\n8a4x4rCZrnsmtNtW4mgvJbtpWx5zRidjBDNfogeuB7jqSWHj4LJinqpVdCswemZJ\nycLWPY51JfvZW3ssNBT890xv1T02wkgJJSIxdpuqN8QyLhyb2iI7jmODj+X7fvMk\n/ZoL8H+BZ5Ptl3vqSq8g3xau5kPs1U98rrosO0i1G+/gJ2lp2CZwF8ZBvDcaAXLc\nTpmOatNGNd7KPJVCgiA+hPKDSrpwW9aHnqVhLOCONFHmY5feBPXQgSAhUgIIGU8=\n=rC4X\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e3d2742963b6ce07de31db155b0f2277f4b6669\nparent 68e021e3a35d1e88d6075ea8b05a8e3a40a64e29\nparent 88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513181532 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513182848 +0100\n\nMerge #11877: Improve createrawtransaction functional tests\n\n88af502 test: Add createrawtransaction functional tests (Jo\u00e3o Barbosa)\n27c6199 test: Add multidict to support dictionary with duplicate key (laanwj) (Jo\u00e3o Barbosa)\n320669a rpc: Validate replaceable type in createrawtransaction (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This was motivated by the `Invalid parameter, duplicated address` test.\n\n  Credit to @laanwj for `multidict` implementation.\n\nTree-SHA512: a87139ae11004b73b467db1e8a072b75e23a0622b173a5668eed383b3575d8abc709817ddd2dfdc53f55afc90750fb61331199ad5de38c1ef6d482f2bc220f74\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4991c0cbb8a5464add1b64268eccdbfd3026d6e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29"
      },
      {
        "sha": "88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 55,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fbebdf44d46ba035f35bcba024a1f22b626b1b7b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4991c0cbb8a5464add1b64268eccdbfd3026d6e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4991c0cbb8a5464add1b64268eccdbfd3026d6e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
        "patch": "@@ -349,7 +349,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM}, true);\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM, UniValue::VBOOL}, true);\n     if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n "
      },
      {
        "sha": "20da577af19a16c071eca01054def936d9b3ed4e",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4991c0cbb8a5464add1b64268eccdbfd3026d6e/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4991c0cbb8a5464add1b64268eccdbfd3026d6e/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
        "patch": "@@ -15,6 +15,25 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n+class multidict(dict):\n+    \"\"\"Dictionary that allows duplicate keys.\n+\n+    Constructed with a list of (key, value) tuples. When dumped by the json module,\n+    will output invalid json with repeated keys, eg:\n+    >>> json.dumps(multidict([(1,2),(1,2)])\n+    '{\"1\": 2, \"1\": 2}'\n+\n+    Used to test calls to rpc methods with repeated keys in the json object.\"\"\"\n+\n+    def __init__(self, x):\n+        dict.__init__(self, x)\n+        self.x = x\n+\n+    def items(self):\n+        return self.x\n+\n+\n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -39,6 +58,41 @@ def run_test(self):\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n+        # Test `createrawtransaction` required parameters\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction)\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [])\n+\n+        # Test `createrawtransaction` invalid extra parameters\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [], {}, 0, False, 'foo')\n+\n+        # Test `createrawtransaction` invalid `inputs`\n+        txid = '1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000'\n+        assert_raises_rpc_error(-3, \"Expected type array\", self.nodes[0].createrawtransaction, 'foo', {})\n+        assert_raises_rpc_error(-1, \"JSON value is not an object as expected\", self.nodes[0].createrawtransaction, ['foo'], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{}], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{'txid': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout must be positive\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': -1}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, sequence number is out of range\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 0, 'sequence': -1}], {})\n+\n+        # Test `createrawtransaction` invalid `outputs`\n+        address = self.nodes[0].getnewaddress()\n+        assert_raises_rpc_error(-3, \"Expected type object\", self.nodes[0].createrawtransaction, [], 'foo')\n+        assert_raises_rpc_error(-8, \"Data must be hexadecimal string\", self.nodes[0].createrawtransaction, [], {'data': 'foo'})\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].createrawtransaction, [], {'foo': 0})\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].createrawtransaction, [], {address: 'foo'})\n+        assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n+\n+        # Test `createrawtransaction` invalid `locktime`\n+        assert_raises_rpc_error(-3, \"Expected type number\", self.nodes[0].createrawtransaction, [], {}, 'foo')\n+        assert_raises_rpc_error(-8, \"Invalid parameter, locktime out of range\", self.nodes[0].createrawtransaction, [], {}, -1)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, locktime out of range\", self.nodes[0].createrawtransaction, [], {}, 4294967296)\n+\n+        # Test `createrawtransaction` invalid `replaceable`\n+        assert_raises_rpc_error(-3, \"Expected type bool\", self.nodes[0].createrawtransaction, [], {}, 0, 'foo')\n+\n         #########################################\n         # sendrawtransaction with missing input #\n         #########################################"
      }
    ]
  },
  {
    "sha": "c79d73dc94684a43ce9ce98817aa4876db283066",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzlkNzNkYzk0Njg0YTQzY2U5Y2U5ODgxN2FhNDg3NmRiMjgzMDY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-13T17:18:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-13T17:18:33Z"
      },
      "message": "Clarify getbalance meaning a tiny bit in response to questions.",
      "tree": {
        "sha": "484e08f8000912a2dc70529590713812062a47f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/484e08f8000912a2dc70529590713812062a47f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c79d73dc94684a43ce9ce98817aa4876db283066",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d73dc94684a43ce9ce98817aa4876db283066",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c79d73dc94684a43ce9ce98817aa4876db283066",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d73dc94684a43ce9ce98817aa4876db283066/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4991c0cbb8a5464add1b64268eccdbfd3026d6e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4da56fbe8a35df1d325af17f20af719c2b1a6c2d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c79d73dc94684a43ce9ce98817aa4876db283066/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c79d73dc94684a43ce9ce98817aa4876db283066/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c79d73dc94684a43ce9ce98817aa4876db283066",
        "patch": "@@ -771,6 +771,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n+            \"The available balance is what the wallet considers currently spendable, and is\\n\"\n+            \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n             \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\""
      }
    ]
  },
  {
    "sha": "95d4450a41e9b3f7a739eeefec322bf9366ce824",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWQ0NDUwYTQxZTliM2Y3YTczOWVlZWZlYzMyMmJmOTM2NmNlODI0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-14T03:17:58Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-14T03:17:58Z"
      },
      "message": "[wallet] Tidy up CWallet::FundTransaction",
      "tree": {
        "sha": "c2a745720d34087ba82bb1b44dab35ba6f7b0229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2a745720d34087ba82bb1b44dab35ba6f7b0229"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95d4450a41e9b3f7a739eeefec322bf9366ce824",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d4450a41e9b3f7a739eeefec322bf9366ce824",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95d4450a41e9b3f7a739eeefec322bf9366ce824",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d4450a41e9b3f7a739eeefec322bf9366ce824/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "4777641e729c009f7d4358fd082070e0ec092d72",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d4450a41e9b3f7a739eeefec322bf9366ce824/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d4450a41e9b3f7a739eeefec322bf9366ce824/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=95d4450a41e9b3f7a739eeefec322bf9366ce824",
        "patch": "@@ -2592,18 +2592,18 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n {\n     std::vector<CRecipient> vecSend;\n \n-    // Turn the txout set into a CRecipient vector\n-    for (size_t idx = 0; idx < tx.vout.size(); idx++)\n-    {\n+    // Turn the txout set into a CRecipient vector.\n+    for (size_t idx = 0; idx < tx.vout.size(); idx++) {\n         const CTxOut& txOut = tx.vout[idx];\n         CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, setSubtractFeeFromOutputs.count(idx) == 1};\n         vecSend.push_back(recipient);\n     }\n \n     coinControl.fAllowOtherInputs = true;\n \n-    for (const CTxIn& txin : tx.vin)\n+    for (const CTxIn& txin : tx.vin) {\n         coinControl.Select(txin.prevout);\n+    }\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n@@ -2613,31 +2613,29 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n-        // we don't have the normal Create/Commit cycle, and don't want to risk reusing change,\n-        // so just remove the key from the keypool here.\n+        // We don't have the normal Create/Commit cycle, and don't want to risk\n+        // reusing change, so just remove the key from the keypool here.\n         reservekey.KeepKey();\n     }\n \n-    // Copy output sizes from new transaction; they may have had the fee subtracted from them\n-    for (unsigned int idx = 0; idx < tx.vout.size(); idx++)\n+    // Copy output sizes from new transaction; they may have had the fee\n+    // subtracted from them.\n+    for (unsigned int idx = 0; idx < tx.vout.size(); idx++) {\n         tx.vout[idx].nValue = wtx.tx->vout[idx].nValue;\n+    }\n \n-    // Add new txins (keeping original txin scriptSig/order)\n-    for (const CTxIn& txin : wtx.tx->vin)\n-    {\n-        if (!coinControl.IsSelected(txin.prevout))\n-        {\n+    // Add new txins while keeping original txin scriptSig/order.\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        if (!coinControl.IsSelected(txin.prevout)) {\n             tx.vin.push_back(txin);\n \n-            if (lockUnspents)\n-            {\n-              LOCK2(cs_main, cs_wallet);\n-              LockCoin(txin.prevout);\n+            if (lockUnspents) {\n+                LOCK2(cs_main, cs_wallet);\n+                LockCoin(txin.prevout);\n             }\n         }\n     }\n \n-\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "03a5dc9c3c522c500c77fdecd52d091db048d1b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2E1ZGM5YzNjNTIyYzUwMGM3N2ZkZWNkNTJkMDkxZGIwNDhkMWIw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-14T03:18:29Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-14T03:18:29Z"
      },
      "message": "[wallet] Make CWallet::FundTransaction atomic",
      "tree": {
        "sha": "0241368b9a37bed869fde518cf7be99196bee67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0241368b9a37bed869fde518cf7be99196bee67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03a5dc9c3c522c500c77fdecd52d091db048d1b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03a5dc9c3c522c500c77fdecd52d091db048d1b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03a5dc9c3c522c500c77fdecd52d091db048d1b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03a5dc9c3c522c500c77fdecd52d091db048d1b0/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95d4450a41e9b3f7a739eeefec322bf9366ce824",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d4450a41e9b3f7a739eeefec322bf9366ce824",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95d4450a41e9b3f7a739eeefec322bf9366ce824"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "106c91025836767e96f75a4b88f27a8d3c400d4d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03a5dc9c3c522c500c77fdecd52d091db048d1b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03a5dc9c3c522c500c77fdecd52d091db048d1b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=03a5dc9c3c522c500c77fdecd52d091db048d1b0",
        "patch": "@@ -2605,6 +2605,10 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n         coinControl.Select(txin.prevout);\n     }\n \n+    // Acquire the locks to prevent races to the new locked unspents between the\n+    // CreateTransaction call and LockCoin calls (when lockUnspents is true).\n+    LOCK2(cs_main, cs_wallet);\n+\n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n     if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n@@ -2630,7 +2634,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n             tx.vin.push_back(txin);\n \n             if (lockUnspents) {\n-                LOCK2(cs_main, cs_wallet);\n                 LockCoin(txin.prevout);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWU1OGQ1YmZiNzZiYTAxY2ViNTI1MTgyODFmMGVlYWFmMjg4MmY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T09:35:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T09:38:20Z"
      },
      "message": "Merge #11864: Make CWallet::FundTransaction atomic\n\n03a5dc9 [wallet] Make CWallet::FundTransaction atomic (Jo\u00e3o Barbosa)\n95d4450 [wallet] Tidy up CWallet::FundTransaction (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This PR fixes a race for `setLockedCoins` when `lockUnspents` is true. For instance, it should not be possible to use the same unspent in concurrent `fundrawtransaction` calls.\n\n  Now the `cs_main` and `cs_wallet` locks are held during `CreateTransaction` and `LockCoin`(s). Also added some style nits around the change.\n\nTree-SHA512: ccf383c0c5f6db775655a3e9ccd200c3bd831a83afae2b7c389564c74f7227f5bea86a4775727de2c3603b188f383f8a12d3f9d6d94f7887865c31c94ce95ef6",
      "tree": {
        "sha": "1b88942a92de43c2bc5dadbd234841f82183683a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b88942a92de43c2bc5dadbd234841f82183683a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMkaMAAoJEB5K7WKYbNJdJDUH/0JaBjFVkNTXCt/qIFrVJciF\nEkLa/iPzPkQgAitRvgsB3+r+ShJlj+ofjIS2deGVs6CwGlgATxxviX6nIkZHha1n\nb9HEk62tmLmGt+nOuZpiU5UaqoJmXC+wWOA0xkdAdDZZJJM0qu1GyiKZfv4pLfTh\nOjSqFbnt+MK9u1QFHusACHvYqCgb1eTX4atakxpoJ09NpQZwLCCnYQhYofuCHzuL\nXXFG88WFxtn9S5ci3SPtfcLea40NyqW6on41/jiqw/QP2CXMWbCc7C/0YCTozX/Z\nJAZqAwant+skNwWoxcJY8TWkCoK1UXsEsjkipmWBJKMa2tN1d0qZL1cJnOpUjCY=\n=5r3j\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b88942a92de43c2bc5dadbd234841f82183683a\nparent d4991c0cbb8a5464add1b64268eccdbfd3026d6e\nparent 03a5dc9c3c522c500c77fdecd52d091db048d1b0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513244158 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513244300 +0100\n\nMerge #11864: Make CWallet::FundTransaction atomic\n\n03a5dc9 [wallet] Make CWallet::FundTransaction atomic (Jo\u00e3o Barbosa)\n95d4450 [wallet] Tidy up CWallet::FundTransaction (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This PR fixes a race for `setLockedCoins` when `lockUnspents` is true. For instance, it should not be possible to use the same unspent in concurrent `fundrawtransaction` calls.\n\n  Now the `cs_main` and `cs_wallet` locks are held during `CreateTransaction` and `LockCoin`(s). Also added some style nits around the change.\n\nTree-SHA512: ccf383c0c5f6db775655a3e9ccd200c3bd831a83afae2b7c389564c74f7227f5bea86a4775727de2c3603b188f383f8a12d3f9d6d94f7887865c31c94ce95ef6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4991c0cbb8a5464add1b64268eccdbfd3026d6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4991c0cbb8a5464add1b64268eccdbfd3026d6e"
      },
      {
        "sha": "03a5dc9c3c522c500c77fdecd52d091db048d1b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03a5dc9c3c522c500c77fdecd52d091db048d1b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03a5dc9c3c522c500c77fdecd52d091db048d1b0"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 19,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9ae14dd74d5169461ad94922b9a13b30adb76f21",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 18,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
        "patch": "@@ -2595,18 +2595,22 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n {\n     std::vector<CRecipient> vecSend;\n \n-    // Turn the txout set into a CRecipient vector\n-    for (size_t idx = 0; idx < tx.vout.size(); idx++)\n-    {\n+    // Turn the txout set into a CRecipient vector.\n+    for (size_t idx = 0; idx < tx.vout.size(); idx++) {\n         const CTxOut& txOut = tx.vout[idx];\n         CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, setSubtractFeeFromOutputs.count(idx) == 1};\n         vecSend.push_back(recipient);\n     }\n \n     coinControl.fAllowOtherInputs = true;\n \n-    for (const CTxIn& txin : tx.vin)\n+    for (const CTxIn& txin : tx.vin) {\n         coinControl.Select(txin.prevout);\n+    }\n+\n+    // Acquire the locks to prevent races to the new locked unspents between the\n+    // CreateTransaction call and LockCoin calls (when lockUnspents is true).\n+    LOCK2(cs_main, cs_wallet);\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n@@ -2616,31 +2620,28 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n-        // we don't have the normal Create/Commit cycle, and don't want to risk reusing change,\n-        // so just remove the key from the keypool here.\n+        // We don't have the normal Create/Commit cycle, and don't want to risk\n+        // reusing change, so just remove the key from the keypool here.\n         reservekey.KeepKey();\n     }\n \n-    // Copy output sizes from new transaction; they may have had the fee subtracted from them\n-    for (unsigned int idx = 0; idx < tx.vout.size(); idx++)\n+    // Copy output sizes from new transaction; they may have had the fee\n+    // subtracted from them.\n+    for (unsigned int idx = 0; idx < tx.vout.size(); idx++) {\n         tx.vout[idx].nValue = wtx.tx->vout[idx].nValue;\n+    }\n \n-    // Add new txins (keeping original txin scriptSig/order)\n-    for (const CTxIn& txin : wtx.tx->vin)\n-    {\n-        if (!coinControl.IsSelected(txin.prevout))\n-        {\n+    // Add new txins while keeping original txin scriptSig/order.\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        if (!coinControl.IsSelected(txin.prevout)) {\n             tx.vin.push_back(txin);\n \n-            if (lockUnspents)\n-            {\n-              LOCK2(cs_main, cs_wallet);\n-              LockCoin(txin.prevout);\n+            if (lockUnspents) {\n+                LockCoin(txin.prevout);\n             }\n         }\n     }\n \n-\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjQ3OWMwZTYxMWEyMmQ1NGM5MGU4NGZmYWYwYmRmMjM1NmY5MGI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T15:59:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T16:01:05Z"
      },
      "message": "Merge #11884: Remove unused include in hash.cpp\n\n3f09e03 Remove unused include in hash.cpp (Karl-Johan Alm)\n\nPull request description:\n\nTree-SHA512: 543a72656460fba1c5498a0b85c49601d9b0399a4ecc49f4acf4715c258918da729df388e3be724c3161438e903ee16ad3c50626a71483aa6d85ffdbb827742d",
      "tree": {
        "sha": "434db17779d5951b37d73feab0266e2048c9dfeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/434db17779d5951b37d73feab0266e2048c9dfeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMqBBAAoJEB5K7WKYbNJdvXcH/jHujH6Zd0jWO0dBx22l9nqB\nPf6RQQD7rH3nPRi8o2JM2dgPIfUrQmdGBUyXvrYOZbrExgk/tS9sSi5ENn3hgdvM\n70HJeMj8OYyhztOJUuOlY9wD/ZUmyVZofEvVii/APkAZMlJdxrBlKaUsGAtu82gE\n1+rpG22jTAvdxL6q2o8/BBV8kMdpXxdwO8i1TajsvlsxRG7H7Qobxo51MsQkAeHz\nHE3ssJtdI/lpqqqHqCUlI2JHNRn2RIgRlWKRCa2+EkPSfex8LhJlgSyzvXT4yPyE\npQoV7gh+JUCrcRK/O1jv2wi6Ffzfn3oHMmXxYX2teWBFnGq+pCDGL5FcfpoOW+M=\n=j7xt\n-----END PGP SIGNATURE-----",
        "payload": "tree 434db17779d5951b37d73feab0266e2048c9dfeb\nparent 2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7\nparent 3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513267178 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513267265 +0100\n\nMerge #11884: Remove unused include in hash.cpp\n\n3f09e03 Remove unused include in hash.cpp (Karl-Johan Alm)\n\nPull request description:\n\nTree-SHA512: 543a72656460fba1c5498a0b85c49601d9b0399a4ecc49f4acf4715c258918da729df388e3be724c3161438e903ee16ad3c50626a71483aa6d85ffdbb827742d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66479c0e611a22d54c90e84ffaf0bdf2356f90b6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7"
      },
      {
        "sha": "3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea61764dedf0b417e8ef6b07f94c8b9754e06eb4",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66479c0e611a22d54c90e84ffaf0bdf2356f90b6/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66479c0e611a22d54c90e84ffaf0bdf2356f90b6/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
        "patch": "@@ -5,7 +5,6 @@\n #include <hash.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n-#include <pubkey.h>\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)"
      }
    ]
  },
  {
    "sha": "3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzhmMGEzYjhlNjcwZjE0MTBhNjQyYjMxMjc0ZTZjZWViOTM0NGRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T16:41:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T16:42:35Z"
      },
      "message": "Merge #11842: [build] Add missing stuff to clean-local\n\nb341143 [build] Add missing stuff to clean-local - test/functional/test_framework/__pycache__ - test/cache (Karl-Johan Alm)\n\nPull request description:\n\n  After doing\n  ```\n  ./autogen.sh && ./configure && make\n  make clean\n  make distclean\n  ```\n  and moving `.gitignore` aside, the following files still remain after this patch:\n  ```\n  \tMakefile.in\n  \taclocal.m4\n  \tautom4te.cache/\n  \tbuild-aux/compile\n  \tbuild-aux/config.guess\n  \tbuild-aux/config.sub\n  \tbuild-aux/depcomp\n  \tbuild-aux/install-sh\n  \tbuild-aux/ltmain.sh\n  \tbuild-aux/m4/libtool.m4\n  \tbuild-aux/m4/ltoptions.m4\n  \tbuild-aux/m4/ltsugar.m4\n  \tbuild-aux/m4/ltversion.m4\n  \tbuild-aux/m4/lt~obsolete.m4\n  \tbuild-aux/missing\n  \tbuild-aux/test-driver\n  \tconfigure\n  \tdoc/man/Makefile.in\n  \tsrc/Makefile.in\n  \tsrc/config/bitcoin-config.h.in\n  ```\n\n  Most are automake related so I guess it's fine if they litter around.\n\nTree-SHA512: 7566f56a79932cc1d6ee6ff487d121e3909db57167775e1b27209d93bcc1c14e47b0fcc9c0c272c4b9df907c1bc0664f02006a21b3b6939fa50fc2a5762729e4",
      "tree": {
        "sha": "3b369a980669de18174e8eb7ef44b9b6e912db59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b369a980669de18174e8eb7ef44b9b6e912db59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMqn7AAoJEB5K7WKYbNJdzDsH/0xKyJtZpj2odg557JVPyoxo\nUYhd/cgmcwe+yCj2/WAccHY1h/tyXpIVMD68xJvpdweSUTKNRm+//+sKasbPtZOJ\nksC2wH/y2yltwSwj0K9g0lJk0g7w1DgxYEzy3FqGfNdSIhnIi/8wgtOi/JL+EoSn\nG+Ut2CqOqHzzIN7G+j4eiF5iQa9FArD6ud2E3Tx4vLuZbscHULKi6zZvS2CGRdP4\nVSK/0Zo5X/Zs2lmQMQRrUlMV3sVgWlqtxBnRIIQ7tsXaT+ii9kQW3T2RPHQ9ZPu3\noK4fcpHaZbf0jOvtqC07XbahrgCPm2G58U7/Nss+3ndDf1ZaxakgcMHVJWLu16g=\n=6NxG\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b369a980669de18174e8eb7ef44b9b6e912db59\nparent 66479c0e611a22d54c90e84ffaf0bdf2356f90b6\nparent b3411435ae47246d64360f66a6b16f9a2d9f0c73\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513269719 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513269755 +0100\n\nMerge #11842: [build] Add missing stuff to clean-local\n\nb341143 [build] Add missing stuff to clean-local - test/functional/test_framework/__pycache__ - test/cache (Karl-Johan Alm)\n\nPull request description:\n\n  After doing\n  ```\n  ./autogen.sh && ./configure && make\n  make clean\n  make distclean\n  ```\n  and moving `.gitignore` aside, the following files still remain after this patch:\n  ```\n  \tMakefile.in\n  \taclocal.m4\n  \tautom4te.cache/\n  \tbuild-aux/compile\n  \tbuild-aux/config.guess\n  \tbuild-aux/config.sub\n  \tbuild-aux/depcomp\n  \tbuild-aux/install-sh\n  \tbuild-aux/ltmain.sh\n  \tbuild-aux/m4/libtool.m4\n  \tbuild-aux/m4/ltoptions.m4\n  \tbuild-aux/m4/ltsugar.m4\n  \tbuild-aux/m4/ltversion.m4\n  \tbuild-aux/m4/lt~obsolete.m4\n  \tbuild-aux/missing\n  \tbuild-aux/test-driver\n  \tconfigure\n  \tdoc/man/Makefile.in\n  \tsrc/Makefile.in\n  \tsrc/config/bitcoin-config.h.in\n  ```\n\n  Most are automake related so I guess it's fine if they litter around.\n\nTree-SHA512: 7566f56a79932cc1d6ee6ff487d121e3909db57167775e1b27209d93bcc1c14e47b0fcc9c0c272c4b9df907c1bc0664f02006a21b3b6939fa50fc2a5762729e4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8f0a3b8e670f1410a642b31274e6ceeb9344da/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66479c0e611a22d54c90e84ffaf0bdf2356f90b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66479c0e611a22d54c90e84ffaf0bdf2356f90b6"
      },
      {
        "sha": "b3411435ae47246d64360f66a6b16f9a2d9f0c73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3411435ae47246d64360f66a6b16f9a2d9f0c73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3411435ae47246d64360f66a6b16f9a2d9f0c73"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b24daf99054c3a12cfffd16ef822dadb141d38f2",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8f0a3b8e670f1410a642b31274e6ceeb9344da/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8f0a3b8e670f1410a642b31274e6ceeb9344da/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
        "patch": "@@ -279,4 +279,4 @@ DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n clean-local:\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n-\trm -rf test/functional/__pycache__\n+\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache"
      }
    ]
  },
  {
    "sha": "c66adb286a89738a6a5218be2ecfea8e398878dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjZhZGIyODZhODk3MzhhNmE1MjE4YmUyZWNmZWE4ZTM5ODg3OGRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T16:43:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-14T17:28:01Z"
      },
      "message": "Merge #10839: Don't use pass by reference to const for cheaply-copied types (bool, char, etc.)\n\n99ba0c3 Don't use pass by reference to const for cheaply-copied types (bool, char, etc.). (practicalswift)\n\nPull request description:\n\n  Don't use pass by reference to const for cheaply-copied types (`bool`, `char`, etc.).\n\nTree-SHA512: ccad5e2695dff0b3d6de3e713ff3448f2981168cdac72d73bee10ad346b9919d8d4d588933369e54657a244b8b222fa0bef919bc56d983e1fa64b2004e51b225",
      "tree": {
        "sha": "7468f59743bcf4957ec38f4b44322a5d97a5a389",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7468f59743bcf4957ec38f4b44322a5d97a5a389"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c66adb286a89738a6a5218be2ecfea8e398878dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaMrShAAoJEB5K7WKYbNJd2zgIAI6gyFgR+4J8XDgMeElef79b\nSvhiWh5WZIMoC1yW6KclJkJJBLiz9piafOahnpS93Om5PlnbwbIVLJwYErEbi6Tl\nnIOhRJ1jITJYKhwOzJUs8pthbfE/uv3n35A8Bul0/Lg6PbCnk+FsHYLnk+SYlCcF\nVCDGImknKWN++J1/e1DLDBWyzf74F6DGtsMVKZfMdGdrMTrde+vzUFTwFDfsDk+8\nCMIv1YJzZaelUhQjL2mcJvtQ+CT17N9vpq+dX+sc7LLrKcHnHW/bNmZNLLJIRouF\n5jXPinVTG4AElcjUanV9SAl300ij3OQiySUFnTe9JAmGTWZdDGHDO4tceWpUNEs=\n=z4cu\n-----END PGP SIGNATURE-----",
        "payload": "tree 7468f59743bcf4957ec38f4b44322a5d97a5a389\nparent 3c8f0a3b8e670f1410a642b31274e6ceeb9344da\nparent 99ba0c30087dc45a3805f0cac6d2e534ec52f039\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513269839 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513272481 +0100\n\nMerge #10839: Don't use pass by reference to const for cheaply-copied types (bool, char, etc.)\n\n99ba0c3 Don't use pass by reference to const for cheaply-copied types (bool, char, etc.). (practicalswift)\n\nPull request description:\n\n  Don't use pass by reference to const for cheaply-copied types (`bool`, `char`, etc.).\n\nTree-SHA512: ccad5e2695dff0b3d6de3e713ff3448f2981168cdac72d73bee10ad346b9919d8d4d588933369e54657a244b8b222fa0bef919bc56d983e1fa64b2004e51b225\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66adb286a89738a6a5218be2ecfea8e398878dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c66adb286a89738a6a5218be2ecfea8e398878dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66adb286a89738a6a5218be2ecfea8e398878dd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8f0a3b8e670f1410a642b31274e6ceeb9344da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8f0a3b8e670f1410a642b31274e6ceeb9344da"
      },
      {
        "sha": "99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99ba0c30087dc45a3805f0cac6d2e534ec52f039"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "faddfcd4d012a70b820f43645f532f92e7723ad1",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -162,7 +162,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         coinControlUpdateLabels();\n \n         // fee section\n-        for (const int &n : confTargets) {\n+        for (const int n : confTargets) {\n             ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n         }\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));"
      },
      {
        "sha": "c26b1f618c266cef4752d09f6fe23b856ec4e3f8",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -241,8 +241,8 @@ class CDataStream\n     const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }\n     reference operator[](size_type pos)              { return vch[pos + nReadPos]; }\n     void clear()                                     { vch.clear(); nReadPos = 0; }\n-    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }\n-    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }\n+    iterator insert(iterator it, const char x=char()) { return vch.insert(it, x); }\n+    void insert(iterator it, size_type n, const char x) { vch.insert(it, n, x); }\n     value_type* data()                               { return vch.data() + nReadPos; }\n     const value_type* data() const                   { return vch.data() + nReadPos; }\n "
      },
      {
        "sha": "6ca947bf1bbe5c5e15d3ab27e8a4284d196bd2fa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -721,8 +721,8 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n         const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n         const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n         const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const std::string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;"
      },
      {
        "sha": "dafd708d09bc1f57656312487cb1ea383d47b204",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1868,7 +1868,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n     return nCredit;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n     {\n@@ -1882,7 +1882,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool fUseCache) const\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -2172,7 +2172,7 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n     return balance;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t &nMaximumCount, const int &nMinDepth, const int &nMaxDepth) const\n+void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n     vCoins.clear();\n "
      },
      {
        "sha": "97581794a87fbb7c0a4d32c2972b7def62e55fb6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -445,8 +445,8 @@ class CWalletTx : public CMerkleTx\n     CAmount GetCredit(const isminefilter& filter) const;\n     CAmount GetImmatureCredit(bool fUseCache=true) const;\n     CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n@@ -830,7 +830,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t& nMaximumCount = 0, const int& nMinDepth = 0, const int& nMaxDepth = 9999999) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const;\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address."
      }
    ]
  },
  {
    "sha": "8585bb8f058441b951b8012de8c0e45207528dec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTg1YmI4ZjA1ODQ0MWI5NTFiODAxMmRlOGMwZTQ1MjA3NTI4ZGVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-15T09:42:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-15T09:43:34Z"
      },
      "message": "Merge #11616: Update ban-state in case of dirty-state during periodic sweep\n\n57ac471 Call BannedListChanged outside of cs_setBanned lock (Jonas Schnelli)\nc853812 Update ban-state in case of dirty-state during periodic sweep (Jonas Schnelli)\n\nPull request description:\n\n  We do currently not update the UI during periodic ban list sweeps (via dump banlist).\n  Fixes #11612\n\nTree-SHA512: bffbdcc03c63042177bdd511b0a9187c211c2b5011178481e8ee3e43a71eef1e4cd6b72f73672babab142b644f62f8b56f0aac1d26d3f19372b1f8644fec9395",
      "tree": {
        "sha": "beeab19af8b9c140e9a95d71c033c68315df89c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beeab19af8b9c140e9a95d71c033c68315df89c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8585bb8f058441b951b8012de8c0e45207528dec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaM5lGAAoJEB5K7WKYbNJdf34IALYP06ZboWthv1tDMNYzwRYt\n0lTJuMa1H6j55iROIwZmI9JZyu/Qm8inIgS6QRNZgGv1bAnGVKGiGqIgNMlzUL2R\nZ3WLUDxKkjShv5KtsZdDdo1uwDo4emZvq0SHzJGM4aEvOmThVlhvq5IvzZ/g51uk\nb3B8eIwnv+VzrBOJp6A08ZlymXeGrLRLyv+H/yiB4RcTtMaY2FWYhUyiSWXBN2D4\nvmgJOQKDgwcxbPLdLLJ+qHPmCnACDhVLvfA9AjdZQb1e6B+XUFcM3LzrjAuSif2b\nv89a5xERGk1lJD+MLQejSUlSN6SX/RCNmqDbredh/m87SafYJVeWnwkQnOmLcoM=\n=+Q1/\n-----END PGP SIGNATURE-----",
        "payload": "tree beeab19af8b9c140e9a95d71c033c68315df89c1\nparent c66adb286a89738a6a5218be2ecfea8e398878dd\nparent 57ac471a294fc7039140eed91d217ad1af7fa7af\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513330979 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513331014 +0100\n\nMerge #11616: Update ban-state in case of dirty-state during periodic sweep\n\n57ac471 Call BannedListChanged outside of cs_setBanned lock (Jonas Schnelli)\nc853812 Update ban-state in case of dirty-state during periodic sweep (Jonas Schnelli)\n\nPull request description:\n\n  We do currently not update the UI during periodic ban list sweeps (via dump banlist).\n  Fixes #11612\n\nTree-SHA512: bffbdcc03c63042177bdd511b0a9187c211c2b5011178481e8ee3e43a71eef1e4cd6b72f73672babab142b644f62f8b56f0aac1d26d3f19372b1f8644fec9395\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8585bb8f058441b951b8012de8c0e45207528dec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8585bb8f058441b951b8012de8c0e45207528dec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8585bb8f058441b951b8012de8c0e45207528dec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c66adb286a89738a6a5218be2ecfea8e398878dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66adb286a89738a6a5218be2ecfea8e398878dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "57ac471a294fc7039140eed91d217ad1af7fa7af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ac471a294fc7039140eed91d217ad1af7fa7af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ac471a294fc7039140eed91d217ad1af7fa7af"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e00faaeecdb6da033f846b982817a89720601f60",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8585bb8f058441b951b8012de8c0e45207528dec/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8585bb8f058441b951b8012de8c0e45207528dec/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8585bb8f058441b951b8012de8c0e45207528dec",
        "patch": "@@ -603,21 +603,28 @@ void CConnman::SetBanned(const banmap_t &banMap)\n void CConnman::SweepBanned()\n {\n     int64_t now = GetTime();\n-\n-    LOCK(cs_setBanned);\n-    banmap_t::iterator it = setBanned.begin();\n-    while(it != setBanned.end())\n+    bool notifyUI = false;\n     {\n-        CSubNet subNet = (*it).first;\n-        CBanEntry banEntry = (*it).second;\n-        if(now > banEntry.nBanUntil)\n+        LOCK(cs_setBanned);\n+        banmap_t::iterator it = setBanned.begin();\n+        while(it != setBanned.end())\n         {\n-            setBanned.erase(it++);\n-            setBannedIsDirty = true;\n-            LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n+            CSubNet subNet = (*it).first;\n+            CBanEntry banEntry = (*it).second;\n+            if(now > banEntry.nBanUntil)\n+            {\n+                setBanned.erase(it++);\n+                setBannedIsDirty = true;\n+                notifyUI = true;\n+                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n+            }\n+            else\n+                ++it;\n         }\n-        else\n-            ++it;\n+    }\n+    // update UI\n+    if(notifyUI && clientInterface) {\n+        clientInterface->BannedListChanged();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "df7181952436a90a7f300f2b673321e2ac92ef56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjcxODE5NTI0MzZhOTBhN2YzMDBmMmI2NzMzMjFlMmFjOTJlZjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-15T12:52:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-15T12:53:07Z"
      },
      "message": "Merge #11886: Clarify getbalance meaning a tiny bit in response to questions.\n\nc79d73d Clarify getbalance meaning a tiny bit in response to questions. (Matt Corallo)\n\nPull request description:\n\n  Someone was asking why getbalance \"*\" was more \"correct\" than getbalance, which should rarely be true...spendzeroconfchange was the issue.\n\nTree-SHA512: 90201cad1acec5161aee469fb4c6d737a0eb90f8380ac93abf0e41e0f02d120afcc3e2e873e5096d3655bb63bbd16fe99e72452f308d72e69139c7f6bb2d745e",
      "tree": {
        "sha": "6973446eca5f3bb1f11f442212ab6246db57bfa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6973446eca5f3bb1f11f442212ab6246db57bfa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7181952436a90a7f300f2b673321e2ac92ef56",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaM8WzAAoJEB5K7WKYbNJdiK0H/AjjHXk7vK1PZphYs2Ji16P8\n5doK8OJnWqGMlfIBBZNIXxoG6GTqm938lLKr+kOFoQjWlV7jqV1VLlBidxACQUye\np7LN2/rAOvvIXhqzw0SpCfMmNw2UxcT1+D1vzFJgkE+QhV2CDOr0h0rjGW5bJlht\nPUQYQX6cINvouHq99oVj78lOMNId6Qj3lINIJyA2Ey3vqtJ8CFG78T4gDTObRx8n\nPYU9S83270teWYBGU34ti9mOmQjL1ZtnFFPcMklR4Vb+iSK46pauvsEI03TZ+yJX\nILevrT5Gcfb/gP+hobH3+jrI5KLTyGJuHqRoNmbt+LDSzGyIgS5cEF1nUi0pcv0=\n=aNy4\n-----END PGP SIGNATURE-----",
        "payload": "tree 6973446eca5f3bb1f11f442212ab6246db57bfa2\nparent 8585bb8f058441b951b8012de8c0e45207528dec\nparent c79d73dc94684a43ce9ce98817aa4876db283066\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1513342347 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1513342387 +0100\n\nMerge #11886: Clarify getbalance meaning a tiny bit in response to questions.\n\nc79d73d Clarify getbalance meaning a tiny bit in response to questions. (Matt Corallo)\n\nPull request description:\n\n  Someone was asking why getbalance \"*\" was more \"correct\" than getbalance, which should rarely be true...spendzeroconfchange was the issue.\n\nTree-SHA512: 90201cad1acec5161aee469fb4c6d737a0eb90f8380ac93abf0e41e0f02d120afcc3e2e873e5096d3655bb63bbd16fe99e72452f308d72e69139c7f6bb2d745e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7181952436a90a7f300f2b673321e2ac92ef56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df7181952436a90a7f300f2b673321e2ac92ef56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7181952436a90a7f300f2b673321e2ac92ef56/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8585bb8f058441b951b8012de8c0e45207528dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8585bb8f058441b951b8012de8c0e45207528dec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8585bb8f058441b951b8012de8c0e45207528dec"
      },
      {
        "sha": "c79d73dc94684a43ce9ce98817aa4876db283066",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d73dc94684a43ce9ce98817aa4876db283066",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c79d73dc94684a43ce9ce98817aa4876db283066"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4da56fbe8a35df1d325af17f20af719c2b1a6c2d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7181952436a90a7f300f2b673321e2ac92ef56/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7181952436a90a7f300f2b673321e2ac92ef56/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=df7181952436a90a7f300f2b673321e2ac92ef56",
        "patch": "@@ -771,6 +771,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n+            \"The available balance is what the wallet considers currently spendable, and is\\n\"\n+            \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n             \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\""
      }
    ]
  }
]