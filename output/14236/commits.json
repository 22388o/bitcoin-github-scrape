[
  {
    "sha": "0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2E0YzhiM2M2MTk4NGU5ZTJhYjVhMmE5YTdjNDdmYWYxMzlkMWZj",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-15T09:32:12Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T13:25:10Z"
      },
      "message": "Changed functional tests which do not require wallets to run without\n\nskipping  .Addreses #14216. Changed get_deterministic_priv_key() to a\n\nnamed tuple",
      "tree": {
        "sha": "f61c3d6d645e2c7d11a7ffff230314068315532f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f61c3d6d645e2c7d11a7ffff230314068315532f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3832c25f176753b7ddb724c26ee7543fb1e1819e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3832c25f176753b7ddb724c26ee7543fb1e1819e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3832c25f176753b7ddb724c26ee7543fb1e1819e"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 58,
      "deletions": 107
    },
    "files": [
      {
        "sha": "3f15367a75a18f50d3bc04b8424b1003772fefdb",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -85,6 +85,8 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    # Use skip_test_if_missing_module() to skip the test if your test requires certain modules to be present.\n+    # This test uses generate which requires wallet to be compiled\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n "
      },
      {
        "sha": "71c3a396c1ba272d33d2ad4b587f3cac2b3be227",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -75,9 +75,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "c170f510c88df75465c90902fce8dafbecbdab57",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -16,9 +16,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)\n@@ -30,7 +27,7 @@ def run_test(self):\n         self.log.info(\"Starting with existing blocksdir ...\")\n         self.start_node(0, [\"-blocksdir=\" + blocksdir_path])\n         self.log.info(\"mining blocks..\")\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n         assert os.path.isfile(os.path.join(blocksdir_path, \"regtest\", \"blocks\", \"blk00000.dat\"))\n         assert os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest\", \"blocks\", \"index\"))\n "
      },
      {
        "sha": "8bb7e02695f5763e495123a5d1182daae9116575",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -15,9 +15,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "dbff6f15f2f1f555a832630dec5fd916942267ba",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -31,9 +31,6 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2\n@@ -54,7 +51,8 @@ def run_test(self):\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n         self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n-        hashes = self.nodes[0].generate(num_blocks_to_generate)\n+        hashes = self.nodes[0].generatetoaddress(num_blocks_to_generate,\n+                                                 self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n \n@@ -75,7 +73,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n \n         self.log.info(\"Generating one more block\")\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Verifying nodes are all synced\")\n "
      },
      {
        "sha": "940b403f9c183e346e7d0ae1de85c767838fa4ff",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -18,11 +18,8 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def reindex(self, justchainstate=False):\n-        self.nodes[0].generate(3)\n+        self.nodes[0].generatetoaddress(3, self.nodes[0].get_deterministic_priv_key().address)\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\"]]"
      },
      {
        "sha": "88df61cabc72c06b9ea9af88bd272dc36782cdf0",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -31,9 +31,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n@@ -68,13 +65,14 @@ def run_test(self):\n         node = self.nodes[0]\n         node.add_p2p_connection(P2PInterface())\n \n+        node_deterministic_address = node.get_deterministic_priv_key().address\n         # Mine one period worth of blocks\n-        node.generate(VB_PERIOD)\n+        node.generatetoaddress(VB_PERIOD, node_deterministic_address)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        node.generatetoaddress(VB_PERIOD - VB_THRESHOLD + 1, node_deterministic_address)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n@@ -83,7 +81,7 @@ def run_test(self):\n         self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        node.generate(VB_PERIOD - VB_THRESHOLD)\n+        node.generatetoaddress(VB_PERIOD - VB_THRESHOLD, node_deterministic_address)\n \n         # Check that get*info() shows the 51/100 unknown block version error.\n         assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n@@ -92,16 +90,16 @@ def run_test(self):\n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared. This will move the versionbit state to ACTIVE.\n-        node.generate(VB_PERIOD)\n+        node.generatetoaddress(VB_PERIOD, node_deterministic_address)\n \n         # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n         self.restart_node(0)\n \n         # Generating one block guarantees that we'll get out of IBD\n-        node.generate(1)\n+        node.generatetoaddress(1, node_deterministic_address)\n         wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n         # Generating one more block will be enough to generate an error.\n-        node.generate(1)\n+        node.generatetoaddress(1, node_deterministic_address)\n         # Check that get*info() shows the versionbits unknown rules warning\n         assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])"
      },
      {
        "sha": "ff55ea552824735a5d977fb7d66eeb4be3c7c6e8",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -38,9 +38,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]\n \n@@ -61,7 +58,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_equal(mining_info['pooledtx'], 0)\n \n         # Mine a block to leave initial block download\n-        node.generate(1)\n+        node.generatetoaddress(1, node.get_deterministic_priv_key().address)\n         tmpl = node.getblocktemplate()\n         self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert 'proposal' in tmpl['capabilities']\n@@ -212,7 +209,7 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n         assert chain_tip(block.hash, status='active', branchlen=0) in node.getchaintips()\n \n         # Building a few blocks should give the same results\n-        node.generate(10)\n+        node.generatetoaddress(10, node.get_deterministic_priv_key().address)\n         assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n         assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n         node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))"
      },
      {
        "sha": "fab088719756c63bce740c0c8f79eb0e81c316db",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -30,9 +30,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []\n@@ -83,7 +80,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)\n \n         # Generating a chain of 10 blocks\n-        block_hashes = self.nodes[0].generate(nblocks=10)\n+        block_hashes = self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # Create longer chain starting 2 blocks before current tip\n         height = len(block_hashes) - 2\n@@ -114,7 +111,7 @@ def run_test(self):\n \n         # Longest chain is extended so stale is much older than chain tip\n         self.nodes[0].setmocktime(0)\n-        tip = self.nodes[0].generate(nblocks=1)[0]\n+        tip = self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)[0]\n         assert_equal(self.nodes[0].getblockcount(), 14)\n \n         # Send getdata & getheaders to refresh last received getheader message"
      },
      {
        "sha": "7be7c9b3ee40f43dabe1cc6d57f70c8463d93841",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -24,9 +24,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n@@ -48,7 +45,7 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        node.generate(100)\n+        node.generatetoaddress(100, node.get_deterministic_priv_key().address)\n \n         best_block = node.getblock(node.getbestblockhash())\n         tip = int(node.getbestblockhash(), 16)"
      },
      {
        "sha": "c8c752d1f7cbd59e82cbeccb83356f9f03152fda",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -15,12 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n-        node.generate(1)  # Get node out of IBD\n+        node.generatetoaddress(1, node.get_deterministic_priv_key().address)  # Get node out of IBD\n \n         self.log.info('Test max locator size')\n         block_count = node.getblockcount()"
      },
      {
        "sha": "58e129b57d7c9bb5eec64b07317427f0b5d2ef53",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -26,9 +26,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n \n@@ -64,7 +61,7 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generatetoaddress(100, self.nodes[0].get_deterministic_priv_key().address)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)"
      },
      {
        "sha": "336d34a81d93b3c0186df0b4e0dc6dea7eda5c75",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -93,9 +93,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)\n@@ -106,7 +103,7 @@ def run_test(self):\n         wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n         #Give the node enough time to possibly leak out a message\n         time.sleep(5)"
      },
      {
        "sha": "ec3d336dc1af0cbadde8c00900b8a0d6b5f6dff2",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -34,9 +34,6 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)\n@@ -62,7 +59,7 @@ def run_test(self):\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         connect_nodes_bi(self.nodes, 0, 1)\n-        blocks = self.nodes[1].generate(292)\n+        blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n@@ -105,7 +102,7 @@ def run_test(self):\n         self.disconnect_all()\n \n         # mine 10 blocks on node 0 (pruned node)\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "d5e8dd47211f6a6cab01c291cb121d340e74990d",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -208,15 +208,12 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n \n         # Clear out block announcements from each p2p listener\n         [x.clear_block_announcements() for x in self.nodes[0].p2ps]\n-        self.nodes[0].generate(count)\n+        self.nodes[0].generatetoaddress(count, self.nodes[0].get_deterministic_priv_key().address)\n         return int(self.nodes[0].getbestblockhash(), 16)\n \n     def mine_reorg(self, length):\n@@ -226,7 +223,8 @@ def mine_reorg(self, length):\n         to-be-reorged-out blocks are mined, so that we don't break later tests.\n         return the list of block hashes newly mined.\"\"\"\n \n-        self.nodes[0].generate(length)  # make sure all invalidated blocks are node0's\n+        # make sure all invalidated blocks are node0's\n+        self.nodes[0].generatetoaddress(length, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n             x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n@@ -235,7 +233,7 @@ def mine_reorg(self, length):\n         tip_height = self.nodes[1].getblockcount()\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height - (length - 1))\n         self.nodes[1].invalidateblock(hash_to_invalidate)\n-        all_hashes = self.nodes[1].generate(length + 1)  # Must be longer than the orig chain\n+        all_hashes = self.nodes[1].generatetoaddress(length + 1, self.nodes[1].get_deterministic_priv_key().address)  # Must be longer than the orig chain\n         sync_blocks(self.nodes, wait=0.1)\n         return [int(x, 16) for x in all_hashes]\n \n@@ -254,7 +252,7 @@ def run_test(self):\n         self.test_nonnull_locators(test_node, inv_node)\n \n     def test_null_locators(self, test_node, inv_node):\n-        tip = self.nodes[0].getblockheader(self.nodes[0].generate(1)[0])\n+        tip = self.nodes[0].getblockheader(self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)[0])\n         tip_hash = int(tip[\"hash\"], 16)\n \n         inv_node.check_last_inv_announcement(inv=[tip_hash])"
      },
      {
        "sha": "11299cbc002f1d0d93d94ba4e20a4eaa8e5611b6",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -66,9 +66,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n@@ -85,8 +82,8 @@ def run_test(self):\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         # 1. Have nodes mine a block (leave IBD)\n-        [ n.generate(1) for n in self.nodes ]\n-        tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n+        [n.generatetoaddress(1, n.get_deterministic_priv_key().address) for n in self.nodes]\n+        tips = [int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes]\n \n         # 2. Send one block that builds on each tip.\n         # This should be accepted by node0"
      },
      {
        "sha": "f67ecc247cec3176052b7a933f0dc707b9acbeca",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -48,9 +48,6 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n@@ -242,12 +239,12 @@ def _test_getnetworkhashps(self):\n \n     def _test_stopatheight(self):\n         assert_equal(self.nodes[0].getblockcount(), 200)\n-        self.nodes[0].generate(6)\n+        self.nodes[0].generatetoaddress(6, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')"
      },
      {
        "sha": "c869c7262f4b2c74cef0e8a7f919fd892ca9c218",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -17,9 +17,6 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         tips = self.nodes[0].getchaintips()\n         assert_equal(len(tips), 1)\n@@ -29,8 +26,8 @@ def run_test(self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network()\n-        self.nodes[0].generate(10)\n-        self.nodes[2].generate(20)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[2].generatetoaddress(20, self.nodes[2].get_deterministic_priv_key().address)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])\n \n         tips = self.nodes[1].getchaintips ()"
      },
      {
        "sha": "d8ecdd573aac5ce3e20cac6cb39eb5b597f375f1",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -14,21 +14,18 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n-        self.nodes[0].generate(4)\n+        self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n-        self.nodes[1].generate(6)\n+        self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n         assert(self.nodes[1].getblockcount() == 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n@@ -56,7 +53,7 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n         self.log.info(\"..and then mine a block\")\n-        self.nodes[2].generate(1)\n+        self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n         assert_equal(self.nodes[2].getblockcount(), 3)"
      },
      {
        "sha": "72e6e6329f8509449f07e3140fc394b23633934a",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -38,26 +38,24 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")\n-        self.nodes[0].generate(1)\n+        gen_address = lambda i: self.nodes[i].get_deterministic_priv_key().address  # A non-wallet address to mine to\n+        self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 1)\n-        hashZ = self.nodes[1].generate(2)[-1]\n+        hashZ = self.nodes[1].generatetoaddress(2, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n-        hashC = self.nodes[0].generate(3)[-1]\n+        hashC = self.nodes[0].generatetoaddress(3, gen_address(0))[-1]\n         assert_equal(self.nodes[0].getblockcount(), 5)\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n-        hashG = self.nodes[1].generate(3)[-1]\n+        hashG = self.nodes[1].generatetoaddress(3, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n         assert(hashC != hashG)\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n@@ -86,7 +84,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n@@ -95,7 +93,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         self.log.info(\"Mine competing blocks I-J-K-L on Node 2\")\n-        self.nodes[2].generate(4)\n+        self.nodes[2].generatetoaddress(4, gen_address(2))\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")"
      },
      {
        "sha": "9a589240a83dfdee9836a0d18a8e65b43cd8894f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -271,7 +271,7 @@ def import_deterministic_coinbase_privkeys(self):\n                 assert str(e).startswith('Method not found')\n                 continue\n \n-            n.importprivkey(n.get_deterministic_priv_key()[1])\n+            n.importprivkey(n.get_deterministic_priv_key().key)\n \n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n@@ -465,7 +465,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)"
      },
      {
        "sha": "7ab7fcfcb4a79b435b7c96baf97285d6a729486e",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=0ca4c8b3c61984e9e2ab5a2a9a7c47faf139d1fc",
        "patch": "@@ -17,6 +17,7 @@\n import tempfile\n import time\n import urllib.parse\n+import collections\n \n from .authproxy import JSONRPCException\n from .util import (\n@@ -99,17 +100,18 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n     def get_deterministic_priv_key(self):\n         \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n         PRIV_KEYS = [\n             # address , privkey\n-            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n-            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n-            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n-            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n-            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n-            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n-            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n-            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n-            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+            AddressKeyPair('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            AddressKeyPair('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            AddressKeyPair('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            AddressKeyPair('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            AddressKeyPair('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            AddressKeyPair('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            AddressKeyPair('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            AddressKeyPair('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            AddressKeyPair('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n         ]\n         return PRIV_KEYS[self.index]\n "
      }
    ]
  }
]