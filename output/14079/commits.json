[
  {
    "sha": "0727e2bb70c6e0138021633ddda7ff7d89a1a953",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzI3ZTJiYjcwYzZlMDEzODAyMTYzM2RkZGE3ZmY3ZDg5YTFhOTUz",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-08-27T11:29:24Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-08-27T14:11:00Z"
      },
      "message": "Implement sighash cache in CHECKMULTISIG",
      "tree": {
        "sha": "db03855424ffee22d5ad7a890133b7492929be0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db03855424ffee22d5ad7a890133b7492929be0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0727e2bb70c6e0138021633ddda7ff7d89a1a953",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0727e2bb70c6e0138021633ddda7ff7d89a1a953",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0727e2bb70c6e0138021633ddda7ff7d89a1a953",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0727e2bb70c6e0138021633ddda7ff7d89a1a953/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e13a820f995606f0ed7aa74233c94c0d977e222d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e13a820f995606f0ed7aa74233c94c0d977e222d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e13a820f995606f0ed7aa74233c94c0d977e222d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "17b8ba9a1311553c2f91acecd9b570b671151cec",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0727e2bb70c6e0138021633ddda7ff7d89a1a953/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0727e2bb70c6e0138021633ddda7ff7d89a1a953/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=0727e2bb70c6e0138021633ddda7ff7d89a1a953",
        "patch": "@@ -935,7 +935,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                         //serror is set\n                         return false;\n                     }\n-                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n+                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion, nullptr, nullptr);\n \n                     if (!fSuccess && (flags & SCRIPT_VERIFY_NULLFAIL) && vchSig.size())\n                         return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);\n@@ -999,6 +999,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     }\n \n                     bool fSuccess = true;\n+                    uint256 sighash_copy;\n+                    int sighash_copy_type = -1;\n                     while (fSuccess && nSigsCount > 0)\n                     {\n                         valtype& vchSig    = stacktop(-isig);\n@@ -1013,7 +1015,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                         }\n \n                         // Check signature\n-                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n+                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion, &sighash_copy, &sighash_copy_type);\n \n                         if (fOk) {\n                             isig++;\n@@ -1307,20 +1309,30 @@ bool GenericTransactionSignatureChecker<T>::VerifySignature(const std::vector<un\n }\n \n template <class T>\n-bool GenericTransactionSignatureChecker<T>::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+bool GenericTransactionSignatureChecker<T>::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion, uint256* sighash_copy, int* sighash_copy_type) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n         return false;\n \n-    // Hash type is one byte tacked on to the end of the signature\n+    // Hash type is one byte unsigned char tacked on to the end of the signature\n+    // The 'unsigned' attribute is consensus critical, as the unsigned char is cast to an int and serialized in SignatureHash()\n     std::vector<unsigned char> vchSig(vchSigIn);\n     if (vchSig.empty())\n         return false;\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, this->txdata);\n+    uint256 sighash;\n+    if (sighash_copy_type && sighash_copy && *sighash_copy_type == nHashType)\n+        sighash = *sighash_copy;\n+    else {\n+        sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, this->txdata);\n+        if (sighash_copy_type && sighash_copy) {\n+            *sighash_copy = sighash;\n+            *sighash_copy_type = nHashType;\n+        }\n+    }\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "ff575b1f88df6020c6fab85a610b7a917092f52d",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0727e2bb70c6e0138021633ddda7ff7d89a1a953/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0727e2bb70c6e0138021633ddda7ff7d89a1a953/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=0727e2bb70c6e0138021633ddda7ff7d89a1a953",
        "patch": "@@ -144,7 +144,7 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion, uint256* sighash_copy, int* sighash_copy_type) const\n     {\n         return false;\n     }\n@@ -177,7 +177,7 @@ class GenericTransactionSignatureChecker : public BaseSignatureChecker\n public:\n     GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n     GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion, uint256* sighash_copy, int* sighash_copy_type) const override;\n     bool CheckLockTime(const CScriptNum& nLockTime) const override;\n     bool CheckSequence(const CScriptNum& nSequence) const override;\n };"
      },
      {
        "sha": "1e7757739bd0fdffbd9f3da3a0e26c463454647b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0727e2bb70c6e0138021633ddda7ff7d89a1a953/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0727e2bb70c6e0138021633ddda7ff7d89a1a953/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=0727e2bb70c6e0138021633ddda7ff7d89a1a953",
        "patch": "@@ -282,12 +282,12 @@ class SignatureExtractorChecker final : public BaseSignatureChecker\n \n public:\n     SignatureExtractorChecker(SignatureData& sigdata, BaseSignatureChecker& checker) : sigdata(sigdata), checker(checker) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion, uint256* sighash_copy, int* sighash_copy_type) const override;\n };\n \n-bool SignatureExtractorChecker::CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+bool SignatureExtractorChecker::CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion, uint256* sighash_copy, int* sighash_copy_type) const\n {\n-    if (checker.CheckSig(scriptSig, vchPubKey, scriptCode, sigversion)) {\n+    if (checker.CheckSig(scriptSig, vchPubKey, scriptCode, sigversion, nullptr, nullptr)) {\n         CPubKey pubkey(vchPubKey);\n         sigdata.signatures.emplace(pubkey.GetID(), SigPair(pubkey, scriptSig));\n         return true;\n@@ -365,7 +365,7 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n             for (unsigned int i = last_success_key; i < num_pubkeys; ++i) {\n                 const valtype& pubkey = solutions[i+1];\n                 // We either have a signature for this pubkey, or we have found a signature and it is valid\n-                if (data.signatures.count(CPubKey(pubkey).GetID()) || extractor_checker.CheckSig(sig, pubkey, next_script, sigversion)) {\n+                if (data.signatures.count(CPubKey(pubkey).GetID()) || extractor_checker.CheckSig(sig, pubkey, next_script, sigversion, nullptr, nullptr)) {\n                     last_success_key = i + 1;\n                     break;\n                 }\n@@ -426,7 +426,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n {\n public:\n     DummySignatureChecker() {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override { return true; }\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion, uint256* sighash_copy, int* sighash_copy_type) const override { return true; }\n };\n const DummySignatureChecker DUMMY_CHECKER;\n "
      }
    ]
  }
]