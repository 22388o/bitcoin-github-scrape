[
  {
    "sha": "5495fa585007b40b2e9285c23be275de71708af8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDk1ZmE1ODUwMDdiNDBiMmU5Mjg1YzIzYmUyNzVkZTcxNzA4YWY4",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-07-24T20:36:47Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-04-29T07:31:41Z"
      },
      "message": "Add Hash Padding Microbenchmarks",
      "tree": {
        "sha": "e46ef89d048543e474eb534aeec9533737d7deaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e46ef89d048543e474eb534aeec9533737d7deaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5495fa585007b40b2e9285c23be275de71708af8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5495fa585007b40b2e9285c23be275de71708af8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5495fa585007b40b2e9285c23be275de71708af8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5495fa585007b40b2e9285c23be275de71708af8/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba348dbc518b8e082a5dc3a225432fdacf859a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba348dbc518b8e082a5dc3a225432fdacf859a13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba348dbc518b8e082a5dc3a225432fdacf859a13"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "93b5156af34c005e614e0709324bff2fa0d93e5d",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5495fa585007b40b2e9285c23be275de71708af8/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5495fa585007b40b2e9285c23be275de71708af8/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=5495fa585007b40b2e9285c23be275de71708af8",
        "patch": "@@ -29,6 +29,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\\n+  bench/hashpadding.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n   bench/mempool_stress.cpp \\"
      },
      {
        "sha": "985be8bdba585159afa1c4b08e9b2825ad3535c9",
        "filename": "src/bench/hashpadding.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5495fa585007b40b2e9285c23be275de71708af8/src/bench/hashpadding.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5495fa585007b40b2e9285c23be275de71708af8/src/bench/hashpadding.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/hashpadding.cpp?ref=5495fa585007b40b2e9285c23be275de71708af8",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <uint256.h>\n+\n+\n+static void PrePadded(benchmark::State& state)\n+{\n+\n+    CSHA256 hasher;\n+\n+    // Setup the salted hasher\n+    uint256 nonce = GetRandHash();\n+    hasher.Write(nonce.begin(), 32);\n+    hasher.Write(nonce.begin(), 32);\n+    uint256 data = GetRandHash();\n+    while (state.KeepRunning()) {\n+        unsigned char out[32];\n+        CSHA256 h = hasher;\n+        h.Write(data.begin(), 32);\n+        h.Finalize(out);\n+    }\n+}\n+\n+BENCHMARK(PrePadded, 10000);\n+\n+static void RegularPadded(benchmark::State& state)\n+{\n+    CSHA256 hasher;\n+\n+    // Setup the salted hasher\n+    uint256 nonce = GetRandHash();\n+    uint256 data = GetRandHash();\n+    while (state.KeepRunning()) {\n+        unsigned char out[32];\n+        CSHA256 h = hasher;\n+        h.Write(nonce.begin(), 32);\n+        h.Write(data.begin(), 32);\n+        h.Finalize(out);\n+    }\n+}\n+\n+BENCHMARK(RegularPadded, 10000);"
      }
    ]
  },
  {
    "sha": "152e8baf08c7379e5cc09f90863e6309bdd4866c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTJlOGJhZjA4YzczNzllNWNjMDlmOTA4NjNlNjMwOWJkZDQ4NjZj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2018-05-09T18:05:46Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-04-29T17:50:19Z"
      },
      "message": "Use salted hasher instead of nonce in sigcache\n\nUse salted hasher instead of nonce in Script Execution Cache\n\nDon't read more than 32 bytes from GetRand\n\nApply g_* naming convention to scriptExecutionCache in validation.cpp\n\nFully apply g_* naming convention to scriptCacheHasher\n\nWrite same uint256 nonce twice for cache hash rather than calling getrand twice\n\nUse salted hasher instead of nonce in sigcache\n\nUse salted hasher instead of nonce in Script Execution Cache\n\nDon't read more than 32 bytes from GetRand\n\nApply g_* naming convention to scriptExecutionCache in validation.cpp\n\nFully apply g_* naming convention to scriptCacheHasher\n\nWrite same uint256 nonce twice for cache hash rather than calling getrand twice",
      "tree": {
        "sha": "88648e4f308795bafd2784ad3ea0ccf4b56170a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88648e4f308795bafd2784ad3ea0ccf4b56170a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152e8baf08c7379e5cc09f90863e6309bdd4866c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152e8baf08c7379e5cc09f90863e6309bdd4866c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/152e8baf08c7379e5cc09f90863e6309bdd4866c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152e8baf08c7379e5cc09f90863e6309bdd4866c/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5495fa585007b40b2e9285c23be275de71708af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5495fa585007b40b2e9285c23be275de71708af8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5495fa585007b40b2e9285c23be275de71708af8"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 23,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3c54d5bee4dae2066363f65eafdae3163f80f102",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e8baf08c7379e5cc09f90863e6309bdd4866c/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e8baf08c7379e5cc09f90863e6309bdd4866c/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=152e8baf08c7379e5cc09f90863e6309bdd4866c",
        "patch": "@@ -23,21 +23,27 @@ class CSignatureCache\n {\n private:\n      //! Entries are SHA256(nonce || signature hash || public key || signature):\n-    uint256 nonce;\n+    CSHA256 m_salted_hasher;\n     typedef CuckooCache::cache<uint256, SignatureCacheHasher> map_type;\n     map_type setValid;\n     boost::shared_mutex cs_sigcache;\n \n public:\n     CSignatureCache()\n     {\n-        GetRandBytes(nonce.begin(), 32);\n+        uint256 nonce = GetRandHash();\n+        // We want the nonce to be 64 bytes long to force the hasher to process\n+        // this chunk, which makes later hash computations more efficient. We\n+        // just write our 32-byte entropy twice to fill the 64 bytes.\n+        m_salted_hasher.Write(nonce.begin(), 32);\n+        m_salted_hasher.Write(nonce.begin(), 32);\n     }\n \n     void\n     ComputeEntry(uint256& entry, const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubkey)\n     {\n-        CSHA256().Write(nonce.begin(), 32).Write(hash.begin(), 32).Write(&pubkey[0], pubkey.size()).Write(&vchSig[0], vchSig.size()).Finalize(entry.begin());\n+        CSHA256 hasher = m_salted_hasher;\n+        hasher.Write(hash.begin(), 32).Write(&pubkey[0], pubkey.size()).Write(&vchSig[0], vchSig.size()).Finalize(entry.begin());\n     }\n \n     bool"
      },
      {
        "sha": "75952e975e3a725a6d176ce81b1a43208303c4dc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e8baf08c7379e5cc09f90863e6309bdd4866c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e8baf08c7379e5cc09f90863e6309bdd4866c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=152e8baf08c7379e5cc09f90863e6309bdd4866c",
        "patch": "@@ -1481,14 +1481,21 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n }\n \n \n-static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;\n-static uint256 scriptExecutionCacheNonce(GetRandHash());\n+static CuckooCache::cache<uint256, SignatureCacheHasher> g_scriptExecutionCache;\n+static CSHA256 g_scriptExecutionCacheHasher;\n \n void InitScriptExecutionCache() {\n+    // Setup the salted hasher\n+    uint256 nonce = GetRandHash();\n+    // We want the nonce to be 64 bytes long to force the hasher to process\n+    // this chunk, which makes later hash computations more efficient. We\n+    // just write our 32-byte entropy twice to fill the 64 bytes.\n+    g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n+    g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n+    size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n@@ -1526,12 +1533,10 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const C\n     // properly commits to the scriptPubKey in the inputs view of that\n     // transaction).\n     uint256 hashCacheEntry;\n-    // We only use the first 19 bytes of nonce to avoid a second SHA\n-    // round - giving us 19 + 32 + 4 = 55 bytes (+ 8 + 1 = 64)\n-    static_assert(55 - sizeof(flags) - 32 >= 128/8, \"Want at least 128 bits of nonce for script execution cache\");\n-    CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());\n+    CSHA256 hasher = g_scriptExecutionCacheHasher;\n+    hasher.Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());\n     AssertLockHeld(cs_main); //TODO: Remove this requirement by making CuckooCache not require external locks\n-    if (scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {\n+    if (g_scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {\n         return true;\n     }\n \n@@ -1586,7 +1591,7 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const C\n     if (cacheFullScriptStore && !pvChecks) {\n         // We executed all of the provided scripts, and were told to\n         // cache the result. Do so now.\n-        scriptExecutionCache.insert(hashCacheEntry);\n+        g_scriptExecutionCache.insert(hashCacheEntry);\n     }\n \n     return true;"
      }
    ]
  }
]