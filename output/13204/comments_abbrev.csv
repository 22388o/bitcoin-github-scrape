DrahtBot,2018-09-07T18:55:29Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18815 (bench: Add logging benchmark by MarcoFalke)\n\nIf you consider this pull request important, please also help to re",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-419533572,419533572,
sipa,2018-11-10T03:47:21Z,Benchmarks would be welcome.,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-437555705,437555705,
DrahtBot,2019-04-28T19:11:46Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 279 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-487407215,487407215,
MarcoFalke,2019-04-29T00:27:34Z,This will be closed due to inactivity in two weeks,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-487428280,487428280,
MarcoFalke,2019-05-07T14:15:59Z,Closing for now. Let me know when you want this reopened to work on it again.,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490098548,490098548,
gmaxwell,2019-05-07T19:23:31Z,"This seems like an obvious (minor) win.  It does need to be benchmarked, but it could just be an informal test, not some benchmark tool checked in.",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490221839,490221839,
MarcoFalke,2019-05-07T20:21:57Z,"The tests were failing, so at the very least this needs to be fixed:\n\n```\ntest_bitcoin-qt: random.cpp:577: void ProcRand(unsigned char*, int, RNGLevel): Assertion `num <= 32' failed.",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490240831,490240831,
jamesob,2019-05-07T20:41:55Z,"Oddly, pruned IBD (500_000 - 505_000) comparison indicates this PR slightly slower than master. Maybe I'll try again after a rebase?\n\n![nonce ibd local 500000 505000 dbcache=2048](https://user-images.githubusercontent.com/73197/57331511-c451e080-70e6-11e9-964d-474a78d46f5a.png)\n\n#### faster-sigcache-nonce vs. master (absolute)\n|                      name                      | iterations",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490247388,490247388,
JeremyRubin,2019-05-07T20:50:18Z,Rebased -- go ahead and retry!,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490250115,490250115,
gmaxwell,2019-05-07T23:14:14Z,Irrelevant nit:  I'd recommend just zerofilling the input rather than calling getrand again. 256-bits is more than then enough (and less wouldn't make getrand any faster).,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490287797,490287797,
jamesob,2019-05-08T03:00:49Z,"Current revision fails to build. Benched the rebase and didn't see much difference between master and this branch, though I don't like how much variance there was so I'm going to run again once this compiles.\n\n![ibd local 500000 505000 dbcache=2048](https://user-images.githubusercontent.com/73197/57346199-a6eb3980-711b-11e9-8eb9-e55de8b1c034.png)\n",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-490328547,490328547,
JeremyRubin,2019-05-09T22:09:24Z,fixed build issue; travis needs to be kicked @MarcoFalke ,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491086181,491086181,
MarcoFalke,2019-05-09T22:40:44Z,"kicked travis, @jamesob needs to be kicked",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491093148,491093148,
MarcoFalke,2019-05-09T22:41:51Z,"I'd prefer if the commits were squashed, so that git bisect would't break on half of them",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491093374,491093374,
JeremyRubin,2019-05-09T22:48:32Z,"I can squash them down to one commit, unless you prefer the original two?",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491094725,491094725,
MarcoFalke,2019-05-10T12:26:02Z,One commit is fine. Makes it trivial to see that bisect won't break.,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491270788,491270788,
jamesob,2019-05-10T13:38:50Z,"Yeah I need a good kick once in a while.\n\nBenching shows this as being negligibly slower than master.\n\n![ibd local 500005 505000 dbcache=2048](https://user-images.githubusercontent.com/73197/57531263-048fa980-7307-11e9-88fc-a80d8ff5decb.png)\n\n### faster-sigcache-nonce vs. master (absolute)\n|                   bench name                   |  x  |   faster-sigcache-nonce    |          ",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491292003,491292003,
MarcoFalke,2019-05-10T17:48:37Z,"The code is only run when fScriptCheck (see https://github.com/bitcoin/bitcoin/pull/13868/files#diff-24efdb00bfbe56b140fb006b562cc70bR1847)\n\nYou might want to check height=[565k-575k]",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491374931,491374931,
JeremyRubin,2019-05-10T22:19:47Z,"Are you able to just look at the time spent in connect block as opposed to the aggregate time. \n\nThats the time we reasonably care about, the total time is not granular enough",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491446203,491446203,
gmaxwell,2019-05-11T23:06:32Z,"If it's making total time worse though, that suggests either we're suffering measurement error or something interesting is going on.  Indeed, this only applies where scriptchecks are taking effect.  Use assumevalid=0 ?",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491550486,491550486,
jamesob,2019-05-13T15:25:16Z,"Latest bench with `-assumevalid=0` is consistent with previous results: basically no difference between this and master. I think the only way to sensibly proceed on this is if someone comes up with an actually-relevant microbench that I can measure. I ran the microbenches on this last run, but it wasn't clear to me which bench was actually worth looking at, and the total runtime was swamped by (sp",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491869250,491869250,
MarcoFalke,2019-05-13T16:00:15Z,Could we remove the caching if it has no impact with noassumevalid (other than code complexity)?,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491883167,491883167,
MarcoFalke,2019-05-13T16:31:37Z,I guess the only way to see a difference is to populate a mempool and then create a block with and without the cache enabled?,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491894633,491894633,
JeremyRubin,2019-05-13T17:30:04Z,@jamesob are the times you are showing total time or just time inside or block validation/check inputs?,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491914520,491914520,
MarcoFalke,2019-05-13T17:34:06Z,Total time,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491915909,491915909,
JeremyRubin,2019-05-13T18:21:33Z,It should be fairly easy to pull out the validation times from the debug log and compare those.,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491932207,491932207,
MarcoFalke,2019-05-13T18:25:56Z,See https://github.com/chaincodelabs/bitcoinperf/issues/37,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491933732,491933732,
JeremyRubin,2019-05-13T18:53:00Z,"rebased, squashed, applied @gmaxwell's nit (was easiest to just write the nonce twice rather than write zeros, which would have added more lines).",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-491942799,491942799,
JeremyRubin,2019-07-24T20:37:45Z,"I added a contrived microbenchmark which shows:\n```\n# Benchmark, evals, iterations, total, min, max, median\nPrePadded, 5, 10000, 0.00320418, 6.18847e-08, 7.06114e-08, 6.28207e-08\nRegularPadded, 5, 10000, 0.00560628, 1.09935e-07, 1.18426e-07, 1.10481e-07\n```\n\nPre padding is indeed better than regular padding.",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-514790648,514790648,
JeremyRubin,2019-07-24T21:53:58Z,"@MarcoFalke because of modularization, there's no real interfaces exposed for me to run in a bench, so the benchmark just had both techniques demonstrated (doesn't really matter if the commit comes before or after, the code changes don't affect the benchmark).",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-514814196,514814196,
JeremyRubin,2019-07-24T22:01:43Z,@MarcoFalke nits addressed ,https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-514816169,514816169,
JeremyRubin,2020-05-13T21:59:39Z,"I think this is ready to merge @MarcoFalke.\n\nAll outstanding feedback has been addressed & has two ""fresh"" ACKs and a handful of stale utACKs/makes senses.",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-628268034,628268034,
ryanofsky,2020-05-19T19:06:35Z,"> I think this is ready to merge @MarcoFalke.\n> \n> All outstanding feedback has been addressed & has two ""fresh"" ACKs and a handful of stale utACKs/makes senses.\n\nAny agreement / disagreement?\n\n",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-631023098,631023098,
MarcoFalke,2020-06-02T13:29:29Z,"On arm:\n\n```\n$ ./src/bench/bench_bitcoin --filter=.*Padded\n# Benchmark, evals, iterations, total, min, max, median\nPrePadded, 5, 10000, 0.0305467, 6.09309e-07, 6.13757e-07, 6.10061e-07\nRegularPadded, 5, 10000, 0.057972, 1.15744e-06, 1.16534e-06, 1.15813e-06\n",https://github.com/bitcoin/bitcoin/pull/13204#issuecomment-637543052,637543052,
jimpo,2018-05-14T22:29:26Z,nit: `unsigned char nonce[64]` ought to work fine.,https://github.com/bitcoin/bitcoin/pull/13204#discussion_r188117636,188117636,src/script/sigcache.cpp
MarcoFalke,2019-05-07T22:41:27Z,"style-nit:\n```suggestion\nstatic CSHA256 g_scriptExecutionCacheHasher;\n```\n\nAlso, should probably squash the third commit, so that all commits compile and pass the tests?",https://github.com/bitcoin/bitcoin/pull/13204#discussion_r281856624,281856624,src/validation.cpp
JeremyRubin,2019-05-07T22:49:29Z,"I'd prefer to leave it intact as we would want to undo this commit in the future if we get rid of the 32 byte limit on GetRand which did not exist at the time this PR was made, but I'm happy to squash if it's your preference",https://github.com/bitcoin/bitcoin/pull/13204#discussion_r281858486,281858486,src/validation.cpp
ryanofsky,2019-07-23T18:12:15Z,"It'd be good to have a code comment here saying why this writes the same nonce twice, since it does look strange. The PR description has a good explanation, but there should be some hint in the code.\n\n> The nonce is chosen to be 64 bytes long so that it forces the SHA256 hasher to process the chunk. This leaves the next 64 (or 56 depending if final chunk) open for data. In the case of the scri",https://github.com/bitcoin/bitcoin/pull/13204#discussion_r306460721,306460721,src/script/sigcache.cpp
ryanofsky,2019-07-23T18:14:13Z,Again would be good to say something about why double nonce setup is intentional.,https://github.com/bitcoin/bitcoin/pull/13204#discussion_r306461598,306461598,src/validation.cpp
JeremyRubin,2019-07-24T20:14:37Z,Comment added.,https://github.com/bitcoin/bitcoin/pull/13204#discussion_r307000795,307000795,src/script/sigcache.cpp
MarcoFalke,2019-07-24T21:42:21Z,"`h` or `hasher`? If `hasher` is intended, it looks like that this benchmark will perform as good as the previous one on every other run. Might want to add a comment to explain why.\nIf `h` is intended, could make `hasher` `const`?",https://github.com/bitcoin/bitcoin/pull/13204#discussion_r307034343,307034343,src/bench/hashpadding.cpp
MarcoFalke,2019-07-24T21:43:03Z,"```suggestion\n    CSHA256 m_salted_hasher;\n```",https://github.com/bitcoin/bitcoin/pull/13204#discussion_r307034578,307034578,src/script/sigcache.cpp
JeremyRubin,2019-07-24T21:54:44Z,Ah you're right. good catch. Let me fix that...,https://github.com/bitcoin/bitcoin/pull/13204#discussion_r307038269,307038269,src/bench/hashpadding.cpp
JeremyRubin,2019-07-24T21:55:42Z,It can't be made const because it needs to be updated a little bit.,https://github.com/bitcoin/bitcoin/pull/13204#discussion_r307038548,307038548,src/bench/hashpadding.cpp
JeremyRubin,2019-07-24T21:56:58Z,"well it can be for one of the tests, and not the other. But I want to keep the code as similar as possible between pre/regular.",https://github.com/bitcoin/bitcoin/pull/13204#discussion_r307038940,307038940,src/bench/hashpadding.cpp
