[
  {
    "sha": "8c2f4b88828b3e40f6cc690261657e66b2653432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzJmNGI4ODgyOGIzZTQwZjZjYzY5MDI2MTY1N2U2NmIyNjUzNDMy",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-03-27T18:25:18Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-08-09T09:07:11Z"
      },
      "message": "Expose more parallelism with relaxed atomics (suggested in #9938). Fix a test to check the exclusive or of two properties rather than just or.",
      "tree": {
        "sha": "6ec9c7632491d257acfa1f03b02fb07287ce8469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ec9c7632491d257acfa1f03b02fb07287ce8469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c2f4b88828b3e40f6cc690261657e66b2653432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2f4b88828b3e40f6cc690261657e66b2653432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2f4b88828b3e40f6cc690261657e66b2653432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2f4b88828b3e40f6cc690261657e66b2653432/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "929fd7276c0f0c30b9416f61a6f5f35d763d81e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/929fd7276c0f0c30b9416f61a6f5f35d763d81e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/929fd7276c0f0c30b9416f61a6f5f35d763d81e4"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c4564b45b00fc0f9c4aeb09faf81537e109d284c",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2f4b88828b3e40f6cc690261657e66b2653432/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2f4b88828b3e40f6cc690261657e66b2653432/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=8c2f4b88828b3e40f6cc690261657e66b2653432",
        "patch": "@@ -38,7 +38,7 @@ struct FakeCheckCheckCompletion {\n     static std::atomic<size_t> n_calls;\n     bool operator()()\n     {\n-        ++n_calls;\n+        n_calls.fetch_add(1, std::memory_order_relaxed);\n         return true;\n     }\n     void swap(FakeCheckCheckCompletion& x){};\n@@ -88,15 +88,15 @@ struct MemoryCheck {\n         //\n         // Really, copy constructor should be deletable, but CCheckQueue breaks\n         // if it is deleted because of internal push_back.\n-        fake_allocated_memory += b;\n+        fake_allocated_memory.fetch_add(b, std::memory_order_relaxed);\n     };\n     MemoryCheck(bool b_) : b(b_)\n     {\n-        fake_allocated_memory += b;\n+        fake_allocated_memory.fetch_add(b, std::memory_order_relaxed);\n     };\n-    ~MemoryCheck(){\n-        fake_allocated_memory -= b;\n-    \n+    ~MemoryCheck()\n+    {\n+        fake_allocated_memory.fetch_sub(b, std::memory_order_relaxed);\n     };\n     void swap(MemoryCheck& x) { std::swap(b, x.b); };\n };\n@@ -117,9 +117,9 @@ struct FrozenCleanupCheck {\n     {\n         if (should_freeze) {\n             std::unique_lock<std::mutex> l(m);\n-            nFrozen = 1;\n+            nFrozen.store(1, std::memory_order_relaxed);\n             cv.notify_one();\n-            cv.wait(l, []{ return nFrozen == 0;});\n+            cv.wait(l, []{ return nFrozen.load(std::memory_order_relaxed) == 0;});\n         }\n     }\n     void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n                 control.Add(vChecks);\n             }\n             bool r =control.Wait();\n-            BOOST_REQUIRE(r || end_fails);\n+            BOOST_REQUIRE(r != end_fails);\n         }\n     }\n     tg.interrupt_all();\n@@ -337,7 +337,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n     tg.join_all();\n }\n \n-// Test that a new verification cannot occur until all checks \n+// Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n@@ -361,11 +361,14 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n         std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);\n         // Wait until the queue has finished all jobs and frozen\n         FrozenCleanupCheck::cv.wait(l, [](){return FrozenCleanupCheck::nFrozen == 1;});\n-        // Try to get control of the queue a bunch of times\n-        for (auto x = 0; x < 100 && !fails; ++x) {\n-            fails = queue->ControlMutex.try_lock();\n-        }\n-        // Unfreeze\n+    }\n+    // Try to get control of the queue a bunch of times\n+    for (auto x = 0; x < 100 && !fails; ++x) {\n+        fails = queue->ControlMutex.try_lock();\n+    }\n+    {\n+        // Unfreeze (we need lock n case of spurious wakeup)\n+        std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);\n         FrozenCleanupCheck::nFrozen = 0;\n     }\n     // Awaken frozen destructor"
      }
    ]
  }
]