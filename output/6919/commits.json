[
  {
    "sha": "11d88c2ca2b14966b3e71e5810add25893a1a216",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWQ4OGMyY2EyYjE0OTY2YjNlNzFlNTgxMGFkZDI1ODkzYTFhMjE2",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-09-07T22:22:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T08:00:16Z"
      },
      "message": "Add chainstate obfuscation to avoid spurious antivirus detection\n\nAdds an `obfuscate` parameter to `CLevelDBWrapper` and makes use of it\nfor all new chainstate stores built via `CCoinsViewDB`. Also adds an\n`Xor` method to `CDataStream`.\n\nThanks to @sipa @laanwj @pstratem @dexX7 @KyrosKrane @gmaxwell.\n\nConflicts:\n\tsrc/Makefile.test.include\n\nGithub-Pull: #6650\nRebased-From: 42cb388167ef78f47a3a440eb651b6938c10f508",
      "tree": {
        "sha": "0fc8d60bdc4e52b2b1266152d8634adb21b32db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fc8d60bdc4e52b2b1266152d8634adb21b32db0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11d88c2ca2b14966b3e71e5810add25893a1a216",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNHURAAoJEHSBCwEjRsmmaxAH/07QtxesHiCJUkuGpe6BbSAr\nYiIYWgmFB/s8rhErCpkXYusablKn5tF+TK8mBu4v8g5AqRMcx4j+aOuDhZmQp/E/\n+/ZJA/3NfizHs/UTd56xX3wrVCjnVUtsfyU3UH2zpcYCkRrJiN5nvuJbk6vGPgaa\nZ12Yc4JVTyU++6RDSHf5UYSpJdB1M104hrWx51KXB/IQ6AYTKIzJ54wP9eWyOn5e\nL3fDonSt9sKb8vi7GBEs9BqfTHLPAtiKQmDbHJoxDE0azu10ZdCJoAWHtlnVRUcY\nyRO4OAZtBv2Eu+tUGjEFEAdbFQprdYbA/rnVPiiDoBvgKaTpgEJ+OE3VFrschCQ=\n=Tql6\n-----END PGP SIGNATURE-----",
        "payload": "tree 0fc8d60bdc4e52b2b1266152d8634adb21b32db0\nparent dfe55bdc32b5333dcce1a7f2c74628f64028d1fe\nauthor James O'Beirne <james.obeirne@gmail.com> 1441664543 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446278416 +0100\n\nAdd chainstate obfuscation to avoid spurious antivirus detection\n\nAdds an `obfuscate` parameter to `CLevelDBWrapper` and makes use of it\nfor all new chainstate stores built via `CCoinsViewDB`. Also adds an\n`Xor` method to `CDataStream`.\n\nThanks to @sipa @laanwj @pstratem @dexX7 @KyrosKrane @gmaxwell.\n\nConflicts:\n\tsrc/Makefile.test.include\n\nGithub-Pull: #6650\nRebased-From: 42cb388167ef78f47a3a440eb651b6938c10f508\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d88c2ca2b14966b3e71e5810add25893a1a216",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11d88c2ca2b14966b3e71e5810add25893a1a216",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d88c2ca2b14966b3e71e5810add25893a1a216/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfe55bdc32b5333dcce1a7f2c74628f64028d1fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe55bdc32b5333dcce1a7f2c74628f64028d1fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfe55bdc32b5333dcce1a7f2c74628f64028d1fe"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 339,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a7a277145db7bf5eae0cd0e0481818a788f6c8b0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -50,6 +50,8 @@ BITCOIN_TESTS =\\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n+  test/limitedmap_tests.cpp \\\n+  test/leveldbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\\n@@ -70,6 +72,7 @@ BITCOIN_TESTS =\\\n   test/sighash_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n+  test/streams_tests.cpp \\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\"
      },
      {
        "sha": "ce96b5c8aa632d8300841c9967e7590bf30f7882",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -5,13 +5,15 @@\n #include \"leveldbwrapper.h\"\n \n #include \"util.h\"\n+#include \"random.h\"\n \n #include <boost/filesystem.hpp>\n \n #include <leveldb/cache.h>\n #include <leveldb/env.h>\n #include <leveldb/filter_policy.h>\n #include <memenv.h>\n+#include <stdint.h>\n \n void HandleError(const leveldb::Status& status) throw(leveldb_error)\n {\n@@ -43,7 +45,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)\n+CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -67,6 +69,25 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n     HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n+\n+    // The base-case obfuscation key, which is a noop.\n+    obfuscate_key = std::vector<unsigned char>(OBFUSCATE_KEY_NUM_BYTES, '\\000');\n+\n+    bool key_exists = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n+\n+    if (!key_exists && obfuscate && IsEmpty()) {\n+        // Initialize non-degenerate obfuscation if it won't upset \n+        // existing, non-obfuscated data.\n+        std::vector<unsigned char> new_key = CreateObfuscateKey();\n+\n+        // Write `new_key` so we don't obfuscate the key with itself\n+        Write(OBFUSCATE_KEY_KEY, new_key);\n+        obfuscate_key = new_key;\n+\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+    }\n+\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n }\n \n CLevelDBWrapper::~CLevelDBWrapper()\n@@ -87,3 +108,40 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n     HandleError(status);\n     return true;\n }\n+\n+// Prefixed with null character to avoid collisions with other keys\n+//\n+// We must use a string constructor which specifies length so that we copy\n+// past the null-terminator.\n+const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n+\n+const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n+\n+/**\n+ * Returns a string (consisting of 8 random bytes) suitable for use as an \n+ * obfuscating XOR key. \n+ */\n+std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const \n+{\n+    unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n+    GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n+    return std::vector<unsigned char>(&buff[0], &buff[OBFUSCATE_KEY_NUM_BYTES]);\n+\n+}\n+\n+bool CLevelDBWrapper::IsEmpty()\n+{\n+    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    it->SeekToFirst();\n+    return !(it->Valid());\n+}\n+\n+const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const \n+{ \n+    return obfuscate_key; \n+}\n+\n+std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n+{ \n+    return HexStr(obfuscate_key); \n+}"
      },
      {
        "sha": "f5c463830cbddb5fb0898bfa839e81b1a5d774c2",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -9,6 +9,7 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/filesystem/path.hpp>\n@@ -31,8 +32,14 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n+    const std::vector<unsigned char> obfuscate_key;\n \n public:\n+    /**\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+\n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n     {\n@@ -44,6 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n+        ssValue.Xor(obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -85,8 +93,27 @@ class CLevelDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n+    //! a key used for optional XOR-obfuscation of the database\n+    std::vector<unsigned char> obfuscate_key;\n+\n+    //! the key under which the obfuscation key is stored\n+    static const std::string OBFUSCATE_KEY_KEY;\n+    \n+    //! the length of the obfuscate key in number of bytes\n+    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;\n+    \n+    std::vector<unsigned char> CreateObfuscateKey() const;\n+\n public:\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    /**\n+     * @param[in] path        Location in the filesystem where leveldb data will be stored.\n+     * @param[in] nCacheSize  Configures various leveldb cache settings.\n+     * @param[in] fMemory     If true, use leveldb's memory environment.\n+     * @param[in] fWipe       If true, remove all existing data.\n+     * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n+     *                        with a zero'd byte array.\n+     */\n+    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CLevelDBWrapper();\n \n     template <typename K, typename V>\n@@ -107,6 +134,7 @@ class CLevelDBWrapper\n         }\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(obfuscate_key);\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -117,7 +145,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -144,7 +172,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -159,7 +187,7 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n@@ -168,6 +196,23 @@ class CLevelDBWrapper\n     {\n         return pdb->NewIterator(iteroptions);\n     }\n+\n+    /**\n+     * Return true if the database managed by this class contains no entries.\n+     */\n+    bool IsEmpty();\n+\n+    /**\n+     * Accessor for obfuscate_key.\n+     */\n+    const std::vector<unsigned char>& GetObfuscateKey() const;\n+\n+    /**\n+     * Return the obfuscate_key as a hex-formatted string.\n+     */\n+    std::string GetObfuscateKeyHex() const;\n+\n };\n \n #endif // BITCOIN_LEVELDBWRAPPER_H\n+"
      },
      {
        "sha": "8610e4d18e612b71a7ae1501153f356275dd8864",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -296,6 +296,29 @@ class CDataStream\n         data.insert(data.end(), begin(), end());\n         clear();\n     }\n+\n+    /**\n+     * XOR the contents of this stream with a certain key.\n+     *\n+     * @param[in] key    The key used to XOR the data in this stream.\n+     */\n+    void Xor(const std::vector<unsigned char>& key)\n+    {\n+        if (key.size() == 0) {\n+            return;\n+        }\n+\n+        for (size_type i = 0, j = 0; i != size(); i++) {\n+            vch[i] ^= key[j++];\n+\n+            // This potentially acts on very many bytes of data, so it's\n+            // important that we calculate `j`, i.e. the `key` index in this\n+            // way instead of doing a %, which would effectively be a division\n+            // for each byte Xor'd -- much slower than need be.\n+            if (j == key.size())\n+                j = 0;\n+        }\n+    }\n };\n \n "
      },
      {
        "sha": "db04f3ea481216e01d9d593bfa3dcf02325973b2",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "added",
        "additions": 128,
        "deletions": 0,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -0,0 +1,128 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"leveldbwrapper.h\"\n+#include \"uint256.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/assign/std/vector.hpp> // for 'operator+=()'\n+#include <boost/assert.hpp>\n+#include <boost/test/unit_test.hpp>\n+                    \n+using namespace std;\n+using namespace boost::assign; // bring 'operator+=()' into scope\n+using namespace boost::filesystem;\n+         \n+// Test if a string consists entirely of null characters\n+bool is_null_key(const vector<unsigned char>& key) {\n+    bool isnull = true;\n+\n+    for (unsigned int i = 0; i < key.size(); i++)\n+        isnull &= (key[i] == '\\x00');\n+\n+    return isnull;\n+}\n+ \n+BOOST_FIXTURE_TEST_SUITE(leveldbwrapper_tests, BasicTestingSetup)\n+                       \n+BOOST_AUTO_TEST_CASE(leveldbwrapper)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        char key = 'k';\n+        uint256 in = GetRandHash();\n+        uint256 res;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbw.GetObfuscateKey()));\n+\n+        BOOST_CHECK(dbw.Write(key, in));\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+    }\n+}\n+                       \n+// Test that we do not obfuscation if there is existing data.\n+BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n+{\n+    // We're going to share this path between two wrappers\n+    path ph = temp_directory_path() / unique_path();\n+    create_directories(ph);\n+\n+    // Set up a non-obfuscated wrapper to write some initial data.\n+    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    char key = 'k';\n+    uint256 in = GetRandHash();\n+    uint256 res;\n+\n+    BOOST_CHECK(dbw->Write(key, in));\n+    BOOST_CHECK(dbw->Read(key, res));\n+    BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+\n+    // Call the destructor to free leveldb LOCK\n+    delete dbw;\n+\n+    // Now, set up another wrapper that wants to obfuscate the same directory\n+    CLevelDBWrapper odbw(ph, (1 << 10), false, false, true);\n+\n+    // Check that the key/val we wrote with unobfuscated wrapper exists and \n+    // is readable.\n+    uint256 res2;\n+    BOOST_CHECK(odbw.Read(key, res2));\n+    BOOST_CHECK_EQUAL(res2.ToString(), in.ToString());\n+\n+    BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n+    BOOST_CHECK(is_null_key(odbw.GetObfuscateKey())); // The key should be an empty string\n+\n+    uint256 in2 = GetRandHash();\n+    uint256 res3;\n+ \n+    // Check that we can write successfully\n+    BOOST_CHECK(odbw.Write(key, in2));\n+    BOOST_CHECK(odbw.Read(key, res3));\n+    BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n+}\n+                        \n+// Ensure that we start obfuscating during a reindex.\n+BOOST_AUTO_TEST_CASE(existing_data_reindex)\n+{\n+    // We're going to share this path between two wrappers\n+    path ph = temp_directory_path() / unique_path();\n+    create_directories(ph);\n+\n+    // Set up a non-obfuscated wrapper to write some initial data.\n+    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    char key = 'k';\n+    uint256 in = GetRandHash();\n+    uint256 res;\n+\n+    BOOST_CHECK(dbw->Write(key, in));\n+    BOOST_CHECK(dbw->Read(key, res));\n+    BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+\n+    // Call the destructor to free leveldb LOCK\n+    delete dbw;\n+\n+    // Simulate a -reindex by wiping the existing data store\n+    CLevelDBWrapper odbw(ph, (1 << 10), false, true, true);\n+\n+    // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n+    uint256 res2;\n+    BOOST_CHECK(!odbw.Read(key, res2));\n+    BOOST_CHECK(!is_null_key(odbw.GetObfuscateKey()));\n+\n+    uint256 in2 = GetRandHash();\n+    uint256 res3;\n+ \n+    // Check that we can write successfully\n+    BOOST_CHECK(odbw.Write(key, in2));\n+    BOOST_CHECK(odbw.Read(key, res3));\n+    BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n+}\n+ \n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0ed8f363d7893d13c4e61b4df1711ab7e36addcb",
        "filename": "src/test/streams_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"streams.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/assign/std/vector.hpp> // for 'operator+=()'\n+#include <boost/assert.hpp>\n+#include <boost/test/unit_test.hpp>\n+                    \n+using namespace std;\n+using namespace boost::assign; // bring 'operator+=()' into scope\n+\n+BOOST_FIXTURE_TEST_SUITE(streams_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n+{\n+    std::vector<char> in;\n+    std::vector<char> expected_xor;\n+    std::vector<unsigned char> key;\n+    CDataStream ds(in, 0, 0);\n+\n+    // Degenerate case\n+    \n+    key += '\\x00','\\x00';\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end()));\n+\n+    in += '\\x0f','\\xf0';\n+    expected_xor += '\\xf0','\\x0f';\n+    \n+    // Single character key\n+\n+    ds.clear();\n+    ds.insert(ds.begin(), in.begin(), in.end());\n+    key.clear();\n+\n+    key += '\\xff';\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end())); \n+    \n+    // Multi character key\n+\n+    in.clear();\n+    expected_xor.clear();\n+    in += '\\xf0','\\x0f';\n+    expected_xor += '\\x0f','\\x00';\n+                        \n+    ds.clear();\n+    ds.insert(ds.begin(), in.begin(), in.end());\n+\n+    key.clear();\n+    key += '\\xff','\\x0f';\n+\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end()));  \n+}         \n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "292bcc5d2ab7112cec7441c24814f19d4f87fd18",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d88c2ca2b14966b3e71e5810add25893a1a216/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d88c2ca2b14966b3e71e5810add25893a1a216/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=11d88c2ca2b14966b3e71e5810add25893a1a216",
        "patch": "@@ -28,18 +28,8 @@ static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n \n-void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n-    if (coins.IsPruned())\n-        batch.Erase(make_pair(DB_COINS, hash));\n-    else\n-        batch.Write(make_pair(DB_COINS, hash), coins);\n-}\n-\n-void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write(DB_BEST_BLOCK, hash);\n-}\n-\n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true) \n+{\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n@@ -58,20 +48,23 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n-            BatchWriteCoins(batch, it->first, it->second.coins);\n+            if (it->second.coins.IsPruned())\n+                batch.Erase(make_pair(DB_COINS, it->first));\n+            else\n+                batch.Write(make_pair(DB_COINS, it->first), it->second.coins);\n             changed++;\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n     if (!hashBlock.IsNull())\n-        BatchWriteHashBestChain(batch, hashBlock);\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n \n     LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n@@ -154,7 +147,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -170,7 +163,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  },
  {
    "sha": "a8d781f863c0776eac58cee19ef09d8307ae183c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGQ3ODFmODYzYzA3NzZlYWM1OGNlZTE5ZWYwOWQ4MzA3YWUxODNj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-08T00:12:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T08:04:28Z"
      },
      "message": "Encapsulate CLevelDB iterators cleanly\n\nConflicts:\n\tsrc/leveldb.cpp\n\tsrc/leveldb.h\n\tsrc/txdb.cpp\n\nGithub-Pull: #6777\nRebased-From: 3499ce1e1ad87a86598d00b7124072c91ddad833",
      "tree": {
        "sha": "4f1d86958e4eb5717922f58a8d2de31c3ce3b5b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f1d86958e4eb5717922f58a8d2de31c3ce3b5b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8d781f863c0776eac58cee19ef09d8307ae183c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNHYcAAoJEHSBCwEjRsmmSfMH/ijiciIicY8tbx3OTTRWkVST\n3rk2AbIx9Si3OeDXWmHUMPlcbTJSD7Z3G/KC5Kbzg+4z5Tfg2JAorfuvo37tv83H\n/EFIu8VF+m2UmkC3jc/PxNwgmEAQQJiD7IcS5o+qh5+mCNJRu8HwHfbJLNFyBcp7\nlkhzm1Ie2yHWf0xxlpSoNqRzwAZ/ifNc9eeHzHuA2DqtRBAf1eRqnjdZrHKOflNl\nbzXmOSNVtWeij4AER/nR2lREf9Sh/9jnJFXIx0Z5kJQk5z9SsFiGCsShtLB+slOf\ng7hItBUz5pA8TRSj1COV10llHiJF1jT4LigGIGad7Pr6xPU0uifmE5t4kr2olnI=\n=cYY9\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f1d86958e4eb5717922f58a8d2de31c3ce3b5b5\nparent 11d88c2ca2b14966b3e71e5810add25893a1a216\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1444263144 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446278668 +0100\n\nEncapsulate CLevelDB iterators cleanly\n\nConflicts:\n\tsrc/leveldb.cpp\n\tsrc/leveldb.h\n\tsrc/txdb.cpp\n\nGithub-Pull: #6777\nRebased-From: 3499ce1e1ad87a86598d00b7124072c91ddad833\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d781f863c0776eac58cee19ef09d8307ae183c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d781f863c0776eac58cee19ef09d8307ae183c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d781f863c0776eac58cee19ef09d8307ae183c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11d88c2ca2b14966b3e71e5810add25893a1a216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d88c2ca2b14966b3e71e5810add25893a1a216",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11d88c2ca2b14966b3e71e5810add25893a1a216"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 89,
      "deletions": 44
    },
    "files": [
      {
        "sha": "a94cfd8a305a90e05015982176cea119b95c3b97",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8d781f863c0776eac58cee19ef09d8307ae183c/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8d781f863c0776eac58cee19ef09d8307ae183c/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=a8d781f863c0776eac58cee19ef09d8307ae183c",
        "patch": "@@ -131,7 +131,7 @@ std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n \n bool CLevelDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n@@ -145,3 +145,10 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n+ \n+CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n+bool CLevelDBIterator::Valid() { return piter->Valid(); }\n+void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n+void CLevelDBIterator::Next() { piter->Next(); }\n+void CLevelDBIterator::Prev() { piter->Prev(); }"
      },
      {
        "sha": "ece4e4969409f69c1f5be94d2c083eb83bc534e3",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 61,
        "deletions": 4,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8d781f863c0776eac58cee19ef09d8307ae183c/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8d781f863c0776eac58cee19ef09d8307ae183c/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=a8d781f863c0776eac58cee19ef09d8307ae183c",
        "patch": "@@ -68,7 +68,65 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n+ \n+class CLevelDBIterator\n+{\n+private:\n+    leveldb::Iterator *piter;\n+\n+public:\n+    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+    ~CLevelDBIterator();\n+\n+    bool Valid();\n \n+    void SeekToFirst();\n+    void SeekToLast();\n+\n+    template<typename K> void Seek(const K& key) {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey << key;\n+        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        piter->Seek(slKey);\n+    }\n+\n+    void Next();\n+    void Prev();\n+\n+    template<typename K> bool GetKey(K& key) {\n+        leveldb::Slice slKey = piter->key();\n+        try {\n+            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            ssKey >> key;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetKeySize() {\n+        return piter->key().size();\n+    }\n+\n+    template<typename V> bool GetValue(V& value) {\n+        leveldb::Slice slValue = piter->value();\n+        try {\n+            CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(db.GetObfuscateKey());\n+            ssValue >> value;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetValueSize() {\n+        return piter->value().size();\n+    }\n+\n+};\n+ \n class CLevelDBWrapper\n {\n private:\n@@ -191,11 +249,10 @@ class CLevelDBWrapper\n         return WriteBatch(batch, true);\n     }\n \n-    // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator* NewIterator()\n+    CLevelDBIterator *NewIterator() \n+    {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n     {\n-        return pdb->NewIterator(iteroptions);\n-    }\n \n     /**\n      * Return true if the database managed by this class contains no entries."
      },
      {
        "sha": "8862dc1403823b71562d990ec4b2d74ce808684d",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 39,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8d781f863c0776eac58cee19ef09d8307ae183c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8d781f863c0776eac58cee19ef09d8307ae183c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a8d781f863c0776eac58cee19ef09d8307ae183c",
        "patch": "@@ -97,31 +97,19 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n-    pcursor->SeekToFirst();\n+    boost::scoped_ptr<CLevelDBWrapper> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n     CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_COINS) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CCoins coins;\n-                ssValue >> coins;\n-                uint256 txhash;\n-                ssKey >> txhash;\n-                ss << txhash;\n-                ss << VARINT(coins.nVersion);\n-                ss << (coins.fCoinBase ? 'c' : 'n');\n-                ss << VARINT(coins.nHeight);\n+        std::pair<char, uint256> key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && key.first == 'c') {\n+            if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n                     const CTxOut &out = coins.vout[i];\n@@ -132,13 +120,15 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + slValue.size();\n+                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n                 ss << VARINT(0);\n+            } else {\n+                return error(\"CCoinsViewDB::GetStats() : unable to read value\");\n             }\n-            pcursor->Next();\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n+        pcursor->Next();\n     }\n     stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n     stats.hashSerialized = ss.GetHash();\n@@ -185,24 +175,15 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n-    CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n-    pcursor->Seek(ssKeySet.str());\n+    pcursor->Seek(make_pair('b', uint256(0)));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_BLOCK_INDEX) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CDiskBlockIndex diskindex;\n-                ssValue >> diskindex;\n-\n+        std::pair<char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == 'b') {\n+            CDiskBlockIndex diskindex;\n+            if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object\n                 CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n                 pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n@@ -223,10 +204,10 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n \n                 pcursor->Next();\n             } else {\n-                break; // if shutdown requested or finished loading block index\n+                return error(\"LoadBlockIndex() : failed to read value\");\n             }\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "ba03d14234d0e41154fac924340cc6256e2986a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTAzZDE0MjM0ZDBlNDExNTRmYWM5MjQzNDBjYzYyNTZlMjk4NmE5",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T07:44:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T08:04:51Z"
      },
      "message": "Handle obfuscation in CLevelDBIterator\n\nGithub-Pull: #6777\nRebased-From: 0fdf8c80ee322ab747321d61faf9c72af4a51445",
      "tree": {
        "sha": "f34dd7e280327516ba94bf50e94f0b5d25be5c03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f34dd7e280327516ba94bf50e94f0b5d25be5c03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba03d14234d0e41154fac924340cc6256e2986a9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNHYyAAoJEHSBCwEjRsmm3bYH/iXdOMahNOLRPmTmc2/UPHp5\nqXsOWvTqYG7gXto4I+XPPkuJyoPdhZEJ6E145ini4TDsid1b+f7jWBWdDwy1Mrt8\nZQoyCD3kJ8toJuSn2WM5wXzA6TiQ/11y1cfMERZlZta8vbX8E6tzhp97U0F9TIeH\nN4QB4l1Y2NlnSNChCALd6MZ6F9YYFdebITQU3tTjY3kcXC1WmPnQ3Z5Ojt5KficB\nNWW8wN2xSg7xegslx++NxhZzhO6BXnPwIsubEIXBG78pt9304J0YqyGIpIzmZyOg\ne2cOP01F4tbzQCh7K7eiXNLTwQ1odm4sKshMZmddWg2cmqVkmRpnkx9upRtuhiY=\n=HLBv\n-----END PGP SIGNATURE-----",
        "payload": "tree f34dd7e280327516ba94bf50e94f0b5d25be5c03\nparent a8d781f863c0776eac58cee19ef09d8307ae183c\nauthor James O'Beirne <james.obeirne@gmail.com> 1444290250 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446278691 +0100\n\nHandle obfuscation in CLevelDBIterator\n\nGithub-Pull: #6777\nRebased-From: 0fdf8c80ee322ab747321d61faf9c72af4a51445\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba03d14234d0e41154fac924340cc6256e2986a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba03d14234d0e41154fac924340cc6256e2986a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba03d14234d0e41154fac924340cc6256e2986a9/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8d781f863c0776eac58cee19ef09d8307ae183c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d781f863c0776eac58cee19ef09d8307ae183c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d781f863c0776eac58cee19ef09d8307ae183c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "32c9345be5c5e10c92c5183a91ef403a60877d19",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba03d14234d0e41154fac924340cc6256e2986a9/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba03d14234d0e41154fac924340cc6256e2986a9/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=ba03d14234d0e41154fac924340cc6256e2986a9",
        "patch": "@@ -145,7 +145,7 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n- \n+\n CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n bool CLevelDBIterator::Valid() { return piter->Valid(); }\n void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }"
      },
      {
        "sha": "891381c5f2f0d96491ee11f07a6b520a28da4264",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba03d14234d0e41154fac924340cc6256e2986a9/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba03d14234d0e41154fac924340cc6256e2986a9/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=ba03d14234d0e41154fac924340cc6256e2986a9",
        "patch": "@@ -73,9 +73,16 @@ class CLevelDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n+    const std::vector<unsigned char> obfuscate_key;\n \n public:\n-    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+\n+    /**\n+     * @param[in] piterIn          The original leveldb iterator.\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>& obfuscate_key) : \n+        piter(piterIn), obfuscate_key(obfuscate_key) { };\n     ~CLevelDBIterator();\n \n     bool Valid();\n@@ -113,7 +120,7 @@ class CLevelDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(db.GetObfuscateKey());\n+            ssValue.Xor(obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n             return false;\n@@ -251,8 +258,8 @@ class CLevelDBWrapper\n \n     CLevelDBIterator *NewIterator() \n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n-    {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), obfuscate_key);\n+    }\n \n     /**\n      * Return true if the database managed by this class contains no entries."
      },
      {
        "sha": "fbaa49c6ced753517caa56276de55d1071380509",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba03d14234d0e41154fac924340cc6256e2986a9/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba03d14234d0e41154fac924340cc6256e2986a9/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ba03d14234d0e41154fac924340cc6256e2986a9",
        "patch": "@@ -97,7 +97,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CLevelDBWrapper> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n     pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n@@ -173,9 +173,9 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair('b', uint256(0)));\n+    pcursor->Seek(make_pair('b', uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {"
      }
    ]
  },
  {
    "sha": "775d01d4e1ad43331e773dd9ddb1cea592a7826d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzVkMDFkNGUxYWQ0MzMzMWU3NzNkZDlkZGIxY2VhNTkyYTc4MjZk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T08:22:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T16:21:14Z"
      },
      "message": "Add tests for gettxoutsetinfo, CLevelDBBatch, CLevelDBIterator\n\nThanks @dexX7.\n\nConflicts:\n\tqa/pull-tester/rpc-tests.py\n\nGithub-Pull: #6777\nRebased-From: 14885068726a8e0dc73ffa127225ab80be3e3612",
      "tree": {
        "sha": "7332e58b84eb1b41f2ade5f5c55890b3c650dce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7332e58b84eb1b41f2ade5f5c55890b3c650dce7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/775d01d4e1ad43331e773dd9ddb1cea592a7826d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775d01d4e1ad43331e773dd9ddb1cea592a7826d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/775d01d4e1ad43331e773dd9ddb1cea592a7826d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775d01d4e1ad43331e773dd9ddb1cea592a7826d/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba03d14234d0e41154fac924340cc6256e2986a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba03d14234d0e41154fac924340cc6256e2986a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba03d14234d0e41154fac924340cc6256e2986a9"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 133,
      "deletions": 2
    },
    "files": [
      {
        "sha": "15a6e375b3c2ffd6ed0167ad7937c15771bbff77",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775d01d4e1ad43331e773dd9ddb1cea592a7826d/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775d01d4e1ad43331e773dd9ddb1cea592a7826d/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=775d01d4e1ad43331e773dd9ddb1cea592a7826d",
        "patch": "@@ -27,6 +27,7 @@ testScripts=(\n     'merkle_blocks.py'\n     'signrawtransactions.py'\n     'walletbackup.py'\n+    'blockchain.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'"
      },
      {
        "sha": "a5c98b777e0d42f900253dd68c614037f592b8c4",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775d01d4e1ad43331e773dd9ddb1cea592a7826d/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775d01d4e1ad43331e773dd9ddb1cea592a7826d/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=775d01d4e1ad43331e773dd9ddb1cea592a7826d",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test RPC calls related to blockchain state.\n+#\n+\n+import decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    initialize_chain,\n+    assert_equal,\n+    start_nodes,\n+    connect_nodes_bi,\n+)\n+\n+class BlockchainTest(BitcoinTestFramework):\n+    \"\"\"\n+    Test blockchain-related RPC calls:\n+\n+        - gettxoutsetinfo\n+\n+    \"\"\"\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \" + self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        res = node.gettxoutsetinfo()\n+\n+        assert_equal(res[u'total_amount'], decimal.Decimal('8725.00000000'))\n+        assert_equal(res[u'transactions'], 200)\n+        assert_equal(res[u'height'], 200)\n+        assert_equal(res[u'txouts'], 200)\n+        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(len(res[u'bestblock']), 64)\n+        assert_equal(len(res[u'hash_serialized']), 64)\n+\n+\n+if __name__ == '__main__':\n+    BlockchainTest().main()"
      },
      {
        "sha": "3f41605d120ce8c4eb191a8930d7d93f727b1d03",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775d01d4e1ad43331e773dd9ddb1cea592a7826d/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775d01d4e1ad43331e773dd9ddb1cea592a7826d/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=775d01d4e1ad43331e773dd9ddb1cea592a7826d",
        "patch": "@@ -50,7 +50,6 @@ BITCOIN_TESTS =\\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n-  test/limitedmap_tests.cpp \\\n   test/leveldbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\"
      },
      {
        "sha": "36975548c2119bc662203660c2180ec083968ebb",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 1,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775d01d4e1ad43331e773dd9ddb1cea592a7826d/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775d01d4e1ad43331e773dd9ddb1cea592a7826d/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=775d01d4e1ad43331e773dd9ddb1cea592a7826d",
        "patch": "@@ -46,7 +46,86 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n         BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n     }\n }\n-                       \n+\n+// Test batch operations\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        char key = 'i';\n+        uint256 in = GetRandHash();\n+        char key2 = 'j';\n+        uint256 in2 = GetRandHash();\n+        char key3 = 'k';\n+        uint256 in3 = GetRandHash();\n+\n+        uint256 res;\n+        CLevelDBBatch batch(dbw.GetObfuscateKey());\n+\n+        batch.Write(key, in);\n+        batch.Write(key2, in2);\n+        batch.Write(key3, in3);\n+\n+        // Remove key3 before it's even been written\n+        batch.Erase(key3);\n+\n+        dbw.WriteBatch(batch);\n+\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+        BOOST_CHECK(dbw.Read(key2, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n+\n+        // key3 never should've been written\n+        BOOST_CHECK(dbw.Read(key3, res) == false);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        // The two keys are intentionally chosen for ordering\n+        char key = 'j';\n+        uint256 in = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key, in));\n+        char key2 = 'k';\n+        uint256 in2 = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key2, in2));\n+\n+        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+\n+        // Be sure to seek past the obfuscation key (if it exists)\n+        it->Seek(key);\n+\n+        char key_res;\n+        uint256 val_res;\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in.ToString());\n+\n+        it->Next();\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key2);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in2.ToString());\n+\n+        it->Next();\n+        BOOST_CHECK_EQUAL(it->Valid(), false);\n+    }\n+}\n+\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {"
      }
    ]
  },
  {
    "sha": "8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjczNTRiZjJjOTQ2ZTAyMmFhYjY0NTNkM2E0MWY0OWQyZWI0Yjk5",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:55:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T16:21:15Z"
      },
      "message": "Refer to obfuscate_key via pointer in peripheral CLevelDB classes\n\ncc @sipa\n\nGithub-Pull: #6777\nRebased-From: dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
      "tree": {
        "sha": "70973c75fc0d5d47463998966071f6111aa3f7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70973c75fc0d5d47463998966071f6111aa3f7c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "775d01d4e1ad43331e773dd9ddb1cea592a7826d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775d01d4e1ad43331e773dd9ddb1cea592a7826d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/775d01d4e1ad43331e773dd9ddb1cea592a7826d"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "60101e18cc03e67aba6a4058fea0c8533c713902",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
        "patch": "@@ -32,13 +32,13 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -51,7 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n-        ssValue.Xor(obfuscate_key);\n+        ssValue.Xor(*obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -73,15 +73,15 @@ class CLevelDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n \n     /**\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>& obfuscate_key) : \n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n         piter(piterIn), obfuscate_key(obfuscate_key) { };\n     ~CLevelDBIterator();\n \n@@ -120,7 +120,7 @@ class CLevelDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(obfuscate_key);\n+            ssValue.Xor(*obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n             return false;\n@@ -210,7 +210,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -237,7 +237,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -252,13 +252,13 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n     CLevelDBIterator *NewIterator() \n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions), obfuscate_key);\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**"
      },
      {
        "sha": "606313b00453ff7e3b7c6e5f2f01d4fe366dcff6",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
        "patch": "@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CLevelDBBatch batch(dbw.GetObfuscateKey());\n+        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);"
      },
      {
        "sha": "a0d36f3eb918064bf804313124e684aa115d2cb7",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b7354bf2c946e022aab6453d3a41f49d2eb4b99/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
        "patch": "@@ -48,7 +48,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(db.GetObfuscateKey());\n+    CLevelDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -137,7 +137,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -153,7 +153,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  },
  {
    "sha": "8d043126ca8d68899ecf7b3613ebe4c37c363944",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDA0MzEyNmNhOGQ2ODg5OWVjZjdiMzYxM2ViZTRjMzdjMzYzOTQ0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-21T21:23:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T16:21:15Z"
      },
      "message": "Fix chainstate serialized_size computation\n\nGithub-Pull: #6865\nRebased-From: 298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
      "tree": {
        "sha": "2981adcaf6ce88f87e7805257895164e6ccaf789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2981adcaf6ce88f87e7805257895164e6ccaf789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d043126ca8d68899ecf7b3613ebe4c37c363944",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d043126ca8d68899ecf7b3613ebe4c37c363944",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d043126ca8d68899ecf7b3613ebe4c37c363944",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d043126ca8d68899ecf7b3613ebe4c37c363944/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b7354bf2c946e022aab6453d3a41f49d2eb4b99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b7354bf2c946e022aab6453d3a41f49d2eb4b99"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7bfe362855cadcfc9ea8801167eb1cf099f5d5d",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d043126ca8d68899ecf7b3613ebe4c37c363944/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d043126ca8d68899ecf7b3613ebe4c37c363944/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=8d043126ca8d68899ecf7b3613ebe4c37c363944",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         assert_equal(res[u'transactions'], 200)\n         assert_equal(res[u'height'], 200)\n         assert_equal(res[u'txouts'], 200)\n-        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(res[u'bytes_serialized'], 13924),\n         assert_equal(len(res[u'bestblock']), 64)\n         assert_equal(len(res[u'hash_serialized']), 64)\n "
      },
      {
        "sha": "b939afcde5a095ca52bb656da61c646d90ad1df5",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d043126ca8d68899ecf7b3613ebe4c37c363944/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d043126ca8d68899ecf7b3613ebe4c37c363944/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8d043126ca8d68899ecf7b3613ebe4c37c363944",
        "patch": "@@ -120,7 +120,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n+                stats.nSerializedSize += 32 + pcursor->GetValueSize();\n                 ss << VARINT(0);\n             } else {\n                 return error(\"CCoinsViewDB::GetStats() : unable to read value\");"
      }
    ]
  }
]