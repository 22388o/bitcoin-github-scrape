[
  {
    "sha": "833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzNiYzA4NTgzNWRkMWJjZDhjMGZjMmEyNWFhNzQ2YjdkNmZlMDEy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-04T18:56:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-05T15:20:37Z"
      },
      "message": "Add Slice: a (pointer, size) array view that acts like a container",
      "tree": {
        "sha": "e698a0cde4504510fa5d93bc4c6536dad6753750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e698a0cde4504510fa5d93bc4c6536dad6753750"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfaed1ab2ec7fb3a1a6a7ed0b84503c2ed461c67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfaed1ab2ec7fb3a1a6a7ed0b84503c2ed461c67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfaed1ab2ec7fb3a1a6a7ed0b84503c2ed461c67"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1cb4f46340f27f58cff44dfbac968a81ec258fdd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
        "patch": "@@ -312,6 +312,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   script/script_error.cpp \\\n   script/script_error.h \\\n   serialize.h \\\n+  span.h \\\n   tinyformat.h \\\n   uint256.cpp \\\n   uint256.h \\"
      },
      {
        "sha": "707fc2191869c7b00d68e96ceaec02f7d58fef98",
        "filename": "src/span.h",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
        "patch": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SPAN_H\n+#define BITCOIN_SPAN_H\n+\n+#include <type_traits>\n+#include <cstddef>\n+\n+/** A Span is an object that can refer to a contiguous sequence of objects.\n+ *\n+ * It implements a subset of C++20's std::span.\n+ */\n+template<typename C>\n+class Span\n+{\n+    C* m_data;\n+    std::ptrdiff_t m_size;\n+\n+public:\n+    constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n+    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n+\n+    constexpr C* data() const noexcept { return m_data; }\n+    constexpr std::ptrdiff_t size() const noexcept { return m_size; }\n+};\n+\n+/** Create a span to a container exposing data() and size().\n+ *\n+ * This correctly deals with constness: the returned Span's element type will be\n+ * whatever data() returns a pointer to. If either the passed container is const,\n+ * or its element type is const, the resulting span will have a const element type.\n+ *\n+ * std::span will have a constructor that implements this functionality directly.\n+ */\n+template<typename V>\n+constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "9272d70536287d4ff9aa1ee41a401465c0e8194a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjcyZDcwNTM2Mjg3ZDRmZjlhYTFlZTQxYTQwMTQ2NWMwZTgxOTRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-04T19:40:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-05T15:20:37Z"
      },
      "message": "Support serializing Span<unsigned char> and use that instead of FLATDATA",
      "tree": {
        "sha": "04ba75bd2a66ecec47a47e4e1883f07ac07775e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04ba75bd2a66ecec47a47e4e1883f07ac07775e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9272d70536287d4ff9aa1ee41a401465c0e8194a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9272d70536287d4ff9aa1ee41a401465c0e8194a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9272d70536287d4ff9aa1ee41a401465c0e8194a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9272d70536287d4ff9aa1ee41a401465c0e8194a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/833bc085835dd1bcd8c0fc2a25aa746b7d6fe012"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 16,
      "deletions": 48
    },
    "files": [
      {
        "sha": "6bd68529d41c3f19e6f77c70c9d761383a47d3c6",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9272d70536287d4ff9aa1ee41a401465c0e8194a/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9272d70536287d4ff9aa1ee41a401465c0e8194a/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=9272d70536287d4ff9aa1ee41a401465c0e8194a",
        "patch": "@@ -9,6 +9,7 @@\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <serialize.h>\n+#include <span.h>\n \n class CKeyID;\n class CPubKey;\n@@ -51,12 +52,12 @@ class CScriptCompressor\n     void Serialize(Stream &s) const {\n         std::vector<unsigned char> compr;\n         if (CompressScript(script, compr)) {\n-            s << CFlatData(compr);\n+            s << MakeSpan(compr);\n             return;\n         }\n         unsigned int nSize = script.size() + nSpecialScripts;\n         s << VARINT(nSize);\n-        s << CFlatData(script);\n+        s << MakeSpan(script);\n     }\n \n     template<typename Stream>\n@@ -65,7 +66,7 @@ class CScriptCompressor\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n             std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> CFlatData(vch);\n+            s >> MakeSpan(vch);\n             DecompressScript(script, nSize, vch);\n             return;\n         }\n@@ -76,7 +77,7 @@ class CScriptCompressor\n             s.ignore(nSize);\n         } else {\n             script.resize(nSize);\n-            s >> CFlatData(script);\n+            s >> MakeSpan(script);\n         }\n     }\n };"
      },
      {
        "sha": "b3d1407f7243dcc2494651956f85f07a098c468e",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9272d70536287d4ff9aa1ee41a401465c0e8194a/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9272d70536287d4ff9aa1ee41a401465c0e8194a/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=9272d70536287d4ff9aa1ee41a401465c0e8194a",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <compat.h>\n #include <serialize.h>\n+#include <span.h>\n \n #include <stdint.h>\n #include <string>\n@@ -167,10 +168,13 @@ class CService : public CNetAddr\n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(ip);\n+\n+            // TODO: introduce native support for BE serialization in serialize.h\n             unsigned short portN = htons(port);\n-            READWRITE(FLATDATA(portN));\n-            if (ser_action.ForRead())\n+            READWRITE(Span<unsigned char>((unsigned char*)&portN, 2));\n+            if (ser_action.ForRead()) {\n                  port = ntohs(portN);\n+            }\n         }\n };\n "
      },
      {
        "sha": "e90b041cc24fd2043120b18cb8f21c444e6624ae",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 5,
        "deletions": 42,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9272d70536287d4ff9aa1ee41a401465c0e8194a/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9272d70536287d4ff9aa1ee41a401465c0e8194a/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=9272d70536287d4ff9aa1ee41a401465c0e8194a",
        "patch": "@@ -22,6 +22,7 @@\n #include <vector>\n \n #include <prevector.h>\n+#include <span.h>\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n@@ -41,7 +42,7 @@ constexpr deserialize_type deserialize {};\n \n /**\n  * Used to bypass the rule against non-const reference to temporary\n- * where it makes sense with wrappers such as CFlatData or CTxDB\n+ * where it makes sense with wrappers.\n  */\n template<typename T>\n inline T& REF(const T& val)\n@@ -185,6 +186,8 @@ template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }\n+template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\n+template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\n \n template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } // TODO Get rid of bare char\n template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }\n@@ -199,6 +202,7 @@ template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a =\n template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }\n+template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }\n \n template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }\n template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }\n@@ -384,51 +388,10 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj))\n #define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n #define COMPACTSIZE(obj) CCompactSize(REF(obj))\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n-{\n-protected:\n-    char* pbegin;\n-    char* pend;\n-public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    char* begin() { return pbegin; }\n-    const char* begin() const { return pbegin; }\n-    char* end() { return pend; }\n-    const char* end() const { return pend; }\n-\n-    template<typename Stream>\n-    void Serialize(Stream& s) const\n-    {\n-        s.write(pbegin, pend - pbegin);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s)\n-    {\n-        s.read(pbegin, pend - pbegin);\n-    }\n-};\n-\n template<VarIntMode Mode, typename I>\n class CVarInt\n {"
      }
    ]
  }
]