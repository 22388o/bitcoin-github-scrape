ryanofsky,2018-04-04T20:45:44Z,Slice type seems similar to upcoming [std::span](http://en.cppreference.com/w/cpp/container/span). It may be a good idea to call this class `Span` and consciously keep the implementation compatible so it could be swapped out in the future (it does seem compatible already).,https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378739389,378739389,
sipa,2018-04-04T20:53:17Z,"Cool, I'll rename it and add a comment. I wasn't aware of std::span.\n\nAlso, std::span seems to have a constructor that behaves like the MakeSlice function I have here. I don't think it's possible to implement that as a constructor in c++11 yet.",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378741497,378741497,
practicalswift,2018-04-04T21:09:59Z,"Concept ACK. Very nice!\n\nDoes this need a test?",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378746171,378746171,
theuni,2018-04-04T21:41:49Z,"Concept ACK, way overdue.",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378754525,378754525,
sipa,2018-04-04T21:46:03Z,@theuni My idea of removing the hack in netaddress is introducing a BigInteger wrapper (see #10785).,https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378755557,378755557,
sipa,2018-04-04T23:23:29Z,"A few small changes:\n* Renamed to `Span`\n* Reduced the number of methods (it's now so trivial that I don't see what could be tested about it, @practicalswift).\n* Added comments to explain similarity with C++20's `std::span` (thanks @ryanofsky).\n* Added TODO on the netaddress port serialization hack (pointed out by @theuni).\n\n",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378775496,378775496,
laanwj,2018-04-05T06:49:18Z,"utACK https://github.com/bitcoin/bitcoin/pull/12886/commits/ce141afc5a4a322b309840789e984b0a79c603fb\n\n> A longer term goal for Spans is making the script execution operate on them rather than on CScript itself. This will allow separate storage mechanisms for scripts.\n\nFinally :)\n\n> @theuni My idea of removing the hack in netaddress is introducing a BigInteger wrapper (see #10785).\n\",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378836987,378836987,
theuni,2018-04-05T14:47:26Z,"@sipa Sounds good.\n\nMy only complaint remaining was that member functions weren't constexpr, but that has apparently been fixed in the meantime. utACK ce141afc5a4a322b309840789e984b0a79c603fb",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378962242,378962242,
sipa,2018-04-05T14:50:39Z,"@laanwj Oops, typo. The wrapper is called `BigEndian` in #10785.",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378963363,378963363,
theuni,2018-04-05T14:50:44Z,"Quick follow-up, we'll want to add ```data()``` to any containers that don't have it already. base_blob (uint256) for example. No need to do it in this PR though.",https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-378963401,378963401,
promag,2018-04-08T13:28:14Z,Rename Slice to Span in first commit message.,https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-379550640,379550640,
jonasschnelli,2018-04-08T14:17:48Z,utACK 9272d70536287d4ff9aa1ee41a401465c0e8194a,https://github.com/bitcoin/bitcoin/pull/12886#issuecomment-379553983,379553983,
theuni,2018-04-04T21:40:42Z,"This could use an overload for the ```std::is_trivially_copyable``` trait that creates a slice for ```Slice<uint8_t>(&v, sizeof(v))```:\n> Objects of trivially-copyable types are the only C++ objects that may be safely copied with std::memcpy or serialized to/from binary files with std::ofstream::write()/std::ifstream::read(). In general, a trivially copyable type is any type for which the underl",https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179291732,179291732,src/slice.h
Empact,2018-04-05T00:57:03Z,clang-format will flatten this out and make some other whitespace changes,https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179324735,179324735,src/span.h
theuni,2018-04-05T14:54:23Z,"Tiny nit: I think these should be const too, as it's not implied by constexpr in c++14.",https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179491282,179491282,src/span.h
sipa,2018-04-05T15:21:14Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179500947,179500947,src/span.h
promag,2018-04-08T13:23:24Z,"```cpp\n#endif // BITCOIN_SPAN_H",https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179947614,179947614,src/span.h
jonasschnelli,2018-04-08T14:16:44Z,"not sure, but maybe use `sizeof(uint16_t)` instead of `2` to increase code readability?\nOr use `uint16_t` as htons container (instead of `unsigned short`) and `sizeof(portN)`?",https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179949230,179949230,src/netaddress.h
laanwj,2018-04-08T15:56:33Z,"Yep, but this code is going away anyhow see \n\n> @theuni My idea of removing the hack in netaddress is introducing a Big~~Integer~~Endian wrapper (see #10785).",https://github.com/bitcoin/bitcoin/pull/12886#discussion_r179952091,179952091,src/netaddress.h
