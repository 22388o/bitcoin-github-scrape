[
  {
    "sha": "55992f1302c7ac1a318410351be804e32a0aabe3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTk5MmYxMzAyYzdhYzFhMzE4NDEwMzUxYmU4MDRlMzJhMGFhYmUz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-16T19:00:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T15:55:48Z"
      },
      "message": "Add --quiet option to suppress rpc-tests.py output\n\nrpt-tests.py outputs progress information as it runs tests. This commit\nadds a --quiet option that suppresses that progress output and only\nprints a summary of results (and logs from failed tests).",
      "tree": {
        "sha": "87b51da978c9ddf4973eace01ef4451b79cd24c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87b51da978c9ddf4973eace01ef4451b79cd24c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55992f1302c7ac1a318410351be804e32a0aabe3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55992f1302c7ac1a318410351be804e32a0aabe3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55992f1302c7ac1a318410351be804e32a0aabe3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55992f1302c7ac1a318410351be804e32a0aabe3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5114f8113627791b871c88998bd5a3d36961c241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5114f8113627791b871c88998bd5a3d36961c241",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5114f8113627791b871c88998bd5a3d36961c241"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0f50b3df943b7808f1838c03a70971fb074934e8",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55992f1302c7ac1a318410351be804e32a0aabe3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55992f1302c7ac1a318410351be804e32a0aabe3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=55992f1302c7ac1a318410351be804e32a0aabe3",
        "patch": "@@ -23,6 +23,7 @@\n import subprocess\n import tempfile\n import re\n+import logging\n \n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n@@ -141,6 +142,7 @@ def main():\n     parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+    parser.add_argument('--quiet', '-q', action='store_true', help='only print results summary and failure logs')\n     parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n     args, unknown_args = parser.parse_known_args()\n \n@@ -152,6 +154,10 @@ def main():\n     config = configparser.ConfigParser()\n     config.read_file(open(os.path.dirname(__file__) + \"/config.ini\"))\n \n+    # Set up logging\n+    logging_level = logging.INFO if args.quiet else logging.DEBUG\n+    logging.basicConfig(format='%(message)s', level=logging_level)\n+\n     enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n     enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n@@ -233,7 +239,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     if enable_coverage:\n         coverage = RPCCoverage()\n         flags.append(coverage.flag)\n-        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+        logging.debug(\"Initializing coverage directory at %s\" % coverage.dir)\n     else:\n         coverage = None\n \n@@ -249,16 +255,20 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n \n     max_len_name = len(max(test_list, key=len))\n-    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, status, duration) = job_queue.get_next()\n         all_passed = all_passed and status != \"Failed\"\n         time_sum += duration\n \n-        print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n-        print('' if status == \"Passed\" else stdout + '\\n', end='')\n-        print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        print(\"Status: %s%s%s, Duration: %s s\\n\" % (BOLD[1], status, BOLD[0], duration))\n+        if status == \"Passed\":\n+            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], name, BOLD[0], duration))\n+        elif status == \"Skipped\":\n+            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], name, BOLD[0]))\n+        else:\n+            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], name, BOLD[0], duration))\n+            print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n+            print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n \n         results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), status.ljust(7), duration)\n \n@@ -269,7 +279,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     if coverage:\n         coverage.report_rpc_coverage()\n \n-        print(\"Cleaning up coverage data\")\n+        logging.debug(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n     sys.exit(not all_passed)"
      }
    ]
  },
  {
    "sha": "6d780b1b0c132875d16ab1d571beba69a674a161",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDc4MGIxYjBjMTMyODc1ZDE2YWIxZDU3MWJlYmE2OWE2NzRhMTYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-16T19:01:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T15:55:52Z"
      },
      "message": "Update travis config to run rpc-tests.py in quiet mode",
      "tree": {
        "sha": "05415bba7346bf40e3c367edefc0ad03eaf12aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05415bba7346bf40e3c367edefc0ad03eaf12aa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d780b1b0c132875d16ab1d571beba69a674a161",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d780b1b0c132875d16ab1d571beba69a674a161",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d780b1b0c132875d16ab1d571beba69a674a161",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d780b1b0c132875d16ab1d571beba69a674a161/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55992f1302c7ac1a318410351be804e32a0aabe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55992f1302c7ac1a318410351be804e32a0aabe3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55992f1302c7ac1a318410351be804e32a0aabe3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eec70963b4ac3ed7f1072444be10afb5b7741968",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d780b1b0c132875d16ab1d571beba69a674a161/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d780b1b0c132875d16ab1d571beba69a674a161/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=6d780b1b0c132875d16ab1d571beba69a674a161",
        "patch": "@@ -70,7 +70,7 @@ script:\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n-    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning\"; fi\n+    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --quiet --exclude pruning\"; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --coverage ${extended}; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE"
      }
    ]
  },
  {
    "sha": "8c7288c06b3cb2ec6353b006ae9b2a75da6b7635",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzcyODhjMDZiM2NiMmVjNjM1M2IwMDZhZTliMmE3NWRhNmI3NjM1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-16T19:01:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T23:34:25Z"
      },
      "message": "Print out the final 1000 lines of test_framework.log if test fails",
      "tree": {
        "sha": "88f2cef141d78b7c3c14bad937d14acfb4b7ae8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88f2cef141d78b7c3c14bad937d14acfb4b7ae8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c7288c06b3cb2ec6353b006ae9b2a75da6b7635",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7288c06b3cb2ec6353b006ae9b2a75da6b7635",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7288c06b3cb2ec6353b006ae9b2a75da6b7635",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7288c06b3cb2ec6353b006ae9b2a75da6b7635/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d780b1b0c132875d16ab1d571beba69a674a161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d780b1b0c132875d16ab1d571beba69a674a161",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d780b1b0c132875d16ab1d571beba69a674a161"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "473b7c14a904b520d5ed33a9b4cd10dcc673b27a",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c7288c06b3cb2ec6353b006ae9b2a75da6b7635/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c7288c06b3cb2ec6353b006ae9b2a75da6b7635/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8c7288c06b3cb2ec6353b006ae9b2a75da6b7635",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n+from collections import deque\n import logging\n import optparse\n import os\n@@ -177,12 +178,17 @@ def main(self):\n                 # Dump the end of the debug logs, to aid in debugging rare\n                 # travis failures.\n                 import glob\n-                filenames = glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n+                filenames = [self.options.tmpdir + \"/test_framework.log\"]\n+                filenames += glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n                 MAX_LINES_TO_PRINT = 1000\n-                for f in filenames:\n-                    print(\"From\" , f, \":\")\n-                    from collections import deque\n-                    print(\"\".join(deque(open(f), MAX_LINES_TO_PRINT)))\n+                for fn in filenames:\n+                    try:\n+                        with open(fn, 'r') as f:\n+                            print(\"From\" , fn, \":\")\n+                            print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n+                    except OSError:\n+                        print(\"Opening file %s failed.\" % fn)\n+                        traceback.print_exc()\n         if success:\n             self.log.info(\"Tests successful\")\n             sys.exit(self.TEST_EXIT_PASSED)"
      }
    ]
  }
]