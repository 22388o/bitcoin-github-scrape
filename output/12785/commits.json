[
  {
    "sha": "f63bc5e06310ea25051e2bf89c231f6096dda169",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjNiYzVlMDYzMTBlYTI1MDUxZTJiZjg5YzIzMWY2MDk2ZGRhMTY5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-26T08:52:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-05T13:49:30Z"
      },
      "message": "wallet: Initialize m_last_block_processed to nullptr. Initialize fields where defined.",
      "tree": {
        "sha": "10e2686a123a57ab397fe90c1e6879b222668132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10e2686a123a57ab397fe90c1e6879b222668132"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f63bc5e06310ea25051e2bf89c231f6096dda169",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63bc5e06310ea25051e2bf89c231f6096dda169",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f63bc5e06310ea25051e2bf89c231f6096dda169",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63bc5e06310ea25051e2bf89c231f6096dda169/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c564424d98b1561f16e633528172b3583719e5f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c564424d98b1561f16e633528172b3583719e5f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c564424d98b1561f16e633528172b3583719e5f3"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 15,
      "deletions": 34
    },
    "files": [
      {
        "sha": "3a025a8de9dbf9a2fec4909598b2d3edde4fdd4d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 34,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63bc5e06310ea25051e2bf89c231f6096dda169/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63bc5e06310ea25051e2bf89c231f6096dda169/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f63bc5e06310ea25051e2bf89c231f6096dda169",
        "patch": "@@ -660,22 +660,22 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n     static std::atomic<bool> fFlushScheduled;\n-    std::atomic<bool> fAbortRescan;\n-    std::atomic<bool> fScanningWallet; //controlled by WalletRescanReserver\n+    std::atomic<bool> fAbortRescan{false};\n+    std::atomic<bool> fScanningWallet{false}; // controlled by WalletRescanReserver\n     std::mutex mutexScanning;\n     friend class WalletRescanReserver;\n \n-    CWalletDB *pwalletdbEncryption;\n+    CWalletDB *pwalletdbEncryption = nullptr;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion;\n+    int nWalletVersion = FEATURE_BASE;\n \n     //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion;\n+    int nWalletMaxVersion = FEATURE_BASE;\n \n-    int64_t nNextResend;\n-    int64_t nLastResend;\n-    bool fBroadcastTransactions;\n+    int64_t nNextResend = 0;\n+    int64_t nLastResend = 0;\n+    bool fBroadcastTransactions = false;\n \n     /**\n      * Used to keep track of spent outpoints, and\n@@ -704,10 +704,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n-    int64_t m_max_keypool_index;\n+    int64_t m_max_keypool_index = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n \n-    int64_t nTimeFirstKey;\n+    int64_t nTimeFirstKey = 0;\n \n     /**\n      * Private version of AddWatchOnly method which does not accept a\n@@ -740,7 +740,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      *\n      * Protected by cs_main (see BlockUntilSyncedToCurrentChain)\n      */\n-    const CBlockIndex* m_last_block_processed;\n+    const CBlockIndex* m_last_block_processed = nullptr;\n \n public:\n     /*\n@@ -779,12 +779,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n-    unsigned int nMasterKeyMaxID;\n+    unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n     CWallet(std::string name, std::unique_ptr<CWalletDBWrapper> dbw) : m_name(std::move(name)), dbw(std::move(dbw))\n     {\n-        SetNull();\n     }\n \n     ~CWallet()\n@@ -793,33 +792,15 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         pwalletdbEncryption = nullptr;\n     }\n \n-    void SetNull()\n-    {\n-        nWalletVersion = FEATURE_BASE;\n-        nWalletMaxVersion = FEATURE_BASE;\n-        nMasterKeyMaxID = 0;\n-        pwalletdbEncryption = nullptr;\n-        nOrderPosNext = 0;\n-        nAccountingEntryNumber = 0;\n-        nNextResend = 0;\n-        nLastResend = 0;\n-        m_max_keypool_index = 0;\n-        nTimeFirstKey = 0;\n-        fBroadcastTransactions = false;\n-        nRelockTime = 0;\n-        fAbortRescan = false;\n-        fScanningWallet = false;\n-    }\n-\n     std::map<uint256, CWalletTx> mapWallet;\n     std::list<CAccountingEntry> laccentries;\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef std::multimap<int64_t, TxPair > TxItems;\n     TxItems wtxOrdered;\n \n-    int64_t nOrderPosNext;\n-    uint64_t nAccountingEntryNumber;\n+    int64_t nOrderPosNext = 0;\n+    uint64_t nAccountingEntryNumber = 0;\n     std::map<uint256, int> mapRequestCount;\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n@@ -912,7 +893,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool LoadWatchOnly(const CScript &dest);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n-    int64_t nRelockTime;\n+    int64_t nRelockTime = 0;\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);"
      }
    ]
  }
]