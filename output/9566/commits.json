[
  {
    "sha": "0512b02750e301324861007e78405ed4aea9fe51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTEyYjAyNzUwZTMwMTMyNDg2MTAwN2U3ODQwNWVkNGFlYTlmZTUx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-16T17:39:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-17T03:56:36Z"
      },
      "message": "time: Use std::chrono for time rather than boost\n\nUnfortunately, there's still no standard way of printing the current time in a\nthreadsafe way. Digging down into boost's approach, they simply use gmtime_r\nwhen possible, as guessed by availability macros.\n\nWe now use the same approach, but use autotools to detect whether gmtime_r or\ngmtime_s can be used, or as a fallback, the racy gmtime.\n\nNote that MilliSleep was not replaced because it is an interruption point. That\ncan be done once boost threads are all gone.",
      "tree": {
        "sha": "f3692ebc1bcbfe5988d7b0f9d778f8cc0b731dc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3692ebc1bcbfe5988d7b0f9d778f8cc0b731dc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0512b02750e301324861007e78405ed4aea9fe51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0512b02750e301324861007e78405ed4aea9fe51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0512b02750e301324861007e78405ed4aea9fe51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0512b02750e301324861007e78405ed4aea9fe51/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4105cb6fd964ad13099ca83b1fdf3d35f3961f74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4105cb6fd964ad13099ca83b1fdf3d35f3961f74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4105cb6fd964ad13099ca83b1fdf3d35f3961f74"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 91,
      "deletions": 17
    },
    "files": [
      {
        "sha": "e1c4b0734376f482908eab7867d13b62e9cdfb7f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0512b02750e301324861007e78405ed4aea9fe51/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0512b02750e301324861007e78405ed4aea9fe51/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=0512b02750e301324861007e78405ed4aea9fe51",
        "patch": "@@ -516,6 +516,59 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n \n+dnl gmtime checks taken from libmicrohttpd\n+AC_CHECK_FUNCS_ONCE([gmtime_r])\n+AC_CHECK_DECL([gmtime_s],\n+  [\n+    AC_MSG_CHECKING([[whether gmtime_s is in C11 form]])\n+    AC_LINK_IFELSE(\n+        [ AC_LANG_PROGRAM(\n+          [[\n+#define __STDC_WANT_LIB_EXT1__ 1\n+#include <time.h>\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+             struct tm* gmtime_s(const time_t* time, struct tm* result);\n+           ]], [[\n+             struct tm res;\n+             time_t t;\n+             gmtime_s (&t, &res);\n+          ]])\n+        ],\n+        [\n+          AC_DEFINE([HAVE_C11_GMTIME_S], [1], [Define to 1 if you have the `gmtime_s' function in C11 form.])\n+          AC_MSG_RESULT([[yes]])\n+        ],\n+        [\n+          AC_MSG_RESULT([[no]])\n+          AC_MSG_CHECKING([[whether gmtime_s is in W32 form]])\n+          AC_LINK_IFELSE(\n+            [ AC_LANG_PROGRAM(\n+              [[\n+#include <time.h>\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+errno_t gmtime_s(struct tm* _tm, const time_t* time);\n+              ]], [[\n+                 struct tm res;\n+                 time_t t;\n+                 gmtime_s (&res, &t);\n+              ]])\n+            ],\n+            [\n+              AC_DEFINE([HAVE_W32_GMTIME_S], [1], [Define to 1 if you have the `gmtime_s' function in W32 form.])\n+              AC_MSG_RESULT([[yes]])\n+            ],\n+            [AC_MSG_RESULT([[no]])\n+            ])\n+        ])\n+  ], [],\n+  [[#define __STDC_WANT_LIB_EXT1__ 1\n+#include <time.h>]]\n+)\n+\n AC_CHECK_DECLS([strnlen])\n \n # Check for daemon(3), unrelated to --with-daemon (although used by it)"
      },
      {
        "sha": "cbff457dd70819dbc663a9e0323de5b7a221cc78",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 17,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0512b02750e301324861007e78405ed4aea9fe51/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0512b02750e301324861007e78405ed4aea9fe51/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=0512b02750e301324861007e78405ed4aea9fe51",
        "patch": "@@ -3,26 +3,53 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#define __STDC_WANT_LIB_EXT1__ 1 // for gmtime_s\n+\n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n #include \"utiltime.h\"\n \n+#include <chrono>\n+#include <thread>\n+#include <locale>\n+#include <sstream>\n+#include <string.h>\n+#include <time.h>\n #include <boost/date_time/posix_time/posix_time.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;\n \n static int64_t nMockTime = 0; //!< For unit testing\n \n+static inline const tm gmtime_int(time_t time)\n+{\n+    tm out = {};\n+#if defined(HAVE_W32_GMTIME_S)\n+    gmtime_s(&out, &time);\n+#elif defined(HAVE_C11_GMTIME_S)\n+    gmtime_s(&time, &out);\n+#elif defined(HAVE_GMTIME_R)\n+    gmtime_r(&time, &out);\n+#else\n+    // Not thread-safe!\n+    out = *gmtime(&time);\n+#endif\n+    return out;\n+}\n+\n+template <typename T>\n+static inline int64_t GetCurrentTime()\n+{\n+    return std::chrono::duration_cast<T>(std::chrono::system_clock::now().time_since_epoch()).count();\n+}\n+\n int64_t GetTime()\n {\n     if (nMockTime) return nMockTime;\n-\n-    time_t now = time(NULL);\n-    assert(now > 0);\n-    return now;\n+    return GetCurrentTime<std::chrono::seconds>();\n }\n \n void SetMockTime(int64_t nMockTimeIn)\n@@ -32,18 +59,12 @@ void SetMockTime(int64_t nMockTimeIn)\n \n int64_t GetTimeMillis()\n {\n-    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n-                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n-    assert(now > 0);\n-    return now;\n+    return GetCurrentTime<std::chrono::milliseconds>();\n }\n \n int64_t GetTimeMicros()\n {\n-    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n-                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n-    assert(now > 0);\n-    return now;\n+    return GetCurrentTime<std::chrono::microseconds>();\n }\n \n /** Return a time useful for the debug log */\n@@ -72,13 +93,13 @@ void MilliSleep(int64_t n)\n #endif\n }\n \n-std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n+std::string DateTimeStrFormat(const char* pszFormat, int64_t nSecs)\n {\n     static std::locale classic(std::locale::classic());\n-    // std::locale takes ownership of the pointer\n-    std::locale loc(classic, new boost::posix_time::time_facet(pszFormat));\n+    time_t nTime = std::chrono::system_clock::to_time_t(std::chrono::system_clock::time_point{std::chrono::seconds{nSecs}});\n+    const tm& now = gmtime_int(nTime);\n     std::stringstream ss;\n-    ss.imbue(loc);\n-    ss << boost::posix_time::from_time_t(nTime);\n+    ss.imbue(classic);\n+    std::use_facet<std::time_put<char>>(ss.getloc()).put(ss.rdbuf(), ss, ' ', &now, pszFormat, pszFormat + strlen(pszFormat));\n     return ss.str();\n }"
      }
    ]
  },
  {
    "sha": "9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmQzMmNlNmFhNTBkZjk1ZmQ1YWVhZWNlOTJiOGI5MDhjNTgyYzcz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-16T20:01:37Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-17T03:56:36Z"
      },
      "message": "time: add runtime sanity check\n\nstd::chrono::system_clock.time_since_epoch and time_t(0) are not guaranteed\nto use the Unix epoch timestamp, but in practice they almost certainly will.\nAny differing behavior will be assumed to be an error, unless certain\nplatforms prove to consistently deviate, at which point we'll cope with it\nby adding offsets.\n\nDo a quick runtime check to verify that\ntime_t(0) == std::chrono::system_clock's epoch time == unix epoch.",
      "tree": {
        "sha": "c17d541aaed2ecc1e437e7b57862f9a2f3cb4cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c17d541aaed2ecc1e437e7b57862f9a2f3cb4cc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0512b02750e301324861007e78405ed4aea9fe51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0512b02750e301324861007e78405ed4aea9fe51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0512b02750e301324861007e78405ed4aea9fe51"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7f9a61adf96ae668841a93fa60b8e3db396cfdc7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
        "patch": "@@ -687,6 +687,10 @@ bool InitSanityCheck(void)\n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n         return false;\n \n+    if (!ChronoSanityCheck()) {\n+        InitError(\"Clock epoch mismatch\");\n+        return false;\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "3ca262a33d77aada0aecca1d0231537202e05006",
        "filename": "src/test/sanity_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"compat/sanity.h\"\n #include \"key.h\"\n+#include \"utiltime.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -15,6 +16,7 @@ BOOST_AUTO_TEST_CASE(basic_sanity)\n   BOOST_CHECK_MESSAGE(glibc_sanity_test() == true, \"libc sanity test\");\n   BOOST_CHECK_MESSAGE(glibcxx_sanity_test() == true, \"stdlib sanity test\");\n   BOOST_CHECK_MESSAGE(ECC_InitSanityCheck() == true, \"openssl ECC test\");\n+  BOOST_CHECK_MESSAGE(ChronoSanityCheck() == true, \"chrono epoch test\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2cb549be17b019716e7ceb559f812148064528f4",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
        "patch": "@@ -40,6 +40,38 @@ static inline const tm gmtime_int(time_t time)\n     return out;\n }\n \n+bool ChronoSanityCheck()\n+{\n+    // std::chrono::system_clock.time_since_epoch and time_t(0) are not guaranteed\n+    // to use the Unix epoch timestamp, but in practice they almost certainly will.\n+    // Any differing behavior will be assumed to be an error, unless certain\n+    // platforms prove to consistently deviate, at which point we'll cope with it\n+    // by adding offsets.\n+\n+    // Create a new clock from time_t(0) and make sure that it represents 0\n+    // seconds from the system_clock's time_since_epoch. Then convert that back\n+    // to a time_t and verify that it's the same as before.\n+    const time_t zeroTime{};\n+    auto clock = std::chrono::system_clock::from_time_t(zeroTime);\n+    if (std::chrono::duration_cast<std::chrono::seconds>(clock.time_since_epoch()).count() != 0)\n+        return false;\n+\n+    time_t nTime = std::chrono::system_clock::to_time_t(clock);\n+    if (nTime != zeroTime)\n+        return false;\n+\n+    // Check that the above zero time is actually equal to the known unix timestamp.\n+    tm epoch = gmtime_int(nTime);\n+    if ((epoch.tm_sec != 0)  || \\\n+       (epoch.tm_min  != 0)  || \\\n+       (epoch.tm_hour != 0)  || \\\n+       (epoch.tm_mday != 1)  || \\\n+       (epoch.tm_mon  != 0)  || \\\n+       (epoch.tm_year != 70))\n+        return false; \n+    return true;\n+}\n+\n template <typename T>\n static inline int64_t GetCurrentTime()\n {"
      },
      {
        "sha": "36f538af44398bc75ad3498fc1fa4c1a17696e09",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd32ce6aa50df95fd5aeaece92b8b908c582c73/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=9bd32ce6aa50df95fd5aeaece92b8b908c582c73",
        "patch": "@@ -9,6 +9,7 @@\n #include <stdint.h>\n #include <string>\n \n+bool ChronoSanityCheck();\n int64_t GetTime();\n int64_t GetTimeMillis();\n int64_t GetTimeMicros();"
      }
    ]
  }
]