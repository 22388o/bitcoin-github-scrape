[
  {
    "sha": "256bea33ab21c35f178ee77d96074bd0e2aae9ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTZiZWEzM2FiMjFjMzVmMTc4ZWU3N2Q5NjA3NGJkMGUyYWFlOWFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T18:50:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T21:28:18Z"
      },
      "message": "leveldb: Win32WritableFile without memory mapping\n\nUse a simple Win32WritableFile, equivalent to PosixWritableFile in\nposix_env.cc",
      "tree": {
        "sha": "8411e8b2d8a3c3d7c9076c1e113cf89b30555c5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8411e8b2d8a3c3d7c9076c1e113cf89b30555c5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/256bea33ab21c35f178ee77d96074bd0e2aae9ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/256bea33ab21c35f178ee77d96074bd0e2aae9ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/256bea33ab21c35f178ee77d96074bd0e2aae9ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/256bea33ab21c35f178ee77d96074bd0e2aae9ad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/725539ea03769416d3502feeb4dfcbec3fbb7ae0"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 40,
      "deletions": 196
    },
    "files": [
      {
        "sha": "3d488a4ddde4f536f693f6707fe08fd4e5cfdce5",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 40,
        "deletions": 196,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/256bea33ab21c35f178ee77d96074bd0e2aae9ad/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/256bea33ab21c35f178ee77d96074bd0e2aae9ad/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=256bea33ab21c35f178ee77d96074bd0e2aae9ad",
        "patch": "@@ -103,39 +103,20 @@ class Win32RandomAccessFile : public RandomAccessFile\n     DISALLOW_COPY_AND_ASSIGN(Win32RandomAccessFile);\n };\n \n-class Win32MapFile : public WritableFile\n+class Win32WritableFile : public WritableFile\n {\n public:\n-    Win32MapFile(const std::string& fname);\n+    Win32WritableFile(const std::string& fname);\n+    ~Win32WritableFile();\n \n-    ~Win32MapFile();\n     virtual Status Append(const Slice& data);\n     virtual Status Close();\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n private:\n-    std::string _filename;\n-    HANDLE _hFile;\n-    size_t _page_size;\n-    size_t _map_size;       // How much extra memory to map at a time\n-    char* _base;            // The mapped region\n-    HANDLE _base_handle;\t\n-    char* _limit;           // Limit of the mapped region\n-    char* _dst;             // Where to write next  (in range [base_,limit_])\n-    char* _last_sync;       // Where have we synced up to\n-    uint64_t _file_offset;  // Offset of base_ in file\n-    //LARGE_INTEGER file_offset_;\n-    // Have we done an munmap of unsynced data?\n-    bool _pending_sync;\n-\n-    // Roundup x to a multiple of y\n-    static size_t _Roundup(size_t x, size_t y);\n-    size_t _TruncateToPageBoundary(size_t s);\n-    bool _UnmapCurrentRegion();\n-    bool _MapNewRegion();\n-    DISALLOW_COPY_AND_ASSIGN(Win32MapFile);\n-    BOOL _Init(LPCWSTR Path);\n+    std::string filename_;\n+    ::HANDLE _hFile;\n };\n \n class Win32FileLock : public FileLock\n@@ -442,202 +423,65 @@ void Win32RandomAccessFile::_CleanUp()\n     }\n }\n \n-size_t Win32MapFile::_Roundup( size_t x, size_t y )\n+Win32WritableFile::Win32WritableFile(const std::string& fname)\n+    : filename_(fname)\n {\n-    return ((x + y - 1) / y) * y;\n+    std::wstring path;\n+    ToWidePath(fname, path);\n+    DWORD Flag = PathFileExistsW(path.c_str()) ? OPEN_EXISTING : CREATE_ALWAYS;\n+    _hFile = CreateFileW(path.c_str(),\n+                         GENERIC_READ | GENERIC_WRITE,\n+                         FILE_SHARE_READ|FILE_SHARE_DELETE|FILE_SHARE_WRITE,\n+                         NULL,\n+                         Flag,\n+                         FILE_ATTRIBUTE_NORMAL,\n+                         NULL);\n+    // CreateFileW returns INVALID_HANDLE_VALUE in case of error, always check isEnable() before use\n }\n \n-size_t Win32MapFile::_TruncateToPageBoundary( size_t s )\n+Win32WritableFile::~Win32WritableFile()\n {\n-    s -= (s & (_page_size - 1));\n-    assert((s % _page_size) == 0);\n-    return s;\n+    if (_hFile != INVALID_HANDLE_VALUE)\n+        Close();\n }\n \n-bool Win32MapFile::_UnmapCurrentRegion()\n+Status Win32WritableFile::Append(const Slice& data)\n {\n-    bool result = true;\n-    if (_base != NULL) {\n-        if (_last_sync < _limit) {\n-            // Defer syncing this data until next Sync() call, if any\n-            _pending_sync = true;\n-        }\n-        if (!UnmapViewOfFile(_base) || !CloseHandle(_base_handle))\n-            result = false;\n-        _file_offset += _limit - _base;\n-        _base = NULL;\n-        _base_handle = NULL;\n-        _limit = NULL;\n-        _last_sync = NULL;\n-        _dst = NULL;\n-        // Increase the amount we map the next time, but capped at 1MB\n-        if (_map_size < (1<<20)) {\n-            _map_size *= 2;\n-        }\n+    DWORD r = 0;\n+    if (!WriteFile(_hFile, data.data(), data.size(), &r, NULL) || r != data.size()) {\n+        return Status::IOError(\"Win32WritableFile.Append::WriteFile: \", Win32::GetLastErrSz());\n     }\n-    return result;\n-}\n-\n-bool Win32MapFile::_MapNewRegion()\n-{\n-    assert(_base == NULL);\n-    //LONG newSizeHigh = (LONG)((file_offset_ + map_size_) >> 32);\n-    //LONG newSizeLow = (LONG)((file_offset_ + map_size_) & 0xFFFFFFFF);\n-    DWORD off_hi = (DWORD)(_file_offset >> 32);\n-    DWORD off_lo = (DWORD)(_file_offset & 0xFFFFFFFF);\n-    LARGE_INTEGER newSize;\n-    newSize.QuadPart = _file_offset + _map_size;\n-    SetFilePointerEx(_hFile, newSize, NULL, FILE_BEGIN);\n-    SetEndOfFile(_hFile);\n-\n-    _base_handle = CreateFileMappingA(\n-        _hFile,\n-        NULL,\n-        PAGE_READWRITE,\n-        0,\n-        0,\n-        0);\n-    if (_base_handle != NULL) {\n-        _base = (char*) MapViewOfFile(_base_handle,\n-            FILE_MAP_ALL_ACCESS,\n-            off_hi,\n-            off_lo,\n-            _map_size);\n-        if (_base != NULL) {\n-            _limit = _base + _map_size;\n-            _dst = _base;\n-            _last_sync = _base;\n-            return true;\n-        }\n-    }\n-    return false;\n+    return Status::OK();\n }\n \n-Win32MapFile::Win32MapFile( const std::string& fname) :\n-    _filename(fname),\n-    _hFile(NULL),\n-    _page_size(Win32::g_PageSize),\n-    _map_size(_Roundup(65536, Win32::g_PageSize)),\n-    _base(NULL),\n-    _base_handle(NULL),\n-    _limit(NULL),\n-    _dst(NULL),\n-    _last_sync(NULL),\n-    _file_offset(0),\n-    _pending_sync(false)\n+Status Win32WritableFile::Close()\n {\n-\tstd::wstring path;\n-\tToWidePath(fname, path);\n-    _Init(path.c_str());\n-    assert((Win32::g_PageSize & (Win32::g_PageSize - 1)) == 0);\n-}\n-\n-Status Win32MapFile::Append( const Slice& data )\n-{\n-    const char* src = data.data();\n-    size_t left = data.size();\n-    Status s;\n-    while (left > 0) {\n-        assert(_base <= _dst);\n-        assert(_dst <= _limit);\n-        size_t avail = _limit - _dst;\n-        if (avail == 0) {\n-            if (!_UnmapCurrentRegion() ||\n-                !_MapNewRegion()) {\n-                    return Status::IOError(\"WinMmapFile.Append::UnmapCurrentRegion or MapNewRegion: \", Win32::GetLastErrSz());\n-            }\n-        }\n-        size_t n = (left <= avail) ? left : avail;\n-        memcpy(_dst, src, n);\n-        _dst += n;\n-        src += n;\n-        left -= n;\n-    }\n-    return s;\n-}\n-\n-Status Win32MapFile::Close()\n-{\n-    Status s;\n-    size_t unused = _limit - _dst;\n-    if (!_UnmapCurrentRegion()) {\n-        s = Status::IOError(\"WinMmapFile.Close::UnmapCurrentRegion: \",Win32::GetLastErrSz());\n-    } else if (unused > 0) {\n-        // Trim the extra space at the end of the file\n-        LARGE_INTEGER newSize;\n-        newSize.QuadPart = _file_offset - unused;\n-        if (!SetFilePointerEx(_hFile, newSize, NULL, FILE_BEGIN)) {\n-            s = Status::IOError(\"WinMmapFile.Close::SetFilePointer: \",Win32::GetLastErrSz());\n-        } else \n-            SetEndOfFile(_hFile);\n-    }\n     if (!CloseHandle(_hFile)) {\n-        if (s.ok()) {\n-            s = Status::IOError(\"WinMmapFile.Close::CloseHandle: \", Win32::GetLastErrSz());\n-        }\n+        return Status::IOError(\"Win32WritableFile.Close::CloseHandle: \", Win32::GetLastErrSz());\n     }\n     _hFile = INVALID_HANDLE_VALUE;\n-    _base = NULL;\n-    _base_handle = NULL;\n-    _limit = NULL;\n-\n-    return s;\n+    return Status::OK();\n }\n \n-Status Win32MapFile::Sync()\n+Status Win32WritableFile::Flush()\n {\n-    Status s;\n-    if (_pending_sync) {\n-        // Some unmapped data was not synced\n-        _pending_sync = false;\n-        if (!FlushFileBuffers(_hFile)) {\n-            s = Status::IOError(\"WinMmapFile.Sync::FlushFileBuffers: \",Win32::GetLastErrSz());\n-        }\n-    }\n-    if (_dst > _last_sync) {\n-        // Find the beginnings of the pages that contain the first and last\n-        // bytes to be synced.\n-        size_t p1 = _TruncateToPageBoundary(_last_sync - _base);\n-        size_t p2 = _TruncateToPageBoundary(_dst - _base - 1);\n-        _last_sync = _dst;\n-        if (!FlushViewOfFile(_base + p1, p2 - p1 + _page_size)) {\n-            s = Status::IOError(\"WinMmapFile.Sync::FlushViewOfFile: \",Win32::GetLastErrSz());\n-        }\n+    if (!FlushFileBuffers(_hFile)) {\n+        return Status::IOError(\"Win32WritableFile.Flush::FlushFileBuffers \", Win32::GetLastErrSz());\n     }\n-    return s;\n-}\n-\n-Status Win32MapFile::Flush()\n-{\n     return Status::OK();\n }\n \n-Win32MapFile::~Win32MapFile()\n+Status Win32WritableFile::Sync()\n {\n-    if (_hFile != INVALID_HANDLE_VALUE) { \n-        Win32MapFile::Close();\n+    if (!FlushFileBuffers(_hFile)) {\n+        return Status::IOError(\"Win32WritableFile.Sync::FlushFileBuffers \", Win32::GetLastErrSz());\n     }\n+    return Status::OK();\n }\n \n-BOOL Win32MapFile::_Init( LPCWSTR Path )\n-{\n-    DWORD Flag = PathFileExistsW(Path) ? OPEN_EXISTING : CREATE_ALWAYS;\n-    _hFile = CreateFileW(Path,\n-                         GENERIC_READ | GENERIC_WRITE,\n-                         FILE_SHARE_READ|FILE_SHARE_DELETE|FILE_SHARE_WRITE,\n-                         NULL,\n-                         Flag,\n-                         FILE_ATTRIBUTE_NORMAL,\n-                         NULL);\n-    if(!_hFile || _hFile == INVALID_HANDLE_VALUE)\n-        return FALSE;\n-    else\n-        return TRUE;\n-}\n-\n-BOOL Win32MapFile::isEnable()\n+BOOL Win32WritableFile::isEnable()\n {\n-    return _hFile ? TRUE : FALSE;\n+    return _hFile != INVALID_HANDLE_VALUE;\n }\n \n Win32FileLock::Win32FileLock( const std::string& fname ) :\n@@ -981,7 +825,7 @@ Status Win32Env::NewLogger( const std::string& fname, Logger** result )\n {\n     Status sRet;\n     std::string path = fname;\n-    Win32MapFile* pMapFile = new Win32MapFile(ModifyPath(path));\n+    Win32WritableFile* pMapFile = new Win32WritableFile(ModifyPath(path));\n     if(!pMapFile->isEnable()){\n         delete pMapFile;\n         *result = NULL;\n@@ -995,7 +839,7 @@ Status Win32Env::NewWritableFile( const std::string& fname, WritableFile** resul\n {\n     Status sRet;\n     std::string path = fname;\n-    Win32MapFile* pFile = new Win32MapFile(ModifyPath(path));\n+    Win32WritableFile* pFile = new Win32WritableFile(ModifyPath(path));\n     if(!pFile->isEnable()){\n         *result = NULL;\n         sRet = Status::IOError(fname,Win32::GetLastErrSz());"
      }
    ]
  },
  {
    "sha": "2fc32341cc6cbede2238151888ddc91ca93c7740",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmMzMjM0MWNjNmNiZWRlMjIzODE1MTg4OGRkYzkxY2E5M2M3NzQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T08:59:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T09:01:53Z"
      },
      "message": "leveldb: Don't do anything in Flush()\n\nFlush() is supposed to clear application-side buffers (like fflush). As\nthis writable file implementation uses the OS function directly, there\nare no buffers to flush.",
      "tree": {
        "sha": "d155354bb82ea61e5b1d87da0c377fa08f4bff72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d155354bb82ea61e5b1d87da0c377fa08f4bff72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fc32341cc6cbede2238151888ddc91ca93c7740",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc32341cc6cbede2238151888ddc91ca93c7740",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc32341cc6cbede2238151888ddc91ca93c7740",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc32341cc6cbede2238151888ddc91ca93c7740/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "256bea33ab21c35f178ee77d96074bd0e2aae9ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/256bea33ab21c35f178ee77d96074bd0e2aae9ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/256bea33ab21c35f178ee77d96074bd0e2aae9ad"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "95f178cf01c41b1d9581b49bd47e4dc9b410ced3",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc32341cc6cbede2238151888ddc91ca93c7740/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc32341cc6cbede2238151888ddc91ca93c7740/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=2fc32341cc6cbede2238151888ddc91ca93c7740",
        "patch": "@@ -465,9 +465,7 @@ Status Win32WritableFile::Close()\n \n Status Win32WritableFile::Flush()\n {\n-    if (!FlushFileBuffers(_hFile)) {\n-        return Status::IOError(\"Win32WritableFile.Flush::FlushFileBuffers \", Win32::GetLastErrSz());\n-    }\n+    // Nothing to do here, there are no application-side buffers\n     return Status::OK();\n }\n "
      }
    ]
  },
  {
    "sha": "d3ad5687777f125286b394c5e921fbc4c6bbcd87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2FkNTY4Nzc3N2YxMjUyODZiMzk0YzVlOTIxZmJjNGM2YmJjZDg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T15:45:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T15:45:59Z"
      },
      "message": "leveldb: report filename in errors in Win32WritableFile",
      "tree": {
        "sha": "025d52c5c2220627fa9e25f8e1ea61162668d37c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/025d52c5c2220627fa9e25f8e1ea61162668d37c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3ad5687777f125286b394c5e921fbc4c6bbcd87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3ad5687777f125286b394c5e921fbc4c6bbcd87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3ad5687777f125286b394c5e921fbc4c6bbcd87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3ad5687777f125286b394c5e921fbc4c6bbcd87/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc32341cc6cbede2238151888ddc91ca93c7740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc32341cc6cbede2238151888ddc91ca93c7740",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc32341cc6cbede2238151888ddc91ca93c7740"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e11a96b791871506cfe004f32520f6d76314dccf",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3ad5687777f125286b394c5e921fbc4c6bbcd87/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3ad5687777f125286b394c5e921fbc4c6bbcd87/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=d3ad5687777f125286b394c5e921fbc4c6bbcd87",
        "patch": "@@ -449,15 +449,15 @@ Status Win32WritableFile::Append(const Slice& data)\n {\n     DWORD r = 0;\n     if (!WriteFile(_hFile, data.data(), data.size(), &r, NULL) || r != data.size()) {\n-        return Status::IOError(\"Win32WritableFile.Append::WriteFile: \", Win32::GetLastErrSz());\n+        return Status::IOError(\"Win32WritableFile.Append::WriteFile: \"+filename_, Win32::GetLastErrSz());\n     }\n     return Status::OK();\n }\n \n Status Win32WritableFile::Close()\n {\n     if (!CloseHandle(_hFile)) {\n-        return Status::IOError(\"Win32WritableFile.Close::CloseHandle: \", Win32::GetLastErrSz());\n+        return Status::IOError(\"Win32WritableFile.Close::CloseHandle: \"+filename_, Win32::GetLastErrSz());\n     }\n     _hFile = INVALID_HANDLE_VALUE;\n     return Status::OK();\n@@ -472,7 +472,7 @@ Status Win32WritableFile::Flush()\n Status Win32WritableFile::Sync()\n {\n     if (!FlushFileBuffers(_hFile)) {\n-        return Status::IOError(\"Win32WritableFile.Sync::FlushFileBuffers \", Win32::GetLastErrSz());\n+        return Status::IOError(\"Win32WritableFile.Sync::FlushFileBuffers \"+filename_, Win32::GetLastErrSz());\n     }\n     return Status::OK();\n }"
      }
    ]
  }
]