[
  {
    "sha": "2862b562cc17f9d4507dab3b9281bf066b093e16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODYyYjU2MmNjMTdmOWQ0NTA3ZGFiM2I5MjgxYmYwNjZiMDkzZTE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-12T17:45:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-12T17:45:53Z"
      },
      "message": "[tests] remove redundant univalue_tests.cpp",
      "tree": {
        "sha": "16a04698ac9410a33528b72395d79c0f586fb570",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16a04698ac9410a33528b72395d79c0f586fb570"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2862b562cc17f9d4507dab3b9281bf066b093e16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862b562cc17f9d4507dab3b9281bf066b093e16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2862b562cc17f9d4507dab3b9281bf066b093e16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862b562cc17f9d4507dab3b9281bf066b093e16/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d132e8b974652d96466a1b73ec1231614719fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d132e8b974652d96466a1b73ec1231614719fe2"
      }
    ],
    "stats": {
      "total": 334,
      "additions": 0,
      "deletions": 334
    },
    "files": [
      {
        "sha": "49a814c3f67203acbdf9b4379dca8d879e493448",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2862b562cc17f9d4507dab3b9281bf066b093e16/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2862b562cc17f9d4507dab3b9281bf066b093e16/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2862b562cc17f9d4507dab3b9281bf066b093e16",
        "patch": "@@ -84,7 +84,6 @@ BITCOIN_TESTS =\\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n-  test/univalue_tests.cpp \\\n   test/util_tests.cpp\n \n if ENABLE_WALLET"
      },
      {
        "sha": "738620443765ff7254e86e786146920ebc6d0298",
        "filename": "src/test/univalue_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 333,
        "changes": 333,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d132e8b974652d96466a1b73ec1231614719fe2/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d132e8b974652d96466a1b73ec1231614719fe2/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=5d132e8b974652d96466a1b73ec1231614719fe2",
        "patch": "@@ -1,333 +0,0 @@\n-// Copyright (c) 2014 BitPay Inc.\n-// Copyright (c) 2014-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <stdint.h>\n-#include <vector>\n-#include <string>\n-#include <map>\n-#include <univalue.h>\n-#include <test/test_bitcoin.h>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(univalue_constructor)\n-{\n-    UniValue v1;\n-    BOOST_CHECK(v1.isNull());\n-\n-    UniValue v2(UniValue::VSTR);\n-    BOOST_CHECK(v2.isStr());\n-\n-    UniValue v3(UniValue::VSTR, \"foo\");\n-    BOOST_CHECK(v3.isStr());\n-    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n-\n-    UniValue numTest;\n-    BOOST_CHECK(numTest.setNumStr(\"82\"));\n-    BOOST_CHECK(numTest.isNum());\n-    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n-\n-    uint64_t vu64 = 82;\n-    UniValue v4(vu64);\n-    BOOST_CHECK(v4.isNum());\n-    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n-\n-    int64_t vi64 = -82;\n-    UniValue v5(vi64);\n-    BOOST_CHECK(v5.isNum());\n-    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n-\n-    int vi = -688;\n-    UniValue v6(vi);\n-    BOOST_CHECK(v6.isNum());\n-    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n-\n-    double vd = -7.21;\n-    UniValue v7(vd);\n-    BOOST_CHECK(v7.isNum());\n-    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n-\n-    std::string vs(\"yawn\");\n-    UniValue v8(vs);\n-    BOOST_CHECK(v8.isStr());\n-    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n-\n-    const char *vcs = \"zappa\";\n-    UniValue v9(vcs);\n-    BOOST_CHECK(v9.isStr());\n-    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n-}\n-\n-BOOST_AUTO_TEST_CASE(univalue_typecheck)\n-{\n-    UniValue v1;\n-    BOOST_CHECK(v1.setNumStr(\"1\"));\n-    BOOST_CHECK(v1.isNum());\n-    BOOST_CHECK_THROW(v1.get_bool(), std::runtime_error);\n-\n-    UniValue v2;\n-    BOOST_CHECK(v2.setBool(true));\n-    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n-    BOOST_CHECK_THROW(v2.get_int(), std::runtime_error);\n-\n-    UniValue v3;\n-    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n-    BOOST_CHECK_THROW(v3.get_int64(), std::runtime_error);\n-    BOOST_CHECK(v3.setNumStr(\"1000\"));\n-    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n-\n-    UniValue v4;\n-    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n-    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n-    BOOST_CHECK_THROW(v4.get_int(), std::runtime_error);\n-    BOOST_CHECK(v4.setNumStr(\"1000\"));\n-    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n-    BOOST_CHECK_THROW(v4.get_str(), std::runtime_error);\n-    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n-    BOOST_CHECK_THROW(v4.get_array(), std::runtime_error);\n-    BOOST_CHECK_THROW(v4.getKeys(), std::runtime_error);\n-    BOOST_CHECK_THROW(v4.getValues(), std::runtime_error);\n-    BOOST_CHECK_THROW(v4.get_obj(), std::runtime_error);\n-\n-    UniValue v5;\n-    BOOST_CHECK(v5.read(\"[true, 10]\"));\n-    BOOST_CHECK_NO_THROW(v5.get_array());\n-    std::vector<UniValue> vals = v5.getValues();\n-    BOOST_CHECK_THROW(vals[0].get_int(), std::runtime_error);\n-    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n-\n-    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n-    BOOST_CHECK_THROW(vals[1].get_bool(), std::runtime_error);\n-}\n-\n-BOOST_AUTO_TEST_CASE(univalue_set)\n-{\n-    UniValue v(UniValue::VSTR, \"foo\");\n-    v.clear();\n-    BOOST_CHECK(v.isNull());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n-\n-    BOOST_CHECK(v.setObject());\n-    BOOST_CHECK(v.isObject());\n-    BOOST_CHECK_EQUAL(v.size(), 0);\n-    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n-    BOOST_CHECK(v.empty());\n-\n-    BOOST_CHECK(v.setArray());\n-    BOOST_CHECK(v.isArray());\n-    BOOST_CHECK_EQUAL(v.size(), 0);\n-\n-    BOOST_CHECK(v.setStr(\"zum\"));\n-    BOOST_CHECK(v.isStr());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n-\n-    BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK(v.isNum());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n-\n-    BOOST_CHECK(v.setInt((int)1023));\n-    BOOST_CHECK(v.isNum());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n-\n-    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n-    BOOST_CHECK(v.isNum());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n-\n-    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n-    BOOST_CHECK(v.isNum());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n-\n-    BOOST_CHECK(v.setNumStr(\"-688\"));\n-    BOOST_CHECK(v.isNum());\n-    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n-\n-    BOOST_CHECK(v.setBool(false));\n-    BOOST_CHECK_EQUAL(v.isBool(), true);\n-    BOOST_CHECK_EQUAL(v.isTrue(), false);\n-    BOOST_CHECK_EQUAL(v.isFalse(), true);\n-    BOOST_CHECK_EQUAL(v.getBool(), false);\n-\n-    BOOST_CHECK(v.setBool(true));\n-    BOOST_CHECK_EQUAL(v.isBool(), true);\n-    BOOST_CHECK_EQUAL(v.isTrue(), true);\n-    BOOST_CHECK_EQUAL(v.isFalse(), false);\n-    BOOST_CHECK_EQUAL(v.getBool(), true);\n-\n-    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n-\n-    BOOST_CHECK(v.setNull());\n-    BOOST_CHECK(v.isNull());\n-}\n-\n-BOOST_AUTO_TEST_CASE(univalue_array)\n-{\n-    UniValue arr(UniValue::VARR);\n-\n-    UniValue v((int64_t)1023LL);\n-    BOOST_CHECK(arr.push_back(v));\n-\n-    std::string vStr(\"zippy\");\n-    BOOST_CHECK(arr.push_back(vStr));\n-\n-    const char *s = \"pippy\";\n-    BOOST_CHECK(arr.push_back(s));\n-\n-    std::vector<UniValue> vec;\n-    v.setStr(\"boing\");\n-    vec.push_back(v);\n-\n-    v.setStr(\"going\");\n-    vec.push_back(v);\n-\n-    BOOST_CHECK(arr.push_backV(vec));\n-\n-    BOOST_CHECK_EQUAL(arr.empty(), false);\n-    BOOST_CHECK_EQUAL(arr.size(), 5);\n-\n-    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n-    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n-    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n-    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n-    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n-\n-    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n-\n-    arr.clear();\n-    BOOST_CHECK(arr.empty());\n-    BOOST_CHECK_EQUAL(arr.size(), 0);\n-}\n-\n-BOOST_AUTO_TEST_CASE(univalue_object)\n-{\n-    UniValue obj(UniValue::VOBJ);\n-    std::string strKey, strVal;\n-    UniValue v;\n-\n-    strKey = \"age\";\n-    v.setInt(100);\n-    BOOST_CHECK(obj.pushKV(strKey, v));\n-\n-    strKey = \"first\";\n-    strVal = \"John\";\n-    BOOST_CHECK(obj.pushKV(strKey, strVal));\n-\n-    strKey = \"last\";\n-    const char *cVal = \"Smith\";\n-    BOOST_CHECK(obj.pushKV(strKey, cVal));\n-\n-    strKey = \"distance\";\n-    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n-\n-    strKey = \"time\";\n-    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n-\n-    strKey = \"calories\";\n-    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n-\n-    strKey = \"temperature\";\n-    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n-\n-    UniValue obj2(UniValue::VOBJ);\n-    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n-    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n-\n-    BOOST_CHECK(obj.pushKVs(obj2));\n-\n-    BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n-\n-    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n-    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n-    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n-    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n-    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n-    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n-    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n-    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n-    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n-\n-    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n-\n-    BOOST_CHECK(obj.exists(\"age\"));\n-    BOOST_CHECK(obj.exists(\"first\"));\n-    BOOST_CHECK(obj.exists(\"last\"));\n-    BOOST_CHECK(obj.exists(\"distance\"));\n-    BOOST_CHECK(obj.exists(\"time\"));\n-    BOOST_CHECK(obj.exists(\"calories\"));\n-    BOOST_CHECK(obj.exists(\"temperature\"));\n-    BOOST_CHECK(obj.exists(\"cat1\"));\n-    BOOST_CHECK(obj.exists(\"cat2\"));\n-\n-    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n-\n-    std::map<std::string, UniValue::VType> objTypes;\n-    objTypes[\"age\"] = UniValue::VNUM;\n-    objTypes[\"first\"] = UniValue::VSTR;\n-    objTypes[\"last\"] = UniValue::VSTR;\n-    objTypes[\"distance\"] = UniValue::VNUM;\n-    objTypes[\"time\"] = UniValue::VNUM;\n-    objTypes[\"calories\"] = UniValue::VNUM;\n-    objTypes[\"temperature\"] = UniValue::VNUM;\n-    objTypes[\"cat1\"] = UniValue::VNUM;\n-    objTypes[\"cat2\"] = UniValue::VNUM;\n-    BOOST_CHECK(obj.checkObject(objTypes));\n-\n-    objTypes[\"cat2\"] = UniValue::VSTR;\n-    BOOST_CHECK(!obj.checkObject(objTypes));\n-\n-    obj.clear();\n-    BOOST_CHECK(obj.empty());\n-    BOOST_CHECK_EQUAL(obj.size(), 0);\n-}\n-\n-static const char *json1 =\n-\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n-\n-BOOST_AUTO_TEST_CASE(univalue_readwrite)\n-{\n-    UniValue v;\n-    BOOST_CHECK(v.read(json1));\n-\n-    std::string strJson1(json1);\n-    BOOST_CHECK(v.read(strJson1));\n-\n-    BOOST_CHECK(v.isArray());\n-    BOOST_CHECK_EQUAL(v.size(), 2);\n-\n-    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n-\n-    UniValue obj = v[1];\n-    BOOST_CHECK(obj.isObject());\n-    BOOST_CHECK_EQUAL(obj.size(), 3);\n-\n-    BOOST_CHECK(obj[\"key1\"].isStr());\n-    std::string correctValue(\"str\");\n-    correctValue.push_back('\\0');\n-    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), correctValue);\n-    BOOST_CHECK(obj[\"key2\"].isNum());\n-    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n-    BOOST_CHECK(obj[\"key3\"].isObject());\n-\n-    BOOST_CHECK_EQUAL(strJson1, v.write());\n-\n-    /* Check for (correctly reporting) a parsing error if the initial\n-       JSON construct is followed by more stuff.  Note that whitespace\n-       is, of course, exempt.  */\n-\n-    BOOST_CHECK(v.read(\"  {}\\n  \"));\n-    BOOST_CHECK(v.isObject());\n-    BOOST_CHECK(v.read(\"  []\\n  \"));\n-    BOOST_CHECK(v.isArray());\n-\n-    BOOST_CHECK(!v.read(\"@{}\"));\n-    BOOST_CHECK(!v.read(\"{} garbage\"));\n-    BOOST_CHECK(!v.read(\"[]{}\"));\n-    BOOST_CHECK(!v.read(\"{}[]\"));\n-    BOOST_CHECK(!v.read(\"{} 42\"));\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]