[
  {
    "sha": "dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmU2Njc3ZTNkM2E4YjU0ZDgwMTdjMGViMDZkN2UwOWVmYzYyMDUw",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-03T18:25:35Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-08-17T14:31:53Z"
      },
      "message": "coins: add Sync() method to allow flush without cacheCoins drop\n\nIn certain circumstances, we may want to flush to disk without\nemptying `cacheCoins`, which affects performance. UTXO snapshot\nactivation is one such case.\n\nThis method is currently unused and this commit does not\nchange any behavior.\n\nIncorporates feedback from John Newbery.\n\nCo-authored-by: Suhas Daftuar <sdaftuar@gmail.com>",
      "tree": {
        "sha": "32eecc281c845c57930c1c0b9ef8fa10348edfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32eecc281c845c57930c1c0b9ef8fa10348edfdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmEbyFkACgkQepNdrbLE\nTwUNtg/+MEEzrrkmAZgJDXqqQs4sNPPmOTvW2oM1HZi+k55o92dkEj8/Tykh/ARH\nY7DZLtEvkM9KGjXNhI3FszgYeA4et90ooSSvojrmmgP7uc2+YUv93pOeNTvXAr5L\nguJFsQ9sY+GkobZbvMg+qn3ICY2XrrGx/fooX6ecd3LdUF2bETDawsvMmndOZ0pg\nSuMJjBgF3IUZceSm6/koVt+v5tvRpQd/5ruzhCNMDZ0ZtJWXq9gFW+WzdpqzaJTc\nwptmZhIcXSFtZ4HXOU3lyTZdyM95e4KFuAnI3rpUuWf72WxLOAceA7DHDnZ/HS9j\nLheWoDc0MKA5/GcEyAKvbabDfxOAbfZxkyDFLyYMmaj3IyAC11C6WKGPfdHfHEuH\n3MPO+/vHTnSpOMmwUKVG0Mj+r/iWJ6Rl19vFcB+BViavCwg2acDUo8W2ugdB3dP2\n6REiWV2IIPWgVJ9X4qOKEDmfdrzPcs4n4Ml4xJVAERSj7pDLwmU11N2Kp/dwy7jD\nO1ssTEimRi2ZuZNPDwOQrI2MrbvWdzKWS+eyzCFwBIvgpTGTz8JDCdxMY4sRh4qD\nPS5YDTQ1qRBgwvV/Fjv5kVlvYrrsRMfdQiHHZKdmIGdco1cJ+3xNcVlJaazOPSUk\nHVQP3A/604eTOTis29Z9Ksadyb2wrpbRLf05pAs8OwmxzyjZTPI=\n=siVc\n-----END PGP SIGNATURE-----",
        "payload": "tree 32eecc281c845c57930c1c0b9ef8fa10348edfdd\nparent fdd80b0a53b4af0b29cb6e03118e2456d053a757\nauthor James O'Beirne <james.obeirne@gmail.com> 1575397535 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1629210713 -0400\n\ncoins: add Sync() method to allow flush without cacheCoins drop\n\nIn certain circumstances, we may want to flush to disk without\nemptying `cacheCoins`, which affects performance. UTXO snapshot\nactivation is one such case.\n\nThis method is currently unused and this commit does not\nchange any behavior.\n\nIncorporates feedback from John Newbery.\n\nCo-authored-by: Suhas Daftuar <sdaftuar@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdd80b0a53b4af0b29cb6e03118e2456d053a757"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 57,
      "deletions": 17
    },
    "files": [
      {
        "sha": "5bd5c24378a0611455957577de4388a04314620e",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 7,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "patch": "@@ -12,7 +12,7 @@\n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n-bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n+bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase) { return false; }\n std::unique_ptr<CCoinsViewCursor> CCoinsView::Cursor() const { return nullptr; }\n \n bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n@@ -27,7 +27,7 @@ bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n-bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n+bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase) { return base->BatchWrite(mapCoins, hashBlock, erase); }\n std::unique_ptr<CCoinsViewCursor> CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n@@ -163,8 +163,8 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n }\n \n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = mapCoins.erase(it)) {\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn, bool erase) {\n+    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = erase ? mapCoins.erase(it) : ++it) {\n         // Ignore non-dirty entries (optimization).\n         if (!(it->second.flags & CCoinsCacheEntry::DIRTY)) {\n             continue;\n@@ -177,7 +177,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Create the coin in the parent cache, move the data up\n                 // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    entry.coin = std::move(it->second.coin);\n+                } else {\n+                    entry.coin = it->second.coin;\n+                }\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n                 // We can mark it FRESH in the parent if it was FRESH in the child\n@@ -205,7 +212,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n             } else {\n                 // A normal modification.\n                 cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                itUs->second.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    itUs->second.coin = std::move(it->second.coin);\n+                } else {\n+                    itUs->second.coin = it->second.coin;\n+                }\n                 cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n                 itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 // NOTE: It isn't safe to mark the coin as FRESH in the parent\n@@ -220,12 +234,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);\n+    // Instead of clearing `cacheCoins` as we would in Flush(), just clear the\n+    // FRESH/DIRTY flags of any coin that isn't spent.\n+    for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {\n+        if (it->second.coin.IsSpent()) {\n+            cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n+            it = cacheCoins.erase(it);\n+        } else {\n+            it->second.flags = 0;\n+            ++it;\n+        }\n+    }\n+    return fOk;\n+}\n+\n void CCoinsViewCache::Uncache(const COutPoint& hash)\n {\n     CCoinsMap::iterator it = cacheCoins.find(hash);"
      },
      {
        "sha": "acd5d2a4f5ff9208a6eb9d6623a6f917ca1ddd5e",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "patch": "@@ -177,7 +177,7 @@ class CCoinsView\n \n     //! Do a bulk modification (multiple Coin changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n-    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase = true);\n \n     //! Get a cursor to iterate over the whole state\n     virtual std::unique_ptr<CCoinsViewCursor> Cursor() const;\n@@ -203,7 +203,7 @@ class CCoinsViewBacked : public CCoinsView\n     uint256 GetBestBlock() const override;\n     std::vector<uint256> GetHeadBlocks() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase = true) override;\n     std::unique_ptr<CCoinsViewCursor> Cursor() const override;\n     size_t EstimateSize() const override;\n };\n@@ -236,7 +236,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n     void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase = true) override;\n     std::unique_ptr<CCoinsViewCursor> Cursor() const override {\n         throw std::logic_error(\"CCoinsViewCache cursor iteration not supported.\");\n     }\n@@ -283,12 +283,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool SpendCoin(const COutPoint &outpoint, Coin* moveto = nullptr);\n \n     /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * Push the modifications applied to this cache to its base and wipe local state.\n+     * Failure to call this method or Sync() before destruction will cause the changes\n+     * to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n      */\n     bool Flush();\n \n+    /**\n+     * Push the modifications applied to this cache to its base while retaining\n+     * the contents of this cache (except for spent coins, which we erase).\n+     * Failure to call this method or Flush() before destruction will cause the changes\n+     * to be forgotten.\n+     * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     */\n+    bool Sync();\n+\n     /**\n      * Removes the UTXO with the given outpoint from the cache, if it is\n      * not modified."
      },
      {
        "sha": "8e75c033634a9f15fba6499ed1fb440f99d709e3",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "patch": "@@ -54,7 +54,7 @@ class CCoinsViewTest : public CCoinsView\n \n     uint256 GetBestBlock() const override { return hashBestBlock_; }\n \n-    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) override\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock, bool erase = true) override\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n             if (it->second.flags & CCoinsCacheEntry::DIRTY) {"
      },
      {
        "sha": "7d62b8e8208447a343708309f2f524cbdb05418a",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "patch": "@@ -80,7 +80,7 @@ std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n     return vhashHeadBlocks;\n }\n \n-bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n+bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase) {\n     CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : std::next(it);\n         if (batch.SizeEstimate() > batch_size) {\n             LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n             m_db->WriteBatch(batch);"
      },
      {
        "sha": "7f76d1c2983a3dc2be99b19ce6ad3ef30bc750f8",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "patch": "@@ -59,7 +59,7 @@ class CCoinsViewDB final : public CCoinsView\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n     std::vector<uint256> GetHeadBlocks() const override;\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase = true) override;\n     std::unique_ptr<CCoinsViewCursor> Cursor() const override;\n \n     //! Attempt to update from an older database format. Returns whether an error occurred."
      }
    ]
  },
  {
    "sha": "f0a53f3228cafcfb4371b8f1109c6a68e6918032",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGE1M2YzMjI4Y2FmY2ZiNDM3MWI4ZjExMDljNmE2OGU2OTE4MDMy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-03T18:31:24Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-08-17T14:31:57Z"
      },
      "message": "test: refactor: clarify the coins simulation\n\nAdds comments, slight refactor clarifications to make the code\neasier to follow.",
      "tree": {
        "sha": "e9374b17fb0b50998c8301dc49601ff2cdb391ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9374b17fb0b50998c8301dc49601ff2cdb391ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0a53f3228cafcfb4371b8f1109c6a68e6918032",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmEbyF0ACgkQepNdrbLE\nTwX1Fw/9G+sR0tjCxeeKlcCRZhBD8U1GSyaqDErpOutC8tC1lz9FAhhPUyo5bC7Q\npwo9pqARbDuvZtvj9mK1mpiK09L9Ch3qO5jMJ75HyNvj8VmCaEU0VaDphXab8/ff\nXn+6bpb9aDThbU9BMCjtEeTiWbykl8XOO2T5bnBbj86IDGvuMNfTl5z2bKfxk/IT\nIGCUNKgtXAm+8H5UfTFqUlDTStoBYMPO4JEsdAm6XqyhAPSBgxiaJ2Ys9xyjKz4m\nQlixI4yln0Omm5Ux1xdsi5rN8nWTzwwXdTr7do1VKTAmax5G58S8VCnayxAu9/0c\nKTZCZ6vP4OVjove9V1CXkaxascJOdyYBkCWlXRQTgMCZsjCsqRQmTo6PzqVkBJC5\nEYfT0ZCdVx09Sgw9dI+O+wT7XrrutX25w0bym5G3qhvatcyGgY4mw4qQgDj4rXMc\nNefzLvlPd5UO2YBxoyYau00odWfSXv68Sb5uZVgGzTZ716g2Im1i8NBNCDwg1Skz\nsWODbZxvlsp4wVNzvk35mXC8tvneoFMqx5OSlh3NINnddWCFRWbTT1rmRIYnbvJV\nJlpI5JgfArJsfui+VqAuHIE5f9p1SHCwSAKQzz+S269CNVi2IJbEOYf8LTsLxL2+\n4zS6pj9fytRXOx6fx9+Qac43FyM3h6iL41ZK9aY9vUQOHxifF8Q=\n=jGqQ\n-----END PGP SIGNATURE-----",
        "payload": "tree e9374b17fb0b50998c8301dc49601ff2cdb391ff\nparent dfe6677e3d3a8b54d8017c0eb06d7e09efc62050\nauthor James O'Beirne <james.obeirne@gmail.com> 1575397884 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1629210717 -0400\n\ntest: refactor: clarify the coins simulation\n\nAdds comments, slight refactor clarifications to make the code\neasier to follow.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0a53f3228cafcfb4371b8f1109c6a68e6918032",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0a53f3228cafcfb4371b8f1109c6a68e6918032",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0a53f3228cafcfb4371b8f1109c6a68e6918032/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfe6677e3d3a8b54d8017c0eb06d7e09efc62050"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6fb3d13c2e2585ee1ca3d9e88a2a2c9b4ce21017",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0a53f3228cafcfb4371b8f1109c6a68e6918032/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0a53f3228cafcfb4371b8f1109c6a68e6918032/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=f0a53f3228cafcfb4371b8f1109c6a68e6918032",
        "patch": "@@ -155,9 +155,16 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n             bool test_havecoin_after = InsecureRandBits(2) == 0;\n \n             bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n-            const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+\n+            // Infrequently, test usage of AccessByTxid instead of AccessCoin - the\n+            // former just delegates to the latter and returns the first unspent in a txn.\n+            const Coin& entry = (InsecureRandRange(500) == 0) ?\n+                AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n-            BOOST_CHECK(!test_havecoin_before || result_havecoin == !entry.IsSpent());\n+\n+            if (test_havecoin_before) {\n+                BOOST_CHECK(result_havecoin == !entry.IsSpent());\n+            }\n \n             if (test_havecoin_after) {\n                 bool ret = stack.back()->HaveCoin(COutPoint(txid, 0));\n@@ -168,24 +175,29 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n                 Coin newcoin;\n                 newcoin.out.nValue = InsecureRand32();\n                 newcoin.nHeight = 1;\n+\n+                // Infrequently test adding unspendable coins.\n                 if (InsecureRandRange(16) == 0 && coin.IsSpent()) {\n                     newcoin.out.scriptPubKey.assign(1 + InsecureRandBits(6), OP_RETURN);\n                     BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\n                     added_an_unspendable_entry = true;\n                 } else {\n-                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 0); // Random sizes so we can test memory usage accounting\n+                    // Random sizes so we can test memory usage accounting\n+                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 0);\n                     (coin.IsSpent() ? added_an_entry : updated_an_entry) = true;\n                     coin = newcoin;\n                 }\n-                stack.back()->AddCoin(COutPoint(txid, 0), std::move(newcoin), !coin.IsSpent() || InsecureRand32() & 1);\n+                bool is_overwrite = !coin.IsSpent() || InsecureRand32() & 1;\n+                stack.back()->AddCoin(COutPoint(txid, 0), std::move(newcoin), is_overwrite);\n             } else {\n+                // Spend the coin.\n                 removed_an_entry = true;\n                 coin.Clear();\n                 BOOST_CHECK(stack.back()->SpendCoin(COutPoint(txid, 0)));\n             }\n         }\n \n-        // One every 10 iterations, remove a random entry from the cache\n+        // Once every 10 iterations, remove a random entry from the cache\n         if (InsecureRandRange(10) == 0) {\n             COutPoint out(txids[InsecureRand32() % txids.size()], 0);\n             int cacheid = InsecureRand32() % stack.size();"
      }
    ]
  },
  {
    "sha": "d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWVhYmU4NzkyM2RkOGE3ZjBjNWVlMzM0YjM5ODhiMDhjMmRiZWQ5",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-03T18:32:43Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-08-17T14:31:59Z"
      },
      "message": "test: add use of Sync() to coins tests",
      "tree": {
        "sha": "fe3829e9b94f6bad794b26290429df2352778866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe3829e9b94f6bad794b26290429df2352778866"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmEbyF8ACgkQepNdrbLE\nTwVgTw/5AejmUflD/fuQVx2/JYZNlx0oTMYmtcX2hsQzTwdaWVrJiuQGevPwbYoU\neL/OUPUxZ9k+/yLjYBoyRXEN4FUxLXxS4KWs9bsoqEGSijuZsTt8Lj8IWuwRqjBi\nMwM28AKClaWU6gnasA9E9He29C1k0FpYXambI2ZTco6mqiVm/+eh//mTCotfC9/t\ny2I4FKvRsaKMEP4fHXYcWZvaNkE+t840mAoPiTu2nqM05zElkAPUdWJeK+tr+sye\nOHKWj18aN4fEnL0P0wMDGx/Mohzvml9DWoiSvlkwX9Qf5zX0Lk2PA/QXlgxMlkKD\nfOu2xZk+Cc3EZZ44tX1OtT0oCjrJZpOfS2TyJJpCRPRSBRpbJHIg7AKAJQZAjNkV\nFnC/mE91HFW/VD+dyeAYAZuBwXpag7OEDAD6xO2mfK4O8tvxyxiDc9Ty5QOU/mer\niESzapXoqtarSwTLMztoyWEQ/DR+2WKkrwMkiZmYio0Jya8SPTpmMvnYxm8P9KVM\noaudD6p15XViqk3dBc1Sy2pWLcR9Fac0+s6nwCj0pFFVynDVcrnZg/pwzk8uLlD+\n230MGVeBmQkUR3+gOPWZxwjcJEKVpPyHD6AVIg6KLSXHhuiQ9DuCg5yJ8zx146c2\nuQ+hCpErmcOUy6rjbl/Iemsgpw0SU8ddI2Z2oOD1CLLLwpa9qZQ=\n=A0PW\n-----END PGP SIGNATURE-----",
        "payload": "tree fe3829e9b94f6bad794b26290429df2352778866\nparent f0a53f3228cafcfb4371b8f1109c6a68e6918032\nauthor James O'Beirne <james.obeirne@gmail.com> 1575397963 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1629210719 -0400\n\ntest: add use of Sync() to coins tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0a53f3228cafcfb4371b8f1109c6a68e6918032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0a53f3228cafcfb4371b8f1109c6a68e6918032",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0a53f3228cafcfb4371b8f1109c6a68e6918032"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "67063d07e46456c0d96a729f0a1532c39c2b5ead",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
        "patch": "@@ -56,7 +56,7 @@ class CCoinsViewTest : public CCoinsView\n \n     bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock, bool erase = true) override\n     {\n-        for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n+        for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = erase ? mapCoins.erase(it) : ++it) {\n             if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n                 // Same optimization used in CCoinsViewDB is to only write dirty entries.\n                 map_[it->first] = it->second.coin;\n@@ -65,7 +65,6 @@ class CCoinsViewTest : public CCoinsView\n                     map_.erase(it->first);\n                 }\n             }\n-            mapCoins.erase(it++);\n         }\n         if (!hashBlock.IsNull())\n             hashBestBlock_ = hashBlock;\n@@ -127,6 +126,7 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n     bool found_an_entry = false;\n     bool missed_an_entry = false;\n     bool uncached_an_entry = false;\n+    bool flushed_without_erase = false;\n \n     // A simple map to track what we expect the cache stack to represent.\n     std::map<COutPoint, Coin> result;\n@@ -229,15 +229,19 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n             if (stack.size() > 1 && InsecureRandBool() == 0) {\n                 unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n                 if (fake_best_block) stack[flushIndex]->SetBestBlock(InsecureRand256());\n-                BOOST_CHECK(stack[flushIndex]->Flush());\n+                bool should_erase = InsecureRandRange(4) < 3;\n+                BOOST_CHECK(should_erase ? stack[flushIndex]->Flush() : stack[flushIndex]->Sync());\n+                flushed_without_erase |= !should_erase;\n             }\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 //Remove the top cache\n                 if (fake_best_block) stack.back()->SetBestBlock(InsecureRand256());\n-                BOOST_CHECK(stack.back()->Flush());\n+                bool should_erase = InsecureRandRange(4) < 3;\n+                BOOST_CHECK(should_erase ? stack.back()->Flush() : stack.back()->Sync());\n+                flushed_without_erase |= !should_erase;\n                 delete stack.back();\n                 stack.pop_back();\n             }\n@@ -273,6 +277,7 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n     BOOST_CHECK(found_an_entry);\n     BOOST_CHECK(missed_an_entry);\n     BOOST_CHECK(uncached_an_entry);\n+    BOOST_CHECK(flushed_without_erase);\n }\n \n // Run the above simulation for multiple base types."
      }
    ]
  },
  {
    "sha": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzJmYzUxNTRlODhiNDY3MjViOGExYzIxNDlhYTk0YzU1MmQxZTAz",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-03T18:33:10Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-08-17T14:32:01Z"
      },
      "message": "test: add test for coins view flush behavior using Sync()",
      "tree": {
        "sha": "55ebd3cf348ad051d8e5fa6cfa8b5770a719baf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55ebd3cf348ad051d8e5fa6cfa8b5770a719baf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmEbyGEACgkQepNdrbLE\nTwVPqg//ZnCLaeRDyDL8zCmpDiY34pdEzCVxoYGKyrklMtNUIgdCVId0SvQwkYPG\nx+l7E1eeEkbFcx8WQCXRi+fJ1s+3/F3SwXfeRXD5xPf6PcznCaqSJHHZz0ii8bh0\n8/ME3UvSwrxyUToosGMvWRGqTpZ4+Ya6iAiTpKTwD2Qs1kKsIRM/45aL++vJdmZY\noZqKB6mYQGW/IGfmNA32q0Qn//9CL4MHsnc88cBKTVt/HgZT+R1NGFM1Zf+xwi9Y\nPZql0NHaeIkrijl7XfSzI16PiaZyQyV/cQSFWHCHnSOzE/FVwgGd+IiLHW2hEypf\nMvto62AdS5laKDM1UlOd3y0cYYko4YcApMNKYGiAo91sbat8zXOOWMMI8xcmoTJR\nUmc1Unis0KkltwO8qYVWVTKKknDOibevYrBcUae+aVt+0KkHOmfxiWYoxmoYKCrp\n8YepPO+E/K9iqXtxLkScnWENbbClkgDRbbNJ2HLQoKfxDAkVHnuCl9TA+CGZJyMF\n5WU5aRztlDEjqbkP286Den6bZsgWCiQq9DPhR5JBM519Gpit2CqkyYAvjh/gxSpT\nAU9QTFlduW/VepL8Taojrxjnq0eaPiTdznJ0VRBFYcUbZkrYgDdN65vZbpl+6Juj\nGSeWA4gUIFGaI5ppqgqLUb+TiiHfdzVfxBrLnmgvj0qznbWelNw=\n=SbKd\n-----END PGP SIGNATURE-----",
        "payload": "tree 55ebd3cf348ad051d8e5fa6cfa8b5770a719baf6\nparent d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9\nauthor James O'Beirne <james.obeirne@gmail.com> 1575397990 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1629210721 -0400\n\ntest: add test for coins view flush behavior using Sync()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2fc5154e88b46725b8a1c2149aa94c552d1e03/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9eabe87923dd8a7f0c5ee334b3988b08c2dbed9"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 207,
      "deletions": 2
    },
    "files": [
      {
        "sha": "41682d38b666aaf29bc05350511316d4a549532b",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 207,
        "deletions": 2,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2fc5154e88b46725b8a1c2149aa94c552d1e03/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2fc5154e88b46725b8a1c2149aa94c552d1e03/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
        "patch": "@@ -607,9 +607,9 @@ static size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n     return inserted.first->second.coin.DynamicMemoryUsage();\n }\n \n-void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags, const COutPoint& outp = OUTPOINT)\n {\n-    auto it = map.find(OUTPOINT);\n+    auto it = map.find(outp);\n     if (it == map.end()) {\n         value = ABSENT;\n         flags = NO_ENTRY;\n@@ -895,4 +895,209 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance or\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            // hashBlock must be filled before flushing to disk; value is\n+            // unimportant here. This is normally done during connect/disconnect block.\n+            cache->SetBestBlock(InsecureRand256());\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but spent and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, SPENT);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH, spent coin is deleted by Sync()\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    // Add and spend from same cache without flushing.\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+\n+    // Coin should be FRESH in the cache.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // Base shouldn't have seen coin.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    BOOST_CHECK(all_caches[0]->SpendCoin(outp));\n+    all_caches[0]->Sync();\n+\n+    // Ensure there is no sign of the coin after spend/flush.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, ABSENT);\n+    BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+    BOOST_CHECK(!all_caches[0]->HaveCoinInCache(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_flush_behavior)\n+{\n+    // Create two in-memory caches atop a leveldb view.\n+    CCoinsViewDB base{\"test\", /*nCacheSize*/ 1 << 23, /*fMemory*/ true, /*fWipe*/ false};\n+    std::vector<CCoinsViewCacheTest*> caches;\n+    caches.push_back(new CCoinsViewCacheTest(&base));\n+    caches.push_back(new CCoinsViewCacheTest(caches.back()));\n+\n+    for (CCoinsViewCacheTest* view : caches) {\n+        TestFlushBehavior(view, base, caches, /*do_erasing_flush*/ false);\n+        TestFlushBehavior(view, base, caches, /*do_erasing_flush*/ true);\n+    }\n+\n+    // Clean up the caches.\n+    while (caches.size() > 0) {\n+        delete caches.back();\n+        caches.pop_back();\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]