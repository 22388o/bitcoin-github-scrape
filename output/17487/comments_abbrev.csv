jamesob,2019-11-15 18:51:43,"> Does this speed up IBD with low dbcache? If so, a benchmark would be nice\n\nNo, this PR doesn't change any existing behavior - it simply introduces the option to avoid erasing the cache (which is later used by assumeutxo's snapshot activation code). This changeset shouldn't cause any sort of performance difference.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554483423,554483423,
DrahtBot,2019-11-15 21:08:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#9384](https://github.com/bitcoin/bitcoin/pull/9384) (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf yo",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554529034,554529034,
dongcarl,2019-11-15 21:25:33,"Code Review ACK bd44f51d790edc07b7e1224e0f8bfce4252c74d5\nChecked that it doesn't change any behavior, if the compiler is smart enough about detecting unused codepaths/function signatures, it will probably even emit an unchanged binary.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554534416,554534416,
jamesob,2019-11-15 21:38:41,"Thanks for the looks, everyone. I've incorporated feedback from @MarcoFalke and @ariard. [(diff)](https://github.com/bitcoin/bitcoin/compare/bd44f51d790edc07b7e1224e0f8bfce4252c74d5..a22b1fb1d4a239a47790a0522bb3f5e493cb9e57)",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554538716,554538716,
Sjors,2019-11-19 16:31:20,Why is it that you don't need this bit in your followup PR? https://github.com/bitcoin/bitcoin/pull/15265/files#diff-cd7b305fd4b4280f22ae88960e60398eR210-R222,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555591310,555591310,
MarcoFalke,2019-11-19 16:57:43,"Given that this does not improve performance (see https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-458657451), is this needed at all? If so, sharing a benchmark with steps to reproduce would be helpful.\n\nAnyway, I'd like to see the tests in `src/test/coins_tests.cpp` updated to cover the newly added paths.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555603581,555603581,
ryanofsky,2019-11-19 17:08:45,"Concept ACK, but:\n\n- I think the PR description should be clearer that this change by itself doesn't change behavior.\n- I don't understand how this speeds up UTXO snapshot activation if conclusion from #15265 is that the cache is only really functioning as a write cache and not a read cache.\n- I agree with Marco about testing. This definitely needs unit tests or some coverage to unsure thi",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555608657,555608657,
jamesob,2019-11-19 17:18:37,"Alright, given the controversy here now is probably as good a time as any to back up and figure out exactly what `cacheCoins`' impact is on performance, for both this PR and posterity, so I'm going to benchmark\n1. a reindex to 550,000 with and without an in-memory UTXO cache, and then\n1. UTXO snapshot sync-to-tip with and without this changeset.\n\nI'll get back with some results in the next",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555613237,555613237,
laanwj,2019-11-20 11:42:31,"> the cache may or may not show importance based on leveldb's use of mmap & max_open_files, which is particularly relevant on Win32\n\nFWIW, #17398 adds leveldb mmap support on Windows, might want to try with and without that PR  when doing benchmarking on Windows.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555967785,555967785,
jamesob,2019-11-21 19:04:15,"After benching, I stand by this change as being significantly useful. I compare HEAD of the assumeutxo parent PR ([`utxo-dumpload-compressed`](https://github.com/jamesob/bitcoin/tree/utxo-dumpload-compressed)) to a branch of it which drops use of the `erase=false` parameter, erasing the coins after snapshot load ([`bench/au.no-erase`](https://github.com/jamesob/bitcoin/tree/bench/au.no-erase), [ch",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557226923,557226923,
jamesob,2019-11-21 19:37:10,"@sdaftuar just pointed out to me that this code is very wrong - because I don't wipe the flags of flushed coins, this code ends up with an incorrect on-disk UTXO set (since a coin with the `FRESH` flag will only be removed from the in-memory cache and the delete will not propagate to leveldb). Going to fix this bug and reevaluate and pledge to never doubt Suhas' benchmarks again.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557239614,557239614,
jamesob,2019-11-21 19:38:38,(FWIW @Sjors wins Employee of the Month for spotting this bug in a previous comment.),https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557240133,557240133,
Sjors,2019-11-22 11:59:21,"Took me a while to understand what you're doing here. To rephrase in my own words: when you load the snapshot from disk you end up with a coin cache at e.g. 600,000. Depending on the users dbcache setting, part of this is already in RAM, which is potentially nice when continuing IBD.\n\nhttps://github.com/jamesob/bitcoin/commit/85a73a074389c80c09e2acc877f45e06ab3f5976#diff-24efdb00bfbe56b140fb00",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557505590,557505590,
jamesob,2019-11-22 16:16:53,"I'm surprised to report that even after fixing the (consensus!) bug that @Sjors and @sdaftuar pointed out, this change still shows considerable improvement for the assumeutxo snapshot-load use. We're still seeing 3x reduction in time with this change applied for spinning disks while doing a from-600k snapshot IBD.\n\n```\nhost         tag                      time       time% maxmem  cpu%  dbca",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557595582,557595582,
andrewtoth,2019-11-22 20:22:55,"What about using `Flush(erase=false)` for all periodic flushes after IBD? That way when running with a high enough `dbcache` a flush would never empty `cacheCoins`, which would surely improve performance. That's also the only real issue with #15218 .",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557680581,557680581,
jamesob,2019-12-03 20:42:54,"I've pushed some test coverage for the new `erase` parameter (and more generally some explicit tests for coins cache behavior). Notably, the new test cases use `CCoinsViewDB` at the base of the cache structure, which isn't currently tested explicitly anywhere else in the unittest suite - though of course an instance lives at the heart of every `CChainState`.\n\nThroughout the course of writing (",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-561348373,561348373,
jamesob,2019-12-04 17:12:01,"Latest round of benchmarks for the current tip of this branch continues to show good performance improvements for UTXO snapshot load, even on SSD. (same setup as https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557595582)\n\n```\nhost         tag                      time       time% maxmem  cpu%  dbcache\nbench-ssd-4  bench/au.no-erase.1      43:27.79   0.98  6572.45MB 137%  5000MB",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-561741590,561741590,
jamesob,2019-12-05 16:53:34,I've split `Flush(bool erase)` into `Sync()` and `Flush()` as requested by @ryanofsky @MarcoFalke. ([changes](https://github.com/bitcoin/bitcoin/compare/1e68aad46ed122c85ed60e1529c6cf512bbefa86..eebaca7620bbd0af0ec385c6c7d47b2b4b524d55)),https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-562216092,562216092,
ryanofsky,2020-01-27 21:02:00,Review club notes: https://bitcoincore.reviews/17487.html,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-578950782,578950782,
Sjors,2020-01-29 11:57:30,"> Review club notes:\n\nPreparation notes; it's scheduled for ~Wednesday the 29th~ tonight, which explains why I couldn't find the minutes :-)\n\n",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579723127,579723127,
jonatack,2020-01-29 16:23:17,"> You may want to rebase, because without that on macOS I get errors during `make`:\n\nWith gcc (Debian 8.3.0-6) and `--enable-debug --enable-bench` eebaca7620bbd0af0ec385c6c7d47b2b4b524d55 builds and all tests are passing for me. Starting code review.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579838548,579838548,
jonatack,2020-01-29 17:53:09,Concept ACK. Code review ACK of commit b2abb396c64e96585a0c38a269372b35cced08bd. The changes are straightforward and do not appear to change behavior.,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579879560,579879560,
ryanofsky,2020-01-29 18:09:56,"PR title ""coins: allow Flush() without cache drop"" seems out of date. Would suggest something like ""coins: Add new unused CCoinsViewCache::Sync() method""",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579887330,579887330,
jnewbery,2020-02-02 13:55:30,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-581137919,581137919,
jamesob,2020-02-17 16:37:01,"Thanks for the reviews, all. I'll address some of the nits if there's a need to rebase, otherwise I'm going for ACK-preservation at this point.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-587075723,587075723,
jnewbery,2020-03-13 17:20:52,"This has two ACKs on the latest branch (@jnewbery and @fjahr), but previous concept ACKs from @ryanofsky @jonatack @dongcarl @ariard , and other review comments from @Sjors @andrewtoth @MarcoFalke . What can we do to get this over the line?",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-598830130,598830130,
andrewtoth,2020-05-18 03:46:39,"tested ACK 8bb1163805121b2863fef1c16c9b104803e8dfdd\nI've been running [this patch](https://github.com/andrewtoth/bitcoin/commit/e851e772197f10362818c7e38a7776ba03a71d48) on top of this branch for the last week to test non-erasing periodic flushes. I haven't had any issues.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-629929852,629929852,
jamesob,2020-05-20 16:27:53,"Thanks for the feedback, all. I'll push some responses later today.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-631583791,631583791,
Sjors,2020-06-01 13:46:16,re-utACK 8d5994ef2235c6706440bc18968006cd04c22fb4,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-636870055,636870055,
jnewbery,2020-06-01 22:21:58,utACK 8d5994ef2235c6706440bc18968006cd04c22fb4,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-637156481,637156481,
andrewtoth,2020-06-03 22:28:40,re-ACK 8d5994ef2235c6706440bc18968006cd04c22fb4,https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-638494243,638494243,
jamesob,2020-08-01 15:53:54,"[`au.coins-erase.7`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.7) -> [`au.coins-erase.8`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.8)\n\n<details><summary>Show range-diff</summary>\n\n```sh\n% git range-diff master au.coins-erase.7 au.coins-erase.8\n\n1:  8b9b51da04 ! 1:  58616e0b8b coins: add Sync() method to allow flush without cacheCoins drop\n    @@ -187,7 +1",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-667551597,667551597,
jamesob,2020-08-01 20:18:04,"[`au.coins-erase.8`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.8) -> [`au.coins-erase.9`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.9)\n\n<details><summary><code>$ git range-diff master au.coins-erase.8 au.coins-erase.9</code></summary>\n\n```diff\n1:  58616e0b8b ! 1:  47d71fdb70 coins: add Sync() method to allow flush without cacheCoins drop\n    @@ -154,7 +154,7 @",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-667582030,667582030,
Sjors,2021-05-05 18:33:03,"I was able to rebase f4b5605 on master and run the test. Difference with my previous utACK seems trivial, but I haven't re-reviewed it.",https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-832916004,832916004,
MarcoFalke,2019-11-15 18:45:55,"Could use the ternary operator instead for less code and no captures?\n\n```cpp\nfor ( ... ; it = erase ? mapCoins.erase(it) : ++it) {",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r346960653,346960653,src/coins.cpp
ariard,2019-11-15 20:30:51,Isn't passing the argument explicitly better than with a default one? Also it's worthy to extend method comment a bit with effect of argument on cache.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r346999363,346999363,src/coins.h
MarcoFalke,2019-12-03 21:00:29,"Is it true that this loop is very slow with high dbcache? If so, a comment would be appropriate.\n\nOther than that I also agree with @ryanofsky comment to have ""separate methods like Flush() and Sync() or Flush() and Write()"". As a rule of thumb, if two functions have a completely different implementation, they should not be bundled in one and switched by a boolean.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r353418761,353418761,src/coins.cpp
jamesob,2019-12-04 17:10:23,"In my own benchmarking, I haven't seen anything to support the notion that this loop takes a long time. In the newest benchmarks (to be posted), calling `Flush(erase=true)` on a cache of size 3826 MB takes **7:17** and calling `Flush(erase=false)` on a cache of the same size takes **6:03** so the difference is either negligible or favorable. \n\nI got the times by subtracting timestamps from the",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r353872539,353872539,src/coins.cpp
Sjors,2020-01-29 12:26:12,"If `COutPoint(txid, 0)` doesn't exist and `COutPoint(txid, 0)` does, then `AccessByTxid` will randomly behave different from `AccessCoin`. But the coins are random anyway.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372353051,372353051,src/test/coins_tests.cpp
Sjors,2020-01-29 13:52:42,"Comment above should be ""Flush or sync the top cache"". Are you sure this test is working as advertised? What does `delete stack.back();` and  `stack.pop_back();` do here? Making them conditional doesn't break the test.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372393219,372393219,src/test/coins_tests.cpp
Sjors,2020-01-29 14:12:52,"nit: ""either ... and""?",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372404143,372404143,src/test/coins_tests.cpp
andrewtoth,2020-01-29 17:30:53,"Schrödinger's `COutPoint(txid, 0)`? :P",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372525830,372525830,src/test/coins_tests.cpp
jnewbery,2020-02-10 23:18:05,"This is simply copying the pattern of `Flush()`, but `BatchWrite()` never returns `false`, so this parameter does nothing. I think all three functions should be cleaned up to not return anything so that the calling pattern is clear, but that can be done in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377374863,377374863,src/coins.cpp
jnewbery,2020-02-10 23:20:36,"nit: ""Hack to allow flushing"" isn't very illuminating. Perhaps ""A cache's hashBlock must be filled before flushing to disk. That's normally done in connect/disconnect block. Do it manually here""",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377375703,377375703,src/test/coins_tests.cpp
jnewbery,2020-02-10 23:21:08,"nit: I don't think pruned is the right terminolgy, but this can be cleaned up with all the rest in a future PR.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377375875,377375875,src/test/coins_tests.cpp
jnewbery,2020-02-10 23:22:39,"I think this should say ""ensure that a FRESH spent coin is deleted by Sync()"". If the coin is FRESH but not spent, then a `Sync()` won't delete it.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377376396,377376396,src/test/coins_tests.cpp
jnewbery,2020-02-10 23:23:39,nit: I don't think we need these three lines. Just checking that `HaveCoinInCache()` fails is enough to show that the coin doesn't exist in the cache.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377376708,377376708,src/test/coins_tests.cpp
fjahr,2020-02-14 23:00:56,nit: I like the naming destinction between `Sync()` and `Flush()` in the code because it made it easier to parse and that naming could have been used more here in the test as well. Now the destinction it is kind of hidden behind this `do_erasing_flush` parameter.  There could have been a `sync_all` helper method for example. But it's probably not worth the effort of changing now.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r379682087,379682087,src/test/coins_tests.cpp
fjahr,2020-02-14 23:33:25,"nit: If I look at this comment outside of the context of this PR ""Instead of clearing the cache"" might not make much sense because there is no cache clearing going on inside of this function and the relation to `Flush()` may not be immediately clear.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r379689269,379689269,src/coins.cpp
luke-jr,2020-04-02 03:52:16,Is the `std::move` gain really worth the added code complexity here?,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r402037193,402037193,src/coins.cpp
sipa,2020-04-02 04:08:04,"This has no effect, I think. All std::move does is cast to an rvalue reference. The ternary operator merges it back to the same type with the other branch.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r402040674,402040674,src/coins.cpp
jamesob,2020-04-05 14:33:52,"It is indeed required. Try recompiling without this change and running the coins tests (`./src/test/test_bitcoin -t coins_tests`).\n\nThe std::move is necessary to erase the contents of the map being written to the parent.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403710128,403710128,src/coins.cpp
sipa,2020-04-05 18:20:33,"@jamesob The `std::move` here has no effect; it is equivalent to `entry.coin = it->second.coin`. If you want to conditionally move, you need two separate statements.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403738538,403738538,src/coins.cpp
jamesob,2020-04-05 18:37:43,Did you actually try recompiling with your suggested change and running the tests? The result on my platform (`gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0`) is failure.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403740488,403740488,src/coins.cpp
luke-jr,2020-04-05 18:56:44,"@jamesob It sounds like you're relying on the side effect of the moved-from object being cleared or something, but AFAIK it is in fact left in an undefined state...\n\nProbably should just copy and explicitly clear.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403742681,403742681,src/coins.cpp
sipa,2020-04-05 19:00:17,"It seems I'm wrong; your code is correct.\n\nApparently what happens in this case is that a temporary variable is created, which `it->second.coin` is either copied or moved to (depending on `erase`), and then that temporary variable is move-assigned to `entry.coin`. This has the desired effect, though there is possibly an unnecessary (but cheap) move.\n\nIf you write it as\n\n```c++\nif (er",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743080,403743080,src/coins.cpp
sipa,2020-04-05 19:04:11,"@luke-jr Well, the only member with move semantics is CScript, which is a prevector, and move assigning is well defined (it's in our own code), namely swapping.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743513,403743513,src/coins.cpp
luke-jr,2020-04-05 19:06:35,"Abstractly, it is undefined, and `std::move` AFAIK does not guarantee move assignment, only allows it?",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743776,403743776,src/coins.cpp
sipa,2020-04-05 19:11:26,"@luke-jr `std::move` just casts to an rvalue reference, nothing else. It's up to the involved classes to define what to do when assigned with or constructed from an rvalue.\n\nThe standard also defines what standard library classes do in this case: moved-from objects are in a valid but unspecified state (which means that you're only allowed to run operations on them that have no preconditions; e",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403744322,403744322,src/coins.cpp
jnewbery,2020-05-19 16:18:00,"nit: it seems a bit odd to clear the flags immediately before deleting in the case where the coin is spent. If you retouch this PR, the flag clearing can be moved into the else branch below.\n\nYou might also want to update the comment to reflect that change: ""Erase any spent coins and clear the FRESH/DIRTY flags for unspent coins"".",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427429354,427429354,src/coins.cpp
jnewbery,2020-05-19 16:27:41,"nit: I think it'd be clearer to avoid this use-once local variable by using the same pattern that you used in coins.cpp:\n\n```\nit = erase ? mapCoins.erase(it) : ++it;\n```",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427435879,427435879,src/txdb.cpp
Sjors,2020-05-19 16:55:49,"I like sipa's alternative.\n\nFWIW I also get a flood of errors when using `entry.coin = std::move(it->second.coin);` with `erase = false`. Conversely if I drop `std::move` it works fine, but I haven't looked at performance. In other words, we're not depending on some side-effect `std::move`, it's just a performance enhancer. ",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427454512,427454512,src/coins.cpp
Sjors,2020-05-19 18:21:24,"Agreed. In addition, let's not assume there won't be new flags in the future, so maybe clear the `FRESH/DIRTY` flags explicitly with an `=&`?",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427508528,427508528,src/coins.cpp
Sjors,2020-05-19 18:23:34,nit: `* the contents of this cache except for FRESH spent coins.`,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427509760,427509760,src/coins.h
Sjors,2020-05-19 18:28:26,"Does this need an exception, to always delete `FRESH` spent coins? Or those can't exist at this level? ",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427512576,427512576,src/txdb.cpp
Sjors,2020-05-19 18:36:17,Why did you switch the second argument of `assign` to `1`?,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427517198,427517198,src/test/coins_tests.cpp
Sjors,2020-05-19 18:49:26,[nit bump](https://github.com/bitcoin/bitcoin/pull/17487/commits/8bb1163805121b2863fef1c16c9b104803e8dfdd#r377375703),https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427525125,427525125,src/test/coins_tests.cpp
Sjors,2020-05-19 18:51:55,[nit bump](https://github.com/bitcoin/bitcoin/pull/17487/commits/8bb1163805121b2863fef1c16c9b104803e8dfdd#r377376396),https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427526583,427526583,src/test/coins_tests.cpp
jamesob,2020-05-28 17:43:04,"Yeah, the point is to exercise cases where we do delete/pop parts of the cache stack - the test should pass in any case.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432012334,432012334,src/test/coins_tests.cpp
jamesob,2020-05-28 17:46:24,I don't understand the original comment - is there a typo in one of your `COutPoint`s?,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432014219,432014219,src/test/coins_tests.cpp
jamesob,2020-05-28 17:48:24,Good question... can't remember doing that. Will revert.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432015340,432015340,src/test/coins_tests.cpp
jamesob,2020-05-28 17:49:51,fixed,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432016064,432016064,src/test/coins_tests.cpp
jamesob,2020-05-28 17:51:50,fixed,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017156,432017156,src/test/coins_tests.cpp
jamesob,2020-05-28 17:52:27,fixed,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017479,432017479,src/test/coins_tests.cpp
jamesob,2020-05-28 17:53:18,I'm going to keep these in because I think it's worth being painfully explicit in coins tests.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017919,432017919,src/test/coins_tests.cpp
jamesob,2020-05-28 18:08:19,"@Sjors please see above - we do rely on the `std::move` to clear the entry from the child cache, it isn't just a performance optimization. If you remove the `move`, the coins unittests will fail.\n\nThat said I agree it seems tricky to rely upon this behavior implicitly based upon classes we've define ourselves, but I haven't tested the performance implications of adding `mapCoins.erase(it)`. Gi",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432026105,432026105,src/coins.cpp
jamesob,2020-05-28 18:09:20,rephrased,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432026636,432026636,src/coins.cpp
jamesob,2020-05-28 18:11:21,fixed,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432027751,432027751,src/coins.cpp
jamesob,2020-05-28 18:12:12,fixed,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432028244,432028244,src/coins.h
jamesob,2020-05-28 18:31:58,"Good suggestion, thanks! Fixed.\n\n`FRESH` spent coins won't exist here because they will have been removed from the child cache first - for proof of this note that nothing calls `CCoinsViewDB::BatchWrite()` aside from CCoinsViewCache, and `SpendCoin()` only exists on CCoinsViewCache instances.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432039014,432039014,src/txdb.cpp
Sjors,2020-05-28 19:25:01,"> If you remove the move, the coins unittests will fail.\n\nOdd, I tried that. Will try again.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432067601,432067601,src/coins.cpp
jamesob,2020-05-28 19:58:51,"> Odd, I tried that. Will try again.\n\nPerhaps you made the change in the relevant commit, but then didn't apply subsequent commits including the new tests? Just a guess.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432088620,432088620,src/coins.cpp
andrewtoth,2020-05-28 20:22:07,FWIW I did try this before acking. I checked out this branch and changed the ternary to just use the copy assignment and the tests errored out. Will try again with updated commits.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432101304,432101304,src/coins.cpp
jamesob,2020-05-28 22:34:49,"@jnewbery has found that I was wrong - the std::move invocation isn't necessary for correctness, it's just an optimization. Thanks for pointing that out @Sjors. Will remove the new comment.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432161196,432161196,src/coins.cpp
jnewbery,2020-05-29 02:21:45,"Since this has caused so much confusion, I think it'd be better to update the comment than remove it entirely. Perhaps something like:\n\n```\n// We'll erase this entry from the map in the for increase expression.\n// Move the coin to the parent cache instead of copying as an optimization.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432221525,432221525,src/coins.cpp
andrewtoth,2020-05-31 01:56:31,Should this also be updated to use an `if/else` block instead of a ternary like above?,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432902077,432902077,src/coins.cpp
jamesob,2020-05-31 15:23:16,Good catch. ,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432957388,432957388,src/coins.cpp
jnewbery,2020-05-31 22:12:47,"nit: the third part of the for loop is an expression, not a predicate (more precisely, the _increase_ or _iteration_ expression). A predicate is a function which returns true/false.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432989748,432989748,src/coins.cpp
Sjors,2020-06-01 12:41:01,"Pfew, I'm not insane :-) Thanks for adding the comment.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433210377,433210377,src/coins.cpp
jnewbery,2020-06-01 22:21:19,"If `HaveCoinInCache()` isn't explicit enough, should it be removed from lower in the test, or is that different somehow?",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433520706,433520706,src/test/coins_tests.cpp
jonatack,2020-06-02 15:23:51,Should `++it` be outside the ternary conditional here?,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433961320,433961320,src/txdb.cpp
jonatack,2020-06-02 15:25:33,"> This is simply copying the pattern of `Flush()`, but `BatchWrite()` never returns `false`, so this parameter does nothing. I think all three functions should be cleaned up to not return anything so that the calling pattern is clear, but that can be done in a follow-up PR.\n\nI agree with @jnewbery here.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433962526,433962526,src/coins.cpp
jnewbery,2020-06-02 16:13:15,No. `std::unordered_map::erase()` returns an iterator to the next item in the map: https://en.cppreference.com/w/cpp/container/unordered_map/erase.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434003002,434003002,src/txdb.cpp
jonatack,2020-06-02 16:17:42,Oh -- and it appears to be a convention. Thanks @jnewbery.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434005792,434005792,src/txdb.cpp
sipa,2020-06-02 16:26:09,`it = ++it;` is kind of strange though. How about `it = mapCoins.erase(it) : std::next(it);` ?,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434011129,434011129,src/txdb.cpp
andrewtoth,2020-06-03 17:18:09,"Thinking about this more, is it not more than a pure optimization? If we copy instead of move, then we are increasing the memory footprint of our dbcache. For a large batch write won't all dirty entries exist in memory twice, potentially increasing the memory requirements of the node temporarily until the parent cache writes to disk?",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434729703,434729703,src/coins.cpp
jamesob,2020-06-03 17:55:44,"@andrewtoth I think this is offset by the fact that we're erasing as we iterate through the map, so coins will only be duplicated in memory one by one. But that's a good consideration, thanks for raising the point.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434751546,434751546,src/coins.cpp
jamesob,2020-06-03 17:56:01,Will change if I rebase.,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434751700,434751700,src/txdb.cpp
andrewtoth,2020-06-03 18:17:08,"@jamesob For this change we are no longer erasing as we iterate through the map, and also copying, right? For a `Sync()` with a large amount of dirty entries won't this cause memory usage to increase?",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434763783,434763783,src/coins.cpp
andrewtoth,2020-06-03 22:28:02,"Hmm ok I guess I'm missing how we're erasing during the iteration with `erase=false`. I tested a reindex-chainstate with max dbcache and did a `Sync` instead of `Flush` on shutdown, and it didn't increase memory usage at all when syncing. LGTM.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434892478,434892478,src/coins.cpp
jamesob,2020-06-04 20:21:03,@andrewtoth you don't see a big memory spike because in practice this implementation of `BatchWrite` is only called for small sets of coins [during `ConnectTip()`](https://github.com/jamesob/bitcoin/blob/8d5994ef2235c6706440bc18968006cd04c22fb4/src/validation.cpp#L2600-L2613) to make UTXO set changes atomic (i.e. a CCoinsViewCache on top of another CCoinsViewCache); calling `BatchWrite` for really,https://github.com/bitcoin/bitcoin/pull/17487#discussion_r435526117,435526117,src/coins.cpp
sipa,2020-08-01 18:21:43,"I don't think `except for FRESH spent coins, which we erase` is true?\n\nIf a FRESH coin is spent, it is deleted immediately, so there shouldn't be any such entries in the first place.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463987009,463987009,src/coins.h
jamesob,2020-08-01 20:17:09,"Yep, [you're right](https://github.com/jamesob/bitcoin/blob/0292b01cc4be18e5eb37563064cced7d73cd7025/src/coins.cpp#L120-L121), not sure what I was thinking there.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463996447,463996447,src/coins.h
jamesob,2020-08-01 20:18:28,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463996547,463996547,src/txdb.cpp
