[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554483423",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554483423",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 554483423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDQ4MzQyMw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-15T18:51:43Z",
    "updated_at": "2019-11-15T18:51:43Z",
    "author_association": "MEMBER",
    "body": "> Does this speed up IBD with low dbcache? If so, a benchmark would be nice\r\n\r\nNo, this PR doesn't change any existing behavior - it simply introduces the option to avoid erasing the cache (which is later used by assumeutxo's snapshot activation code). This changeset shouldn't cause any sort of performance difference.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554483423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554529034",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554529034",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 554529034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDUyOTAzNA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-15T21:08:40Z",
    "updated_at": "2021-12-01T09:43:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#9384](https://github.com/bitcoin/bitcoin/pull/9384) (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554529034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554534416",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554534416",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 554534416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDUzNDQxNg==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-15T21:25:33Z",
    "updated_at": "2019-11-15T21:25:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Code Review ACK bd44f51d790edc07b7e1224e0f8bfce4252c74d5\r\nChecked that it doesn't change any behavior, if the compiler is smart enough about detecting unused codepaths/function signatures, it will probably even emit an unchanged binary.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554534416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554538716",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-554538716",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 554538716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDUzODcxNg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-15T21:38:41Z",
    "updated_at": "2019-11-15T21:38:41Z",
    "author_association": "MEMBER",
    "body": "Thanks for the looks, everyone. I've incorporated feedback from @MarcoFalke and @ariard. [(diff)](https://github.com/bitcoin/bitcoin/compare/bd44f51d790edc07b7e1224e0f8bfce4252c74d5..a22b1fb1d4a239a47790a0522bb3f5e493cb9e57)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554538716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555591310",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555591310",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 555591310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTU5MTMxMA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T16:31:20Z",
    "updated_at": "2019-11-19T16:31:20Z",
    "author_association": "MEMBER",
    "body": "Why is it that you don't need this bit in your followup PR? https://github.com/bitcoin/bitcoin/pull/15265/files#diff-cd7b305fd4b4280f22ae88960e60398eR210-R222",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555591310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555603581",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555603581",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 555603581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYwMzU4MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T16:57:43Z",
    "updated_at": "2019-11-19T16:57:43Z",
    "author_association": "MEMBER",
    "body": "Given that this does not improve performance (see https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-458657451), is this needed at all? If so, sharing a benchmark with steps to reproduce would be helpful.\r\n\r\nAnyway, I'd like to see the tests in `src/test/coins_tests.cpp` updated to cover the newly added paths.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555603581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555608657",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555608657",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 555608657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYwODY1Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:08:45Z",
    "updated_at": "2019-11-19T17:08:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK, but:\r\n\r\n- I think the PR description should be clearer that this change by itself doesn't change behavior.\r\n- I don't understand how this speeds up UTXO snapshot activation if conclusion from #15265 is that the cache is only really functioning as a write cache and not a read cache.\r\n- I agree with Marco about testing. This definitely needs unit tests or some coverage to unsure this isn't adding broken functionality, or code that could easily be broken in the future with no one noticing.\r\n- I agree with Antoine about the Flush method signature. Using a default boolean argument seems error prone. Explicit parameter would be ok, but better would just be to have separate methods like `Flush()` and `Sync()` or `Flush()` and `Write()`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555608657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555613237",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555613237",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 555613237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYxMzIzNw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:18:37Z",
    "updated_at": "2019-11-19T17:18:37Z",
    "author_association": "MEMBER",
    "body": "Alright, given the controversy here now is probably as good a time as any to back up and figure out exactly what `cacheCoins`' impact is on performance, for both this PR and posterity, so I'm going to benchmark\r\n1. a reindex to 550,000 with and without an in-memory UTXO cache, and then\r\n1. UTXO snapshot sync-to-tip with and without this changeset.\r\n\r\nI'll get back with some results in the next few days, and hopefully will write up an elucidation on where exactly CCoinsViewCache does or doesn't provide benefit.\r\n\r\n(Though I wonder how cross-platform differences beyond SSD-or-not play into this, e.g. the cache may or may not show importance based on leveldb's use of mmap & `max_open_files`, which is particularly relevant on Win32.)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555613237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555967785",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-555967785",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 555967785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk2Nzc4NQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-20T11:42:31Z",
    "updated_at": "2019-11-20T11:42:39Z",
    "author_association": "MEMBER",
    "body": "> the cache may or may not show importance based on leveldb's use of mmap & max_open_files, which is particularly relevant on Win32\r\n\r\nFWIW, #17398 adds leveldb mmap support on Windows, might want to try with and without that PR  when doing benchmarking on Windows.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555967785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557226923",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557226923",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 557226923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzIyNjkyMw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T19:04:15Z",
    "updated_at": "2019-11-21T19:04:15Z",
    "author_association": "MEMBER",
    "body": "After benching, I stand by this change as being significantly useful. I compare HEAD of the assumeutxo parent PR ([`utxo-dumpload-compressed`](https://github.com/jamesob/bitcoin/tree/utxo-dumpload-compressed)) to a branch of it which drops use of the `erase=false` parameter, erasing the coins after snapshot load ([`bench/au.no-erase`](https://github.com/jamesob/bitcoin/tree/bench/au.no-erase), [changes](https://github.com/jamesob/bitcoin/commit/85a73a074389c80c09e2acc877f45e06ab3f5976)). The benchmark compares the time taken to sync to block 604,667 after loading a snapshot taken at height 600,000.\r\n\r\nThe result is a significant degradation in performance on spinning disk hosts (4.5 hours vs. 1.5 hours) - see the `bench-hdd-3` results. There is a modest but probably negligible degradation on SSD hosts.\r\n\r\n```\r\nhost         tag                      time       time% maxmem  cpu%  dbcache\r\nbench-ssd-4  bench/au.no-erase        47:42.80   1.00  6689.85MB 125%  5000MB\r\nbench-ssd-4  bench/au.no-erase        44:15.66   0.93  6560.45MB 136%  5000MB\r\nbench-ssd-4  utxo-dumpload-compressed 40:13.30   0.84  6662.75MB 149%  5000MB\r\nbench-ssd-4  utxo-dumpload-compressed 41:36.01   0.87  6652.87MB 143%  5000MB\r\n\r\nbench-ssd-5  bench/au.no-erase        41:33.65   0.95  6754.54MB 144%  5000MB\r\nbench-ssd-5  bench/au.no-erase        41:32.42   0.95  6561.39MB 145%  5000MB\r\nbench-ssd-5  utxo-dumpload-compressed 43:51.50   1.00  6758.98MB 135%  5000MB\r\nbench-ssd-5  utxo-dumpload-compressed 36:39.94   0.84  6649.31MB 162%  5000MB\r\n\r\nbench-hdd-3  utxo-dumpload-compressed 1:47:08    0.38  6654.23MB 57%   5000MB\r\nbench-hdd-3  utxo-dumpload-compressed 1:30:48    0.32  6612.49MB 66%   5000MB\r\nbench-hdd-3  bench/au.no-erase        4:24:53    0.93  6578.77MB 23%   5000MB\r\nbench-hdd-3  bench/au.no-erase        4:45:29    1.00  6583.10MB 21%   5000MB\r\n```\r\n\r\nThis benchmark is reproducible by running [this script](https://github.com/chaincodelabs/bitcoinperf/blob/master/bin/run_remote.py#L147-L183):\r\n```sh\r\n./bin/run_remote.py au --hosts [hostnames ...]\r\n```\r\n\r\nI'll add tests to make sure this change works as-advertised, but I think it's pretty clearly a useful option for us to have. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557226923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557239614",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557239614",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 557239614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzIzOTYxNA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T19:37:10Z",
    "updated_at": "2019-11-21T19:37:10Z",
    "author_association": "MEMBER",
    "body": "@sdaftuar just pointed out to me that this code is very wrong - because I don't wipe the flags of flushed coins, this code ends up with an incorrect on-disk UTXO set (since a coin with the `FRESH` flag will only be removed from the in-memory cache and the delete will not propagate to leveldb). Going to fix this bug and reevaluate and pledge to never doubt Suhas' benchmarks again.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557239614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557240133",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557240133",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 557240133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzI0MDEzMw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T19:38:38Z",
    "updated_at": "2019-11-21T19:38:38Z",
    "author_association": "MEMBER",
    "body": "(FWIW @Sjors wins Employee of the Month for spotting this bug in a previous comment.)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557240133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557505590",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557505590",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 557505590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzUwNTU5MA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T11:59:21Z",
    "updated_at": "2019-11-22T12:03:47Z",
    "author_association": "MEMBER",
    "body": "Took me a while to understand what you're doing here. To rephrase in my own words: when you load the snapshot from disk you end up with a coin cache at e.g. 600,000. Depending on the users dbcache setting, part of this is already in RAM, which is potentially nice when continuing IBD.\r\n\r\nhttps://github.com/jamesob/bitcoin/commit/85a73a074389c80c09e2acc877f45e06ab3f5976#diff-24efdb00bfbe56b140fb006b562cc70bL5514-L5530\r\n\r\nIf -dbcache is less than the size of the snapshot, the only the most recent (?) coins of the snapshot will in RAM, the rest would already have been flushed. This is probably similar to what happens during a normal IBD when dbcache overflows. (we could use some heuristics to sort coins by life expectancy)\r\n\r\nFor some reason (why?) you need to flush at the end of loading the snapshot, which normally means no coins are in RAM. This PR changes that last flush to keep stuff around.\r\n\r\nIIUC the main benefit of this cache is to reduce the number of unnecessary writes, i.e. when a coin is created and then destroyed we save 2 disk writes. But when we flush, even without deleting the coins from RAM, we expect 1 write if the coin is spent before the tip, otherwise no write.\r\n\r\nLooking forward to the new benchmark. I suggest doing this with a ~1 month old snapshot (realistic for users who download immediately after a 1 month release candidates) and a 4 month old snapshot (the average age if we ship every 6 months).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557505590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557595582",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557595582",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 557595582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzU5NTU4Mg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T16:16:53Z",
    "updated_at": "2019-11-22T16:16:53Z",
    "author_association": "MEMBER",
    "body": "I'm surprised to report that even after fixing the (consensus!) bug that @Sjors and @sdaftuar pointed out, this change still shows considerable improvement for the assumeutxo snapshot-load use. We're still seeing 3x reduction in time with this change applied for spinning disks while doing a from-600k snapshot IBD.\r\n\r\n```\r\nhost         tag                      time       time% maxmem  cpu%  dbcache\r\nbench-ssd-4  utxo-dumpload-compressed 31:48.95   0.70  6787.93MB 179%  5000MB\r\nbench-ssd-4  utxo-dumpload-compressed 36:06.14   0.80  6689.20MB 157%  5000MB\r\nbench-ssd-4  bench/au.no-erase.1      43:21.22   0.96  6689.82MB 137%  5000MB\r\nbench-ssd-4  bench/au.no-erase.1      45:14.75   1.00  6739.20MB 131%  5000MB\r\n\r\nbench-ssd-5  utxo-dumpload-compressed 33:08.03   0.77  6787.14MB 172%  5000MB\r\nbench-ssd-5  utxo-dumpload-compressed 31:13.55   0.73  6731.26MB 182%  5000MB\r\nbench-ssd-5  bench/au.no-erase.1      42:49.74   1.00  6754.30MB 139%  5000MB\r\nbench-ssd-5  bench/au.no-erase.1      41:22.71   0.97  6557.05MB 144%  5000MB\r\n\r\nbench-hdd-3  bench/au.no-erase.1      4:34:00    0.98  6530.24MB 22%   5000MB\r\nbench-hdd-3  bench/au.no-erase.1      4:39:21    1.00  6562.12MB 21%   5000MB\r\nbench-hdd-3  utxo-dumpload-compressed 1:30:11    0.32  6736.32MB 63%   5000MB\r\nbench-hdd-3  utxo-dumpload-compressed 1:33:19    0.33  6702.03MB 61%   5000MB\r\n```\r\n[(host specs here)](https://gist.github.com/jamesob/012154e6c1c0ac893dc602fadfdd5f1d)\r\n\r\nApplying @sdaftuar's fix ([here](https://github.com/jamesob/bitcoin/commit/6dbb76e5a254095effc776c07bf954bd7a874406) in `bench/au.no-erase.1`, and [here](https://github.com/jamesob/bitcoin/commit/352af3801da0c0a870e01df8e1926df36f40e572#diff-cd7b305fd4b4280f22ae88960e60398eR217-R229) in `utxo-dumpload-compressed`) I think actually improves runtime for the single `Flush(erase=false)` call that we make after finishing the snapshot load because now we're actually removing spent coins from `cacheCoins`, thus freeing up more cache space going into the IBD.\r\n\r\n---\r\n\r\n> For some reason (why?) you need to flush at the end of loading the snapshot, which normally means no coins are in RAM. This PR changes that last flush to keep stuff around.\r\n\r\nThanks for the nice summary, @Sjors. I'm not sure that we necessarily need to flush after loading the snapshot, but I figured it was prudent to ensure that we'd resume the snapshot-based sync even after an unclean shutdown - maybe it's better to just omit the `Flush()` call altogether after loading the snapshot?\r\n\r\nTangentially, @sdaftuar mentioned the other day a potential technique for partial flushes that may accomplish the kind of optimization that this branch and #15265 are aiming for. The idea would be to allocate some of the `cacheCoins` memory to a secondary data structure that would serve as an index into `cacheCoins`, allowing fast lookup by spentness and height of the in-memory coins. That way, on `FlushStateToDisk()` we could do a partial flush, only making disk writes for those coins which are either unspent and of a certain age *or* spent and on-disk. This would make use of the fact that most coins are very short-lived (see [figure 2](https://eprint.iacr.org/2019/611.pdf) in @adiabat's excellent utreexo paper).\r\n\r\nI think this is a promising idea and I'll be experimenting with it soon - though of course that's outside the scope of this PR. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557595582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557680581",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557680581",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 557680581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzY4MDU4MQ==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T20:22:55Z",
    "updated_at": "2019-11-22T20:24:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "What about using `Flush(erase=false)` for all periodic flushes after IBD? That way when running with a high enough `dbcache` a flush would never empty `cacheCoins`, which would surely improve performance. That's also the only real issue with #15218 .",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557680581/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561348373",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-561348373",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 561348373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTM0ODM3Mw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-03T20:42:54Z",
    "updated_at": "2019-12-03T20:42:54Z",
    "author_association": "MEMBER",
    "body": "I've pushed some test coverage for the new `erase` parameter (and more generally some explicit tests for coins cache behavior). Notably, the new test cases use `CCoinsViewDB` at the base of the cache structure, which isn't currently tested explicitly anywhere else in the unittest suite - though of course an instance lives at the heart of every `CChainState`.\r\n\r\nThroughout the course of writing (and debugging) the tests, I found yet another bug that had to do with `std::move`ing the coins in `CCoinsView::BatchWrite` even when `erase=false`, which was causing the `coin.out.scriptPubKey` to appear null in the child-most cache. This is just another testament to how tricky the coins cache code is to get right (as I was warned months ago by @sdaftuar). But that said, I feel pretty confident that this change is now correct.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561348373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561741590",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-561741590",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 561741590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTc0MTU5MA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-04T17:12:01Z",
    "updated_at": "2019-12-04T17:12:01Z",
    "author_association": "MEMBER",
    "body": "Latest round of benchmarks for the current tip of this branch continues to show good performance improvements for UTXO snapshot load, even on SSD. (same setup as https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-557595582)\r\n\r\n```\r\nhost         tag                      time       time% maxmem  cpu%  dbcache\r\nbench-ssd-4  bench/au.no-erase.1      43:27.79   0.98  6572.45MB 137%  5000MB\r\nbench-ssd-4  bench/au.no-erase.1      44:10.18   1.00  6690.36MB 135%  5000MB\r\nbench-ssd-4  utxo-dumpload.54         32:59.07   0.75  6733.55MB 173%  5000MB\r\nbench-ssd-4  utxo-dumpload.54         33:19.00   0.75  6725.27MB 171%  5000MB\r\n\r\nbench-ssd-5  utxo-dumpload.54         31:32.39   0.60  6769.57MB 182%  5000MB\r\nbench-ssd-5  utxo-dumpload.54         31:11.39   0.60  6699.07MB 183%  5000MB\r\nbench-ssd-5  bench/au.no-erase.1      41:41.13   0.80  6772.39MB 142%  5000MB\r\nbench-ssd-5  bench/au.no-erase.1      52:16.76   1.00  6567.82MB 114%  5000MB\r\n\r\nbench-hdd-3  bench/au.no-erase.1      4:37:10    1.00  6569.48MB 21%   5000MB\r\nbench-hdd-3  bench/au.no-erase.1      4:36:03    1.00  6523.61MB 21%   5000MB\r\nbench-hdd-3  utxo-dumpload.54         1:30:22    0.33  6705.20MB 63%   5000MB\r\nbench-hdd-3  utxo-dumpload.54         1:36:20    0.35  6735.74MB 59%   5000MB\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561741590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562216092",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-562216092",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 562216092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjIxNjA5Mg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-05T16:53:34Z",
    "updated_at": "2019-12-05T16:53:34Z",
    "author_association": "MEMBER",
    "body": "I've split `Flush(bool erase)` into `Sync()` and `Flush()` as requested by @ryanofsky @MarcoFalke. ([changes](https://github.com/bitcoin/bitcoin/compare/1e68aad46ed122c85ed60e1529c6cf512bbefa86..eebaca7620bbd0af0ec385c6c7d47b2b4b524d55))",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562216092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578950782",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-578950782",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 578950782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODk1MDc4Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T21:02:00Z",
    "updated_at": "2020-01-27T21:02:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Review club notes: https://bitcoincore.reviews/17487.html",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578950782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579723127",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579723127",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 579723127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTcyMzEyNw==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T11:57:30Z",
    "updated_at": "2020-01-29T11:57:48Z",
    "author_association": "MEMBER",
    "body": "> Review club notes:\r\n\r\nPreparation notes; it's scheduled for ~Wednesday the 29th~ tonight, which explains why I couldn't find the minutes :-)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579723127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579838548",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579838548",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 579838548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTgzODU0OA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T16:23:17Z",
    "updated_at": "2020-01-29T16:23:17Z",
    "author_association": "MEMBER",
    "body": "> You may want to rebase, because without that on macOS I get errors during `make`:\r\n\r\nWith gcc (Debian 8.3.0-6) and `--enable-debug --enable-bench` eebaca7620bbd0af0ec385c6c7d47b2b4b524d55 builds and all tests are passing for me. Starting code review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579838548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579879560",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579879560",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 579879560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTg3OTU2MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T17:53:09Z",
    "updated_at": "2020-05-18T08:22:22Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Code review ACK of commit b2abb396c64e96585a0c38a269372b35cced08bd. The changes are straightforward and do not appear to change behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579879560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579887330",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-579887330",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 579887330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTg4NzMzMA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T18:09:56Z",
    "updated_at": "2020-01-29T18:09:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "PR title \"coins: allow Flush() without cache drop\" seems out of date. Would suggest something like \"coins: Add new unused CCoinsViewCache::Sync() method\"",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579887330/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/581137919",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-581137919",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 581137919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTEzNzkxOQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-02T13:55:30Z",
    "updated_at": "2020-02-02T13:55:30Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/581137919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587075723",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-587075723",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 587075723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzA3NTcyMw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-17T16:37:01Z",
    "updated_at": "2020-02-17T16:37:01Z",
    "author_association": "MEMBER",
    "body": "Thanks for the reviews, all. I'll address some of the nits if there's a need to rebase, otherwise I'm going for ACK-preservation at this point.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587075723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598830130",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-598830130",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 598830130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgzMDEzMA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T17:20:52Z",
    "updated_at": "2020-03-13T17:20:52Z",
    "author_association": "MEMBER",
    "body": "This has two ACKs on the latest branch (@jnewbery and @fjahr), but previous concept ACKs from @ryanofsky @jonatack @dongcarl @ariard , and other review comments from @Sjors @andrewtoth @MarcoFalke . What can we do to get this over the line?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598830130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629929852",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-629929852",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 629929852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTkyOTg1Mg==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T03:46:39Z",
    "updated_at": "2020-05-18T03:47:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "tested ACK 8bb1163805121b2863fef1c16c9b104803e8dfdd\r\nI've been running [this patch](https://github.com/andrewtoth/bitcoin/commit/e851e772197f10362818c7e38a7776ba03a71d48) on top of this branch for the last week to test non-erasing periodic flushes. I haven't had any issues.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629929852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631583791",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-631583791",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 631583791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTU4Mzc5MQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T16:27:53Z",
    "updated_at": "2020-05-20T16:27:53Z",
    "author_association": "MEMBER",
    "body": "Thanks for the feedback, all. I'll push some responses later today.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631583791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636870055",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-636870055",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 636870055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjg3MDA1NQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-01T13:46:16Z",
    "updated_at": "2020-06-01T13:46:16Z",
    "author_association": "MEMBER",
    "body": "re-utACK 8d5994ef2235c6706440bc18968006cd04c22fb4",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636870055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637156481",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-637156481",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 637156481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzE1NjQ4MQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-01T22:21:58Z",
    "updated_at": "2020-06-01T22:21:58Z",
    "author_association": "MEMBER",
    "body": "utACK 8d5994ef2235c6706440bc18968006cd04c22fb4",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637156481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638494243",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-638494243",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 638494243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQ5NDI0Mw==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T22:28:40Z",
    "updated_at": "2020-06-03T22:28:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "re-ACK 8d5994ef2235c6706440bc18968006cd04c22fb4",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638494243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667551597",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-667551597",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 667551597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzU1MTU5Nw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-01T15:53:54Z",
    "updated_at": "2020-08-01T15:53:54Z",
    "author_association": "MEMBER",
    "body": "[`au.coins-erase.7`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.7) -> [`au.coins-erase.8`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.8)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n% git range-diff master au.coins-erase.7 au.coins-erase.8\r\n\r\n1:  8b9b51da04 ! 1:  58616e0b8b coins: add Sync() method to allow flush without cacheCoins drop\r\n    @@ -187,7 +187,7 @@\r\n\r\n     -bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\r\n     +bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase) {\r\n    -     CDBBatch batch(db);\r\n    +     CDBBatch batch(*m_db);\r\n          size_t count = 0;\r\n          size_t changed = 0;\r\n     @@\r\n    @@ -199,7 +199,7 @@\r\n     +        it = erase ? mapCoins.erase(it) : ++it;\r\n              if (batch.SizeEstimate() > batch_size) {\r\n                  LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\r\n    -             db.WriteBatch(batch);\r\n    +             m_db->WriteBatch(batch);\r\n\r\n      diff --git a/src/txdb.h b/src/txdb.h\r\n      --- a/src/txdb.h\r\n2:  09ef24a814 = 2:  48d3e92b06 test: refactor: clarify the coins simulation\r\n3:  c50373bfb7 = 3:  7239b0cee5 test: add use of Sync() to coins tests\r\n4:  8d5994ef22 = 4:  0292b01cc4 test: add test for coins view flush behavior using Sync()\r\n```\r\n\r\n</details>\r\n\r\nThis PR has gotten substantial review, testing, and ACK from a number of people (@andrewtoth, @jnewbery, @jonatack, @Sjors) but personally I would appreciate evaluation for at least a Concept ACK from someone who has a lot of experience in the coins department (e.g. @sipa, @sdaftuar, @ryanofsky) before this moves forward.\r\n\r\nTo reiterate, this has shown to be noticeably helpful when loading UTXO snapshots with assumeutxo and can potentially help shave some time off ConnectBlock (https://github.com/bitcoin/bitcoin/pull/18941#issuecomment-633684774 cc @andrewtoth). But I don't want to push a string here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667551597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667582030",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-667582030",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 667582030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzU4MjAzMA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-01T20:18:04Z",
    "updated_at": "2020-08-01T20:18:04Z",
    "author_association": "MEMBER",
    "body": "[`au.coins-erase.8`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.8) -> [`au.coins-erase.9`](https://github.com/jamesob/bitcoin/tree/au.coins-erase.9)\r\n\r\n<details><summary><code>$ git range-diff master au.coins-erase.8 au.coins-erase.9</code></summary>\r\n\r\n```diff\r\n1:  58616e0b8b ! 1:  47d71fdb70 coins: add Sync() method to allow flush without cacheCoins drop\r\n    @@ -154,7 +154,7 @@\r\n\r\n     +    /**\r\n     +     * Push the modifications applied to this cache to its base while retaining\r\n    -+     * the contents of this cache (except for FRESH spent coins, which we erase).\r\n    ++     * the contents of this cache (except for spent coins, which we erase).\r\n     +     * Failure to call this method or Flush() before destruction will cause the changes\r\n     +     * to be forgotten.\r\n     +     * If false is returned, the state of this cache (and its backing view) will be undefined.\r\n    @@ -196,7 +196,7 @@\r\n              count++;\r\n     -        CCoinsMap::iterator itOld = it++;\r\n     -        mapCoins.erase(itOld);\r\n    -+        it = erase ? mapCoins.erase(it) : ++it;\r\n    ++        it = erase ? mapCoins.erase(it) : std::next(it);\r\n              if (batch.SizeEstimate() > batch_size) {\r\n                  LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\r\n                  m_db->WriteBatch(batch);\r\n2:  48d3e92b06 = 2:  342ef935c4 test: refactor: clarify the coins simulation\r\n3:  7239b0cee5 = 3:  77897654a5 test: add use of Sync() to coins tests\r\n4:  0292b01cc4 = 4:  f4b56059b4 test: add test for coins view flush behavior using Sync()\r\n```\r\n\r\n</details>\r\n\r\nAddressed feedback from @sipa (thanks).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667582030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832916004",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#issuecomment-832916004",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17487",
    "id": 832916004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjkxNjAwNA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-05T18:33:03Z",
    "updated_at": "2021-05-05T18:33:03Z",
    "author_association": "MEMBER",
    "body": "I was able to rebase f4b5605 on master and run the test. Difference with my previous utACK seems trivial, but I haven't re-reviewed it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832916004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346960653",
    "pull_request_review_id": 317801224,
    "id": 346960653,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Njk2MDY1Mw==",
    "diff_hunk": "@@ -144,8 +144,15 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n }\n \n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = mapCoins.erase(it)) {\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn, bool erase) {\n+    auto iter_fnc = [&mapCoins, erase](CCoinsMap::iterator it) {\n+        if (erase) {\n+            return mapCoins.erase(it);\n+        } else {\n+            return it++;\n+        }\n+    };",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "bd44f51d790edc07b7e1224e0f8bfce4252c74d5",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could use the ternary operator instead for less code and no captures?\r\n\r\n```cpp\r\nfor ( ... ; it = erase ? mapCoins.erase(it) : ++it) {",
    "created_at": "2019-11-15T18:45:55Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r346960653",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346960653"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r346960653"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346960653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346999363",
    "pull_request_review_id": 317853720,
    "id": 346999363,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Njk5OTM2Mw==",
    "diff_hunk": "@@ -275,7 +275,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Failure to call this method before destruction will cause the changes to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n      */\n-    bool Flush();\n+    bool Flush(bool clear_cache = true);",
    "path": "src/coins.h",
    "position": null,
    "original_position": 32,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "bd44f51d790edc07b7e1224e0f8bfce4252c74d5",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Isn't passing the argument explicitly better than with a default one? Also it's worthy to extend method comment a bit with effect of argument on cache.",
    "created_at": "2019-11-15T20:30:51Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r346999363",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346999363"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r346999363"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346999363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 278,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353418761",
    "pull_request_review_id": 326444938,
    "id": 353418761,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzQxODc2MQ==",
    "diff_hunk": "@@ -202,10 +202,24 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n     return true;\n }\n \n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    cacheCoins.clear();\n-    cachedCoinsUsage = 0;\n+bool CCoinsViewCache::Flush(bool clear_cache) {\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ clear_cache);\n+    if (clear_cache) {\n+        cacheCoins.clear();\n+        cachedCoinsUsage = 0;\n+    } else {\n+        // Instead of clearing the cache, just clear the FRESH/DIRTY\n+        // flags, and erase any spent coins\n+        for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "1e68aad46ed122c85ed60e1529c6cf512bbefa86",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it true that this loop is very slow with high dbcache? If so, a comment would be appropriate.\r\n\r\nOther than that I also agree with @ryanofsky comment to have \"separate methods like Flush() and Sync() or Flush() and Write()\". As a rule of thumb, if two functions have a completely different implementation, they should not be bundled in one and switched by a boolean.",
    "created_at": "2019-12-03T21:00:29Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r353418761",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353418761"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r353418761"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353418761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 213,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353872539",
    "pull_request_review_id": 327012115,
    "id": 353872539,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzg3MjUzOQ==",
    "diff_hunk": "@@ -202,10 +202,24 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n     return true;\n }\n \n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    cacheCoins.clear();\n-    cachedCoinsUsage = 0;\n+bool CCoinsViewCache::Flush(bool clear_cache) {\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ clear_cache);\n+    if (clear_cache) {\n+        cacheCoins.clear();\n+        cachedCoinsUsage = 0;\n+    } else {\n+        // Instead of clearing the cache, just clear the FRESH/DIRTY\n+        // flags, and erase any spent coins\n+        for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "1e68aad46ed122c85ed60e1529c6cf512bbefa86",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In my own benchmarking, I haven't seen anything to support the notion that this loop takes a long time. In the newest benchmarks (to be posted), calling `Flush(erase=true)` on a cache of size 3826 MB takes **7:17** and calling `Flush(erase=false)` on a cache of the same size takes **6:03** so the difference is either negligible or favorable. \r\n\r\nI got the times by subtracting timestamps from the last and second-to-last loglines below for each branch during snapshot activation.\r\n\r\n### Before this change\r\n```\r\n2019-12-03T23:18:26Z [snapshot] 63000000 coins loaded (99.39%, 3826 MB)\r\n2019-12-03T23:18:26Z [snapshot] loaded 63389760 (3877 MB) coins from snapshot 00000000000000000007316856900e76b4f7a9139cfbfba89842c8d196cd5f91\r\n2019-12-03T23:18:26Z [snapshot] flushing snapshot chainstate to disk\r\n2019-12-03T23:25:43Z [snapshot] validated snapshot (592 MB)\r\n```\r\n\r\n### After this change\r\n```\r\n2019-12-03T23:48:09Z [snapshot] 63000000 coins loaded (99.39%, 3826 MB)\r\n2019-12-03T23:48:10Z [snapshot] loaded 63389760 (3877 MB) coins from snapshot 00000000000000000007316856900e76b4f7a9139cfbfba89842c8d196cd5f91\r\n2019-12-03T23:48:10Z [snapshot] flushing snapshot chainstate to disk\r\n2019-12-03T23:54:13Z [snapshot] validated snapshot (3877 MB)\r\n```\r\n\r\n---\r\n\r\nI'll make the Flush() + Sync() change.",
    "created_at": "2019-12-04T17:10:23Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r353872539",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353872539"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r353872539"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353872539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 213,
    "side": "RIGHT",
    "in_reply_to_id": 353418761
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372353051",
    "pull_request_review_id": 350067640,
    "id": 372353051,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1MzA1MQ==",
    "diff_hunk": "@@ -150,9 +150,16 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             bool test_havecoin_after = InsecureRandBits(2) == 0;\n \n             bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n-            const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+\n+            // Infrequently, test usage of AccessByTxid instead of AccessCoin - the\n+            // former just delegates to the latter and returns the first unspent in a txn.",
    "path": "src/test/coins_tests.cpp",
    "position": 35,
    "original_position": 7,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "640861a52a7d2ad6f9f1242946ad43ba20e8a9d7",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If `COutPoint(txid, 0)` doesn't exist and `COutPoint(txid, 0)` does, then `AccessByTxid` will randomly behave different from `AccessCoin`. But the coins are random anyway.",
    "created_at": "2020-01-29T12:26:12Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372353051",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372353051"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372353051"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372353051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 160,
    "original_line": 160,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372393219",
    "pull_request_review_id": 350067640,
    "id": 372393219,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5MzIxOQ==",
    "diff_hunk": "@@ -223,14 +223,18 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && InsecureRandBool() == 0) {\n                 unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n-                BOOST_CHECK(stack[flushIndex]->Flush());\n+                bool should_erase = InsecureRandRange(4) < 3;\n+                BOOST_CHECK(should_erase ? stack[flushIndex]->Flush() : stack[flushIndex]->Sync());\n+                flushed_without_erase |= !should_erase;\n             }\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 //Remove the top cache\n-                BOOST_CHECK(stack.back()->Flush());\n+                bool should_erase = InsecureRandRange(4) < 3;",
    "path": "src/test/coins_tests.cpp",
    "position": 96,
    "original_position": 43,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "b12c4b092de159a38342fb7069cd1903bf5ce680",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Comment above should be \"Flush or sync the top cache\". Are you sure this test is working as advertised? What does `delete stack.back();` and  `stack.pop_back();` do here? Making them conditional doesn't break the test.",
    "created_at": "2020-01-29T13:52:42Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372393219",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372393219"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372393219"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372393219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 242,
    "original_line": 242,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372404143",
    "pull_request_review_id": 350067640,
    "id": 372404143,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwNDE0Mw==",
    "diff_hunk": "@@ -878,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: \"either ... and\"?",
    "created_at": "2020-01-29T14:12:52Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372404143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372404143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372404143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372404143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 909,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372525830",
    "pull_request_review_id": 350291630,
    "id": 372525830,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyNTgzMA==",
    "diff_hunk": "@@ -150,9 +150,16 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             bool test_havecoin_after = InsecureRandBits(2) == 0;\n \n             bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n-            const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+\n+            // Infrequently, test usage of AccessByTxid instead of AccessCoin - the\n+            // former just delegates to the latter and returns the first unspent in a txn.",
    "path": "src/test/coins_tests.cpp",
    "position": 35,
    "original_position": 7,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "640861a52a7d2ad6f9f1242946ad43ba20e8a9d7",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Schr\u00f6dinger's `COutPoint(txid, 0)`? :P",
    "created_at": "2020-01-29T17:30:53Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372525830",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372525830"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r372525830"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372525830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 160,
    "original_line": 160,
    "side": "RIGHT",
    "in_reply_to_id": 372353051
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377374863",
    "pull_request_review_id": 356335551,
    "id": 377374863,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3NDg2Mw==",
    "diff_hunk": "@@ -203,12 +203,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);",
    "path": "src/coins.cpp",
    "position": 74,
    "original_position": 60,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is simply copying the pattern of `Flush()`, but `BatchWrite()` never returns `false`, so this parameter does nothing. I think all three functions should be cleaned up to not return anything so that the calling pattern is clear, but that can be done in a follow-up PR.",
    "created_at": "2020-02-10T23:18:05Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377374863",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377374863"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377374863"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377374863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 245,
    "original_line": 245,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377375703",
    "pull_request_review_id": 356335551,
    "id": 377375703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3NTcwMw==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: \"Hack to allow flushing\" isn't very illuminating. Perhaps \"A cache's hashBlock must be filled before flushing to disk. That's normally done in connect/disconnect block. Do it manually here\"",
    "created_at": "2020-02-10T23:20:36Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377375703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377375703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377375703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377375703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 936,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377375875",
    "pull_request_review_id": 356335551,
    "id": 377375875,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3NTg3NQ==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 245,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I don't think pruned is the right terminolgy, but this can be cleaned up with all the rest in a future PR.",
    "created_at": "2020-02-10T23:21:08Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377375875",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377375875"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377375875"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377375875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1010,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377376396",
    "pull_request_review_id": 356335551,
    "id": 377376396,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3NjM5Ng==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, PRUNED);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH coin is deleted by Sync()",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 285,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this should say \"ensure that a FRESH spent coin is deleted by Sync()\". If the coin is FRESH but not spent, then a `Sync()` won't delete it.",
    "created_at": "2020-02-10T23:22:39Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377376396",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377376396"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377376396"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377376396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1050,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377376708",
    "pull_request_review_id": 356335551,
    "id": 377376708,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3NjcwOA==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, PRUNED);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH coin is deleted by Sync()\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    // Add and spend from same cache without flushing.\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+\n+    // Coin should be FRESH in the cache.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // Base shouldn't have seen coin.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    BOOST_CHECK(all_caches[0]->SpendCoin(outp));\n+    all_caches[0]->Sync();\n+\n+    // Ensure there is no sign of the coin after spend/flush.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, ABSENT);\n+    BOOST_CHECK_EQUAL(flags, NO_ENTRY);",
    "path": "src/test/coins_tests.cpp",
    "position": 306,
    "original_position": 311,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I don't think we need these three lines. Just checking that `HaveCoinInCache()` fails is enough to show that the coin doesn't exist in the cache.",
    "created_at": "2020-02-10T23:23:39Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377376708",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377376708"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r377376708"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377376708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1076,
    "original_start_line": 1058,
    "start_side": "RIGHT",
    "line": 1078,
    "original_line": 1078,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379682087",
    "pull_request_review_id": 359265516,
    "id": 379682087,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MjA4Nw==",
    "diff_hunk": "@@ -878,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();",
    "path": "src/test/coins_tests.cpp",
    "position": 167,
    "original_position": 63,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I like the naming destinction between `Sync()` and `Flush()` in the code because it made it easier to parse and that naming could have been used more here in the test as well. Now the destinction it is kind of hidden behind this `do_erasing_flush` parameter.  There could have been a `sync_all` helper method for example. But it's probably not worth the effort of changing now.",
    "created_at": "2020-02-14T23:00:56Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r379682087",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379682087"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r379682087"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379682087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 939,
    "original_line": 939,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379689269",
    "pull_request_review_id": 359265516,
    "id": 379689269,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4OTI2OQ==",
    "diff_hunk": "@@ -203,12 +203,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);\n+    // Instead of clearing the cache, just clear the FRESH/DIRTY",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "b2abb396c64e96585a0c38a269372b35cced08bd",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: If I look at this comment outside of the context of this PR \"Instead of clearing the cache\" might not make much sense because there is no cache clearing going on inside of this function and the relation to `Flush()` may not be immediately clear.",
    "created_at": "2020-02-14T23:33:25Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r379689269",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379689269"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r379689269"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379689269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 226,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402037193",
    "pull_request_review_id": 386091788,
    "id": 402037193,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNzE5Mw==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is the `std::move` gain really worth the added code complexity here?",
    "created_at": "2020-04-02T03:52:16Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r402037193",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402037193"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r402037193"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402037193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402040674",
    "pull_request_review_id": 386095540,
    "id": 402040674,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MDY3NA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This has no effect, I think. All std::move does is cast to an rvalue reference. The ternary operator merges it back to the same type with the other branch.",
    "created_at": "2020-04-02T04:08:04Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r402040674",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402040674"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r402040674"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402040674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403710128",
    "pull_request_review_id": 387825369,
    "id": 403710128,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxMDEyOA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is indeed required. Try recompiling without this change and running the coins tests (`./src/test/test_bitcoin -t coins_tests`).\r\n\r\nThe std::move is necessary to erase the contents of the map being written to the parent.",
    "created_at": "2020-04-05T14:33:52Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403710128",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403710128"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403710128"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403710128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403738538",
    "pull_request_review_id": 387846183,
    "id": 403738538,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczODUzOA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jamesob The `std::move` here has no effect; it is equivalent to `entry.coin = it->second.coin`. If you want to conditionally move, you need two separate statements.",
    "created_at": "2020-04-05T18:20:33Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403738538",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403738538"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403738538"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403738538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403740488",
    "pull_request_review_id": 387847780,
    "id": 403740488,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0MDQ4OA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Did you actually try recompiling with your suggested change and running the tests? The result on my platform (`gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0`) is failure.",
    "created_at": "2020-04-05T18:37:43Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403740488",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403740488"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403740488"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403740488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403742681",
    "pull_request_review_id": 387849448,
    "id": 403742681,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0MjY4MQ==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jamesob It sounds like you're relying on the side effect of the moved-from object being cleared or something, but AFAIK it is in fact left in an undefined state...\r\n\r\nProbably should just copy and explicitly clear.",
    "created_at": "2020-04-05T18:56:44Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403742681",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403742681"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403742681"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403742681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743080",
    "pull_request_review_id": 387849763,
    "id": 403743080,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0MzA4MA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems I'm wrong; your code is correct.\r\n\r\nApparently what happens in this case is that a temporary variable is created, which `it->second.coin` is either copied or moved to (depending on `erase`), and then that temporary variable is move-assigned to `entry.coin`. This has the desired effect, though there is possibly an unnecessary (but cheap) move.\r\n\r\nIf you write it as\r\n\r\n```c++\r\nif (erase) {\r\n    entry.coin = std::move(it->second.coin);\r\n} else {\r\n    entry.coin = it->second.coin;\r\n}\r\n```\r\n\r\nI think you get the same semantics, but without the additional move.",
    "created_at": "2020-04-05T19:00:17Z",
    "updated_at": "2020-08-01T20:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743080",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743080"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743080"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743513",
    "pull_request_review_id": 387850119,
    "id": 403743513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0MzUxMw==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@luke-jr Well, the only member with move semantics is CScript, which is a prevector, and move assigning is well defined (it's in our own code), namely swapping.",
    "created_at": "2020-04-05T19:04:11Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743776",
    "pull_request_review_id": 387850351,
    "id": 403743776,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0Mzc3Ng==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Abstractly, it is undefined, and `std::move` AFAIK does not guarantee move assignment, only allows it?",
    "created_at": "2020-04-05T19:06:35Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743776",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743776"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403743776"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403743776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403744322",
    "pull_request_review_id": 387850787,
    "id": 403744322,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NDMyMg==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@luke-jr `std::move` just casts to an rvalue reference, nothing else. It's up to the involved classes to define what to do when assigned with or constructed from an rvalue.\r\n\r\nThe standard also defines what standard library classes do in this case: moved-from objects are in a valid but unspecified state (which means that you're only allowed to run operations on them that have no preconditions; e.g. empty() on them or assigning to them is ok).\r\n\r\nHowever, no standard library classes are involved here, so it doesn't apply.\r\n\r\nI agree with you insofar that if the desired effect is clearing, the code should just explicitly clear (potentially after a move, if that's more efficient). But it isn't UB to rely on the rvalue semantics of a class we defined ourselves.",
    "created_at": "2020-04-05T19:11:26Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403744322",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403744322"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r403744322"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403744322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427429354",
    "pull_request_review_id": 414611820,
    "id": 427429354,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTM1NA==",
    "diff_hunk": "@@ -214,12 +214,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);\n+    // Instead of clearing the cache, just clear the FRESH/DIRTY\n+    // flags, and erase any spent coins\n+    for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {\n+        it->second.flags = 0;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8bb1163805121b2863fef1c16c9b104803e8dfdd",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: it seems a bit odd to clear the flags immediately before deleting in the case where the coin is spent. If you retouch this PR, the flag clearing can be moved into the else branch below.\r\n\r\nYou might also want to update the comment to reflect that change: \"Erase any spent coins and clear the FRESH/DIRTY flags for unspent coins\".",
    "created_at": "2020-05-19T16:18:00Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427429354",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427429354"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427429354"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427429354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 229,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427435879",
    "pull_request_review_id": 414611820,
    "id": 427435879,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNTg3OQ==",
    "diff_hunk": "@@ -116,7 +116,9 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        if (erase) {",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8bb1163805121b2863fef1c16c9b104803e8dfdd",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I think it'd be clearer to avoid this use-once local variable by using the same pattern that you used in coins.cpp:\r\n\r\n```\r\nit = erase ? mapCoins.erase(it) : ++it;\r\n```",
    "created_at": "2020-05-19T16:27:41Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427435879",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427435879"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427435879"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427435879/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427454512",
    "pull_request_review_id": 414643354,
    "id": 427454512,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1NDUxMg==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I like sipa's alternative.\r\n\r\nFWIW I also get a flood of errors when using `entry.coin = std::move(it->second.coin);` with `erase = false`. Conversely if I drop `std::move` it works fine, but I haven't looked at performance. In other words, we're not depending on some side-effect `std::move`, it's just a performance enhancer. ",
    "created_at": "2020-05-19T16:55:49Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427454512",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427454512"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427454512"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427454512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427508528",
    "pull_request_review_id": 414643354,
    "id": 427508528,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwODUyOA==",
    "diff_hunk": "@@ -214,12 +214,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);\n+    // Instead of clearing the cache, just clear the FRESH/DIRTY\n+    // flags, and erase any spent coins\n+    for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {\n+        it->second.flags = 0;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8bb1163805121b2863fef1c16c9b104803e8dfdd",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agreed. In addition, let's not assume there won't be new flags in the future, so maybe clear the `FRESH/DIRTY` flags explicitly with an `=&`?",
    "created_at": "2020-05-19T18:21:24Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427508528",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427508528"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427508528"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427508528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 229,
    "side": "RIGHT",
    "in_reply_to_id": 427429354
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427509760",
    "pull_request_review_id": 414643354,
    "id": 427509760,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwOTc2MA==",
    "diff_hunk": "@@ -297,12 +297,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool SpendCoin(const COutPoint &outpoint, Coin* moveto = nullptr);\n \n     /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * Push the modifications applied to this cache to its base and wipe local state.\n+     * Failure to call this method or Sync() before destruction will cause the changes\n+     * to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n      */\n     bool Flush();\n \n+    /**\n+     * Push the modifications applied to this cache to its base while retaining\n+     * the contents of this cache.",
    "path": "src/coins.h",
    "position": null,
    "original_position": 42,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "d5f4f7bcdb5e18702fcdcbaff922ce9c8f9f5654",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `* the contents of this cache except for FRESH spent coins.`",
    "created_at": "2020-05-19T18:23:34Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427509760",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427509760"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427509760"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427509760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 309,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427512576",
    "pull_request_review_id": 414643354,
    "id": 427512576,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxMjU3Ng==",
    "diff_hunk": "@@ -116,7 +116,9 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        if (erase) {",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8bb1163805121b2863fef1c16c9b104803e8dfdd",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does this need an exception, to always delete `FRESH` spent coins? Or those can't exist at this level? ",
    "created_at": "2020-05-19T18:28:26Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427512576",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427512576"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427512576"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427512576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 427435879
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427517198",
    "pull_request_review_id": 414643354,
    "id": 427517198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzE5OA==",
    "diff_hunk": "@@ -168,24 +175,29 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n                 Coin newcoin;\n                 newcoin.out.nValue = InsecureRand32();\n                 newcoin.nHeight = 1;\n+\n+                // Infrequently test adding unspendable coins.\n                 if (InsecureRandRange(16) == 0 && coin.IsSpent()) {\n                     newcoin.out.scriptPubKey.assign(1 + InsecureRandBits(6), OP_RETURN);\n                     BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\n                     added_an_unspendable_entry = true;\n                 } else {\n-                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 0); // Random sizes so we can test memory usage accounting\n+                    // Random sizes so we can test memory usage accounting\n+                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 1);",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "f2abc6338204c8f593fb4d1c7d220270b7171b35",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why did you switch the second argument of `assign` to `1`?",
    "created_at": "2020-05-19T18:36:17Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427517198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427517198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427517198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427517198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427525125",
    "pull_request_review_id": 414643354,
    "id": 427525125,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTEyNQ==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "[nit bump](https://github.com/bitcoin/bitcoin/pull/17487/commits/8bb1163805121b2863fef1c16c9b104803e8dfdd#r377375703)",
    "created_at": "2020-05-19T18:49:26Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427525125",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427525125"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427525125"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427525125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 936,
    "side": "RIGHT",
    "in_reply_to_id": 377375703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427526583",
    "pull_request_review_id": 414643354,
    "id": 427526583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNjU4Mw==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, PRUNED);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH coin is deleted by Sync()",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 285,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "[nit bump](https://github.com/bitcoin/bitcoin/pull/17487/commits/8bb1163805121b2863fef1c16c9b104803e8dfdd#r377376396)",
    "created_at": "2020-05-19T18:51:55Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427526583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427526583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r427526583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427526583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1050,
    "side": "RIGHT",
    "in_reply_to_id": 377376396
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432012334",
    "pull_request_review_id": 420347257,
    "id": 432012334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMjMzNA==",
    "diff_hunk": "@@ -223,14 +223,18 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && InsecureRandBool() == 0) {\n                 unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n-                BOOST_CHECK(stack[flushIndex]->Flush());\n+                bool should_erase = InsecureRandRange(4) < 3;\n+                BOOST_CHECK(should_erase ? stack[flushIndex]->Flush() : stack[flushIndex]->Sync());\n+                flushed_without_erase |= !should_erase;\n             }\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 //Remove the top cache\n-                BOOST_CHECK(stack.back()->Flush());\n+                bool should_erase = InsecureRandRange(4) < 3;",
    "path": "src/test/coins_tests.cpp",
    "position": 96,
    "original_position": 43,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "b12c4b092de159a38342fb7069cd1903bf5ce680",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, the point is to exercise cases where we do delete/pop parts of the cache stack - the test should pass in any case.",
    "created_at": "2020-05-28T17:43:04Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432012334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432012334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432012334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432012334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 242,
    "original_line": 242,
    "side": "RIGHT",
    "in_reply_to_id": 372393219
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432014219",
    "pull_request_review_id": 420349660,
    "id": 432014219,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNDIxOQ==",
    "diff_hunk": "@@ -150,9 +150,16 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             bool test_havecoin_after = InsecureRandBits(2) == 0;\n \n             bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n-            const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+\n+            // Infrequently, test usage of AccessByTxid instead of AccessCoin - the\n+            // former just delegates to the latter and returns the first unspent in a txn.",
    "path": "src/test/coins_tests.cpp",
    "position": 35,
    "original_position": 7,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "640861a52a7d2ad6f9f1242946ad43ba20e8a9d7",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand the original comment - is there a typo in one of your `COutPoint`s?",
    "created_at": "2020-05-28T17:46:24Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432014219",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432014219"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432014219"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432014219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 160,
    "original_line": 160,
    "side": "RIGHT",
    "in_reply_to_id": 372353051
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432015340",
    "pull_request_review_id": 420349660,
    "id": 432015340,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTM0MA==",
    "diff_hunk": "@@ -168,24 +175,29 @@ void SimulationTest(CCoinsView* base, bool fake_best_block)\n                 Coin newcoin;\n                 newcoin.out.nValue = InsecureRand32();\n                 newcoin.nHeight = 1;\n+\n+                // Infrequently test adding unspendable coins.\n                 if (InsecureRandRange(16) == 0 && coin.IsSpent()) {\n                     newcoin.out.scriptPubKey.assign(1 + InsecureRandBits(6), OP_RETURN);\n                     BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\n                     added_an_unspendable_entry = true;\n                 } else {\n-                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 0); // Random sizes so we can test memory usage accounting\n+                    // Random sizes so we can test memory usage accounting\n+                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 1);",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "f2abc6338204c8f593fb4d1c7d220270b7171b35",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good question... can't remember doing that. Will revert.",
    "created_at": "2020-05-28T17:48:24Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432015340",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432015340"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432015340"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432015340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT",
    "in_reply_to_id": 427517198
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432016064",
    "pull_request_review_id": 420349660,
    "id": 432016064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNjA2NA==",
    "diff_hunk": "@@ -878,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-05-28T17:49:51Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432016064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432016064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432016064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432016064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 909,
    "side": "RIGHT",
    "in_reply_to_id": 372404143
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017156",
    "pull_request_review_id": 420349660,
    "id": 432017156,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNzE1Ng==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 245,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-05-28T17:51:50Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017156",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017156"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017156"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1010,
    "side": "RIGHT",
    "in_reply_to_id": 377375875
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017479",
    "pull_request_review_id": 420349660,
    "id": 432017479,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNzQ3OQ==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, PRUNED);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH coin is deleted by Sync()",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 285,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-05-28T17:52:27Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017479",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017479"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017479"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1050,
    "side": "RIGHT",
    "in_reply_to_id": 377376396
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017919",
    "pull_request_review_id": 420349660,
    "id": 432017919,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNzkxOQ==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, PRUNED);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH coin is deleted by Sync()\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    // Add and spend from same cache without flushing.\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+\n+    // Coin should be FRESH in the cache.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // Base shouldn't have seen coin.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    BOOST_CHECK(all_caches[0]->SpendCoin(outp));\n+    all_caches[0]->Sync();\n+\n+    // Ensure there is no sign of the coin after spend/flush.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, ABSENT);\n+    BOOST_CHECK_EQUAL(flags, NO_ENTRY);",
    "path": "src/test/coins_tests.cpp",
    "position": 306,
    "original_position": 311,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm going to keep these in because I think it's worth being painfully explicit in coins tests.",
    "created_at": "2020-05-28T17:53:18Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017919",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017919"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432017919"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432017919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1076,
    "original_start_line": 1058,
    "start_side": "RIGHT",
    "line": 1078,
    "original_line": 1078,
    "side": "RIGHT",
    "in_reply_to_id": 377376708
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432026105",
    "pull_request_review_id": 420349660,
    "id": 432026105,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNjEwNQ==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Sjors please see above - we do rely on the `std::move` to clear the entry from the child cache, it isn't just a performance optimization. If you remove the `move`, the coins unittests will fail.\r\n\r\nThat said I agree it seems tricky to rely upon this behavior implicitly based upon classes we've define ourselves, but I haven't tested the performance implications of adding `mapCoins.erase(it)`. Given that I'm essentially leaving the behavior as it was before this change in the case of the `move`, and we have unittests that will catch a change in behavior here, I don't feel the need to add an explicit `erase()` call. I have however clarified the phrasing with an explicit if-else as @sipa suggests.",
    "created_at": "2020-05-28T18:08:19Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432026105",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432026105"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432026105"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432026105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432026636",
    "pull_request_review_id": 420349660,
    "id": 432026636,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNjYzNg==",
    "diff_hunk": "@@ -203,12 +203,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);\n+    // Instead of clearing the cache, just clear the FRESH/DIRTY",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "b2abb396c64e96585a0c38a269372b35cced08bd",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "rephrased",
    "created_at": "2020-05-28T18:09:20Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432026636",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432026636"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432026636"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432026636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 226,
    "side": "RIGHT",
    "in_reply_to_id": 379689269
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432027751",
    "pull_request_review_id": 420349660,
    "id": 432027751,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNzc1MQ==",
    "diff_hunk": "@@ -214,12 +214,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);\n+    // Instead of clearing the cache, just clear the FRESH/DIRTY\n+    // flags, and erase any spent coins\n+    for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {\n+        it->second.flags = 0;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8bb1163805121b2863fef1c16c9b104803e8dfdd",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-05-28T18:11:21Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432027751",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432027751"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432027751"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432027751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 229,
    "side": "RIGHT",
    "in_reply_to_id": 427429354
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432028244",
    "pull_request_review_id": 420349660,
    "id": 432028244,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyODI0NA==",
    "diff_hunk": "@@ -297,12 +297,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool SpendCoin(const COutPoint &outpoint, Coin* moveto = nullptr);\n \n     /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * Push the modifications applied to this cache to its base and wipe local state.\n+     * Failure to call this method or Sync() before destruction will cause the changes\n+     * to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n      */\n     bool Flush();\n \n+    /**\n+     * Push the modifications applied to this cache to its base while retaining\n+     * the contents of this cache.",
    "path": "src/coins.h",
    "position": null,
    "original_position": 42,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "d5f4f7bcdb5e18702fcdcbaff922ce9c8f9f5654",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-05-28T18:12:12Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432028244",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432028244"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432028244"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432028244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 309,
    "side": "RIGHT",
    "in_reply_to_id": 427509760
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432039014",
    "pull_request_review_id": 420349660,
    "id": 432039014,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzOTAxNA==",
    "diff_hunk": "@@ -116,7 +116,9 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        if (erase) {",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8bb1163805121b2863fef1c16c9b104803e8dfdd",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good suggestion, thanks! Fixed.\r\n\r\n`FRESH` spent coins won't exist here because they will have been removed from the child cache first - for proof of this note that nothing calls `CCoinsViewDB::BatchWrite()` aside from CCoinsViewCache, and `SpendCoin()` only exists on CCoinsViewCache instances.",
    "created_at": "2020-05-28T18:31:58Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432039014",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432039014"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432039014"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432039014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 427435879
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432067601",
    "pull_request_review_id": 420419755,
    "id": 432067601,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NzYwMQ==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> If you remove the move, the coins unittests will fail.\r\n\r\nOdd, I tried that. Will try again.",
    "created_at": "2020-05-28T19:25:01Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432067601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432067601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432067601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432067601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432088620",
    "pull_request_review_id": 420447855,
    "id": 432088620,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4ODYyMA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Odd, I tried that. Will try again.\r\n\r\nPerhaps you made the change in the relevant commit, but then didn't apply subsequent commits including the new tests? Just a guess.",
    "created_at": "2020-05-28T19:58:51Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432088620",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432088620"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432088620"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432088620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432101304",
    "pull_request_review_id": 420462970,
    "id": 432101304,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwMTMwNA==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "FWIW I did try this before acking. I checked out this branch and changed the ternary to just use the copy assignment and the tests errored out. Will try again with updated commits.",
    "created_at": "2020-05-28T20:22:07Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432101304",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432101304"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432101304"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432101304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432161196",
    "pull_request_review_id": 420538803,
    "id": 432161196,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MTE5Ng==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jnewbery has found that I was wrong - the std::move invocation isn't necessary for correctness, it's just an optimization. Thanks for pointing that out @Sjors. Will remove the new comment.",
    "created_at": "2020-05-28T22:34:49Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432161196",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432161196"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432161196"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432161196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432221525",
    "pull_request_review_id": 420611467,
    "id": 432221525,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyMTUyNQ==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since this has caused so much confusion, I think it'd be better to update the comment than remove it entirely. Perhaps something like:\r\n\r\n```\r\n// We'll erase this entry from the map in the for increase expression.\r\n// Move the coin to the parent cache instead of copying as an optimization.",
    "created_at": "2020-05-29T02:21:45Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432221525",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432221525"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432221525"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432221525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432902077",
    "pull_request_review_id": 421455405,
    "id": 432902077,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMjA3Nw==",
    "diff_hunk": "@@ -199,7 +205,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n             } else {\n                 // A normal modification.\n                 cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                itUs->second.coin = std::move(it->second.coin);\n+                itUs->second.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "1ce5cd389f286627412bc5edc6cb34006b65ec0b",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this also be updated to use an `if/else` block instead of a ternary like above?",
    "created_at": "2020-05-31T01:56:31Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432902077",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432902077"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432902077"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432902077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 208,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432957388",
    "pull_request_review_id": 421504390,
    "id": 432957388,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1NzM4OA==",
    "diff_hunk": "@@ -199,7 +205,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n             } else {\n                 // A normal modification.\n                 cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                itUs->second.coin = std::move(it->second.coin);\n+                itUs->second.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "1ce5cd389f286627412bc5edc6cb34006b65ec0b",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch. ",
    "created_at": "2020-05-31T15:23:16Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432957388",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432957388"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432957388"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432957388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 208,
    "side": "RIGHT",
    "in_reply_to_id": 432902077
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432989748",
    "pull_request_review_id": 421532480,
    "id": 432989748,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4OTc0OA==",
    "diff_hunk": "@@ -199,7 +206,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n             } else {\n                 // A normal modification.\n                 cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                itUs->second.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` predicate to actually remove",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "fdc1d80ce4348687ca87d544e8efe40e5344f5d3",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: the third part of the for loop is an expression, not a predicate (more precisely, the _increase_ or _iteration_ expression). A predicate is a function which returns true/false.",
    "created_at": "2020-05-31T22:12:47Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432989748",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432989748"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r432989748"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432989748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 211,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433210377",
    "pull_request_review_id": 421810809,
    "id": 433210377,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxMDM3Nw==",
    "diff_hunk": "@@ -158,7 +158,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Otherwise we will need to create it in the parent\n                 // and move the data up and mark it as dirty\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                entry.coin = erase ? std::move(it->second.coin) : it->second.coin;",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Pfew, I'm not insane :-) Thanks for adding the comment.",
    "created_at": "2020-06-01T12:41:01Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433210377",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433210377"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433210377"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433210377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 174,
    "side": "RIGHT",
    "in_reply_to_id": 402037193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433520706",
    "pull_request_review_id": 422221355,
    "id": 433520706,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyMDcwNg==",
    "diff_hunk": "@@ -861,4 +879,207 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n \n+\n+Coin MakeCoin()\n+{\n+    Coin coin;\n+    coin.out.nValue = InsecureRand32();\n+    coin.nHeight = InsecureRandRange(4096);\n+    coin.fCoinBase = 0;\n+    return coin;\n+}\n+\n+\n+//! For CCoinsViewCache instances backed by either another cache instance and\n+//! leveldb, test cache behavior and flag state (DIRTY/FRESH) by\n+//!\n+//! 1. Adding a random coin to the child-most cache,\n+//! 2. Flushing all caches (without erasing),\n+//! 3. Ensure the entry still exists in the cache and has been written to parent,\n+//! 4. (if `do_erasing_flush`) Flushing the caches again (with erasing),\n+//! 5. (if `do_erasing_flush`) Ensure the entry has been written to the parent and is no longer in the cache,\n+//! 6. Spend the coin, ensure it no longer exists in the parent.\n+//!\n+void TestFlushBehavior(\n+    CCoinsViewCacheTest* view,\n+    CCoinsViewDB& base,\n+    std::vector<CCoinsViewCacheTest*>& all_caches,\n+    bool do_erasing_flush)\n+{\n+    CAmount value;\n+    char flags;\n+    uint256 txid;\n+    COutPoint outp;\n+    Coin coin;\n+    size_t cache_usage;\n+\n+    auto flush_all = [&all_caches](bool erase) {\n+        // Flush in reverse order to ensure that flushes happen from children up.\n+        for (auto i = all_caches.rbegin(); i != all_caches.rend(); ++i) {\n+            auto cache = *i;\n+            cache->SetBestBlock(InsecureRand256());  // Hack to allow flushing.\n+            erase ? cache->Flush() : cache->Sync();\n+        }\n+    };\n+\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    // Ensure the coins views haven't seen this coin before.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+\n+    // --- 1. Adding a random coin to the child cache\n+    //\n+    Coin tmpCoin{coin};\n+    view->AddCoin(outp, std::move(tmpCoin), false);\n+\n+    cache_usage = view->DynamicMemoryUsage();\n+    // `base` shouldn't have coin (no flush yet) but `view` should have cached it.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // --- 2. Flushing all caches (without erasing)\n+    //\n+    flush_all(/*erase*/ false);\n+\n+    // CoinsMap usage should be unchanged since we didn't erase anything.\n+    BOOST_CHECK_EQUAL(cache_usage, view->DynamicMemoryUsage());\n+\n+    // --- 3. Ensuring the entry still exists in the cache and has been written to parent\n+    //\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, 0);  // Flags should have been wiped.\n+\n+    // Both views should now have the coin.\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(view->HaveCoin(outp));\n+\n+    if (do_erasing_flush) {\n+        // --- 4. Flushing the caches again (with erasing)\n+        //\n+        flush_all(/*erase*/ true);\n+\n+        // Memory usage should have gone down.\n+        BOOST_CHECK(view->DynamicMemoryUsage() < cache_usage);\n+\n+        // --- 5. Ensuring the entry is no longer in the cache\n+        //\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, ABSENT);\n+        BOOST_CHECK_EQUAL(flags, NO_ENTRY);\n+\n+        view->AccessCoin(outp);\n+        GetCoinsMapEntry(view->map(), value, flags, outp);\n+        BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+        BOOST_CHECK_EQUAL(flags, 0);\n+    }\n+\n+    // Can't overwrite an entry without specifying that an overwrite is\n+    // expected.\n+    Coin tmpCoin2{coin};\n+    BOOST_CHECK_THROW(\n+        view->AddCoin(outp, std::move(tmpCoin2), /*possible_overwrite*/ false),\n+        std::logic_error);\n+\n+    // --- 6. Spend the coin.\n+    //\n+    BOOST_CHECK(view->SpendCoin(outp));\n+\n+    // The coin should be in the cache, but pruned and marked dirty.\n+    GetCoinsMapEntry(view->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, PRUNED);\n+    BOOST_CHECK_EQUAL(flags, DIRTY);\n+    BOOST_CHECK(!view->HaveCoin(outp)); // Coin should be considered spent in `view`.\n+    BOOST_CHECK(base.HaveCoin(outp));  // But coin should still be unspent in `base`.\n+\n+    flush_all(/*erase*/ false);\n+\n+    // Coin should be considered spent in both views.\n+    BOOST_CHECK(!view->HaveCoin(outp));\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    // Spent coin should not be spendable.\n+    BOOST_CHECK(!view->SpendCoin(outp));\n+\n+    // --- Bonus check: ensure that a coin added to the base view via one cache\n+    //     can be spent by another cache which has never seen it.\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+    all_caches[0]->Sync();\n+    BOOST_CHECK(base.HaveCoin(outp));\n+    BOOST_CHECK(all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoinInCache(outp));\n+\n+    BOOST_CHECK(all_caches[1]->SpendCoin(outp));\n+    flush_all(/*erase*/ false);\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    flush_all(/*erase*/ true); // Erase all cache content.\n+\n+    // --- Bonus check 2: ensure that a FRESH coin is deleted by Sync()\n+    //\n+    txid = InsecureRand256();\n+    outp = COutPoint(txid, 0);\n+    coin = MakeCoin();\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[0]->HaveCoin(outp));\n+    BOOST_CHECK(!all_caches[1]->HaveCoin(outp));\n+\n+    // Add and spend from same cache without flushing.\n+    all_caches[0]->AddCoin(outp, std::move(coin), false);\n+\n+    // Coin should be FRESH in the cache.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, coin.out.nValue);\n+    BOOST_CHECK_EQUAL(flags, DIRTY|FRESH);\n+\n+    // Base shouldn't have seen coin.\n+    BOOST_CHECK(!base.HaveCoin(outp));\n+\n+    BOOST_CHECK(all_caches[0]->SpendCoin(outp));\n+    all_caches[0]->Sync();\n+\n+    // Ensure there is no sign of the coin after spend/flush.\n+    GetCoinsMapEntry(all_caches[0]->map(), value, flags, outp);\n+    BOOST_CHECK_EQUAL(value, ABSENT);\n+    BOOST_CHECK_EQUAL(flags, NO_ENTRY);",
    "path": "src/test/coins_tests.cpp",
    "position": 306,
    "original_position": 311,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If `HaveCoinInCache()` isn't explicit enough, should it be removed from lower in the test, or is that different somehow?",
    "created_at": "2020-06-01T22:21:19Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433520706",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433520706"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433520706"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433520706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1076,
    "original_start_line": 1058,
    "start_side": "RIGHT",
    "line": 1078,
    "original_line": 1078,
    "side": "RIGHT",
    "in_reply_to_id": 377376708
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433961320",
    "pull_request_review_id": 422790091,
    "id": 433961320,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2MTMyMA==",
    "diff_hunk": "@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : ++it;",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should `++it` be outside the ternary conditional here?",
    "created_at": "2020-06-02T15:23:51Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433961320",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433961320"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433961320"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433961320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433962526",
    "pull_request_review_id": 422791633,
    "id": 433962526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2MjUyNg==",
    "diff_hunk": "@@ -203,12 +203,29 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ true);\n     cacheCoins.clear();\n     cachedCoinsUsage = 0;\n     return fOk;\n }\n \n+bool CCoinsViewCache::Sync()\n+{\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, /*erase*/ false);",
    "path": "src/coins.cpp",
    "position": 74,
    "original_position": 60,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "eebaca7620bbd0af0ec385c6c7d47b2b4b524d55",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> This is simply copying the pattern of `Flush()`, but `BatchWrite()` never returns `false`, so this parameter does nothing. I think all three functions should be cleaned up to not return anything so that the calling pattern is clear, but that can be done in a follow-up PR.\r\n\r\nI agree with @jnewbery here.",
    "created_at": "2020-06-02T15:25:33Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433962526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433962526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r433962526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433962526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 245,
    "original_line": 245,
    "side": "RIGHT",
    "in_reply_to_id": 377374863
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434003002",
    "pull_request_review_id": 422840668,
    "id": 434003002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMzAwMg==",
    "diff_hunk": "@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : ++it;",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No. `std::unordered_map::erase()` returns an iterator to the next item in the map: https://en.cppreference.com/w/cpp/container/unordered_map/erase.",
    "created_at": "2020-06-02T16:13:15Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434003002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434003002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434003002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434003002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT",
    "in_reply_to_id": 433961320
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434005792",
    "pull_request_review_id": 422844267,
    "id": 434005792,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwNTc5Mg==",
    "diff_hunk": "@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : ++it;",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh -- and it appears to be a convention. Thanks @jnewbery.",
    "created_at": "2020-06-02T16:17:42Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434005792",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434005792"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434005792"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434005792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT",
    "in_reply_to_id": 433961320
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434011129",
    "pull_request_review_id": 422851560,
    "id": 434011129,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMTEyOQ==",
    "diff_hunk": "@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : ++it;",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`it = ++it;` is kind of strange though. How about `it = mapCoins.erase(it) : std::next(it);` ?",
    "created_at": "2020-06-02T16:26:09Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434011129",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434011129"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434011129"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434011129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT",
    "in_reply_to_id": 433961320
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434729703",
    "pull_request_review_id": 423768662,
    "id": 434729703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyOTcwMw==",
    "diff_hunk": "@@ -171,7 +171,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Create the coin in the parent cache, move the data up\n                 // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    entry.coin = std::move(it->second.coin);",
    "path": "src/coins.cpp",
    "position": 38,
    "original_position": 38,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thinking about this more, is it not more than a pure optimization? If we copy instead of move, then we are increasing the memory footprint of our dbcache. For a large batch write won't all dirty entries exist in memory twice, potentially increasing the memory requirements of the node temporarily until the parent cache writes to disk?",
    "created_at": "2020-06-03T17:18:09Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434729703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434729703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434729703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434729703/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 184,
    "original_line": 184,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434751546",
    "pull_request_review_id": 423796998,
    "id": 434751546,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MTU0Ng==",
    "diff_hunk": "@@ -171,7 +171,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Create the coin in the parent cache, move the data up\n                 // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    entry.coin = std::move(it->second.coin);",
    "path": "src/coins.cpp",
    "position": 38,
    "original_position": 38,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@andrewtoth I think this is offset by the fact that we're erasing as we iterate through the map, so coins will only be duplicated in memory one by one. But that's a good consideration, thanks for raising the point.",
    "created_at": "2020-06-03T17:55:44Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434751546",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434751546"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434751546"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434751546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 184,
    "original_line": 184,
    "side": "RIGHT",
    "in_reply_to_id": 434729703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434751700",
    "pull_request_review_id": 423797199,
    "id": 434751700,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MTcwMA==",
    "diff_hunk": "@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : ++it;",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Will change if I rebase.",
    "created_at": "2020-06-03T17:56:01Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434751700",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434751700"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434751700"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434751700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT",
    "in_reply_to_id": 433961320
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434763783",
    "pull_request_review_id": 423812734,
    "id": 434763783,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2Mzc4Mw==",
    "diff_hunk": "@@ -171,7 +171,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Create the coin in the parent cache, move the data up\n                 // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    entry.coin = std::move(it->second.coin);",
    "path": "src/coins.cpp",
    "position": 38,
    "original_position": 38,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jamesob For this change we are no longer erasing as we iterate through the map, and also copying, right? For a `Sync()` with a large amount of dirty entries won't this cause memory usage to increase?",
    "created_at": "2020-06-03T18:17:08Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434763783",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434763783"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434763783"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434763783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 184,
    "original_line": 184,
    "side": "RIGHT",
    "in_reply_to_id": 434729703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434892478",
    "pull_request_review_id": 423981011,
    "id": 434892478,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5MjQ3OA==",
    "diff_hunk": "@@ -171,7 +171,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Create the coin in the parent cache, move the data up\n                 // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    entry.coin = std::move(it->second.coin);",
    "path": "src/coins.cpp",
    "position": 38,
    "original_position": 38,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmm ok I guess I'm missing how we're erasing during the iteration with `erase=false`. I tested a reindex-chainstate with max dbcache and did a `Sync` instead of `Flush` on shutdown, and it didn't increase memory usage at all when syncing. LGTM.",
    "created_at": "2020-06-03T22:28:02Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434892478",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434892478"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r434892478"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434892478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 184,
    "original_line": 184,
    "side": "RIGHT",
    "in_reply_to_id": 434729703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435526117",
    "pull_request_review_id": 424798429,
    "id": 435526117,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyNjExNw==",
    "diff_hunk": "@@ -171,7 +171,14 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 // Create the coin in the parent cache, move the data up\n                 // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n+                if (erase) {\n+                    // The `move` call here is purely an optimization; we rely on the\n+                    // `mapCoins.erase` call in the `for` expression to actually remove\n+                    // the entry from the child map.\n+                    entry.coin = std::move(it->second.coin);",
    "path": "src/coins.cpp",
    "position": 38,
    "original_position": 38,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@andrewtoth you don't see a big memory spike because in practice this implementation of `BatchWrite` is only called for small sets of coins [during `ConnectTip()`](https://github.com/jamesob/bitcoin/blob/8d5994ef2235c6706440bc18968006cd04c22fb4/src/validation.cpp#L2600-L2613) to make UTXO set changes atomic (i.e. a CCoinsViewCache on top of another CCoinsViewCache); calling `BatchWrite` for really sizable sets of coins happens on `CCoinsViewDB` (leveldb) objects (i.e. writing down from a CCoinsViewCache -> CCoinsViewDB). CCoinsViewDB doesn't have an in-memory cache (at least that we maintain) so there is no sizable duplication.\r\n\r\nBut once again, thanks for raising the point and testing.",
    "created_at": "2020-06-04T20:21:03Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r435526117",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435526117"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r435526117"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435526117/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 184,
    "original_line": 184,
    "side": "RIGHT",
    "in_reply_to_id": 434729703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463987009",
    "pull_request_review_id": 459595094,
    "id": 463987009,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4NzAwOQ==",
    "diff_hunk": "@@ -297,12 +297,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool SpendCoin(const COutPoint &outpoint, Coin* moveto = nullptr);\n \n     /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * Push the modifications applied to this cache to its base and wipe local state.\n+     * Failure to call this method or Sync() before destruction will cause the changes\n+     * to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n      */\n     bool Flush();\n \n+    /**\n+     * Push the modifications applied to this cache to its base while retaining\n+     * the contents of this cache (except for FRESH spent coins, which we erase).",
    "path": "src/coins.h",
    "position": null,
    "original_position": 42,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "58616e0b8b37cae4d011062038fb6565064fe3d1",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think `except for FRESH spent coins, which we erase` is true?\r\n\r\nIf a FRESH coin is spent, it is deleted immediately, so there shouldn't be any such entries in the first place.",
    "created_at": "2020-08-01T18:21:43Z",
    "updated_at": "2020-08-01T20:16:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463987009",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463987009"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463987009"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463987009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 309,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463996447",
    "pull_request_review_id": 459601443,
    "id": 463996447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjQ0Nw==",
    "diff_hunk": "@@ -297,12 +297,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool SpendCoin(const COutPoint &outpoint, Coin* moveto = nullptr);\n \n     /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * Push the modifications applied to this cache to its base and wipe local state.\n+     * Failure to call this method or Sync() before destruction will cause the changes\n+     * to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n      */\n     bool Flush();\n \n+    /**\n+     * Push the modifications applied to this cache to its base while retaining\n+     * the contents of this cache (except for FRESH spent coins, which we erase).",
    "path": "src/coins.h",
    "position": null,
    "original_position": 42,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "58616e0b8b37cae4d011062038fb6565064fe3d1",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yep, [you're right](https://github.com/jamesob/bitcoin/blob/0292b01cc4be18e5eb37563064cced7d73cd7025/src/coins.cpp#L120-L121), not sure what I was thinking there.",
    "created_at": "2020-08-01T20:17:09Z",
    "updated_at": "2020-08-01T20:17:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463996447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463996447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463996447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463996447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 309,
    "side": "RIGHT",
    "in_reply_to_id": 463987009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463996547",
    "pull_request_review_id": 459601537,
    "id": 463996547,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjU0Nw==",
    "diff_hunk": "@@ -115,8 +115,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             changed++;\n         }\n         count++;\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        it = erase ? mapCoins.erase(it) : ++it;",
    "path": "src/txdb.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "0c2fc5154e88b46725b8a1c2149aa94c552d1e03",
    "original_commit_id": "8d5994ef2235c6706440bc18968006cd04c22fb4",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, thanks.",
    "created_at": "2020-08-01T20:18:28Z",
    "updated_at": "2020-08-01T20:18:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463996547",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463996547"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17487#discussion_r463996547"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463996547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT",
    "in_reply_to_id": 433961320
  }
]