[
  {
    "sha": "46f3e26962c05cf1750981e81462909094ce4476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmYzZTI2OTYyYzA1Y2YxNzUwOTgxZTgxNDYyOTA5MDk0Y2U0NDc2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-17T21:31:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-18T00:32:10Z"
      },
      "message": "Add -onion=noproxy for unproxied *.onion connections",
      "tree": {
        "sha": "b6ef96eb1ce0b73364706582d10b1f9f33bdf1b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6ef96eb1ce0b73364706582d10b1f9f33bdf1b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46f3e26962c05cf1750981e81462909094ce4476",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f3e26962c05cf1750981e81462909094ce4476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46f3e26962c05cf1750981e81462909094ce4476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f3e26962c05cf1750981e81462909094ce4476/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8adf457047677df1d58da070bae5629526bb5b74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8adf457047677df1d58da070bae5629526bb5b74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8adf457047677df1d58da070bae5629526bb5b74"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 29,
      "deletions": 17
    },
    "files": [
      {
        "sha": "65431a138803bcda0e7a3a15805d8ecdb3415e41",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f3e26962c05cf1750981e81462909094ce4476/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f3e26962c05cf1750981e81462909094ce4476/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=46f3e26962c05cf1750981e81462909094ce4476",
        "patch": "@@ -19,6 +19,9 @@ outgoing connections be anonymized, but more is possible.\n \t-onion=ip:port  Set the proxy server to use for tor hidden services. You do not\n \t                need to set this if it's the same as -proxy. You can use -noonion\n \t                to explicitly disable access to hidden service.\n+\t                Setting -onion=noproxy will attempt to resolve hidden services\n+\t                and connect to them directly (for those with transparent tor\n+\t                proxies installed).\n \t\n \t-listen         When using -proxy, listening is disabled by default. If you want\n \t                to run a hidden service (see next section), you'll need to enable"
      },
      {
        "sha": "0f6b01ed4a9bdfe5276eda08490962ba65b9a346",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f3e26962c05cf1750981e81462909094ce4476/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f3e26962c05cf1750981e81462909094ce4476/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=46f3e26962c05cf1750981e81462909094ce4476",
        "patch": "@@ -263,7 +263,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -maxconnections=<n>    \" + strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125) + \"\\n\";\n     strUsage += \"  -maxreceivebuffer=<n>  \" + strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000) + \"\\n\";\n     strUsage += \"  -maxsendbuffer=<n>     \" + strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000) + \"\\n\";\n-    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n+    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy (or \\\"noproxy\\\") to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n     strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\") + \"\\n\";\n     strUsage += \"  -permitbaremultisig    \" + strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -port=<port>           \" + strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333) + \"\\n\";\n@@ -861,7 +861,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     // -onion can override normal proxy, -noonion disables tor entirely\n-    if (!(mapArgs.count(\"-onion\") && mapArgs[\"-onion\"] == \"0\") &&\n+    if (mapArgs.count(\"-onion\") && mapArgs[\"-onion\"] == \"noproxy\") {\n+        fTorNoProxy = true;\n+        SetReachable(NET_TOR);\n+    } else if ((!mapArgs.count(\"-onion\") || mapArgs[\"-onion\"] != \"0\") &&\n         (fProxy || mapArgs.count(\"-onion\"))) {\n         CService addrOnion;\n         if (!mapArgs.count(\"-onion\"))"
      },
      {
        "sha": "8386313666edae54c7050f19e86be1be1bf989f2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 12,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f3e26962c05cf1750981e81462909094ce4476/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f3e26962c05cf1750981e81462909094ce4476/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=46f3e26962c05cf1750981e81462909094ce4476",
        "patch": "@@ -42,6 +42,7 @@ static CService nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = false;\n+bool fTorNoProxy = false;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n \n@@ -85,13 +86,13 @@ void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n         hostOut = in;\n }\n \n-bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n+bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup, bool fTorLookup)\n {\n     vIP.clear();\n \n     {\n         CNetAddr addr;\n-        if (addr.SetSpecial(std::string(pszName))) {\n+        if (!fTorLookup && addr.SetSpecial(std::string(pszName))) {\n             vIP.push_back(addr);\n             return true;\n         }\n@@ -182,7 +183,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     return (vIP.size() > 0);\n }\n \n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n+bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup, bool fTorLookup)\n {\n     std::string strHost(pszName);\n     if (strHost.empty())\n@@ -192,7 +193,7 @@ bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nM\n         strHost = strHost.substr(1, strHost.size() - 2);\n     }\n \n-    return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup);\n+    return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup, fTorLookup);\n }\n \n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n@@ -204,7 +205,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n     SplitHostPort(std::string(pszName), port, hostname);\n \n     std::vector<CNetAddr> vIP;\n-    bool fRet = LookupIntern(hostname.c_str(), vIP, nMaxSolutions, fAllowLookup);\n+    bool fRet = LookupIntern(hostname.c_str(), vIP, nMaxSolutions, fAllowLookup, false);\n     if (!fRet)\n         return false;\n     vAddr.resize(vIP.size());\n@@ -550,10 +551,14 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n     CService nameProxy;\n     GetNameProxy(nameProxy);\n \n-    CService addrResolved(CNetAddr(strDest, fNameLookup && !HaveNameProxy()), port);\n+    CService addrResolved(CNetAddr(strDest, fNameLookup && !HaveNameProxy(), fTorNoProxy), port);\n     if (addrResolved.IsValid()) {\n-        addr = addrResolved;\n-        return ConnectSocket(addr, hSocketRet, nTimeout);\n+        CNetAddr torAddr;\n+        if (!torAddr.SetSpecial(strDest) || !fTorNoProxy)\n+            addr = addrResolved;\n+        else\n+            addr = CService(torAddr, port);\n+        return ConnectSocket(addrResolved, hSocketRet, nTimeout);\n     }\n \n     addr = CService(\"0.0.0.0:0\");\n@@ -628,19 +633,19 @@ CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)\n     SetRaw(NET_IPV6, (const uint8_t*)&ipv6Addr);\n }\n \n-CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)\n+CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup, bool fTorLookup)\n {\n     Init();\n     std::vector<CNetAddr> vIP;\n-    if (LookupHost(pszIp, vIP, 1, fAllowLookup))\n+    if (LookupHost(pszIp, vIP, 1, fAllowLookup, fTorLookup))\n         *this = vIP[0];\n }\n \n-CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup)\n+CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup, bool fTorLookup)\n {\n     Init();\n     std::vector<CNetAddr> vIP;\n-    if (LookupHost(strIp.c_str(), vIP, 1, fAllowLookup))\n+    if (LookupHost(strIp.c_str(), vIP, 1, fAllowLookup, fTorLookup))\n         *this = vIP[0];\n }\n "
      },
      {
        "sha": "e0c5371a27a28daa4baab1444cb6aa48120e7236",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f3e26962c05cf1750981e81462909094ce4476/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f3e26962c05cf1750981e81462909094ce4476/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=46f3e26962c05cf1750981e81462909094ce4476",
        "patch": "@@ -18,6 +18,7 @@\n \n extern int nConnectTimeout;\n extern bool fNameLookup;\n+extern bool fTorNoProxy;\n \n /** -timeout default */\n static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n@@ -46,8 +47,8 @@ class CNetAddr\n     public:\n         CNetAddr();\n         CNetAddr(const struct in_addr& ipv4Addr);\n-        explicit CNetAddr(const char *pszIp, bool fAllowLookup = false);\n-        explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false);\n+        explicit CNetAddr(const char *pszIp, bool fAllowLookup = false, bool fTorLookup = false);\n+        explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false, bool fTorLookup = false);\n         void Init();\n         void SetIP(const CNetAddr& ip);\n \n@@ -178,7 +179,7 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(CService addrProxy);\n bool HaveNameProxy();\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0, bool fAllowLookup = true);\n+bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0, bool fAllowLookup = true, bool fTorLookup = false);\n bool Lookup(const char *pszName, CService& addr, int portDefault = 0, bool fAllowLookup = true);\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault = 0, bool fAllowLookup = true, unsigned int nMaxSolutions = 0);\n bool LookupNumeric(const char *pszName, CService& addr, int portDefault = 0);"
      }
    ]
  }
]