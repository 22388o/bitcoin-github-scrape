[
  {
    "sha": "ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTRjZjVjZmY2ZmI2MGM5NzY5YjYyYWNjZTJlM2E4ZmNkMGU3YWFl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-18T17:11:46Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-18T17:11:46Z"
      },
      "message": "Wallet locking fixes for -DDEBUG_LOCKORDER\n\nCompiling with -DDEBUG_LOCKORDER and running the qa/rpc-test/ regression\ntests uncovered a couple of wallet methods that should (but didn't)\nacquire the cs_wallet mutext.\n\nI also changed the AssertLockHeld() routine print to stderr and\nabort, instead of printing to debug.log and then assert()'ing.\nIt is annoying to look in debug.log to find out which\nAssertLockHeld is failing.",
      "tree": {
        "sha": "87a92041e1d394ad06d8506be036973f5b5e0fd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87a92041e1d394ad06d8506be036973f5b5e0fd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c9932345976de17b1a02401162466995d8355e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9932345976de17b1a02401162466995d8355e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c9932345976de17b1a02401162466995d8355e3"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 31,
      "deletions": 23
    },
    "files": [
      {
        "sha": "06e4f7102de57dce1ddadeeb322e4c5296093637",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
        "patch": "@@ -8,6 +8,8 @@ if [ $# -lt 1 ]; then\n         exit 1\n fi\n \n+set -f\n+\n BITCOIND=${1}/bitcoind\n CLI=${1}/bitcoin-cli\n \n@@ -23,13 +25,13 @@ D=$(mktemp -d test.XXXXX)\n \n D1=${D}/node1\n CreateDataDir $D1 port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1 -debug\"\n+B1ARGS=\"-datadir=$D1\"\n $BITCOIND $B1ARGS &\n B1PID=$!\n \n D2=${D}/node2\n CreateDataDir $D2 port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2 -debug\"\n+B2ARGS=\"-datadir=$D2\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n "
      },
      {
        "sha": "e624a9ee8499ba2fe9b601254f642a3fb9ce7f86",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
        "patch": "@@ -140,8 +140,9 @@ void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine,\n {\n     BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n         if (i.first == cs) return;\n-    LogPrintf(\"Lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n-    assert(0);\n+    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\",\n+            pszName, pszFile, nLine, LocksHeld().c_str());\n+    abort();\n }\n \n #endif /* DEBUG_LOCKORDER */"
      },
      {
        "sha": "82f71d24a516dff84ec2cfca8e0cadc6602f6f42",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
        "patch": "@@ -194,7 +194,7 @@ void CWallet::SetBestChain(const CBlockLocator& loc)\n \n bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)\n {\n-    AssertLockHeld(cs_wallet); // nWalletVersion\n+    LOCK(cs_wallet); // nWalletVersion\n     if (nWalletVersion >= nVersion)\n         return true;\n \n@@ -221,7 +221,7 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n \n bool CWallet::SetMaxVersion(int nVersion)\n {\n-    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion\n+    LOCK(cs_wallet); // nWalletVersion, nWalletMaxVersion\n     // cannot downgrade below current version\n     if (nWalletVersion > nVersion)\n         return false;\n@@ -1623,14 +1623,17 @@ DBErrors CWallet::ZapWalletTx()\n \n bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)\n {\n-    AssertLockHeld(cs_wallet); // mapAddressBook\n-    std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n-    mapAddressBook[address].name = strName;\n-    if (!strPurpose.empty()) /* update purpose only if requested */\n-        mapAddressBook[address].purpose = strPurpose;\n+    bool fUpdated = false;\n+    {\n+        LOCK(cs_wallet); // mapAddressBook\n+        std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n+        fUpdated = mi != mapAddressBook.end();\n+        mapAddressBook[address].name = strName;\n+        if (!strPurpose.empty()) /* update purpose only if requested */\n+            mapAddressBook[address].purpose = strPurpose;\n+    }\n     NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address),\n-            mapAddressBook[address].purpose,\n-            (mi == mapAddressBook.end()) ?  CT_NEW : CT_UPDATED);\n+                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!fFileBacked)\n         return false;\n     if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n@@ -1640,21 +1643,23 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n-\n-    AssertLockHeld(cs_wallet); // mapAddressBook\n-\n-    if(fFileBacked)\n     {\n-        // Delete destdata tuples associated with address\n-        std::string strAddress = CBitcoinAddress(address).ToString();\n-        BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+        LOCK(cs_wallet); // mapAddressBook\n+\n+        if(fFileBacked)\n         {\n-            CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+            // Delete destdata tuples associated with address\n+            std::string strAddress = CBitcoinAddress(address).ToString();\n+            BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+            {\n+                CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+            }\n         }\n+        mapAddressBook.erase(address);\n     }\n \n-    mapAddressBook.erase(address);\n     NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), \"\", CT_DELETED);\n+\n     if (!fFileBacked)\n         return false;\n     CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());"
      },
      {
        "sha": "eb192f1ca6ecc353a82a6a1d28e69d7a38f0adac",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ca4cf5cff6fb60c9769b62acce2e3a8fcd0e7aae",
        "patch": "@@ -363,7 +363,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool SetMaxVersion(int nVersion);\n \n     // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { AssertLockHeld(cs_wallet); return nWalletVersion; }\n+    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     // Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;"
      }
    ]
  }
]