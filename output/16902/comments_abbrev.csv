DrahtBot,2019-09-18 05:06:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18011 (Replace current benchmarking framework with nanobench by martinus)\n* #13062 (Make script interpreter independent ",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532520135,532520135,
ajtowns,2019-09-18 06:22:13,"It might be easier to review if the operations on `vfExec` are pulled out into a separate class first, so that the optimisation just means updating the class from:\n\n```c++\nclass FalseCounter {\nprivate:\n    std::vector<bool> flags;\npublic:\n    bool all_true() { return !count(flags.begin(), flags.end(), false); }\n    void push_back(bool f) { flags.push_back(f); }\n    void pop_back(",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532538012,532538012,
sipa,2019-09-18 06:28:53,@ajtowns If there's interest in including this patch at some point we should pick up that approach.,https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532539892,532539892,
practicalswift,2019-09-18 09:22:02,"Somewhat related issue: https://github.com/sipa/miniscript/issues/7 (""Policies with too high nesting depth are not rejected: It is possible to create small inputs that cause extreme memory usage (in practice: OOM kill or std::bad_alloc)"")\n\nContext: Nested `tresh` tend to be very `OP_IF`/`OP_ELSE`/`OP_ENDIF` intensive (`or_i`) when compiled to script :)",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532600356,532600356,
sipa,2019-11-04 18:54:20,"I've modified the code to follow @ajtowns's approach more closely, though with fewer commits, and extra comments.",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-549495965,549495965,
jnewbery,2020-02-11 15:31:11,"Code review ACK e6e622e5a0e22c2ac1b50b96af818e412d67ac54\n\nI've run the bench and this change cuts time by ~75%\n\nbefore:\n\n```\n‚Üí ./bench_bitcoin -filter=VerifyNestedIfScript -evals=50\nWARNING: This is a debug build - may result in slower benchmarks.\n# Benchmark, evals, iterations, total, min, max, median\nVerifyNestedIfScript, 50, 100, 14.0987, 0.00267213, 0.00323801, 0.00277969\",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-584692879,584692879,
MarcoFalke,2020-02-12 15:11:36,"ACK e6e622e5a0e22c2ac1b50b96af818e412d67ac54 üê¥\n\n* Checked that d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8 is moving the code around and that the symbol 'count' is equal to 'std::count' in that call stack\n* Checked that e6e622e5a0e22c2ac1b50b96af818e412d67ac54 is not a behavior change by looking at the code and running the fuzzer from #18127 for a couple of minutes\n\n\n\n\n\n<details><su",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-585252042,585252042,
jonatack,2020-02-12 17:31:32,I like the changes in @jnewbery's branch mentioned in https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-584692879) esp. [this code comment](https://github.com/jnewbery/bitcoin/commit/3629aa57fe5cec8f4b639ef12137bace14ee7de4#diff-be2905e2f5218ecdbe4e55637dac75f3R293).,https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-585322026,585322026,
fjahr,2020-02-13 00:19:39,"ACK e6e622e5a0e22c2ac1b50b96af818e412d67ac54\n\nReviewed code, compiled, ran tests and benchmarks\n\nI received better results from the benchmarks after the change, although improvements are not nearly as significant as the others reported. Not sure why that is, I ran them multiple times with different configs, without `enable_debug` for example, and results were consistent.\n\nBefore (HEAD ",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-585485034,585485034,
MarcoFalke,2020-02-13 13:19:40,"Can anyone explain me why everyone is benchmarking with optimizations disabled? I hope all nodes on mainnet are running -O2, at least for applications where performance matters.",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-585750270,585750270,
fjahr,2020-02-13 13:22:53,"> Can anyone explain me why everyone is benchmarking with optimizations disabled? I hope all nodes on mainnet are running -O2, at least for applications where performance matters.\n\nI did both (with optimizations first). Then I tested it without because my results were different than the others here and ended up posting those because of the differences to make them more comparable. Here are som",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-585751558,585751558,
jonatack,2020-02-13 17:57:47,"Fair enough. Compiled with ` --enable-bench CXXFLAGS=""-O2""`\n\nbefore\n```\n((HEAD detached at 89fb241c54))$ src/bench/bench_bitcoin -filter=VerifyNestedIfScript -evals=50\n# Benchmark, evals, iterations, total, min, max, median\nVerifyNestedIfScript, 50, 100, 1.154,   0.000201797, 0.000381135, 0.000218384\nVerifyNestedIfScript, 50, 100, 1.11177, 0.000202117, 0.000342534, 0.000218816\nVeri",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-585889744,585889744,
NicolasDorier,2020-02-14 07:52:08,"ACK, \n\nI was wondering about the assert I suggested on https://github.com/bitcoin/bitcoin/pull/16902#discussion_r370991967 \n\nI don't really know if it is good idea or not. While theorically possible, even if it was practically possible, I guess it would be more desirable to get a `IF` bypassed rather than a crash of the node.\nSomebody make 4 billions of `OP_IF` probably can't steal anybo",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-586140340,586140340,
ajtowns,2020-03-02 04:04:16,"ACK e6e622e5a0e22c2ac1b50b96af818e412d67ac54\n\nI don't understand fjahr's results and investigating further didn't reveal anything; seems like any quadratic behaviour is getting completely lost in the noise there somehow. Might be worth adding additional benchmarks once tapscript removes the opcode limit to report the performance of very large scripts; say 10k nested IFs and 20k OP_NOPs vs 40k ",https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-593208532,593208532,
laanwj,2020-03-14 20:00:35,concept and code review ACK e6e622e5a0e22c2ac1b50b96af818e412d67ac54,https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-599128618,599128618,
ajtowns,2019-11-05 08:50:42,`uint32_t` with a `t` :),https://github.com/bitcoin/bitcoin/pull/16902#discussion_r342439473,342439473,src/script/interpreter.cpp
ajtowns,2019-11-05 08:54:24,"Using `int32_t` gives ""comparison of integers of different signs"" warnings. Having `uint32_t m_first_false_pos_plus_one = 0` instead avoids that, and seems to make the code simpler (avoids a bunch of decrements/increments). I think you could call it `m_size_of_stack_including_first_false` with 0 as a special value, and have it make sense, maybe?",https://github.com/bitcoin/bitcoin/pull/16902#discussion_r342441000,342441000,src/script/interpreter.cpp
sipa,2019-11-06 20:47:10,Fixed.,https://github.com/bitcoin/bitcoin/pull/16902#discussion_r343318934,343318934,src/script/interpreter.cpp
sipa,2019-11-06 20:47:46,"I'm instead adding a NO_FALSE constant (equal to 0xFFFFFFFF), and reordering operations a bit to avoid some `- 1`s.",https://github.com/bitcoin/bitcoin/pull/16902#discussion_r343319188,343319188,src/script/interpreter.cpp
NicolasDorier,2020-01-26 11:36:29,"I think an `assert(m_stack_size != NO_FALSE - 1)` is needed.\nAlso, does not seems caller are checking this. Unsure if this can realistically taken advantage of, but I think it does not hurt the scriptevaluator to check for it.",https://github.com/bitcoin/bitcoin/pull/16902#discussion_r370991967,370991967,src/script/interpreter.cpp
ajtowns,2020-01-28 02:18:33,"You'd need a script with 4 billion OP_IF's to hit that (so a tx with 4GB of data or over 1G weight), so taking advantage of it shouldn't be possible... Adding the assert seems plausible though.",https://github.com/bitcoin/bitcoin/pull/16902#discussion_r371582020,371582020,src/script/interpreter.cpp
jonatack,2020-02-12 16:52:42,pico-nit: perhaps execute `m_stack_size - 1` between the assert line 330 and the start of the conditional line 331 and use the result in lines 333 and 334 in the conditional,https://github.com/bitcoin/bitcoin/pull/16902#discussion_r378380677,378380677,src/script/interpreter.cpp
roconnor-blockstream,2020-03-18 14:11:20,In particular Script length is limited to MAX_SIZE (2^25) bytes.,https://github.com/bitcoin/bitcoin/pull/16902#discussion_r394374915,394374915,src/script/interpreter.cpp
