[
  {
    "sha": "89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWZiMjQxYzU0ZmM4NWJlZmFjZmEzNzAzZDhlMjFiZjNiOGE3NmVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-18T02:34:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-07T17:12:26Z"
      },
      "message": "Benchmark script verification with 100 nested IFs",
      "tree": {
        "sha": "3e2e4646b59dc6e0ef2bedf549586c3ef066f340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e2e4646b59dc6e0ef2bedf549586c3ef066f340"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fb241c54fc85befacfa3703d8e21bf3b8a76eb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "270616228bc9a3856a0a82dea26ac3480b7585cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/270616228bc9a3856a0a82dea26ac3480b7585cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/270616228bc9a3856a0a82dea26ac3480b7585cd"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5894f22b5b6ee2860ff02ddba6a0d868caeb64f2",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fb241c54fc85befacfa3703d8e21bf3b8a76eb/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fb241c54fc85befacfa3703d8e21bf3b8a76eb/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
        "patch": "@@ -71,4 +71,27 @@ static void VerifyScriptBench(benchmark::State& state)\n     }\n }\n \n+static void VerifyNestedIfScript(benchmark::State& state) {\n+    std::vector<std::vector<unsigned char>> stack;\n+    CScript script;\n+    for (int i = 0; i < 100; ++i) {\n+        script << OP_1 << OP_IF;\n+    }\n+    for (int i = 0; i < 1000; ++i) {\n+        script << OP_1;\n+    }\n+    for (int i = 0; i < 100; ++i) {\n+        script << OP_ENDIF;\n+    }\n+    while (state.KeepRunning()) {\n+        auto stack_copy = stack;\n+        ScriptError error;\n+        bool ret = EvalScript(stack_copy, script, 0, BaseSignatureChecker(), SigVersion::BASE, &error);\n+        assert(ret);\n+    }\n+}\n+\n+\n BENCHMARK(VerifyScriptBench, 6300);\n+\n+BENCHMARK(VerifyNestedIfScript, 100);"
      }
    ]
  },
  {
    "sha": "d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGU4ZjRkNWQ4ZGRhY2NiMzdmOThiNzk4OWZiOTQ0MDgxZTQxYWI4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-09-18T05:49:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-07T17:12:26Z"
      },
      "message": "[refactor] interpreter: define interface for vfExec\n\nIncludes comments added by Pieter Wuille.",
      "tree": {
        "sha": "0d639dc6cdd298e6bd7333f23353fb5805bbb5f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d639dc6cdd298e6bd7333f23353fb5805bbb5f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fb241c54fc85befacfa3703d8e21bf3b8a76eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89fb241c54fc85befacfa3703d8e21bf3b8a76eb"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7a34c9c48da5b8e8512e41601ed2825c03a555a3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
        "patch": "@@ -278,6 +278,30 @@ int FindAndDelete(CScript& script, const CScript& b)\n     return nFound;\n }\n \n+namespace {\n+/** A data type to abstract out the condition stack during script execution.\n+ *\n+ * Conceptually it acts like a vector of booleans, one for each level of nested\n+ * IF/THEN/ELSE, indicating whether we're in the active or inactive branch of\n+ * each.\n+ *\n+ * The elements on the stack cannot be observed individually; we only need to\n+ * expose whether the stack is empty and whether or not any false values are\n+ * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n+ * flips the last value without returning it.\n+ */\n+class ConditionStack {\n+private:\n+    std::vector<bool> m_flags;\n+public:\n+    bool empty() { return m_flags.empty(); }\n+    bool all_true() { return !std::count(m_flags.begin(), m_flags.end(), false); }\n+    void push_back(bool f) { m_flags.push_back(f); }\n+    void pop_back() { m_flags.pop_back(); }\n+    void toggle_top() { m_flags.back() = !m_flags.back(); }\n+};\n+}\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n@@ -293,7 +317,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n-    std::vector<bool> vfExec;\n+    ConditionStack vfExec;\n     std::vector<valtype> altstack;\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n     if (script.size() > MAX_SCRIPT_SIZE)\n@@ -305,7 +329,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     {\n         while (pc < pend)\n         {\n-            bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n+            bool fExec = vfExec.all_true();\n \n             //\n             // Read instruction\n@@ -494,7 +518,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 {\n                     if (vfExec.empty())\n                         return set_error(serror, SCRIPT_ERR_UNBALANCED_CONDITIONAL);\n-                    vfExec.back() = !vfExec.back();\n+                    vfExec.toggle_top();\n                 }\n                 break;\n "
      }
    ]
  },
  {
    "sha": "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmU2MjJlNWEwZTIyYzJhYzFiNTBiOTZhZjgxOGU0MTJkNjdhYzU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-04T18:54:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-07T17:12:26Z"
      },
      "message": "Implement O(1) OP_IF/NOTIF/ELSE/ENDIF logic\n\nThis optimization was first suggested by Sergio Demian Lerner in\nhttps://bitslog.wordpress.com/2017/04/17/new-quadratic-delays-in-bitcoin-scripts/.\nThe implementation follows the suggested approach there, but with a slightly\nsimpler representation.",
      "tree": {
        "sha": "63f9df6728f3d29a26281ae08d083356048ce771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63f9df6728f3d29a26281ae08d083356048ce771"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6e622e5a0e22c2ac1b50b96af818e412d67ac54/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0e8f4d5d8ddaccb37f98b7989fb944081e41ab8"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 46,
      "deletions": 6
    },
    "files": [
      {
        "sha": "cd6ab0ee1b8f750aa672a9701c273ae7d0d86b11",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6e622e5a0e22c2ac1b50b96af818e412d67ac54/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6e622e5a0e22c2ac1b50b96af818e412d67ac54/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
        "patch": "@@ -289,16 +289,56 @@ namespace {\n  * expose whether the stack is empty and whether or not any false values are\n  * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n  * flips the last value without returning it.\n+ *\n+ * This uses an optimized implementation that does not materialize the\n+ * actual stack. Instead, it just stores the size of the would-be stack,\n+ * and the position of the first false value in it.\n  */\n class ConditionStack {\n private:\n-    std::vector<bool> m_flags;\n+    //! A constant for m_first_false_pos to indicate there are no falses.\n+    static constexpr uint32_t NO_FALSE = std::numeric_limits<uint32_t>::max();\n+\n+    //! The size of the implied stack.\n+    uint32_t m_stack_size = 0;\n+    //! The position of the first false value on the implied stack, or NO_FALSE if all true.\n+    uint32_t m_first_false_pos = NO_FALSE;\n+\n public:\n-    bool empty() { return m_flags.empty(); }\n-    bool all_true() { return !std::count(m_flags.begin(), m_flags.end(), false); }\n-    void push_back(bool f) { m_flags.push_back(f); }\n-    void pop_back() { m_flags.pop_back(); }\n-    void toggle_top() { m_flags.back() = !m_flags.back(); }\n+    bool empty() { return m_stack_size == 0; }\n+    bool all_true() { return m_first_false_pos == NO_FALSE; }\n+    void push_back(bool f)\n+    {\n+        if (m_first_false_pos == NO_FALSE && !f) {\n+            // The stack consists of all true values, and a false is added.\n+            // The first false value will appear at the current size.\n+            m_first_false_pos = m_stack_size;\n+        }\n+        ++m_stack_size;\n+    }\n+    void pop_back()\n+    {\n+        assert(m_stack_size > 0);\n+        --m_stack_size;\n+        if (m_first_false_pos == m_stack_size) {\n+            // When popping off the first false value, everything becomes true.\n+            m_first_false_pos = NO_FALSE;\n+        }\n+    }\n+    void toggle_top()\n+    {\n+        assert(m_stack_size > 0);\n+        if (m_first_false_pos == NO_FALSE) {\n+            // The current stack is all true values; the first false will be the top.\n+            m_first_false_pos = m_stack_size - 1;\n+        } else if (m_first_false_pos == m_stack_size - 1) {\n+            // The top is the first false value; toggling it will make everything true.\n+            m_first_false_pos = NO_FALSE;\n+        } else {\n+            // There is a false value, but not on top. No action is needed as toggling\n+            // anything but the first false value is unobservable.\n+        }\n+    }\n };\n }\n "
      }
    ]
  }
]